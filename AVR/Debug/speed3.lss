
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000248  00800060  000052d4  00005368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045c  008002a8  008002a8  000055b0  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00005650  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006969  00000000  00000000  00005a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e44  00000000  00000000  0000c3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000294c  00000000  00000000  0000d21d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca0  00000000  00000000  0000fb6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001042  00000000  00000000  0001080c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ab3  00000000  00000000  0001184e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00017301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__vector_9>
      28:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	a1 19       	sub	r26, r1
      56:	c7 19       	sub	r28, r7
      58:	ed 19       	sub	r30, r13
      5a:	3c 1a       	sub	r3, r28
      5c:	8b 1a       	sub	r8, r27
      5e:	a7 1a       	sub	r10, r23
      60:	c3 1a       	sub	r12, r19
      62:	df 1a       	sub	r13, r31
      64:	2e 1b       	sub	r18, r30
      66:	4e 1b       	sub	r20, r30
      68:	6a 1b       	sub	r22, r26
      6a:	88 1b       	sub	r24, r24
      6c:	94 1b       	sub	r25, r20
      6e:	97 1b       	sub	r25, r23
      70:	07 1c       	adc	r0, r7
      72:	3d 1c       	adc	r3, r13

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	12 e0       	ldi	r17, 0x02	; 2
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e4 ed       	ldi	r30, 0xD4	; 212
    1556:	f2 e5       	ldi	r31, 0x52	; 82
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a8 3a       	cpi	r26, 0xA8	; 168
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	27 e0       	ldi	r18, 0x07	; 7
    1566:	a8 ea       	ldi	r26, 0xA8	; 168
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	a4 30       	cpi	r26, 0x04	; 4
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 d5 17 	call	0x2faa	; 0x2faa <main>
    1578:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2939>:
	int8_t currentItem = 0;
restore_initial_value:
	tempValue = currValue;
	valueLength = 0;
	uint16_t new_value (void)	//gathering digits back to the integer
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	8c 91       	ld	r24, X
    1592:	13 97       	sbiw	r26, 0x03	; 3
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	8c 93       	st	X, r24
    159a:	12 97       	sbiw	r26, 0x02	; 2
    159c:	88 23       	and	r24, r24
    159e:	7c f1       	brlt	.+94     	; 0x15fe <new_value.2939+0x7e>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	0d 91       	ld	r16, X+
    15a2:	1c 91       	ld	r17, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	e0 e0       	ldi	r30, 0x00	; 0
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	68 2f       	mov	r22, r24
    15ac:	08 2e       	mov	r0, r24
    15ae:	00 0c       	add	r0, r0
    15b0:	77 0b       	sbc	r23, r23
    15b2:	98 01       	movw	r18, r16
    15b4:	26 0f       	add	r18, r22
    15b6:	37 1f       	adc	r19, r23
    15b8:	e9 01       	movw	r28, r18
    15ba:	28 81       	ld	r18, Y
    15bc:	02 2e       	mov	r0, r18
    15be:	00 0c       	add	r0, r0
    15c0:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	94 f4       	brge	.+36     	; 0x15ec <new_value.2939+0x6c>
    15c8:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15ca:	a9 01       	movw	r20, r18
    15cc:	44 0f       	add	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	24 0f       	add	r18, r20
    15de:	35 1f       	adc	r19, r21
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	49 2f       	mov	r20, r25
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	46 17       	cp	r20, r22
    15e8:	57 07       	cpc	r21, r23
    15ea:	7c f3       	brlt	.-34     	; 0x15ca <new_value.2939+0x4a>
				tenPower*=10;
			}
			newValue += tenPower;
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	81 50       	subi	r24, 0x01	; 1
	tempValue = currValue;
	valueLength = 0;
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f2:	12 96       	adiw	r26, 0x02	; 2
    15f4:	8c 93       	st	X, r24
    15f6:	12 97       	sbiw	r26, 0x02	; 2
    15f8:	88 23       	and	r24, r24
    15fa:	bc f6       	brge	.-82     	; 0x15aa <new_value.2939+0x2a>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <new_value.2939+0x82>
restore_initial_value:
	tempValue = currValue;
	valueLength = 0;
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
    15fe:	e0 e0       	ldi	r30, 0x00	; 0
    1600:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1602:	cf 01       	movw	r24, r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	3f 90       	pop	r3
    160e:	2f 90       	pop	r2
    1610:	08 95       	ret

00001612 <print_min_max.2924>:
	GLCD_PrintString("Edit");
	GLCD_GotoXY(90,36);
	GLCD_PrintString("Exit");
	GLCD_GotoXY(90,48);
	GLCD_PrintString("Save");
	void print_min_max(){
    1612:	2f 92       	push	r2
    1614:	3f 92       	push	r3
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	e1 01       	movw	r28, r2
			GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	48 e0       	ldi	r20, 0x08	; 8
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	80 ea       	ldi	r24, 0xA0	; 160
    1638:	9b e0       	ldi	r25, 0x0B	; 11
    163a:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
			GLCD_GotoXY(6,41);
    163e:	69 e2       	ldi	r22, 0x29	; 41
    1640:	86 e0       	ldi	r24, 0x06	; 6
    1642:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
			GLCD_PrintString("min:");
    1646:	86 e6       	ldi	r24, 0x66	; 102
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
			GLCD_GotoXY(6,51);
    164e:	63 e3       	ldi	r22, 0x33	; 51
    1650:	86 e0       	ldi	r24, 0x06	; 6
    1652:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
			GLCD_PrintString("max:");
    1656:	8b e6       	ldi	r24, 0x6B	; 107
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
			if (tens){
    165e:	48 85       	ldd	r20, Y+8	; 0x08
    1660:	44 23       	and	r20, r20
    1662:	09 f4       	brne	.+2      	; 0x1666 <print_min_max.2924+0x54>
    1664:	4d c0       	rjmp	.+154    	; 0x1700 <print_min_max.2924+0xee>
				uint16_t devider = 1;
				for (int8_t i = 0;i<tens;i++){devider*=10;}
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	14 16       	cp	r1, r20
    166a:	15 06       	cpc	r1, r21
    166c:	cc f4       	brge	.+50     	; 0x16a0 <print_min_max.2924+0x8e>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	01 e0       	ldi	r16, 0x01	; 1
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	98 01       	movw	r18, r16
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	68 01       	movw	r12, r16
    167c:	cc 0c       	add	r12, r12
    167e:	dd 1c       	adc	r13, r13
    1680:	cc 0c       	add	r12, r12
    1682:	dd 1c       	adc	r13, r13
    1684:	cc 0c       	add	r12, r12
    1686:	dd 1c       	adc	r13, r13
    1688:	89 01       	movw	r16, r18
    168a:	0c 0d       	add	r16, r12
    168c:	1d 1d       	adc	r17, r13
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	28 2f       	mov	r18, r24
    1692:	08 2e       	mov	r0, r24
    1694:	00 0c       	add	r0, r0
    1696:	33 0b       	sbc	r19, r19
    1698:	24 17       	cp	r18, r20
    169a:	35 07       	cpc	r19, r21
    169c:	5c f3       	brlt	.-42     	; 0x1674 <print_min_max.2924+0x62>
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <print_min_max.2924+0x92>
    16a0:	01 e0       	ldi	r16, 0x01	; 1
    16a2:	10 e0       	ldi	r17, 0x00	; 0
				GLCD_GotoXY(30,41);
    16a4:	69 e2       	ldi	r22, 0x29	; 41
    16a6:	8e e1       	ldi	r24, 0x1E	; 30
    16a8:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
				GLCD_PrintDouble(minValue/(double)devider,devider);
    16ac:	68 01       	movw	r12, r16
    16ae:	e1 2c       	mov	r14, r1
    16b0:	f1 2c       	mov	r15, r1
    16b2:	c7 01       	movw	r24, r14
    16b4:	b6 01       	movw	r22, r12
    16b6:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    16ba:	4b 01       	movw	r8, r22
    16bc:	5c 01       	movw	r10, r24
    16be:	6e 81       	ldd	r22, Y+6	; 0x06
    16c0:	7f 81       	ldd	r23, Y+7	; 0x07
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    16ca:	a5 01       	movw	r20, r10
    16cc:	94 01       	movw	r18, r8
    16ce:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    16d2:	a7 01       	movw	r20, r14
    16d4:	96 01       	movw	r18, r12
    16d6:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
				GLCD_GotoXY(30,51);
    16da:	63 e3       	ldi	r22, 0x33	; 51
    16dc:	8e e1       	ldi	r24, 0x1E	; 30
    16de:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
				GLCD_PrintDouble(maxValue/(double)devider,devider);
    16e2:	6c 81       	ldd	r22, Y+4	; 0x04
    16e4:	7d 81       	ldd	r23, Y+5	; 0x05
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    16ee:	a5 01       	movw	r20, r10
    16f0:	94 01       	movw	r18, r8
    16f2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    16f6:	a7 01       	movw	r20, r14
    16f8:	96 01       	movw	r18, r12
    16fa:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <print_min_max.2924+0x116>
				}else{
				GLCD_GotoXY(30,41);
    1700:	69 e2       	ldi	r22, 0x29	; 41
    1702:	8e e1       	ldi	r24, 0x1E	; 30
    1704:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
				GLCD_PrintInteger(minValue);
    1708:	6e 81       	ldd	r22, Y+6	; 0x06
    170a:	7f 81       	ldd	r23, Y+7	; 0x07
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
				GLCD_GotoXY(30,51);
    1714:	63 e3       	ldi	r22, 0x33	; 51
    1716:	8e e1       	ldi	r24, 0x1E	; 30
    1718:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
				GLCD_PrintInteger(maxValue);
    171c:	6c 81       	ldd	r22, Y+4	; 0x04
    171e:	7d 81       	ldd	r23, Y+5	; 0x05
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
			}
			GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	41 e1       	ldi	r20, 0x11	; 17
    172c:	6c e0       	ldi	r22, 0x0C	; 12
    172e:	84 e7       	ldi	r24, 0x74	; 116
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
		}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	3f 90       	pop	r3
    1750:	2f 90       	pop	r2
    1752:	08 95       	ret

00001754 <set_default_values>:
	0b00001000,
	0b00000100			
};
const uint8_t batteryCharge[]={BRICK_1,BRICK_2,BRICK_3,BRICK_4,BRICK_5,BRICK_6,BRICK_7,BRICK_8,BRICK_9,BRICK_10};
void set_default_values(){
	 oledBrightness = OLED_BRIGHTNESS_DEFAULT;
    1754:	8a ef       	ldi	r24, 0xFA	; 250
    1756:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <oledBrightness>
	 magnetsOnWheel = MAGNETS_ON_WHEEL_DEFAULT;
    175a:	86 e0       	ldi	r24, 0x06	; 6
    175c:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <magnetsOnWheel>
	 gearRatio = GEAR_RATIO_DEFAULT;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e8       	ldi	r26, 0x80	; 128
    1766:	bf e3       	ldi	r27, 0x3F	; 63
    1768:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <gearRatio>
    176c:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <gearRatio+0x1>
    1770:	a0 93 e8 02 	sts	0x02E8, r26	; 0x8002e8 <gearRatio+0x2>
    1774:	b0 93 e9 02 	sts	0x02E9, r27	; 0x8002e9 <gearRatio+0x3>
	 wheelDiameter = WHEEL_DIAMETER_DEFAULT;	
    1778:	83 e3       	ldi	r24, 0x33	; 51
    177a:	93 e3       	ldi	r25, 0x33	; 51
    177c:	a3 e3       	ldi	r26, 0x33	; 51
    177e:	bf e3       	ldi	r27, 0x3F	; 63
    1780:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <wheelDiameter>
    1784:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <wheelDiameter+0x1>
    1788:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <wheelDiameter+0x2>
    178c:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <wheelDiameter+0x3>
	 degreesPerKmh = DEGREES_PER_KMH_DEFAULT;
    1790:	83 e3       	ldi	r24, 0x33	; 51
    1792:	93 e3       	ldi	r25, 0x33	; 51
    1794:	a3 ea       	ldi	r26, 0xA3	; 163
    1796:	bf e3       	ldi	r27, 0x3F	; 63
    1798:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <degreesPerKmh>
    179c:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <degreesPerKmh+0x1>
    17a0:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <degreesPerKmh+0x2>
    17a4:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <degreesPerKmh+0x3>
	 pwmHandLight = PWM_HAND_DEFAULT;
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	93 e0       	ldi	r25, 0x03	; 3
    17ac:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pwmHandLight+0x1>
    17b0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pwmHandLight>
	 pwmDialLight = PWM_DIAL_DEFAULT;
    17b4:	80 e8       	ldi	r24, 0x80	; 128
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <pwmDialLight+0x1>
    17bc:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <pwmDialLight>
	 maxSpeedOnDial	= MAX_SPEED_DEFAULT;
    17c0:	8e eb       	ldi	r24, 0xBE	; 190
    17c2:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <maxSpeedOnDial>
	 stepInterval = STEP_INTERVAL_DEFAULT;
    17c6:	86 e9       	ldi	r24, 0x96	; 150
    17c8:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <stepInterval>
	 stepperMotorSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
    17cc:	80 e6       	ldi	r24, 0x60	; 96
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <stepperMotorSteps+0x1>
    17d4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <stepperMotorSteps>
	 stepMode = STEP_MODE_DEFAULT;
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <stepMode>
    17de:	08 95       	ret

000017e0 <step>:
		OCR0 = 0;
	}
}
void step(uint8_t mode){
	uint8_t tempPort = 0;
	if (dir)
    17e0:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <dir>
    17e4:	99 23       	and	r25, r25
    17e6:	81 f0       	breq	.+32     	; 0x1808 <step+0x28>
	{
		phase++;
    17e8:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <phase>
    17ec:	9f 5f       	subi	r25, 0xFF	; 255
    17ee:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <phase>
		steps++;
    17f2:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <steps>
    17f6:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <steps+0x1>
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <steps+0x1>
    1802:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <steps>
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <step+0x46>
	}
	else
	{
		phase--;
    1808:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <phase>
    180c:	91 50       	subi	r25, 0x01	; 1
    180e:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <phase>
		steps--;
    1812:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <steps>
    1816:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <steps+0x1>
    181a:	21 50       	subi	r18, 0x01	; 1
    181c:	31 09       	sbc	r19, r1
    181e:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <steps+0x1>
    1822:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <steps>
	}
	if (phase < 0) phase = 7;
    1826:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <phase>
    182a:	99 23       	and	r25, r25
    182c:	24 f4       	brge	.+8      	; 0x1836 <step+0x56>
    182e:	97 e0       	ldi	r25, 0x07	; 7
    1830:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <phase>
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <step+0x62>
	else if (phase > 7) phase = 0;
    1836:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <phase>
    183a:	98 30       	cpi	r25, 0x08	; 8
    183c:	14 f0       	brlt	.+4      	; 0x1842 <step+0x62>
    183e:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <phase>
	tempPort = PORTA&~0x0F; 
    1842:	9b b3       	in	r25, 0x1b	; 27
    1844:	90 7f       	andi	r25, 0xF0	; 240
	if(mode == HALF_STEP)		tempPort|=phaseArrayHalfStep[phase];
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	51 f4       	brne	.+20     	; 0x185e <step+0x7e>
    184a:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <phase>
    184e:	0e 2e       	mov	r0, r30
    1850:	00 0c       	add	r0, r0
    1852:	ff 0b       	sbc	r31, r31
    1854:	e8 56       	subi	r30, 0x68	; 104
    1856:	fd 4f       	sbci	r31, 0xFD	; 253
    1858:	80 81       	ld	r24, Z
    185a:	98 2b       	or	r25, r24
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <step+0x94>
	else if(mode == FULL_STEP)  tempPort|=phaseArrayFullStep[phase];
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	49 f4       	brne	.+18     	; 0x1874 <step+0x94>
    1862:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <phase>
    1866:	0e 2e       	mov	r0, r30
    1868:	00 0c       	add	r0, r0
    186a:	ff 0b       	sbc	r31, r31
    186c:	e0 56       	subi	r30, 0x60	; 96
    186e:	fd 4f       	sbci	r31, 0xFD	; 253
    1870:	80 81       	ld	r24, Z
    1872:	98 2b       	or	r25, r24
	PORTA = tempPort;
    1874:	9b bb       	out	0x1b, r25	; 27
    1876:	08 95       	ret

00001878 <__vector_10>:
		if(!debugMode)signal_monitor();else debug_screen();
		if(button_monitor()==BUTTON_SET) menu_screen();
	}
	return 0;
}
ISR(TIMER0_COMP_vect){
    1878:	1f 92       	push	r1
    187a:	0f 92       	push	r0
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	0f 92       	push	r0
    1880:	11 24       	eor	r1, r1
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	ef 93       	push	r30
    1898:	ff 93       	push	r31
	step(stepMode);
    189a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <stepMode>
    189e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <step>
	if (steps == newSteps){	//if the required arrow position is reached - stop Stepper Motor rotation
    18a2:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <steps>
    18a6:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <steps+0x1>
    18aa:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <newSteps>
    18ae:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <newSteps+0x1>
    18b2:	28 17       	cp	r18, r24
    18b4:	39 07       	cpc	r19, r25
    18b6:	39 f4       	brne	.+14     	; 0x18c6 <__vector_10+0x4e>
		handMoving = 0;
    18b8:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <handMoving>
		TIMSK&=~_BV(OCIE0);
    18bc:	89 b7       	in	r24, 0x39	; 57
    18be:	8d 7f       	andi	r24, 0xFD	; 253
    18c0:	89 bf       	out	0x39, r24	; 57
		TCCR0 = 0;
    18c2:	13 be       	out	0x33, r1	; 51
		OCR0 = 0;
    18c4:	1c be       	out	0x3c, r1	; 60
	}
}
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <__vector_4>:
	tempPort = PORTA&~0x0F; 
	if(mode == HALF_STEP)		tempPort|=phaseArrayHalfStep[phase];
	else if(mode == FULL_STEP)  tempPort|=phaseArrayFullStep[phase];
	PORTA = tempPort;
}
ISR(TIMER2_COMP_vect){
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
	speedTimerRough++; //speedTimer increments each period timePerTic*TIC
    18f6:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <speedTimerRough>
    18fa:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <speedTimerRough+0x1>
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <speedTimerRough+0x1>
    1904:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <speedTimerRough>
}
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <__vector_9>:
ISR(TIMER1_OVF_vect){
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    1924:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <signalOn>
    1928:	88 23       	and	r24, r24
    192a:	49 f0       	breq	.+18     	; 0x193e <__vector_9+0x28>
    192c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <signalCounter>
    1930:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <signalCounter+0x1>
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <signalCounter+0x1>
    193a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <signalCounter>
}
    193e:	9f 91       	pop	r25
    1940:	8f 91       	pop	r24
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <__vector_2>:
ISR(INT1_vect){
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
//interrupt occurs when Hall sensor is triggered
if (firstMeasure)
    195a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <firstMeasure>
    195e:	88 23       	and	r24, r24
    1960:	d1 f0       	breq	.+52     	; 0x1996 <__vector_2+0x4a>
	{
		previousTCNT2 = TCNT2;
    1962:	84 b5       	in	r24, 0x24	; 36
    1964:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <previousTCNT2>
		TCNT2 = 0;
    1968:	14 bc       	out	0x24, r1	; 36
		speedTimerRoughPrevious = speedTimerRough;
    196a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <speedTimerRough>
    196e:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <speedTimerRough+0x1>
    1972:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <speedTimerRoughPrevious+0x1>
    1976:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <speedTimerRoughPrevious>
		speedTimerRough = 0;
    197a:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <speedTimerRough+0x1>
    197e:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <speedTimerRough>
		sensorTriggering++;
    1982:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <sensorTriggering>
    1986:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <sensorTriggering+0x1>
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <sensorTriggering+0x1>
    1990:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <sensorTriggering>
    1994:	07 c0       	rjmp	.+14     	; 0x19a4 <__vector_2+0x58>
	}
else
	{
		TCNT2 = 0;
    1996:	14 bc       	out	0x24, r1	; 36
		TIMSK|=_BV(OCIE2);	//first triggering of the Hall sensor enables TIMER2 compare match interrupt
    1998:	89 b7       	in	r24, 0x39	; 57
    199a:	80 68       	ori	r24, 0x80	; 128
    199c:	89 bf       	out	0x39, r24	; 57
		firstMeasure = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <firstMeasure>
	}
}
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <main_screen>:
		menu_screen();
		}
	}
}
void main_screen()
{
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
	if (signalOn) return;
    19c0:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <signalOn>
    19c4:	81 11       	cpse	r24, r1
    19c6:	e6 c0       	rjmp	.+460    	; 0x1b94 <main_screen+0x1e2>
	uint8_t offsetX = 10;
	uint8_t offsetY = 11;
	GLCD_Clear();
    19c8:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
	GLCD_DrawRectangle(offsetX,offsetY,23+offsetX,12+offsetY,GLCD_Black);
    19cc:	0f ef       	ldi	r16, 0xFF	; 255
    19ce:	27 e1       	ldi	r18, 0x17	; 23
    19d0:	41 e2       	ldi	r20, 0x21	; 33
    19d2:	6b e0       	ldi	r22, 0x0B	; 11
    19d4:	8a e0       	ldi	r24, 0x0A	; 10
    19d6:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
	GLCD_DrawRectangle(24+offsetX,3+offsetY,25+offsetX,9+offsetY,GLCD_Black);
    19da:	24 e1       	ldi	r18, 0x14	; 20
    19dc:	43 e2       	ldi	r20, 0x23	; 35
    19de:	6e e0       	ldi	r22, 0x0E	; 14
    19e0:	82 e2       	ldi	r24, 0x22	; 34
    19e2:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
	uint8_t batteryChargePercent = 0;
	for (uint8_t i = 0;i<10;i++){
		if (voltage>=batteryCharge[i])batteryChargePercent +=10;
    19e6:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <voltage>
    19ea:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <voltage+0x1>
    19ee:	ee e8       	ldi	r30, 0x8E	; 142
    19f0:	f2 e0       	ldi	r31, 0x02	; 2
    19f2:	28 e9       	ldi	r18, 0x98	; 152
    19f4:	32 e0       	ldi	r19, 0x02	; 2
	uint8_t offsetX = 10;
	uint8_t offsetY = 11;
	GLCD_Clear();
	GLCD_DrawRectangle(offsetX,offsetY,23+offsetX,12+offsetY,GLCD_Black);
	GLCD_DrawRectangle(24+offsetX,3+offsetY,25+offsetX,9+offsetY,GLCD_Black);
	uint8_t batteryChargePercent = 0;
    19f6:	c0 e0       	ldi	r28, 0x00	; 0
	for (uint8_t i = 0;i<10;i++){
		if (voltage>=batteryCharge[i])batteryChargePercent +=10;
    19f8:	81 91       	ld	r24, Z+
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	48 17       	cp	r20, r24
    19fe:	59 07       	cpc	r21, r25
    1a00:	0c f0       	brlt	.+2      	; 0x1a04 <main_screen+0x52>
    1a02:	c6 5f       	subi	r28, 0xF6	; 246
	uint8_t offsetY = 11;
	GLCD_Clear();
	GLCD_DrawRectangle(offsetX,offsetY,23+offsetX,12+offsetY,GLCD_Black);
	GLCD_DrawRectangle(24+offsetX,3+offsetY,25+offsetX,9+offsetY,GLCD_Black);
	uint8_t batteryChargePercent = 0;
	for (uint8_t i = 0;i<10;i++){
    1a04:	e2 17       	cp	r30, r18
    1a06:	f3 07       	cpc	r31, r19
    1a08:	b9 f7       	brne	.-18     	; 0x19f8 <main_screen+0x46>
		if (voltage>=batteryCharge[i])batteryChargePercent +=10;
	}
	if (batteryChargePercent)GLCD_FillRectangle(2+offsetX,2+offsetY,batteryChargePercent/10*2+1+offsetX,10+offsetY,GLCD_Black); //charge bar
    1a0a:	cc 23       	and	r28, r28
    1a0c:	79 f0       	breq	.+30     	; 0x1a2c <main_screen+0x7a>
    1a0e:	4d ec       	ldi	r20, 0xCD	; 205
    1a10:	c4 9f       	mul	r28, r20
    1a12:	41 2d       	mov	r20, r1
    1a14:	11 24       	eor	r1, r1
    1a16:	46 95       	lsr	r20
    1a18:	46 95       	lsr	r20
    1a1a:	46 95       	lsr	r20
    1a1c:	44 0f       	add	r20, r20
    1a1e:	45 5f       	subi	r20, 0xF5	; 245
    1a20:	0f ef       	ldi	r16, 0xFF	; 255
    1a22:	25 e1       	ldi	r18, 0x15	; 21
    1a24:	6d e0       	ldi	r22, 0x0D	; 13
    1a26:	8c e0       	ldi	r24, 0x0C	; 12
    1a28:	0e 94 aa 20 	call	0x4154	; 0x4154 <GLCD_FillRectangle>

	GLCD_GotoXY(65+offsetX, 3+offsetY);
    1a2c:	6e e0       	ldi	r22, 0x0E	; 14
    1a2e:	8b e4       	ldi	r24, 0x4B	; 75
    1a30:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	48 e0       	ldi	r20, 0x08	; 8
    1a38:	65 e0       	ldi	r22, 0x05	; 5
    1a3a:	80 ea       	ldi	r24, 0xA0	; 160
    1a3c:	9b e0       	ldi	r25, 0x0B	; 11
    1a3e:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
	GLCD_PrintDouble(voltage/10.0,10);
    1a42:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <voltage>
    1a46:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <voltage+0x1>
    1a4a:	07 2e       	mov	r0, r23
    1a4c:	00 0c       	add	r0, r0
    1a4e:	88 0b       	sbc	r24, r24
    1a50:	99 0b       	sbc	r25, r25
    1a52:	0e 94 65 26 	call	0x4cca	; 0x4cca <__floatsisf>
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    1a62:	2a e0       	ldi	r18, 0x0A	; 10
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
	GLCD_PrintString("V");
    1a6e:	80 e7       	ldi	r24, 0x70	; 112
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>

	GLCD_GotoXY(31+offsetX, 3+offsetY);
    1a76:	6e e0       	ldi	r22, 0x0E	; 14
    1a78:	89 e2       	ldi	r24, 0x29	; 41
    1a7a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_PrintInteger(batteryChargePercent);
    1a7e:	6c 2f       	mov	r22, r28
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	GLCD_PrintString("%");
    1a8a:	82 e7       	ldi	r24, 0x72	; 114
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>

	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	62 e1       	ldi	r22, 0x12	; 18
    1a98:	86 e3       	ldi	r24, 0x36	; 54
    1a9a:	94 e0       	ldi	r25, 0x04	; 4
    1a9c:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
	GLCD_GotoXY(4, 31);
    1aa0:	6f e1       	ldi	r22, 0x1F	; 31
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>

	uint32_t tempRun = runInMeters/100;
    1aa8:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <runInMeters>
    1aac:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <runInMeters+0x1>
    1ab0:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <runInMeters+0x2>
    1ab4:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    1ab8:	24 e6       	ldi	r18, 0x64	; 100
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__udivmodsi4>
	int8_t l = 0;
		
	while(tempRun){
    1ac4:	21 15       	cp	r18, r1
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	41 05       	cpc	r20, r1
    1aca:	51 05       	cpc	r21, r1
    1acc:	d9 f0       	breq	.+54     	; 0x1b04 <main_screen+0x152>
    1ace:	c0 e0       	ldi	r28, 0x00	; 0
		tempRun/=10;
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	fa e0       	ldi	r31, 0x0A	; 10
    1ad4:	cf 2e       	mov	r12, r31
    1ad6:	d1 2c       	mov	r13, r1
    1ad8:	e1 2c       	mov	r14, r1
    1ada:	f1 2c       	mov	r15, r1
    1adc:	f0 2d       	mov	r31, r0
    1ade:	ca 01       	movw	r24, r20
    1ae0:	b9 01       	movw	r22, r18
    1ae2:	a7 01       	movw	r20, r14
    1ae4:	96 01       	movw	r18, r12
    1ae6:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__udivmodsi4>
    1aea:	cf 5f       	subi	r28, 0xFF	; 255
	GLCD_GotoXY(4, 31);

	uint32_t tempRun = runInMeters/100;
	int8_t l = 0;
		
	while(tempRun){
    1aec:	21 15       	cp	r18, r1
    1aee:	31 05       	cpc	r19, r1
    1af0:	41 05       	cpc	r20, r1
    1af2:	51 05       	cpc	r21, r1
    1af4:	a1 f7       	brne	.-24     	; 0x1ade <main_screen+0x12c>
		tempRun/=10;
		l++;
	}
	if (l<2) l = 2;
    1af6:	c2 30       	cpi	r28, 0x02	; 2
    1af8:	3c f0       	brlt	.+14     	; 0x1b08 <main_screen+0x156>
	int8_t zeros = 6-l;
    1afa:	d6 e0       	ldi	r29, 0x06	; 6
    1afc:	dc 1b       	sub	r29, r28
			for (int8_t i = 0;i<zeros;i++){
    1afe:	1d 16       	cp	r1, r29
    1b00:	24 f0       	brlt	.+8      	; 0x1b0a <main_screen+0x158>
    1b02:	0b c0       	rjmp	.+22     	; 0x1b1a <main_screen+0x168>
	while(tempRun){
		tempRun/=10;
		l++;
	}
	if (l<2) l = 2;
	int8_t zeros = 6-l;
    1b04:	d4 e0       	ldi	r29, 0x04	; 4
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <main_screen+0x158>
    1b08:	d4 e0       	ldi	r29, 0x04	; 4
    1b0a:	c0 e0       	ldi	r28, 0x00	; 0
			for (int8_t i = 0;i<zeros;i++){
				GLCD_PrintString("0");
    1b0c:	84 e7       	ldi	r24, 0x74	; 116
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
    1b14:	cf 5f       	subi	r28, 0xFF	; 255
		tempRun/=10;
		l++;
	}
	if (l<2) l = 2;
	int8_t zeros = 6-l;
			for (int8_t i = 0;i<zeros;i++){
    1b16:	cd 17       	cp	r28, r29
    1b18:	cc f3       	brlt	.-14     	; 0x1b0c <main_screen+0x15a>
				GLCD_PrintString("0");
			}
	GLCD_PrintInteger(runInMeters/1000);
    1b1a:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <runInMeters>
    1b1e:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <runInMeters+0x1>
    1b22:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <runInMeters+0x2>
    1b26:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    1b2a:	28 ee       	ldi	r18, 0xE8	; 232
    1b2c:	33 e0       	ldi	r19, 0x03	; 3
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__udivmodsi4>
    1b36:	ca 01       	movw	r24, r20
    1b38:	b9 01       	movw	r22, r18
    1b3a:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	if(runInMeters<100000000){	
    1b3e:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <runInMeters>
    1b42:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <runInMeters+0x1>
    1b46:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <runInMeters+0x2>
    1b4a:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    1b4e:	81 15       	cp	r24, r1
    1b50:	91 4e       	sbci	r25, 0xE1	; 225
    1b52:	a5 4f       	sbci	r26, 0xF5	; 245
    1b54:	b5 40       	sbci	r27, 0x05	; 5
    1b56:	e0 f4       	brcc	.+56     	; 0x1b90 <main_screen+0x1de>
		GLCD_PrintString(".");
    1b58:	8c e8       	ldi	r24, 0x8C	; 140
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_PrintInteger((runInMeters%1000)/100);
    1b60:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <runInMeters>
    1b64:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <runInMeters+0x1>
    1b68:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <runInMeters+0x2>
    1b6c:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    1b70:	28 ee       	ldi	r18, 0xE8	; 232
    1b72:	33 e0       	ldi	r19, 0x03	; 3
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__udivmodsi4>
    1b7c:	24 e6       	ldi	r18, 0x64	; 100
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__udivmodsi4>
    1b88:	ca 01       	movw	r24, r20
    1b8a:	b9 01       	movw	r22, r18
    1b8c:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	}
	GLCD_Render();
    1b90:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	0f 91       	pop	r16
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	df 90       	pop	r13
    1ba0:	cf 90       	pop	r12
    1ba2:	08 95       	ret

00001ba4 <hand_position_update>:
void hand_position_update(){
	newSteps = speedKmh/kmhPerStep;
    1ba4:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <kmhPerStep>
    1ba8:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <kmhPerStep+0x1>
    1bac:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <kmhPerStep+0x2>
    1bb0:	50 91 bf 02 	lds	r21, 0x02BF	; 0x8002bf <kmhPerStep+0x3>
    1bb4:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <speedKmh>
    1bb8:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <speedKmh+0x1>
    1bbc:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <speedKmh+0x2>
    1bc0:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <speedKmh+0x3>
    1bc4:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    1bc8:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    1bcc:	70 93 bb 02 	sts	0x02BB, r23	; 0x8002bb <newSteps+0x1>
    1bd0:	60 93 ba 02 	sts	0x02BA, r22	; 0x8002ba <newSteps>
	int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (how many steps the hand should be shifted)
    1bd4:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <steps>
    1bd8:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <steps+0x1>
    1bdc:	c9 01       	movw	r24, r18
    1bde:	86 1b       	sub	r24, r22
    1be0:	97 0b       	sbc	r25, r23
	if (shiftSteps==0)return;
    1be2:	99 f0       	breq	.+38     	; 0x1c0a <hand_position_update+0x66>
	if (shiftSteps > 0) dir = 0; else dir = 1;
    1be4:	1a f0       	brmi	.+6      	; 0x1bec <hand_position_update+0x48>
    1be6:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <dir>
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <hand_position_update+0x4e>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <dir>
	handMoving = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <handMoving>
	//Timer0 is used to generate pulses for Stepper Motor driver
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
    1bf8:	83 b7       	in	r24, 0x33	; 51
    1bfa:	8d 60       	ori	r24, 0x0D	; 13
    1bfc:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1bfe:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <stepInterval>
    1c02:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1c04:	89 b7       	in	r24, 0x39	; 57
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	89 bf       	out	0x39, r24	; 57
    1c0a:	08 95       	ret

00001c0c <button_monitor>:
		if (!debugMode)main_screen();//when the run changes by 100 meters - update data on the screen
	}
}
uint8_t button_monitor(){
	
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
    1c0c:	b5 9b       	sbis	0x16, 5	; 22
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <button_monitor+0xc>
    1c10:	b6 9b       	sbis	0x16, 6	; 22
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <button_monitor+0xc>
    1c14:	b7 99       	sbic	0x16, 7	; 22
    1c16:	29 c0       	rjmp	.+82     	; 0x1c6a <button_monitor+0x5e>
		return BUTTON_NONE;
	}
	if(!(PIN_SET)){
    1c18:	b5 99       	sbic	0x16, 5	; 22
    1c1a:	0b c0       	rjmp	.+22     	; 0x1c32 <button_monitor+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c1c:	2f ef       	ldi	r18, 0xFF	; 255
    1c1e:	80 e7       	ldi	r24, 0x70	; 112
    1c20:	92 e0       	ldi	r25, 0x02	; 2
    1c22:	21 50       	subi	r18, 0x01	; 1
    1c24:	80 40       	sbci	r24, 0x00	; 0
    1c26:	90 40       	sbci	r25, 0x00	; 0
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <button_monitor+0x16>
    1c2a:	00 c0       	rjmp	.+0      	; 0x1c2c <button_monitor+0x20>
    1c2c:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_SET)){
    1c2e:	b5 9b       	sbis	0x16, 5	; 22
    1c30:	1e c0       	rjmp	.+60     	; 0x1c6e <button_monitor+0x62>
			return BUTTON_SET;
		}
	}
	if(!(PIN_DOWN)){
    1c32:	b6 99       	sbic	0x16, 6	; 22
    1c34:	0b c0       	rjmp	.+22     	; 0x1c4c <button_monitor+0x40>
    1c36:	2f ef       	ldi	r18, 0xFF	; 255
    1c38:	80 e7       	ldi	r24, 0x70	; 112
    1c3a:	92 e0       	ldi	r25, 0x02	; 2
    1c3c:	21 50       	subi	r18, 0x01	; 1
    1c3e:	80 40       	sbci	r24, 0x00	; 0
    1c40:	90 40       	sbci	r25, 0x00	; 0
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <button_monitor+0x30>
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <button_monitor+0x3a>
    1c46:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_DOWN)){
    1c48:	b6 9b       	sbis	0x16, 6	; 22
    1c4a:	13 c0       	rjmp	.+38     	; 0x1c72 <button_monitor+0x66>
			return BUTTON_DOWN;
		}
	}
	if(!(PIN_UP)){
    1c4c:	b7 99       	sbic	0x16, 7	; 22
    1c4e:	13 c0       	rjmp	.+38     	; 0x1c76 <button_monitor+0x6a>
    1c50:	2f ef       	ldi	r18, 0xFF	; 255
    1c52:	80 e7       	ldi	r24, 0x70	; 112
    1c54:	92 e0       	ldi	r25, 0x02	; 2
    1c56:	21 50       	subi	r18, 0x01	; 1
    1c58:	80 40       	sbci	r24, 0x00	; 0
    1c5a:	90 40       	sbci	r25, 0x00	; 0
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <button_monitor+0x4a>
    1c5e:	00 c0       	rjmp	.+0      	; 0x1c60 <button_monitor+0x54>
    1c60:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_UP)){
    1c62:	b7 9b       	sbis	0x16, 7	; 22
    1c64:	0a c0       	rjmp	.+20     	; 0x1c7a <button_monitor+0x6e>
			return BUTTON_UP;
		}
	}
	return BUTTON_NONE;
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	08 95       	ret
	}
}
uint8_t button_monitor(){
	
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
		return BUTTON_NONE;
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	08 95       	ret
	}
	if(!(PIN_SET)){
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_SET)){
			return BUTTON_SET;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	08 95       	ret
		}
	}
	if(!(PIN_DOWN)){
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_DOWN)){
			return BUTTON_DOWN;
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_UP)){
			return BUTTON_UP;
		}
	}
	return BUTTON_NONE;
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	08 95       	ret
		}
	}
	if(!(PIN_UP)){
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_UP)){
			return BUTTON_UP;
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return BUTTON_NONE;
}
    1c7c:	08 95       	ret

00001c7e <yes_no_menu.2784>:
		TIMSK|=_BV(OCIE2);	//first triggering of the Hall sensor enables TIMER2 compare match interrupt
		firstMeasure = 1;
	}
}
void menu_screen(){
	uint8_t yes_no_menu(const char *textLine1, uint8_t offsetLine1, const char *textLine2, uint8_t offsetLine2){
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	7c 01       	movw	r14, r24
    1c8c:	06 2f       	mov	r16, r22
    1c8e:	ea 01       	movw	r28, r20
    1c90:	12 2f       	mov	r17, r18
		uint8_t yesOrNo = 0;
		GLCD_Clear();
    1c92:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
		GLCD_GotoLine(2);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_GotoX(offsetLine1);
    1c9c:	80 2f       	mov	r24, r16
    1c9e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintString(textLine1);
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoLine(4);
    1ca8:	84 e0       	ldi	r24, 0x04	; 4
    1caa:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_GotoX(offsetLine2);
    1cae:	81 2f       	mov	r24, r17
    1cb0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintString(textLine2);
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		
		GLCD_GotoLine(6);
    1cba:	86 e0       	ldi	r24, 0x06	; 6
    1cbc:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_GotoX(28);
    1cc0:	8c e1       	ldi	r24, 0x1C	; 28
    1cc2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintString("NO");
    1cc6:	86 e7       	ldi	r24, 0x76	; 118
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(84);
    1cce:	84 e5       	ldi	r24, 0x54	; 84
    1cd0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintString("YES");
    1cd4:	89 e7       	ldi	r24, 0x79	; 121
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		
		GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    1cdc:	0f ef       	ldi	r16, 0xFF	; 255
    1cde:	29 e3       	ldi	r18, 0x39	; 57
    1ce0:	4e e2       	ldi	r20, 0x2E	; 46
    1ce2:	6d e2       	ldi	r22, 0x2D	; 45
    1ce4:	84 e1       	ldi	r24, 0x14	; 20
    1ce6:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
		GLCD_Render();
    1cea:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
		while(button_monitor());
    1cee:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	fc cf       	rjmp	.-8      	; 0x1cee <yes_no_menu.2784+0x70>
    1cf6:	c0 e0       	ldi	r28, 0x00	; 0
		while(1){
			uint8_t button = button_monitor();
			if ((button==BUTTON_UP)||(button==BUTTON_DOWN)){
				yesOrNo = yesOrNo^_BV(0);
    1cf8:	11 e0       	ldi	r17, 0x01	; 1
				GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    1cfa:	db e3       	ldi	r29, 0x3B	; 59
				GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    1cfc:	0f 2e       	mov	r0, r31
    1cfe:	f9 e6       	ldi	r31, 0x69	; 105
    1d00:	ef 2e       	mov	r14, r31
    1d02:	f0 2d       	mov	r31, r0
    1d04:	0f 2e       	mov	r0, r31
    1d06:	f4 e1       	ldi	r31, 0x14	; 20
    1d08:	ff 2e       	mov	r15, r31
    1d0a:	f0 2d       	mov	r31, r0
		
		GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
		GLCD_Render();
		while(button_monitor());
		while(1){
			uint8_t button = button_monitor();
    1d0c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
			if ((button==BUTTON_UP)||(button==BUTTON_DOWN)){
    1d10:	9e ef       	ldi	r25, 0xFE	; 254
    1d12:	98 0f       	add	r25, r24
    1d14:	92 30       	cpi	r25, 0x02	; 2
    1d16:	f8 f4       	brcc	.+62     	; 0x1d56 <yes_no_menu.2784+0xd8>
				yesOrNo = yesOrNo^_BV(0);
    1d18:	c1 27       	eor	r28, r17
				GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    1d1a:	cd 9f       	mul	r28, r29
    1d1c:	80 2d       	mov	r24, r0
    1d1e:	11 24       	eor	r1, r1
    1d20:	4e e2       	ldi	r20, 0x2E	; 46
    1d22:	48 0f       	add	r20, r24
    1d24:	0f ef       	ldi	r16, 0xFF	; 255
    1d26:	29 e3       	ldi	r18, 0x39	; 57
    1d28:	6d e2       	ldi	r22, 0x2D	; 45
    1d2a:	8c 5e       	subi	r24, 0xEC	; 236
    1d2c:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
				GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    1d30:	cc 23       	and	r28, r28
    1d32:	19 f0       	breq	.+6      	; 0x1d3a <yes_no_menu.2784+0xbc>
    1d34:	4e e2       	ldi	r20, 0x2E	; 46
    1d36:	8f 2d       	mov	r24, r15
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <yes_no_menu.2784+0xc0>
    1d3a:	4e 2d       	mov	r20, r14
    1d3c:	8f e4       	ldi	r24, 0x4F	; 79
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	29 e3       	ldi	r18, 0x39	; 57
    1d42:	6d e2       	ldi	r22, 0x2D	; 45
    1d44:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
				GLCD_Render();
    1d48:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
				while(button_monitor());
    1d4c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    1d50:	81 11       	cpse	r24, r1
    1d52:	fc cf       	rjmp	.-8      	; 0x1d4c <yes_no_menu.2784+0xce>
    1d54:	db cf       	rjmp	.-74     	; 0x1d0c <yes_no_menu.2784+0x8e>
			}
			else if(button==BUTTON_SET) return yesOrNo;
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	c9 f6       	brne	.-78     	; 0x1d0c <yes_no_menu.2784+0x8e>
		}
	}
    1d5a:	8c 2f       	mov	r24, r28
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	08 95       	ret

00001d6a <hand_calibration>:
		}
	}
	return BUTTON_NONE;
}
void hand_calibration(){
	steps = 0;
    1d6a:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <steps+0x1>
    1d6e:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <steps>
	phase = 0;
    1d72:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <phase>
	newSteps = stepperMotorSteps*stepMode/4;	//moving hand 90 degrees clockwise
    1d76:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <stepMode>
    1d7a:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    1d7e:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    1d82:	42 9f       	mul	r20, r18
    1d84:	c0 01       	movw	r24, r0
    1d86:	43 9f       	mul	r20, r19
    1d88:	90 0d       	add	r25, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	96 95       	lsr	r25
    1d8e:	87 95       	ror	r24
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <newSteps+0x1>
    1d98:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <newSteps>
	dir = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <dir>
	handMoving = 1;
    1da2:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <handMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1da6:	83 b7       	in	r24, 0x33	; 51
    1da8:	8d 60       	ori	r24, 0x0D	; 13
    1daa:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1dac:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <stepInterval>
    1db0:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1db2:	89 b7       	in	r24, 0x39	; 57
    1db4:	82 60       	ori	r24, 0x02	; 2
    1db6:	89 bf       	out	0x39, r24	; 57
	while (handMoving);
    1db8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <handMoving>
    1dbc:	81 11       	cpse	r24, r1
    1dbe:	fc cf       	rjmp	.-8      	; 0x1db8 <hand_calibration+0x4e>
    1dc0:	2f ef       	ldi	r18, 0xFF	; 255
    1dc2:	82 e5       	ldi	r24, 0x52	; 82
    1dc4:	97 e0       	ldi	r25, 0x07	; 7
    1dc6:	21 50       	subi	r18, 0x01	; 1
    1dc8:	80 40       	sbci	r24, 0x00	; 0
    1dca:	90 40       	sbci	r25, 0x00	; 0
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <hand_calibration+0x5c>
    1dce:	00 c0       	rjmp	.+0      	; 0x1dd0 <hand_calibration+0x66>
    1dd0:	00 00       	nop
	_delay_ms(150);
	steps = stepperMotorSteps*stepMode;
    1dd2:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <stepMode>
    1dd6:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    1dda:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    1dde:	42 9f       	mul	r20, r18
    1de0:	c0 01       	movw	r24, r0
    1de2:	43 9f       	mul	r20, r19
    1de4:	90 0d       	add	r25, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <steps+0x1>
    1dec:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1df0:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <newSteps+0x1>
    1df4:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <newSteps>
	dir = 0;
    1df8:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <dir>
	handMoving = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <handMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1e02:	83 b7       	in	r24, 0x33	; 51
    1e04:	8d 60       	ori	r24, 0x0D	; 13
    1e06:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1e08:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <stepInterval>
    1e0c:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1e0e:	89 b7       	in	r24, 0x39	; 57
    1e10:	82 60       	ori	r24, 0x02	; 2
    1e12:	89 bf       	out	0x39, r24	; 57
	while (handMoving);
    1e14:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <handMoving>
    1e18:	81 11       	cpse	r24, r1
    1e1a:	fc cf       	rjmp	.-8      	; 0x1e14 <hand_calibration+0xaa>
	steps = 0;
    1e1c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <steps+0x1>
    1e20:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <steps>
	newSteps = 0;
    1e24:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <newSteps+0x1>
    1e28:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <newSteps>
	handCalibrated = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <handCalibrated>
    1e32:	08 95       	ret

00001e34 <draw_arrow>:
}
void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1e34:	88 23       	and	r24, r24
    1e36:	81 f0       	breq	.+32     	; 0x1e58 <draw_arrow+0x24>
		GLCD_Clear();
    1e38:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1e3c:	67 e0       	ldi	r22, 0x07	; 7
    1e3e:	86 e1       	ldi	r24, 0x16	; 22
    1e40:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1e44:	2f ef       	ldi	r18, 0xFF	; 255
    1e46:	47 e3       	ldi	r20, 0x37	; 55
    1e48:	6c e5       	ldi	r22, 0x5C	; 92
    1e4a:	84 e6       	ldi	r24, 0x64	; 100
    1e4c:	90 e1       	ldi	r25, 0x10	; 16
    1e4e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <GLCD_DrawBitmap>
		GLCD_Render();
    1e52:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
    1e56:	08 95       	ret
		}else{
		GLCD_Clear();
    1e58:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1e5c:	67 e0       	ldi	r22, 0x07	; 7
    1e5e:	86 e1       	ldi	r24, 0x16	; 22
    1e60:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1e64:	2f ef       	ldi	r18, 0xFF	; 255
    1e66:	47 e3       	ldi	r20, 0x37	; 55
    1e68:	6c e5       	ldi	r22, 0x5C	; 92
    1e6a:	80 ee       	ldi	r24, 0xE0	; 224
    1e6c:	9d e0       	ldi	r25, 0x0D	; 13
    1e6e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <GLCD_DrawBitmap>
		GLCD_Render();
    1e72:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
    1e76:	08 95       	ret

00001e78 <draw_skull>:
	}
}
void draw_skull (void)
{
	GLCD_Clear();
    1e78:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
	GLCD_GotoXY(27, 7);
    1e7c:	67 e0       	ldi	r22, 0x07	; 7
    1e7e:	8b e1       	ldi	r24, 0x1B	; 27
    1e80:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1e84:	2f ef       	ldi	r18, 0xFF	; 255
    1e86:	44 e3       	ldi	r20, 0x34	; 52
    1e88:	66 e5       	ldi	r22, 0x56	; 86
    1e8a:	88 ee       	ldi	r24, 0xE8	; 232
    1e8c:	92 e1       	ldi	r25, 0x12	; 18
    1e8e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <GLCD_DrawBitmap>
	GLCD_Render();
    1e92:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
    1e96:	08 95       	ret

00001e98 <signal_monitor>:
			sei();
	}
	if (speedKmh>maxSpeedOnDial)speedKmh = maxSpeedOnDial;
}
void signal_monitor(){
	if(!(PIN_RIGHT)&&(PIN_LEFT)){
    1e98:	b4 99       	sbic	0x16, 4	; 22
    1e9a:	0d c0       	rjmp	.+26     	; 0x1eb6 <signal_monitor+0x1e>
    1e9c:	b3 9b       	sbis	0x16, 3	; 22
    1e9e:	0b c0       	rjmp	.+22     	; 0x1eb6 <signal_monitor+0x1e>
		draw_arrow(LEFT);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <draw_arrow>
		signalOn = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <signalOn>
		signalCounter = 0;
    1eac:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <signalCounter+0x1>
    1eb0:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <signalCounter>
    1eb4:	21 c0       	rjmp	.+66     	; 0x1ef8 <signal_monitor+0x60>
	}
	else if(!(PIN_LEFT)&&(PIN_RIGHT)){
    1eb6:	b3 99       	sbic	0x16, 3	; 22
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <signal_monitor+0x3c>
    1eba:	b4 9b       	sbis	0x16, 4	; 22
    1ebc:	0b c0       	rjmp	.+22     	; 0x1ed4 <signal_monitor+0x3c>
		draw_arrow(RIGHT);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <draw_arrow>
		signalOn = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <signalOn>
		signalCounter = 0;
    1eca:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <signalCounter+0x1>
    1ece:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <signalCounter>
    1ed2:	12 c0       	rjmp	.+36     	; 0x1ef8 <signal_monitor+0x60>
	}
	else if(!(PIN_RIGHT)&&!(PIN_LEFT)){
    1ed4:	b4 99       	sbic	0x16, 4	; 22
    1ed6:	0c c0       	rjmp	.+24     	; 0x1ef0 <signal_monitor+0x58>
    1ed8:	b3 99       	sbic	0x16, 3	; 22
    1eda:	0a c0       	rjmp	.+20     	; 0x1ef0 <signal_monitor+0x58>
		draw_skull();
    1edc:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <draw_skull>
		signalOn = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <signalOn>
		signalCounter = 0;
    1ee6:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <signalCounter+0x1>
    1eea:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <signalCounter>
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <signal_monitor+0x60>
	}
	if (!signalOn) return;
    1ef0:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <signalOn>
    1ef4:	88 23       	and	r24, r24
    1ef6:	e9 f0       	breq	.+58     	; 0x1f32 <signal_monitor+0x9a>
	if((PIN_LEFT)&&(PIN_RIGHT)){
    1ef8:	b3 9b       	sbis	0x16, 3	; 22
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <signal_monitor+0x76>
    1efc:	b4 9b       	sbis	0x16, 4	; 22
    1efe:	07 c0       	rjmp	.+14     	; 0x1f0e <signal_monitor+0x76>
		GLCD_Clear();
    1f00:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
		GLCD_Render();
    1f04:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
		TIMSK|=_BV(TOIE1);		// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1f08:	89 b7       	in	r24, 0x39	; 57
    1f0a:	84 60       	ori	r24, 0x04	; 4
    1f0c:	89 bf       	out	0x39, r24	; 57
	}							// In order to define if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
	if (signalCounter > SIGNAL_COUNTER_MAX)	// if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1f0e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <signalCounter>
    1f12:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <signalCounter+0x1>
    1f16:	8d 32       	cpi	r24, 0x2D	; 45
    1f18:	91 40       	sbci	r25, 0x01	; 1
    1f1a:	58 f0       	brcs	.+22     	; 0x1f32 <signal_monitor+0x9a>
	{
		signalOn = 0;
    1f1c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <signalOn>
		signalCounter = 0;
    1f20:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <signalCounter+0x1>
    1f24:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <signalCounter>
		TIMSK&=~_BV(TOIE1);
    1f28:	89 b7       	in	r24, 0x39	; 57
    1f2a:	8b 7f       	andi	r24, 0xFB	; 251
    1f2c:	89 bf       	out	0x39, r24	; 57
		main_screen();
    1f2e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <main_screen>
    1f32:	08 95       	ret

00001f34 <read_ADC>:
	GLCD_GotoXY(27, 7);
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
	GLCD_Render();
}
uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
    1f34:	87 b9       	out	0x07, r24	; 7
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1f36:	e6 2f       	mov	r30, r22
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	1e 16       	cp	r1, r30
    1f3c:	1f 06       	cpc	r1, r31
    1f3e:	8c f4       	brge	.+34     	; 0x1f62 <read_ADC+0x2e>
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1f48:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1f4a:	36 99       	sbic	0x06, 6	; 6
    1f4c:	fe cf       	rjmp	.-4      	; 0x1f4a <read_ADC+0x16>
		tmp += ADCW;
    1f4e:	44 b1       	in	r20, 0x04	; 4
    1f50:	55 b1       	in	r21, 0x05	; 5
    1f52:	84 0f       	add	r24, r20
    1f54:	95 1f       	adc	r25, r21
	GLCD_Render();
}
uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1f56:	2f 5f       	subi	r18, 0xFF	; 255
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	2e 17       	cp	r18, r30
    1f5c:	3f 07       	cpc	r19, r31
    1f5e:	a1 f7       	brne	.-24     	; 0x1f48 <read_ADC+0x14>
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <read_ADC+0x32>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
	GLCD_Render();
}
uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <__udivmodhi4>
    1f6c:	cb 01       	movw	r24, r22
}
    1f6e:	08 95       	ret

00001f70 <data_monitor>:
		signalCounter = 0;
		TIMSK&=~_BV(TOIE1);
		main_screen();
	}
}
void data_monitor(){
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
	static int16_t newVoltage;
	newVoltage = (read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER;
    1f74:	6a e0       	ldi	r22, 0x0A	; 10
    1f76:	84 e0       	ldi	r24, 0x04	; 4
    1f78:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <read_ADC>
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    1f86:	2a e9       	ldi	r18, 0x9A	; 154
    1f88:	39 e9       	ldi	r19, 0x99	; 153
    1f8a:	4c ec       	ldi	r20, 0xCC	; 204
    1f8c:	52 e4       	ldi	r21, 0x42	; 66
    1f8e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	50 e4       	ldi	r21, 0x40	; 64
    1f9a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 ec       	ldi	r20, 0xC0	; 192
    1fa4:	50 e4       	ldi	r21, 0x40	; 64
    1fa6:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    1faa:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__fixsfsi>
    1fae:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <__data_end+0x1>
    1fb2:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <__data_end>
	if ((newVoltage<SLEEP_VOLTAGE)&&(!debugMode)){	//Disabling power consumers during ignition to prevent MCU from reboot
    1fb6:	64 36       	cpi	r22, 0x64	; 100
    1fb8:	71 05       	cpc	r23, r1
    1fba:	ec f5       	brge	.+122    	; 0x2036 <data_monitor+0xc6>
    1fbc:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <debugMode>
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	39 c0       	rjmp	.+114    	; 0x2036 <data_monitor+0xc6>
		PORTA|=_BV(3);
    1fc4:	db 9a       	sbi	0x1b, 3	; 27
		PORTA|=_BV(0);
    1fc6:	d8 9a       	sbi	0x1b, 0	; 27
		OCR1A = 0;
    1fc8:	1b bc       	out	0x2b, r1	; 43
    1fca:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1fcc:	19 bc       	out	0x29, r1	; 41
    1fce:	18 bc       	out	0x28, r1	; 40
		GLCD_Clear();
    1fd0:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
		GLCD_Render();
    1fd4:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
		while((read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER<SLEEP_VOLTAGE);
    1fd8:	6a e0       	ldi	r22, 0x0A	; 10
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <read_ADC>
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    1fea:	2a e9       	ldi	r18, 0x9A	; 154
    1fec:	39 e9       	ldi	r19, 0x99	; 153
    1fee:	4c ec       	ldi	r20, 0xCC	; 204
    1ff0:	52 e4       	ldi	r21, 0x42	; 66
    1ff2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	50 e4       	ldi	r21, 0x40	; 64
    1ffe:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 ec       	ldi	r20, 0xC0	; 192
    2008:	50 e4       	ldi	r21, 0x40	; 64
    200a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	48 ec       	ldi	r20, 0xC8	; 200
    2014:	52 e4       	ldi	r21, 0x42	; 66
    2016:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    201a:	88 23       	and	r24, r24
    201c:	ec f2       	brlt	.-70     	; 0x1fd8 <data_monitor+0x68>
		OCR1A = pwmHandLight;
    201e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pwmHandLight>
    2022:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    2026:	9b bd       	out	0x2b, r25	; 43
    2028:	8a bd       	out	0x2a, r24	; 42
		OCR1B = pwmDialLight;
    202a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <pwmDialLight>
    202e:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    2032:	99 bd       	out	0x29, r25	; 41
    2034:	88 bd       	out	0x28, r24	; 40
	}
	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    2036:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__data_end>
    203a:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__data_end+0x1>
    203e:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <voltage>
    2042:	30 91 b6 02 	lds	r19, 0x02B6	; 0x8002b6 <voltage+0x1>
    2046:	82 17       	cp	r24, r18
    2048:	93 07       	cpc	r25, r19
    204a:	51 f0       	breq	.+20     	; 0x2060 <data_monitor+0xf0>
	{
		voltage = newVoltage;
    204c:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <voltage+0x1>
    2050:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <voltage>
		if (!debugMode)main_screen();
    2054:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <debugMode>
    2058:	81 11       	cpse	r24, r1
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <data_monitor+0xf0>
    205c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <main_screen>
	}
	uint32_t newRun = sensorTriggering*circumference;
    2060:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <sensorTriggering>
    2064:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <sensorTriggering+0x1>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    2070:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <circumference>
    2074:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <circumference+0x1>
    2078:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <circumference+0x2>
    207c:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <circumference+0x3>
    2080:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    2084:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
	if (newRun>99)	
    2088:	64 36       	cpi	r22, 0x64	; 100
    208a:	71 05       	cpc	r23, r1
    208c:	81 05       	cpc	r24, r1
    208e:	91 05       	cpc	r25, r1
    2090:	00 f1       	brcs	.+64     	; 0x20d2 <data_monitor+0x162>
	{
		runInMeters+= newRun;
    2092:	00 91 ad 02 	lds	r16, 0x02AD	; 0x8002ad <runInMeters>
    2096:	10 91 ae 02 	lds	r17, 0x02AE	; 0x8002ae <runInMeters+0x1>
    209a:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <runInMeters+0x2>
    209e:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	80 0f       	add	r24, r16
    20a8:	91 1f       	adc	r25, r17
    20aa:	a2 1f       	adc	r26, r18
    20ac:	b3 1f       	adc	r27, r19
    20ae:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <runInMeters>
    20b2:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <runInMeters+0x1>
    20b6:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <runInMeters+0x2>
    20ba:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <runInMeters+0x3>
		sensorTriggering = 0;
    20be:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <sensorTriggering+0x1>
    20c2:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <sensorTriggering>
		if (!debugMode)main_screen();//when the run changes by 100 meters - update data on the screen
    20c6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <debugMode>
    20ca:	81 11       	cpse	r24, r1
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <data_monitor+0x162>
    20ce:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <main_screen>
	}
}
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <eep_operations>:
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
}
void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    20d8:	8f 92       	push	r8
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	ec 01       	movw	r28, r24
    20ec:	e6 2e       	mov	r14, r22
	if (eepAction==EEP_WRITE){
    20ee:	41 30       	cpi	r20, 0x01	; 1
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <eep_operations+0x1c>
    20f2:	6a c0       	rjmp	.+212    	; 0x21c8 <eep_operations+0xf0>
		eeprom_update_byte((uint8_t*)eepStartAddress,0);
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmHandLight);
    20fa:	f1 2c       	mov	r15, r1
    20fc:	ce 0d       	add	r28, r14
    20fe:	df 1d       	adc	r29, r15
    2100:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <pwmHandLight>
    2104:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    2108:	ce 01       	movw	r24, r28
    210a:	0e 94 38 29 	call	0x5270	; 0x5270 <eeprom_update_word>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDialLight);
    210e:	ce 0d       	add	r28, r14
    2110:	df 1d       	adc	r29, r15
    2112:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <pwmDialLight>
    2116:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    211a:	ce 01       	movw	r24, r28
    211c:	0e 94 38 29 	call	0x5270	; 0x5270 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),maxSpeedOnDial);
    2120:	ce 0d       	add	r28, r14
    2122:	df 1d       	adc	r29, r15
    2124:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <maxSpeedOnDial>
    2128:	ce 01       	movw	r24, r28
    212a:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    212e:	ce 0d       	add	r28, r14
    2130:	df 1d       	adc	r29, r15
    2132:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <stepInterval>
    2136:	ce 01       	movw	r24, r28
    2138:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),stepperMotorSteps);
    213c:	ce 0d       	add	r28, r14
    213e:	df 1d       	adc	r29, r15
    2140:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    2144:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    2148:	ce 01       	movw	r24, r28
    214a:	0e 94 38 29 	call	0x5270	; 0x5270 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),oledBrightness);
    214e:	ce 0d       	add	r28, r14
    2150:	df 1d       	adc	r29, r15
    2152:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <oledBrightness>
    2156:	ce 01       	movw	r24, r28
    2158:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    215c:	ce 0d       	add	r28, r14
    215e:	df 1d       	adc	r29, r15
    2160:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <magnetsOnWheel>
    2164:	ce 01       	movw	r24, r28
    2166:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    216a:	ce 0d       	add	r28, r14
    216c:	df 1d       	adc	r29, r15
    216e:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <stepMode>
    2172:	ce 01       	movw	r24, r28
    2174:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    2178:	ce 0d       	add	r28, r14
    217a:	df 1d       	adc	r29, r15
    217c:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <wheelDiameter>
    2180:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <wheelDiameter+0x1>
    2184:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <wheelDiameter+0x2>
    2188:	70 91 f5 02 	lds	r23, 0x02F5	; 0x8002f5 <wheelDiameter+0x3>
    218c:	ce 01       	movw	r24, r28
    218e:	0e 94 2c 29 	call	0x5258	; 0x5258 <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    2192:	ce 0d       	add	r28, r14
    2194:	df 1d       	adc	r29, r15
    2196:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <gearRatio>
    219a:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <gearRatio+0x1>
    219e:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <gearRatio+0x2>
    21a2:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <gearRatio+0x3>
    21a6:	ce 01       	movw	r24, r28
    21a8:	0e 94 2c 29 	call	0x5258	; 0x5258 <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    21ac:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <degreesPerKmh>
    21b0:	50 91 e0 02 	lds	r21, 0x02E0	; 0x8002e0 <degreesPerKmh+0x1>
    21b4:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <degreesPerKmh+0x2>
    21b8:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <degreesPerKmh+0x3>
    21bc:	c7 01       	movw	r24, r14
    21be:	8c 0f       	add	r24, r28
    21c0:	9d 1f       	adc	r25, r29
    21c2:	0e 94 2c 29 	call	0x5258	; 0x5258 <eeprom_update_dword>
    21c6:	5d c1       	rjmp	.+698    	; 0x2482 <eep_operations+0x3aa>
	}
	else if(eepAction==EEP_READ){
    21c8:	41 11       	cpse	r20, r1
    21ca:	10 c1       	rjmp	.+544    	; 0x23ec <eep_operations+0x314>
		pwmHandLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    21cc:	e6 2e       	mov	r14, r22
    21ce:	f1 2c       	mov	r15, r1
    21d0:	ce 0d       	add	r28, r14
    21d2:	df 1d       	adc	r29, r15
    21d4:	ce 01       	movw	r24, r28
    21d6:	0e 94 15 29 	call	0x522a	; 0x522a <eeprom_read_word>
		if ((pwmHandLight>PWM_HAND_MAX)||(pwmHandLight<PWM_HAND_MIN))pwmHandLight=PWM_HAND_DEFAULT;
    21da:	81 15       	cp	r24, r1
    21dc:	24 e0       	ldi	r18, 0x04	; 4
    21de:	92 07       	cpc	r25, r18
    21e0:	28 f4       	brcc	.+10     	; 0x21ec <eep_operations+0x114>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
	}
	else if(eepAction==EEP_READ){
		pwmHandLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    21e2:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pwmHandLight+0x1>
    21e6:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pwmHandLight>
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <eep_operations+0x120>
		if ((pwmHandLight>PWM_HAND_MAX)||(pwmHandLight<PWM_HAND_MIN))pwmHandLight=PWM_HAND_DEFAULT;
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	93 e0       	ldi	r25, 0x03	; 3
    21f0:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pwmHandLight+0x1>
    21f4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pwmHandLight>
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    21f8:	ce 0d       	add	r28, r14
    21fa:	df 1d       	adc	r29, r15
    21fc:	ce 01       	movw	r24, r28
    21fe:	0e 94 15 29 	call	0x522a	; 0x522a <eeprom_read_word>
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_DIAL_DEFAULT;
    2202:	81 15       	cp	r24, r1
    2204:	34 e0       	ldi	r19, 0x04	; 4
    2206:	93 07       	cpc	r25, r19
    2208:	28 f4       	brcc	.+10     	; 0x2214 <eep_operations+0x13c>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
	}
	else if(eepAction==EEP_READ){
		pwmHandLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmHandLight>PWM_HAND_MAX)||(pwmHandLight<PWM_HAND_MIN))pwmHandLight=PWM_HAND_DEFAULT;
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    220a:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <pwmDialLight+0x1>
    220e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <pwmDialLight>
    2212:	06 c0       	rjmp	.+12     	; 0x2220 <eep_operations+0x148>
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_DIAL_DEFAULT;
    2214:	80 e8       	ldi	r24, 0x80	; 128
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <pwmDialLight+0x1>
    221c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <pwmDialLight>
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2220:	ce 0d       	add	r28, r14
    2222:	df 1d       	adc	r29, r15
    2224:	ce 01       	movw	r24, r28
    2226:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_byte>
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
    222a:	84 31       	cpi	r24, 0x14	; 20
    222c:	18 f0       	brcs	.+6      	; 0x2234 <eep_operations+0x15c>
	else if(eepAction==EEP_READ){
		pwmHandLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmHandLight>PWM_HAND_MAX)||(pwmHandLight<PWM_HAND_MIN))pwmHandLight=PWM_HAND_DEFAULT;
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_DIAL_DEFAULT;
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    222e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <maxSpeedOnDial>
    2232:	03 c0       	rjmp	.+6      	; 0x223a <eep_operations+0x162>
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
    2234:	8e eb       	ldi	r24, 0xBE	; 190
    2236:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <maxSpeedOnDial>
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    223a:	ce 0d       	add	r28, r14
    223c:	df 1d       	adc	r29, r15
    223e:	ce 01       	movw	r24, r28
    2240:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_byte>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    2244:	82 33       	cpi	r24, 0x32	; 50
    2246:	18 f0       	brcs	.+6      	; 0x224e <eep_operations+0x176>
		if ((pwmHandLight>PWM_HAND_MAX)||(pwmHandLight<PWM_HAND_MIN))pwmHandLight=PWM_HAND_DEFAULT;
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_DIAL_DEFAULT;
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2248:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <stepInterval>
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <eep_operations+0x17c>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    224e:	86 e9       	ldi	r24, 0x96	; 150
    2250:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <stepInterval>
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    2254:	ce 0d       	add	r28, r14
    2256:	df 1d       	adc	r29, r15
    2258:	ce 01       	movw	r24, r28
    225a:	0e 94 15 29 	call	0x522a	; 0x522a <eeprom_read_word>
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    225e:	9c 01       	movw	r18, r24
    2260:	20 51       	subi	r18, 0x10	; 16
    2262:	31 09       	sbc	r19, r1
    2264:	21 38       	cpi	r18, 0x81	; 129
    2266:	31 40       	sbci	r19, 0x01	; 1
    2268:	28 f4       	brcc	.+10     	; 0x2274 <eep_operations+0x19c>
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_DIAL_DEFAULT;
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    226a:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <stepperMotorSteps+0x1>
    226e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <stepperMotorSteps>
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <eep_operations+0x1a8>
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    2274:	80 e6       	ldi	r24, 0x60	; 96
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <stepperMotorSteps+0x1>
    227c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <stepperMotorSteps>
		oledBrightness = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2280:	ce 0d       	add	r28, r14
    2282:	df 1d       	adc	r29, r15
    2284:	ce 01       	movw	r24, r28
    2286:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_byte>
		if ((oledBrightness>OLED_BRIGHTNESS_MAX)||(oledBrightness<OLED_BRIGHTNESS_MIN))oledBrightness=OLED_BRIGHTNESS_DEFAULT;
    228a:	82 33       	cpi	r24, 0x32	; 50
    228c:	18 f0       	brcs	.+6      	; 0x2294 <eep_operations+0x1bc>
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		oledBrightness = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    228e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <oledBrightness>
    2292:	03 c0       	rjmp	.+6      	; 0x229a <eep_operations+0x1c2>
		if ((oledBrightness>OLED_BRIGHTNESS_MAX)||(oledBrightness<OLED_BRIGHTNESS_MIN))oledBrightness=OLED_BRIGHTNESS_DEFAULT;
    2294:	8a ef       	ldi	r24, 0xFA	; 250
    2296:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <oledBrightness>
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    229a:	ce 0d       	add	r28, r14
    229c:	df 1d       	adc	r29, r15
    229e:	ce 01       	movw	r24, r28
    22a0:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_byte>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    22a4:	9f ef       	ldi	r25, 0xFF	; 255
    22a6:	98 0f       	add	r25, r24
    22a8:	90 31       	cpi	r25, 0x10	; 16
    22aa:	18 f4       	brcc	.+6      	; 0x22b2 <eep_operations+0x1da>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		oledBrightness = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((oledBrightness>OLED_BRIGHTNESS_MAX)||(oledBrightness<OLED_BRIGHTNESS_MIN))oledBrightness=OLED_BRIGHTNESS_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22ac:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <magnetsOnWheel>
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <eep_operations+0x1e0>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    22b2:	86 e0       	ldi	r24, 0x06	; 6
    22b4:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <magnetsOnWheel>
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22b8:	ce 0d       	add	r28, r14
    22ba:	df 1d       	adc	r29, r15
    22bc:	ce 01       	movw	r24, r28
    22be:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_byte>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    22c2:	9f ef       	ldi	r25, 0xFF	; 255
    22c4:	98 0f       	add	r25, r24
    22c6:	92 30       	cpi	r25, 0x02	; 2
    22c8:	18 f4       	brcc	.+6      	; 0x22d0 <eep_operations+0x1f8>
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		oledBrightness = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((oledBrightness>OLED_BRIGHTNESS_MAX)||(oledBrightness<OLED_BRIGHTNESS_MIN))oledBrightness=OLED_BRIGHTNESS_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22ca:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <stepMode>
    22ce:	03 c0       	rjmp	.+6      	; 0x22d6 <eep_operations+0x1fe>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <stepMode>
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    22d6:	ce 0d       	add	r28, r14
    22d8:	df 1d       	adc	r29, r15
    22da:	ce 01       	movw	r24, r28
    22dc:	0e 94 0f 29 	call	0x521e	; 0x521e <eeprom_read_dword>
    22e0:	4b 01       	movw	r8, r22
    22e2:	5c 01       	movw	r10, r24
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	50 e4       	ldi	r21, 0x40	; 64
    22ec:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__gesf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	9c f0       	brlt	.+38     	; 0x231a <eep_operations+0x242>
    22f4:	2d ec       	ldi	r18, 0xCD	; 205
    22f6:	3c ec       	ldi	r19, 0xCC	; 204
    22f8:	4c ec       	ldi	r20, 0xCC	; 204
    22fa:	5d e3       	ldi	r21, 0x3D	; 61
    22fc:	c5 01       	movw	r24, r10
    22fe:	b4 01       	movw	r22, r8
    2300:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    2304:	88 23       	and	r24, r24
    2306:	4c f0       	brlt	.+18     	; 0x231a <eep_operations+0x242>
		if ((oledBrightness>OLED_BRIGHTNESS_MAX)||(oledBrightness<OLED_BRIGHTNESS_MIN))oledBrightness=OLED_BRIGHTNESS_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2308:	80 92 f2 02 	sts	0x02F2, r8	; 0x8002f2 <wheelDiameter>
    230c:	90 92 f3 02 	sts	0x02F3, r9	; 0x8002f3 <wheelDiameter+0x1>
    2310:	a0 92 f4 02 	sts	0x02F4, r10	; 0x8002f4 <wheelDiameter+0x2>
    2314:	b0 92 f5 02 	sts	0x02F5, r11	; 0x8002f5 <wheelDiameter+0x3>
    2318:	0c c0       	rjmp	.+24     	; 0x2332 <eep_operations+0x25a>
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    231a:	83 e3       	ldi	r24, 0x33	; 51
    231c:	93 e3       	ldi	r25, 0x33	; 51
    231e:	a3 e3       	ldi	r26, 0x33	; 51
    2320:	bf e3       	ldi	r27, 0x3F	; 63
    2322:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <wheelDiameter>
    2326:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <wheelDiameter+0x1>
    232a:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <wheelDiameter+0x2>
    232e:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <wheelDiameter+0x3>
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2332:	ce 0d       	add	r28, r14
    2334:	df 1d       	adc	r29, r15
    2336:	ce 01       	movw	r24, r28
    2338:	0e 94 0f 29 	call	0x521e	; 0x521e <eeprom_read_dword>
    233c:	4b 01       	movw	r8, r22
    233e:	5c 01       	movw	r10, r24
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__gesf2>
    234c:	18 16       	cp	r1, r24
    234e:	9c f0       	brlt	.+38     	; 0x2376 <eep_operations+0x29e>
    2350:	2d ec       	ldi	r18, 0xCD	; 205
    2352:	3c ec       	ldi	r19, 0xCC	; 204
    2354:	4c ec       	ldi	r20, 0xCC	; 204
    2356:	5d e3       	ldi	r21, 0x3D	; 61
    2358:	c5 01       	movw	r24, r10
    235a:	b4 01       	movw	r22, r8
    235c:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    2360:	88 23       	and	r24, r24
    2362:	4c f0       	brlt	.+18     	; 0x2376 <eep_operations+0x29e>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2364:	80 92 e6 02 	sts	0x02E6, r8	; 0x8002e6 <gearRatio>
    2368:	90 92 e7 02 	sts	0x02E7, r9	; 0x8002e7 <gearRatio+0x1>
    236c:	a0 92 e8 02 	sts	0x02E8, r10	; 0x8002e8 <gearRatio+0x2>
    2370:	b0 92 e9 02 	sts	0x02E9, r11	; 0x8002e9 <gearRatio+0x3>
    2374:	0c c0       	rjmp	.+24     	; 0x238e <eep_operations+0x2b6>
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a0 e8       	ldi	r26, 0x80	; 128
    237c:	bf e3       	ldi	r27, 0x3F	; 63
    237e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <gearRatio>
    2382:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <gearRatio+0x1>
    2386:	a0 93 e8 02 	sts	0x02E8, r26	; 0x8002e8 <gearRatio+0x2>
    238a:	b0 93 e9 02 	sts	0x02E9, r27	; 0x8002e9 <gearRatio+0x3>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    238e:	c7 01       	movw	r24, r14
    2390:	8c 0f       	add	r24, r28
    2392:	9d 1f       	adc	r25, r29
    2394:	0e 94 0f 29 	call	0x521e	; 0x521e <eeprom_read_dword>
    2398:	4b 01       	movw	r8, r22
    239a:	5c 01       	movw	r10, r24
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 ea       	ldi	r20, 0xA0	; 160
    23a2:	50 e4       	ldi	r21, 0x40	; 64
    23a4:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__gesf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	9c f0       	brlt	.+38     	; 0x23d2 <eep_operations+0x2fa>
    23ac:	2d ec       	ldi	r18, 0xCD	; 205
    23ae:	3c ec       	ldi	r19, 0xCC	; 204
    23b0:	4c ec       	ldi	r20, 0xCC	; 204
    23b2:	5d e3       	ldi	r21, 0x3D	; 61
    23b4:	c5 01       	movw	r24, r10
    23b6:	b4 01       	movw	r22, r8
    23b8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    23bc:	88 23       	and	r24, r24
    23be:	4c f0       	brlt	.+18     	; 0x23d2 <eep_operations+0x2fa>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    23c0:	80 92 df 02 	sts	0x02DF, r8	; 0x8002df <degreesPerKmh>
    23c4:	90 92 e0 02 	sts	0x02E0, r9	; 0x8002e0 <degreesPerKmh+0x1>
    23c8:	a0 92 e1 02 	sts	0x02E1, r10	; 0x8002e1 <degreesPerKmh+0x2>
    23cc:	b0 92 e2 02 	sts	0x02E2, r11	; 0x8002e2 <degreesPerKmh+0x3>
    23d0:	58 c0       	rjmp	.+176    	; 0x2482 <eep_operations+0x3aa>
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
    23d2:	83 e3       	ldi	r24, 0x33	; 51
    23d4:	93 e3       	ldi	r25, 0x33	; 51
    23d6:	a3 ea       	ldi	r26, 0xA3	; 163
    23d8:	bf e3       	ldi	r27, 0x3F	; 63
    23da:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <degreesPerKmh>
    23de:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <degreesPerKmh+0x1>
    23e2:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <degreesPerKmh+0x2>
    23e6:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <degreesPerKmh+0x3>
    23ea:	4b c0       	rjmp	.+150    	; 0x2482 <eep_operations+0x3aa>
	}
	else if (eepAction==EEP_ODOMETER_READ){
    23ec:	42 30       	cpi	r20, 0x02	; 2
    23ee:	59 f5       	brne	.+86     	; 0x2446 <eep_operations+0x36e>
		uint32_t tempRun = 0;
		odometerCurrentAddress = 0;
    23f0:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <odometerCurrentAddress>
    23f4:	e6 2e       	mov	r14, r22
    23f6:	f1 2c       	mov	r15, r1
    23f8:	11 e0       	ldi	r17, 0x01	; 1
    23fa:	03 c0       	rjmp	.+6      	; 0x2402 <eep_operations+0x32a>
    23fc:	ce 0d       	add	r28, r14
    23fe:	df 1d       	adc	r29, r15
    2400:	1f 5f       	subi	r17, 0xFF	; 255
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempRun = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    2402:	ce 01       	movw	r24, r28
    2404:	0e 94 0f 29 	call	0x521e	; 0x521e <eeprom_read_dword>
			if(tempRun>runInMeters){	//finding the latest record (the highest value)
    2408:	80 90 ad 02 	lds	r8, 0x02AD	; 0x8002ad <runInMeters>
    240c:	90 90 ae 02 	lds	r9, 0x02AE	; 0x8002ae <runInMeters+0x1>
    2410:	a0 90 af 02 	lds	r10, 0x02AF	; 0x8002af <runInMeters+0x2>
    2414:	b0 90 b0 02 	lds	r11, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    2418:	86 16       	cp	r8, r22
    241a:	97 06       	cpc	r9, r23
    241c:	a8 06       	cpc	r10, r24
    241e:	b9 06       	cpc	r11, r25
    2420:	78 f4       	brcc	.+30     	; 0x2440 <eep_operations+0x368>
				runInMeters = tempRun;
    2422:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <runInMeters>
    2426:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <runInMeters+0x1>
    242a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <runInMeters+0x2>
    242e:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <runInMeters+0x3>
				odometerCurrentAddress = i + 1;	//address for the next record
    2432:	10 93 b4 02 	sts	0x02B4, r17	; 0x8002b4 <odometerCurrentAddress>
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2436:	14 36       	cpi	r17, 0x64	; 100
    2438:	08 f3       	brcs	.-62     	; 0x23fc <eep_operations+0x324>
    243a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <odometerCurrentAddress>
    243e:	21 c0       	rjmp	.+66     	; 0x2482 <eep_operations+0x3aa>
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	else if (eepAction==EEP_ODOMETER_READ){
		uint32_t tempRun = 0;
		odometerCurrentAddress = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2440:	14 36       	cpi	r17, 0x64	; 100
    2442:	e0 f2       	brcs	.-72     	; 0x23fc <eep_operations+0x324>
    2444:	1e c0       	rjmp	.+60     	; 0x2482 <eep_operations+0x3aa>
				odometerCurrentAddress = i + 1;	//address for the next record
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
			}
		}
	}
	else if (eepAction==EEP_ODOMETER_WRITE){
    2446:	43 30       	cpi	r20, 0x03	; 3
    2448:	e1 f4       	brne	.+56     	; 0x2482 <eep_operations+0x3aa>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),runInMeters);
    244a:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <runInMeters>
    244e:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <runInMeters+0x1>
    2452:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <runInMeters+0x2>
    2456:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    245a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <odometerCurrentAddress>
    245e:	9e 01       	movw	r18, r28
    2460:	8e 9d       	mul	r24, r14
    2462:	20 0d       	add	r18, r0
    2464:	31 1d       	adc	r19, r1
    2466:	11 24       	eor	r1, r1
    2468:	c9 01       	movw	r24, r18
    246a:	0e 94 3e 29 	call	0x527c	; 0x527c <eeprom_write_dword>
			odometerCurrentAddress++;
    246e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <odometerCurrentAddress>
    2472:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2474:	84 36       	cpi	r24, 0x64	; 100
    2476:	18 f4       	brcc	.+6      	; 0x247e <eep_operations+0x3a6>
			}
		}
	}
	else if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),runInMeters);
			odometerCurrentAddress++;
    2478:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <odometerCurrentAddress>
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <eep_operations+0x3aa>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    247e:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <odometerCurrentAddress>
	}
}
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	ff 90       	pop	r15
    248a:	ef 90       	pop	r14
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	08 95       	ret

00002496 <presets>:
	 maxSpeedOnDial	= MAX_SPEED_DEFAULT;
	 stepInterval = STEP_INTERVAL_DEFAULT;
	 stepperMotorSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
	 stepMode = STEP_MODE_DEFAULT;
}
void presets (void){
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	cf 93       	push	r28
	DDRA|=_BV(0); //ENABLE 2
    24a0:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA|=_BV(1); //PHASE 2
    24a2:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA|=_BV(2); //PHASE 1
    24a4:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA|=_BV(3); //ENABLE 1
    24a6:	d3 9a       	sbi	0x1a, 3	; 26
	DDRD|=_BV(4);//PWM DIAL LIGHT
    24a8:	8c 9a       	sbi	0x11, 4	; 17
	DDRD|=_BV(5);//PWM ARROW LIGHT
    24aa:	8d 9a       	sbi	0x11, 5	; 17
	PORTA|=_BV(3);//ENABLE 1 high (disabled)
    24ac:	db 9a       	sbi	0x1b, 3	; 27
	PORTA|=_BV(0);//ENABLE 2 high (disabled)
    24ae:	d8 9a       	sbi	0x1b, 0	; 27
	PORTB|=_BV(5);//internal pull-up for external buttons on PB5, PB6, PB7
    24b0:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=_BV(6);
    24b2:	c6 9a       	sbi	0x18, 6	; 24
	PORTB|=_BV(7);
    24b4:	c7 9a       	sbi	0x18, 7	; 24
	//ADC setup
	ADCSRA |= _BV(ADEN);
    24b6:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADPS0);		//
    24b8:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    24ba:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |= _BV(ADPS2);		//
    24bc:	32 9a       	sbi	0x06, 2	; 6
	//reading data from EEPROM
	uint8_t	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is started for the first time the default values have to be written to EEPROM
    24be:	88 e0       	ldi	r24, 0x08	; 8
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_byte>
	if (firstEepRead){
    24c6:	88 23       	and	r24, r24
    24c8:	89 f0       	breq	.+34     	; 0x24ec <presets+0x56>
		set_default_values();
    24ca:	0e 94 aa 0b 	call	0x1754	; 0x1754 <set_default_values>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	64 e0       	ldi	r22, 0x04	; 4
    24d2:	88 e0       	ldi	r24, 0x08	; 8
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    24da:	c4 e6       	ldi	r28, 0x64	; 100
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    24dc:	43 e0       	ldi	r20, 0x03	; 3
    24de:	64 e0       	ldi	r22, 0x04	; 4
    24e0:	80 e8       	ldi	r24, 0x80	; 128
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    24e8:	c1 50       	subi	r28, 0x01	; 1
	//reading data from EEPROM
	uint8_t	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is started for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		set_default_values();
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    24ea:	c1 f7       	brne	.-16     	; 0x24dc <presets+0x46>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
		}
	}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	64 e0       	ldi	r22, 0x04	; 4
    24f0:	88 e0       	ldi	r24, 0x08	; 8
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    24f8:	42 e0       	ldi	r20, 0x02	; 2
    24fa:	64 e0       	ldi	r22, 0x04	; 4
    24fc:	80 e8       	ldi	r24, 0x80	; 128
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
	TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);//Timer2 is used to measure time between Hall sensor triggering
    2504:	85 b5       	in	r24, 0x25	; 37
    2506:	8e 60       	ori	r24, 0x0E	; 14
    2508:	85 bd       	out	0x25, r24	; 37
	OCR2 = TIC-1; //upper limit of Timer2
    250a:	8e ef       	ldi	r24, 0xFE	; 254
    250c:	83 bd       	out	0x23, r24	; 35
	//dial and arrow light PWM (Timer1)
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);	//Fast PWM 10-bit
    250e:	83 ea       	ldi	r24, 0xA3	; 163
    2510:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);	//prescaler = 64
    2512:	8b e0       	ldi	r24, 0x0B	; 11
    2514:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmHandLight;
    2516:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pwmHandLight>
    251a:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    251e:	9b bd       	out	0x2b, r25	; 43
    2520:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDialLight;
    2522:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <pwmDialLight>
    2526:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    252a:	99 bd       	out	0x29, r25	; 41
    252c:	88 bd       	out	0x28, r24	; 40
	//
	circumference = gearRatio * wheelDiameter * pi/magnetsOnWheel;	
    252e:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <wheelDiameter>
    2532:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <wheelDiameter+0x1>
    2536:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <wheelDiameter+0x2>
    253a:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <wheelDiameter+0x3>
    253e:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <gearRatio>
    2542:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <gearRatio+0x1>
    2546:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gearRatio+0x2>
    254a:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <gearRatio+0x3>
    254e:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    2552:	2b ed       	ldi	r18, 0xDB	; 219
    2554:	3f e0       	ldi	r19, 0x0F	; 15
    2556:	49 e4       	ldi	r20, 0x49	; 73
    2558:	50 e4       	ldi	r21, 0x40	; 64
    255a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    255e:	6b 01       	movw	r12, r22
    2560:	7c 01       	movw	r14, r24
    2562:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <magnetsOnWheel>
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 65 26 	call	0x4cca	; 0x4cca <__floatsisf>
    2570:	9b 01       	movw	r18, r22
    2572:	ac 01       	movw	r20, r24
    2574:	c7 01       	movw	r24, r14
    2576:	b6 01       	movw	r22, r12
    2578:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    257c:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <circumference>
    2580:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <circumference+0x1>
    2584:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <circumference+0x2>
    2588:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <circumference+0x3>
	timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, Timer2 prescaler=256)
    258c:	8d eb       	ldi	r24, 0xBD	; 189
    258e:	97 e3       	ldi	r25, 0x37	; 55
    2590:	a6 e8       	ldi	r26, 0x86	; 134
    2592:	b7 e3       	ldi	r27, 0x37	; 55
    2594:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <timePerTic>
    2598:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <timePerTic+0x1>
    259c:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <timePerTic+0x2>
    25a0:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <timePerTic+0x3>
	kmhPerStep = (360.0/(stepperMotorSteps*stepMode))/degreesPerKmh;
    25a4:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <stepMode>
    25a8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    25ac:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    25b0:	28 9f       	mul	r18, r24
    25b2:	b0 01       	movw	r22, r0
    25b4:	29 9f       	mul	r18, r25
    25b6:	70 0d       	add	r23, r0
    25b8:	11 24       	eor	r1, r1
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	84 eb       	ldi	r24, 0xB4	; 180
    25cc:	93 e4       	ldi	r25, 0x43	; 67
    25ce:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    25d2:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <degreesPerKmh>
    25d6:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <degreesPerKmh+0x1>
    25da:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <degreesPerKmh+0x2>
    25de:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <degreesPerKmh+0x3>
    25e2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    25e6:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <kmhPerStep>
    25ea:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <kmhPerStep+0x1>
    25ee:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <kmhPerStep+0x2>
    25f2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <kmhPerStep+0x3>
	//display initialization
	GLCD_Setup();
    25f6:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <GLCD_Setup>
	GLCD_Clear();
    25fa:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
	GLCD_SetContrast(oledBrightness);
    25fe:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <oledBrightness>
    2602:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <GLCD_SetContrast>
	GLCD_Render();
    2606:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
	sei();
    260a:	78 94       	sei
	if (!handCalibrated) hand_calibration();
    260c:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <handCalibrated>
    2610:	81 11       	cpse	r24, r1
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <presets+0x182>
    2614:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <hand_calibration>
	MCUCR|= _BV(ISC11); //Falling edge interrupt INT1 (Hall sensor)
    2618:	85 b7       	in	r24, 0x35	; 53
    261a:	88 60       	ori	r24, 0x08	; 8
    261c:	85 bf       	out	0x35, r24	; 53
	GICR|=_BV(INT1); //External Interrupt Enable INT1
    261e:	8b b7       	in	r24, 0x3b	; 59
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	8b bf       	out	0x3b, r24	; 59
}
    2624:	cf 91       	pop	r28
    2626:	ff 90       	pop	r15
    2628:	ef 90       	pop	r14
    262a:	df 90       	pop	r13
    262c:	cf 90       	pop	r12
    262e:	08 95       	ret

00002630 <calculate_speed>:
	//Timer0 is used to generate pulses for Stepper Motor driver
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
	OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
	TIMSK|=_BV(OCIE0);
}
void calculate_speed(){
    2630:	cf 92       	push	r12
    2632:	df 92       	push	r13
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
	if(speedTimerRough>speedTimerRoughPrevious+PERIOD_INCREASE_TRESHOLD/magnetsOnWheel){	//If speed suddenly reduces to zero then next triggering of Hall sensor is not going to happen, so speedTimerRoughPrevious and previousTCNT2 will not be updated
    263c:	c0 91 ee 02 	lds	r28, 0x02EE	; 0x8002ee <magnetsOnWheel>
    2640:	d0 e0       	ldi	r29, 0x00	; 0
    2642:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <speedTimerRoughPrevious>
    2646:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <speedTimerRoughPrevious+0x1>
    264a:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <speedTimerRough>
    264e:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <speedTimerRough+0x1>
    2652:	8c e3       	ldi	r24, 0x3C	; 60
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	be 01       	movw	r22, r28
    2658:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__divmodhi4>
    265c:	26 0f       	add	r18, r22
    265e:	37 1f       	adc	r19, r23
    2660:	2e 17       	cp	r18, r30
    2662:	3f 07       	cpc	r19, r31
    2664:	88 f4       	brcc	.+34     	; 0x2688 <calculate_speed+0x58>
			speedTimerPrecise = speedTimerRough*(uint32_t)TIC;								//so if speedTimerRough increases significantly in comparison to previous period, speedTimerPrecise is updated using current speedTimerRough value
    2666:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <speedTimerRough>
    266a:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <speedTimerRough+0x1>
    266e:	af ef       	ldi	r26, 0xFF	; 255
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__umulhisi3>
    2676:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <speedTimerPrecise>
    267a:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <speedTimerPrecise+0x1>
    267e:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <speedTimerPrecise+0x2>
    2682:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <speedTimerPrecise+0x3>
    2686:	18 c0       	rjmp	.+48     	; 0x26b8 <calculate_speed+0x88>
	}else{
			speedTimerPrecise = (speedTimerRoughPrevious*(uint32_t)TIC) + previousTCNT2;
    2688:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <speedTimerRoughPrevious>
    268c:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <speedTimerRoughPrevious+0x1>
    2690:	40 91 da 02 	lds	r20, 0x02DA	; 0x8002da <previousTCNT2>
    2694:	af ef       	ldi	r26, 0xFF	; 255
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__umulhisi3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	84 0f       	add	r24, r20
    26a2:	91 1d       	adc	r25, r1
    26a4:	a1 1d       	adc	r26, r1
    26a6:	b1 1d       	adc	r27, r1
    26a8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <speedTimerPrecise>
    26ac:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <speedTimerPrecise+0x1>
    26b0:	a0 93 d2 02 	sts	0x02D2, r26	; 0x8002d2 <speedTimerPrecise+0x2>
    26b4:	b0 93 d3 02 	sts	0x02D3, r27	; 0x8002d3 <speedTimerPrecise+0x3>
	}
	if (speedTimerPrecise){
    26b8:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <speedTimerPrecise>
    26bc:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <speedTimerPrecise+0x1>
    26c0:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <speedTimerPrecise+0x2>
    26c4:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <speedTimerPrecise+0x3>
    26c8:	61 15       	cp	r22, r1
    26ca:	71 05       	cpc	r23, r1
    26cc:	81 05       	cpc	r24, r1
    26ce:	91 05       	cpc	r25, r1
    26d0:	a1 f1       	breq	.+104    	; 0x273a <calculate_speed+0x10a>
			frequency = 1.0/(timePerTic*speedTimerPrecise);
    26d2:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    26d6:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <timePerTic>
    26da:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <timePerTic+0x1>
    26de:	40 91 ca 02 	lds	r20, 0x02CA	; 0x8002ca <timePerTic+0x2>
    26e2:	50 91 cb 02 	lds	r21, 0x02CB	; 0x8002cb <timePerTic+0x3>
    26e6:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    26ea:	9b 01       	movw	r18, r22
    26ec:	ac 01       	movw	r20, r24
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	80 e8       	ldi	r24, 0x80	; 128
    26f4:	9f e3       	ldi	r25, 0x3F	; 63
    26f6:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    26fa:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <frequency>
    26fe:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <frequency+0x1>
    2702:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <frequency+0x2>
    2706:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <frequency+0x3>
			speedKmh = frequency*circumference*3.6; //3.6 is for converting m/s to km/h
    270a:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <circumference>
    270e:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <circumference+0x1>
    2712:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <circumference+0x2>
    2716:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <circumference+0x3>
    271a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    271e:	26 e6       	ldi	r18, 0x66	; 102
    2720:	36 e6       	ldi	r19, 0x66	; 102
    2722:	46 e6       	ldi	r20, 0x66	; 102
    2724:	50 e4       	ldi	r21, 0x40	; 64
    2726:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    272a:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <speedKmh>
    272e:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <speedKmh+0x1>
    2732:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <speedKmh+0x2>
    2736:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <speedKmh+0x3>
	}
	if(speedTimerRough>(MAX_PERIOD/magnetsOnWheel)){	//if Hall sensor was not triggered for too long (MAX_PERIOD*TIC/magnetsOnWheel*0.16us) it means that vehicle does not move
    273a:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <speedTimerRough>
    273e:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <speedTimerRough+0x1>
    2742:	8c ed       	ldi	r24, 0xDC	; 220
    2744:	95 e0       	ldi	r25, 0x05	; 5
    2746:	be 01       	movw	r22, r28
    2748:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__divmodhi4>
    274c:	62 17       	cp	r22, r18
    274e:	73 07       	cpc	r23, r19
    2750:	08 f0       	brcs	.+2      	; 0x2754 <calculate_speed+0x124>
    2752:	62 c0       	rjmp	.+196    	; 0x2818 <calculate_speed+0x1e8>
			TIMSK&=~_BV(OCIE2);
    2754:	89 b7       	in	r24, 0x39	; 57
    2756:	8f 77       	andi	r24, 0x7F	; 127
    2758:	89 bf       	out	0x39, r24	; 57
			TCNT2 = 0;
    275a:	14 bc       	out	0x24, r1	; 36
			speedTimerRough = 0;
    275c:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <speedTimerRough+0x1>
    2760:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <speedTimerRough>
			speedTimerRoughPrevious = 0;
    2764:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <speedTimerRoughPrevious+0x1>
    2768:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <speedTimerRoughPrevious>
			speedTimerPrecise = 0;
    276c:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <speedTimerPrecise>
    2770:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <speedTimerPrecise+0x1>
    2774:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <speedTimerPrecise+0x2>
    2778:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <speedTimerPrecise+0x3>
			speedKmh = 0;
    277c:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <speedKmh>
    2780:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <speedKmh+0x1>
    2784:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <speedKmh+0x2>
    2788:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <speedKmh+0x3>
			firstMeasure = 0;
    278c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <firstMeasure>
			frequency = 0;
    2790:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <frequency>
    2794:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <frequency+0x1>
    2798:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <frequency+0x2>
    279c:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <frequency+0x3>
			previousTCNT2 = 0;
    27a0:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <previousTCNT2>
			runInMeters = runInMeters + sensorTriggering*circumference;
    27a4:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <sensorTriggering>
    27a8:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <sensorTriggering+0x1>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    27b4:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <circumference>
    27b8:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <circumference+0x1>
    27bc:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <circumference+0x2>
    27c0:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <circumference+0x3>
    27c4:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    27c8:	6b 01       	movw	r12, r22
    27ca:	7c 01       	movw	r14, r24
    27cc:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <runInMeters>
    27d0:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <runInMeters+0x1>
    27d4:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <runInMeters+0x2>
    27d8:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    27dc:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    27e0:	9b 01       	movw	r18, r22
    27e2:	ac 01       	movw	r20, r24
    27e4:	c7 01       	movw	r24, r14
    27e6:	b6 01       	movw	r22, r12
    27e8:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <__addsf3>
    27ec:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    27f0:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <runInMeters>
    27f4:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <runInMeters+0x1>
    27f8:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <runInMeters+0x2>
    27fc:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <runInMeters+0x3>
			sensorTriggering = 0;
    2800:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <sensorTriggering+0x1>
    2804:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <sensorTriggering>
			cli();
    2808:	f8 94       	cli
			eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    280a:	43 e0       	ldi	r20, 0x03	; 3
    280c:	64 e0       	ldi	r22, 0x04	; 4
    280e:	80 e8       	ldi	r24, 0x80	; 128
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
			sei();
    2816:	78 94       	sei
	}
	if (speedKmh>maxSpeedOnDial)speedKmh = maxSpeedOnDial;
    2818:	c0 91 ea 02 	lds	r28, 0x02EA	; 0x8002ea <maxSpeedOnDial>
    281c:	6c 2f       	mov	r22, r28
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 65 26 	call	0x4cca	; 0x4cca <__floatsisf>
    2828:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <speedKmh>
    282c:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <speedKmh+0x1>
    2830:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <speedKmh+0x2>
    2834:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <speedKmh+0x3>
    2838:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    283c:	88 23       	and	r24, r24
    283e:	74 f4       	brge	.+28     	; 0x285c <calculate_speed+0x22c>
    2840:	6c 2f       	mov	r22, r28
    2842:	70 e0       	ldi	r23, 0x00	; 0
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    284c:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <speedKmh>
    2850:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <speedKmh+0x1>
    2854:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <speedKmh+0x2>
    2858:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <speedKmh+0x3>
}
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	ff 90       	pop	r15
    2862:	ef 90       	pop	r14
    2864:	df 90       	pop	r13
    2866:	cf 90       	pop	r12
    2868:	08 95       	ret

0000286a <set_value>:
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),runInMeters);
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}
uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    286a:	2f 92       	push	r2
    286c:	3f 92       	push	r3
    286e:	6f 92       	push	r6
    2870:	7f 92       	push	r7
    2872:	8f 92       	push	r8
    2874:	9f 92       	push	r9
    2876:	af 92       	push	r10
    2878:	bf 92       	push	r11
    287a:	cf 92       	push	r12
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	29 97       	sbiw	r28, 0x09	; 9
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	7a 01       	movw	r14, r20
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	78 87       	std	Y+8, r23	; 0x08
    28a2:	6f 83       	std	Y+7, r22	; 0x07
    28a4:	29 87       	std	Y+9, r18	; 0x09
	GLCD_Clear();
    28a6:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	48 e0       	ldi	r20, 0x08	; 8
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	80 ea       	ldi	r24, 0xA0	; 160
    28b2:	9b e0       	ldi	r25, 0x0B	; 11
    28b4:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
	GLCD_GotoLine(1);
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(10);
    28be:	8a e0       	ldi	r24, 0x0A	; 10
    28c0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString(text);
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoXY(90,24);
    28ca:	68 e1       	ldi	r22, 0x18	; 24
    28cc:	8a e5       	ldi	r24, 0x5A	; 90
    28ce:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_PrintString("Edit");
    28d2:	8d e7       	ldi	r24, 0x7D	; 125
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoXY(90,36);
    28da:	64 e2       	ldi	r22, 0x24	; 36
    28dc:	8a e5       	ldi	r24, 0x5A	; 90
    28de:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_PrintString("Exit");
    28e2:	82 e8       	ldi	r24, 0x82	; 130
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoXY(90,48);
    28ea:	60 e3       	ldi	r22, 0x30	; 48
    28ec:	8a e5       	ldi	r24, 0x5A	; 90
    28ee:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_PrintString("Save");
    28f2:	87 e8       	ldi	r24, 0x87	; 135
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
			}
			newValue += tenPower;
		}
		return newValue;
	}
	while(tempValue)       //finding the number of digits for current value
    28fa:	9e 2c       	mov	r9, r14
    28fc:	af 2c       	mov	r10, r15
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    28fe:	77 24       	eor	r7, r7
    2900:	73 94       	inc	r7
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2902:	0f 2e       	mov	r0, r31
    2904:	fd e0       	ldi	r31, 0x0D	; 13
    2906:	6f 2e       	mov	r6, r31
    2908:	f0 2d       	mov	r31, r0
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((tens)&&(digitIndex==tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    290a:	0f 2e       	mov	r0, r31
    290c:	f3 ef       	ldi	r31, 0xF3	; 243
    290e:	bf 2e       	mov	r11, r31
    2910:	f0 2d       	mov	r31, r0
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
					}
					else if (currentButton == BUTTON_DOWN) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2912:	0f 2e       	mov	r0, r31
    2914:	f9 e0       	ldi	r31, 0x09	; 9
    2916:	8f 2e       	mov	r8, r31
    2918:	f0 2d       	mov	r31, r0
			}
			newValue += tenPower;
		}
		return newValue;
	}
	while(tempValue)       //finding the number of digits for current value
    291a:	e1 14       	cp	r14, r1
    291c:	f1 04       	cpc	r15, r1
    291e:	99 f0       	breq	.+38     	; 0x2946 <set_value+0xdc>
    2920:	29 2d       	mov	r18, r9
    2922:	3a 2d       	mov	r19, r10
    2924:	00 e0       	ldi	r16, 0x00	; 0
		{
		   tempValue = tempValue / 10;
    2926:	ad ec       	ldi	r26, 0xCD	; 205
    2928:	bc ec       	ldi	r27, 0xCC	; 204
    292a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__umulhisi3>
    292e:	9c 01       	movw	r18, r24
    2930:	36 95       	lsr	r19
    2932:	27 95       	ror	r18
    2934:	36 95       	lsr	r19
    2936:	27 95       	ror	r18
    2938:	36 95       	lsr	r19
    293a:	27 95       	ror	r18
		   valueLength++;
    293c:	0f 5f       	subi	r16, 0xFF	; 255
			}
			newValue += tenPower;
		}
		return newValue;
	}
	while(tempValue)       //finding the number of digits for current value
    293e:	21 15       	cp	r18, r1
    2940:	31 05       	cpc	r19, r1
    2942:	89 f7       	brne	.-30     	; 0x2926 <set_value+0xbc>
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <set_value+0xde>
	uint8_t maxValueLength;
	int8_t *digitsArr;
	int8_t currentItem = 0;
restore_initial_value:
	tempValue = currValue;
	valueLength = 0;
    2946:	00 e0       	ldi	r16, 0x00	; 0
	while(tempValue)       //finding the number of digits for current value
		{
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
    2948:	2d 81       	ldd	r18, Y+5	; 0x05
    294a:	3e 81       	ldd	r19, Y+6	; 0x06
	maxValueLength = 0;
    294c:	1c 82       	std	Y+4, r1	; 0x04
	while(tempValue)       //finding the number of digits for maximum value allowed
    294e:	21 15       	cp	r18, r1
    2950:	31 05       	cpc	r19, r1
    2952:	09 f4       	brne	.+2      	; 0x2956 <set_value+0xec>
    2954:	cd c1       	rjmp	.+922    	; 0x2cf0 <set_value+0x486>
    2956:	c7 2c       	mov	r12, r7
    2958:	01 c0       	rjmp	.+2      	; 0x295c <set_value+0xf2>
    295a:	c8 2e       	mov	r12, r24
		{
			tempValue = tempValue / 10;
    295c:	ad ec       	ldi	r26, 0xCD	; 205
    295e:	bc ec       	ldi	r27, 0xCC	; 204
    2960:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__umulhisi3>
    2964:	9c 01       	movw	r18, r24
    2966:	36 95       	lsr	r19
    2968:	27 95       	ror	r18
    296a:	36 95       	lsr	r19
    296c:	27 95       	ror	r18
    296e:	36 95       	lsr	r19
    2970:	27 95       	ror	r18
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	8c 0d       	add	r24, r12
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2976:	21 15       	cp	r18, r1
    2978:	31 05       	cpc	r19, r1
    297a:	79 f7       	brne	.-34     	; 0x295a <set_value+0xf0>
    297c:	cc 82       	std	Y+4, r12	; 0x04
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    297e:	d1 2c       	mov	r13, r1
    2980:	c6 01       	movw	r24, r12
    2982:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <malloc>
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    298a:	1b 82       	std	Y+3, r1	; 0x03
    298c:	1c 14       	cp	r1, r12
    298e:	1d 04       	cpc	r1, r13
    2990:	0c f0       	brlt	.+2      	; 0x2994 <set_value+0x12a>
    2992:	4c c0       	rjmp	.+152    	; 0x2a2c <set_value+0x1c2>
    2994:	e9 2d       	mov	r30, r9
    2996:	fa 2d       	mov	r31, r10
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	80 e0       	ldi	r24, 0x00	; 0
		if (digitIndex<valueLength){
    299e:	40 2f       	mov	r20, r16
    29a0:	50 e0       	ldi	r21, 0x00	; 0
    29a2:	64 17       	cp	r22, r20
    29a4:	75 07       	cpc	r23, r21
    29a6:	74 f5       	brge	.+92     	; 0x2a04 <set_value+0x19a>
			digitsArr[digitIndex] = tempValue % 10;
    29a8:	c9 80       	ldd	r12, Y+1	; 0x01
    29aa:	da 80       	ldd	r13, Y+2	; 0x02
    29ac:	c8 0e       	add	r12, r24
    29ae:	d1 1c       	adc	r13, r1
    29b0:	87 fd       	sbrc	r24, 7
    29b2:	da 94       	dec	r13
    29b4:	9f 01       	movw	r18, r30
    29b6:	ad ec       	ldi	r26, 0xCD	; 205
    29b8:	bc ec       	ldi	r27, 0xCC	; 204
    29ba:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__umulhisi3>
    29be:	96 95       	lsr	r25
    29c0:	87 95       	ror	r24
    29c2:	96 95       	lsr	r25
    29c4:	87 95       	ror	r24
    29c6:	96 95       	lsr	r25
    29c8:	87 95       	ror	r24
    29ca:	9c 01       	movw	r18, r24
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	82 0f       	add	r24, r18
    29de:	93 1f       	adc	r25, r19
    29e0:	9f 01       	movw	r18, r30
    29e2:	28 1b       	sub	r18, r24
    29e4:	39 0b       	sbc	r19, r25
    29e6:	d6 01       	movw	r26, r12
    29e8:	2c 93       	st	X, r18
			tempValue = tempValue / 10;
    29ea:	9f 01       	movw	r18, r30
    29ec:	ad ec       	ldi	r26, 0xCD	; 205
    29ee:	bc ec       	ldi	r27, 0xCC	; 204
    29f0:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__umulhisi3>
    29f4:	fc 01       	movw	r30, r24
    29f6:	f6 95       	lsr	r31
    29f8:	e7 95       	ror	r30
    29fa:	f6 95       	lsr	r31
    29fc:	e7 95       	ror	r30
    29fe:	f6 95       	lsr	r31
    2a00:	e7 95       	ror	r30
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <set_value+0x1a8>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    2a04:	a9 81       	ldd	r26, Y+1	; 0x01
    2a06:	ba 81       	ldd	r27, Y+2	; 0x02
    2a08:	a8 0f       	add	r26, r24
    2a0a:	b1 1d       	adc	r27, r1
    2a0c:	87 fd       	sbrc	r24, 7
    2a0e:	ba 95       	dec	r27
    2a10:	1c 92       	st	X, r1
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	68 2f       	mov	r22, r24
    2a1a:	08 2e       	mov	r0, r24
    2a1c:	00 0c       	add	r0, r0
    2a1e:	77 0b       	sbc	r23, r23
    2a20:	2c 81       	ldd	r18, Y+4	; 0x04
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	62 17       	cp	r22, r18
    2a26:	73 07       	cpc	r23, r19
    2a28:	0c f4       	brge	.+2      	; 0x2a2c <set_value+0x1c2>
    2a2a:	bb cf       	rjmp	.-138    	; 0x29a2 <set_value+0x138>
			tempValue = tempValue / 10;
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	GLCD_GotoXY(5,20);
    2a2c:	64 e1       	ldi	r22, 0x14	; 20
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	41 e1       	ldi	r20, 0x11	; 17
    2a38:	6c e0       	ldi	r22, 0x0C	; 12
    2a3a:	84 e7       	ldi	r24, 0x74	; 116
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	0f ef       	ldi	r16, 0xFF	; 255
    2a46:	08 0f       	add	r16, r24
    2a48:	06 9d       	mul	r16, r6
    2a4a:	00 2d       	mov	r16, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	0b 5f       	subi	r16, 0xFB	; 251
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2a50:	81 50       	subi	r24, 0x01	; 1
    2a52:	8b 83       	std	Y+3, r24	; 0x03
    2a54:	88 23       	and	r24, r24
    2a56:	24 f1       	brlt	.+72     	; 0x2aa0 <set_value+0x236>
		GLCD_PrintInteger(digitsArr[digitIndex]);
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	e8 0f       	add	r30, r24
    2a5e:	f1 1d       	adc	r31, r1
    2a60:	87 fd       	sbrc	r24, 7
    2a62:	fa 95       	dec	r31
    2a64:	60 81       	ld	r22, Z
    2a66:	06 2e       	mov	r0, r22
    2a68:	00 0c       	add	r0, r0
    2a6a:	77 0b       	sbc	r23, r23
    2a6c:	88 0b       	sbc	r24, r24
    2a6e:	99 0b       	sbc	r25, r25
    2a70:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		if ((digitIndex==tens)&&(tens)){
    2a74:	29 85       	ldd	r18, Y+9	; 0x09
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	08 2e       	mov	r0, r24
    2a7a:	00 0c       	add	r0, r0
    2a7c:	99 0b       	sbc	r25, r25
    2a7e:	42 2f       	mov	r20, r18
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	84 17       	cp	r24, r20
    2a84:	95 07       	cpc	r25, r21
    2a86:	39 f4       	brne	.+14     	; 0x2a96 <set_value+0x22c>
    2a88:	22 23       	and	r18, r18
    2a8a:	29 f0       	breq	.+10     	; 0x2a96 <set_value+0x22c>
			GLCD_PrintString(".");
    2a8c:	8c e8       	ldi	r24, 0x8C	; 140
    2a8e:	92 e0       	ldi	r25, 0x02	; 2
    2a90:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
			rectShift+=5;
    2a94:	0b 5f       	subi	r16, 0xFB	; 251
		}
	}
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	81 50       	subi	r24, 0x01	; 1
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	88 23       	and	r24, r24
    2a9e:	e4 f6       	brge	.-72     	; 0x2a58 <set_value+0x1ee>
		if ((digitIndex==tens)&&(tens)){
			GLCD_PrintString(".");
			rectShift+=5;
		}
	}
	GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2aa0:	4c e0       	ldi	r20, 0x0C	; 12
    2aa2:	40 0f       	add	r20, r16
    2aa4:	24 e2       	ldi	r18, 0x24	; 36
    2aa6:	64 e1       	ldi	r22, 0x14	; 20
    2aa8:	80 2f       	mov	r24, r16
    2aaa:	0e 94 af 20 	call	0x415e	; 0x415e <GLCD_InvertRect>
	print_min_max();
    2aae:	9e 01       	movw	r18, r28
    2ab0:	2f 5f       	subi	r18, 0xFF	; 255
    2ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab4:	19 01       	movw	r2, r18
    2ab6:	0e 94 09 0b 	call	0x1612	; 0x1612 <print_min_max.2924>
	GLCD_Render();
    2aba:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
	while (button_monitor());
    2abe:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2ac2:	81 11       	cpse	r24, r1
    2ac4:	fc cf       	rjmp	.-8      	; 0x2abe <set_value+0x254>
    2ac6:	d1 2c       	mov	r13, r1
	uint8_t currentButton = 0;
		while(1){
			currentButton = button_monitor();
    2ac8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
			if(currentButton){
    2acc:	88 23       	and	r24, r24
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <set_value+0x268>
    2ad0:	03 c1       	rjmp	.+518    	; 0x2cd8 <set_value+0x46e>
				rectShift = 0;
				if (currentButton == BUTTON_SET) {
    2ad2:	81 30       	cpi	r24, 0x01	; 1
    2ad4:	09 f0       	breq	.+2      	; 0x2ad8 <set_value+0x26e>
    2ad6:	85 c0       	rjmp	.+266    	; 0x2be2 <set_value+0x378>
							currentItem++;
    2ad8:	d3 94       	inc	r13
							if (currentItem==maxValueLength){
    2ada:	2d 2d       	mov	r18, r13
    2adc:	0d 2c       	mov	r0, r13
    2ade:	00 0c       	add	r0, r0
    2ae0:	33 0b       	sbc	r19, r19
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	28 17       	cp	r18, r24
    2ae8:	39 07       	cpc	r19, r25
    2aea:	09 f0       	breq	.+2      	; 0x2aee <set_value+0x284>
    2aec:	a5 c0       	rjmp	.+330    	; 0x2c38 <set_value+0x3ce>
								currentItem = 0;
								uint16_t checkValue = new_value();
    2aee:	ce 01       	movw	r24, r28
    2af0:	01 96       	adiw	r24, 0x01	; 1
    2af2:	1c 01       	movw	r2, r24
    2af4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2939>
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
    2af8:	2d 81       	ldd	r18, Y+5	; 0x05
    2afa:	3e 81       	ldd	r19, Y+6	; 0x06
    2afc:	28 17       	cp	r18, r24
    2afe:	39 07       	cpc	r19, r25
    2b00:	08 f4       	brcc	.+2      	; 0x2b04 <set_value+0x29a>
    2b02:	0b cf       	rjmp	.-490    	; 0x291a <set_value+0xb0>
    2b04:	2f 81       	ldd	r18, Y+7	; 0x07
    2b06:	38 85       	ldd	r19, Y+8	; 0x08
    2b08:	82 17       	cp	r24, r18
    2b0a:	93 07       	cpc	r25, r19
    2b0c:	08 f4       	brcc	.+2      	; 0x2b10 <set_value+0x2a6>
    2b0e:	05 cf       	rjmp	.-502    	; 0x291a <set_value+0xb0>
								int8_t menuItem = 0;
								GLCD_InvertRect(rectShift+5,20,rectShift+17,36);
    2b10:	24 e2       	ldi	r18, 0x24	; 36
    2b12:	41 e1       	ldi	r20, 0x11	; 17
    2b14:	64 e1       	ldi	r22, 0x14	; 20
    2b16:	85 e0       	ldi	r24, 0x05	; 5
    2b18:	0e 94 af 20 	call	0x415e	; 0x415e <GLCD_InvertRect>
								while(button_monitor());
    2b1c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2b20:	81 11       	cpse	r24, r1
    2b22:	fc cf       	rjmp	.-8      	; 0x2b1c <set_value+0x2b2>
    2b24:	10 e0       	ldi	r17, 0x00	; 0
								while(1){
										currentButton = button_monitor();
    2b26:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
										if (currentButton == BUTTON_UP) {
    2b2a:	83 30       	cpi	r24, 0x03	; 3
    2b2c:	21 f4       	brne	.+8      	; 0x2b36 <set_value+0x2cc>
											menuItem--;
    2b2e:	11 50       	subi	r17, 0x01	; 1
											if (menuItem<0)menuItem = 2;
    2b30:	6a f5       	brpl	.+90     	; 0x2b8c <set_value+0x322>
    2b32:	12 e0       	ldi	r17, 0x02	; 2
    2b34:	2b c0       	rjmp	.+86     	; 0x2b8c <set_value+0x322>
										}
										else if (currentButton == BUTTON_DOWN) {
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	29 f4       	brne	.+10     	; 0x2b44 <set_value+0x2da>
											menuItem++;
    2b3a:	1f 5f       	subi	r17, 0xFF	; 255
											if (menuItem>2)menuItem = 0;
    2b3c:	13 30       	cpi	r17, 0x03	; 3
    2b3e:	34 f1       	brlt	.+76     	; 0x2b8c <set_value+0x322>
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	24 c0       	rjmp	.+72     	; 0x2b8c <set_value+0x322>
										}
										else if (currentButton == BUTTON_SET) {
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	11 f5       	brne	.+68     	; 0x2b8c <set_value+0x322>
												if (!menuItem){	//getting back to value edit
    2b48:	11 11       	cpse	r17, r1
    2b4a:	15 c0       	rjmp	.+42     	; 0x2b76 <set_value+0x30c>
													currentItem = 0;
													for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
    2b4c:	00 e0       	ldi	r16, 0x00	; 0
    2b4e:	21 e2       	ldi	r18, 0x21	; 33
    2b50:	44 e7       	ldi	r20, 0x74	; 116
    2b52:	65 e1       	ldi	r22, 0x15	; 21
    2b54:	86 e5       	ldi	r24, 0x56	; 86
    2b56:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
    2b5a:	2d e2       	ldi	r18, 0x2D	; 45
    2b5c:	44 e7       	ldi	r20, 0x74	; 116
    2b5e:	61 e2       	ldi	r22, 0x21	; 33
    2b60:	86 e5       	ldi	r24, 0x56	; 86
    2b62:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
    2b66:	29 e3       	ldi	r18, 0x39	; 57
    2b68:	44 e7       	ldi	r20, 0x74	; 116
    2b6a:	6d e2       	ldi	r22, 0x2D	; 45
    2b6c:	86 e5       	ldi	r24, 0x56	; 86
    2b6e:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
											menuItem++;
											if (menuItem>2)menuItem = 0;
										}
										else if (currentButton == BUTTON_SET) {
												if (!menuItem){	//getting back to value edit
													currentItem = 0;
    2b72:	d1 2c       	mov	r13, r1
    2b74:	61 c0       	rjmp	.+194    	; 0x2c38 <set_value+0x3ce>
													for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
													break;
												}
												else if (menuItem == 1){
    2b76:	11 30       	cpi	r17, 0x01	; 1
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <set_value+0x312>
    2b7a:	b7 c0       	rjmp	.+366    	; 0x2cea <set_value+0x480>
													return currValue; //if changes discarded - return initial value
												}
												else if (menuItem == 2){
    2b7c:	12 30       	cpi	r17, 0x02	; 2
    2b7e:	31 f4       	brne	.+12     	; 0x2b8c <set_value+0x322>
													return new_value();
    2b80:	de 01       	movw	r26, r28
    2b82:	11 96       	adiw	r26, 0x01	; 1
    2b84:	1d 01       	movw	r2, r26
    2b86:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2939>
    2b8a:	ba c0       	rjmp	.+372    	; 0x2d00 <set_value+0x496>
												}
										}
							for (int8_t i=0;i<3;i++)GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);
    2b8c:	00 e0       	ldi	r16, 0x00	; 0
    2b8e:	21 e2       	ldi	r18, 0x21	; 33
    2b90:	44 e7       	ldi	r20, 0x74	; 116
    2b92:	65 e1       	ldi	r22, 0x15	; 21
    2b94:	86 e5       	ldi	r24, 0x56	; 86
    2b96:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
    2b9a:	2d e2       	ldi	r18, 0x2D	; 45
    2b9c:	44 e7       	ldi	r20, 0x74	; 116
    2b9e:	61 e2       	ldi	r22, 0x21	; 33
    2ba0:	86 e5       	ldi	r24, 0x56	; 86
    2ba2:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
    2ba6:	29 e3       	ldi	r18, 0x39	; 57
    2ba8:	44 e7       	ldi	r20, 0x74	; 116
    2baa:	6d e2       	ldi	r22, 0x2D	; 45
    2bac:	86 e5       	ldi	r24, 0x56	; 86
    2bae:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
							GLCD_DrawRectangle(86,21+menuItem*12,116,33+menuItem*12,GLCD_Black);
    2bb2:	61 2f       	mov	r22, r17
    2bb4:	66 0f       	add	r22, r22
    2bb6:	61 0f       	add	r22, r17
    2bb8:	66 0f       	add	r22, r22
    2bba:	66 0f       	add	r22, r22
    2bbc:	21 e2       	ldi	r18, 0x21	; 33
    2bbe:	26 0f       	add	r18, r22
    2bc0:	6b 5e       	subi	r22, 0xEB	; 235
    2bc2:	0f ef       	ldi	r16, 0xFF	; 255
    2bc4:	44 e7       	ldi	r20, 0x74	; 116
    2bc6:	86 e5       	ldi	r24, 0x56	; 86
    2bc8:	0e 94 2c 20 	call	0x4058	; 0x4058 <GLCD_DrawRectangle>
							GLCD_Render();
    2bcc:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
							while(button_monitor());
    2bd0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	fc cf       	rjmp	.-8      	; 0x2bd0 <set_value+0x366>
							while(!button_monitor());
    2bd8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2bdc:	88 23       	and	r24, r24
    2bde:	e1 f3       	breq	.-8      	; 0x2bd8 <set_value+0x36e>
    2be0:	a2 cf       	rjmp	.-188    	; 0x2b26 <set_value+0x2bc>
							}
						}
					}
					if (currentButton == BUTTON_UP) {
    2be2:	83 30       	cpi	r24, 0x03	; 3
    2be4:	a1 f4       	brne	.+40     	; 0x2c0e <set_value+0x3a4>
						digitsArr[currentItem]++;
    2be6:	e9 81       	ldd	r30, Y+1	; 0x01
    2be8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bea:	8d 2d       	mov	r24, r13
    2bec:	0d 2c       	mov	r0, r13
    2bee:	00 0c       	add	r0, r0
    2bf0:	99 0b       	sbc	r25, r25
    2bf2:	e8 0f       	add	r30, r24
    2bf4:	f9 1f       	adc	r31, r25
    2bf6:	20 81       	ld	r18, Z
    2bf8:	2f 5f       	subi	r18, 0xFF	; 255
    2bfa:	20 83       	st	Z, r18
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    2bfc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfe:	fa 81       	ldd	r31, Y+2	; 0x02
    2c00:	e8 0f       	add	r30, r24
    2c02:	f9 1f       	adc	r31, r25
    2c04:	80 81       	ld	r24, Z
    2c06:	8a 30       	cpi	r24, 0x0A	; 10
    2c08:	bc f0       	brlt	.+46     	; 0x2c38 <set_value+0x3ce>
    2c0a:	10 82       	st	Z, r1
    2c0c:	15 c0       	rjmp	.+42     	; 0x2c38 <set_value+0x3ce>
					}
					else if (currentButton == BUTTON_DOWN) {
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	99 f4       	brne	.+38     	; 0x2c38 <set_value+0x3ce>
						digitsArr[currentItem]--;
    2c12:	e9 81       	ldd	r30, Y+1	; 0x01
    2c14:	fa 81       	ldd	r31, Y+2	; 0x02
    2c16:	8d 2d       	mov	r24, r13
    2c18:	0d 2c       	mov	r0, r13
    2c1a:	00 0c       	add	r0, r0
    2c1c:	99 0b       	sbc	r25, r25
    2c1e:	e8 0f       	add	r30, r24
    2c20:	f9 1f       	adc	r31, r25
    2c22:	20 81       	ld	r18, Z
    2c24:	21 50       	subi	r18, 0x01	; 1
    2c26:	20 83       	st	Z, r18
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	e8 0f       	add	r30, r24
    2c2e:	f9 1f       	adc	r31, r25
    2c30:	80 81       	ld	r24, Z
    2c32:	88 23       	and	r24, r24
    2c34:	0c f4       	brge	.+2      	; 0x2c38 <set_value+0x3ce>
    2c36:	80 82       	st	Z, r8
					}
			GLCD_GotoXY(5,20);
    2c38:	64 e1       	ldi	r22, 0x14	; 20
    2c3a:	85 e0       	ldi	r24, 0x05	; 5
    2c3c:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2c40:	8c 81       	ldd	r24, Y+4	; 0x04
    2c42:	81 50       	subi	r24, 0x01	; 1
    2c44:	8b 83       	std	Y+3, r24	; 0x03
    2c46:	88 23       	and	r24, r24
    2c48:	14 f1       	brlt	.+68     	; 0x2c8e <set_value+0x424>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4e:	e8 0f       	add	r30, r24
    2c50:	f1 1d       	adc	r31, r1
    2c52:	87 fd       	sbrc	r24, 7
    2c54:	fa 95       	dec	r31
    2c56:	60 81       	ld	r22, Z
    2c58:	06 2e       	mov	r0, r22
    2c5a:	00 0c       	add	r0, r0
    2c5c:	77 0b       	sbc	r23, r23
    2c5e:	88 0b       	sbc	r24, r24
    2c60:	99 0b       	sbc	r25, r25
    2c62:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
				if ((tens)&&(digitIndex==tens)) {GLCD_PrintString(".");}
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	88 23       	and	r24, r24
    2c6a:	61 f0       	breq	.+24     	; 0x2c84 <set_value+0x41a>
    2c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c6e:	02 2e       	mov	r0, r18
    2c70:	00 0c       	add	r0, r0
    2c72:	33 0b       	sbc	r19, r19
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	28 17       	cp	r18, r24
    2c78:	39 07       	cpc	r19, r25
    2c7a:	21 f4       	brne	.+8      	; 0x2c84 <set_value+0x41a>
    2c7c:	8c e8       	ldi	r24, 0x8C	; 140
    2c7e:	92 e0       	ldi	r25, 0x02	; 2
    2c80:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
					else if (currentButton == BUTTON_DOWN) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
					}
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	81 50       	subi	r24, 0x01	; 1
    2c88:	8b 83       	std	Y+3, r24	; 0x03
    2c8a:	88 23       	and	r24, r24
    2c8c:	f4 f6       	brge	.-68     	; 0x2c4a <set_value+0x3e0>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((tens)&&(digitIndex==tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c90:	81 50       	subi	r24, 0x01	; 1
    2c92:	db 9c       	mul	r13, r11
    2c94:	90 2d       	mov	r25, r0
    2c96:	11 24       	eor	r1, r1
    2c98:	86 9d       	mul	r24, r6
    2c9a:	90 0d       	add	r25, r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	85 e0       	ldi	r24, 0x05	; 5
    2ca0:	89 0f       	add	r24, r25
			if ((tens)&&(currentItem<tens))	rectShift+=5;
    2ca2:	29 85       	ldd	r18, Y+9	; 0x09
    2ca4:	22 23       	and	r18, r18
    2ca6:	51 f0       	breq	.+20     	; 0x2cbc <set_value+0x452>
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	4d 2d       	mov	r20, r13
    2cac:	0d 2c       	mov	r0, r13
    2cae:	00 0c       	add	r0, r0
    2cb0:	55 0b       	sbc	r21, r21
    2cb2:	42 17       	cp	r20, r18
    2cb4:	53 07       	cpc	r21, r19
    2cb6:	14 f4       	brge	.+4      	; 0x2cbc <set_value+0x452>
    2cb8:	8a e0       	ldi	r24, 0x0A	; 10
    2cba:	89 0f       	add	r24, r25
			GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2cbc:	4c e0       	ldi	r20, 0x0C	; 12
    2cbe:	48 0f       	add	r20, r24
    2cc0:	24 e2       	ldi	r18, 0x24	; 36
    2cc2:	64 e1       	ldi	r22, 0x14	; 20
    2cc4:	0e 94 af 20 	call	0x415e	; 0x415e <GLCD_InvertRect>
			print_min_max();
    2cc8:	9e 01       	movw	r18, r28
    2cca:	2f 5f       	subi	r18, 0xFF	; 255
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	19 01       	movw	r2, r18
    2cd0:	0e 94 09 0b 	call	0x1612	; 0x1612 <print_min_max.2924>
			GLCD_Render();
    2cd4:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
		}
		while(button_monitor());
    2cd8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2cdc:	81 11       	cpse	r24, r1
    2cde:	fc cf       	rjmp	.-8      	; 0x2cd8 <set_value+0x46e>
		while(!button_monitor());
    2ce0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2ce4:	88 23       	and	r24, r24
    2ce6:	e1 f3       	breq	.-8      	; 0x2ce0 <set_value+0x476>
    2ce8:	ef ce       	rjmp	.-546    	; 0x2ac8 <set_value+0x25e>
													currentItem = 0;
													for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
													break;
												}
												else if (menuItem == 1){
													return currValue; //if changes discarded - return initial value
    2cea:	8e 2d       	mov	r24, r14
    2cec:	9f 2d       	mov	r25, r15
    2cee:	08 c0       	rjmp	.+16     	; 0x2d00 <set_value+0x496>
	while(tempValue)       //finding the number of digits for maximum value allowed
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <malloc>
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2cfc:	1b 82       	std	Y+3, r1	; 0x03
    2cfe:	96 ce       	rjmp	.-724    	; 0x2a2c <set_value+0x1c2>
			GLCD_Render();
		}
		while(button_monitor());
		while(!button_monitor());
	}
}
    2d00:	29 96       	adiw	r28, 0x09	; 9
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	ff 90       	pop	r15
    2d16:	ef 90       	pop	r14
    2d18:	df 90       	pop	r13
    2d1a:	cf 90       	pop	r12
    2d1c:	bf 90       	pop	r11
    2d1e:	af 90       	pop	r10
    2d20:	9f 90       	pop	r9
    2d22:	8f 90       	pop	r8
    2d24:	7f 90       	pop	r7
    2d26:	6f 90       	pop	r6
    2d28:	3f 90       	pop	r3
    2d2a:	2f 90       	pop	r2
    2d2c:	08 95       	ret

00002d2e <debug_screen>:
void debug_screen(){
    2d2e:	cf 93       	push	r28
	uint8_t xOfset1 = 4;
	uint8_t xOfset2 = 26;
	uint8_t xOfset3 = 60;
	uint8_t xOfset4 = 86;
	GLCD_Clear();
    2d30:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	48 e0       	ldi	r20, 0x08	; 8
    2d38:	65 e0       	ldi	r22, 0x05	; 5
    2d3a:	80 ea       	ldi	r24, 0xA0	; 160
    2d3c:	9b e0       	ldi	r25, 0x0B	; 11
    2d3e:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
	GLCD_GotoLine(0);
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2d48:	84 e0       	ldi	r24, 0x04	; 4
    2d4a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Spd");
    2d4e:	8c e8       	ldi	r24, 0x8C	; 140
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2d56:	8a e1       	ldi	r24, 0x1A	; 26
    2d58:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintDouble(speedKmh,10);
    2d5c:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <speedKmh>
    2d60:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <speedKmh+0x1>
    2d64:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <speedKmh+0x2>
    2d68:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <speedKmh+0x3>
    2d6c:	2a e0       	ldi	r18, 0x0A	; 10
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2d78:	8c e3       	ldi	r24, 0x3C	; 60
    2d7a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Ubt");
    2d7e:	80 e9       	ldi	r24, 0x90	; 144
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2d86:	86 e5       	ldi	r24, 0x56	; 86
    2d88:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintDouble(voltage/10.0,100);
    2d8c:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <voltage>
    2d90:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <voltage+0x1>
    2d94:	07 2e       	mov	r0, r23
    2d96:	00 0c       	add	r0, r0
    2d98:	88 0b       	sbc	r24, r24
    2d9a:	99 0b       	sbc	r25, r25
    2d9c:	0e 94 65 26 	call	0x4cca	; 0x4cca <__floatsisf>
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    2dac:	24 e6       	ldi	r18, 0x64	; 100
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
	
	GLCD_GotoLine(1);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2dbe:	84 e0       	ldi	r24, 0x04	; 4
    2dc0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Frq");
    2dc4:	84 e9       	ldi	r24, 0x94	; 148
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2dcc:	8a e1       	ldi	r24, 0x1A	; 26
    2dce:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintDouble(frequency,10);
    2dd2:	60 91 cc 02 	lds	r22, 0x02CC	; 0x8002cc <frequency>
    2dd6:	70 91 cd 02 	lds	r23, 0x02CD	; 0x8002cd <frequency+0x1>
    2dda:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <frequency+0x2>
    2dde:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <frequency+0x3>
    2de2:	2a e0       	ldi	r18, 0x0A	; 10
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e0       	ldi	r20, 0x00	; 0
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2dee:	8c e3       	ldi	r24, 0x3C	; 60
    2df0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("StP");
    2df4:	88 e9       	ldi	r24, 0x98	; 152
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2dfc:	86 e5       	ldi	r24, 0x56	; 86
    2dfe:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerPrecise);
    2e02:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <speedTimerPrecise>
    2e06:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <speedTimerPrecise+0x1>
    2e0a:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <speedTimerPrecise+0x2>
    2e0e:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <speedTimerPrecise+0x3>
    2e12:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoLine(2);
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2e1c:	84 e0       	ldi	r24, 0x04	; 4
    2e1e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Stp");
    2e22:	8c e9       	ldi	r24, 0x9C	; 156
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2e2a:	8a e1       	ldi	r24, 0x1A	; 26
    2e2c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(steps);
    2e30:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <steps>
    2e34:	70 91 d5 02 	lds	r23, 0x02D5	; 0x8002d5 <steps+0x1>
    2e38:	07 2e       	mov	r0, r23
    2e3a:	00 0c       	add	r0, r0
    2e3c:	88 0b       	sbc	r24, r24
    2e3e:	99 0b       	sbc	r25, r25
    2e40:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2e44:	8c e3       	ldi	r24, 0x3C	; 60
    2e46:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("StR");
    2e4a:	80 ea       	ldi	r24, 0xA0	; 160
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2e52:	86 e5       	ldi	r24, 0x56	; 86
    2e54:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRough);
    2e58:	60 91 dd 02 	lds	r22, 0x02DD	; 0x8002dd <speedTimerRough>
    2e5c:	70 91 de 02 	lds	r23, 0x02DE	; 0x8002de <speedTimerRough+0x1>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoLine(3);
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2e6e:	84 e0       	ldi	r24, 0x04	; 4
    2e70:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("nSt");
    2e74:	84 ea       	ldi	r24, 0xA4	; 164
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2e7c:	8a e1       	ldi	r24, 0x1A	; 26
    2e7e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(newSteps);
    2e82:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <newSteps>
    2e86:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <newSteps+0x1>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2e92:	8c e3       	ldi	r24, 0x3C	; 60
    2e94:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("tRP");
    2e98:	88 ea       	ldi	r24, 0xA8	; 168
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2ea0:	86 e5       	ldi	r24, 0x56	; 86
    2ea2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRoughPrevious);
    2ea6:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <speedTimerRoughPrevious>
    2eaa:	70 91 dc 02 	lds	r23, 0x02DC	; 0x8002dc <speedTimerRoughPrevious+0x1>
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoLine(4);
    2eb6:	84 e0       	ldi	r24, 0x04	; 4
    2eb8:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2ebc:	84 e0       	ldi	r24, 0x04	; 4
    2ebe:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Phs");
    2ec2:	8c ea       	ldi	r24, 0xAC	; 172
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2eca:	8a e1       	ldi	r24, 0x1A	; 26
    2ecc:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(phase);
    2ed0:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <phase>
    2ed4:	06 2e       	mov	r0, r22
    2ed6:	00 0c       	add	r0, r0
    2ed8:	77 0b       	sbc	r23, r23
    2eda:	88 0b       	sbc	r24, r24
    2edc:	99 0b       	sbc	r25, r25
    2ede:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2ee2:	8c e3       	ldi	r24, 0x3C	; 60
    2ee4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Trn");
    2ee8:	80 eb       	ldi	r24, 0xB0	; 176
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2ef0:	86 e5       	ldi	r24, 0x56	; 86
    2ef2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("L");
    2ef6:	84 eb       	ldi	r24, 0xB4	; 180
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_PrintInteger(!(PIN_LEFT));
    2efe:	66 b3       	in	r22, 0x16	; 22
    2f00:	66 95       	lsr	r22
    2f02:	66 95       	lsr	r22
    2f04:	66 95       	lsr	r22
    2f06:	c1 e0       	ldi	r28, 0x01	; 1
    2f08:	6c 27       	eor	r22, r28
    2f0a:	86 2f       	mov	r24, r22
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e0       	ldi	r26, 0x00	; 0
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	61 70       	andi	r22, 0x01	; 1
    2f18:	77 27       	eor	r23, r23
    2f1a:	88 27       	eor	r24, r24
    2f1c:	99 27       	eor	r25, r25
    2f1e:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	GLCD_PrintString(" R");
    2f22:	86 eb       	ldi	r24, 0xB6	; 182
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_PrintInteger(!(PIN_RIGHT));
    2f2a:	66 b3       	in	r22, 0x16	; 22
    2f2c:	62 95       	swap	r22
    2f2e:	6f 70       	andi	r22, 0x0F	; 15
    2f30:	6c 27       	eor	r22, r28
    2f32:	86 2f       	mov	r24, r22
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a0 e0       	ldi	r26, 0x00	; 0
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	61 70       	andi	r22, 0x01	; 1
    2f40:	77 27       	eor	r23, r23
    2f42:	88 27       	eor	r24, r24
    2f44:	99 27       	eor	r25, r25
    2f46:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoLine(5);
    2f4a:	85 e0       	ldi	r24, 0x05	; 5
    2f4c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2f50:	84 e0       	ldi	r24, 0x04	; 4
    2f52:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("STr");
    2f56:	89 eb       	ldi	r24, 0xB9	; 185
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2f5e:	8a e1       	ldi	r24, 0x1A	; 26
    2f60:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(sensorTriggering);
    2f64:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <sensorTriggering>
    2f68:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <sensorTriggering+0x1>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	
	GLCD_GotoLine(6);	
    2f74:	86 e0       	ldi	r24, 0x06	; 6
    2f76:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2f7a:	84 e0       	ldi	r24, 0x04	; 4
    2f7c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintString("Run");
    2f80:	8d eb       	ldi	r24, 0xBD	; 189
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2f88:	8a e1       	ldi	r24, 0x1A	; 26
    2f8a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_PrintInteger(runInMeters);
    2f8e:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <runInMeters>
    2f92:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <runInMeters+0x1>
    2f96:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <runInMeters+0x2>
    2f9a:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <runInMeters+0x3>
    2f9e:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
 	GLCD_Render();
    2fa2:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
    2fa6:	cf 91       	pop	r28
    2fa8:	08 95       	ret

00002faa <main>:
	MCUCR|= _BV(ISC11); //Falling edge interrupt INT1 (Hall sensor)
	GICR|=_BV(INT1); //External Interrupt Enable INT1
}
int main(void)
{
	presets();
    2faa:	0e 94 4b 12 	call	0x2496	; 0x2496 <presets>
	if (!debugMode)main_screen();
    2fae:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <debugMode>
    2fb2:	81 11       	cpse	r24, r1
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <main+0x10>
    2fb6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <main_screen>
	while(1){
		data_monitor();
    2fba:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <data_monitor>
		calculate_speed();
    2fbe:	0e 94 18 13 	call	0x2630	; 0x2630 <calculate_speed>
		hand_position_update();
    2fc2:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <hand_position_update>
		if(!debugMode)signal_monitor();else debug_screen();
    2fc6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <debugMode>
    2fca:	81 11       	cpse	r24, r1
    2fcc:	03 c0       	rjmp	.+6      	; 0x2fd4 <main+0x2a>
    2fce:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <signal_monitor>
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <main+0x2e>
    2fd4:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <debug_screen>
		if(button_monitor()==BUTTON_SET) menu_screen();
    2fd8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	69 f7       	brne	.-38     	; 0x2fba <main+0x10>
    2fe0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <menu_screen>
    2fe4:	ea cf       	rjmp	.-44     	; 0x2fba <main+0x10>

00002fe6 <menu_screen>:
		}
	}
	uint8_t offset = 91;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
    2fe6:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <menuItem.2796>
    2fea:	86 30       	cpi	r24, 0x06	; 6
    2fec:	54 f0       	brlt	.+20     	; 0x3002 <menu_screen+0x1c>
    2fee:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <page.2797>
    2ff2:	8f 5f       	subi	r24, 0xFF	; 255
    2ff4:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <page.2797>
    2ff8:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <menuItem.2796>
	if (menuItem < 0){page--;menuItem= 5;}
	if ((page == 2)&&(menuItem > 3)){page = 0; menuItem = 0;}
    2ffc:	82 30       	cpi	r24, 0x02	; 2
    2ffe:	d9 f4       	brne	.+54     	; 0x3036 <menu_screen+0x50>
    3000:	24 c0       	rjmp	.+72     	; 0x304a <menu_screen+0x64>
	}
	uint8_t offset = 91;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
	if (menuItem < 0){page--;menuItem= 5;}
    3002:	88 23       	and	r24, r24
    3004:	5c f4       	brge	.+22     	; 0x301c <menu_screen+0x36>
    3006:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <page.2797>
    300a:	81 50       	subi	r24, 0x01	; 1
    300c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <page.2797>
    3010:	95 e0       	ldi	r25, 0x05	; 5
    3012:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <menuItem.2796>
	if ((page == 2)&&(menuItem > 3)){page = 0; menuItem = 0;}
    3016:	82 30       	cpi	r24, 0x02	; 2
    3018:	71 f4       	brne	.+28     	; 0x3036 <menu_screen+0x50>
    301a:	08 c0       	rjmp	.+16     	; 0x302c <menu_screen+0x46>
    301c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <page.2797>
    3020:	82 30       	cpi	r24, 0x02	; 2
    3022:	49 f4       	brne	.+18     	; 0x3036 <menu_screen+0x50>
    3024:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <menuItem.2796>
    3028:	84 30       	cpi	r24, 0x04	; 4
    302a:	7c f0       	brlt	.+30     	; 0x304a <menu_screen+0x64>
    302c:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <page.2797>
    3030:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <menuItem.2796>
    3034:	0a c0       	rjmp	.+20     	; 0x304a <menu_screen+0x64>
	if (page < 0){page = 2;menuItem = 3;}
    3036:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <page.2797>
    303a:	88 23       	and	r24, r24
    303c:	34 f4       	brge	.+12     	; 0x304a <menu_screen+0x64>
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <page.2797>
    3044:	83 e0       	ldi	r24, 0x03	; 3
    3046:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <menuItem.2796>
	GLCD_Clear();
    304a:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	48 e0       	ldi	r20, 0x08	; 8
    3052:	65 e0       	ldi	r22, 0x05	; 5
    3054:	80 ea       	ldi	r24, 0xA0	; 160
    3056:	9b e0       	ldi	r25, 0x0B	; 11
    3058:	0e 94 86 21 	call	0x430c	; 0x430c <GLCD_SetFont>
	if(page==0){
    305c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <page.2797>
    3060:	81 11       	cpse	r24, r1
    3062:	89 c0       	rjmp	.+274    	; 0x3176 <menu_screen+0x190>
		//item 0
		GLCD_GotoX(10);
    3064:	8a e0       	ldi	r24, 0x0A	; 10
    3066:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(1);
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Dial light");
    3070:	81 ec       	ldi	r24, 0xC1	; 193
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3078:	8b e5       	ldi	r24, 0x5B	; 91
    307a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(pwmDialLight);
    307e:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <pwmDialLight>
    3082:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 1
		GLCD_GotoX(10);
    308e:	8a e0       	ldi	r24, 0x0A	; 10
    3090:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(2);
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Hand light");
    309a:	8c ec       	ldi	r24, 0xCC	; 204
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    30a2:	8b e5       	ldi	r24, 0x5B	; 91
    30a4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(pwmHandLight);
    30a8:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <pwmHandLight>
    30ac:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 2
		GLCD_GotoX(10);
    30b8:	8a e0       	ldi	r24, 0x0A	; 10
    30ba:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(3);
    30be:	83 e0       	ldi	r24, 0x03	; 3
    30c0:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Wheel diam.");
    30c4:	87 ed       	ldi	r24, 0xD7	; 215
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    30cc:	8b e5       	ldi	r24, 0x5B	; 91
    30ce:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintDouble(wheelDiameter,1000);
    30d2:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <wheelDiameter>
    30d6:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <wheelDiameter+0x1>
    30da:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <wheelDiameter+0x2>
    30de:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <wheelDiameter+0x3>
    30e2:	28 ee       	ldi	r18, 0xE8	; 232
    30e4:	33 e0       	ldi	r19, 0x03	; 3
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
		//item 3
		GLCD_GotoX(10);
    30ee:	8a e0       	ldi	r24, 0x0A	; 10
    30f0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(4);
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Gear ratio");
    30fa:	83 ee       	ldi	r24, 0xE3	; 227
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3102:	8b e5       	ldi	r24, 0x5B	; 91
    3104:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintDouble(gearRatio,1000);
    3108:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <gearRatio>
    310c:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <gearRatio+0x1>
    3110:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gearRatio+0x2>
    3114:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <gearRatio+0x3>
    3118:	28 ee       	ldi	r18, 0xE8	; 232
    311a:	33 e0       	ldi	r19, 0x03	; 3
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
		//item 4
		GLCD_GotoX(10);
    3124:	8a e0       	ldi	r24, 0x0A	; 10
    3126:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(5);
    312a:	85 e0       	ldi	r24, 0x05	; 5
    312c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Magnets");
    3130:	8e ee       	ldi	r24, 0xEE	; 238
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3138:	8b e5       	ldi	r24, 0x5B	; 91
    313a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(magnetsOnWheel);
    313e:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <magnetsOnWheel>
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 5
		GLCD_GotoX(10);
    314c:	8a e0       	ldi	r24, 0x0A	; 10
    314e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(6);
    3152:	86 e0       	ldi	r24, 0x06	; 6
    3154:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Step mode");
    3158:	86 ef       	ldi	r24, 0xF6	; 246
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3160:	8b e5       	ldi	r24, 0x5B	; 91
    3162:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(stepMode);
    3166:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <stepMode>
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
    3174:	b3 c0       	rjmp	.+358    	; 0x32dc <menu_screen+0x2f6>
	}
	else if (page==1){
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	09 f0       	breq	.+2      	; 0x317c <menu_screen+0x196>
    317a:	83 c0       	rjmp	.+262    	; 0x3282 <menu_screen+0x29c>
		//item 6
		GLCD_GotoX(10);
    317c:	8a e0       	ldi	r24, 0x0A	; 10
    317e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(1);
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Max speed");
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	91 e0       	ldi	r25, 0x01	; 1
    318c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3190:	8b e5       	ldi	r24, 0x5B	; 91
    3192:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(maxSpeedOnDial);
    3196:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <maxSpeedOnDial>
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 7
		GLCD_GotoX(10);
    31a4:	8a e0       	ldi	r24, 0x0A	; 10
    31a6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(2);
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Deg. per km/h");
    31b0:	8a e0       	ldi	r24, 0x0A	; 10
    31b2:	91 e0       	ldi	r25, 0x01	; 1
    31b4:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    31b8:	8b e5       	ldi	r24, 0x5B	; 91
    31ba:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintDouble(degreesPerKmh,1000);
    31be:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <degreesPerKmh>
    31c2:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <degreesPerKmh+0x1>
    31c6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <degreesPerKmh+0x2>
    31ca:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <degreesPerKmh+0x3>
    31ce:	28 ee       	ldi	r18, 0xE8	; 232
    31d0:	33 e0       	ldi	r19, 0x03	; 3
    31d2:	40 e0       	ldi	r20, 0x00	; 0
    31d4:	50 e0       	ldi	r21, 0x00	; 0
    31d6:	0e 94 b5 24 	call	0x496a	; 0x496a <GLCD_PrintDouble>
		//item 8
		GLCD_GotoX(10);
    31da:	8a e0       	ldi	r24, 0x0A	; 10
    31dc:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(3);
    31e0:	83 e0       	ldi	r24, 0x03	; 3
    31e2:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Motor steps");
    31e6:	88 e1       	ldi	r24, 0x18	; 24
    31e8:	91 e0       	ldi	r25, 0x01	; 1
    31ea:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    31ee:	8b e5       	ldi	r24, 0x5B	; 91
    31f0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(stepperMotorSteps);
    31f4:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    31f8:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 9
		GLCD_GotoX(10);
    3204:	8a e0       	ldi	r24, 0x0A	; 10
    3206:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(4);
    320a:	84 e0       	ldi	r24, 0x04	; 4
    320c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Step interval");
    3210:	84 e2       	ldi	r24, 0x24	; 36
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3218:	8b e5       	ldi	r24, 0x5B	; 91
    321a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(stepInterval);
    321e:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <stepInterval>
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 10
		GLCD_GotoX(10);
    322c:	8a e0       	ldi	r24, 0x0A	; 10
    322e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(5);
    3232:	85 e0       	ldi	r24, 0x05	; 5
    3234:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Oled bright.");
    3238:	82 e3       	ldi	r24, 0x32	; 50
    323a:	91 e0       	ldi	r25, 0x01	; 1
    323c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3240:	8b e5       	ldi	r24, 0x5B	; 91
    3242:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_PrintInteger(oledBrightness);
    3246:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <oledBrightness>
    324a:	70 e0       	ldi	r23, 0x00	; 0
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		//item 11
		GLCD_GotoX(10);
    3254:	8a e0       	ldi	r24, 0x0A	; 10
    3256:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(6);
    325a:	86 e0       	ldi	r24, 0x06	; 6
    325c:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		if (debugMode) GLCD_PrintString("Normal mode");else GLCD_PrintString("Debug mode");
    3260:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <debugMode>
    3264:	88 23       	and	r24, r24
    3266:	29 f0       	breq	.+10     	; 0x3272 <menu_screen+0x28c>
    3268:	8f e3       	ldi	r24, 0x3F	; 63
    326a:	91 e0       	ldi	r25, 0x01	; 1
    326c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
    3270:	04 c0       	rjmp	.+8      	; 0x327a <menu_screen+0x294>
    3272:	8b e4       	ldi	r24, 0x4B	; 75
    3274:	91 e0       	ldi	r25, 0x01	; 1
    3276:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    327a:	8b e5       	ldi	r24, 0x5B	; 91
    327c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
    3280:	2d c0       	rjmp	.+90     	; 0x32dc <menu_screen+0x2f6>
	}
	else if (page==2){
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	59 f5       	brne	.+86     	; 0x32dc <menu_screen+0x2f6>
		//item 12
		GLCD_GotoX(10);
    3286:	8a e0       	ldi	r24, 0x0A	; 10
    3288:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(1);
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Calibrate hand");
    3292:	86 e5       	ldi	r24, 0x56	; 86
    3294:	91 e0       	ldi	r25, 0x01	; 1
    3296:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		GLCD_GotoX(offset);
    329a:	8b e5       	ldi	r24, 0x5B	; 91
    329c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		//item 13
		GLCD_GotoX(10);
    32a0:	8a e0       	ldi	r24, 0x0A	; 10
    32a2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(2);
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Reset odometer");
    32ac:	85 e6       	ldi	r24, 0x65	; 101
    32ae:	91 e0       	ldi	r25, 0x01	; 1
    32b0:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		//item 14
		GLCD_GotoX(10);
    32b4:	8a e0       	ldi	r24, 0x0A	; 10
    32b6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(3);
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Load defaults");
    32c0:	84 e7       	ldi	r24, 0x74	; 116
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
		//item 15
		GLCD_GotoX(10);
    32c8:	8a e0       	ldi	r24, 0x0A	; 10
    32ca:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
		GLCD_GotoLine(4);
    32ce:	84 e0       	ldi	r24, 0x04	; 4
    32d0:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
		GLCD_PrintString("Exit");
    32d4:	82 e8       	ldi	r24, 0x82	; 130
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	}
	GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    32dc:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <menuItem.2796>
    32e0:	66 0f       	add	r22, r22
    32e2:	66 0f       	add	r22, r22
    32e4:	66 0f       	add	r22, r22
    32e6:	2f e0       	ldi	r18, 0x0F	; 15
    32e8:	26 0f       	add	r18, r22
    32ea:	69 5f       	subi	r22, 0xF9	; 249
    32ec:	4f e7       	ldi	r20, 0x7F	; 127
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	0e 94 af 20 	call	0x415e	; 0x415e <GLCD_InvertRect>
	GLCD_Render();
    32f4:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
	while (button_monitor());
    32f8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    32fc:	81 11       	cpse	r24, r1
    32fe:	fc cf       	rjmp	.-8      	; 0x32f8 <menu_screen+0x312>
	uint8_t currentButton = 0;
	uint16_t newValue = 0;
	while(1){
		currentButton = button_monitor();
    3300:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
		if(currentButton){
    3304:	88 23       	and	r24, r24
    3306:	e1 f3       	breq	.-8      	; 0x3300 <menu_screen+0x31a>
			if (currentButton == BUTTON_SET){
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	09 f0       	breq	.+2      	; 0x330e <menu_screen+0x328>
    330c:	bc c2       	rjmp	.+1400   	; 0x3886 <menu_screen+0x8a0>
				switch(menuItem+6*page)		{
    330e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <page.2797>
    3312:	08 2e       	mov	r0, r24
    3314:	00 0c       	add	r0, r0
    3316:	99 0b       	sbc	r25, r25
    3318:	fc 01       	movw	r30, r24
    331a:	ee 0f       	add	r30, r30
    331c:	ff 1f       	adc	r31, r31
    331e:	e8 0f       	add	r30, r24
    3320:	f9 1f       	adc	r31, r25
    3322:	ee 0f       	add	r30, r30
    3324:	ff 1f       	adc	r31, r31
    3326:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <menuItem.2796>
    332a:	e8 0f       	add	r30, r24
    332c:	f1 1d       	adc	r31, r1
    332e:	87 fd       	sbrc	r24, 7
    3330:	fa 95       	dec	r31
    3332:	e0 31       	cpi	r30, 0x10	; 16
    3334:	f1 05       	cpc	r31, r1
    3336:	08 f0       	brcs	.+2      	; 0x333a <menu_screen+0x354>
    3338:	b5 c2       	rjmp	.+1386   	; 0x38a4 <menu_screen+0x8be>
    333a:	e6 5d       	subi	r30, 0xD6	; 214
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	0c 94 d1 27 	jmp	0x4fa2	; 0x4fa2 <__tablejump2__>
					case 0:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_DIAL_MIN,pwmDialLight,0,"Dial light PWM");
    3342:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <pwmDialLight>
    3346:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    334a:	02 e8       	ldi	r16, 0x82	; 130
    334c:	11 e0       	ldi	r17, 0x01	; 1
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	70 e0       	ldi	r23, 0x00	; 0
    3354:	8f ef       	ldi	r24, 0xFF	; 255
    3356:	93 e0       	ldi	r25, 0x03	; 3
    3358:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=pwmDialLight){
    335c:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <pwmDialLight>
    3360:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    3364:	82 17       	cp	r24, r18
    3366:	93 07       	cpc	r25, r19
    3368:	09 f4       	brne	.+2      	; 0x336c <menu_screen+0x386>
    336a:	9c c2       	rjmp	.+1336   	; 0x38a4 <menu_screen+0x8be>
							pwmDialLight = newValue;
    336c:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <pwmDialLight+0x1>
    3370:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <pwmDialLight>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3374:	41 e0       	ldi	r20, 0x01	; 1
    3376:	64 e0       	ldi	r22, 0x04	; 4
    3378:	88 e0       	ldi	r24, 0x08	; 8
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
							OCR1B = pwmDialLight;
    3380:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <pwmDialLight>
    3384:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <pwmDialLight+0x1>
    3388:	99 bd       	out	0x29, r25	; 41
    338a:	88 bd       	out	0x28, r24	; 40
    338c:	8b c2       	rjmp	.+1302   	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 1:
					{
						newValue = set_value(PWM_HAND_MAX,PWM_HAND_MIN,pwmHandLight,0,"Hand light PWM");
    338e:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <pwmHandLight>
    3392:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    3396:	01 e9       	ldi	r16, 0x91	; 145
    3398:	11 e0       	ldi	r17, 0x01	; 1
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	8f ef       	ldi	r24, 0xFF	; 255
    33a2:	93 e0       	ldi	r25, 0x03	; 3
    33a4:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=pwmHandLight){
    33a8:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <pwmHandLight>
    33ac:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    33b0:	82 17       	cp	r24, r18
    33b2:	93 07       	cpc	r25, r19
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <menu_screen+0x3d2>
    33b6:	76 c2       	rjmp	.+1260   	; 0x38a4 <menu_screen+0x8be>
							pwmHandLight = newValue;
    33b8:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pwmHandLight+0x1>
    33bc:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pwmHandLight>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    33c0:	41 e0       	ldi	r20, 0x01	; 1
    33c2:	64 e0       	ldi	r22, 0x04	; 4
    33c4:	88 e0       	ldi	r24, 0x08	; 8
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
							OCR1A = pwmHandLight;
    33cc:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pwmHandLight>
    33d0:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pwmHandLight+0x1>
    33d4:	9b bd       	out	0x2b, r25	; 43
    33d6:	8a bd       	out	0x2a, r24	; 42
    33d8:	65 c2       	rjmp	.+1226   	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 2:
					{
						newValue = set_value(WHEEL_DIAMETER_MAX*1000,WHEEL_DIAMETER_MIN*1000,wheelDiameter*1000,3,"Wheel Diameter (m)");
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	54 e4       	ldi	r21, 0x44	; 68
    33e2:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <wheelDiameter>
    33e6:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <wheelDiameter+0x1>
    33ea:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <wheelDiameter+0x2>
    33ee:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <wheelDiameter+0x3>
    33f2:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    33f6:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    33fa:	00 ea       	ldi	r16, 0xA0	; 160
    33fc:	11 e0       	ldi	r17, 0x01	; 1
    33fe:	23 e0       	ldi	r18, 0x03	; 3
    3400:	ab 01       	movw	r20, r22
    3402:	64 e6       	ldi	r22, 0x64	; 100
    3404:	70 e0       	ldi	r23, 0x00	; 0
    3406:	80 ed       	ldi	r24, 0xD0	; 208
    3408:	97 e0       	ldi	r25, 0x07	; 7
    340a:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=wheelDiameter*1000){
    340e:	bc 01       	movw	r22, r24
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    3418:	6b 01       	movw	r12, r22
    341a:	7c 01       	movw	r14, r24
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a e7       	ldi	r20, 0x7A	; 122
    3422:	54 e4       	ldi	r21, 0x44	; 68
    3424:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <wheelDiameter>
    3428:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <wheelDiameter+0x1>
    342c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <wheelDiameter+0x2>
    3430:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <wheelDiameter+0x3>
    3434:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    3438:	9b 01       	movw	r18, r22
    343a:	ac 01       	movw	r20, r24
    343c:	c7 01       	movw	r24, r14
    343e:	b6 01       	movw	r22, r12
    3440:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    3444:	88 23       	and	r24, r24
    3446:	09 f4       	brne	.+2      	; 0x344a <menu_screen+0x464>
    3448:	2d c2       	rjmp	.+1114   	; 0x38a4 <menu_screen+0x8be>
							wheelDiameter = newValue/1000.0;
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	4a e7       	ldi	r20, 0x7A	; 122
    3450:	54 e4       	ldi	r21, 0x44	; 68
    3452:	c7 01       	movw	r24, r14
    3454:	b6 01       	movw	r22, r12
    3456:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    345a:	60 93 f2 02 	sts	0x02F2, r22	; 0x8002f2 <wheelDiameter>
    345e:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <wheelDiameter+0x1>
    3462:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <wheelDiameter+0x2>
    3466:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <wheelDiameter+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	64 e0       	ldi	r22, 0x04	; 4
    346e:	88 e0       	ldi	r24, 0x08	; 8
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    3476:	16 c2       	rjmp	.+1068   	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 3:
					{
						newValue = set_value(GEAR_RATIO_MAX*1000,GEAR_RATIO_MIN*1000,gearRatio*1000,3,"Gear ratio");
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a e7       	ldi	r20, 0x7A	; 122
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <gearRatio>
    3484:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <gearRatio+0x1>
    3488:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gearRatio+0x2>
    348c:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <gearRatio+0x3>
    3490:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    3494:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    3498:	03 ee       	ldi	r16, 0xE3	; 227
    349a:	10 e0       	ldi	r17, 0x00	; 0
    349c:	23 e0       	ldi	r18, 0x03	; 3
    349e:	ab 01       	movw	r20, r22
    34a0:	64 e6       	ldi	r22, 0x64	; 100
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	88 ee       	ldi	r24, 0xE8	; 232
    34a6:	93 e0       	ldi	r25, 0x03	; 3
    34a8:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=gearRatio*1000){
    34ac:	bc 01       	movw	r22, r24
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    34b6:	6b 01       	movw	r12, r22
    34b8:	7c 01       	movw	r14, r24
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a e7       	ldi	r20, 0x7A	; 122
    34c0:	54 e4       	ldi	r21, 0x44	; 68
    34c2:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <gearRatio>
    34c6:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <gearRatio+0x1>
    34ca:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gearRatio+0x2>
    34ce:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <gearRatio+0x3>
    34d2:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    34d6:	9b 01       	movw	r18, r22
    34d8:	ac 01       	movw	r20, r24
    34da:	c7 01       	movw	r24, r14
    34dc:	b6 01       	movw	r22, r12
    34de:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    34e2:	88 23       	and	r24, r24
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <menu_screen+0x502>
    34e6:	de c1       	rjmp	.+956    	; 0x38a4 <menu_screen+0x8be>
							gearRatio = newValue/1000.0;
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	4a e7       	ldi	r20, 0x7A	; 122
    34ee:	54 e4       	ldi	r21, 0x44	; 68
    34f0:	c7 01       	movw	r24, r14
    34f2:	b6 01       	movw	r22, r12
    34f4:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    34f8:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <gearRatio>
    34fc:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <gearRatio+0x1>
    3500:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <gearRatio+0x2>
    3504:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <gearRatio+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	64 e0       	ldi	r22, 0x04	; 4
    350c:	88 e0       	ldi	r24, 0x08	; 8
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    3514:	c7 c1       	rjmp	.+910    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 4:
					{
						newValue = set_value(MAGNETS_ON_WHEEL_MAX,MAGNETS_ON_WHEEL_MIN,magnetsOnWheel,0,"Magnets on wheel");
    3516:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <magnetsOnWheel>
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	03 eb       	ldi	r16, 0xB3	; 179
    351e:	11 e0       	ldi	r17, 0x01	; 1
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	61 e0       	ldi	r22, 0x01	; 1
    3524:	70 e0       	ldi	r23, 0x00	; 0
    3526:	80 e1       	ldi	r24, 0x10	; 16
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=magnetsOnWheel){
    352e:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <magnetsOnWheel>
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	82 17       	cp	r24, r18
    3536:	93 07       	cpc	r25, r19
    3538:	09 f4       	brne	.+2      	; 0x353c <menu_screen+0x556>
    353a:	b4 c1       	rjmp	.+872    	; 0x38a4 <menu_screen+0x8be>
							magnetsOnWheel = newValue;
    353c:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <magnetsOnWheel>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3540:	41 e0       	ldi	r20, 0x01	; 1
    3542:	64 e0       	ldi	r22, 0x04	; 4
    3544:	88 e0       	ldi	r24, 0x08	; 8
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    354c:	ab c1       	rjmp	.+854    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 5:
					{
						newValue = set_value(STEP_MODE_MAX,STEP_MODE_MIN,stepMode,0,"1-full, 2-half");
    354e:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <stepMode>
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	04 ec       	ldi	r16, 0xC4	; 196
    3556:	11 e0       	ldi	r17, 0x01	; 1
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	82 e0       	ldi	r24, 0x02	; 2
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=stepMode){
    3566:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <stepMode>
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	82 17       	cp	r24, r18
    356e:	93 07       	cpc	r25, r19
    3570:	09 f4       	brne	.+2      	; 0x3574 <menu_screen+0x58e>
    3572:	98 c1       	rjmp	.+816    	; 0x38a4 <menu_screen+0x8be>
							stepMode = newValue;
    3574:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <stepMode>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3578:	41 e0       	ldi	r20, 0x01	; 1
    357a:	64 e0       	ldi	r22, 0x04	; 4
    357c:	88 e0       	ldi	r24, 0x08	; 8
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    3584:	8f c1       	rjmp	.+798    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 6:
					{
						newValue = set_value(MAX_SPEED_MAX,MAX_SPEED_MIN,maxSpeedOnDial,0,"Maximum speed");
    3586:	40 91 ea 02 	lds	r20, 0x02EA	; 0x8002ea <maxSpeedOnDial>
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	03 ed       	ldi	r16, 0xD3	; 211
    358e:	11 e0       	ldi	r17, 0x01	; 1
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	64 e1       	ldi	r22, 0x14	; 20
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	8f ef       	ldi	r24, 0xFF	; 255
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=maxSpeedOnDial){
    359e:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <maxSpeedOnDial>
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	82 17       	cp	r24, r18
    35a6:	93 07       	cpc	r25, r19
    35a8:	09 f4       	brne	.+2      	; 0x35ac <menu_screen+0x5c6>
    35aa:	7c c1       	rjmp	.+760    	; 0x38a4 <menu_screen+0x8be>
							maxSpeedOnDial = newValue;
    35ac:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <maxSpeedOnDial>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	64 e0       	ldi	r22, 0x04	; 4
    35b4:	88 e0       	ldi	r24, 0x08	; 8
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    35bc:	73 c1       	rjmp	.+742    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 7:
					{
						newValue = set_value(DEGREES_PER_KMH_MAX*1000,DEGREES_PER_KMH_MIN*1000,degreesPerKmh*1000,3,"Degrees per km/h");
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4a e7       	ldi	r20, 0x7A	; 122
    35c4:	54 e4       	ldi	r21, 0x44	; 68
    35c6:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <degreesPerKmh>
    35ca:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <degreesPerKmh+0x1>
    35ce:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <degreesPerKmh+0x2>
    35d2:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <degreesPerKmh+0x3>
    35d6:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    35da:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    35de:	01 ee       	ldi	r16, 0xE1	; 225
    35e0:	11 e0       	ldi	r17, 0x01	; 1
    35e2:	23 e0       	ldi	r18, 0x03	; 3
    35e4:	ab 01       	movw	r20, r22
    35e6:	64 e6       	ldi	r22, 0x64	; 100
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	88 e8       	ldi	r24, 0x88	; 136
    35ec:	93 e1       	ldi	r25, 0x13	; 19
    35ee:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=degreesPerKmh*1000){
    35f2:	bc 01       	movw	r22, r24
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    35fc:	6b 01       	movw	r12, r22
    35fe:	7c 01       	movw	r14, r24
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	4a e7       	ldi	r20, 0x7A	; 122
    3606:	54 e4       	ldi	r21, 0x44	; 68
    3608:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <degreesPerKmh>
    360c:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <degreesPerKmh+0x1>
    3610:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <degreesPerKmh+0x2>
    3614:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <degreesPerKmh+0x3>
    3618:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    361c:	9b 01       	movw	r18, r22
    361e:	ac 01       	movw	r20, r24
    3620:	c7 01       	movw	r24, r14
    3622:	b6 01       	movw	r22, r12
    3624:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    3628:	88 23       	and	r24, r24
    362a:	09 f4       	brne	.+2      	; 0x362e <menu_screen+0x648>
    362c:	3b c1       	rjmp	.+630    	; 0x38a4 <menu_screen+0x8be>
							degreesPerKmh = newValue/1000.0;
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	4a e7       	ldi	r20, 0x7A	; 122
    3634:	54 e4       	ldi	r21, 0x44	; 68
    3636:	c7 01       	movw	r24, r14
    3638:	b6 01       	movw	r22, r12
    363a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__divsf3>
    363e:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <degreesPerKmh>
    3642:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <degreesPerKmh+0x1>
    3646:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <degreesPerKmh+0x2>
    364a:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <degreesPerKmh+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    364e:	41 e0       	ldi	r20, 0x01	; 1
    3650:	64 e0       	ldi	r22, 0x04	; 4
    3652:	88 e0       	ldi	r24, 0x08	; 8
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    365a:	24 c1       	rjmp	.+584    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 8:
					{
						newValue = set_value(STEPPER_MOTOR_STEPS_MAX,STEPPER_MOTOR_STEPS_MIN,stepperMotorSteps,0,"Stepper motor steps");
    365c:	40 91 e3 02 	lds	r20, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    3660:	50 91 e4 02 	lds	r21, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    3664:	02 ef       	ldi	r16, 0xF2	; 242
    3666:	11 e0       	ldi	r17, 0x01	; 1
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	60 e1       	ldi	r22, 0x10	; 16
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	80 e9       	ldi	r24, 0x90	; 144
    3670:	91 e0       	ldi	r25, 0x01	; 1
    3672:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=stepperMotorSteps){
    3676:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <stepperMotorSteps>
    367a:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <stepperMotorSteps+0x1>
    367e:	82 17       	cp	r24, r18
    3680:	93 07       	cpc	r25, r19
    3682:	09 f4       	brne	.+2      	; 0x3686 <menu_screen+0x6a0>
    3684:	0f c1       	rjmp	.+542    	; 0x38a4 <menu_screen+0x8be>
							stepperMotorSteps = newValue;
    3686:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <stepperMotorSteps+0x1>
    368a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <stepperMotorSteps>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    368e:	41 e0       	ldi	r20, 0x01	; 1
    3690:	64 e0       	ldi	r22, 0x04	; 4
    3692:	88 e0       	ldi	r24, 0x08	; 8
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    369a:	04 c1       	rjmp	.+520    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 9:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_INTERVAL_MIN,stepInterval,0,"Step interval X64us");
    369c:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <stepInterval>
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	06 e0       	ldi	r16, 0x06	; 6
    36a4:	12 e0       	ldi	r17, 0x02	; 2
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	62 e3       	ldi	r22, 0x32	; 50
    36aa:	70 e0       	ldi	r23, 0x00	; 0
    36ac:	8f ef       	ldi	r24, 0xFF	; 255
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=stepInterval){
    36b4:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <stepInterval>
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	82 17       	cp	r24, r18
    36bc:	93 07       	cpc	r25, r19
    36be:	09 f4       	brne	.+2      	; 0x36c2 <menu_screen+0x6dc>
    36c0:	f1 c0       	rjmp	.+482    	; 0x38a4 <menu_screen+0x8be>
							stepInterval = newValue;
    36c2:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <stepInterval>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	64 e0       	ldi	r22, 0x04	; 4
    36ca:	88 e0       	ldi	r24, 0x08	; 8
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    36d2:	e8 c0       	rjmp	.+464    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 10:
					{
						newValue = set_value(OLED_BRIGHTNESS_MAX,OLED_BRIGHTNESS_MIN,oledBrightness,0,"OLED brightness");
    36d4:	40 91 e5 02 	lds	r20, 0x02E5	; 0x8002e5 <oledBrightness>
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	0a e1       	ldi	r16, 0x1A	; 26
    36dc:	12 e0       	ldi	r17, 0x02	; 2
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	62 e3       	ldi	r22, 0x32	; 50
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	8f ef       	ldi	r24, 0xFF	; 255
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 35 14 	call	0x286a	; 0x286a <set_value>
						if (newValue!=oledBrightness){
    36ec:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <oledBrightness>
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	82 17       	cp	r24, r18
    36f4:	93 07       	cpc	r25, r19
    36f6:	09 f4       	brne	.+2      	; 0x36fa <menu_screen+0x714>
    36f8:	d5 c0       	rjmp	.+426    	; 0x38a4 <menu_screen+0x8be>
							oledBrightness = newValue;
    36fa:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <oledBrightness>
							GLCD_SetContrast(oledBrightness);
    36fe:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <GLCD_SetContrast>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3702:	41 e0       	ldi	r20, 0x01	; 1
    3704:	64 e0       	ldi	r22, 0x04	; 4
    3706:	88 e0       	ldi	r24, 0x08	; 8
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
    370e:	ca c0       	rjmp	.+404    	; 0x38a4 <menu_screen+0x8be>
						}
						break;
					}
					case 11:
					{
						debugMode = debugMode^_BV(0);
    3710:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <debugMode>
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	89 27       	eor	r24, r25
    3718:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <debugMode>
						while (button_monitor());
    371c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    3720:	81 11       	cpse	r24, r1
    3722:	fc cf       	rjmp	.-8      	; 0x371c <menu_screen+0x736>
						main();
    3724:	0e 94 d5 17 	call	0x2faa	; 0x2faa <main>
						break;
					}
					case 12:
					{
						hand_calibration();
    3728:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <hand_calibration>
						break;
    372c:	bb c0       	rjmp	.+374    	; 0x38a4 <menu_screen+0x8be>
					}
					case 13:
					{
 						if(yes_no_menu("RESET",45,"ODOMETER?",34)){
    372e:	22 e2       	ldi	r18, 0x22	; 34
    3730:	4a e2       	ldi	r20, 0x2A	; 42
    3732:	52 e0       	ldi	r21, 0x02	; 2
    3734:	6d e2       	ldi	r22, 0x2D	; 45
    3736:	84 e3       	ldi	r24, 0x34	; 52
    3738:	92 e0       	ldi	r25, 0x02	; 2
    373a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <yes_no_menu.2784>
    373e:	88 23       	and	r24, r24
    3740:	09 f4       	brne	.+2      	; 0x3744 <menu_screen+0x75e>
    3742:	b0 c0       	rjmp	.+352    	; 0x38a4 <menu_screen+0x8be>
							GLCD_Clear();
    3744:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
							GLCD_GotoLine(1);
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
							GLCD_GotoX(6);
    374e:	86 e0       	ldi	r24, 0x06	; 6
    3750:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
							GLCD_PrintString("RESETTING ODOMETER");
    3754:	8a e3       	ldi	r24, 0x3A	; 58
    3756:	92 e0       	ldi	r25, 0x02	; 2
    3758:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
														
							GLCD_GotoLine(3);
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
							GLCD_GotoX(2);
    3762:	82 e0       	ldi	r24, 0x02	; 2
    3764:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
							GLCD_PrintString("Cells erased");
    3768:	8d e4       	ldi	r24, 0x4D	; 77
    376a:	92 e0       	ldi	r25, 0x02	; 2
    376c:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
							GLCD_Render();
    3770:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
							//odometer reset
							runInMeters = 0;
    3774:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <runInMeters>
    3778:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <runInMeters+0x1>
    377c:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <runInMeters+0x2>
    3780:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <runInMeters+0x3>
							odometerCurrentAddress = 0;
    3784:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <odometerCurrentAddress>
							sensorTriggering = 0;
    3788:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <sensorTriggering+0x1>
    378c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <sensorTriggering>
    3790:	c1 2c       	mov	r12, r1
    3792:	d1 2c       	mov	r13, r1
    3794:	76 01       	movw	r14, r12
    3796:	c3 94       	inc	r12
							for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
								eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    3798:	43 e0       	ldi	r20, 0x03	; 3
    379a:	64 e0       	ldi	r22, 0x04	; 4
    379c:	80 e8       	ldi	r24, 0x80	; 128
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
								GLCD_GotoX(83);
    37a4:	83 e5       	ldi	r24, 0x53	; 83
    37a6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
								GLCD_PrintInteger(i+1);
    37aa:	c7 01       	movw	r24, r14
    37ac:	b6 01       	movw	r22, r12
    37ae:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
								GLCD_PrintString("/");
    37b2:	8a e5       	ldi	r24, 0x5A	; 90
    37b4:	92 e0       	ldi	r25, 0x02	; 2
    37b6:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
								GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
    37ba:	64 e6       	ldi	r22, 0x64	; 100
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
								GLCD_Render();
    37c6:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	c8 1a       	sub	r12, r24
    37ce:	d8 0a       	sbc	r13, r24
    37d0:	e8 0a       	sbc	r14, r24
    37d2:	f8 0a       	sbc	r15, r24
							GLCD_Render();
							//odometer reset
							runInMeters = 0;
							odometerCurrentAddress = 0;
							sensorTriggering = 0;
							for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    37d4:	85 e6       	ldi	r24, 0x65	; 101
    37d6:	c8 16       	cp	r12, r24
    37d8:	d1 04       	cpc	r13, r1
    37da:	e1 04       	cpc	r14, r1
    37dc:	f1 04       	cpc	r15, r1
    37de:	e1 f6       	brne	.-72     	; 0x3798 <menu_screen+0x7b2>
								GLCD_PrintInteger(i+1);
								GLCD_PrintString("/");
								GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
								GLCD_Render();
							}
							odometerCurrentAddress = 0;
    37e0:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <odometerCurrentAddress>
							GLCD_GotoLine(6);
    37e4:	86 e0       	ldi	r24, 0x06	; 6
    37e6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
							GLCD_GotoX(45);
    37ea:	8d e2       	ldi	r24, 0x2D	; 45
    37ec:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
							GLCD_PrintString("DONE!");
    37f0:	8c e5       	ldi	r24, 0x5C	; 92
    37f2:	92 e0       	ldi	r25, 0x02	; 2
    37f4:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
							GLCD_Render();
    37f8:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
							while(button_monitor());
    37fc:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    3800:	81 11       	cpse	r24, r1
    3802:	fc cf       	rjmp	.-8      	; 0x37fc <menu_screen+0x816>
							while(!button_monitor());
    3804:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    3808:	88 23       	and	r24, r24
    380a:	e1 f3       	breq	.-8      	; 0x3804 <menu_screen+0x81e>
    380c:	4b c0       	rjmp	.+150    	; 0x38a4 <menu_screen+0x8be>
						break;
					}
					case 14:
					{
					//load defaults
						if (yes_no_menu("RESTORE",40,"DEFAULT values?",20)){
    380e:	24 e1       	ldi	r18, 0x14	; 20
    3810:	42 e6       	ldi	r20, 0x62	; 98
    3812:	52 e0       	ldi	r21, 0x02	; 2
    3814:	68 e2       	ldi	r22, 0x28	; 40
    3816:	82 e7       	ldi	r24, 0x72	; 114
    3818:	92 e0       	ldi	r25, 0x02	; 2
    381a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <yes_no_menu.2784>
    381e:	88 23       	and	r24, r24
    3820:	09 f4       	brne	.+2      	; 0x3824 <menu_screen+0x83e>
    3822:	40 c0       	rjmp	.+128    	; 0x38a4 <menu_screen+0x8be>
							GLCD_Clear();
    3824:	0e 94 a6 20 	call	0x414c	; 0x414c <GLCD_Clear>
							GLCD_GotoLine(3);
    3828:	83 e0       	ldi	r24, 0x03	; 3
    382a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
							GLCD_GotoX(8);
    382e:	88 e0       	ldi	r24, 0x08	; 8
    3830:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
							GLCD_PrintString("LOADING DEFAULTS...");
    3834:	8a e7       	ldi	r24, 0x7A	; 122
    3836:	92 e0       	ldi	r25, 0x02	; 2
    3838:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
							GLCD_Render();
    383c:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
							set_default_values();
    3840:	0e 94 aa 0b 	call	0x1754	; 0x1754 <set_default_values>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	64 e0       	ldi	r22, 0x04	; 4
    3848:	88 e0       	ldi	r24, 0x08	; 8
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <eep_operations>
							GLCD_GotoLine(5);
    3850:	85 e0       	ldi	r24, 0x05	; 5
    3852:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <GLCD_GotoLine>
							GLCD_GotoX(45);
    3856:	8d e2       	ldi	r24, 0x2D	; 45
    3858:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
							GLCD_PrintString("DONE!");
    385c:	8c e5       	ldi	r24, 0x5C	; 92
    385e:	92 e0       	ldi	r25, 0x02	; 2
    3860:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
							GLCD_Render();
    3864:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GLCD_Render>
							while(button_monitor());
    3868:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    386c:	81 11       	cpse	r24, r1
    386e:	fc cf       	rjmp	.-8      	; 0x3868 <menu_screen+0x882>
							while(!button_monitor());
    3870:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    3874:	88 23       	and	r24, r24
    3876:	e1 f3       	breq	.-8      	; 0x3870 <menu_screen+0x88a>
    3878:	15 c0       	rjmp	.+42     	; 0x38a4 <menu_screen+0x8be>
						break;
					}
					case 15:
					{
						//exit menu
						while (button_monitor());
    387a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    387e:	81 11       	cpse	r24, r1
    3880:	fc cf       	rjmp	.-8      	; 0x387a <menu_screen+0x894>
						main();
    3882:	0e 94 d5 17 	call	0x2faa	; 0x2faa <main>
					}
				}//
			}
		else if(currentButton == BUTTON_DOWN) menuItem++;
    3886:	82 30       	cpi	r24, 0x02	; 2
    3888:	31 f4       	brne	.+12     	; 0x3896 <menu_screen+0x8b0>
    388a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <menuItem.2796>
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <menuItem.2796>
    3894:	07 c0       	rjmp	.+14     	; 0x38a4 <menu_screen+0x8be>
		else if(currentButton == BUTTON_UP)	menuItem--;
    3896:	83 30       	cpi	r24, 0x03	; 3
    3898:	29 f4       	brne	.+10     	; 0x38a4 <menu_screen+0x8be>
    389a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <menuItem.2796>
    389e:	81 50       	subi	r24, 0x01	; 1
    38a0:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <menuItem.2796>
		while (!button_monitor());
    38a4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <button_monitor>
    38a8:	88 23       	and	r24, r24
    38aa:	e1 f3       	breq	.-8      	; 0x38a4 <menu_screen+0x8be>
		menu_screen();
    38ac:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <menu_screen>

000038b0 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    38b0:	66 95       	lsr	r22
    38b2:	66 95       	lsr	r22
    38b4:	66 95       	lsr	r22
    38b6:	90 e8       	ldi	r25, 0x80	; 128
    38b8:	69 9f       	mul	r22, r25
    38ba:	b0 01       	movw	r22, r0
    38bc:	11 24       	eor	r1, r1
    38be:	68 0f       	add	r22, r24
    38c0:	71 1d       	adc	r23, r1
    38c2:	fb 01       	movw	r30, r22
    38c4:	e0 50       	subi	r30, 0x00	; 0
    38c6:	fd 4f       	sbci	r31, 0xFD	; 253
    38c8:	40 83       	st	Z, r20
    38ca:	08 95       	ret

000038cc <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    38cc:	66 95       	lsr	r22
    38ce:	66 95       	lsr	r22
    38d0:	66 95       	lsr	r22
    38d2:	90 e8       	ldi	r25, 0x80	; 128
    38d4:	69 9f       	mul	r22, r25
    38d6:	b0 01       	movw	r22, r0
    38d8:	11 24       	eor	r1, r1
    38da:	68 0f       	add	r22, r24
    38dc:	71 1d       	adc	r23, r1
    38de:	fb 01       	movw	r30, r22
    38e0:	e0 50       	subi	r30, 0x00	; 0
    38e2:	fd 4f       	sbci	r31, 0xFD	; 253
}
    38e4:	80 81       	ld	r24, Z
    38e6:	08 95       	ret

000038e8 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    38e8:	ff 92       	push	r15
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	c8 2f       	mov	r28, r24
    38f4:	06 2f       	mov	r16, r22
    38f6:	17 2f       	mov	r17, r23
    38f8:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    38fa:	0e 94 32 25 	call	0x4a64	; 0x4a64 <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    38fe:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    3902:	88 30       	cpi	r24, 0x08	; 8
    3904:	31 f0       	breq	.+12     	; 0x3912 <GLCD_Send+0x2a>
    3906:	80 31       	cpi	r24, 0x10	; 16
    3908:	21 f0       	breq	.+8      	; 0x3912 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__GLCD>
				break;
    3910:	33 c0       	rjmp	.+102    	; 0x3978 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    3912:	88 e7       	ldi	r24, 0x78	; 120
    3914:	0e 94 40 25 	call	0x4a80	; 0x4a80 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3918:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    391c:	88 31       	cpi	r24, 0x18	; 24
    391e:	31 f0       	breq	.+12     	; 0x392c <GLCD_Send+0x44>
    3920:	80 32       	cpi	r24, 0x20	; 32
    3922:	21 f0       	breq	.+8      	; 0x392c <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__GLCD>
				break;
    392a:	26 c0       	rjmp	.+76     	; 0x3978 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    392c:	8c 2f       	mov	r24, r28
    392e:	0e 94 40 25 	call	0x4a80	; 0x4a80 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3932:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3936:	88 32       	cpi	r24, 0x28	; 40
    3938:	19 f4       	brne	.+6      	; 0x3940 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    393a:	f1 10       	cpse	r15, r1
    393c:	07 c0       	rjmp	.+14     	; 0x394c <GLCD_Send+0x64>
    393e:	1a c0       	rjmp	.+52     	; 0x3974 <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3940:	80 33       	cpi	r24, 0x30	; 48
    3942:	d9 f3       	breq	.-10     	; 0x393a <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__GLCD>
				break;
    394a:	16 c0       	rjmp	.+44     	; 0x3978 <GLCD_Send+0x90>
    394c:	c0 2f       	mov	r28, r16
    394e:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    3950:	8e 01       	movw	r16, r28
    3952:	0f 5f       	subi	r16, 0xFF	; 255
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	fa 94       	dec	r15
    3958:	0f 0d       	add	r16, r15
    395a:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    395c:	89 91       	ld	r24, Y+
    395e:	0e 94 40 25 	call	0x4a80	; 0x4a80 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    3962:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3966:	88 32       	cpi	r24, 0x28	; 40
    3968:	11 f0       	breq	.+4      	; 0x396e <GLCD_Send+0x86>
    396a:	80 33       	cpi	r24, 0x30	; 48
    396c:	19 f4       	brne	.+6      	; 0x3974 <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    396e:	c0 17       	cp	r28, r16
    3970:	d1 07       	cpc	r29, r17
    3972:	a1 f7       	brne	.-24     	; 0x395c <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    3974:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    3978:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <TWI_EndTransmission>
}
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	08 95       	ret

00003988 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	1f 92       	push	r1
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    3994:	41 e0       	ldi	r20, 0x01	; 1
    3996:	be 01       	movw	r22, r28
    3998:	6f 5f       	subi	r22, 0xFF	; 255
    399a:	7f 4f       	sbci	r23, 0xFF	; 255
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <GLCD_Send>
}
    39a2:	0f 90       	pop	r0
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	08 95       	ret

000039aa <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    39ae:	81 e2       	ldi	r24, 0x21	; 33
    39b0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    39ba:	8f e7       	ldi	r24, 0x7F	; 127
    39bc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    39c0:	82 e2       	ldi	r24, 0x22	; 34
    39c2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    39cc:	87 e0       	ldi	r24, 0x07	; 7
    39ce:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
    39d2:	c0 e0       	ldi	r28, 0x00	; 0
    39d4:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    39d6:	be 01       	movw	r22, r28
    39d8:	62 95       	swap	r22
    39da:	72 95       	swap	r23
    39dc:	70 7f       	andi	r23, 0xF0	; 240
    39de:	76 27       	eor	r23, r22
    39e0:	60 7f       	andi	r22, 0xF0	; 240
    39e2:	76 27       	eor	r23, r22
    39e4:	60 50       	subi	r22, 0x00	; 0
    39e6:	7d 4f       	sbci	r23, 0xFD	; 253
    39e8:	40 e1       	ldi	r20, 0x10	; 16
    39ea:	80 e4       	ldi	r24, 0x40	; 64
    39ec:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <GLCD_Send>
    39f0:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    39f2:	c0 34       	cpi	r28, 0x40	; 64
    39f4:	d1 05       	cpc	r29, r1
    39f6:	79 f7       	brne	.-34     	; 0x39d6 <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	08 95       	ret

000039fe <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    39fe:	cf 93       	push	r28
    3a00:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    3a02:	81 e8       	ldi	r24, 0x81	; 129
    3a04:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    3a08:	8c 2f       	mov	r24, r28
    3a0a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
}
    3a0e:	cf 91       	pop	r28
    3a10:	08 95       	ret

00003a12 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    3a12:	88 23       	and	r24, r24
    3a14:	14 f0       	brlt	.+4      	; 0x3a1a <GLCD_GotoX+0x8>
		__GLCD.X = X;
    3a16:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <__GLCD+0x1>
    3a1a:	08 95       	ret

00003a1c <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    3a1c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    3a20:	90 34       	cpi	r25, 0x40	; 64
    3a22:	10 f4       	brcc	.+4      	; 0x3a28 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    3a24:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__GLCD+0x2>
    3a28:	08 95       	ret

00003a2a <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    3a2a:	cf 93       	push	r28
    3a2c:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    3a2e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <GLCD_GotoX>
	GLCD_GotoY(Y);
    3a32:	8c 2f       	mov	r24, r28
    3a34:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <GLCD_GotoY>
}
    3a38:	cf 91       	pop	r28
    3a3a:	08 95       	ret

00003a3c <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    3a3c:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    3a40:	8e ea       	ldi	r24, 0xAE	; 174
    3a42:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    3a46:	85 ed       	ldi	r24, 0xD5	; 213
    3a48:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    3a4c:	80 ef       	ldi	r24, 0xF0	; 240
    3a4e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    3a52:	88 ea       	ldi	r24, 0xA8	; 168
    3a54:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    3a58:	8f e3       	ldi	r24, 0x3F	; 63
    3a5a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    3a5e:	83 ed       	ldi	r24, 0xD3	; 211
    3a60:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    3a6a:	8d e8       	ldi	r24, 0x8D	; 141
    3a6c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    3a70:	84 e1       	ldi	r24, 0x14	; 20
    3a72:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    3a76:	80 e4       	ldi	r24, 0x40	; 64
    3a78:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    3a7c:	80 e2       	ldi	r24, 0x20	; 32
    3a7e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    3a88:	81 ea       	ldi	r24, 0xA1	; 161
    3a8a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    3a8e:	88 ec       	ldi	r24, 0xC8	; 200
    3a90:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    3a94:	8a ed       	ldi	r24, 0xDA	; 218
    3a96:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    3a9a:	82 e1       	ldi	r24, 0x12	; 18
    3a9c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    3aa0:	81 e8       	ldi	r24, 0x81	; 129
    3aa2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    3aa6:	8f ef       	ldi	r24, 0xFF	; 255
    3aa8:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    3aac:	89 ed       	ldi	r24, 0xD9	; 217
    3aae:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    3ab2:	81 ef       	ldi	r24, 0xF1	; 241
    3ab4:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    3ab8:	8b ed       	ldi	r24, 0xDB	; 219
    3aba:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    3abe:	80 e2       	ldi	r24, 0x20	; 32
    3ac0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    3ac4:	84 ea       	ldi	r24, 0xA4	; 164
    3ac6:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    3aca:	86 ea       	ldi	r24, 0xA6	; 166
    3acc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    3ad0:	8e e2       	ldi	r24, 0x2E	; 46
    3ad2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    3ad6:	8f ea       	ldi	r24, 0xAF	; 175
    3ad8:	0e 94 c4 1c 	call	0x3988	; 0x3988 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    3ae4:	86 ea       	ldi	r24, 0xA6	; 166
    3ae6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    3aea:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <__GLCD+0x8>
    3aee:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <__GLCD+0x7>
    3af2:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <__GLCD+0x6>
    3af6:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <__GLCD+0x2>
    3afa:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <__GLCD+0x1>
    3afe:	08 95       	ret

00003b00 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    3b00:	88 30       	cpi	r24, 0x08	; 8
    3b02:	28 f4       	brcc	.+10     	; 0x3b0e <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    3b04:	88 0f       	add	r24, r24
    3b06:	88 0f       	add	r24, r24
    3b08:	88 0f       	add	r24, r24
    3b0a:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__GLCD+0x2>
    3b0e:	08 95       	ret

00003b10 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    3b10:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    3b14:	08 95       	ret

00003b16 <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    3b16:	8f 92       	push	r8
    3b18:	9f 92       	push	r9
    3b1a:	af 92       	push	r10
    3b1c:	bf 92       	push	r11
    3b1e:	cf 92       	push	r12
    3b20:	df 92       	push	r13
    3b22:	ef 92       	push	r14
    3b24:	ff 92       	push	r15
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	06 2f       	mov	r16, r22
    3b30:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    3b32:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b36:	d0 91 f8 02 	lds	r29, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    3b3a:	c0 91 f7 02 	lds	r28, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    3b3e:	6d 2f       	mov	r22, r29
    3b40:	8c 2f       	mov	r24, r28
    3b42:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    3b46:	1f 3f       	cpi	r17, 0xFF	; 255
    3b48:	91 f4       	brne	.+36     	; 0x3b6e <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    3b4a:	90 2f       	mov	r25, r16
    3b4c:	97 70       	andi	r25, 0x07	; 7
    3b4e:	81 2c       	mov	r8, r1
    3b50:	91 2c       	mov	r9, r1
    3b52:	54 01       	movw	r10, r8
    3b54:	83 94       	inc	r8
    3b56:	75 01       	movw	r14, r10
    3b58:	64 01       	movw	r12, r8
    3b5a:	04 c0       	rjmp	.+8      	; 0x3b64 <GLCD_SetPixel+0x4e>
    3b5c:	cc 0c       	add	r12, r12
    3b5e:	dd 1c       	adc	r13, r13
    3b60:	ee 1c       	adc	r14, r14
    3b62:	ff 1c       	adc	r15, r15
    3b64:	9a 95       	dec	r25
    3b66:	d2 f7       	brpl	.-12     	; 0x3b5c <GLCD_SetPixel+0x46>
    3b68:	48 2f       	mov	r20, r24
    3b6a:	4c 29       	or	r20, r12
    3b6c:	13 c0       	rjmp	.+38     	; 0x3b94 <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    3b6e:	07 70       	andi	r16, 0x07	; 7
    3b70:	c1 2c       	mov	r12, r1
    3b72:	d1 2c       	mov	r13, r1
    3b74:	76 01       	movw	r14, r12
    3b76:	c3 94       	inc	r12
    3b78:	b7 01       	movw	r22, r14
    3b7a:	a6 01       	movw	r20, r12
    3b7c:	04 c0       	rjmp	.+8      	; 0x3b86 <GLCD_SetPixel+0x70>
    3b7e:	44 0f       	add	r20, r20
    3b80:	55 1f       	adc	r21, r21
    3b82:	66 1f       	adc	r22, r22
    3b84:	77 1f       	adc	r23, r23
    3b86:	0a 95       	dec	r16
    3b88:	d2 f7       	brpl	.-12     	; 0x3b7e <GLCD_SetPixel+0x68>
    3b8a:	8a 01       	movw	r16, r20
    3b8c:	9b 01       	movw	r18, r22
    3b8e:	00 95       	com	r16
    3b90:	48 2f       	mov	r20, r24
    3b92:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3b94:	6d 2f       	mov	r22, r29
    3b96:	8c 2f       	mov	r24, r28
    3b98:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
}
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	ff 90       	pop	r15
    3ba6:	ef 90       	pop	r14
    3ba8:	df 90       	pop	r13
    3baa:	cf 90       	pop	r12
    3bac:	bf 90       	pop	r11
    3bae:	af 90       	pop	r10
    3bb0:	9f 90       	pop	r9
    3bb2:	8f 90       	pop	r8
    3bb4:	08 95       	ret

00003bb6 <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3bb6:	3f 92       	push	r3
    3bb8:	4f 92       	push	r4
    3bba:	5f 92       	push	r5
    3bbc:	6f 92       	push	r6
    3bbe:	7f 92       	push	r7
    3bc0:	8f 92       	push	r8
    3bc2:	9f 92       	push	r9
    3bc4:	af 92       	push	r10
    3bc6:	bf 92       	push	r11
    3bc8:	cf 92       	push	r12
    3bca:	df 92       	push	r13
    3bcc:	ef 92       	push	r14
    3bce:	ff 92       	push	r15
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3bda:	88 23       	and	r24, r24
    3bdc:	0c f4       	brge	.+2      	; 0x3be0 <GLCD_SetPixels+0x2a>
    3bde:	c6 c0       	rjmp	.+396    	; 0x3d6c <GLCD_SetPixels+0x1b6>
    3be0:	44 23       	and	r20, r20
    3be2:	0c f4       	brge	.+2      	; 0x3be6 <GLCD_SetPixels+0x30>
    3be4:	c3 c0       	rjmp	.+390    	; 0x3d6c <GLCD_SetPixels+0x1b6>
    3be6:	60 34       	cpi	r22, 0x40	; 64
    3be8:	08 f0       	brcs	.+2      	; 0x3bec <GLCD_SetPixels+0x36>
    3bea:	c0 c0       	rjmp	.+384    	; 0x3d6c <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3bec:	20 34       	cpi	r18, 0x40	; 64
    3bee:	08 f0       	brcs	.+2      	; 0x3bf2 <GLCD_SetPixels+0x3c>
    3bf0:	bd c0       	rjmp	.+378    	; 0x3d6c <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    3bf2:	11 e0       	ldi	r17, 0x01	; 1
    3bf4:	81 2e       	mov	r8, r17
    3bf6:	86 1a       	sub	r8, r22
    3bf8:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    3bfa:	18 1b       	sub	r17, r24
    3bfc:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    3bfe:	46 2f       	mov	r20, r22
    3c00:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    3c02:	76 2e       	mov	r7, r22
    3c04:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    3c06:	e8 2c       	mov	r14, r8
    3c08:	f1 2c       	mov	r15, r1
    3c0a:	88 e0       	ldi	r24, 0x08	; 8
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	84 1b       	sub	r24, r20
    3c10:	91 09       	sbc	r25, r1
    3c12:	e8 16       	cp	r14, r24
    3c14:	f9 06       	cpc	r15, r25
    3c16:	7c f4       	brge	.+30     	; 0x3c36 <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    3c18:	88 e0       	ldi	r24, 0x08	; 8
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	8e 19       	sub	r24, r14
    3c1e:	9f 09       	sbc	r25, r15
    3c20:	2f ef       	ldi	r18, 0xFF	; 255
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	59 01       	movw	r10, r18
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <GLCD_SetPixels+0x76>
    3c28:	b5 94       	asr	r11
    3c2a:	a7 94       	ror	r10
    3c2c:	8a 95       	dec	r24
    3c2e:	e2 f7       	brpl	.-8      	; 0x3c28 <GLCD_SetPixels+0x72>
    3c30:	8a 2d       	mov	r24, r10
			h = height;
    3c32:	68 2c       	mov	r6, r8
    3c34:	04 c0       	rjmp	.+8      	; 0x3c3e <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    3c36:	88 e0       	ldi	r24, 0x08	; 8
    3c38:	68 2e       	mov	r6, r24
    3c3a:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    3c3c:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    3c3e:	a8 2e       	mov	r10, r24
    3c40:	b1 2c       	mov	r11, r1
    3c42:	02 c0       	rjmp	.+4      	; 0x3c48 <GLCD_SetPixels+0x92>
    3c44:	aa 0c       	add	r10, r10
    3c46:	bb 1c       	adc	r11, r11
    3c48:	4a 95       	dec	r20
    3c4a:	e2 f7       	brpl	.-8      	; 0x3c44 <GLCD_SetPixels+0x8e>
    3c4c:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    3c4e:	67 2d       	mov	r22, r7
    3c50:	89 2d       	mov	r24, r9
    3c52:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    3c56:	11 23       	and	r17, r17
    3c58:	c9 f1       	breq	.+114    	; 0x3ccc <GLCD_SetPixels+0x116>
    3c5a:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c5c:	0f 2e       	mov	r0, r31
    3c5e:	f8 ef       	ldi	r31, 0xF8	; 248
    3c60:	cf 2e       	mov	r12, r31
    3c62:	f2 e0       	ldi	r31, 0x02	; 2
    3c64:	df 2e       	mov	r13, r31
    3c66:	f0 2d       	mov	r31, r0
    3c68:	c7 ef       	ldi	r28, 0xF7	; 247
    3c6a:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c6c:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c6e:	f6 01       	movw	r30, r12
    3c70:	40 80       	ld	r4, Z
    3c72:	b8 80       	ld	r11, Y
    3c74:	64 2d       	mov	r22, r4
    3c76:	8b 2d       	mov	r24, r11
    3c78:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c7c:	0f 3f       	cpi	r16, 0xFF	; 255
    3c7e:	19 f4       	brne	.+6      	; 0x3c86 <GLCD_SetPixels+0xd0>
    3c80:	48 2f       	mov	r20, r24
    3c82:	43 29       	or	r20, r3
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <GLCD_SetPixels+0xd4>
    3c86:	48 2f       	mov	r20, r24
    3c88:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3c8a:	9b 2d       	mov	r25, r11
    3c8c:	9f 5f       	subi	r25, 0xFF	; 255
    3c8e:	98 83       	st	Y, r25
    3c90:	64 2d       	mov	r22, r4
    3c92:	8b 2d       	mov	r24, r11
    3c94:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    3c98:	53 94       	inc	r5
    3c9a:	51 12       	cpse	r5, r17
    3c9c:	e8 cf       	rjmp	.-48     	; 0x3c6e <GLCD_SetPixels+0xb8>
    3c9e:	16 c0       	rjmp	.+44     	; 0x3ccc <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3ca0:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3ca2:	6c 2f       	mov	r22, r28
    3ca4:	89 2d       	mov	r24, r9
    3ca6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3caa:	11 23       	and	r17, r17
    3cac:	f1 f0       	breq	.+60     	; 0x3cea <GLCD_SetPixels+0x134>
    3cae:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3cb0:	f6 01       	movw	r30, r12
    3cb2:	60 81       	ld	r22, Z
    3cb4:	f2 01       	movw	r30, r4
    3cb6:	80 81       	ld	r24, Z
    3cb8:	98 2f       	mov	r25, r24
    3cba:	9f 5f       	subi	r25, 0xFF	; 255
    3cbc:	90 83       	st	Z, r25
    3cbe:	40 2f       	mov	r20, r16
    3cc0:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3cc4:	73 94       	inc	r7
    3cc6:	71 16       	cp	r7, r17
    3cc8:	81 f0       	breq	.+32     	; 0x3cea <GLCD_SetPixels+0x134>
    3cca:	f2 cf       	rjmp	.-28     	; 0x3cb0 <GLCD_SetPixels+0xfa>
    3ccc:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3cce:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3cd0:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3cd2:	0f 2e       	mov	r0, r31
    3cd4:	f8 ef       	ldi	r31, 0xF8	; 248
    3cd6:	cf 2e       	mov	r12, r31
    3cd8:	f2 e0       	ldi	r31, 0x02	; 2
    3cda:	df 2e       	mov	r13, r31
    3cdc:	f0 2d       	mov	r31, r0
    3cde:	0f 2e       	mov	r0, r31
    3ce0:	f7 ef       	ldi	r31, 0xF7	; 247
    3ce2:	4f 2e       	mov	r4, r31
    3ce4:	f2 e0       	ldi	r31, 0x02	; 2
    3ce6:	5f 2e       	mov	r5, r31
    3ce8:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3cea:	26 2d       	mov	r18, r6
    3cec:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    3cee:	e2 2f       	mov	r30, r18
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	cf 01       	movw	r24, r30
    3cf4:	08 96       	adiw	r24, 0x08	; 8
    3cf6:	e8 16       	cp	r14, r24
    3cf8:	f9 06       	cpc	r15, r25
    3cfa:	94 f6       	brge	.-92     	; 0x3ca0 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    3cfc:	28 15       	cp	r18, r8
    3cfe:	b0 f5       	brcc	.+108    	; 0x3d6c <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    3d00:	ee 1a       	sub	r14, r30
    3d02:	ff 0a       	sbc	r15, r31
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9c 01       	movw	r18, r24
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <GLCD_SetPixels+0x15a>
    3d0c:	22 0f       	add	r18, r18
    3d0e:	33 1f       	adc	r19, r19
    3d10:	ea 94       	dec	r14
    3d12:	e2 f7       	brpl	.-8      	; 0x3d0c <GLCD_SetPixels+0x156>
    3d14:	79 01       	movw	r14, r18
    3d16:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    3d18:	6c 2f       	mov	r22, r28
    3d1a:	68 5f       	subi	r22, 0xF8	; 248
    3d1c:	89 2d       	mov	r24, r9
    3d1e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3d22:	11 23       	and	r17, r17
    3d24:	19 f1       	breq	.+70     	; 0x3d6c <GLCD_SetPixels+0x1b6>
    3d26:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d28:	0f 2e       	mov	r0, r31
    3d2a:	f8 ef       	ldi	r31, 0xF8	; 248
    3d2c:	cf 2e       	mov	r12, r31
    3d2e:	f2 e0       	ldi	r31, 0x02	; 2
    3d30:	df 2e       	mov	r13, r31
    3d32:	f0 2d       	mov	r31, r0
    3d34:	c7 ef       	ldi	r28, 0xF7	; 247
    3d36:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3d38:	9e 2c       	mov	r9, r14
    3d3a:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d3c:	f6 01       	movw	r30, r12
    3d3e:	a0 80       	ld	r10, Z
    3d40:	f8 80       	ld	r15, Y
    3d42:	6a 2d       	mov	r22, r10
    3d44:	8f 2d       	mov	r24, r15
    3d46:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3d4a:	0f 3f       	cpi	r16, 0xFF	; 255
    3d4c:	19 f4       	brne	.+6      	; 0x3d54 <GLCD_SetPixels+0x19e>
    3d4e:	48 2f       	mov	r20, r24
    3d50:	4e 29       	or	r20, r14
    3d52:	02 c0       	rjmp	.+4      	; 0x3d58 <GLCD_SetPixels+0x1a2>
    3d54:	48 2f       	mov	r20, r24
    3d56:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3d58:	9f 2d       	mov	r25, r15
    3d5a:	9f 5f       	subi	r25, 0xFF	; 255
    3d5c:	98 83       	st	Y, r25
    3d5e:	6a 2d       	mov	r22, r10
    3d60:	8f 2d       	mov	r24, r15
    3d62:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    3d66:	b3 94       	inc	r11
    3d68:	b1 12       	cpse	r11, r17
    3d6a:	e8 cf       	rjmp	.-48     	; 0x3d3c <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	1f 91       	pop	r17
    3d72:	0f 91       	pop	r16
    3d74:	ff 90       	pop	r15
    3d76:	ef 90       	pop	r14
    3d78:	df 90       	pop	r13
    3d7a:	cf 90       	pop	r12
    3d7c:	bf 90       	pop	r11
    3d7e:	af 90       	pop	r10
    3d80:	9f 90       	pop	r9
    3d82:	8f 90       	pop	r8
    3d84:	7f 90       	pop	r7
    3d86:	6f 90       	pop	r6
    3d88:	5f 90       	pop	r5
    3d8a:	4f 90       	pop	r4
    3d8c:	3f 90       	pop	r3
    3d8e:	08 95       	ret

00003d90 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3d90:	2f 92       	push	r2
    3d92:	3f 92       	push	r3
    3d94:	4f 92       	push	r4
    3d96:	5f 92       	push	r5
    3d98:	6f 92       	push	r6
    3d9a:	7f 92       	push	r7
    3d9c:	8f 92       	push	r8
    3d9e:	9f 92       	push	r9
    3da0:	af 92       	push	r10
    3da2:	bf 92       	push	r11
    3da4:	cf 92       	push	r12
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	2c 97       	sbiw	r28, 0x0c	; 12
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	5c 01       	movw	r10, r24
    3dc6:	66 2e       	mov	r6, r22
    3dc8:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3dca:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    3dce:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    3dd0:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    3dd4:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    3dd6:	82 2f       	mov	r24, r18
    3dd8:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    3dda:	1a f4       	brpl	.+6      	; 0x3de2 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    3ddc:	80 e8       	ldi	r24, 0x80	; 128
    3dde:	68 2e       	mov	r6, r24
    3de0:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    3de2:	84 2f       	mov	r24, r20
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	07 96       	adiw	r24, 0x07	; 7
    3de8:	95 95       	asr	r25
    3dea:	87 95       	ror	r24
    3dec:	95 95       	asr	r25
    3dee:	87 95       	ror	r24
    3df0:	95 95       	asr	r25
    3df2:	87 95       	ror	r24
    3df4:	8d 83       	std	Y+5, r24	; 0x05
    3df6:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	96 95       	lsr	r25
    3dfc:	96 95       	lsr	r25
    3dfe:	96 95       	lsr	r25
    3e00:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    3e02:	89 30       	cpi	r24, 0x09	; 9
    3e04:	48 f0       	brcs	.+18     	; 0x3e18 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    3e06:	2d 81       	ldd	r18, Y+5	; 0x05
    3e08:	3e 81       	ldd	r19, Y+6	; 0x06
    3e0a:	28 5f       	subi	r18, 0xF8	; 248
    3e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0e:	a9 01       	movw	r20, r18
    3e10:	48 1b       	sub	r20, r24
    3e12:	51 09       	sbc	r21, r1
    3e14:	5e 83       	std	Y+6, r21	; 0x06
    3e16:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3e18:	4a 84       	ldd	r4, Y+10	; 0x0a
    3e1a:	57 e0       	ldi	r21, 0x07	; 7
    3e1c:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e20:	9e 81       	ldd	r25, Y+6	; 0x06
    3e22:	89 2b       	or	r24, r25
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <GLCD_DrawBitmap+0x98>
    3e26:	fa c0       	rjmp	.+500    	; 0x401c <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2a:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3e2c:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3e2e:	26 2c       	mov	r2, r6
    3e30:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e32:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e34:	88 e0       	ldi	r24, 0x08	; 8
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	fc 01       	movw	r30, r24
    3e3a:	e4 19       	sub	r30, r4
    3e3c:	f1 09       	sbc	r31, r1
    3e3e:	fb 83       	std	Y+3, r31	; 0x03
    3e40:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e42:	0f 2e       	mov	r0, r31
    3e44:	f8 ef       	ldi	r31, 0xF8	; 248
    3e46:	cf 2e       	mov	r12, r31
    3e48:	f2 e0       	ldi	r31, 0x02	; 2
    3e4a:	df 2e       	mov	r13, r31
    3e4c:	f0 2d       	mov	r31, r0
    3e4e:	07 ef       	ldi	r16, 0xF7	; 247
    3e50:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3e52:	6c 81       	ldd	r22, Y+4	; 0x04
    3e54:	8f 81       	ldd	r24, Y+7	; 0x07
    3e56:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3e5a:	39 86       	std	Y+9, r3	; 0x09
    3e5c:	28 86       	std	Y+8, r2	; 0x08
    3e5e:	72 9c       	mul	r7, r2
    3e60:	c0 01       	movw	r24, r0
    3e62:	73 9c       	mul	r7, r3
    3e64:	90 0d       	add	r25, r0
    3e66:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    3e68:	7c 01       	movw	r14, r24
    3e6a:	e2 18       	sub	r14, r2
    3e6c:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e6e:	66 20       	and	r6, r6
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <GLCD_DrawBitmap+0xe4>
    3e72:	3c c0       	rjmp	.+120    	; 0x3eec <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3e74:	9c 01       	movw	r18, r24
    3e76:	2a 0d       	add	r18, r10
    3e78:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e7a:	85 2c       	mov	r8, r5
    3e7c:	3c 87       	std	Y+12, r19	; 0x0c
    3e7e:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3e80:	eb 85       	ldd	r30, Y+11	; 0x0b
    3e82:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e84:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    3e86:	04 2c       	mov	r0, r4
    3e88:	01 c0       	rjmp	.+2      	; 0x3e8c <GLCD_DrawBitmap+0xfc>
    3e8a:	99 0c       	add	r9, r9
    3e8c:	0a 94       	dec	r0
    3e8e:	ea f7       	brpl	.-6      	; 0x3e8a <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3e90:	77 20       	and	r7, r7
    3e92:	79 f0       	breq	.+30     	; 0x3eb2 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3e94:	f5 01       	movw	r30, r10
    3e96:	ee 0d       	add	r30, r14
    3e98:	ff 1d       	adc	r31, r15
    3e9a:	2f ef       	ldi	r18, 0xFF	; 255
    3e9c:	e2 1a       	sub	r14, r18
    3e9e:	f2 0a       	sbc	r15, r18
    3ea0:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0a 80       	ldd	r0, Y+2	; 0x02
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <GLCD_DrawBitmap+0x11c>
    3ea8:	95 95       	asr	r25
    3eaa:	87 95       	ror	r24
    3eac:	0a 94       	dec	r0
    3eae:	e2 f7       	brpl	.-8      	; 0x3ea8 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3eb0:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3eb2:	39 81       	ldd	r19, Y+1	; 0x01
    3eb4:	31 30       	cpi	r19, 0x01	; 1
    3eb6:	39 f4       	brne	.+14     	; 0x3ec6 <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3eb8:	f6 01       	movw	r30, r12
    3eba:	60 81       	ld	r22, Z
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	80 81       	ld	r24, Z
    3ec0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
    3ec4:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3ec6:	f6 01       	movw	r30, r12
    3ec8:	60 81       	ld	r22, Z
    3eca:	f8 01       	movw	r30, r16
    3ecc:	80 81       	ld	r24, Z
    3ece:	98 2f       	mov	r25, r24
    3ed0:	9f 5f       	subi	r25, 0xFF	; 255
    3ed2:	90 83       	st	Z, r25
    3ed4:	49 2d       	mov	r20, r9
    3ed6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3eda:	83 94       	inc	r8
    3edc:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ede:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ee0:	2f 5f       	subi	r18, 0xFF	; 255
    3ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee4:	3c 87       	std	Y+12, r19	; 0x0c
    3ee6:	2b 87       	std	Y+11, r18	; 0x0b
    3ee8:	86 10       	cpse	r8, r6
    3eea:	ca cf       	rjmp	.-108    	; 0x3e80 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3eec:	ef ef       	ldi	r30, 0xFF	; 255
    3eee:	f2 e0       	ldi	r31, 0x02	; 2
    3ef0:	80 81       	ld	r24, Z
    3ef2:	88 23       	and	r24, r24
    3ef4:	41 f0       	breq	.+16     	; 0x3f06 <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ef6:	f6 01       	movw	r30, r12
    3ef8:	60 81       	ld	r22, Z
    3efa:	f8 01       	movw	r30, r16
    3efc:	80 81       	ld	r24, Z
    3efe:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
    3f02:	48 2f       	mov	r20, r24
    3f04:	01 c0       	rjmp	.+2      	; 0x3f08 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3f06:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3f08:	f6 01       	movw	r30, r12
    3f0a:	60 81       	ld	r22, Z
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	80 81       	ld	r24, Z
    3f10:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3f14:	fc 81       	ldd	r31, Y+4	; 0x04
    3f16:	f8 5f       	subi	r31, 0xF8	; 248
    3f18:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3f1a:	73 94       	inc	r7
    3f1c:	87 2d       	mov	r24, r7
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	2d 81       	ldd	r18, Y+5	; 0x05
    3f22:	3e 81       	ldd	r19, Y+6	; 0x06
    3f24:	82 17       	cp	r24, r18
    3f26:	93 07       	cpc	r25, r19
    3f28:	08 f4       	brcc	.+2      	; 0x3f2c <GLCD_DrawBitmap+0x19c>
    3f2a:	93 cf       	rjmp	.-218    	; 0x3e52 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    3f2c:	22 30       	cpi	r18, 0x02	; 2
    3f2e:	31 05       	cpc	r19, r1
    3f30:	08 f4       	brcc	.+2      	; 0x3f34 <GLCD_DrawBitmap+0x1a4>
    3f32:	74 c0       	rjmp	.+232    	; 0x401c <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3f34:	6f 2f       	mov	r22, r31
    3f36:	8f 81       	ldd	r24, Y+7	; 0x07
    3f38:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    3f3c:	27 2d       	mov	r18, r7
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	21 50       	subi	r18, 0x01	; 1
    3f42:	31 09       	sbc	r19, r1
    3f44:	48 85       	ldd	r20, Y+8	; 0x08
    3f46:	59 85       	ldd	r21, Y+9	; 0x09
    3f48:	24 9f       	mul	r18, r20
    3f4a:	c0 01       	movw	r24, r0
    3f4c:	25 9f       	mul	r18, r21
    3f4e:	90 0d       	add	r25, r0
    3f50:	34 9f       	mul	r19, r20
    3f52:	90 0d       	add	r25, r0
    3f54:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3f56:	66 20       	and	r6, r6
    3f58:	09 f4       	brne	.+2      	; 0x3f5c <GLCD_DrawBitmap+0x1cc>
    3f5a:	3e c0       	rjmp	.+124    	; 0x3fd8 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3f5c:	45 01       	movw	r8, r10
    3f5e:	88 0e       	add	r8, r24
    3f60:	99 1e       	adc	r9, r25
    3f62:	65 01       	movw	r12, r10
    3f64:	5f ef       	ldi	r21, 0xFF	; 255
    3f66:	c5 1a       	sub	r12, r21
    3f68:	d5 0a       	sbc	r13, r21
    3f6a:	6a 94       	dec	r6
    3f6c:	c6 0c       	add	r12, r6
    3f6e:	d1 1c       	adc	r13, r1
    3f70:	c8 0e       	add	r12, r24
    3f72:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f74:	0f 2e       	mov	r0, r31
    3f76:	f8 ef       	ldi	r31, 0xF8	; 248
    3f78:	ef 2e       	mov	r14, r31
    3f7a:	f2 e0       	ldi	r31, 0x02	; 2
    3f7c:	ff 2e       	mov	r15, r31
    3f7e:	f0 2d       	mov	r31, r0
    3f80:	07 ef       	ldi	r16, 0xF7	; 247
    3f82:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3f84:	88 e0       	ldi	r24, 0x08	; 8
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	5c 01       	movw	r10, r24
    3f8a:	a4 18       	sub	r10, r4
    3f8c:	b1 08       	sbc	r11, r1
    3f8e:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f90:	f7 01       	movw	r30, r14
    3f92:	80 80       	ld	r8, Z
    3f94:	f8 01       	movw	r30, r16
    3f96:	90 80       	ld	r9, Z
    3f98:	68 2d       	mov	r22, r8
    3f9a:	89 2d       	mov	r24, r9
    3f9c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3fa0:	f3 01       	movw	r30, r6
    3fa2:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	0a 2c       	mov	r0, r10
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <GLCD_DrawBitmap+0x21e>
    3faa:	55 95       	asr	r21
    3fac:	47 95       	ror	r20
    3fae:	0a 94       	dec	r0
    3fb0:	e2 f7       	brpl	.-8      	; 0x3faa <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3fb2:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    3fb6:	f1 30       	cpi	r31, 0x01	; 1
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3fba:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3fbc:	89 2d       	mov	r24, r9
    3fbe:	8f 5f       	subi	r24, 0xFF	; 255
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	80 83       	st	Z, r24
    3fc4:	68 2d       	mov	r22, r8
    3fc6:	89 2d       	mov	r24, r9
    3fc8:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
    3fcc:	ff ef       	ldi	r31, 0xFF	; 255
    3fce:	6f 1a       	sub	r6, r31
    3fd0:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3fd2:	6c 14       	cp	r6, r12
    3fd4:	7d 04       	cpc	r7, r13
    3fd6:	e1 f6       	brne	.-72     	; 0x3f90 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3fd8:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <__GLCD+0x9>
    3fdc:	88 23       	and	r24, r24
    3fde:	99 f0       	breq	.+38     	; 0x4006 <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    3fe0:	81 30       	cpi	r24, 0x01	; 1
    3fe2:	41 f4       	brne	.+16     	; 0x3ff4 <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3fe4:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    3fe8:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    3fec:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
    3ff0:	48 2f       	mov	r20, r24
    3ff2:	0a c0       	rjmp	.+20     	; 0x4008 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ff4:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    3ff8:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    3ffc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
    4000:	48 2f       	mov	r20, r24
    4002:	40 95       	com	r20
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    4006:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    4008:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    400c:	e7 ef       	ldi	r30, 0xF7	; 247
    400e:	f2 e0       	ldi	r31, 0x02	; 2
    4010:	80 81       	ld	r24, Z
    4012:	98 2f       	mov	r25, r24
    4014:	9f 5f       	subi	r25, 0xFF	; 255
    4016:	90 83       	st	Z, r25
    4018:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    401c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <GLCD_GetX>
    4020:	6a 85       	ldd	r22, Y+10	; 0x0a
    4022:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
}
    4026:	2c 96       	adiw	r28, 0x0c	; 12
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	cd bf       	out	0x3d, r28	; 61
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	ff 90       	pop	r15
    403c:	ef 90       	pop	r14
    403e:	df 90       	pop	r13
    4040:	cf 90       	pop	r12
    4042:	bf 90       	pop	r11
    4044:	af 90       	pop	r10
    4046:	9f 90       	pop	r9
    4048:	8f 90       	pop	r8
    404a:	7f 90       	pop	r7
    404c:	6f 90       	pop	r6
    404e:	5f 90       	pop	r5
    4050:	4f 90       	pop	r4
    4052:	3f 90       	pop	r3
    4054:	2f 90       	pop	r2
    4056:	08 95       	ret

00004058 <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    4058:	df 92       	push	r13
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	e8 2e       	mov	r14, r24
    4068:	16 2f       	mov	r17, r22
    406a:	d4 2e       	mov	r13, r20
    406c:	f2 2e       	mov	r15, r18
    406e:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    4070:	88 23       	and	r24, r24
    4072:	0c f4       	brge	.+2      	; 0x4076 <GLCD_DrawRectangle+0x1e>
    4074:	49 c0       	rjmp	.+146    	; 0x4108 <GLCD_DrawRectangle+0xb0>
    4076:	44 23       	and	r20, r20
    4078:	0c f4       	brge	.+2      	; 0x407c <GLCD_DrawRectangle+0x24>
    407a:	46 c0       	rjmp	.+140    	; 0x4108 <GLCD_DrawRectangle+0xb0>
    407c:	60 34       	cpi	r22, 0x40	; 64
    407e:	08 f0       	brcs	.+2      	; 0x4082 <GLCD_DrawRectangle+0x2a>
    4080:	43 c0       	rjmp	.+134    	; 0x4108 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    4082:	8f e3       	ldi	r24, 0x3F	; 63
    4084:	82 17       	cp	r24, r18
    4086:	08 f4       	brcc	.+2      	; 0x408a <GLCD_DrawRectangle+0x32>
    4088:	3f c0       	rjmp	.+126    	; 0x4108 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    408a:	4e 15       	cp	r20, r14
    408c:	00 f1       	brcs	.+64     	; 0x40ce <GLCD_DrawRectangle+0x76>
    408e:	1c c0       	rjmp	.+56     	; 0x40c8 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    4090:	4d 2f       	mov	r20, r29
    4092:	61 2f       	mov	r22, r17
    4094:	8c 2f       	mov	r24, r28
    4096:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <GLCD_SetPixel>
		X1++;
    409a:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    409c:	0c 17       	cp	r16, r28
    409e:	c0 f7       	brcc	.-16     	; 0x4090 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40a0:	de 14       	cp	r13, r14
    40a2:	d8 f0       	brcs	.+54     	; 0x40da <GLCD_DrawRectangle+0x82>
    40a4:	17 c0       	rjmp	.+46     	; 0x40d4 <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    40a6:	4d 2f       	mov	r20, r29
    40a8:	6f 2d       	mov	r22, r15
    40aa:	8c 2f       	mov	r24, r28
    40ac:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <GLCD_SetPixel>
		X1++;
    40b0:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    40b2:	0c 17       	cp	r16, r28
    40b4:	c0 f7       	brcc	.-16     	; 0x40a6 <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    40b6:	f1 16       	cp	r15, r17
    40b8:	98 f0       	brcs	.+38     	; 0x40e0 <GLCD_DrawRectangle+0x88>
    40ba:	1c c0       	rjmp	.+56     	; 0x40f4 <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    40bc:	0d 2f       	mov	r16, r29
    40be:	4d 2d       	mov	r20, r13
    40c0:	8d 2d       	mov	r24, r13
    40c2:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <GLCD_SetPixels>
    40c6:	20 c0       	rjmp	.+64     	; 0x4108 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40c8:	04 2f       	mov	r16, r20
    40ca:	ce 2d       	mov	r28, r14
    40cc:	e1 cf       	rjmp	.-62     	; 0x4090 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    40ce:	0e 2d       	mov	r16, r14
    40d0:	c4 2f       	mov	r28, r20
    40d2:	de cf       	rjmp	.-68     	; 0x4090 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40d4:	0d 2d       	mov	r16, r13
    40d6:	ce 2d       	mov	r28, r14
    40d8:	e6 cf       	rjmp	.-52     	; 0x40a6 <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    40da:	0e 2d       	mov	r16, r14
    40dc:	cd 2d       	mov	r28, r13
    40de:	e3 cf       	rjmp	.-58     	; 0x40a6 <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    40e0:	0d 2f       	mov	r16, r29
    40e2:	21 2f       	mov	r18, r17
    40e4:	4e 2d       	mov	r20, r14
    40e6:	6f 2d       	mov	r22, r15
    40e8:	8e 2d       	mov	r24, r14
    40ea:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    40ee:	21 2f       	mov	r18, r17
    40f0:	6f 2d       	mov	r22, r15
    40f2:	e4 cf       	rjmp	.-56     	; 0x40bc <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    40f4:	0d 2f       	mov	r16, r29
    40f6:	2f 2d       	mov	r18, r15
    40f8:	4e 2d       	mov	r20, r14
    40fa:	61 2f       	mov	r22, r17
    40fc:	8e 2d       	mov	r24, r14
    40fe:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <GLCD_SetPixels>
    4102:	2f 2d       	mov	r18, r15
    4104:	61 2f       	mov	r22, r17
    4106:	da cf       	rjmp	.-76     	; 0x40bc <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    4108:	df 91       	pop	r29
    410a:	cf 91       	pop	r28
    410c:	1f 91       	pop	r17
    410e:	0f 91       	pop	r16
    4110:	ff 90       	pop	r15
    4112:	ef 90       	pop	r14
    4114:	df 90       	pop	r13
    4116:	08 95       	ret

00004118 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    4118:	0f 93       	push	r16
    411a:	1f 93       	push	r17
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    4122:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    4124:	00 e0       	ldi	r16, 0x00	; 0
    4126:	0b c0       	rjmp	.+22     	; 0x413e <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    4128:	41 2f       	mov	r20, r17
    412a:	6d 2f       	mov	r22, r29
    412c:	8c 2f       	mov	r24, r28
    412e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    4132:	cf 5f       	subi	r28, 0xFF	; 255
    4134:	c0 38       	cpi	r28, 0x80	; 128
    4136:	c1 f7       	brne	.-16     	; 0x4128 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    4138:	d8 5f       	subi	r29, 0xF8	; 248
    413a:	d0 34       	cpi	r29, 0x40	; 64
    413c:	11 f0       	breq	.+4      	; 0x4142 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    413e:	c0 2f       	mov	r28, r16
    4140:	f3 cf       	rjmp	.-26     	; 0x4128 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    4142:	df 91       	pop	r29
    4144:	cf 91       	pop	r28
    4146:	1f 91       	pop	r17
    4148:	0f 91       	pop	r16
    414a:	08 95       	ret

0000414c <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	0e 94 8c 20 	call	0x4118	; 0x4118 <GLCD_FillScreen>
    4152:	08 95       	ret

00004154 <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    4154:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    4156:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <GLCD_SetPixels>
}
    415a:	0f 91       	pop	r16
    415c:	08 95       	ret

0000415e <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    415e:	2f 92       	push	r2
    4160:	3f 92       	push	r3
    4162:	5f 92       	push	r5
    4164:	6f 92       	push	r6
    4166:	7f 92       	push	r7
    4168:	8f 92       	push	r8
    416a:	9f 92       	push	r9
    416c:	af 92       	push	r10
    416e:	bf 92       	push	r11
    4170:	cf 92       	push	r12
    4172:	df 92       	push	r13
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	d8 2e       	mov	r13, r24
    4186:	dc 18       	sub	r13, r12
    4188:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    418a:	b8 2e       	mov	r11, r24
    418c:	b6 1a       	sub	r11, r22
    418e:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    4190:	46 2f       	mov	r20, r22
    4192:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    4194:	a6 2e       	mov	r10, r22
    4196:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    4198:	0b 2d       	mov	r16, r11
    419a:	10 e0       	ldi	r17, 0x00	; 0
    419c:	88 e0       	ldi	r24, 0x08	; 8
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	84 1b       	sub	r24, r20
    41a2:	91 09       	sbc	r25, r1
    41a4:	08 17       	cp	r16, r24
    41a6:	19 07       	cpc	r17, r25
    41a8:	7c f4       	brge	.+30     	; 0x41c8 <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    41aa:	88 e0       	ldi	r24, 0x08	; 8
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	80 1b       	sub	r24, r16
    41b0:	91 0b       	sbc	r25, r17
    41b2:	2f ef       	ldi	r18, 0xFF	; 255
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	b9 01       	movw	r22, r18
    41b8:	02 c0       	rjmp	.+4      	; 0x41be <GLCD_InvertRect+0x60>
    41ba:	75 95       	asr	r23
    41bc:	67 95       	ror	r22
    41be:	8a 95       	dec	r24
    41c0:	e2 f7       	brpl	.-8      	; 0x41ba <GLCD_InvertRect+0x5c>
    41c2:	cb 01       	movw	r24, r22
		h = height;
    41c4:	5b 2c       	mov	r5, r11
    41c6:	04 c0       	rjmp	.+8      	; 0x41d0 <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    41c8:	88 e0       	ldi	r24, 0x08	; 8
    41ca:	58 2e       	mov	r5, r24
    41cc:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    41ce:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    41d0:	68 2e       	mov	r6, r24
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <GLCD_InvertRect+0x78>
    41d4:	66 0c       	add	r6, r6
    41d6:	4a 95       	dec	r20
    41d8:	ea f7       	brpl	.-6      	; 0x41d4 <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    41da:	6a 2d       	mov	r22, r10
    41dc:	8c 2d       	mov	r24, r12
    41de:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    41e2:	dd 20       	and	r13, r13
    41e4:	d9 f1       	breq	.+118    	; 0x425c <GLCD_InvertRect+0xfe>
    41e6:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    41e8:	0f 2e       	mov	r0, r31
    41ea:	f8 ef       	ldi	r31, 0xF8	; 248
    41ec:	ef 2e       	mov	r14, r31
    41ee:	f2 e0       	ldi	r31, 0x02	; 2
    41f0:	ff 2e       	mov	r15, r31
    41f2:	f0 2d       	mov	r31, r0
    41f4:	c7 ef       	ldi	r28, 0xF7	; 247
    41f6:	d2 e0       	ldi	r29, 0x02	; 2
    41f8:	f7 01       	movw	r30, r14
    41fa:	70 80       	ld	r7, Z
    41fc:	98 80       	ld	r9, Y
    41fe:	67 2d       	mov	r22, r7
    4200:	89 2d       	mov	r24, r9
    4202:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4206:	99 2d       	mov	r25, r9
    4208:	9f 5f       	subi	r25, 0xFF	; 255
    420a:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    420c:	48 2f       	mov	r20, r24
    420e:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4210:	67 2d       	mov	r22, r7
    4212:	89 2d       	mov	r24, r9
    4214:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    4218:	83 94       	inc	r8
    421a:	8d 10       	cpse	r8, r13
    421c:	ed cf       	rjmp	.-38     	; 0x41f8 <GLCD_InvertRect+0x9a>
    421e:	1e c0       	rjmp	.+60     	; 0x425c <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    4220:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    4222:	6c 2f       	mov	r22, r28
    4224:	8c 2d       	mov	r24, r12
    4226:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    422a:	dd 20       	and	r13, r13
    422c:	39 f1       	breq	.+78     	; 0x427c <GLCD_InvertRect+0x11e>
    422e:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4230:	f7 01       	movw	r30, r14
    4232:	50 80       	ld	r5, Z
    4234:	f1 01       	movw	r30, r2
    4236:	80 80       	ld	r8, Z
    4238:	65 2d       	mov	r22, r5
    423a:	88 2d       	mov	r24, r8
    423c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4240:	98 2d       	mov	r25, r8
    4242:	9f 5f       	subi	r25, 0xFF	; 255
    4244:	f1 01       	movw	r30, r2
    4246:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4248:	48 2f       	mov	r20, r24
    424a:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    424c:	65 2d       	mov	r22, r5
    424e:	88 2d       	mov	r24, r8
    4250:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    4254:	63 94       	inc	r6
    4256:	6d 14       	cp	r6, r13
    4258:	89 f0       	breq	.+34     	; 0x427c <GLCD_InvertRect+0x11e>
    425a:	ea cf       	rjmp	.-44     	; 0x4230 <GLCD_InvertRect+0xd2>
    425c:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    425e:	5a 18       	sub	r5, r10
    4260:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    4262:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4264:	0f 2e       	mov	r0, r31
    4266:	f8 ef       	ldi	r31, 0xF8	; 248
    4268:	ef 2e       	mov	r14, r31
    426a:	f2 e0       	ldi	r31, 0x02	; 2
    426c:	ff 2e       	mov	r15, r31
    426e:	f0 2d       	mov	r31, r0
    4270:	0f 2e       	mov	r0, r31
    4272:	f7 ef       	ldi	r31, 0xF7	; 247
    4274:	2f 2e       	mov	r2, r31
    4276:	f2 e0       	ldi	r31, 0x02	; 2
    4278:	3f 2e       	mov	r3, r31
    427a:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    427c:	8a 2d       	mov	r24, r10
    427e:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    4280:	e8 2f       	mov	r30, r24
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	df 01       	movw	r26, r30
    4286:	18 96       	adiw	r26, 0x08	; 8
    4288:	0a 17       	cp	r16, r26
    428a:	1b 07       	cpc	r17, r27
    428c:	4c f6       	brge	.-110    	; 0x4220 <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    428e:	8b 15       	cp	r24, r11
    4290:	58 f5       	brcc	.+86     	; 0x42e8 <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    4292:	0e 1b       	sub	r16, r30
    4294:	1f 0b       	sbc	r17, r31
    4296:	8f ef       	ldi	r24, 0xFF	; 255
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	9c 01       	movw	r18, r24
    429c:	02 c0       	rjmp	.+4      	; 0x42a2 <GLCD_InvertRect+0x144>
    429e:	22 0f       	add	r18, r18
    42a0:	33 1f       	adc	r19, r19
    42a2:	0a 95       	dec	r16
    42a4:	e2 f7       	brpl	.-8      	; 0x429e <GLCD_InvertRect+0x140>
    42a6:	b2 2e       	mov	r11, r18
    42a8:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    42aa:	6c 2f       	mov	r22, r28
    42ac:	68 5f       	subi	r22, 0xF8	; 248
    42ae:	8c 2d       	mov	r24, r12
    42b0:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    42b4:	dd 20       	and	r13, r13
    42b6:	c1 f0       	breq	.+48     	; 0x42e8 <GLCD_InvertRect+0x18a>
    42b8:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    42ba:	08 ef       	ldi	r16, 0xF8	; 248
    42bc:	12 e0       	ldi	r17, 0x02	; 2
    42be:	c7 ef       	ldi	r28, 0xF7	; 247
    42c0:	d2 e0       	ldi	r29, 0x02	; 2
    42c2:	f8 01       	movw	r30, r16
    42c4:	c0 80       	ld	r12, Z
    42c6:	f8 80       	ld	r15, Y
    42c8:	6c 2d       	mov	r22, r12
    42ca:	8f 2d       	mov	r24, r15
    42cc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    42d0:	9f 2d       	mov	r25, r15
    42d2:	9f 5f       	subi	r25, 0xFF	; 255
    42d4:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    42d6:	48 2f       	mov	r20, r24
    42d8:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    42da:	6c 2d       	mov	r22, r12
    42dc:	8f 2d       	mov	r24, r15
    42de:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    42e2:	e3 94       	inc	r14
    42e4:	ed 10       	cpse	r14, r13
    42e6:	ed cf       	rjmp	.-38     	; 0x42c2 <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	1f 91       	pop	r17
    42ee:	0f 91       	pop	r16
    42f0:	ff 90       	pop	r15
    42f2:	ef 90       	pop	r14
    42f4:	df 90       	pop	r13
    42f6:	cf 90       	pop	r12
    42f8:	bf 90       	pop	r11
    42fa:	af 90       	pop	r10
    42fc:	9f 90       	pop	r9
    42fe:	8f 90       	pop	r8
    4300:	7f 90       	pop	r7
    4302:	6f 90       	pop	r6
    4304:	5f 90       	pop	r5
    4306:	3f 90       	pop	r3
    4308:	2f 90       	pop	r2
    430a:	08 95       	ret

0000430c <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    430c:	66 23       	and	r22, r22
    430e:	f4 f0       	brlt	.+60     	; 0x434c <GLCD_SetFont+0x40>
    4310:	40 34       	cpi	r20, 0x40	; 64
    4312:	e0 f4       	brcc	.+56     	; 0x434c <GLCD_SetFont+0x40>
    4314:	22 30       	cpi	r18, 0x02	; 2
    4316:	d0 f4       	brcc	.+52     	; 0x434c <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    4318:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <__GLCD+0x5>
    431c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    4320:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    4324:	40 93 fd 02 	sts	0x02FD, r20	; 0x8002fd <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    4328:	50 e0       	ldi	r21, 0x00	; 0
    432a:	41 50       	subi	r20, 0x01	; 1
    432c:	51 09       	sbc	r21, r1
    432e:	ca 01       	movw	r24, r20
    4330:	99 23       	and	r25, r25
    4332:	0c f4       	brge	.+2      	; 0x4336 <GLCD_SetFont+0x2a>
    4334:	07 96       	adiw	r24, 0x07	; 7
    4336:	95 95       	asr	r25
    4338:	87 95       	ror	r24
    433a:	95 95       	asr	r25
    433c:	87 95       	ror	r24
    433e:	95 95       	asr	r25
    4340:	87 95       	ror	r24
    4342:	8f 5f       	subi	r24, 0xFF	; 255
    4344:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    4348:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <__GLCD+0x9>
    434c:	08 95       	ret

0000434e <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    434e:	2f 92       	push	r2
    4350:	3f 92       	push	r3
    4352:	4f 92       	push	r4
    4354:	5f 92       	push	r5
    4356:	6f 92       	push	r6
    4358:	7f 92       	push	r7
    435a:	8f 92       	push	r8
    435c:	9f 92       	push	r9
    435e:	af 92       	push	r10
    4360:	bf 92       	push	r11
    4362:	cf 92       	push	r12
    4364:	df 92       	push	r13
    4366:	ef 92       	push	r14
    4368:	ff 92       	push	r15
    436a:	0f 93       	push	r16
    436c:	1f 93       	push	r17
    436e:	cf 93       	push	r28
    4370:	df 93       	push	r29
    4372:	cd b7       	in	r28, 0x3d	; 61
    4374:	de b7       	in	r29, 0x3e	; 62
    4376:	2b 97       	sbiw	r28, 0x0b	; 11
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	de bf       	out	0x3e, r29	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    4382:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    4386:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    4388:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    438c:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    438e:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    4392:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    4394:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <__GLCD+0x6>
    4398:	29 9f       	mul	r18, r25
    439a:	90 01       	movw	r18, r0
    439c:	11 24       	eor	r1, r1
    439e:	2f 5f       	subi	r18, 0xFF	; 255
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	82 9f       	mul	r24, r18
    43a4:	a0 01       	movw	r20, r0
    43a6:	83 9f       	mul	r24, r19
    43a8:	50 0d       	add	r21, r0
    43aa:	11 24       	eor	r1, r1
    43ac:	59 87       	std	Y+9, r21	; 0x09
    43ae:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    43b0:	4f 5f       	subi	r20, 0xFF	; 255
    43b2:	5f 4f       	sbci	r21, 0xFF	; 255
    43b4:	5e 83       	std	Y+6, r21	; 0x06
    43b6:	4d 83       	std	Y+5, r20	; 0x05
    43b8:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <__GLCD+0x4>
    43bc:	f0 91 fb 02 	lds	r31, 0x02FB	; 0x8002fb <__GLCD+0x5>
    43c0:	a8 85       	ldd	r26, Y+8	; 0x08
    43c2:	b9 85       	ldd	r27, Y+9	; 0x09
    43c4:	ea 0f       	add	r30, r26
    43c6:	fb 1f       	adc	r31, r27
    43c8:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    43ca:	7f 80       	ldd	r7, Y+7	; 0x07
    43cc:	b7 e0       	ldi	r27, 0x07	; 7
    43ce:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    43d0:	99 23       	and	r25, r25
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <GLCD_PrintChar+0x88>
    43d4:	92 c0       	rjmp	.+292    	; 0x44fa <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    43d6:	ef 81       	ldd	r30, Y+7	; 0x07
    43d8:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    43da:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    43dc:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    43de:	88 e0       	ldi	r24, 0x08	; 8
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	9c 01       	movw	r18, r24
    43e4:	27 19       	sub	r18, r7
    43e6:	31 09       	sbc	r19, r1
    43e8:	3a 83       	std	Y+2, r19	; 0x02
    43ea:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    43ec:	0f 2e       	mov	r0, r31
    43ee:	ff ef       	ldi	r31, 0xFF	; 255
    43f0:	8f 2e       	mov	r8, r31
    43f2:	f2 e0       	ldi	r31, 0x02	; 2
    43f4:	9f 2e       	mov	r9, r31
    43f6:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    43f8:	0f 2e       	mov	r0, r31
    43fa:	f8 ef       	ldi	r31, 0xF8	; 248
    43fc:	af 2e       	mov	r10, r31
    43fe:	f2 e0       	ldi	r31, 0x02	; 2
    4400:	bf 2e       	mov	r11, r31
    4402:	f0 2d       	mov	r31, r0
    4404:	07 ef       	ldi	r16, 0xF7	; 247
    4406:	12 e0       	ldi	r17, 0x02	; 2
    4408:	67 2c       	mov	r6, r7
    440a:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    440c:	6b 81       	ldd	r22, Y+3	; 0x03
    440e:	8c 81       	ldd	r24, Y+4	; 0x04
    4410:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    4414:	4d 81       	ldd	r20, Y+5	; 0x05
    4416:	5e 81       	ldd	r21, Y+6	; 0x06
    4418:	43 0d       	add	r20, r3
    441a:	51 1d       	adc	r21, r1
    441c:	5b 87       	std	Y+11, r21	; 0x0b
    441e:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    4420:	7a 01       	movw	r14, r20
    4422:	51 e0       	ldi	r21, 0x01	; 1
    4424:	e5 1a       	sub	r14, r21
    4426:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4428:	77 20       	and	r7, r7
    442a:	09 f4       	brne	.+2      	; 0x442e <GLCD_PrintChar+0xe0>
    442c:	4f c0       	rjmp	.+158    	; 0x44cc <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    442e:	0f 2e       	mov	r0, r31
    4430:	fe ef       	ldi	r31, 0xFE	; 254
    4432:	cf 2e       	mov	r12, r31
    4434:	f2 e0       	ldi	r31, 0x02	; 2
    4436:	df 2e       	mov	r13, r31
    4438:	f0 2d       	mov	r31, r0
    443a:	83 2d       	mov	r24, r3
    443c:	36 2c       	mov	r3, r6
    443e:	67 2c       	mov	r6, r7
    4440:	72 2c       	mov	r7, r2
    4442:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    4444:	aa ef       	ldi	r26, 0xFA	; 250
    4446:	b2 e0       	ldi	r27, 0x02	; 2
    4448:	2d 91       	ld	r18, X+
    444a:	3c 91       	ld	r19, X
    444c:	ea 85       	ldd	r30, Y+10	; 0x0a
    444e:	fb 85       	ldd	r31, Y+11	; 0x0b
    4450:	e2 0f       	add	r30, r18
    4452:	f3 1f       	adc	r31, r19
    4454:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    4456:	4e 2e       	mov	r4, r30
    4458:	03 2c       	mov	r0, r3
    445a:	01 c0       	rjmp	.+2      	; 0x445e <GLCD_PrintChar+0x110>
    445c:	44 0c       	add	r4, r4
    445e:	0a 94       	dec	r0
    4460:	ea f7       	brpl	.-6      	; 0x445c <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    4462:	55 20       	and	r5, r5
    4464:	81 f0       	breq	.+32     	; 0x4486 <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    4466:	f9 01       	movw	r30, r18
    4468:	ee 0d       	add	r30, r14
    446a:	ff 1d       	adc	r31, r15
    446c:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	09 80       	ldd	r0, Y+1	; 0x01
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <GLCD_PrintChar+0x12a>
    4474:	35 95       	asr	r19
    4476:	27 95       	ror	r18
    4478:	0a 94       	dec	r0
    447a:	e2 f7       	brpl	.-8      	; 0x4474 <GLCD_PrintChar+0x126>
				data |= dataPrev;
    447c:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    447e:	f6 01       	movw	r30, r12
    4480:	80 81       	ld	r24, Z
    4482:	e8 0e       	add	r14, r24
    4484:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4486:	d4 01       	movw	r26, r8
    4488:	8c 91       	ld	r24, X
    448a:	81 30       	cpi	r24, 0x01	; 1
    448c:	39 f4       	brne	.+14     	; 0x449c <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    448e:	f5 01       	movw	r30, r10
    4490:	60 81       	ld	r22, Z
    4492:	d8 01       	movw	r26, r16
    4494:	8c 91       	ld	r24, X
    4496:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
    449a:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    449c:	f5 01       	movw	r30, r10
    449e:	60 81       	ld	r22, Z
    44a0:	d8 01       	movw	r26, r16
    44a2:	8c 91       	ld	r24, X
    44a4:	98 2f       	mov	r25, r24
    44a6:	9f 5f       	subi	r25, 0xFF	; 255
    44a8:	9c 93       	st	X, r25
    44aa:	44 2d       	mov	r20, r4
    44ac:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    44b0:	f6 01       	movw	r30, r12
    44b2:	80 81       	ld	r24, Z
    44b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    44b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    44b8:	28 0f       	add	r18, r24
    44ba:	31 1d       	adc	r19, r1
    44bc:	3b 87       	std	Y+11, r19	; 0x0b
    44be:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    44c0:	73 94       	inc	r7
    44c2:	76 10       	cpse	r7, r6
    44c4:	bf cf       	rjmp	.-130    	; 0x4444 <GLCD_PrintChar+0xf6>
    44c6:	76 2c       	mov	r7, r6
    44c8:	63 2c       	mov	r6, r3
    44ca:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    44cc:	d4 01       	movw	r26, r8
    44ce:	8c 91       	ld	r24, X
    44d0:	81 11       	cpse	r24, r1
    44d2:	07 c0       	rjmp	.+14     	; 0x44e2 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    44d4:	42 2d       	mov	r20, r2
    44d6:	f5 01       	movw	r30, r10
    44d8:	60 81       	ld	r22, Z
    44da:	d8 01       	movw	r26, r16
    44dc:	8c 91       	ld	r24, X
    44de:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    44e2:	bb 81       	ldd	r27, Y+3	; 0x03
    44e4:	b8 5f       	subi	r27, 0xF8	; 248
    44e6:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    44e8:	33 94       	inc	r3
    44ea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__GLCD+0x8>
    44ee:	38 16       	cp	r3, r24
    44f0:	08 f4       	brcc	.+2      	; 0x44f4 <GLCD_PrintChar+0x1a6>
    44f2:	8c cf       	rjmp	.-232    	; 0x440c <GLCD_PrintChar+0xbe>
    44f4:	57 2c       	mov	r5, r7
    44f6:	76 2c       	mov	r7, r6
    44f8:	03 c0       	rjmp	.+6      	; 0x4500 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    44fa:	ef 81       	ldd	r30, Y+7	; 0x07
    44fc:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    44fe:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    4500:	2f 81       	ldd	r18, Y+7	; 0x07
    4502:	22 95       	swap	r18
    4504:	26 95       	lsr	r18
    4506:	26 95       	lsr	r18
    4508:	23 70       	andi	r18, 0x03	; 3
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <__GLCD+0x7>
    4510:	82 95       	swap	r24
    4512:	86 95       	lsr	r24
    4514:	86 95       	lsr	r24
    4516:	83 70       	andi	r24, 0x03	; 3
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	ff 81       	ldd	r31, Y+7	; 0x07
    451c:	8f 0f       	add	r24, r31
    451e:	91 1d       	adc	r25, r1
    4520:	28 17       	cp	r18, r24
    4522:	39 07       	cpc	r19, r25
    4524:	09 f4       	brne	.+2      	; 0x4528 <GLCD_PrintChar+0x1da>
    4526:	69 c0       	rjmp	.+210    	; 0x45fa <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    4528:	6b 81       	ldd	r22, Y+3	; 0x03
    452a:	8c 81       	ldd	r24, Y+4	; 0x04
    452c:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    4530:	28 85       	ldd	r18, Y+8	; 0x08
    4532:	39 85       	ldd	r19, Y+9	; 0x09
    4534:	23 0d       	add	r18, r3
    4536:	31 1d       	adc	r19, r1
    4538:	3a 83       	std	Y+2, r19	; 0x02
    453a:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    453c:	55 20       	and	r5, r5
    453e:	09 f4       	brne	.+2      	; 0x4542 <GLCD_PrintChar+0x1f4>
    4540:	51 c0       	rjmp	.+162    	; 0x45e4 <GLCD_PrintChar+0x296>
    4542:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4544:	0f 2e       	mov	r0, r31
    4546:	f8 ef       	ldi	r31, 0xF8	; 248
    4548:	af 2e       	mov	r10, r31
    454a:	f2 e0       	ldi	r31, 0x02	; 2
    454c:	bf 2e       	mov	r11, r31
    454e:	f0 2d       	mov	r31, r0
    4550:	07 ef       	ldi	r16, 0xF7	; 247
    4552:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    4554:	0f 2e       	mov	r0, r31
    4556:	fa ef       	ldi	r31, 0xFA	; 250
    4558:	cf 2e       	mov	r12, r31
    455a:	f2 e0       	ldi	r31, 0x02	; 2
    455c:	df 2e       	mov	r13, r31
    455e:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4560:	88 e0       	ldi	r24, 0x08	; 8
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	ac 01       	movw	r20, r24
    4566:	47 19       	sub	r20, r7
    4568:	51 09       	sbc	r21, r1
    456a:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    456c:	0f 2e       	mov	r0, r31
    456e:	ff ef       	ldi	r31, 0xFF	; 255
    4570:	ef 2e       	mov	r14, r31
    4572:	f2 e0       	ldi	r31, 0x02	; 2
    4574:	ff 2e       	mov	r15, r31
    4576:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    4578:	0f 2e       	mov	r0, r31
    457a:	fe ef       	ldi	r31, 0xFE	; 254
    457c:	8f 2e       	mov	r8, r31
    457e:	f2 e0       	ldi	r31, 0x02	; 2
    4580:	9f 2e       	mov	r9, r31
    4582:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4584:	d5 01       	movw	r26, r10
    4586:	2c 90       	ld	r2, X
    4588:	f8 01       	movw	r30, r16
    458a:	40 80       	ld	r4, Z
    458c:	62 2d       	mov	r22, r2
    458e:	84 2d       	mov	r24, r4
    4590:	0e 94 66 1c 	call	0x38cc	; 0x38cc <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    4594:	d6 01       	movw	r26, r12
    4596:	ed 91       	ld	r30, X+
    4598:	fc 91       	ld	r31, X
    459a:	29 81       	ldd	r18, Y+1	; 0x01
    459c:	3a 81       	ldd	r19, Y+2	; 0x02
    459e:	e2 0f       	add	r30, r18
    45a0:	f3 1f       	adc	r31, r19
    45a2:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    45a4:	50 e0       	ldi	r21, 0x00	; 0
    45a6:	06 2c       	mov	r0, r6
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <GLCD_PrintChar+0x260>
    45aa:	55 95       	asr	r21
    45ac:	47 95       	ror	r20
    45ae:	0a 94       	dec	r0
    45b0:	e2 f7       	brpl	.-8      	; 0x45aa <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    45b2:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    45b4:	d7 01       	movw	r26, r14
    45b6:	9c 91       	ld	r25, X
    45b8:	91 30       	cpi	r25, 0x01	; 1
    45ba:	09 f4       	brne	.+2      	; 0x45be <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    45bc:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    45be:	84 2d       	mov	r24, r4
    45c0:	8f 5f       	subi	r24, 0xFF	; 255
    45c2:	f8 01       	movw	r30, r16
    45c4:	80 83       	st	Z, r24
    45c6:	62 2d       	mov	r22, r2
    45c8:	84 2d       	mov	r24, r4
    45ca:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    45ce:	d4 01       	movw	r26, r8
    45d0:	8c 91       	ld	r24, X
    45d2:	e9 81       	ldd	r30, Y+1	; 0x01
    45d4:	fa 81       	ldd	r31, Y+2	; 0x02
    45d6:	e8 0f       	add	r30, r24
    45d8:	f1 1d       	adc	r31, r1
    45da:	fa 83       	std	Y+2, r31	; 0x02
    45dc:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    45de:	33 94       	inc	r3
    45e0:	35 10       	cpse	r3, r5
    45e2:	d0 cf       	rjmp	.-96     	; 0x4584 <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    45e4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <__GLCD+0x9>
    45e8:	81 11       	cpse	r24, r1
    45ea:	07 c0       	rjmp	.+14     	; 0x45fa <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <__GLCD+0x2>
    45f2:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    45f6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    45fa:	8c 81       	ldd	r24, Y+4	; 0x04
    45fc:	8f 5f       	subi	r24, 0xFF	; 255
    45fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4600:	85 0d       	add	r24, r5
    4602:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <GLCD_GotoXY>
}
    4606:	2b 96       	adiw	r28, 0x0b	; 11
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	f8 94       	cli
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	1f 91       	pop	r17
    4618:	0f 91       	pop	r16
    461a:	ff 90       	pop	r15
    461c:	ef 90       	pop	r14
    461e:	df 90       	pop	r13
    4620:	cf 90       	pop	r12
    4622:	bf 90       	pop	r11
    4624:	af 90       	pop	r10
    4626:	9f 90       	pop	r9
    4628:	8f 90       	pop	r8
    462a:	7f 90       	pop	r7
    462c:	6f 90       	pop	r6
    462e:	5f 90       	pop	r5
    4630:	4f 90       	pop	r4
    4632:	3f 90       	pop	r3
    4634:	2f 90       	pop	r2
    4636:	08 95       	ret

00004638 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    4638:	ef 92       	push	r14
    463a:	ff 92       	push	r15
    463c:	0f 93       	push	r16
    463e:	1f 93       	push	r17
    4640:	cf 93       	push	r28
    4642:	df 93       	push	r29
    4644:	ec 01       	movw	r28, r24
	while(*Text)
    4646:	88 81       	ld	r24, Y
    4648:	88 23       	and	r24, r24
    464a:	19 f1       	breq	.+70     	; 0x4692 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    464c:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <__GLCD+0x1>
    4650:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <__GLCD+0x6>
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	29 0f       	add	r18, r25
    4658:	31 1d       	adc	r19, r1
    465a:	20 38       	cpi	r18, 0x80	; 128
    465c:	31 05       	cpc	r19, r1
    465e:	cc f4       	brge	.+50     	; 0x4692 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    4660:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4662:	0f 2e       	mov	r0, r31
    4664:	f7 ef       	ldi	r31, 0xF7	; 247
    4666:	ef 2e       	mov	r14, r31
    4668:	f2 e0       	ldi	r31, 0x02	; 2
    466a:	ff 2e       	mov	r15, r31
    466c:	f0 2d       	mov	r31, r0
    466e:	0c ef       	ldi	r16, 0xFC	; 252
    4670:	12 e0       	ldi	r17, 0x02	; 2
    4672:	0a c0       	rjmp	.+20     	; 0x4688 <GLCD_PrintString+0x50>
    4674:	f7 01       	movw	r30, r14
    4676:	90 81       	ld	r25, Z
    4678:	f8 01       	movw	r30, r16
    467a:	20 81       	ld	r18, Z
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	29 0f       	add	r18, r25
    4680:	31 1d       	adc	r19, r1
    4682:	20 38       	cpi	r18, 0x80	; 128
    4684:	31 05       	cpc	r19, r1
    4686:	2c f4       	brge	.+10     	; 0x4692 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    4688:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    468c:	89 91       	ld	r24, Y+
    468e:	81 11       	cpse	r24, r1
    4690:	f1 cf       	rjmp	.-30     	; 0x4674 <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	08 95       	ret

000046a0 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    46a0:	0f 93       	push	r16
    46a2:	1f 93       	push	r17
    46a4:	cf 93       	push	r28
    46a6:	df 93       	push	r29
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	2c 97       	sbiw	r28, 0x0c	; 12
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	de bf       	out	0x3e, r29	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    46b8:	61 15       	cp	r22, r1
    46ba:	71 05       	cpc	r23, r1
    46bc:	81 05       	cpc	r24, r1
    46be:	91 05       	cpc	r25, r1
    46c0:	21 f4       	brne	.+8      	; 0x46ca <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    46c2:	80 e3       	ldi	r24, 0x30	; 48
    46c4:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
    46c8:	45 c1       	rjmp	.+650    	; 0x4954 <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    46ca:	61 15       	cp	r22, r1
    46cc:	71 05       	cpc	r23, r1
    46ce:	81 05       	cpc	r24, r1
    46d0:	20 e8       	ldi	r18, 0x80	; 128
    46d2:	92 07       	cpc	r25, r18
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <GLCD_PrintInteger+0x38>
    46d6:	3e c1       	rjmp	.+636    	; 0x4954 <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    46d8:	fe 01       	movw	r30, r28
    46da:	31 96       	adiw	r30, 0x01	; 1
    46dc:	2c e0       	ldi	r18, 0x0C	; 12
    46de:	df 01       	movw	r26, r30
    46e0:	1d 92       	st	X+, r1
    46e2:	2a 95       	dec	r18
    46e4:	e9 f7       	brne	.-6      	; 0x46e0 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    46e6:	20 e3       	ldi	r18, 0x30	; 48
    46e8:	2b 87       	std	Y+11, r18	; 0x0b
    46ea:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    46ec:	29 87       	std	Y+9, r18	; 0x09
    46ee:	28 87       	std	Y+8, r18	; 0x08
    46f0:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    46f2:	2e 83       	std	Y+6, r18	; 0x06
    46f4:	2d 83       	std	Y+5, r18	; 0x05
    46f6:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    46f8:	2b 83       	std	Y+3, r18	; 0x03
    46fa:	2a 83       	std	Y+2, r18	; 0x02
    46fc:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    46fe:	99 23       	and	r25, r25
    4700:	5c f4       	brge	.+22     	; 0x4718 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
    4706:	88 27       	eor	r24, r24
    4708:	99 27       	eor	r25, r25
    470a:	dc 01       	movw	r26, r24
    470c:	82 1b       	sub	r24, r18
    470e:	93 0b       	sbc	r25, r19
    4710:	a4 0b       	sbc	r26, r20
    4712:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    4714:	41 e0       	ldi	r20, 0x01	; 1
    4716:	03 c0       	rjmp	.+6      	; 0x471e <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    471c:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    471e:	81 30       	cpi	r24, 0x01	; 1
    4720:	3a ec       	ldi	r19, 0xCA	; 202
    4722:	93 07       	cpc	r25, r19
    4724:	3a e9       	ldi	r19, 0x9A	; 154
    4726:	a3 07       	cpc	r26, r19
    4728:	3b e3       	ldi	r19, 0x3B	; 59
    472a:	b3 07       	cpc	r27, r19
    472c:	94 f0       	brlt	.+36     	; 0x4752 <GLCD_PrintInteger+0xb2>
    472e:	2a 81       	ldd	r18, Y+2	; 0x02
    4730:	2f 5f       	subi	r18, 0xFF	; 255
    4732:	01 c0       	rjmp	.+2      	; 0x4736 <GLCD_PrintInteger+0x96>
    4734:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    4736:	9a 5c       	subi	r25, 0xCA	; 202
    4738:	aa 49       	sbci	r26, 0x9A	; 154
    473a:	bb 43       	sbci	r27, 0x3B	; 59
    473c:	32 2f       	mov	r19, r18
    473e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    4740:	81 30       	cpi	r24, 0x01	; 1
    4742:	5a ec       	ldi	r21, 0xCA	; 202
    4744:	95 07       	cpc	r25, r21
    4746:	5a e9       	ldi	r21, 0x9A	; 154
    4748:	a5 07       	cpc	r26, r21
    474a:	5b e3       	ldi	r21, 0x3B	; 59
    474c:	b5 07       	cpc	r27, r21
    474e:	94 f7       	brge	.-28     	; 0x4734 <GLCD_PrintInteger+0x94>
    4750:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4752:	81 15       	cp	r24, r1
    4754:	21 ee       	ldi	r18, 0xE1	; 225
    4756:	92 07       	cpc	r25, r18
    4758:	25 ef       	ldi	r18, 0xF5	; 245
    475a:	a2 07       	cpc	r26, r18
    475c:	25 e0       	ldi	r18, 0x05	; 5
    475e:	b2 07       	cpc	r27, r18
    4760:	94 f0       	brlt	.+36     	; 0x4786 <GLCD_PrintInteger+0xe6>
    4762:	2b 81       	ldd	r18, Y+3	; 0x03
    4764:	2f 5f       	subi	r18, 0xFF	; 255
    4766:	01 c0       	rjmp	.+2      	; 0x476a <GLCD_PrintInteger+0xca>
    4768:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    476a:	91 5e       	subi	r25, 0xE1	; 225
    476c:	a5 4f       	sbci	r26, 0xF5	; 245
    476e:	b5 40       	sbci	r27, 0x05	; 5
    4770:	32 2f       	mov	r19, r18
    4772:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4774:	81 15       	cp	r24, r1
    4776:	51 ee       	ldi	r21, 0xE1	; 225
    4778:	95 07       	cpc	r25, r21
    477a:	55 ef       	ldi	r21, 0xF5	; 245
    477c:	a5 07       	cpc	r26, r21
    477e:	55 e0       	ldi	r21, 0x05	; 5
    4780:	b5 07       	cpc	r27, r21
    4782:	94 f7       	brge	.-28     	; 0x4768 <GLCD_PrintInteger+0xc8>
    4784:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    4786:	80 38       	cpi	r24, 0x80	; 128
    4788:	26 e9       	ldi	r18, 0x96	; 150
    478a:	92 07       	cpc	r25, r18
    478c:	28 e9       	ldi	r18, 0x98	; 152
    478e:	a2 07       	cpc	r26, r18
    4790:	b1 05       	cpc	r27, r1
    4792:	94 f0       	brlt	.+36     	; 0x47b8 <GLCD_PrintInteger+0x118>
    4794:	2c 81       	ldd	r18, Y+4	; 0x04
    4796:	2f 5f       	subi	r18, 0xFF	; 255
    4798:	01 c0       	rjmp	.+2      	; 0x479c <GLCD_PrintInteger+0xfc>
    479a:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    479c:	80 58       	subi	r24, 0x80	; 128
    479e:	96 49       	sbci	r25, 0x96	; 150
    47a0:	a8 49       	sbci	r26, 0x98	; 152
    47a2:	b1 09       	sbc	r27, r1
    47a4:	32 2f       	mov	r19, r18
    47a6:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    47a8:	80 38       	cpi	r24, 0x80	; 128
    47aa:	56 e9       	ldi	r21, 0x96	; 150
    47ac:	95 07       	cpc	r25, r21
    47ae:	58 e9       	ldi	r21, 0x98	; 152
    47b0:	a5 07       	cpc	r26, r21
    47b2:	b1 05       	cpc	r27, r1
    47b4:	94 f7       	brge	.-28     	; 0x479a <GLCD_PrintInteger+0xfa>
    47b6:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    47b8:	80 34       	cpi	r24, 0x40	; 64
    47ba:	22 e4       	ldi	r18, 0x42	; 66
    47bc:	92 07       	cpc	r25, r18
    47be:	2f e0       	ldi	r18, 0x0F	; 15
    47c0:	a2 07       	cpc	r26, r18
    47c2:	b1 05       	cpc	r27, r1
    47c4:	94 f0       	brlt	.+36     	; 0x47ea <GLCD_PrintInteger+0x14a>
    47c6:	2d 81       	ldd	r18, Y+5	; 0x05
    47c8:	2f 5f       	subi	r18, 0xFF	; 255
    47ca:	01 c0       	rjmp	.+2      	; 0x47ce <GLCD_PrintInteger+0x12e>
    47cc:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    47ce:	80 54       	subi	r24, 0x40	; 64
    47d0:	92 44       	sbci	r25, 0x42	; 66
    47d2:	af 40       	sbci	r26, 0x0F	; 15
    47d4:	b1 09       	sbc	r27, r1
    47d6:	32 2f       	mov	r19, r18
    47d8:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    47da:	80 34       	cpi	r24, 0x40	; 64
    47dc:	52 e4       	ldi	r21, 0x42	; 66
    47de:	95 07       	cpc	r25, r21
    47e0:	5f e0       	ldi	r21, 0x0F	; 15
    47e2:	a5 07       	cpc	r26, r21
    47e4:	b1 05       	cpc	r27, r1
    47e6:	94 f7       	brge	.-28     	; 0x47cc <GLCD_PrintInteger+0x12c>
    47e8:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    47ea:	80 3a       	cpi	r24, 0xA0	; 160
    47ec:	26 e8       	ldi	r18, 0x86	; 134
    47ee:	92 07       	cpc	r25, r18
    47f0:	21 e0       	ldi	r18, 0x01	; 1
    47f2:	a2 07       	cpc	r26, r18
    47f4:	b1 05       	cpc	r27, r1
    47f6:	94 f0       	brlt	.+36     	; 0x481c <GLCD_PrintInteger+0x17c>
    47f8:	2e 81       	ldd	r18, Y+6	; 0x06
    47fa:	2f 5f       	subi	r18, 0xFF	; 255
    47fc:	01 c0       	rjmp	.+2      	; 0x4800 <GLCD_PrintInteger+0x160>
    47fe:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    4800:	80 5a       	subi	r24, 0xA0	; 160
    4802:	96 48       	sbci	r25, 0x86	; 134
    4804:	a1 40       	sbci	r26, 0x01	; 1
    4806:	b1 09       	sbc	r27, r1
    4808:	32 2f       	mov	r19, r18
    480a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    480c:	80 3a       	cpi	r24, 0xA0	; 160
    480e:	56 e8       	ldi	r21, 0x86	; 134
    4810:	95 07       	cpc	r25, r21
    4812:	51 e0       	ldi	r21, 0x01	; 1
    4814:	a5 07       	cpc	r26, r21
    4816:	b1 05       	cpc	r27, r1
    4818:	94 f7       	brge	.-28     	; 0x47fe <GLCD_PrintInteger+0x15e>
    481a:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    481c:	80 31       	cpi	r24, 0x10	; 16
    481e:	27 e2       	ldi	r18, 0x27	; 39
    4820:	92 07       	cpc	r25, r18
    4822:	a1 05       	cpc	r26, r1
    4824:	b1 05       	cpc	r27, r1
    4826:	8c f0       	brlt	.+34     	; 0x484a <GLCD_PrintInteger+0x1aa>
    4828:	2f 81       	ldd	r18, Y+7	; 0x07
    482a:	2f 5f       	subi	r18, 0xFF	; 255
    482c:	01 c0       	rjmp	.+2      	; 0x4830 <GLCD_PrintInteger+0x190>
    482e:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    4830:	80 51       	subi	r24, 0x10	; 16
    4832:	97 42       	sbci	r25, 0x27	; 39
    4834:	a1 09       	sbc	r26, r1
    4836:	b1 09       	sbc	r27, r1
    4838:	32 2f       	mov	r19, r18
    483a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    483c:	80 31       	cpi	r24, 0x10	; 16
    483e:	57 e2       	ldi	r21, 0x27	; 39
    4840:	95 07       	cpc	r25, r21
    4842:	a1 05       	cpc	r26, r1
    4844:	b1 05       	cpc	r27, r1
    4846:	9c f7       	brge	.-26     	; 0x482e <GLCD_PrintInteger+0x18e>
    4848:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    484a:	88 3e       	cpi	r24, 0xE8	; 232
    484c:	23 e0       	ldi	r18, 0x03	; 3
    484e:	92 07       	cpc	r25, r18
    4850:	a1 05       	cpc	r26, r1
    4852:	b1 05       	cpc	r27, r1
    4854:	8c f0       	brlt	.+34     	; 0x4878 <GLCD_PrintInteger+0x1d8>
    4856:	28 85       	ldd	r18, Y+8	; 0x08
    4858:	2f 5f       	subi	r18, 0xFF	; 255
    485a:	01 c0       	rjmp	.+2      	; 0x485e <GLCD_PrintInteger+0x1be>
    485c:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    485e:	88 5e       	subi	r24, 0xE8	; 232
    4860:	93 40       	sbci	r25, 0x03	; 3
    4862:	a1 09       	sbc	r26, r1
    4864:	b1 09       	sbc	r27, r1
    4866:	32 2f       	mov	r19, r18
    4868:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    486a:	88 3e       	cpi	r24, 0xE8	; 232
    486c:	53 e0       	ldi	r21, 0x03	; 3
    486e:	95 07       	cpc	r25, r21
    4870:	a1 05       	cpc	r26, r1
    4872:	b1 05       	cpc	r27, r1
    4874:	9c f7       	brge	.-26     	; 0x485c <GLCD_PrintInteger+0x1bc>
    4876:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    4878:	84 36       	cpi	r24, 0x64	; 100
    487a:	91 05       	cpc	r25, r1
    487c:	a1 05       	cpc	r26, r1
    487e:	b1 05       	cpc	r27, r1
    4880:	84 f0       	brlt	.+32     	; 0x48a2 <GLCD_PrintInteger+0x202>
    4882:	29 85       	ldd	r18, Y+9	; 0x09
    4884:	2f 5f       	subi	r18, 0xFF	; 255
    4886:	01 c0       	rjmp	.+2      	; 0x488a <GLCD_PrintInteger+0x1ea>
    4888:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    488a:	84 56       	subi	r24, 0x64	; 100
    488c:	91 09       	sbc	r25, r1
    488e:	a1 09       	sbc	r26, r1
    4890:	b1 09       	sbc	r27, r1
    4892:	32 2f       	mov	r19, r18
    4894:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    4896:	84 36       	cpi	r24, 0x64	; 100
    4898:	91 05       	cpc	r25, r1
    489a:	a1 05       	cpc	r26, r1
    489c:	b1 05       	cpc	r27, r1
    489e:	a4 f7       	brge	.-24     	; 0x4888 <GLCD_PrintInteger+0x1e8>
    48a0:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    48a2:	8a 30       	cpi	r24, 0x0A	; 10
    48a4:	91 05       	cpc	r25, r1
    48a6:	a1 05       	cpc	r26, r1
    48a8:	b1 05       	cpc	r27, r1
    48aa:	7c f0       	brlt	.+30     	; 0x48ca <GLCD_PrintInteger+0x22a>
    48ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    48ae:	2f 5f       	subi	r18, 0xFF	; 255
    48b0:	01 c0       	rjmp	.+2      	; 0x48b4 <GLCD_PrintInteger+0x214>
    48b2:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    48b4:	0a 97       	sbiw	r24, 0x0a	; 10
    48b6:	a1 09       	sbc	r26, r1
    48b8:	b1 09       	sbc	r27, r1
    48ba:	32 2f       	mov	r19, r18
    48bc:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    48be:	8a 30       	cpi	r24, 0x0A	; 10
    48c0:	91 05       	cpc	r25, r1
    48c2:	a1 05       	cpc	r26, r1
    48c4:	b1 05       	cpc	r27, r1
    48c6:	ac f7       	brge	.-22     	; 0x48b2 <GLCD_PrintInteger+0x212>
    48c8:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    48ca:	18 16       	cp	r1, r24
    48cc:	19 06       	cpc	r1, r25
    48ce:	1a 06       	cpc	r1, r26
    48d0:	1b 06       	cpc	r1, r27
    48d2:	5c f4       	brge	.+22     	; 0x48ea <GLCD_PrintInteger+0x24a>
    48d4:	5b 85       	ldd	r21, Y+11	; 0x0b
    48d6:	8c 01       	movw	r16, r24
    48d8:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    48da:	01 50       	subi	r16, 0x01	; 1
    48dc:	11 09       	sbc	r17, r1
    48de:	21 09       	sbc	r18, r1
    48e0:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    48e2:	d9 f7       	brne	.-10     	; 0x48da <GLCD_PrintInteger+0x23a>
    48e4:	65 2f       	mov	r22, r21
    48e6:	68 0f       	add	r22, r24
    48e8:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    48ea:	89 81       	ldd	r24, Y+1	; 0x01
    48ec:	80 33       	cpi	r24, 0x30	; 48
    48ee:	61 f4       	brne	.+24     	; 0x4908 <GLCD_PrintInteger+0x268>
    48f0:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    48f2:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    48f4:	e1 e0       	ldi	r30, 0x01	; 1
    48f6:	f0 e0       	ldi	r31, 0x00	; 0
    48f8:	ec 0f       	add	r30, r28
    48fa:	fd 1f       	adc	r31, r29
    48fc:	e8 0f       	add	r30, r24
    48fe:	f1 1d       	adc	r31, r1
    4900:	90 81       	ld	r25, Z
    4902:	90 33       	cpi	r25, 0x30	; 48
    4904:	b1 f3       	breq	.-20     	; 0x48f2 <GLCD_PrintInteger+0x252>
    4906:	01 c0       	rjmp	.+2      	; 0x490a <GLCD_PrintInteger+0x26a>
    4908:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    490a:	44 23       	and	r20, r20
    490c:	31 f0       	breq	.+12     	; 0x491a <GLCD_PrintInteger+0x27a>
	{
		i--;
    490e:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    4910:	fe 01       	movw	r30, r28
    4912:	e8 0f       	add	r30, r24
    4914:	f1 1d       	adc	r31, r1
    4916:	9d e2       	ldi	r25, 0x2D	; 45
    4918:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    491a:	4a e0       	ldi	r20, 0x0A	; 10
    491c:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    491e:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	e1 e0       	ldi	r30, 0x01	; 1
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	ec 0f       	add	r30, r28
    4928:	fd 1f       	adc	r31, r29
    492a:	e2 0f       	add	r30, r18
    492c:	f1 1d       	adc	r31, r1
    492e:	df 01       	movw	r26, r30
    4930:	a8 0f       	add	r26, r24
    4932:	b9 1f       	adc	r27, r25
    4934:	3c 91       	ld	r19, X
    4936:	30 83       	st	Z, r19
		i++;
    4938:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    493a:	42 17       	cp	r20, r18
    493c:	90 f7       	brcc	.-28     	; 0x4922 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    493e:	e1 e0       	ldi	r30, 0x01	; 1
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	ec 0f       	add	r30, r28
    4944:	fd 1f       	adc	r31, r29
    4946:	e2 0f       	add	r30, r18
    4948:	f1 1d       	adc	r31, r1
    494a:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    494c:	ce 01       	movw	r24, r28
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	0e 94 1c 23 	call	0x4638	; 0x4638 <GLCD_PrintString>
	}
}
    4954:	2c 96       	adiw	r28, 0x0c	; 12
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	1f 91       	pop	r17
    4966:	0f 91       	pop	r16
    4968:	08 95       	ret

0000496a <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    496a:	8f 92       	push	r8
    496c:	9f 92       	push	r9
    496e:	af 92       	push	r10
    4970:	bf 92       	push	r11
    4972:	cf 92       	push	r12
    4974:	df 92       	push	r13
    4976:	ef 92       	push	r14
    4978:	ff 92       	push	r15
    497a:	6b 01       	movw	r12, r22
    497c:	7c 01       	movw	r14, r24
    497e:	49 01       	movw	r8, r18
    4980:	5a 01       	movw	r10, r20
	if (Value == 0)
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	a9 01       	movw	r20, r18
    4988:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    498c:	81 11       	cpse	r24, r1
    498e:	0a c0       	rjmp	.+20     	; 0x49a4 <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    4990:	80 e3       	ldi	r24, 0x30	; 48
    4992:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
		GLCD_PrintChar('.');
    4996:	8e e2       	ldi	r24, 0x2E	; 46
    4998:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
		GLCD_PrintChar('0');
    499c:	80 e3       	ldi	r24, 0x30	; 48
    499e:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
    49a2:	4a c0       	rjmp	.+148    	; 0x4a38 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	40 e0       	ldi	r20, 0x00	; 0
    49aa:	5f ec       	ldi	r21, 0xCF	; 207
    49ac:	c7 01       	movw	r24, r14
    49ae:	b6 01       	movw	r22, r12
    49b0:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__gesf2>
    49b4:	88 23       	and	r24, r24
    49b6:	0c f4       	brge	.+2      	; 0x49ba <GLCD_PrintDouble+0x50>
    49b8:	3f c0       	rjmp	.+126    	; 0x4a38 <GLCD_PrintDouble+0xce>
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	40 e0       	ldi	r20, 0x00	; 0
    49c0:	5f e4       	ldi	r21, 0x4F	; 79
    49c2:	c7 01       	movw	r24, r14
    49c4:	b6 01       	movw	r22, r12
    49c6:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    49ca:	88 23       	and	r24, r24
    49cc:	ac f5       	brge	.+106    	; 0x4a38 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	a9 01       	movw	r20, r18
    49d4:	c7 01       	movw	r24, r14
    49d6:	b6 01       	movw	r22, r12
    49d8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__cmpsf2>
    49dc:	88 23       	and	r24, r24
    49de:	3c f4       	brge	.+14     	; 0x49ee <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    49e0:	f7 fa       	bst	r15, 7
    49e2:	f0 94       	com	r15
    49e4:	f7 f8       	bld	r15, 7
    49e6:	f0 94       	com	r15
			GLCD_PrintChar('-');
    49e8:	8d e2       	ldi	r24, 0x2D	; 45
    49ea:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    49ee:	c7 01       	movw	r24, r14
    49f0:	b6 01       	movw	r22, r12
    49f2:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__fixsfsi>
    49f6:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    49fa:	8e e2       	ldi	r24, 0x2E	; 46
    49fc:	0e 94 a7 21 	call	0x434e	; 0x434e <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    4a00:	c7 01       	movw	r24, r14
    4a02:	b6 01       	movw	r22, r12
    4a04:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    4a08:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    4a0c:	9b 01       	movw	r18, r22
    4a0e:	ac 01       	movw	r20, r24
    4a10:	c7 01       	movw	r24, r14
    4a12:	b6 01       	movw	r22, r12
    4a14:	0e 94 49 25 	call	0x4a92	; 0x4a92 <__subsf3>
    4a18:	6b 01       	movw	r12, r22
    4a1a:	7c 01       	movw	r14, r24
    4a1c:	c5 01       	movw	r24, r10
    4a1e:	b4 01       	movw	r22, r8
    4a20:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__floatunsisf>
    4a24:	9b 01       	movw	r18, r22
    4a26:	ac 01       	movw	r20, r24
    4a28:	c7 01       	movw	r24, r14
    4a2a:	b6 01       	movw	r22, r12
    4a2c:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <__mulsf3>
    4a30:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__fixsfsi>
    4a34:	0e 94 50 23 	call	0x46a0	; 0x46a0 <GLCD_PrintInteger>
	}
}
    4a38:	ff 90       	pop	r15
    4a3a:	ef 90       	pop	r14
    4a3c:	df 90       	pop	r13
    4a3e:	cf 90       	pop	r12
    4a40:	bf 90       	pop	r11
    4a42:	af 90       	pop	r10
    4a44:	9f 90       	pop	r9
    4a46:	8f 90       	pop	r8
    4a48:	08 95       	ret

00004a4a <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    4a4a:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    4a4c:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    4a4e:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    4a50:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    4a52:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    4a54:	8c e0       	ldi	r24, 0x0C	; 12
    4a56:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    4a58:	84 e0       	ldi	r24, 0x04	; 4
    4a5a:	86 bf       	out	0x36, r24	; 54
    4a5c:	08 95       	ret

00004a5e <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    4a5e:	81 b1       	in	r24, 0x01	; 1
}
    4a60:	88 7f       	andi	r24, 0xF8	; 248
    4a62:	08 95       	ret

00004a64 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4a64:	84 ea       	ldi	r24, 0xA4	; 164
    4a66:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    4a68:	06 b6       	in	r0, 0x36	; 54
    4a6a:	07 fe       	sbrs	r0, 7
    4a6c:	fd cf       	rjmp	.-6      	; 0x4a68 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    4a6e:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <TWI_Status>
}
    4a72:	08 95       	ret

00004a74 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    4a74:	85 ed       	ldi	r24, 0xD5	; 213
    4a76:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    4a78:	06 b6       	in	r0, 0x36	; 54
    4a7a:	04 fc       	sbrc	r0, 4
    4a7c:	fd cf       	rjmp	.-6      	; 0x4a78 <TWI_EndTransmission+0x4>
}
    4a7e:	08 95       	ret

00004a80 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    4a80:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    4a82:	84 e8       	ldi	r24, 0x84	; 132
    4a84:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    4a86:	06 b6       	in	r0, 0x36	; 54
    4a88:	07 fe       	sbrs	r0, 7
    4a8a:	fd cf       	rjmp	.-6      	; 0x4a86 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    4a8c:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <TWI_Status>
}
    4a90:	08 95       	ret

00004a92 <__subsf3>:
    4a92:	50 58       	subi	r21, 0x80	; 128

00004a94 <__addsf3>:
    4a94:	bb 27       	eor	r27, r27
    4a96:	aa 27       	eor	r26, r26
    4a98:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__addsf3x>
    4a9c:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__fp_round>
    4aa0:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__fp_pscA>
    4aa4:	38 f0       	brcs	.+14     	; 0x4ab4 <__addsf3+0x20>
    4aa6:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__fp_pscB>
    4aaa:	20 f0       	brcs	.+8      	; 0x4ab4 <__addsf3+0x20>
    4aac:	39 f4       	brne	.+14     	; 0x4abc <__addsf3+0x28>
    4aae:	9f 3f       	cpi	r25, 0xFF	; 255
    4ab0:	19 f4       	brne	.+6      	; 0x4ab8 <__addsf3+0x24>
    4ab2:	26 f4       	brtc	.+8      	; 0x4abc <__addsf3+0x28>
    4ab4:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__fp_nan>
    4ab8:	0e f4       	brtc	.+2      	; 0x4abc <__addsf3+0x28>
    4aba:	e0 95       	com	r30
    4abc:	e7 fb       	bst	r30, 7
    4abe:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_inf>

00004ac2 <__addsf3x>:
    4ac2:	e9 2f       	mov	r30, r25
    4ac4:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fp_split3>
    4ac8:	58 f3       	brcs	.-42     	; 0x4aa0 <__addsf3+0xc>
    4aca:	ba 17       	cp	r27, r26
    4acc:	62 07       	cpc	r22, r18
    4ace:	73 07       	cpc	r23, r19
    4ad0:	84 07       	cpc	r24, r20
    4ad2:	95 07       	cpc	r25, r21
    4ad4:	20 f0       	brcs	.+8      	; 0x4ade <__addsf3x+0x1c>
    4ad6:	79 f4       	brne	.+30     	; 0x4af6 <__addsf3x+0x34>
    4ad8:	a6 f5       	brtc	.+104    	; 0x4b42 <__addsf3x+0x80>
    4ada:	0c 94 0e 27 	jmp	0x4e1c	; 0x4e1c <__fp_zero>
    4ade:	0e f4       	brtc	.+2      	; 0x4ae2 <__addsf3x+0x20>
    4ae0:	e0 95       	com	r30
    4ae2:	0b 2e       	mov	r0, r27
    4ae4:	ba 2f       	mov	r27, r26
    4ae6:	a0 2d       	mov	r26, r0
    4ae8:	0b 01       	movw	r0, r22
    4aea:	b9 01       	movw	r22, r18
    4aec:	90 01       	movw	r18, r0
    4aee:	0c 01       	movw	r0, r24
    4af0:	ca 01       	movw	r24, r20
    4af2:	a0 01       	movw	r20, r0
    4af4:	11 24       	eor	r1, r1
    4af6:	ff 27       	eor	r31, r31
    4af8:	59 1b       	sub	r21, r25
    4afa:	99 f0       	breq	.+38     	; 0x4b22 <__addsf3x+0x60>
    4afc:	59 3f       	cpi	r21, 0xF9	; 249
    4afe:	50 f4       	brcc	.+20     	; 0x4b14 <__addsf3x+0x52>
    4b00:	50 3e       	cpi	r21, 0xE0	; 224
    4b02:	68 f1       	brcs	.+90     	; 0x4b5e <__addsf3x+0x9c>
    4b04:	1a 16       	cp	r1, r26
    4b06:	f0 40       	sbci	r31, 0x00	; 0
    4b08:	a2 2f       	mov	r26, r18
    4b0a:	23 2f       	mov	r18, r19
    4b0c:	34 2f       	mov	r19, r20
    4b0e:	44 27       	eor	r20, r20
    4b10:	58 5f       	subi	r21, 0xF8	; 248
    4b12:	f3 cf       	rjmp	.-26     	; 0x4afa <__addsf3x+0x38>
    4b14:	46 95       	lsr	r20
    4b16:	37 95       	ror	r19
    4b18:	27 95       	ror	r18
    4b1a:	a7 95       	ror	r26
    4b1c:	f0 40       	sbci	r31, 0x00	; 0
    4b1e:	53 95       	inc	r21
    4b20:	c9 f7       	brne	.-14     	; 0x4b14 <__addsf3x+0x52>
    4b22:	7e f4       	brtc	.+30     	; 0x4b42 <__addsf3x+0x80>
    4b24:	1f 16       	cp	r1, r31
    4b26:	ba 0b       	sbc	r27, r26
    4b28:	62 0b       	sbc	r22, r18
    4b2a:	73 0b       	sbc	r23, r19
    4b2c:	84 0b       	sbc	r24, r20
    4b2e:	ba f0       	brmi	.+46     	; 0x4b5e <__addsf3x+0x9c>
    4b30:	91 50       	subi	r25, 0x01	; 1
    4b32:	a1 f0       	breq	.+40     	; 0x4b5c <__addsf3x+0x9a>
    4b34:	ff 0f       	add	r31, r31
    4b36:	bb 1f       	adc	r27, r27
    4b38:	66 1f       	adc	r22, r22
    4b3a:	77 1f       	adc	r23, r23
    4b3c:	88 1f       	adc	r24, r24
    4b3e:	c2 f7       	brpl	.-16     	; 0x4b30 <__addsf3x+0x6e>
    4b40:	0e c0       	rjmp	.+28     	; 0x4b5e <__addsf3x+0x9c>
    4b42:	ba 0f       	add	r27, r26
    4b44:	62 1f       	adc	r22, r18
    4b46:	73 1f       	adc	r23, r19
    4b48:	84 1f       	adc	r24, r20
    4b4a:	48 f4       	brcc	.+18     	; 0x4b5e <__addsf3x+0x9c>
    4b4c:	87 95       	ror	r24
    4b4e:	77 95       	ror	r23
    4b50:	67 95       	ror	r22
    4b52:	b7 95       	ror	r27
    4b54:	f7 95       	ror	r31
    4b56:	9e 3f       	cpi	r25, 0xFE	; 254
    4b58:	08 f0       	brcs	.+2      	; 0x4b5c <__addsf3x+0x9a>
    4b5a:	b0 cf       	rjmp	.-160    	; 0x4abc <__addsf3+0x28>
    4b5c:	93 95       	inc	r25
    4b5e:	88 0f       	add	r24, r24
    4b60:	08 f0       	brcs	.+2      	; 0x4b64 <__addsf3x+0xa2>
    4b62:	99 27       	eor	r25, r25
    4b64:	ee 0f       	add	r30, r30
    4b66:	97 95       	ror	r25
    4b68:	87 95       	ror	r24
    4b6a:	08 95       	ret

00004b6c <__cmpsf2>:
    4b6c:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__fp_cmp>
    4b70:	08 f4       	brcc	.+2      	; 0x4b74 <__cmpsf2+0x8>
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	08 95       	ret

00004b76 <__divsf3>:
    4b76:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__divsf3x>
    4b7a:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__fp_round>
    4b7e:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__fp_pscB>
    4b82:	58 f0       	brcs	.+22     	; 0x4b9a <__divsf3+0x24>
    4b84:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__fp_pscA>
    4b88:	40 f0       	brcs	.+16     	; 0x4b9a <__divsf3+0x24>
    4b8a:	29 f4       	brne	.+10     	; 0x4b96 <__divsf3+0x20>
    4b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    4b8e:	29 f0       	breq	.+10     	; 0x4b9a <__divsf3+0x24>
    4b90:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_inf>
    4b94:	51 11       	cpse	r21, r1
    4b96:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_szero>
    4b9a:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__fp_nan>

00004b9e <__divsf3x>:
    4b9e:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fp_split3>
    4ba2:	68 f3       	brcs	.-38     	; 0x4b7e <__divsf3+0x8>

00004ba4 <__divsf3_pse>:
    4ba4:	99 23       	and	r25, r25
    4ba6:	b1 f3       	breq	.-20     	; 0x4b94 <__divsf3+0x1e>
    4ba8:	55 23       	and	r21, r21
    4baa:	91 f3       	breq	.-28     	; 0x4b90 <__divsf3+0x1a>
    4bac:	95 1b       	sub	r25, r21
    4bae:	55 0b       	sbc	r21, r21
    4bb0:	bb 27       	eor	r27, r27
    4bb2:	aa 27       	eor	r26, r26
    4bb4:	62 17       	cp	r22, r18
    4bb6:	73 07       	cpc	r23, r19
    4bb8:	84 07       	cpc	r24, r20
    4bba:	38 f0       	brcs	.+14     	; 0x4bca <__divsf3_pse+0x26>
    4bbc:	9f 5f       	subi	r25, 0xFF	; 255
    4bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc0:	22 0f       	add	r18, r18
    4bc2:	33 1f       	adc	r19, r19
    4bc4:	44 1f       	adc	r20, r20
    4bc6:	aa 1f       	adc	r26, r26
    4bc8:	a9 f3       	breq	.-22     	; 0x4bb4 <__divsf3_pse+0x10>
    4bca:	35 d0       	rcall	.+106    	; 0x4c36 <__divsf3_pse+0x92>
    4bcc:	0e 2e       	mov	r0, r30
    4bce:	3a f0       	brmi	.+14     	; 0x4bde <__divsf3_pse+0x3a>
    4bd0:	e0 e8       	ldi	r30, 0x80	; 128
    4bd2:	32 d0       	rcall	.+100    	; 0x4c38 <__divsf3_pse+0x94>
    4bd4:	91 50       	subi	r25, 0x01	; 1
    4bd6:	50 40       	sbci	r21, 0x00	; 0
    4bd8:	e6 95       	lsr	r30
    4bda:	00 1c       	adc	r0, r0
    4bdc:	ca f7       	brpl	.-14     	; 0x4bd0 <__divsf3_pse+0x2c>
    4bde:	2b d0       	rcall	.+86     	; 0x4c36 <__divsf3_pse+0x92>
    4be0:	fe 2f       	mov	r31, r30
    4be2:	29 d0       	rcall	.+82     	; 0x4c36 <__divsf3_pse+0x92>
    4be4:	66 0f       	add	r22, r22
    4be6:	77 1f       	adc	r23, r23
    4be8:	88 1f       	adc	r24, r24
    4bea:	bb 1f       	adc	r27, r27
    4bec:	26 17       	cp	r18, r22
    4bee:	37 07       	cpc	r19, r23
    4bf0:	48 07       	cpc	r20, r24
    4bf2:	ab 07       	cpc	r26, r27
    4bf4:	b0 e8       	ldi	r27, 0x80	; 128
    4bf6:	09 f0       	breq	.+2      	; 0x4bfa <__divsf3_pse+0x56>
    4bf8:	bb 0b       	sbc	r27, r27
    4bfa:	80 2d       	mov	r24, r0
    4bfc:	bf 01       	movw	r22, r30
    4bfe:	ff 27       	eor	r31, r31
    4c00:	93 58       	subi	r25, 0x83	; 131
    4c02:	5f 4f       	sbci	r21, 0xFF	; 255
    4c04:	3a f0       	brmi	.+14     	; 0x4c14 <__divsf3_pse+0x70>
    4c06:	9e 3f       	cpi	r25, 0xFE	; 254
    4c08:	51 05       	cpc	r21, r1
    4c0a:	78 f0       	brcs	.+30     	; 0x4c2a <__divsf3_pse+0x86>
    4c0c:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_inf>
    4c10:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_szero>
    4c14:	5f 3f       	cpi	r21, 0xFF	; 255
    4c16:	e4 f3       	brlt	.-8      	; 0x4c10 <__divsf3_pse+0x6c>
    4c18:	98 3e       	cpi	r25, 0xE8	; 232
    4c1a:	d4 f3       	brlt	.-12     	; 0x4c10 <__divsf3_pse+0x6c>
    4c1c:	86 95       	lsr	r24
    4c1e:	77 95       	ror	r23
    4c20:	67 95       	ror	r22
    4c22:	b7 95       	ror	r27
    4c24:	f7 95       	ror	r31
    4c26:	9f 5f       	subi	r25, 0xFF	; 255
    4c28:	c9 f7       	brne	.-14     	; 0x4c1c <__divsf3_pse+0x78>
    4c2a:	88 0f       	add	r24, r24
    4c2c:	91 1d       	adc	r25, r1
    4c2e:	96 95       	lsr	r25
    4c30:	87 95       	ror	r24
    4c32:	97 f9       	bld	r25, 7
    4c34:	08 95       	ret
    4c36:	e1 e0       	ldi	r30, 0x01	; 1
    4c38:	66 0f       	add	r22, r22
    4c3a:	77 1f       	adc	r23, r23
    4c3c:	88 1f       	adc	r24, r24
    4c3e:	bb 1f       	adc	r27, r27
    4c40:	62 17       	cp	r22, r18
    4c42:	73 07       	cpc	r23, r19
    4c44:	84 07       	cpc	r24, r20
    4c46:	ba 07       	cpc	r27, r26
    4c48:	20 f0       	brcs	.+8      	; 0x4c52 <__divsf3_pse+0xae>
    4c4a:	62 1b       	sub	r22, r18
    4c4c:	73 0b       	sbc	r23, r19
    4c4e:	84 0b       	sbc	r24, r20
    4c50:	ba 0b       	sbc	r27, r26
    4c52:	ee 1f       	adc	r30, r30
    4c54:	88 f7       	brcc	.-30     	; 0x4c38 <__divsf3_pse+0x94>
    4c56:	e0 95       	com	r30
    4c58:	08 95       	ret

00004c5a <__fixsfsi>:
    4c5a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__fixunssfsi>
    4c5e:	68 94       	set
    4c60:	b1 11       	cpse	r27, r1
    4c62:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_szero>
    4c66:	08 95       	ret

00004c68 <__fixunssfsi>:
    4c68:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__fp_splitA>
    4c6c:	88 f0       	brcs	.+34     	; 0x4c90 <__fixunssfsi+0x28>
    4c6e:	9f 57       	subi	r25, 0x7F	; 127
    4c70:	98 f0       	brcs	.+38     	; 0x4c98 <__fixunssfsi+0x30>
    4c72:	b9 2f       	mov	r27, r25
    4c74:	99 27       	eor	r25, r25
    4c76:	b7 51       	subi	r27, 0x17	; 23
    4c78:	b0 f0       	brcs	.+44     	; 0x4ca6 <__fixunssfsi+0x3e>
    4c7a:	e1 f0       	breq	.+56     	; 0x4cb4 <__fixunssfsi+0x4c>
    4c7c:	66 0f       	add	r22, r22
    4c7e:	77 1f       	adc	r23, r23
    4c80:	88 1f       	adc	r24, r24
    4c82:	99 1f       	adc	r25, r25
    4c84:	1a f0       	brmi	.+6      	; 0x4c8c <__fixunssfsi+0x24>
    4c86:	ba 95       	dec	r27
    4c88:	c9 f7       	brne	.-14     	; 0x4c7c <__fixunssfsi+0x14>
    4c8a:	14 c0       	rjmp	.+40     	; 0x4cb4 <__fixunssfsi+0x4c>
    4c8c:	b1 30       	cpi	r27, 0x01	; 1
    4c8e:	91 f0       	breq	.+36     	; 0x4cb4 <__fixunssfsi+0x4c>
    4c90:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__fp_zero>
    4c94:	b1 e0       	ldi	r27, 0x01	; 1
    4c96:	08 95       	ret
    4c98:	0c 94 0e 27 	jmp	0x4e1c	; 0x4e1c <__fp_zero>
    4c9c:	67 2f       	mov	r22, r23
    4c9e:	78 2f       	mov	r23, r24
    4ca0:	88 27       	eor	r24, r24
    4ca2:	b8 5f       	subi	r27, 0xF8	; 248
    4ca4:	39 f0       	breq	.+14     	; 0x4cb4 <__fixunssfsi+0x4c>
    4ca6:	b9 3f       	cpi	r27, 0xF9	; 249
    4ca8:	cc f3       	brlt	.-14     	; 0x4c9c <__fixunssfsi+0x34>
    4caa:	86 95       	lsr	r24
    4cac:	77 95       	ror	r23
    4cae:	67 95       	ror	r22
    4cb0:	b3 95       	inc	r27
    4cb2:	d9 f7       	brne	.-10     	; 0x4caa <__fixunssfsi+0x42>
    4cb4:	3e f4       	brtc	.+14     	; 0x4cc4 <__fixunssfsi+0x5c>
    4cb6:	90 95       	com	r25
    4cb8:	80 95       	com	r24
    4cba:	70 95       	com	r23
    4cbc:	61 95       	neg	r22
    4cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc4:	08 95       	ret

00004cc6 <__floatunsisf>:
    4cc6:	e8 94       	clt
    4cc8:	09 c0       	rjmp	.+18     	; 0x4cdc <__floatsisf+0x12>

00004cca <__floatsisf>:
    4cca:	97 fb       	bst	r25, 7
    4ccc:	3e f4       	brtc	.+14     	; 0x4cdc <__floatsisf+0x12>
    4cce:	90 95       	com	r25
    4cd0:	80 95       	com	r24
    4cd2:	70 95       	com	r23
    4cd4:	61 95       	neg	r22
    4cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    4cda:	9f 4f       	sbci	r25, 0xFF	; 255
    4cdc:	99 23       	and	r25, r25
    4cde:	a9 f0       	breq	.+42     	; 0x4d0a <__floatsisf+0x40>
    4ce0:	f9 2f       	mov	r31, r25
    4ce2:	96 e9       	ldi	r25, 0x96	; 150
    4ce4:	bb 27       	eor	r27, r27
    4ce6:	93 95       	inc	r25
    4ce8:	f6 95       	lsr	r31
    4cea:	87 95       	ror	r24
    4cec:	77 95       	ror	r23
    4cee:	67 95       	ror	r22
    4cf0:	b7 95       	ror	r27
    4cf2:	f1 11       	cpse	r31, r1
    4cf4:	f8 cf       	rjmp	.-16     	; 0x4ce6 <__floatsisf+0x1c>
    4cf6:	fa f4       	brpl	.+62     	; 0x4d36 <__floatsisf+0x6c>
    4cf8:	bb 0f       	add	r27, r27
    4cfa:	11 f4       	brne	.+4      	; 0x4d00 <__floatsisf+0x36>
    4cfc:	60 ff       	sbrs	r22, 0
    4cfe:	1b c0       	rjmp	.+54     	; 0x4d36 <__floatsisf+0x6c>
    4d00:	6f 5f       	subi	r22, 0xFF	; 255
    4d02:	7f 4f       	sbci	r23, 0xFF	; 255
    4d04:	8f 4f       	sbci	r24, 0xFF	; 255
    4d06:	9f 4f       	sbci	r25, 0xFF	; 255
    4d08:	16 c0       	rjmp	.+44     	; 0x4d36 <__floatsisf+0x6c>
    4d0a:	88 23       	and	r24, r24
    4d0c:	11 f0       	breq	.+4      	; 0x4d12 <__floatsisf+0x48>
    4d0e:	96 e9       	ldi	r25, 0x96	; 150
    4d10:	11 c0       	rjmp	.+34     	; 0x4d34 <__floatsisf+0x6a>
    4d12:	77 23       	and	r23, r23
    4d14:	21 f0       	breq	.+8      	; 0x4d1e <__floatsisf+0x54>
    4d16:	9e e8       	ldi	r25, 0x8E	; 142
    4d18:	87 2f       	mov	r24, r23
    4d1a:	76 2f       	mov	r23, r22
    4d1c:	05 c0       	rjmp	.+10     	; 0x4d28 <__floatsisf+0x5e>
    4d1e:	66 23       	and	r22, r22
    4d20:	71 f0       	breq	.+28     	; 0x4d3e <__floatsisf+0x74>
    4d22:	96 e8       	ldi	r25, 0x86	; 134
    4d24:	86 2f       	mov	r24, r22
    4d26:	70 e0       	ldi	r23, 0x00	; 0
    4d28:	60 e0       	ldi	r22, 0x00	; 0
    4d2a:	2a f0       	brmi	.+10     	; 0x4d36 <__floatsisf+0x6c>
    4d2c:	9a 95       	dec	r25
    4d2e:	66 0f       	add	r22, r22
    4d30:	77 1f       	adc	r23, r23
    4d32:	88 1f       	adc	r24, r24
    4d34:	da f7       	brpl	.-10     	; 0x4d2c <__floatsisf+0x62>
    4d36:	88 0f       	add	r24, r24
    4d38:	96 95       	lsr	r25
    4d3a:	87 95       	ror	r24
    4d3c:	97 f9       	bld	r25, 7
    4d3e:	08 95       	ret

00004d40 <__fp_cmp>:
    4d40:	99 0f       	add	r25, r25
    4d42:	00 08       	sbc	r0, r0
    4d44:	55 0f       	add	r21, r21
    4d46:	aa 0b       	sbc	r26, r26
    4d48:	e0 e8       	ldi	r30, 0x80	; 128
    4d4a:	fe ef       	ldi	r31, 0xFE	; 254
    4d4c:	16 16       	cp	r1, r22
    4d4e:	17 06       	cpc	r1, r23
    4d50:	e8 07       	cpc	r30, r24
    4d52:	f9 07       	cpc	r31, r25
    4d54:	c0 f0       	brcs	.+48     	; 0x4d86 <__fp_cmp+0x46>
    4d56:	12 16       	cp	r1, r18
    4d58:	13 06       	cpc	r1, r19
    4d5a:	e4 07       	cpc	r30, r20
    4d5c:	f5 07       	cpc	r31, r21
    4d5e:	98 f0       	brcs	.+38     	; 0x4d86 <__fp_cmp+0x46>
    4d60:	62 1b       	sub	r22, r18
    4d62:	73 0b       	sbc	r23, r19
    4d64:	84 0b       	sbc	r24, r20
    4d66:	95 0b       	sbc	r25, r21
    4d68:	39 f4       	brne	.+14     	; 0x4d78 <__fp_cmp+0x38>
    4d6a:	0a 26       	eor	r0, r26
    4d6c:	61 f0       	breq	.+24     	; 0x4d86 <__fp_cmp+0x46>
    4d6e:	23 2b       	or	r18, r19
    4d70:	24 2b       	or	r18, r20
    4d72:	25 2b       	or	r18, r21
    4d74:	21 f4       	brne	.+8      	; 0x4d7e <__fp_cmp+0x3e>
    4d76:	08 95       	ret
    4d78:	0a 26       	eor	r0, r26
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <__fp_cmp+0x3e>
    4d7c:	a1 40       	sbci	r26, 0x01	; 1
    4d7e:	a6 95       	lsr	r26
    4d80:	8f ef       	ldi	r24, 0xFF	; 255
    4d82:	81 1d       	adc	r24, r1
    4d84:	81 1d       	adc	r24, r1
    4d86:	08 95       	ret

00004d88 <__fp_inf>:
    4d88:	97 f9       	bld	r25, 7
    4d8a:	9f 67       	ori	r25, 0x7F	; 127
    4d8c:	80 e8       	ldi	r24, 0x80	; 128
    4d8e:	70 e0       	ldi	r23, 0x00	; 0
    4d90:	60 e0       	ldi	r22, 0x00	; 0
    4d92:	08 95       	ret

00004d94 <__fp_nan>:
    4d94:	9f ef       	ldi	r25, 0xFF	; 255
    4d96:	80 ec       	ldi	r24, 0xC0	; 192
    4d98:	08 95       	ret

00004d9a <__fp_pscA>:
    4d9a:	00 24       	eor	r0, r0
    4d9c:	0a 94       	dec	r0
    4d9e:	16 16       	cp	r1, r22
    4da0:	17 06       	cpc	r1, r23
    4da2:	18 06       	cpc	r1, r24
    4da4:	09 06       	cpc	r0, r25
    4da6:	08 95       	ret

00004da8 <__fp_pscB>:
    4da8:	00 24       	eor	r0, r0
    4daa:	0a 94       	dec	r0
    4dac:	12 16       	cp	r1, r18
    4dae:	13 06       	cpc	r1, r19
    4db0:	14 06       	cpc	r1, r20
    4db2:	05 06       	cpc	r0, r21
    4db4:	08 95       	ret

00004db6 <__fp_round>:
    4db6:	09 2e       	mov	r0, r25
    4db8:	03 94       	inc	r0
    4dba:	00 0c       	add	r0, r0
    4dbc:	11 f4       	brne	.+4      	; 0x4dc2 <__fp_round+0xc>
    4dbe:	88 23       	and	r24, r24
    4dc0:	52 f0       	brmi	.+20     	; 0x4dd6 <__fp_round+0x20>
    4dc2:	bb 0f       	add	r27, r27
    4dc4:	40 f4       	brcc	.+16     	; 0x4dd6 <__fp_round+0x20>
    4dc6:	bf 2b       	or	r27, r31
    4dc8:	11 f4       	brne	.+4      	; 0x4dce <__fp_round+0x18>
    4dca:	60 ff       	sbrs	r22, 0
    4dcc:	04 c0       	rjmp	.+8      	; 0x4dd6 <__fp_round+0x20>
    4dce:	6f 5f       	subi	r22, 0xFF	; 255
    4dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    4dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4dd6:	08 95       	ret

00004dd8 <__fp_split3>:
    4dd8:	57 fd       	sbrc	r21, 7
    4dda:	90 58       	subi	r25, 0x80	; 128
    4ddc:	44 0f       	add	r20, r20
    4dde:	55 1f       	adc	r21, r21
    4de0:	59 f0       	breq	.+22     	; 0x4df8 <__fp_splitA+0x10>
    4de2:	5f 3f       	cpi	r21, 0xFF	; 255
    4de4:	71 f0       	breq	.+28     	; 0x4e02 <__fp_splitA+0x1a>
    4de6:	47 95       	ror	r20

00004de8 <__fp_splitA>:
    4de8:	88 0f       	add	r24, r24
    4dea:	97 fb       	bst	r25, 7
    4dec:	99 1f       	adc	r25, r25
    4dee:	61 f0       	breq	.+24     	; 0x4e08 <__fp_splitA+0x20>
    4df0:	9f 3f       	cpi	r25, 0xFF	; 255
    4df2:	79 f0       	breq	.+30     	; 0x4e12 <__fp_splitA+0x2a>
    4df4:	87 95       	ror	r24
    4df6:	08 95       	ret
    4df8:	12 16       	cp	r1, r18
    4dfa:	13 06       	cpc	r1, r19
    4dfc:	14 06       	cpc	r1, r20
    4dfe:	55 1f       	adc	r21, r21
    4e00:	f2 cf       	rjmp	.-28     	; 0x4de6 <__fp_split3+0xe>
    4e02:	46 95       	lsr	r20
    4e04:	f1 df       	rcall	.-30     	; 0x4de8 <__fp_splitA>
    4e06:	08 c0       	rjmp	.+16     	; 0x4e18 <__fp_splitA+0x30>
    4e08:	16 16       	cp	r1, r22
    4e0a:	17 06       	cpc	r1, r23
    4e0c:	18 06       	cpc	r1, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	f1 cf       	rjmp	.-30     	; 0x4df4 <__fp_splitA+0xc>
    4e12:	86 95       	lsr	r24
    4e14:	71 05       	cpc	r23, r1
    4e16:	61 05       	cpc	r22, r1
    4e18:	08 94       	sec
    4e1a:	08 95       	ret

00004e1c <__fp_zero>:
    4e1c:	e8 94       	clt

00004e1e <__fp_szero>:
    4e1e:	bb 27       	eor	r27, r27
    4e20:	66 27       	eor	r22, r22
    4e22:	77 27       	eor	r23, r23
    4e24:	cb 01       	movw	r24, r22
    4e26:	97 f9       	bld	r25, 7
    4e28:	08 95       	ret

00004e2a <__gesf2>:
    4e2a:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__fp_cmp>
    4e2e:	08 f4       	brcc	.+2      	; 0x4e32 <__gesf2+0x8>
    4e30:	8f ef       	ldi	r24, 0xFF	; 255
    4e32:	08 95       	ret

00004e34 <__mulsf3>:
    4e34:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3x>
    4e38:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__fp_round>
    4e3c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__fp_pscA>
    4e40:	38 f0       	brcs	.+14     	; 0x4e50 <__mulsf3+0x1c>
    4e42:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__fp_pscB>
    4e46:	20 f0       	brcs	.+8      	; 0x4e50 <__mulsf3+0x1c>
    4e48:	95 23       	and	r25, r21
    4e4a:	11 f0       	breq	.+4      	; 0x4e50 <__mulsf3+0x1c>
    4e4c:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_inf>
    4e50:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__fp_nan>
    4e54:	11 24       	eor	r1, r1
    4e56:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_szero>

00004e5a <__mulsf3x>:
    4e5a:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__fp_split3>
    4e5e:	70 f3       	brcs	.-36     	; 0x4e3c <__mulsf3+0x8>

00004e60 <__mulsf3_pse>:
    4e60:	95 9f       	mul	r25, r21
    4e62:	c1 f3       	breq	.-16     	; 0x4e54 <__mulsf3+0x20>
    4e64:	95 0f       	add	r25, r21
    4e66:	50 e0       	ldi	r21, 0x00	; 0
    4e68:	55 1f       	adc	r21, r21
    4e6a:	62 9f       	mul	r22, r18
    4e6c:	f0 01       	movw	r30, r0
    4e6e:	72 9f       	mul	r23, r18
    4e70:	bb 27       	eor	r27, r27
    4e72:	f0 0d       	add	r31, r0
    4e74:	b1 1d       	adc	r27, r1
    4e76:	63 9f       	mul	r22, r19
    4e78:	aa 27       	eor	r26, r26
    4e7a:	f0 0d       	add	r31, r0
    4e7c:	b1 1d       	adc	r27, r1
    4e7e:	aa 1f       	adc	r26, r26
    4e80:	64 9f       	mul	r22, r20
    4e82:	66 27       	eor	r22, r22
    4e84:	b0 0d       	add	r27, r0
    4e86:	a1 1d       	adc	r26, r1
    4e88:	66 1f       	adc	r22, r22
    4e8a:	82 9f       	mul	r24, r18
    4e8c:	22 27       	eor	r18, r18
    4e8e:	b0 0d       	add	r27, r0
    4e90:	a1 1d       	adc	r26, r1
    4e92:	62 1f       	adc	r22, r18
    4e94:	73 9f       	mul	r23, r19
    4e96:	b0 0d       	add	r27, r0
    4e98:	a1 1d       	adc	r26, r1
    4e9a:	62 1f       	adc	r22, r18
    4e9c:	83 9f       	mul	r24, r19
    4e9e:	a0 0d       	add	r26, r0
    4ea0:	61 1d       	adc	r22, r1
    4ea2:	22 1f       	adc	r18, r18
    4ea4:	74 9f       	mul	r23, r20
    4ea6:	33 27       	eor	r19, r19
    4ea8:	a0 0d       	add	r26, r0
    4eaa:	61 1d       	adc	r22, r1
    4eac:	23 1f       	adc	r18, r19
    4eae:	84 9f       	mul	r24, r20
    4eb0:	60 0d       	add	r22, r0
    4eb2:	21 1d       	adc	r18, r1
    4eb4:	82 2f       	mov	r24, r18
    4eb6:	76 2f       	mov	r23, r22
    4eb8:	6a 2f       	mov	r22, r26
    4eba:	11 24       	eor	r1, r1
    4ebc:	9f 57       	subi	r25, 0x7F	; 127
    4ebe:	50 40       	sbci	r21, 0x00	; 0
    4ec0:	9a f0       	brmi	.+38     	; 0x4ee8 <__mulsf3_pse+0x88>
    4ec2:	f1 f0       	breq	.+60     	; 0x4f00 <__mulsf3_pse+0xa0>
    4ec4:	88 23       	and	r24, r24
    4ec6:	4a f0       	brmi	.+18     	; 0x4eda <__mulsf3_pse+0x7a>
    4ec8:	ee 0f       	add	r30, r30
    4eca:	ff 1f       	adc	r31, r31
    4ecc:	bb 1f       	adc	r27, r27
    4ece:	66 1f       	adc	r22, r22
    4ed0:	77 1f       	adc	r23, r23
    4ed2:	88 1f       	adc	r24, r24
    4ed4:	91 50       	subi	r25, 0x01	; 1
    4ed6:	50 40       	sbci	r21, 0x00	; 0
    4ed8:	a9 f7       	brne	.-22     	; 0x4ec4 <__mulsf3_pse+0x64>
    4eda:	9e 3f       	cpi	r25, 0xFE	; 254
    4edc:	51 05       	cpc	r21, r1
    4ede:	80 f0       	brcs	.+32     	; 0x4f00 <__mulsf3_pse+0xa0>
    4ee0:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__fp_inf>
    4ee4:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_szero>
    4ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    4eea:	e4 f3       	brlt	.-8      	; 0x4ee4 <__mulsf3_pse+0x84>
    4eec:	98 3e       	cpi	r25, 0xE8	; 232
    4eee:	d4 f3       	brlt	.-12     	; 0x4ee4 <__mulsf3_pse+0x84>
    4ef0:	86 95       	lsr	r24
    4ef2:	77 95       	ror	r23
    4ef4:	67 95       	ror	r22
    4ef6:	b7 95       	ror	r27
    4ef8:	f7 95       	ror	r31
    4efa:	e7 95       	ror	r30
    4efc:	9f 5f       	subi	r25, 0xFF	; 255
    4efe:	c1 f7       	brne	.-16     	; 0x4ef0 <__mulsf3_pse+0x90>
    4f00:	fe 2b       	or	r31, r30
    4f02:	88 0f       	add	r24, r24
    4f04:	91 1d       	adc	r25, r1
    4f06:	96 95       	lsr	r25
    4f08:	87 95       	ror	r24
    4f0a:	97 f9       	bld	r25, 7
    4f0c:	08 95       	ret

00004f0e <__udivmodhi4>:
    4f0e:	aa 1b       	sub	r26, r26
    4f10:	bb 1b       	sub	r27, r27
    4f12:	51 e1       	ldi	r21, 0x11	; 17
    4f14:	07 c0       	rjmp	.+14     	; 0x4f24 <__udivmodhi4_ep>

00004f16 <__udivmodhi4_loop>:
    4f16:	aa 1f       	adc	r26, r26
    4f18:	bb 1f       	adc	r27, r27
    4f1a:	a6 17       	cp	r26, r22
    4f1c:	b7 07       	cpc	r27, r23
    4f1e:	10 f0       	brcs	.+4      	; 0x4f24 <__udivmodhi4_ep>
    4f20:	a6 1b       	sub	r26, r22
    4f22:	b7 0b       	sbc	r27, r23

00004f24 <__udivmodhi4_ep>:
    4f24:	88 1f       	adc	r24, r24
    4f26:	99 1f       	adc	r25, r25
    4f28:	5a 95       	dec	r21
    4f2a:	a9 f7       	brne	.-22     	; 0x4f16 <__udivmodhi4_loop>
    4f2c:	80 95       	com	r24
    4f2e:	90 95       	com	r25
    4f30:	bc 01       	movw	r22, r24
    4f32:	cd 01       	movw	r24, r26
    4f34:	08 95       	ret

00004f36 <__divmodhi4>:
    4f36:	97 fb       	bst	r25, 7
    4f38:	07 2e       	mov	r0, r23
    4f3a:	16 f4       	brtc	.+4      	; 0x4f40 <__divmodhi4+0xa>
    4f3c:	00 94       	com	r0
    4f3e:	07 d0       	rcall	.+14     	; 0x4f4e <__divmodhi4_neg1>
    4f40:	77 fd       	sbrc	r23, 7
    4f42:	09 d0       	rcall	.+18     	; 0x4f56 <__divmodhi4_neg2>
    4f44:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <__udivmodhi4>
    4f48:	07 fc       	sbrc	r0, 7
    4f4a:	05 d0       	rcall	.+10     	; 0x4f56 <__divmodhi4_neg2>
    4f4c:	3e f4       	brtc	.+14     	; 0x4f5c <__divmodhi4_exit>

00004f4e <__divmodhi4_neg1>:
    4f4e:	90 95       	com	r25
    4f50:	81 95       	neg	r24
    4f52:	9f 4f       	sbci	r25, 0xFF	; 255
    4f54:	08 95       	ret

00004f56 <__divmodhi4_neg2>:
    4f56:	70 95       	com	r23
    4f58:	61 95       	neg	r22
    4f5a:	7f 4f       	sbci	r23, 0xFF	; 255

00004f5c <__divmodhi4_exit>:
    4f5c:	08 95       	ret

00004f5e <__udivmodsi4>:
    4f5e:	a1 e2       	ldi	r26, 0x21	; 33
    4f60:	1a 2e       	mov	r1, r26
    4f62:	aa 1b       	sub	r26, r26
    4f64:	bb 1b       	sub	r27, r27
    4f66:	fd 01       	movw	r30, r26
    4f68:	0d c0       	rjmp	.+26     	; 0x4f84 <__udivmodsi4_ep>

00004f6a <__udivmodsi4_loop>:
    4f6a:	aa 1f       	adc	r26, r26
    4f6c:	bb 1f       	adc	r27, r27
    4f6e:	ee 1f       	adc	r30, r30
    4f70:	ff 1f       	adc	r31, r31
    4f72:	a2 17       	cp	r26, r18
    4f74:	b3 07       	cpc	r27, r19
    4f76:	e4 07       	cpc	r30, r20
    4f78:	f5 07       	cpc	r31, r21
    4f7a:	20 f0       	brcs	.+8      	; 0x4f84 <__udivmodsi4_ep>
    4f7c:	a2 1b       	sub	r26, r18
    4f7e:	b3 0b       	sbc	r27, r19
    4f80:	e4 0b       	sbc	r30, r20
    4f82:	f5 0b       	sbc	r31, r21

00004f84 <__udivmodsi4_ep>:
    4f84:	66 1f       	adc	r22, r22
    4f86:	77 1f       	adc	r23, r23
    4f88:	88 1f       	adc	r24, r24
    4f8a:	99 1f       	adc	r25, r25
    4f8c:	1a 94       	dec	r1
    4f8e:	69 f7       	brne	.-38     	; 0x4f6a <__udivmodsi4_loop>
    4f90:	60 95       	com	r22
    4f92:	70 95       	com	r23
    4f94:	80 95       	com	r24
    4f96:	90 95       	com	r25
    4f98:	9b 01       	movw	r18, r22
    4f9a:	ac 01       	movw	r20, r24
    4f9c:	bd 01       	movw	r22, r26
    4f9e:	cf 01       	movw	r24, r30
    4fa0:	08 95       	ret

00004fa2 <__tablejump2__>:
    4fa2:	ee 0f       	add	r30, r30
    4fa4:	ff 1f       	adc	r31, r31
    4fa6:	05 90       	lpm	r0, Z+
    4fa8:	f4 91       	lpm	r31, Z
    4faa:	e0 2d       	mov	r30, r0
    4fac:	09 94       	ijmp

00004fae <__umulhisi3>:
    4fae:	a2 9f       	mul	r26, r18
    4fb0:	b0 01       	movw	r22, r0
    4fb2:	b3 9f       	mul	r27, r19
    4fb4:	c0 01       	movw	r24, r0
    4fb6:	a3 9f       	mul	r26, r19
    4fb8:	70 0d       	add	r23, r0
    4fba:	81 1d       	adc	r24, r1
    4fbc:	11 24       	eor	r1, r1
    4fbe:	91 1d       	adc	r25, r1
    4fc0:	b2 9f       	mul	r27, r18
    4fc2:	70 0d       	add	r23, r0
    4fc4:	81 1d       	adc	r24, r1
    4fc6:	11 24       	eor	r1, r1
    4fc8:	91 1d       	adc	r25, r1
    4fca:	08 95       	ret

00004fcc <malloc>:
    4fcc:	0f 93       	push	r16
    4fce:	1f 93       	push	r17
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	82 30       	cpi	r24, 0x02	; 2
    4fd6:	91 05       	cpc	r25, r1
    4fd8:	10 f4       	brcc	.+4      	; 0x4fde <malloc+0x12>
    4fda:	82 e0       	ldi	r24, 0x02	; 2
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	e0 91 02 07 	lds	r30, 0x0702	; 0x800702 <__flp>
    4fe2:	f0 91 03 07 	lds	r31, 0x0703	; 0x800703 <__flp+0x1>
    4fe6:	20 e0       	ldi	r18, 0x00	; 0
    4fe8:	30 e0       	ldi	r19, 0x00	; 0
    4fea:	a0 e0       	ldi	r26, 0x00	; 0
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	30 97       	sbiw	r30, 0x00	; 0
    4ff0:	19 f1       	breq	.+70     	; 0x5038 <malloc+0x6c>
    4ff2:	40 81       	ld	r20, Z
    4ff4:	51 81       	ldd	r21, Z+1	; 0x01
    4ff6:	02 81       	ldd	r16, Z+2	; 0x02
    4ff8:	13 81       	ldd	r17, Z+3	; 0x03
    4ffa:	48 17       	cp	r20, r24
    4ffc:	59 07       	cpc	r21, r25
    4ffe:	c8 f0       	brcs	.+50     	; 0x5032 <malloc+0x66>
    5000:	84 17       	cp	r24, r20
    5002:	95 07       	cpc	r25, r21
    5004:	69 f4       	brne	.+26     	; 0x5020 <malloc+0x54>
    5006:	10 97       	sbiw	r26, 0x00	; 0
    5008:	31 f0       	breq	.+12     	; 0x5016 <malloc+0x4a>
    500a:	12 96       	adiw	r26, 0x02	; 2
    500c:	0c 93       	st	X, r16
    500e:	12 97       	sbiw	r26, 0x02	; 2
    5010:	13 96       	adiw	r26, 0x03	; 3
    5012:	1c 93       	st	X, r17
    5014:	27 c0       	rjmp	.+78     	; 0x5064 <malloc+0x98>
    5016:	00 93 02 07 	sts	0x0702, r16	; 0x800702 <__flp>
    501a:	10 93 03 07 	sts	0x0703, r17	; 0x800703 <__flp+0x1>
    501e:	22 c0       	rjmp	.+68     	; 0x5064 <malloc+0x98>
    5020:	21 15       	cp	r18, r1
    5022:	31 05       	cpc	r19, r1
    5024:	19 f0       	breq	.+6      	; 0x502c <malloc+0x60>
    5026:	42 17       	cp	r20, r18
    5028:	53 07       	cpc	r21, r19
    502a:	18 f4       	brcc	.+6      	; 0x5032 <malloc+0x66>
    502c:	9a 01       	movw	r18, r20
    502e:	bd 01       	movw	r22, r26
    5030:	ef 01       	movw	r28, r30
    5032:	df 01       	movw	r26, r30
    5034:	f8 01       	movw	r30, r16
    5036:	db cf       	rjmp	.-74     	; 0x4fee <malloc+0x22>
    5038:	21 15       	cp	r18, r1
    503a:	31 05       	cpc	r19, r1
    503c:	f9 f0       	breq	.+62     	; 0x507c <malloc+0xb0>
    503e:	28 1b       	sub	r18, r24
    5040:	39 0b       	sbc	r19, r25
    5042:	24 30       	cpi	r18, 0x04	; 4
    5044:	31 05       	cpc	r19, r1
    5046:	80 f4       	brcc	.+32     	; 0x5068 <malloc+0x9c>
    5048:	8a 81       	ldd	r24, Y+2	; 0x02
    504a:	9b 81       	ldd	r25, Y+3	; 0x03
    504c:	61 15       	cp	r22, r1
    504e:	71 05       	cpc	r23, r1
    5050:	21 f0       	breq	.+8      	; 0x505a <malloc+0x8e>
    5052:	fb 01       	movw	r30, r22
    5054:	93 83       	std	Z+3, r25	; 0x03
    5056:	82 83       	std	Z+2, r24	; 0x02
    5058:	04 c0       	rjmp	.+8      	; 0x5062 <malloc+0x96>
    505a:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <__flp+0x1>
    505e:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__flp>
    5062:	fe 01       	movw	r30, r28
    5064:	32 96       	adiw	r30, 0x02	; 2
    5066:	44 c0       	rjmp	.+136    	; 0x50f0 <malloc+0x124>
    5068:	fe 01       	movw	r30, r28
    506a:	e2 0f       	add	r30, r18
    506c:	f3 1f       	adc	r31, r19
    506e:	81 93       	st	Z+, r24
    5070:	91 93       	st	Z+, r25
    5072:	22 50       	subi	r18, 0x02	; 2
    5074:	31 09       	sbc	r19, r1
    5076:	39 83       	std	Y+1, r19	; 0x01
    5078:	28 83       	st	Y, r18
    507a:	3a c0       	rjmp	.+116    	; 0x50f0 <malloc+0x124>
    507c:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <__brkval>
    5080:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <__brkval+0x1>
    5084:	23 2b       	or	r18, r19
    5086:	41 f4       	brne	.+16     	; 0x5098 <malloc+0xcc>
    5088:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    508c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    5090:	30 93 01 07 	sts	0x0701, r19	; 0x800701 <__brkval+0x1>
    5094:	20 93 00 07 	sts	0x0700, r18	; 0x800700 <__brkval>
    5098:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    509c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    50a0:	21 15       	cp	r18, r1
    50a2:	31 05       	cpc	r19, r1
    50a4:	41 f4       	brne	.+16     	; 0x50b6 <malloc+0xea>
    50a6:	2d b7       	in	r18, 0x3d	; 61
    50a8:	3e b7       	in	r19, 0x3e	; 62
    50aa:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    50ae:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    50b2:	24 1b       	sub	r18, r20
    50b4:	35 0b       	sbc	r19, r21
    50b6:	e0 91 00 07 	lds	r30, 0x0700	; 0x800700 <__brkval>
    50ba:	f0 91 01 07 	lds	r31, 0x0701	; 0x800701 <__brkval+0x1>
    50be:	e2 17       	cp	r30, r18
    50c0:	f3 07       	cpc	r31, r19
    50c2:	a0 f4       	brcc	.+40     	; 0x50ec <malloc+0x120>
    50c4:	2e 1b       	sub	r18, r30
    50c6:	3f 0b       	sbc	r19, r31
    50c8:	28 17       	cp	r18, r24
    50ca:	39 07       	cpc	r19, r25
    50cc:	78 f0       	brcs	.+30     	; 0x50ec <malloc+0x120>
    50ce:	ac 01       	movw	r20, r24
    50d0:	4e 5f       	subi	r20, 0xFE	; 254
    50d2:	5f 4f       	sbci	r21, 0xFF	; 255
    50d4:	24 17       	cp	r18, r20
    50d6:	35 07       	cpc	r19, r21
    50d8:	48 f0       	brcs	.+18     	; 0x50ec <malloc+0x120>
    50da:	4e 0f       	add	r20, r30
    50dc:	5f 1f       	adc	r21, r31
    50de:	50 93 01 07 	sts	0x0701, r21	; 0x800701 <__brkval+0x1>
    50e2:	40 93 00 07 	sts	0x0700, r20	; 0x800700 <__brkval>
    50e6:	81 93       	st	Z+, r24
    50e8:	91 93       	st	Z+, r25
    50ea:	02 c0       	rjmp	.+4      	; 0x50f0 <malloc+0x124>
    50ec:	e0 e0       	ldi	r30, 0x00	; 0
    50ee:	f0 e0       	ldi	r31, 0x00	; 0
    50f0:	cf 01       	movw	r24, r30
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	08 95       	ret

000050fc <free>:
    50fc:	cf 93       	push	r28
    50fe:	df 93       	push	r29
    5100:	00 97       	sbiw	r24, 0x00	; 0
    5102:	09 f4       	brne	.+2      	; 0x5106 <free+0xa>
    5104:	81 c0       	rjmp	.+258    	; 0x5208 <free+0x10c>
    5106:	fc 01       	movw	r30, r24
    5108:	32 97       	sbiw	r30, 0x02	; 2
    510a:	13 82       	std	Z+3, r1	; 0x03
    510c:	12 82       	std	Z+2, r1	; 0x02
    510e:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <__flp>
    5112:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <__flp+0x1>
    5116:	10 97       	sbiw	r26, 0x00	; 0
    5118:	81 f4       	brne	.+32     	; 0x513a <free+0x3e>
    511a:	20 81       	ld	r18, Z
    511c:	31 81       	ldd	r19, Z+1	; 0x01
    511e:	82 0f       	add	r24, r18
    5120:	93 1f       	adc	r25, r19
    5122:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <__brkval>
    5126:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <__brkval+0x1>
    512a:	28 17       	cp	r18, r24
    512c:	39 07       	cpc	r19, r25
    512e:	51 f5       	brne	.+84     	; 0x5184 <free+0x88>
    5130:	f0 93 01 07 	sts	0x0701, r31	; 0x800701 <__brkval+0x1>
    5134:	e0 93 00 07 	sts	0x0700, r30	; 0x800700 <__brkval>
    5138:	67 c0       	rjmp	.+206    	; 0x5208 <free+0x10c>
    513a:	ed 01       	movw	r28, r26
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	ce 17       	cp	r28, r30
    5142:	df 07       	cpc	r29, r31
    5144:	40 f4       	brcc	.+16     	; 0x5156 <free+0x5a>
    5146:	4a 81       	ldd	r20, Y+2	; 0x02
    5148:	5b 81       	ldd	r21, Y+3	; 0x03
    514a:	9e 01       	movw	r18, r28
    514c:	41 15       	cp	r20, r1
    514e:	51 05       	cpc	r21, r1
    5150:	f1 f0       	breq	.+60     	; 0x518e <free+0x92>
    5152:	ea 01       	movw	r28, r20
    5154:	f5 cf       	rjmp	.-22     	; 0x5140 <free+0x44>
    5156:	d3 83       	std	Z+3, r29	; 0x03
    5158:	c2 83       	std	Z+2, r28	; 0x02
    515a:	40 81       	ld	r20, Z
    515c:	51 81       	ldd	r21, Z+1	; 0x01
    515e:	84 0f       	add	r24, r20
    5160:	95 1f       	adc	r25, r21
    5162:	c8 17       	cp	r28, r24
    5164:	d9 07       	cpc	r29, r25
    5166:	59 f4       	brne	.+22     	; 0x517e <free+0x82>
    5168:	88 81       	ld	r24, Y
    516a:	99 81       	ldd	r25, Y+1	; 0x01
    516c:	84 0f       	add	r24, r20
    516e:	95 1f       	adc	r25, r21
    5170:	02 96       	adiw	r24, 0x02	; 2
    5172:	91 83       	std	Z+1, r25	; 0x01
    5174:	80 83       	st	Z, r24
    5176:	8a 81       	ldd	r24, Y+2	; 0x02
    5178:	9b 81       	ldd	r25, Y+3	; 0x03
    517a:	93 83       	std	Z+3, r25	; 0x03
    517c:	82 83       	std	Z+2, r24	; 0x02
    517e:	21 15       	cp	r18, r1
    5180:	31 05       	cpc	r19, r1
    5182:	29 f4       	brne	.+10     	; 0x518e <free+0x92>
    5184:	f0 93 03 07 	sts	0x0703, r31	; 0x800703 <__flp+0x1>
    5188:	e0 93 02 07 	sts	0x0702, r30	; 0x800702 <__flp>
    518c:	3d c0       	rjmp	.+122    	; 0x5208 <free+0x10c>
    518e:	e9 01       	movw	r28, r18
    5190:	fb 83       	std	Y+3, r31	; 0x03
    5192:	ea 83       	std	Y+2, r30	; 0x02
    5194:	49 91       	ld	r20, Y+
    5196:	59 91       	ld	r21, Y+
    5198:	c4 0f       	add	r28, r20
    519a:	d5 1f       	adc	r29, r21
    519c:	ec 17       	cp	r30, r28
    519e:	fd 07       	cpc	r31, r29
    51a0:	61 f4       	brne	.+24     	; 0x51ba <free+0xbe>
    51a2:	80 81       	ld	r24, Z
    51a4:	91 81       	ldd	r25, Z+1	; 0x01
    51a6:	84 0f       	add	r24, r20
    51a8:	95 1f       	adc	r25, r21
    51aa:	02 96       	adiw	r24, 0x02	; 2
    51ac:	e9 01       	movw	r28, r18
    51ae:	99 83       	std	Y+1, r25	; 0x01
    51b0:	88 83       	st	Y, r24
    51b2:	82 81       	ldd	r24, Z+2	; 0x02
    51b4:	93 81       	ldd	r25, Z+3	; 0x03
    51b6:	9b 83       	std	Y+3, r25	; 0x03
    51b8:	8a 83       	std	Y+2, r24	; 0x02
    51ba:	e0 e0       	ldi	r30, 0x00	; 0
    51bc:	f0 e0       	ldi	r31, 0x00	; 0
    51be:	12 96       	adiw	r26, 0x02	; 2
    51c0:	8d 91       	ld	r24, X+
    51c2:	9c 91       	ld	r25, X
    51c4:	13 97       	sbiw	r26, 0x03	; 3
    51c6:	00 97       	sbiw	r24, 0x00	; 0
    51c8:	19 f0       	breq	.+6      	; 0x51d0 <free+0xd4>
    51ca:	fd 01       	movw	r30, r26
    51cc:	dc 01       	movw	r26, r24
    51ce:	f7 cf       	rjmp	.-18     	; 0x51be <free+0xc2>
    51d0:	8d 91       	ld	r24, X+
    51d2:	9c 91       	ld	r25, X
    51d4:	11 97       	sbiw	r26, 0x01	; 1
    51d6:	9d 01       	movw	r18, r26
    51d8:	2e 5f       	subi	r18, 0xFE	; 254
    51da:	3f 4f       	sbci	r19, 0xFF	; 255
    51dc:	82 0f       	add	r24, r18
    51de:	93 1f       	adc	r25, r19
    51e0:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <__brkval>
    51e4:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <__brkval+0x1>
    51e8:	28 17       	cp	r18, r24
    51ea:	39 07       	cpc	r19, r25
    51ec:	69 f4       	brne	.+26     	; 0x5208 <free+0x10c>
    51ee:	30 97       	sbiw	r30, 0x00	; 0
    51f0:	29 f4       	brne	.+10     	; 0x51fc <free+0x100>
    51f2:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <__flp+0x1>
    51f6:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <__flp>
    51fa:	02 c0       	rjmp	.+4      	; 0x5200 <free+0x104>
    51fc:	13 82       	std	Z+3, r1	; 0x03
    51fe:	12 82       	std	Z+2, r1	; 0x02
    5200:	b0 93 01 07 	sts	0x0701, r27	; 0x800701 <__brkval+0x1>
    5204:	a0 93 00 07 	sts	0x0700, r26	; 0x800700 <__brkval>
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	08 95       	ret

0000520e <eeprom_read_byte>:
    520e:	e1 99       	sbic	0x1c, 1	; 28
    5210:	fe cf       	rjmp	.-4      	; 0x520e <eeprom_read_byte>
    5212:	9f bb       	out	0x1f, r25	; 31
    5214:	8e bb       	out	0x1e, r24	; 30
    5216:	e0 9a       	sbi	0x1c, 0	; 28
    5218:	99 27       	eor	r25, r25
    521a:	8d b3       	in	r24, 0x1d	; 29
    521c:	08 95       	ret

0000521e <eeprom_read_dword>:
    521e:	a6 e1       	ldi	r26, 0x16	; 22
    5220:	b0 e0       	ldi	r27, 0x00	; 0
    5222:	44 e0       	ldi	r20, 0x04	; 4
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	0c 94 4d 29 	jmp	0x529a	; 0x529a <eeprom_read_blraw>

0000522a <eeprom_read_word>:
    522a:	a8 e1       	ldi	r26, 0x18	; 24
    522c:	b0 e0       	ldi	r27, 0x00	; 0
    522e:	42 e0       	ldi	r20, 0x02	; 2
    5230:	50 e0       	ldi	r21, 0x00	; 0
    5232:	0c 94 4d 29 	jmp	0x529a	; 0x529a <eeprom_read_blraw>

00005236 <eeprom_update_byte>:
    5236:	26 2f       	mov	r18, r22

00005238 <eeprom_update_r18>:
    5238:	e1 99       	sbic	0x1c, 1	; 28
    523a:	fe cf       	rjmp	.-4      	; 0x5238 <eeprom_update_r18>
    523c:	9f bb       	out	0x1f, r25	; 31
    523e:	8e bb       	out	0x1e, r24	; 30
    5240:	e0 9a       	sbi	0x1c, 0	; 28
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	0d b2       	in	r0, 0x1d	; 29
    5246:	02 16       	cp	r0, r18
    5248:	31 f0       	breq	.+12     	; 0x5256 <eeprom_update_r18+0x1e>
    524a:	2d bb       	out	0x1d, r18	; 29
    524c:	0f b6       	in	r0, 0x3f	; 63
    524e:	f8 94       	cli
    5250:	e2 9a       	sbi	0x1c, 2	; 28
    5252:	e1 9a       	sbi	0x1c, 1	; 28
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	08 95       	ret

00005258 <eeprom_update_dword>:
    5258:	03 96       	adiw	r24, 0x03	; 3
    525a:	27 2f       	mov	r18, r23
    525c:	0e 94 1c 29 	call	0x5238	; 0x5238 <eeprom_update_r18>
    5260:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_update_byte>
    5264:	25 2f       	mov	r18, r21
    5266:	0e 94 1c 29 	call	0x5238	; 0x5238 <eeprom_update_r18>
    526a:	24 2f       	mov	r18, r20
    526c:	0c 94 1c 29 	jmp	0x5238	; 0x5238 <eeprom_update_r18>

00005270 <eeprom_update_word>:
    5270:	01 96       	adiw	r24, 0x01	; 1
    5272:	27 2f       	mov	r18, r23
    5274:	0e 94 1c 29 	call	0x5238	; 0x5238 <eeprom_update_r18>
    5278:	0c 94 1b 29 	jmp	0x5236	; 0x5236 <eeprom_update_byte>

0000527c <eeprom_write_dword>:
    527c:	24 2f       	mov	r18, r20
    527e:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <eeprom_write_r18>
    5282:	25 2f       	mov	r18, r21
    5284:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <eeprom_write_r18>
    5288:	0c 94 46 29 	jmp	0x528c	; 0x528c <eeprom_write_word>

0000528c <eeprom_write_word>:
    528c:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <eeprom_write_byte>
    5290:	27 2f       	mov	r18, r23
    5292:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <eeprom_write_r18>

00005296 <eeprom_read_block>:
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22

0000529a <eeprom_read_blraw>:
    529a:	fc 01       	movw	r30, r24
    529c:	e1 99       	sbic	0x1c, 1	; 28
    529e:	fe cf       	rjmp	.-4      	; 0x529c <eeprom_read_blraw+0x2>
    52a0:	06 c0       	rjmp	.+12     	; 0x52ae <eeprom_read_blraw+0x14>
    52a2:	ff bb       	out	0x1f, r31	; 31
    52a4:	ee bb       	out	0x1e, r30	; 30
    52a6:	e0 9a       	sbi	0x1c, 0	; 28
    52a8:	31 96       	adiw	r30, 0x01	; 1
    52aa:	0d b2       	in	r0, 0x1d	; 29
    52ac:	0d 92       	st	X+, r0
    52ae:	41 50       	subi	r20, 0x01	; 1
    52b0:	50 40       	sbci	r21, 0x00	; 0
    52b2:	b8 f7       	brcc	.-18     	; 0x52a2 <eeprom_read_blraw+0x8>
    52b4:	08 95       	ret

000052b6 <eeprom_write_byte>:
    52b6:	26 2f       	mov	r18, r22

000052b8 <eeprom_write_r18>:
    52b8:	e1 99       	sbic	0x1c, 1	; 28
    52ba:	fe cf       	rjmp	.-4      	; 0x52b8 <eeprom_write_r18>
    52bc:	9f bb       	out	0x1f, r25	; 31
    52be:	8e bb       	out	0x1e, r24	; 30
    52c0:	2d bb       	out	0x1d, r18	; 29
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	e2 9a       	sbi	0x1c, 2	; 28
    52c8:	e1 9a       	sbi	0x1c, 1	; 28
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	01 96       	adiw	r24, 0x01	; 1
    52ce:	08 95       	ret

000052d0 <_exit>:
    52d0:	f8 94       	cli

000052d2 <__stop_program>:
    52d2:	ff cf       	rjmp	.-2      	; 0x52d2 <__stop_program>
