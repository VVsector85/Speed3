
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000527c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000214  00800060  0000527c  00005310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045b  00800274  00800274  00005524  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000055c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068e4  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e26  00000000  00000000  0000c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002950  00000000  00000000  0000d0da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c2c  00000000  00000000  0000fa2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fec  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005916  00000000  00000000  00011644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00016f5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_9>
      28:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	d1 18       	sub	r13, r1
      56:	f7 18       	sub	r15, r7
      58:	1d 19       	sub	r17, r13
      5a:	6c 19       	sub	r22, r12
      5c:	bb 19       	sub	r27, r11
      5e:	d7 19       	sub	r29, r7
      60:	f3 19       	sub	r31, r3
      62:	0f 1a       	sub	r0, r31
      64:	5e 1a       	sub	r5, r30
      66:	7e 1a       	sub	r7, r30
      68:	9a 1a       	sub	r9, r26
      6a:	b8 1a       	sub	r11, r24
      6c:	c4 1a       	sub	r12, r20
      6e:	c7 1a       	sub	r12, r23
      70:	89 1b       	sub	r24, r25
      72:	11 1c       	adc	r1, r1

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	12 e0       	ldi	r17, 0x02	; 2
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ec e7       	ldi	r30, 0x7C	; 124
    1556:	f2 e5       	ldi	r31, 0x52	; 82
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a4 37       	cpi	r26, 0x74	; 116
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	a4 e7       	ldi	r26, 0x74	; 116
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	af 3c       	cpi	r26, 0xCF	; 207
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <main>
    1578:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2939>:

	tempValue = currValue;
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	8c 91       	ld	r24, X
    1592:	13 97       	sbiw	r26, 0x03	; 3
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	8c 93       	st	X, r24
    159a:	12 97       	sbiw	r26, 0x02	; 2
    159c:	88 23       	and	r24, r24
    159e:	7c f1       	brlt	.+94     	; 0x15fe <new_value.2939+0x7e>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	0d 91       	ld	r16, X+
    15a2:	1c 91       	ld	r17, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	e0 e0       	ldi	r30, 0x00	; 0
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	68 2f       	mov	r22, r24
    15ac:	08 2e       	mov	r0, r24
    15ae:	00 0c       	add	r0, r0
    15b0:	77 0b       	sbc	r23, r23
    15b2:	98 01       	movw	r18, r16
    15b4:	26 0f       	add	r18, r22
    15b6:	37 1f       	adc	r19, r23
    15b8:	e9 01       	movw	r28, r18
    15ba:	28 81       	ld	r18, Y
    15bc:	02 2e       	mov	r0, r18
    15be:	00 0c       	add	r0, r0
    15c0:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	94 f4       	brge	.+36     	; 0x15ec <new_value.2939+0x6c>
    15c8:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15ca:	a9 01       	movw	r20, r18
    15cc:	44 0f       	add	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	24 0f       	add	r18, r20
    15de:	35 1f       	adc	r19, r21
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	49 2f       	mov	r20, r25
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	46 17       	cp	r20, r22
    15e8:	57 07       	cpc	r21, r23
    15ea:	7c f3       	brlt	.-34     	; 0x15ca <new_value.2939+0x4a>
				tenPower*=10;
			}
			newValue += tenPower;
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	81 50       	subi	r24, 0x01	; 1
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f2:	12 96       	adiw	r26, 0x02	; 2
    15f4:	8c 93       	st	X, r24
    15f6:	12 97       	sbiw	r26, 0x02	; 2
    15f8:	88 23       	and	r24, r24
    15fa:	bc f6       	brge	.-82     	; 0x15aa <new_value.2939+0x2a>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <new_value.2939+0x82>
	tempValue = currValue;
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
    15fe:	e0 e0       	ldi	r30, 0x00	; 0
    1600:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1602:	cf 01       	movw	r24, r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	3f 90       	pop	r3
    160e:	2f 90       	pop	r2
    1610:	08 95       	ret

00001612 <set_default_values>:
	0b00001000,
	0b00000100			
};

void set_default_values(){
	 lcdContrast = LCD_CONTRAST_DEFAULT;
    1612:	8a ef       	ldi	r24, 0xFA	; 250
    1614:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <lcdContrast>
	 magnetsOnWheel = MAGNETS_ON_WHEEL_DEFAULT;
    1618:	86 e0       	ldi	r24, 0x06	; 6
    161a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <magnetsOnWheel>
	 gearRatio = GEAR_RATIO_DEFAULT;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <gearRatio>
    162a:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <gearRatio+0x1>
    162e:	a0 93 b4 02 	sts	0x02B4, r26	; 0x8002b4 <gearRatio+0x2>
    1632:	b0 93 b5 02 	sts	0x02B5, r27	; 0x8002b5 <gearRatio+0x3>
	 wheelDiameter = WHEEL_DIAMETER_DEFAULT;	
    1636:	83 e3       	ldi	r24, 0x33	; 51
    1638:	93 e3       	ldi	r25, 0x33	; 51
    163a:	a3 e3       	ldi	r26, 0x33	; 51
    163c:	bf e3       	ldi	r27, 0x3F	; 63
    163e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <wheelDiameter>
    1642:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <wheelDiameter+0x1>
    1646:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <wheelDiameter+0x2>
    164a:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <wheelDiameter+0x3>
	 degreesPerKmh = DEGREES_PER_KMH_DEFAULT;
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	93 e3       	ldi	r25, 0x33	; 51
    1652:	a3 ea       	ldi	r26, 0xA3	; 163
    1654:	bf e3       	ldi	r27, 0x3F	; 63
    1656:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <degreesPerKmh>
    165a:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <degreesPerKmh+0x1>
    165e:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <degreesPerKmh+0x2>
    1662:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <degreesPerKmh+0x3>
	 pwmArrow = PWM_ARROW_DEFAULT;
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	94 e0       	ldi	r25, 0x04	; 4
    166a:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <pwmArrow+0x1>
    166e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <pwmArrow>
	 pwmDial = PWM_DIAL_DEFAULT;
    1672:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pwmDial+0x1>
    1676:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pwmDial>
	 scaleMax	= SCALE_MAX_DEFAULT;
    167a:	8e eb       	ldi	r24, 0xBE	; 190
    167c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <scaleMax>
	 stepInterval = STEP_INTERVAL_DEFAULT;
    1680:	86 e9       	ldi	r24, 0x96	; 150
    1682:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <stepInterval>
	 smSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
    1686:	80 e6       	ldi	r24, 0x60	; 96
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <smSteps+0x1>
    168e:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <smSteps>
	 stepMode = STEP_MODE_DEFAULT;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <stepMode>
    1698:	08 95       	ret

0000169a <step>:
	}
}

void step(uint8_t mode){
	uint8_t tempPort = 0;
	if (dir)
    169a:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <dir>
    169e:	99 23       	and	r25, r25
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <step+0x28>
	{
		phase++;
    16a2:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <phase>
    16a6:	9f 5f       	subi	r25, 0xFF	; 255
    16a8:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <phase>
		steps++;
    16ac:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <steps>
    16b0:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <steps+0x1>
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <steps+0x1>
    16bc:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <steps>
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <step+0x46>
	}
	else
	{
		phase--;
    16c2:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <phase>
    16c6:	91 50       	subi	r25, 0x01	; 1
    16c8:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <phase>
		steps--;
    16cc:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <steps>
    16d0:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <steps+0x1>
    16d4:	21 50       	subi	r18, 0x01	; 1
    16d6:	31 09       	sbc	r19, r1
    16d8:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <steps+0x1>
    16dc:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <steps>
	}
		 if (phase < 0) phase = 7;
    16e0:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <phase>
    16e4:	99 23       	and	r25, r25
    16e6:	24 f4       	brge	.+8      	; 0x16f0 <step+0x56>
    16e8:	97 e0       	ldi	r25, 0x07	; 7
    16ea:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <phase>
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <step+0x62>
	else if (phase > 7) phase = 0;
    16f0:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <phase>
    16f4:	98 30       	cpi	r25, 0x08	; 8
    16f6:	14 f0       	brlt	.+4      	; 0x16fc <step+0x62>
    16f8:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <phase>
	tempPort = PORTA&~0x0F;
    16fc:	9b b3       	in	r25, 0x1b	; 27
    16fe:	90 7f       	andi	r25, 0xF0	; 240
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[phase];
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	51 f4       	brne	.+20     	; 0x1718 <step+0x7e>
    1704:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <phase>
    1708:	0e 2e       	mov	r0, r30
    170a:	00 0c       	add	r0, r0
    170c:	ff 0b       	sbc	r31, r31
    170e:	ed 59       	subi	r30, 0x9D	; 157
    1710:	fd 4f       	sbci	r31, 0xFD	; 253
    1712:	80 81       	ld	r24, Z
    1714:	98 2b       	or	r25, r24
    1716:	0b c0       	rjmp	.+22     	; 0x172e <step+0x94>
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	49 f4       	brne	.+18     	; 0x172e <step+0x94>
    171c:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <phase>
    1720:	0e 2e       	mov	r0, r30
    1722:	00 0c       	add	r0, r0
    1724:	ff 0b       	sbc	r31, r31
    1726:	e5 59       	subi	r30, 0x95	; 149
    1728:	fd 4f       	sbci	r31, 0xFD	; 253
    172a:	80 81       	ld	r24, Z
    172c:	98 2b       	or	r25, r24
	PORTA = tempPort;
    172e:	9b bb       	out	0x1b, r25	; 27
    1730:	08 95       	ret

00001732 <__vector_10>:
		if(button_monitor()) menu_screen();
	}
	return 0;
}

ISR( TIMER0_COMP_vect ){
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	step(stepMode);
    1754:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <stepMode>
    1758:	0e 94 4d 0b 	call	0x169a	; 0x169a <step>
	if (steps == newSteps){	//if needed arrow position is reached - stop Stepper Motor rotation
    175c:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <steps>
    1760:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <steps+0x1>
    1764:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <newSteps>
    1768:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <newSteps+0x1>
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	39 f4       	brne	.+14     	; 0x1780 <__vector_10+0x4e>
		arrowMoving = 0;
    1772:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <arrowMoving>
		TCCR0 = 0;
    1776:	13 be       	out	0x33, r1	; 51
		OCR0 = 0;
    1778:	1c be       	out	0x3c, r1	; 60
		TIMSK&=~_BV(OCIE0);
    177a:	89 b7       	in	r24, 0x39	; 57
    177c:	8d 7f       	andi	r24, 0xFD	; 253
    177e:	89 bf       	out	0x39, r24	; 57
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_4>:
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[phase];
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
	PORTA = tempPort;
}

ISR( TIMER2_COMP_vect ){
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
	speedTimerRough++; //speedTimer increments each period timePerTic*TIC
    17b0:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <speedTimerRough>
    17b4:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <speedTimerRough+0x1>
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <speedTimerRough+0x1>
    17be:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <speedTimerRough>
}
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_9>:

ISR (TIMER1_OVF_vect){
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    17de:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <signalOn>
    17e2:	88 23       	and	r24, r24
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <__vector_9+0x28>
    17e6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <signalCounter>
    17ea:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <signalCounter+0x1>
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <signalCounter+0x1>
    17f4:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <signalCounter>
}
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_2>:

ISR(INT1_vect){
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	8f 93       	push	r24
    1812:	9f 93       	push	r25
//interrupt occurs when Hall sensor is actuated
if (firstMeasure)
    1814:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <firstMeasure>
    1818:	88 23       	and	r24, r24
    181a:	d1 f0       	breq	.+52     	; 0x1850 <__vector_2+0x4a>
	{
		previousTCNT2 = TCNT2;
    181c:	84 b5       	in	r24, 0x24	; 36
    181e:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <previousTCNT2>
		TCNT2 = 0;
    1822:	14 bc       	out	0x24, r1	; 36
		speedTimerRoughPrevious = speedTimerRough;
    1824:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <speedTimerRough>
    1828:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <speedTimerRough+0x1>
    182c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <speedTimerRoughPrevious+0x1>
    1830:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <speedTimerRoughPrevious>
		speedTimerRough = 0;
    1834:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <speedTimerRough+0x1>
    1838:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <speedTimerRough>
		sensorActations++;
    183c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <sensorActations>
    1840:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <sensorActations+0x1>
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <sensorActations+0x1>
    184a:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <sensorActations>
    184e:	07 c0       	rjmp	.+14     	; 0x185e <__vector_2+0x58>
	}
else
	{
		TCNT2 = 0;
    1850:	14 bc       	out	0x24, r1	; 36
		TIMSK|=_BV(OCIE2);	//first actuation of the Hall sensor enables TIMER2 compare match interrupt
    1852:	89 b7       	in	r24, 0x39	; 57
    1854:	80 68       	ori	r24, 0x80	; 128
    1856:	89 bf       	out	0x39, r24	; 57
		firstMeasure = 1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <firstMeasure>
	}
}
    185e:	9f 91       	pop	r25
    1860:	8f 91       	pop	r24
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <main_screen>:
		}
	}
}

void main_screen()
{
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
	if (!signalOn){
    187a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <signalOn>
    187e:	81 11       	cpse	r24, r1
    1880:	ec c0       	rjmp	.+472    	; 0x1a5a <main_screen+0x1ee>

		uint8_t offsetX = 10;
		uint8_t offsetY = 11;
		GLCD_Clear();
    1882:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    1886:	0f ef       	ldi	r16, 0xFF	; 255
    1888:	27 e1       	ldi	r18, 0x17	; 23
    188a:	44 e2       	ldi	r20, 0x24	; 36
    188c:	6b e0       	ldi	r22, 0x0B	; 11
    188e:	8a e0       	ldi	r24, 0x0A	; 10
    1890:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    1894:	24 e1       	ldi	r18, 0x14	; 20
    1896:	46 e2       	ldi	r20, 0x26	; 38
    1898:	6e e0       	ldi	r22, 0x0E	; 14
    189a:	85 e2       	ldi	r24, 0x25	; 37
    189c:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>

		if (voltage>=BRICK_1)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    18a0:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18a4:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    18a8:	89 36       	cpi	r24, 0x69	; 105
    18aa:	91 05       	cpc	r25, r1
    18ac:	34 f0       	brlt	.+12     	; 0x18ba <main_screen+0x4e>
    18ae:	25 e1       	ldi	r18, 0x15	; 21
    18b0:	40 e1       	ldi	r20, 0x10	; 16
    18b2:	6d e0       	ldi	r22, 0x0D	; 13
    18b4:	8c e0       	ldi	r24, 0x0C	; 12
    18b6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <GLCD_FillRectangle>
		if (voltage>=BRICK_2)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    18ba:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18be:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    18c2:	8e 36       	cpi	r24, 0x6E	; 110
    18c4:	91 05       	cpc	r25, r1
    18c6:	3c f0       	brlt	.+14     	; 0x18d6 <main_screen+0x6a>
    18c8:	0f ef       	ldi	r16, 0xFF	; 255
    18ca:	25 e1       	ldi	r18, 0x15	; 21
    18cc:	46 e1       	ldi	r20, 0x16	; 22
    18ce:	6d e0       	ldi	r22, 0x0D	; 13
    18d0:	82 e1       	ldi	r24, 0x12	; 18
    18d2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <GLCD_FillRectangle>
		if (voltage>=BRICK_3)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    18d6:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18da:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    18de:	83 37       	cpi	r24, 0x73	; 115
    18e0:	91 05       	cpc	r25, r1
    18e2:	3c f0       	brlt	.+14     	; 0x18f2 <main_screen+0x86>
    18e4:	0f ef       	ldi	r16, 0xFF	; 255
    18e6:	25 e1       	ldi	r18, 0x15	; 21
    18e8:	4c e1       	ldi	r20, 0x1C	; 28
    18ea:	6d e0       	ldi	r22, 0x0D	; 13
    18ec:	88 e1       	ldi	r24, 0x18	; 24
    18ee:	0e 94 7e 20 	call	0x40fc	; 0x40fc <GLCD_FillRectangle>
		if (voltage>=BRICK_4)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    18f2:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18f6:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    18fa:	88 37       	cpi	r24, 0x78	; 120
    18fc:	91 05       	cpc	r25, r1
    18fe:	3c f0       	brlt	.+14     	; 0x190e <main_screen+0xa2>
    1900:	0f ef       	ldi	r16, 0xFF	; 255
    1902:	25 e1       	ldi	r18, 0x15	; 21
    1904:	42 e2       	ldi	r20, 0x22	; 34
    1906:	6d e0       	ldi	r22, 0x0D	; 13
    1908:	8e e1       	ldi	r24, 0x1E	; 30
    190a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <GLCD_FillRectangle>

		GLCD_GotoXY(33+offsetX, 4+offsetY);
    190e:	6f e0       	ldi	r22, 0x0F	; 15
    1910:	8b e2       	ldi	r24, 0x2B	; 43
    1912:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	48 e0       	ldi	r20, 0x08	; 8
    191a:	65 e0       	ldi	r22, 0x05	; 5
    191c:	80 ea       	ldi	r24, 0xA0	; 160
    191e:	9b e0       	ldi	r25, 0x0B	; 11
    1920:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    1924:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <voltage>
    1928:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <voltage+0x1>
    192c:	07 2e       	mov	r0, r23
    192e:	00 0c       	add	r0, r0
    1930:	88 0b       	sbc	r24, r24
    1932:	99 0b       	sbc	r25, r25
    1934:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__floatsisf>
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
		GLCD_PrintString("V");
    1950:	87 e6       	ldi	r24, 0x67	; 103
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>

		GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	62 e1       	ldi	r22, 0x12	; 18
    195e:	86 e3       	ldi	r24, 0x36	; 54
    1960:	94 e0       	ldi	r25, 0x04	; 4
    1962:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <GLCD_SetFont>
		GLCD_GotoXY(4, 31);
    1966:	6f e1       	ldi	r22, 0x1F	; 31
    1968:	84 e0       	ldi	r24, 0x04	; 4
    196a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>

		uint32_t tempMilage = milage/100;
    196e:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <milage>
    1972:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <milage+0x1>
    1976:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <milage+0x2>
    197a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <milage+0x3>
    197e:	24 e6       	ldi	r18, 0x64	; 100
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	0e 94 83 27 	call	0x4f06	; 0x4f06 <__udivmodsi4>
		int8_t l = 0;
		
		while(tempMilage){
    198a:	21 15       	cp	r18, r1
    198c:	31 05       	cpc	r19, r1
    198e:	41 05       	cpc	r20, r1
    1990:	51 05       	cpc	r21, r1
    1992:	d9 f0       	breq	.+54     	; 0x19ca <main_screen+0x15e>
    1994:	c0 e0       	ldi	r28, 0x00	; 0
			tempMilage/=10;
    1996:	0f 2e       	mov	r0, r31
    1998:	fa e0       	ldi	r31, 0x0A	; 10
    199a:	cf 2e       	mov	r12, r31
    199c:	d1 2c       	mov	r13, r1
    199e:	e1 2c       	mov	r14, r1
    19a0:	f1 2c       	mov	r15, r1
    19a2:	f0 2d       	mov	r31, r0
    19a4:	ca 01       	movw	r24, r20
    19a6:	b9 01       	movw	r22, r18
    19a8:	a7 01       	movw	r20, r14
    19aa:	96 01       	movw	r18, r12
    19ac:	0e 94 83 27 	call	0x4f06	; 0x4f06 <__udivmodsi4>
    19b0:	cf 5f       	subi	r28, 0xFF	; 255
		GLCD_GotoXY(4, 31);

		uint32_t tempMilage = milage/100;
		int8_t l = 0;
		
		while(tempMilage){
    19b2:	21 15       	cp	r18, r1
    19b4:	31 05       	cpc	r19, r1
    19b6:	41 05       	cpc	r20, r1
    19b8:	51 05       	cpc	r21, r1
    19ba:	a1 f7       	brne	.-24     	; 0x19a4 <main_screen+0x138>
			tempMilage/=10;
			l++;
		}
		if (l<2) l = 2;
    19bc:	c2 30       	cpi	r28, 0x02	; 2
    19be:	3c f0       	brlt	.+14     	; 0x19ce <main_screen+0x162>
		int8_t zeros = 6-l;
    19c0:	d6 e0       	ldi	r29, 0x06	; 6
    19c2:	dc 1b       	sub	r29, r28
				for (int8_t i = 0;i<zeros;i++){
    19c4:	1d 16       	cp	r1, r29
    19c6:	24 f0       	brlt	.+8      	; 0x19d0 <main_screen+0x164>
    19c8:	0b c0       	rjmp	.+22     	; 0x19e0 <main_screen+0x174>
		while(tempMilage){
			tempMilage/=10;
			l++;
		}
		if (l<2) l = 2;
		int8_t zeros = 6-l;
    19ca:	d4 e0       	ldi	r29, 0x04	; 4
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <main_screen+0x164>
    19ce:	d4 e0       	ldi	r29, 0x04	; 4
    19d0:	c0 e0       	ldi	r28, 0x00	; 0
				for (int8_t i = 0;i<zeros;i++){
					GLCD_PrintString("0");
    19d2:	89 e6       	ldi	r24, 0x69	; 105
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
    19da:	cf 5f       	subi	r28, 0xFF	; 255
			tempMilage/=10;
			l++;
		}
		if (l<2) l = 2;
		int8_t zeros = 6-l;
				for (int8_t i = 0;i<zeros;i++){
    19dc:	cd 17       	cp	r28, r29
    19de:	cc f3       	brlt	.-14     	; 0x19d2 <main_screen+0x166>
					GLCD_PrintString("0");
				}
		GLCD_PrintInteger(milage/1000);
    19e0:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <milage>
    19e4:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <milage+0x1>
    19e8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <milage+0x2>
    19ec:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <milage+0x3>
    19f0:	28 ee       	ldi	r18, 0xE8	; 232
    19f2:	33 e0       	ldi	r19, 0x03	; 3
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	0e 94 83 27 	call	0x4f06	; 0x4f06 <__udivmodsi4>
    19fc:	ca 01       	movw	r24, r20
    19fe:	b9 01       	movw	r22, r18
    1a00:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		if(milage<100000000){
    1a04:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <milage>
    1a08:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <milage+0x1>
    1a0c:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <milage+0x2>
    1a10:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <milage+0x3>
    1a14:	81 15       	cp	r24, r1
    1a16:	91 4e       	sbci	r25, 0xE1	; 225
    1a18:	a5 4f       	sbci	r26, 0xF5	; 245
    1a1a:	b5 40       	sbci	r27, 0x05	; 5
    1a1c:	e0 f4       	brcc	.+56     	; 0x1a56 <main_screen+0x1ea>
			GLCD_PrintString(".");
    1a1e:	81 e6       	ldi	r24, 0x61	; 97
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
			GLCD_PrintInteger((milage%1000)/100);
    1a26:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <milage>
    1a2a:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <milage+0x1>
    1a2e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <milage+0x2>
    1a32:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <milage+0x3>
    1a36:	28 ee       	ldi	r18, 0xE8	; 232
    1a38:	33 e0       	ldi	r19, 0x03	; 3
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	0e 94 83 27 	call	0x4f06	; 0x4f06 <__udivmodsi4>
    1a42:	24 e6       	ldi	r18, 0x64	; 100
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	0e 94 83 27 	call	0x4f06	; 0x4f06 <__udivmodsi4>
    1a4e:	ca 01       	movw	r24, r20
    1a50:	b9 01       	movw	r22, r18
    1a52:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		}
		GLCD_Render();
    1a56:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
	}
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	08 95       	ret

00001a6a <arrow_position_update>:

void arrow_position_update(){
	newSteps = speedKmh/kmhPerStep;
    1a6a:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <kmhPerStep>
    1a6e:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <kmhPerStep+0x1>
    1a72:	40 91 89 02 	lds	r20, 0x0289	; 0x800289 <kmhPerStep+0x2>
    1a76:	50 91 8a 02 	lds	r21, 0x028A	; 0x80028a <kmhPerStep+0x3>
    1a7a:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <speedKmh>
    1a7e:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <speedKmh+0x1>
    1a82:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <speedKmh+0x2>
    1a86:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <speedKmh+0x3>
    1a8a:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    1a8e:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    1a92:	70 93 86 02 	sts	0x0286, r23	; 0x800286 <newSteps+0x1>
    1a96:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <newSteps>
	int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (for how many steps arrow should be shifted)
    1a9a:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <steps>
    1a9e:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <steps+0x1>
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	86 1b       	sub	r24, r22
    1aa6:	97 0b       	sbc	r25, r23
	if (shiftSteps!=0){
    1aa8:	99 f0       	breq	.+38     	; 0x1ad0 <arrow_position_update+0x66>
		if (shiftSteps > 0) dir = 0; else dir = 1;
    1aaa:	1a f0       	brmi	.+6      	; 0x1ab2 <arrow_position_update+0x48>
    1aac:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <dir>
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <arrow_position_update+0x4e>
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <dir>
		arrowMoving = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <arrowMoving>
		//Timer0 is used to generate pulses for Stepper Motor driver
		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
    1abe:	83 b7       	in	r24, 0x33	; 51
    1ac0:	8d 60       	ori	r24, 0x0D	; 13
    1ac2:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1ac4:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <stepInterval>
    1ac8:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1aca:	89 b7       	in	r24, 0x39	; 57
    1acc:	82 60       	ori	r24, 0x02	; 2
    1ace:	89 bf       	out	0x39, r24	; 57
    1ad0:	08 95       	ret

00001ad2 <button_monitor>:
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
    1ad2:	b5 9b       	sbis	0x16, 5	; 22
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <button_monitor+0xc>
    1ad6:	b6 9b       	sbis	0x16, 6	; 22
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <button_monitor+0xc>
    1ada:	b7 99       	sbic	0x16, 7	; 22
    1adc:	33 c0       	rjmp	.+102    	; 0x1b44 <button_monitor+0x72>
		btnPressed = 0;
		return 0;
	}
	else if((!(PIN_SET))&&(!btnPressed)){
    1ade:	b5 99       	sbic	0x16, 5	; 22
    1ae0:	10 c0       	rjmp	.+32     	; 0x1b02 <button_monitor+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae2:	2f ef       	ldi	r18, 0xFF	; 255
    1ae4:	30 e7       	ldi	r19, 0x70	; 112
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	21 50       	subi	r18, 0x01	; 1
    1aea:	30 40       	sbci	r19, 0x00	; 0
    1aec:	80 40       	sbci	r24, 0x00	; 0
    1aee:	e1 f7       	brne	.-8      	; 0x1ae8 <button_monitor+0x16>
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <button_monitor+0x20>
    1af2:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_SET)){
    1af4:	86 b3       	in	r24, 0x16	; 22

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
		btnPressed = 0;
		return 0;
    1af6:	85 fb       	bst	r24, 5
    1af8:	99 27       	eor	r25, r25
    1afa:	90 f9       	bld	r25, 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 27       	eor	r24, r25
    1b00:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_SET)){
			btnPressed = 1;
		}
	}
	else if((!(PIN_DOWN))&&(!btnPressed)){
    1b02:	96 b3       	in	r25, 0x16	; 22
    1b04:	89 2f       	mov	r24, r25
    1b06:	80 74       	andi	r24, 0x40	; 64
    1b08:	96 fd       	sbrc	r25, 6
    1b0a:	0d c0       	rjmp	.+26     	; 0x1b26 <button_monitor+0x54>
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
    1b0e:	20 e7       	ldi	r18, 0x70	; 112
    1b10:	32 e0       	ldi	r19, 0x02	; 2
    1b12:	91 50       	subi	r25, 0x01	; 1
    1b14:	20 40       	sbci	r18, 0x00	; 0
    1b16:	30 40       	sbci	r19, 0x00	; 0
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <button_monitor+0x40>
    1b1a:	00 c0       	rjmp	.+0      	; 0x1b1c <button_monitor+0x4a>
    1b1c:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_DOWN)){
    1b1e:	b6 99       	sbic	0x16, 6	; 22
    1b20:	16 c0       	rjmp	.+44     	; 0x1b4e <button_monitor+0x7c>
			btnPressed = 2;
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	08 95       	ret
		}
	}
	else if((!(PIN_UP))&&(!btnPressed)){
    1b26:	b7 99       	sbic	0x16, 7	; 22
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <button_monitor+0x76>
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	90 e7       	ldi	r25, 0x70	; 112
    1b2e:	22 e0       	ldi	r18, 0x02	; 2
    1b30:	81 50       	subi	r24, 0x01	; 1
    1b32:	90 40       	sbci	r25, 0x00	; 0
    1b34:	20 40       	sbci	r18, 0x00	; 0
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <button_monitor+0x5e>
    1b38:	00 c0       	rjmp	.+0      	; 0x1b3a <button_monitor+0x68>
    1b3a:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_UP)){
    1b3c:	b7 99       	sbic	0x16, 7	; 22
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <button_monitor+0x7a>
			btnPressed = 3;
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	08 95       	ret

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
		btnPressed = 0;
		return 0;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	08 95       	ret
		if (!debugMode)main_screen();//when the milage value changes by 100 meters - update data on the screen
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	08 95       	ret
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PIN_UP)){
			btnPressed = 3;
		}
	}
	return btnPressed;
}
    1b4e:	08 95       	ret

00001b50 <arrow_calibration>:

void arrow_calibration(){
	steps = 0;
    1b50:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <steps+0x1>
    1b54:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <steps>
	phase = 0;
    1b58:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <phase>
	newSteps = smSteps*stepMode/4;	//moving arrow 90 degrees clockwise
    1b5c:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <stepMode>
    1b60:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <smSteps>
    1b64:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <smSteps+0x1>
    1b68:	42 9f       	mul	r20, r18
    1b6a:	c0 01       	movw	r24, r0
    1b6c:	43 9f       	mul	r20, r19
    1b6e:	90 0d       	add	r25, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <newSteps+0x1>
    1b7e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <newSteps>
	dir = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <dir>
	arrowMoving = 1;
    1b88:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1b8c:	83 b7       	in	r24, 0x33	; 51
    1b8e:	8d 60       	ori	r24, 0x0D	; 13
    1b90:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1b92:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <stepInterval>
    1b96:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1b98:	89 b7       	in	r24, 0x39	; 57
    1b9a:	82 60       	ori	r24, 0x02	; 2
    1b9c:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1b9e:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <arrowMoving>
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	fc cf       	rjmp	.-8      	; 0x1b9e <arrow_calibration+0x4e>
    1ba6:	2f ef       	ldi	r18, 0xFF	; 255
    1ba8:	82 e5       	ldi	r24, 0x52	; 82
    1baa:	97 e0       	ldi	r25, 0x07	; 7
    1bac:	21 50       	subi	r18, 0x01	; 1
    1bae:	80 40       	sbci	r24, 0x00	; 0
    1bb0:	90 40       	sbci	r25, 0x00	; 0
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <arrow_calibration+0x5c>
    1bb4:	00 c0       	rjmp	.+0      	; 0x1bb6 <arrow_calibration+0x66>
    1bb6:	00 00       	nop
	_delay_ms(150);
	steps = smSteps*stepMode;
    1bb8:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <stepMode>
    1bbc:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <smSteps>
    1bc0:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <smSteps+0x1>
    1bc4:	42 9f       	mul	r20, r18
    1bc6:	c0 01       	movw	r24, r0
    1bc8:	43 9f       	mul	r20, r19
    1bca:	90 0d       	add	r25, r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <steps+0x1>
    1bd2:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1bd6:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <newSteps+0x1>
    1bda:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <newSteps>
	dir = 0;
    1bde:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <dir>
	arrowMoving = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1be8:	83 b7       	in	r24, 0x33	; 51
    1bea:	8d 60       	ori	r24, 0x0D	; 13
    1bec:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1bee:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <stepInterval>
    1bf2:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1bf4:	89 b7       	in	r24, 0x39	; 57
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1bfa:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <arrowMoving>
    1bfe:	81 11       	cpse	r24, r1
    1c00:	fc cf       	rjmp	.-8      	; 0x1bfa <arrow_calibration+0xaa>
	steps = 0;
    1c02:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <steps+0x1>
    1c06:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <steps>
	newSteps = 0;
    1c0a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <newSteps+0x1>
    1c0e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <newSteps>
	arrowCalibrated = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <arrowCalibrated>
    1c18:	08 95       	ret

00001c1a <draw_arrow>:
}

void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1c1a:	88 23       	and	r24, r24
    1c1c:	81 f0       	breq	.+32     	; 0x1c3e <draw_arrow+0x24>
		GLCD_Clear();
    1c1e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c22:	67 e0       	ldi	r22, 0x07	; 7
    1c24:	86 e1       	ldi	r24, 0x16	; 22
    1c26:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1c2a:	2f ef       	ldi	r18, 0xFF	; 255
    1c2c:	47 e3       	ldi	r20, 0x37	; 55
    1c2e:	6c e5       	ldi	r22, 0x5C	; 92
    1c30:	84 e6       	ldi	r24, 0x64	; 100
    1c32:	90 e1       	ldi	r25, 0x10	; 16
    1c34:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <GLCD_DrawBitmap>
		GLCD_Render();
    1c38:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
    1c3c:	08 95       	ret
		}else{
		GLCD_Clear();
    1c3e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c42:	67 e0       	ldi	r22, 0x07	; 7
    1c44:	86 e1       	ldi	r24, 0x16	; 22
    1c46:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1c4a:	2f ef       	ldi	r18, 0xFF	; 255
    1c4c:	47 e3       	ldi	r20, 0x37	; 55
    1c4e:	6c e5       	ldi	r22, 0x5C	; 92
    1c50:	80 ee       	ldi	r24, 0xE0	; 224
    1c52:	9d e0       	ldi	r25, 0x0D	; 13
    1c54:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <GLCD_DrawBitmap>
		GLCD_Render();
    1c58:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
    1c5c:	08 95       	ret

00001c5e <draw_skull>:
	}
}

void draw_skull (void)
{
	GLCD_Clear();
    1c5e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
	GLCD_GotoXY(27, 7);
    1c62:	67 e0       	ldi	r22, 0x07	; 7
    1c64:	8b e1       	ldi	r24, 0x1B	; 27
    1c66:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1c6a:	2f ef       	ldi	r18, 0xFF	; 255
    1c6c:	44 e3       	ldi	r20, 0x34	; 52
    1c6e:	66 e5       	ldi	r22, 0x56	; 86
    1c70:	88 ee       	ldi	r24, 0xE8	; 232
    1c72:	92 e1       	ldi	r25, 0x12	; 18
    1c74:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <GLCD_DrawBitmap>
	GLCD_Render();
    1c78:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
    1c7c:	08 95       	ret

00001c7e <signal_monitor>:
	}
	if (speedKmh>scaleMax)speedKmh = scaleMax;
}

void signal_monitor(){
	if(!(PIN_RIGHT)&&(PIN_LEFT)){
    1c7e:	b4 99       	sbic	0x16, 4	; 22
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <signal_monitor+0x1e>
    1c82:	b3 9b       	sbis	0x16, 3	; 22
    1c84:	0b c0       	rjmp	.+22     	; 0x1c9c <signal_monitor+0x1e>
		draw_arrow(LEFT);
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <draw_arrow>
		signalOn = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <signalOn>
		signalCounter = 0;
    1c92:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1c96:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
    1c9a:	21 c0       	rjmp	.+66     	; 0x1cde <signal_monitor+0x60>
	}
	else if(!(PIN_LEFT)&&(PIN_RIGHT)){
    1c9c:	b3 99       	sbic	0x16, 3	; 22
    1c9e:	0d c0       	rjmp	.+26     	; 0x1cba <signal_monitor+0x3c>
    1ca0:	b4 9b       	sbis	0x16, 4	; 22
    1ca2:	0b c0       	rjmp	.+22     	; 0x1cba <signal_monitor+0x3c>
		draw_arrow(RIGHT);
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <draw_arrow>
		signalOn = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <signalOn>
		signalCounter = 0;
    1cb0:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1cb4:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
    1cb8:	12 c0       	rjmp	.+36     	; 0x1cde <signal_monitor+0x60>
	}
	else if(!(PIN_RIGHT)&&!(PIN_LEFT)){
    1cba:	b4 99       	sbic	0x16, 4	; 22
    1cbc:	0c c0       	rjmp	.+24     	; 0x1cd6 <signal_monitor+0x58>
    1cbe:	b3 99       	sbic	0x16, 3	; 22
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <signal_monitor+0x58>
		draw_skull();
    1cc2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <draw_skull>
		signalOn = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <signalOn>
		signalCounter = 0;
    1ccc:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1cd0:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <signal_monitor+0x60>
	}
	if (signalOn){
    1cd6:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <signalOn>
    1cda:	88 23       	and	r24, r24
    1cdc:	e9 f0       	breq	.+58     	; 0x1d18 <signal_monitor+0x9a>
		if((PIN_LEFT)&&(PIN_RIGHT)){
    1cde:	b3 9b       	sbis	0x16, 3	; 22
    1ce0:	09 c0       	rjmp	.+18     	; 0x1cf4 <signal_monitor+0x76>
    1ce2:	b4 9b       	sbis	0x16, 4	; 22
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <signal_monitor+0x76>
			GLCD_Clear();
    1ce6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
			GLCD_Render();
    1cea:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
			TIMSK|=_BV(TOIE1);		// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1cee:	89 b7       	in	r24, 0x39	; 57
    1cf0:	84 60       	ori	r24, 0x04	; 4
    1cf2:	89 bf       	out	0x39, r24	; 57
		}							// In order to define if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
		if (signalCounter > SIGNAL_COUNTER_MAX)	// if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1cf4:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <signalCounter>
    1cf8:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <signalCounter+0x1>
    1cfc:	8d 32       	cpi	r24, 0x2D	; 45
    1cfe:	91 40       	sbci	r25, 0x01	; 1
    1d00:	58 f0       	brcs	.+22     	; 0x1d18 <signal_monitor+0x9a>
		{
			signalOn = 0;
    1d02:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <signalOn>
			signalCounter = 0;
    1d06:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1d0a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
			TIMSK&=~_BV(TOIE1);
    1d0e:	89 b7       	in	r24, 0x39	; 57
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	89 bf       	out	0x39, r24	; 57
			main_screen();
    1d14:	0e 94 36 0c 	call	0x186c	; 0x186c <main_screen>
    1d18:	08 95       	ret

00001d1a <read_ADC>:
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
	GLCD_Render();
}

uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
    1d1a:	87 b9       	out	0x07, r24	; 7
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d1c:	e6 2f       	mov	r30, r22
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	1e 16       	cp	r1, r30
    1d22:	1f 06       	cpc	r1, r31
    1d24:	8c f4       	brge	.+34     	; 0x1d48 <read_ADC+0x2e>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1d2e:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1d30:	36 99       	sbic	0x06, 6	; 6
    1d32:	fe cf       	rjmp	.-4      	; 0x1d30 <read_ADC+0x16>
		tmp += ADCW;
    1d34:	44 b1       	in	r20, 0x04	; 4
    1d36:	55 b1       	in	r21, 0x05	; 5
    1d38:	84 0f       	add	r24, r20
    1d3a:	95 1f       	adc	r25, r21
}

uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	2e 17       	cp	r18, r30
    1d42:	3f 07       	cpc	r19, r31
    1d44:	a1 f7       	brne	.-24     	; 0x1d2e <read_ADC+0x14>
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <read_ADC+0x32>
	GLCD_Render();
}

uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__udivmodhi4>
    1d52:	cb 01       	movw	r24, r22
}
    1d54:	08 95       	ret

00001d56 <data_monitor>:
			main_screen();
		}
	}
}

void data_monitor(){
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
	newVoltage = (read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER;
    1d5a:	6a e0       	ldi	r22, 0x0A	; 10
    1d5c:	84 e0       	ldi	r24, 0x04	; 4
    1d5e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_ADC>
    1d62:	bc 01       	movw	r22, r24
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    1d6c:	2a e9       	ldi	r18, 0x9A	; 154
    1d6e:	39 e9       	ldi	r19, 0x99	; 153
    1d70:	4c ec       	ldi	r20, 0xCC	; 204
    1d72:	52 e4       	ldi	r21, 0x42	; 66
    1d74:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	50 e4       	ldi	r21, 0x40	; 64
    1d80:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 ec       	ldi	r20, 0xC0	; 192
    1d8a:	50 e4       	ldi	r21, 0x40	; 64
    1d8c:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    1d90:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__fixsfsi>
    1d94:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <newVoltage+0x1>
    1d98:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <newVoltage>
	if (newVoltage<SLEEP_VOLTAGE){//Disabling power consumers during ignition to prevent MCU from reboot
    1d9c:	64 36       	cpi	r22, 0x64	; 100
    1d9e:	71 05       	cpc	r23, r1
    1da0:	cc f5       	brge	.+114    	; 0x1e14 <data_monitor+0xbe>
		PORTA|=_BV(3);
    1da2:	db 9a       	sbi	0x1b, 3	; 27
		PORTA|=_BV(0);
    1da4:	d8 9a       	sbi	0x1b, 0	; 27
		OCR1A = 0;
    1da6:	1b bc       	out	0x2b, r1	; 43
    1da8:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1daa:	19 bc       	out	0x29, r1	; 41
    1dac:	18 bc       	out	0x28, r1	; 40
		GLCD_Clear();
    1dae:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
		GLCD_Render();
    1db2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
		while((read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER<SLEEP_VOLTAGE);
    1db6:	6a e0       	ldi	r22, 0x0A	; 10
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_ADC>
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    1dc8:	2a e9       	ldi	r18, 0x9A	; 154
    1dca:	39 e9       	ldi	r19, 0x99	; 153
    1dcc:	4c ec       	ldi	r20, 0xCC	; 204
    1dce:	52 e4       	ldi	r21, 0x42	; 66
    1dd0:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	50 e4       	ldi	r21, 0x40	; 64
    1ddc:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 ec       	ldi	r20, 0xC0	; 192
    1de6:	50 e4       	ldi	r21, 0x40	; 64
    1de8:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	48 ec       	ldi	r20, 0xC8	; 200
    1df2:	52 e4       	ldi	r21, 0x42	; 66
    1df4:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	ec f2       	brlt	.-70     	; 0x1db6 <data_monitor+0x60>
		OCR1A = pwmArrow;
    1dfc:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <pwmArrow>
    1e00:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    1e04:	9b bd       	out	0x2b, r25	; 43
    1e06:	8a bd       	out	0x2a, r24	; 42
		OCR1B = pwmDial;
    1e08:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <pwmDial>
    1e0c:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    1e10:	99 bd       	out	0x29, r25	; 41
    1e12:	88 bd       	out	0x28, r24	; 40
	}
	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    1e14:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <newVoltage>
    1e18:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <newVoltage+0x1>
    1e1c:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <voltage>
    1e20:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <voltage+0x1>
    1e24:	82 17       	cp	r24, r18
    1e26:	93 07       	cpc	r25, r19
    1e28:	51 f0       	breq	.+20     	; 0x1e3e <data_monitor+0xe8>
	{
		voltage = newVoltage;
    1e2a:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <voltage+0x1>
    1e2e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <voltage>
		if (!debugMode)main_screen();
    1e32:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <debugMode>
    1e36:	81 11       	cpse	r24, r1
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <data_monitor+0xe8>
    1e3a:	0e 94 36 0c 	call	0x186c	; 0x186c <main_screen>
	}
	uint32_t newMilage = sensorActations*circumference;
    1e3e:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <sensorActations>
    1e42:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <sensorActations+0x1>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    1e4e:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <circumference>
    1e52:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <circumference+0x1>
    1e56:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <circumference+0x2>
    1e5a:	50 91 92 02 	lds	r21, 0x0292	; 0x800292 <circumference+0x3>
    1e5e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    1e62:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
	if (newMilage>99)	
    1e66:	64 36       	cpi	r22, 0x64	; 100
    1e68:	71 05       	cpc	r23, r1
    1e6a:	81 05       	cpc	r24, r1
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	00 f1       	brcs	.+64     	; 0x1eb0 <data_monitor+0x15a>
	{
		milage+= newMilage;
    1e70:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <milage>
    1e74:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <milage+0x1>
    1e78:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <milage+0x2>
    1e7c:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <milage+0x3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	80 0f       	add	r24, r16
    1e86:	91 1f       	adc	r25, r17
    1e88:	a2 1f       	adc	r26, r18
    1e8a:	b3 1f       	adc	r27, r19
    1e8c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <milage>
    1e90:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <milage+0x1>
    1e94:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <milage+0x2>
    1e98:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <milage+0x3>
		sensorActations = 0;
    1e9c:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <sensorActations+0x1>
    1ea0:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <sensorActations>
		if (!debugMode)main_screen();//when the milage value changes by 100 meters - update data on the screen
    1ea4:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <debugMode>
    1ea8:	81 11       	cpse	r24, r1
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <data_monitor+0x15a>
    1eac:	0e 94 36 0c 	call	0x186c	; 0x186c <main_screen>
	}
}
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <eep_operations>:
		tmp += ADCW;
	}
	return tmp/cycles;
}

void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1eb6:	7f 92       	push	r7
    1eb8:	8f 92       	push	r8
    1eba:	9f 92       	push	r9
    1ebc:	af 92       	push	r10
    1ebe:	bf 92       	push	r11
    1ec0:	cf 92       	push	r12
    1ec2:	df 92       	push	r13
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	8c 01       	movw	r16, r24
    1ed2:	76 2e       	mov	r7, r22
    1ed4:	d4 2f       	mov	r29, r20
	if (eepAction==EEP_WRITE){
    1ed6:	41 30       	cpi	r20, 0x01	; 1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <eep_operations+0x26>
    1eda:	6b c0       	rjmp	.+214    	; 0x1fb2 <eep_operations+0xfc>
		eeprom_update_byte((uint8_t*)eepStartAddress,0);
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1ee2:	e7 2c       	mov	r14, r7
    1ee4:	f1 2c       	mov	r15, r1
    1ee6:	0e 0d       	add	r16, r14
    1ee8:	1f 1d       	adc	r17, r15
    1eea:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <pwmArrow>
    1eee:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	0e 94 0c 29 	call	0x5218	; 0x5218 <eeprom_update_word>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1ef8:	0e 0d       	add	r16, r14
    1efa:	1f 1d       	adc	r17, r15
    1efc:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <pwmDial>
    1f00:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    1f04:	c8 01       	movw	r24, r16
    1f06:	0e 94 0c 29 	call	0x5218	; 0x5218 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1f0a:	0e 0d       	add	r16, r14
    1f0c:	1f 1d       	adc	r17, r15
    1f0e:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <scaleMax>
    1f12:	c8 01       	movw	r24, r16
    1f14:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1f18:	0e 0d       	add	r16, r14
    1f1a:	1f 1d       	adc	r17, r15
    1f1c:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <stepInterval>
    1f20:	c8 01       	movw	r24, r16
    1f22:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1f26:	0e 0d       	add	r16, r14
    1f28:	1f 1d       	adc	r17, r15
    1f2a:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <smSteps>
    1f2e:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <smSteps+0x1>
    1f32:	c8 01       	movw	r24, r16
    1f34:	0e 94 0c 29 	call	0x5218	; 0x5218 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1f38:	0e 0d       	add	r16, r14
    1f3a:	1f 1d       	adc	r17, r15
    1f3c:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <lcdContrast>
    1f40:	c8 01       	movw	r24, r16
    1f42:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1f46:	0e 0d       	add	r16, r14
    1f48:	1f 1d       	adc	r17, r15
    1f4a:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <magnetsOnWheel>
    1f4e:	c8 01       	movw	r24, r16
    1f50:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1f54:	0e 0d       	add	r16, r14
    1f56:	1f 1d       	adc	r17, r15
    1f58:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <stepMode>
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1f62:	0e 0d       	add	r16, r14
    1f64:	1f 1d       	adc	r17, r15
    1f66:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <wheelDiameter>
    1f6a:	50 91 be 02 	lds	r21, 0x02BE	; 0x8002be <wheelDiameter+0x1>
    1f6e:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <wheelDiameter+0x2>
    1f72:	70 91 c0 02 	lds	r23, 0x02C0	; 0x8002c0 <wheelDiameter+0x3>
    1f76:	c8 01       	movw	r24, r16
    1f78:	0e 94 00 29 	call	0x5200	; 0x5200 <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1f7c:	0e 0d       	add	r16, r14
    1f7e:	1f 1d       	adc	r17, r15
    1f80:	40 91 b2 02 	lds	r20, 0x02B2	; 0x8002b2 <gearRatio>
    1f84:	50 91 b3 02 	lds	r21, 0x02B3	; 0x8002b3 <gearRatio+0x1>
    1f88:	60 91 b4 02 	lds	r22, 0x02B4	; 0x8002b4 <gearRatio+0x2>
    1f8c:	70 91 b5 02 	lds	r23, 0x02B5	; 0x8002b5 <gearRatio+0x3>
    1f90:	c8 01       	movw	r24, r16
    1f92:	0e 94 00 29 	call	0x5200	; 0x5200 <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1f96:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <degreesPerKmh>
    1f9a:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    1f9e:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    1fa2:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    1fa6:	c7 01       	movw	r24, r14
    1fa8:	80 0f       	add	r24, r16
    1faa:	91 1f       	adc	r25, r17
    1fac:	0e 94 00 29 	call	0x5200	; 0x5200 <eeprom_update_dword>
    1fb0:	60 c1       	rjmp	.+704    	; 0x2272 <eep_operations+0x3bc>
	}
	if(eepAction==EEP_READ){
    1fb2:	41 11       	cpse	r20, r1
    1fb4:	5a c1       	rjmp	.+692    	; 0x226a <eep_operations+0x3b4>
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fb6:	e6 2e       	mov	r14, r22
    1fb8:	f1 2c       	mov	r15, r1
    1fba:	0e 0d       	add	r16, r14
    1fbc:	1f 1d       	adc	r17, r15
    1fbe:	c8 01       	movw	r24, r16
    1fc0:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <eeprom_read_word>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	24 e0       	ldi	r18, 0x04	; 4
    1fc8:	92 07       	cpc	r25, r18
    1fca:	28 f4       	brcc	.+10     	; 0x1fd6 <eep_operations+0x120>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
	}
	if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fcc:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <pwmArrow+0x1>
    1fd0:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <pwmArrow>
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <eep_operations+0x12c>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	94 e0       	ldi	r25, 0x04	; 4
    1fda:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <pwmArrow+0x1>
    1fde:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <pwmArrow>
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fe2:	0e 0d       	add	r16, r14
    1fe4:	1f 1d       	adc	r17, r15
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <eeprom_read_word>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	34 e0       	ldi	r19, 0x04	; 4
    1ff0:	93 07       	cpc	r25, r19
    1ff2:	28 f4       	brcc	.+10     	; 0x1ffe <eep_operations+0x148>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
	}
	if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1ff4:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pwmDial+0x1>
    1ff8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pwmDial>
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <eep_operations+0x154>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	94 e0       	ldi	r25, 0x04	; 4
    2002:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pwmDial+0x1>
    2006:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pwmDial>
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    200a:	0e 0d       	add	r16, r14
    200c:	1f 1d       	adc	r17, r15
    200e:	c8 01       	movw	r24, r16
    2010:	0e 94 db 28 	call	0x51b6	; 0x51b6 <eeprom_read_byte>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
    2014:	84 31       	cpi	r24, 0x14	; 20
    2016:	18 f0       	brcs	.+6      	; 0x201e <eep_operations+0x168>
	if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2018:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <scaleMax>
    201c:	03 c0       	rjmp	.+6      	; 0x2024 <eep_operations+0x16e>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
    201e:	8e eb       	ldi	r24, 0xBE	; 190
    2020:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <scaleMax>
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2024:	0e 0d       	add	r16, r14
    2026:	1f 1d       	adc	r17, r15
    2028:	c8 01       	movw	r24, r16
    202a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <eeprom_read_byte>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    202e:	82 33       	cpi	r24, 0x32	; 50
    2030:	18 f0       	brcs	.+6      	; 0x2038 <eep_operations+0x182>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2032:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <stepInterval>
    2036:	03 c0       	rjmp	.+6      	; 0x203e <eep_operations+0x188>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    2038:	86 e9       	ldi	r24, 0x96	; 150
    203a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <stepInterval>
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    203e:	0e 0d       	add	r16, r14
    2040:	1f 1d       	adc	r17, r15
    2042:	c8 01       	movw	r24, r16
    2044:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <eeprom_read_word>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    2048:	9c 01       	movw	r18, r24
    204a:	20 51       	subi	r18, 0x10	; 16
    204c:	31 09       	sbc	r19, r1
    204e:	21 38       	cpi	r18, 0x81	; 129
    2050:	31 40       	sbci	r19, 0x01	; 1
    2052:	28 f4       	brcc	.+10     	; 0x205e <eep_operations+0x1a8>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    2054:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <smSteps+0x1>
    2058:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <smSteps>
    205c:	06 c0       	rjmp	.+12     	; 0x206a <eep_operations+0x1b4>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    205e:	80 e6       	ldi	r24, 0x60	; 96
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <smSteps+0x1>
    2066:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <smSteps>
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    206a:	0e 0d       	add	r16, r14
    206c:	1f 1d       	adc	r17, r15
    206e:	c8 01       	movw	r24, r16
    2070:	0e 94 db 28 	call	0x51b6	; 0x51b6 <eeprom_read_byte>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    2074:	82 33       	cpi	r24, 0x32	; 50
    2076:	18 f0       	brcs	.+6      	; 0x207e <eep_operations+0x1c8>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2078:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <lcdContrast>
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <eep_operations+0x1ce>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    207e:	86 e9       	ldi	r24, 0x96	; 150
    2080:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <lcdContrast>
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2084:	0e 0d       	add	r16, r14
    2086:	1f 1d       	adc	r17, r15
    2088:	c8 01       	movw	r24, r16
    208a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <eeprom_read_byte>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	98 0f       	add	r25, r24
    2092:	90 31       	cpi	r25, 0x10	; 16
    2094:	18 f4       	brcc	.+6      	; 0x209c <eep_operations+0x1e6>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2096:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <magnetsOnWheel>
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <eep_operations+0x1ec>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    209c:	86 e0       	ldi	r24, 0x06	; 6
    209e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <magnetsOnWheel>
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    20a2:	0e 0d       	add	r16, r14
    20a4:	1f 1d       	adc	r17, r15
    20a6:	c8 01       	movw	r24, r16
    20a8:	0e 94 db 28 	call	0x51b6	; 0x51b6 <eeprom_read_byte>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    20ac:	9f ef       	ldi	r25, 0xFF	; 255
    20ae:	98 0f       	add	r25, r24
    20b0:	92 30       	cpi	r25, 0x02	; 2
    20b2:	18 f4       	brcc	.+6      	; 0x20ba <eep_operations+0x204>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    20b4:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <stepMode>
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <eep_operations+0x20a>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <stepMode>
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    20c0:	0e 0d       	add	r16, r14
    20c2:	1f 1d       	adc	r17, r15
    20c4:	c8 01       	movw	r24, r16
    20c6:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <eeprom_read_dword>
    20ca:	4b 01       	movw	r8, r22
    20cc:	5c 01       	movw	r10, r24
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e4       	ldi	r21, 0x40	; 64
    20d6:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__gesf2>
    20da:	18 16       	cp	r1, r24
    20dc:	9c f0       	brlt	.+38     	; 0x2104 <eep_operations+0x24e>
    20de:	2a e9       	ldi	r18, 0x9A	; 154
    20e0:	39 e9       	ldi	r19, 0x99	; 153
    20e2:	49 e9       	ldi	r20, 0x99	; 153
    20e4:	5e e3       	ldi	r21, 0x3E	; 62
    20e6:	c5 01       	movw	r24, r10
    20e8:	b4 01       	movw	r22, r8
    20ea:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	4c f0       	brlt	.+18     	; 0x2104 <eep_operations+0x24e>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    20f2:	80 92 bd 02 	sts	0x02BD, r8	; 0x8002bd <wheelDiameter>
    20f6:	90 92 be 02 	sts	0x02BE, r9	; 0x8002be <wheelDiameter+0x1>
    20fa:	a0 92 bf 02 	sts	0x02BF, r10	; 0x8002bf <wheelDiameter+0x2>
    20fe:	b0 92 c0 02 	sts	0x02C0, r11	; 0x8002c0 <wheelDiameter+0x3>
    2102:	0c c0       	rjmp	.+24     	; 0x211c <eep_operations+0x266>
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    2104:	83 e3       	ldi	r24, 0x33	; 51
    2106:	93 e3       	ldi	r25, 0x33	; 51
    2108:	a3 e3       	ldi	r26, 0x33	; 51
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <wheelDiameter>
    2110:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <wheelDiameter+0x1>
    2114:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <wheelDiameter+0x2>
    2118:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <wheelDiameter+0x3>
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    211c:	0e 0d       	add	r16, r14
    211e:	1f 1d       	adc	r17, r15
    2120:	c8 01       	movw	r24, r16
    2122:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <eeprom_read_dword>
    2126:	4b 01       	movw	r8, r22
    2128:	5c 01       	movw	r10, r24
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__gesf2>
    2136:	18 16       	cp	r1, r24
    2138:	9c f0       	brlt	.+38     	; 0x2160 <eep_operations+0x2aa>
    213a:	2d ec       	ldi	r18, 0xCD	; 205
    213c:	3c ec       	ldi	r19, 0xCC	; 204
    213e:	4c ec       	ldi	r20, 0xCC	; 204
    2140:	5d e3       	ldi	r21, 0x3D	; 61
    2142:	c5 01       	movw	r24, r10
    2144:	b4 01       	movw	r22, r8
    2146:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    214a:	88 23       	and	r24, r24
    214c:	4c f0       	brlt	.+18     	; 0x2160 <eep_operations+0x2aa>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    214e:	80 92 b2 02 	sts	0x02B2, r8	; 0x8002b2 <gearRatio>
    2152:	90 92 b3 02 	sts	0x02B3, r9	; 0x8002b3 <gearRatio+0x1>
    2156:	a0 92 b4 02 	sts	0x02B4, r10	; 0x8002b4 <gearRatio+0x2>
    215a:	b0 92 b5 02 	sts	0x02B5, r11	; 0x8002b5 <gearRatio+0x3>
    215e:	0c c0       	rjmp	.+24     	; 0x2178 <eep_operations+0x2c2>
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e8       	ldi	r26, 0x80	; 128
    2166:	bf e3       	ldi	r27, 0x3F	; 63
    2168:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <gearRatio>
    216c:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <gearRatio+0x1>
    2170:	a0 93 b4 02 	sts	0x02B4, r26	; 0x8002b4 <gearRatio+0x2>
    2174:	b0 93 b5 02 	sts	0x02B5, r27	; 0x8002b5 <gearRatio+0x3>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2178:	c7 01       	movw	r24, r14
    217a:	80 0f       	add	r24, r16
    217c:	91 1f       	adc	r25, r17
    217e:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <eeprom_read_dword>
    2182:	6b 01       	movw	r12, r22
    2184:	7c 01       	movw	r14, r24
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 ea       	ldi	r20, 0xA0	; 160
    218c:	50 e4       	ldi	r21, 0x40	; 64
    218e:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__gesf2>
    2192:	18 16       	cp	r1, r24
    2194:	5c f0       	brlt	.+22     	; 0x21ac <eep_operations+0x2f6>
    2196:	2d ec       	ldi	r18, 0xCD	; 205
    2198:	3c ec       	ldi	r19, 0xCC	; 204
    219a:	4c ec       	ldi	r20, 0xCC	; 204
    219c:	5d e3       	ldi	r21, 0x3D	; 61
    219e:	c7 01       	movw	r24, r14
    21a0:	b6 01       	movw	r22, r12
    21a2:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	0c f0       	brlt	.+2      	; 0x21ac <eep_operations+0x2f6>
    21aa:	56 c0       	rjmp	.+172    	; 0x2258 <eep_operations+0x3a2>
    21ac:	83 e3       	ldi	r24, 0x33	; 51
    21ae:	93 e3       	ldi	r25, 0x33	; 51
    21b0:	a3 ea       	ldi	r26, 0xA3	; 163
    21b2:	bf e3       	ldi	r27, 0x3F	; 63
    21b4:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <degreesPerKmh>
    21b8:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <degreesPerKmh+0x1>
    21bc:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <degreesPerKmh+0x2>
    21c0:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <degreesPerKmh+0x3>
    21c4:	56 c0       	rjmp	.+172    	; 0x2272 <eep_operations+0x3bc>
    21c6:	c7 2c       	mov	r12, r7
    21c8:	d1 2c       	mov	r13, r1
	}
	if (eepAction==EEP_ODOMETER_READ){
    21ca:	78 01       	movw	r14, r16
    21cc:	c1 e0       	ldi	r28, 0x01	; 1
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <eep_operations+0x320>
    21d0:	ec 0c       	add	r14, r12
    21d2:	fd 1c       	adc	r15, r13
    21d4:	cf 5f       	subi	r28, 0xFF	; 255
		uint32_t tempMilage = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempMilage = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    21d6:	c7 01       	movw	r24, r14
    21d8:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <eeprom_read_dword>
			if(tempMilage>milage){	//finding the latest record (the highest value)
    21dc:	80 90 76 02 	lds	r8, 0x0276	; 0x800276 <milage>
    21e0:	90 90 77 02 	lds	r9, 0x0277	; 0x800277 <milage+0x1>
    21e4:	a0 90 78 02 	lds	r10, 0x0278	; 0x800278 <milage+0x2>
    21e8:	b0 90 79 02 	lds	r11, 0x0279	; 0x800279 <milage+0x3>
    21ec:	86 16       	cp	r8, r22
    21ee:	97 06       	cpc	r9, r23
    21f0:	a8 06       	cpc	r10, r24
    21f2:	b9 06       	cpc	r11, r25
    21f4:	78 f4       	brcc	.+30     	; 0x2214 <eep_operations+0x35e>
				milage = tempMilage;
    21f6:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <milage>
    21fa:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <milage+0x1>
    21fe:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <milage+0x2>
    2202:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <milage+0x3>
				odometerCurrentAddress = i + 1;	//address for the next record
    2206:	c0 93 7d 02 	sts	0x027D, r28	; 0x80027d <odometerCurrentAddress>
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    220a:	c9 31       	cpi	r28, 0x19	; 25
    220c:	08 f3       	brcs	.-62     	; 0x21d0 <eep_operations+0x31a>
    220e:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <odometerCurrentAddress>
    2212:	03 c0       	rjmp	.+6      	; 0x221a <eep_operations+0x364>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
		uint32_t tempMilage = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2214:	c9 31       	cpi	r28, 0x19	; 25
    2216:	e0 f2       	brcs	.-72     	; 0x21d0 <eep_operations+0x31a>
    2218:	2c c0       	rjmp	.+88     	; 0x2272 <eep_operations+0x3bc>
				odometerCurrentAddress = i + 1;	//address for the next record
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
    221a:	d3 30       	cpi	r29, 0x03	; 3
    221c:	51 f5       	brne	.+84     	; 0x2272 <eep_operations+0x3bc>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
    221e:	40 91 76 02 	lds	r20, 0x0276	; 0x800276 <milage>
    2222:	50 91 77 02 	lds	r21, 0x0277	; 0x800277 <milage+0x1>
    2226:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <milage+0x2>
    222a:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <milage+0x3>
    222e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <odometerCurrentAddress>
    2232:	98 01       	movw	r18, r16
    2234:	87 9d       	mul	r24, r7
    2236:	20 0d       	add	r18, r0
    2238:	31 1d       	adc	r19, r1
    223a:	11 24       	eor	r1, r1
    223c:	c9 01       	movw	r24, r18
    223e:	0e 94 12 29 	call	0x5224	; 0x5224 <eeprom_write_dword>
			odometerCurrentAddress++;
    2242:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <odometerCurrentAddress>
    2246:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2248:	89 31       	cpi	r24, 0x19	; 25
    224a:	18 f4       	brcc	.+6      	; 0x2252 <eep_operations+0x39c>
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
			odometerCurrentAddress++;
    224c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <odometerCurrentAddress>
    2250:	10 c0       	rjmp	.+32     	; 0x2272 <eep_operations+0x3bc>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2252:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <odometerCurrentAddress>
	}
}
    2256:	0d c0       	rjmp	.+26     	; 0x2272 <eep_operations+0x3bc>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2258:	c0 92 ad 02 	sts	0x02AD, r12	; 0x8002ad <degreesPerKmh>
    225c:	d0 92 ae 02 	sts	0x02AE, r13	; 0x8002ae <degreesPerKmh+0x1>
    2260:	e0 92 af 02 	sts	0x02AF, r14	; 0x8002af <degreesPerKmh+0x2>
    2264:	f0 92 b0 02 	sts	0x02B0, r15	; 0x8002b0 <degreesPerKmh+0x3>
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <eep_operations+0x3bc>
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
    226a:	42 30       	cpi	r20, 0x02	; 2
    226c:	09 f4       	brne	.+2      	; 0x2270 <eep_operations+0x3ba>
    226e:	ab cf       	rjmp	.-170    	; 0x21c6 <eep_operations+0x310>
    2270:	d4 cf       	rjmp	.-88     	; 0x221a <eep_operations+0x364>
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	df 90       	pop	r13
    2280:	cf 90       	pop	r12
    2282:	bf 90       	pop	r11
    2284:	af 90       	pop	r10
    2286:	9f 90       	pop	r9
    2288:	8f 90       	pop	r8
    228a:	7f 90       	pop	r7
    228c:	08 95       	ret

0000228e <presets>:
	 stepInterval = STEP_INTERVAL_DEFAULT;
	 smSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
	 stepMode = STEP_MODE_DEFAULT;
}

void presets (void){
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	cf 93       	push	r28
	DDRA|=_BV(0); //ENABLE 2
    2298:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA|=_BV(1); //PHASE 2
    229a:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA|=_BV(2); //PHASE 1
    229c:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA|=_BV(3); //ENABLE 1
    229e:	d3 9a       	sbi	0x1a, 3	; 26
	DDRD|=_BV(4);//PWM DIAL LIGHT
    22a0:	8c 9a       	sbi	0x11, 4	; 17
	DDRD|=_BV(5);//PWM ARROW LIGHT
    22a2:	8d 9a       	sbi	0x11, 5	; 17
	PORTA|=_BV(3);//ENABLE 1 high (disabled)
    22a4:	db 9a       	sbi	0x1b, 3	; 27
	PORTA|=_BV(0);//ENABLE 2 high (disabled)
    22a6:	d8 9a       	sbi	0x1b, 0	; 27
	PORTB|=_BV(5);//internal pull-up for external buttons on PB5, PB6, PB7
    22a8:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=_BV(6);
    22aa:	c6 9a       	sbi	0x18, 6	; 24
	PORTB|=_BV(7);
    22ac:	c7 9a       	sbi	0x18, 7	; 24
	//ADC setup
	ADCSRA |= _BV(ADEN);
    22ae:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADPS0);		//
    22b0:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    22b2:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |= _BV(ADPS2);		//
    22b4:	32 9a       	sbi	0x06, 2	; 6
	// reading data from EEPROM
	uint8_t	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    22b6:	88 e0       	ldi	r24, 0x08	; 8
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 db 28 	call	0x51b6	; 0x51b6 <eeprom_read_byte>
	if (firstEepRead){
    22be:	88 23       	and	r24, r24
    22c0:	89 f0       	breq	.+34     	; 0x22e4 <presets+0x56>
		set_default_values();
    22c2:	0e 94 09 0b 	call	0x1612	; 0x1612 <set_default_values>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	64 e0       	ldi	r22, 0x04	; 4
    22ca:	88 e0       	ldi	r24, 0x08	; 8
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    22d2:	c9 e1       	ldi	r28, 0x19	; 25
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    22d4:	43 e0       	ldi	r20, 0x03	; 3
    22d6:	64 e0       	ldi	r22, 0x04	; 4
    22d8:	80 e8       	ldi	r24, 0x80	; 128
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    22e0:	c1 50       	subi	r28, 0x01	; 1
	// reading data from EEPROM
	uint8_t	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		set_default_values();
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    22e2:	c1 f7       	brne	.-16     	; 0x22d4 <presets+0x46>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
		}
	}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	64 e0       	ldi	r22, 0x04	; 4
    22e8:	88 e0       	ldi	r24, 0x08	; 8
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    22f0:	42 e0       	ldi	r20, 0x02	; 2
    22f2:	64 e0       	ldi	r22, 0x04	; 4
    22f4:	80 e8       	ldi	r24, 0x80	; 128
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
	TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);//Timer2 is used to measure time between Hall sensor actuation
    22fc:	85 b5       	in	r24, 0x25	; 37
    22fe:	8e 60       	ori	r24, 0x0E	; 14
    2300:	85 bd       	out	0x25, r24	; 37
	OCR2 = TIC-1; //upper limit of Timer2
    2302:	8e ef       	ldi	r24, 0xFE	; 254
    2304:	83 bd       	out	0x23, r24	; 35
	//dial and arrow light PWM (Timer1)
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);	//Fast PWM 10-bit
    2306:	83 ea       	ldi	r24, 0xA3	; 163
    2308:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);	//prescaler = 64
    230a:	8b e0       	ldi	r24, 0x0B	; 11
    230c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    230e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <pwmArrow>
    2312:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    2316:	9b bd       	out	0x2b, r25	; 43
    2318:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    231a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <pwmDial>
    231e:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    2322:	99 bd       	out	0x29, r25	; 41
    2324:	88 bd       	out	0x28, r24	; 40
	//
	circumference = gearRatio * wheelDiameter * pi/magnetsOnWheel;	
    2326:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <wheelDiameter>
    232a:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <wheelDiameter+0x1>
    232e:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <wheelDiameter+0x2>
    2332:	50 91 c0 02 	lds	r21, 0x02C0	; 0x8002c0 <wheelDiameter+0x3>
    2336:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <gearRatio>
    233a:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <gearRatio+0x1>
    233e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <gearRatio+0x2>
    2342:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <gearRatio+0x3>
    2346:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    234a:	2b ed       	ldi	r18, 0xDB	; 219
    234c:	3f e0       	ldi	r19, 0x0F	; 15
    234e:	49 e4       	ldi	r20, 0x49	; 73
    2350:	50 e4       	ldi	r21, 0x40	; 64
    2352:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    2356:	6b 01       	movw	r12, r22
    2358:	7c 01       	movw	r14, r24
    235a:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <magnetsOnWheel>
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__floatsisf>
    2368:	9b 01       	movw	r18, r22
    236a:	ac 01       	movw	r20, r24
    236c:	c7 01       	movw	r24, r14
    236e:	b6 01       	movw	r22, r12
    2370:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    2374:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <circumference>
    2378:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <circumference+0x1>
    237c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <circumference+0x2>
    2380:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <circumference+0x3>
	timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, Timer2 prescaler=256)
    2384:	8d eb       	ldi	r24, 0xBD	; 189
    2386:	97 e3       	ldi	r25, 0x37	; 55
    2388:	a6 e8       	ldi	r26, 0x86	; 134
    238a:	b7 e3       	ldi	r27, 0x37	; 55
    238c:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <timePerTic>
    2390:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <timePerTic+0x1>
    2394:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <timePerTic+0x2>
    2398:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <timePerTic+0x3>
	kmhPerStep = (360.0/(smSteps*stepMode))/degreesPerKmh;
    239c:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <stepMode>
    23a0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <smSteps>
    23a4:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <smSteps+0x1>
    23a8:	28 9f       	mul	r18, r24
    23aa:	b0 01       	movw	r22, r0
    23ac:	29 9f       	mul	r18, r25
    23ae:	70 0d       	add	r23, r0
    23b0:	11 24       	eor	r1, r1
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    23ba:	9b 01       	movw	r18, r22
    23bc:	ac 01       	movw	r20, r24
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	84 eb       	ldi	r24, 0xB4	; 180
    23c4:	93 e4       	ldi	r25, 0x43	; 67
    23c6:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    23ca:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <degreesPerKmh>
    23ce:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    23d2:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    23d6:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    23da:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    23de:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <kmhPerStep>
    23e2:	70 93 88 02 	sts	0x0288, r23	; 0x800288 <kmhPerStep+0x1>
    23e6:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <kmhPerStep+0x2>
    23ea:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <kmhPerStep+0x3>
	//display initialization
	GLCD_Setup();
    23ee:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <GLCD_Setup>
	GLCD_Clear();
    23f2:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
	GLCD_SetContrast(lcdContrast);
    23f6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <lcdContrast>
    23fa:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <GLCD_SetContrast>
	GLCD_Render();
    23fe:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
	sei();
    2402:	78 94       	sei
	if (!arrowCalibrated) arrow_calibration();
    2404:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <arrowCalibrated>
    2408:	81 11       	cpse	r24, r1
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <presets+0x182>
    240c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <arrow_calibration>
	MCUCR|= _BV(ISC11); //Falling edge interrupt INT1 (Hall sensor)
    2410:	85 b7       	in	r24, 0x35	; 53
    2412:	88 60       	ori	r24, 0x08	; 8
    2414:	85 bf       	out	0x35, r24	; 53
	GICR|=_BV(INT1); //External Interrupt Enable INT1
    2416:	8b b7       	in	r24, 0x3b	; 59
    2418:	80 68       	ori	r24, 0x80	; 128
    241a:	8b bf       	out	0x3b, r24	; 59
}
    241c:	cf 91       	pop	r28
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	08 95       	ret

00002428 <calculate_speed>:
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
		TIMSK|=_BV(OCIE0);
	}
}

void calculate_speed(){
    2428:	cf 92       	push	r12
    242a:	df 92       	push	r13
    242c:	ef 92       	push	r14
    242e:	ff 92       	push	r15
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
	
	if(speedTimerRough>speedTimerRoughPrevious+PERIOD_INCREASE_TRESHOLD/magnetsOnWheel){	//If speed suddenly reduces to zero then next actuation of Hall sensor is not going to happen, so speedTimerRoughPrevious and previousTCNT2 will not be updated
    2434:	c0 91 bb 02 	lds	r28, 0x02BB	; 0x8002bb <magnetsOnWheel>
    2438:	d0 e0       	ldi	r29, 0x00	; 0
    243a:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <speedTimerRoughPrevious>
    243e:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <speedTimerRoughPrevious+0x1>
    2442:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <speedTimerRough>
    2446:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <speedTimerRough+0x1>
    244a:	8c e3       	ldi	r24, 0x3C	; 60
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	be 01       	movw	r22, r28
    2450:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__divmodhi4>
    2454:	26 0f       	add	r18, r22
    2456:	37 1f       	adc	r19, r23
    2458:	2e 17       	cp	r18, r30
    245a:	3f 07       	cpc	r19, r31
    245c:	88 f4       	brcc	.+34     	; 0x2480 <calculate_speed+0x58>
			speedTimerPrecise = speedTimerRough*(uint32_t)TIC;								//so if speedTimerRough increases significantly in comparison to previous period, speedTimerPrecise is updated using current speedTimerRough value
    245e:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <speedTimerRough>
    2462:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <speedTimerRough+0x1>
    2466:	af ef       	ldi	r26, 0xFF	; 255
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__umulhisi3>
    246e:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <speedTimerPrecise>
    2472:	70 93 9c 02 	sts	0x029C, r23	; 0x80029c <speedTimerPrecise+0x1>
    2476:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <speedTimerPrecise+0x2>
    247a:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <speedTimerPrecise+0x3>
    247e:	18 c0       	rjmp	.+48     	; 0x24b0 <calculate_speed+0x88>
	}else{
			speedTimerPrecise = (speedTimerRoughPrevious*(uint32_t)TIC) + previousTCNT2;
    2480:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <speedTimerRoughPrevious>
    2484:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <speedTimerRoughPrevious+0x1>
    2488:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <previousTCNT2>
    248c:	af ef       	ldi	r26, 0xFF	; 255
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__umulhisi3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	84 0f       	add	r24, r20
    249a:	91 1d       	adc	r25, r1
    249c:	a1 1d       	adc	r26, r1
    249e:	b1 1d       	adc	r27, r1
    24a0:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <speedTimerPrecise>
    24a4:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <speedTimerPrecise+0x1>
    24a8:	a0 93 9d 02 	sts	0x029D, r26	; 0x80029d <speedTimerPrecise+0x2>
    24ac:	b0 93 9e 02 	sts	0x029E, r27	; 0x80029e <speedTimerPrecise+0x3>
	}
	
	if (speedTimerPrecise){
    24b0:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <speedTimerPrecise>
    24b4:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <speedTimerPrecise+0x1>
    24b8:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <speedTimerPrecise+0x2>
    24bc:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <speedTimerPrecise+0x3>
    24c0:	61 15       	cp	r22, r1
    24c2:	71 05       	cpc	r23, r1
    24c4:	81 05       	cpc	r24, r1
    24c6:	91 05       	cpc	r25, r1
    24c8:	a1 f1       	breq	.+104    	; 0x2532 <calculate_speed+0x10a>
				frequency = 1.0/(timePerTic*speedTimerPrecise);
    24ca:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    24ce:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <timePerTic>
    24d2:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <timePerTic+0x1>
    24d6:	40 91 95 02 	lds	r20, 0x0295	; 0x800295 <timePerTic+0x2>
    24da:	50 91 96 02 	lds	r21, 0x0296	; 0x800296 <timePerTic+0x3>
    24de:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    24e2:	9b 01       	movw	r18, r22
    24e4:	ac 01       	movw	r20, r24
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	80 e8       	ldi	r24, 0x80	; 128
    24ec:	9f e3       	ldi	r25, 0x3F	; 63
    24ee:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    24f2:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <frequency>
    24f6:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <frequency+0x1>
    24fa:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <frequency+0x2>
    24fe:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <frequency+0x3>
				speedKmh = frequency*circumference*3.6; //3.6 is for converting m/s to km/h
    2502:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <circumference>
    2506:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <circumference+0x1>
    250a:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <circumference+0x2>
    250e:	50 91 92 02 	lds	r21, 0x0292	; 0x800292 <circumference+0x3>
    2512:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    2516:	26 e6       	ldi	r18, 0x66	; 102
    2518:	36 e6       	ldi	r19, 0x66	; 102
    251a:	46 e6       	ldi	r20, 0x66	; 102
    251c:	50 e4       	ldi	r21, 0x40	; 64
    251e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    2522:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <speedKmh>
    2526:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <speedKmh+0x1>
    252a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <speedKmh+0x2>
    252e:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <speedKmh+0x3>
	}
	if(speedTimerRough>(MAX_PERIOD/magnetsOnWheel)){	//if Hall sensor was not actuated for too long (MAX_PERIOD*TIC/magnetsOnWheel*0.16us) it means that vehicle does not move
    2532:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <speedTimerRough>
    2536:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <speedTimerRough+0x1>
    253a:	8c ed       	ldi	r24, 0xDC	; 220
    253c:	95 e0       	ldi	r25, 0x05	; 5
    253e:	be 01       	movw	r22, r28
    2540:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__divmodhi4>
    2544:	62 17       	cp	r22, r18
    2546:	73 07       	cpc	r23, r19
    2548:	08 f0       	brcs	.+2      	; 0x254c <calculate_speed+0x124>
    254a:	62 c0       	rjmp	.+196    	; 0x2610 <calculate_speed+0x1e8>
				TIMSK&=~_BV(OCIE2);
    254c:	89 b7       	in	r24, 0x39	; 57
    254e:	8f 77       	andi	r24, 0x7F	; 127
    2550:	89 bf       	out	0x39, r24	; 57
				TCNT2 = 0;
    2552:	14 bc       	out	0x24, r1	; 36
				speedTimerRough = 0;
    2554:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <speedTimerRough+0x1>
    2558:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <speedTimerRough>
				speedTimerRoughPrevious = 0;
    255c:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <speedTimerRoughPrevious+0x1>
    2560:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <speedTimerRoughPrevious>
				speedTimerPrecise = 0;
    2564:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <speedTimerPrecise>
    2568:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <speedTimerPrecise+0x1>
    256c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <speedTimerPrecise+0x2>
    2570:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <speedTimerPrecise+0x3>
				speedKmh = 0;
    2574:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <speedKmh>
    2578:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <speedKmh+0x1>
    257c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <speedKmh+0x2>
    2580:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <speedKmh+0x3>
				firstMeasure = 0;
    2584:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <firstMeasure>
				frequency = 0;
    2588:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <frequency>
    258c:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <frequency+0x1>
    2590:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <frequency+0x2>
    2594:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <frequency+0x3>
				previousTCNT2 = 0;
    2598:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <previousTCNT2>
				milage=milage+sensorActations*circumference;
    259c:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <sensorActations>
    25a0:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <sensorActations+0x1>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    25ac:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <circumference>
    25b0:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <circumference+0x1>
    25b4:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <circumference+0x2>
    25b8:	50 91 92 02 	lds	r21, 0x0292	; 0x800292 <circumference+0x3>
    25bc:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    25c0:	6b 01       	movw	r12, r22
    25c2:	7c 01       	movw	r14, r24
    25c4:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <milage>
    25c8:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <milage+0x1>
    25cc:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <milage+0x2>
    25d0:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <milage+0x3>
    25d4:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    25d8:	9b 01       	movw	r18, r22
    25da:	ac 01       	movw	r20, r24
    25dc:	c7 01       	movw	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__addsf3>
    25e4:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    25e8:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <milage>
    25ec:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <milage+0x1>
    25f0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <milage+0x2>
    25f4:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <milage+0x3>
				sensorActations = 0;
    25f8:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <sensorActations+0x1>
    25fc:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <sensorActations>
				cli();
    2600:	f8 94       	cli
				eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    2602:	43 e0       	ldi	r20, 0x03	; 3
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	80 e8       	ldi	r24, 0x80	; 128
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
				sei();
    260e:	78 94       	sei
	}
	if (speedKmh>scaleMax)speedKmh = scaleMax;
    2610:	c0 91 aa 02 	lds	r28, 0x02AA	; 0x8002aa <scaleMax>
    2614:	6c 2f       	mov	r22, r28
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__floatsisf>
    2620:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <speedKmh>
    2624:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <speedKmh+0x1>
    2628:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <speedKmh+0x2>
    262c:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <speedKmh+0x3>
    2630:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    2634:	88 23       	and	r24, r24
    2636:	74 f4       	brge	.+28     	; 0x2654 <calculate_speed+0x22c>
    2638:	6c 2f       	mov	r22, r28
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    2644:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <speedKmh>
    2648:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <speedKmh+0x1>
    264c:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <speedKmh+0x2>
    2650:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <speedKmh+0x3>
}
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	df 90       	pop	r13
    265e:	cf 90       	pop	r12
    2660:	08 95       	ret

00002662 <set_value>:
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}

uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    2662:	2f 92       	push	r2
    2664:	3f 92       	push	r3
    2666:	4f 92       	push	r4
    2668:	5f 92       	push	r5
    266a:	6f 92       	push	r6
    266c:	7f 92       	push	r7
    266e:	8f 92       	push	r8
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	2e 97       	sbiw	r28, 0x0e	; 14
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	5c 01       	movw	r10, r24
    2698:	4b 01       	movw	r8, r22
    269a:	5a 87       	std	Y+10, r21	; 0x0a
    269c:	49 87       	std	Y+9, r20	; 0x09
    269e:	d2 2e       	mov	r13, r18

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	48 e0       	ldi	r20, 0x08	; 8
    26a4:	65 e0       	ldi	r22, 0x05	; 5
    26a6:	80 ea       	ldi	r24, 0xA0	; 160
    26a8:	9b e0       	ldi	r25, 0x0B	; 11
    26aa:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <GLCD_SetFont>
	GLCD_Clear();
    26ae:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
	GLCD_GotoLine(1);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(10);
    26b8:	8a e0       	ldi	r24, 0x0A	; 10
    26ba:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString(text);
    26be:	c8 01       	movw	r24, r16
    26c0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoXY(90,24);
    26c4:	68 e1       	ldi	r22, 0x18	; 24
    26c6:	8a e5       	ldi	r24, 0x5A	; 90
    26c8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	GLCD_PrintString("Edit");
    26cc:	8b e6       	ldi	r24, 0x6B	; 107
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoXY(90,36);
    26d4:	64 e2       	ldi	r22, 0x24	; 36
    26d6:	8a e5       	ldi	r24, 0x5A	; 90
    26d8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	GLCD_PrintString("Back");
    26dc:	80 e7       	ldi	r24, 0x70	; 112
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoXY(90,48);
    26e4:	60 e3       	ldi	r22, 0x30	; 48
    26e6:	8a e5       	ldi	r24, 0x5A	; 90
    26e8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	GLCD_PrintString("Save");
    26ec:	85 e7       	ldi	r24, 0x75	; 117
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	
	if (tens){
    26f4:	dd 20       	and	r13, r13
    26f6:	09 f4       	brne	.+2      	; 0x26fa <set_value+0x98>
    26f8:	68 c0       	rjmp	.+208    	; 0x27ca <set_value+0x168>
		uint16_t devider = 1;
		for (int8_t i = 0;i<tens;i++){devider*=10;}
    26fa:	2d 2d       	mov	r18, r13
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	12 16       	cp	r1, r18
    2700:	13 06       	cpc	r1, r19
    2702:	bc f4       	brge	.+46     	; 0x2732 <set_value+0xd0>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	01 e0       	ldi	r16, 0x01	; 1
    2708:	10 e0       	ldi	r17, 0x00	; 0
    270a:	a8 01       	movw	r20, r16
    270c:	44 0f       	add	r20, r20
    270e:	55 1f       	adc	r21, r21
    2710:	00 0f       	add	r16, r16
    2712:	11 1f       	adc	r17, r17
    2714:	00 0f       	add	r16, r16
    2716:	11 1f       	adc	r17, r17
    2718:	00 0f       	add	r16, r16
    271a:	11 1f       	adc	r17, r17
    271c:	04 0f       	add	r16, r20
    271e:	15 1f       	adc	r17, r21
    2720:	8f 5f       	subi	r24, 0xFF	; 255
    2722:	48 2f       	mov	r20, r24
    2724:	08 2e       	mov	r0, r24
    2726:	00 0c       	add	r0, r0
    2728:	55 0b       	sbc	r21, r21
    272a:	42 17       	cp	r20, r18
    272c:	53 07       	cpc	r21, r19
    272e:	6c f3       	brlt	.-38     	; 0x270a <set_value+0xa8>
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <set_value+0xd4>
    2732:	01 e0       	ldi	r16, 0x01	; 1
    2734:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_GotoXY(6,41);
    2736:	69 e2       	ldi	r22, 0x29	; 41
    2738:	86 e0       	ldi	r24, 0x06	; 6
    273a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_PrintString("min:");
    273e:	8a e7       	ldi	r24, 0x7A	; 122
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_PrintDouble(minValue/(double)devider,devider);
    2746:	28 01       	movw	r4, r16
    2748:	61 2c       	mov	r6, r1
    274a:	71 2c       	mov	r7, r1
    274c:	c3 01       	movw	r24, r6
    274e:	b2 01       	movw	r22, r4
    2750:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    2754:	6d 83       	std	Y+5, r22	; 0x05
    2756:	7e 83       	std	Y+6, r23	; 0x06
    2758:	8f 83       	std	Y+7, r24	; 0x07
    275a:	98 87       	std	Y+8, r25	; 0x08
    275c:	b4 01       	movw	r22, r8
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    2766:	2d 81       	ldd	r18, Y+5	; 0x05
    2768:	3e 81       	ldd	r19, Y+6	; 0x06
    276a:	4f 81       	ldd	r20, Y+7	; 0x07
    276c:	58 85       	ldd	r21, Y+8	; 0x08
    276e:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    2772:	a3 01       	movw	r20, r6
    2774:	92 01       	movw	r18, r4
    2776:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
		GLCD_GotoXY(6,51);
    277a:	63 e3       	ldi	r22, 0x33	; 51
    277c:	86 e0       	ldi	r24, 0x06	; 6
    277e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_PrintString("max:");
    2782:	8f e7       	ldi	r24, 0x7F	; 127
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_PrintDouble(maxValue/(double)devider,devider);
    278a:	b5 01       	movw	r22, r10
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    2794:	2d 81       	ldd	r18, Y+5	; 0x05
    2796:	3e 81       	ldd	r19, Y+6	; 0x06
    2798:	4f 81       	ldd	r20, Y+7	; 0x07
    279a:	58 85       	ldd	r21, Y+8	; 0x08
    279c:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    27a0:	a3 01       	movw	r20, r6
    27a2:	92 01       	movw	r18, r4
    27a4:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    27a8:	29 85       	ldd	r18, Y+9	; 0x09
    27aa:	2b 87       	std	Y+11, r18	; 0x0b
    27ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    27ae:	3c 87       	std	Y+12, r19	; 0x0c
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    27b0:	ad 86       	std	Y+13, r10	; 0x0d
    27b2:	be 86       	std	Y+14, r11	; 0x0e
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    27b4:	0f 2e       	mov	r0, r31
    27b6:	fd e0       	ldi	r31, 0x0D	; 13
    27b8:	5f 2e       	mov	r5, r31
    27ba:	f0 2d       	mov	r31, r0
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
	GLCD_PrintInteger(digitsArr[digitIndex]);
		if ((digitIndex==tens)&&(tens)){
    27bc:	ed 2c       	mov	r14, r13
    27be:	f1 2c       	mov	r15, r1
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    27c0:	0f 2e       	mov	r0, r31
    27c2:	f3 ef       	ldi	r31, 0xF3	; 243
    27c4:	cf 2e       	mov	r12, r31
    27c6:	f0 2d       	mov	r31, r0
    27c8:	1b c0       	rjmp	.+54     	; 0x2800 <set_value+0x19e>
		GLCD_PrintDouble(minValue/(double)devider,devider);
		GLCD_GotoXY(6,51);
		GLCD_PrintString("max:");
		GLCD_PrintDouble(maxValue/(double)devider,devider);
		}else{
		GLCD_GotoXY(6,41);
    27ca:	69 e2       	ldi	r22, 0x29	; 41
    27cc:	86 e0       	ldi	r24, 0x06	; 6
    27ce:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_PrintString("min:");
    27d2:	8a e7       	ldi	r24, 0x7A	; 122
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_PrintInteger(minValue);
    27da:	b4 01       	movw	r22, r8
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		GLCD_GotoXY(6,51);
    27e4:	63 e3       	ldi	r22, 0x33	; 51
    27e6:	86 e0       	ldi	r24, 0x06	; 6
    27e8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		GLCD_PrintString("max:");
    27ec:	8f e7       	ldi	r24, 0x7F	; 127
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_PrintInteger(maxValue);
    27f4:	b5 01       	movw	r22, r10
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
    27fe:	d4 cf       	rjmp	.-88     	; 0x27a8 <set_value+0x146>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	89 2b       	or	r24, r25
    2806:	99 f0       	breq	.+38     	; 0x282e <set_value+0x1cc>
    2808:	2b 85       	ldd	r18, Y+11	; 0x0b
    280a:	3c 85       	ldd	r19, Y+12	; 0x0c
    280c:	00 e0       	ldi	r16, 0x00	; 0
		{
		   tempValue = tempValue / 10;
    280e:	ad ec       	ldi	r26, 0xCD	; 205
    2810:	bc ec       	ldi	r27, 0xCC	; 204
    2812:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__umulhisi3>
    2816:	9c 01       	movw	r18, r24
    2818:	36 95       	lsr	r19
    281a:	27 95       	ror	r18
    281c:	36 95       	lsr	r19
    281e:	27 95       	ror	r18
    2820:	36 95       	lsr	r19
    2822:	27 95       	ror	r18
		   valueLength++;
    2824:	0f 5f       	subi	r16, 0xFF	; 255
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2826:	21 15       	cp	r18, r1
    2828:	31 05       	cpc	r19, r1
    282a:	89 f7       	brne	.-30     	; 0x280e <set_value+0x1ac>
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <set_value+0x1ce>
	int8_t *digitsArr;
	int8_t currentItem = 0;
restore_initial_value:

	tempValue = currValue;
	valueLength = 0;
    282e:	00 e0       	ldi	r16, 0x00	; 0
		{
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
    2830:	1c 82       	std	Y+4, r1	; 0x04
	while(tempValue)       //finding the number of digits for maximum value allowed
    2832:	a1 14       	cp	r10, r1
    2834:	b1 04       	cpc	r11, r1
    2836:	09 f4       	brne	.+2      	; 0x283a <set_value+0x1d8>
    2838:	bf c1       	rjmp	.+894    	; 0x2bb8 <set_value+0x556>
    283a:	2d 85       	ldd	r18, Y+13	; 0x0d
    283c:	3e 85       	ldd	r19, Y+14	; 0x0e
    283e:	66 24       	eor	r6, r6
    2840:	63 94       	inc	r6
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <set_value+0x1e4>
    2844:	68 2e       	mov	r6, r24
		{
			tempValue = tempValue / 10;
    2846:	ad ec       	ldi	r26, 0xCD	; 205
    2848:	bc ec       	ldi	r27, 0xCC	; 204
    284a:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__umulhisi3>
    284e:	9c 01       	movw	r18, r24
    2850:	36 95       	lsr	r19
    2852:	27 95       	ror	r18
    2854:	36 95       	lsr	r19
    2856:	27 95       	ror	r18
    2858:	36 95       	lsr	r19
    285a:	27 95       	ror	r18
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	86 0d       	add	r24, r6
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2860:	21 15       	cp	r18, r1
    2862:	31 05       	cpc	r19, r1
    2864:	79 f7       	brne	.-34     	; 0x2844 <set_value+0x1e2>
    2866:	6c 82       	std	Y+4, r6	; 0x04
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2868:	71 2c       	mov	r7, r1
    286a:	c3 01       	movw	r24, r6
    286c:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <malloc>
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2874:	1b 82       	std	Y+3, r1	; 0x03
    2876:	16 14       	cp	r1, r6
    2878:	17 04       	cpc	r1, r7
    287a:	0c f0       	brlt	.+2      	; 0x287e <set_value+0x21c>
    287c:	4d c0       	rjmp	.+154    	; 0x2918 <set_value+0x2b6>
    287e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2880:	fc 85       	ldd	r31, Y+12	; 0x0c
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	80 e0       	ldi	r24, 0x00	; 0
		if (digitIndex<valueLength){
    2888:	40 2f       	mov	r20, r16
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	64 17       	cp	r22, r20
    288e:	75 07       	cpc	r23, r21
    2890:	7c f5       	brge	.+94     	; 0x28f0 <set_value+0x28e>
			digitsArr[digitIndex] = tempValue % 10;
    2892:	69 80       	ldd	r6, Y+1	; 0x01
    2894:	7a 80       	ldd	r7, Y+2	; 0x02
    2896:	68 0e       	add	r6, r24
    2898:	71 1c       	adc	r7, r1
    289a:	87 fd       	sbrc	r24, 7
    289c:	7a 94       	dec	r7
    289e:	9f 01       	movw	r18, r30
    28a0:	ad ec       	ldi	r26, 0xCD	; 205
    28a2:	bc ec       	ldi	r27, 0xCC	; 204
    28a4:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__umulhisi3>
    28a8:	96 95       	lsr	r25
    28aa:	87 95       	ror	r24
    28ac:	96 95       	lsr	r25
    28ae:	87 95       	ror	r24
    28b0:	96 95       	lsr	r25
    28b2:	87 95       	ror	r24
    28b4:	9c 01       	movw	r18, r24
    28b6:	22 0f       	add	r18, r18
    28b8:	33 1f       	adc	r19, r19
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	82 0f       	add	r24, r18
    28c8:	93 1f       	adc	r25, r19
    28ca:	df 01       	movw	r26, r30
    28cc:	a8 1b       	sub	r26, r24
    28ce:	b9 0b       	sbc	r27, r25
    28d0:	cd 01       	movw	r24, r26
    28d2:	d3 01       	movw	r26, r6
    28d4:	8c 93       	st	X, r24
			tempValue = tempValue / 10;
    28d6:	9f 01       	movw	r18, r30
    28d8:	ad ec       	ldi	r26, 0xCD	; 205
    28da:	bc ec       	ldi	r27, 0xCC	; 204
    28dc:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__umulhisi3>
    28e0:	fc 01       	movw	r30, r24
    28e2:	f6 95       	lsr	r31
    28e4:	e7 95       	ror	r30
    28e6:	f6 95       	lsr	r31
    28e8:	e7 95       	ror	r30
    28ea:	f6 95       	lsr	r31
    28ec:	e7 95       	ror	r30
    28ee:	07 c0       	rjmp	.+14     	; 0x28fe <set_value+0x29c>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    28f0:	a9 81       	ldd	r26, Y+1	; 0x01
    28f2:	ba 81       	ldd	r27, Y+2	; 0x02
    28f4:	a8 0f       	add	r26, r24
    28f6:	b1 1d       	adc	r27, r1
    28f8:	87 fd       	sbrc	r24, 7
    28fa:	ba 95       	dec	r27
    28fc:	1c 92       	st	X, r1
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	8f 5f       	subi	r24, 0xFF	; 255
    2902:	8b 83       	std	Y+3, r24	; 0x03
    2904:	68 2f       	mov	r22, r24
    2906:	08 2e       	mov	r0, r24
    2908:	00 0c       	add	r0, r0
    290a:	77 0b       	sbc	r23, r23
    290c:	2c 81       	ldd	r18, Y+4	; 0x04
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	62 17       	cp	r22, r18
    2912:	73 07       	cpc	r23, r19
    2914:	0c f4       	brge	.+2      	; 0x2918 <set_value+0x2b6>
    2916:	ba cf       	rjmp	.-140    	; 0x288c <set_value+0x22a>
			tempValue = tempValue / 10;
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	GLCD_GotoXY(5,20);
    2918:	64 e1       	ldi	r22, 0x14	; 20
    291a:	85 e0       	ldi	r24, 0x05	; 5
    291c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	41 e1       	ldi	r20, 0x11	; 17
    2924:	6c e0       	ldi	r22, 0x0C	; 12
    2926:	84 e7       	ldi	r24, 0x74	; 116
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <GLCD_SetFont>
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	0f ef       	ldi	r16, 0xFF	; 255
    2932:	08 0f       	add	r16, r24
    2934:	05 9d       	mul	r16, r5
    2936:	00 2d       	mov	r16, r0
    2938:	11 24       	eor	r1, r1
    293a:	0b 5f       	subi	r16, 0xFB	; 251
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	8b 83       	std	Y+3, r24	; 0x03
    2940:	88 23       	and	r24, r24
    2942:	0c f1       	brlt	.+66     	; 0x2986 <set_value+0x324>
	GLCD_PrintInteger(digitsArr[digitIndex]);
    2944:	e9 81       	ldd	r30, Y+1	; 0x01
    2946:	fa 81       	ldd	r31, Y+2	; 0x02
    2948:	e8 0f       	add	r30, r24
    294a:	f1 1d       	adc	r31, r1
    294c:	87 fd       	sbrc	r24, 7
    294e:	fa 95       	dec	r31
    2950:	60 81       	ld	r22, Z
    2952:	06 2e       	mov	r0, r22
    2954:	00 0c       	add	r0, r0
    2956:	77 0b       	sbc	r23, r23
    2958:	88 0b       	sbc	r24, r24
    295a:	99 0b       	sbc	r25, r25
    295c:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		if ((digitIndex==tens)&&(tens)){
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	08 2e       	mov	r0, r24
    2964:	00 0c       	add	r0, r0
    2966:	99 0b       	sbc	r25, r25
    2968:	8e 15       	cp	r24, r14
    296a:	9f 05       	cpc	r25, r15
    296c:	39 f4       	brne	.+14     	; 0x297c <set_value+0x31a>
    296e:	dd 20       	and	r13, r13
    2970:	29 f0       	breq	.+10     	; 0x297c <set_value+0x31a>
			GLCD_PrintString(".");
    2972:	81 e6       	ldi	r24, 0x61	; 97
    2974:	92 e0       	ldi	r25, 0x02	; 2
    2976:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
			rectShift+=5;
    297a:	0b 5f       	subi	r16, 0xFB	; 251
		}
	}
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	81 50       	subi	r24, 0x01	; 1
    2980:	8b 83       	std	Y+3, r24	; 0x03
    2982:	88 23       	and	r24, r24
    2984:	fc f6       	brge	.-66     	; 0x2944 <set_value+0x2e2>
		if ((digitIndex==tens)&&(tens)){
			GLCD_PrintString(".");
			rectShift+=5;
		}
	}
	GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2986:	4c e0       	ldi	r20, 0x0C	; 12
    2988:	40 0f       	add	r20, r16
    298a:	24 e2       	ldi	r18, 0x24	; 36
    298c:	64 e1       	ldi	r22, 0x14	; 20
    298e:	80 2f       	mov	r24, r16
    2990:	0e 94 83 20 	call	0x4106	; 0x4106 <GLCD_InvertRect>
	GLCD_Render();
    2994:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
	while (button_monitor());
    2998:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    299c:	81 11       	cpse	r24, r1
    299e:	fc cf       	rjmp	.-8      	; 0x2998 <set_value+0x336>
    29a0:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t currentButton = 0;
		while(1){
			currentButton = button_monitor();
    29a2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
			if(currentButton){
    29a6:	88 23       	and	r24, r24
    29a8:	09 f4       	brne	.+2      	; 0x29ac <set_value+0x34a>
    29aa:	fa c0       	rjmp	.+500    	; 0x2ba0 <set_value+0x53e>
				rectShift = 0;
				if (currentButton == 1) {
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <set_value+0x350>
    29b0:	85 c0       	rjmp	.+266    	; 0x2abc <set_value+0x45a>
							currentItem++;
    29b2:	0f 5f       	subi	r16, 0xFF	; 255
							if (currentItem==maxValueLength){
    29b4:	20 2f       	mov	r18, r16
    29b6:	00 2e       	mov	r0, r16
    29b8:	00 0c       	add	r0, r0
    29ba:	33 0b       	sbc	r19, r19
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	28 17       	cp	r18, r24
    29c2:	39 07       	cpc	r19, r25
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <set_value+0x366>
    29c6:	a6 c0       	rjmp	.+332    	; 0x2b14 <set_value+0x4b2>
								currentItem = 0;
								uint16_t checkValue = new_value();
    29c8:	9e 01       	movw	r18, r28
    29ca:	2f 5f       	subi	r18, 0xFF	; 255
    29cc:	3f 4f       	sbci	r19, 0xFF	; 255
    29ce:	19 01       	movw	r2, r18
    29d0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2939>
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
    29d4:	a8 16       	cp	r10, r24
    29d6:	b9 06       	cpc	r11, r25
    29d8:	08 f4       	brcc	.+2      	; 0x29dc <set_value+0x37a>
    29da:	12 cf       	rjmp	.-476    	; 0x2800 <set_value+0x19e>
    29dc:	88 15       	cp	r24, r8
    29de:	99 05       	cpc	r25, r9
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <set_value+0x382>
    29e2:	0e cf       	rjmp	.-484    	; 0x2800 <set_value+0x19e>
								//=====
								while(button_monitor());
    29e4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    29e8:	81 11       	cpse	r24, r1
    29ea:	fc cf       	rjmp	.-8      	; 0x29e4 <set_value+0x382>
								int8_t menuItem = 0;
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
    29ec:	24 e2       	ldi	r18, 0x24	; 36
    29ee:	41 e1       	ldi	r20, 0x11	; 17
    29f0:	64 e1       	ldi	r22, 0x14	; 20
    29f2:	85 e0       	ldi	r24, 0x05	; 5
    29f4:	0e 94 83 20 	call	0x4106	; 0x4106 <GLCD_InvertRect>
								currentItem = 0;
								uint16_t checkValue = new_value();
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
								//=====
								while(button_monitor());
								int8_t menuItem = 0;
    29f8:	10 e0       	ldi	r17, 0x00	; 0
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
								while(1){
										currentButton = button_monitor();
    29fa:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
										if(currentButton){
    29fe:	88 23       	and	r24, r24
    2a00:	91 f1       	breq	.+100    	; 0x2a66 <set_value+0x404>
											if (currentButton == 3) {
    2a02:	83 30       	cpi	r24, 0x03	; 3
    2a04:	21 f4       	brne	.+8      	; 0x2a0e <set_value+0x3ac>
												menuItem--;
    2a06:	11 50       	subi	r17, 0x01	; 1
												if (menuItem<0)menuItem = 2;
    2a08:	72 f5       	brpl	.+92     	; 0x2a66 <set_value+0x404>
    2a0a:	12 e0       	ldi	r17, 0x02	; 2
    2a0c:	2c c0       	rjmp	.+88     	; 0x2a66 <set_value+0x404>
											}
											else if (currentButton == 2) {
    2a0e:	82 30       	cpi	r24, 0x02	; 2
    2a10:	29 f4       	brne	.+10     	; 0x2a1c <set_value+0x3ba>
												menuItem++;
    2a12:	1f 5f       	subi	r17, 0xFF	; 255
												if (menuItem>2)menuItem = 0;
    2a14:	13 30       	cpi	r17, 0x03	; 3
    2a16:	3c f1       	brlt	.+78     	; 0x2a66 <set_value+0x404>
    2a18:	10 e0       	ldi	r17, 0x00	; 0
    2a1a:	25 c0       	rjmp	.+74     	; 0x2a66 <set_value+0x404>
											}
											else if (currentButton == 1) {
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	19 f5       	brne	.+70     	; 0x2a66 <set_value+0x404>
													if (!menuItem){	//getting back to value edit
    2a20:	11 11       	cpse	r17, r1
    2a22:	16 c0       	rjmp	.+44     	; 0x2a50 <set_value+0x3ee>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
    2a24:	00 e0       	ldi	r16, 0x00	; 0
    2a26:	21 e2       	ldi	r18, 0x21	; 33
    2a28:	44 e7       	ldi	r20, 0x74	; 116
    2a2a:	65 e1       	ldi	r22, 0x15	; 21
    2a2c:	86 e5       	ldi	r24, 0x56	; 86
    2a2e:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
    2a32:	2d e2       	ldi	r18, 0x2D	; 45
    2a34:	44 e7       	ldi	r20, 0x74	; 116
    2a36:	61 e2       	ldi	r22, 0x21	; 33
    2a38:	86 e5       	ldi	r24, 0x56	; 86
    2a3a:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
    2a3e:	29 e3       	ldi	r18, 0x39	; 57
    2a40:	44 e7       	ldi	r20, 0x74	; 116
    2a42:	6d e2       	ldi	r22, 0x2D	; 45
    2a44:	86 e5       	ldi	r24, 0x56	; 86
    2a46:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
														GLCD_Render();
    2a4a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
														break;
    2a4e:	62 c0       	rjmp	.+196    	; 0x2b14 <set_value+0x4b2>
													}
													else if (menuItem == 1){
    2a50:	11 30       	cpi	r17, 0x01	; 1
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <set_value+0x3f4>
    2a54:	ae c0       	rjmp	.+348    	; 0x2bb2 <set_value+0x550>
														return currValue; //if changes discarded - return initial value
													}
													else if (menuItem == 2){
    2a56:	12 30       	cpi	r17, 0x02	; 2
    2a58:	31 f4       	brne	.+12     	; 0x2a66 <set_value+0x404>
														return new_value();
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	1c 01       	movw	r2, r24
    2a60:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2939>
    2a64:	b1 c0       	rjmp	.+354    	; 0x2bc8 <set_value+0x566>
													}
											}
										}
							for (int8_t i=0;i<3;i++)GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);
    2a66:	00 e0       	ldi	r16, 0x00	; 0
    2a68:	21 e2       	ldi	r18, 0x21	; 33
    2a6a:	44 e7       	ldi	r20, 0x74	; 116
    2a6c:	65 e1       	ldi	r22, 0x15	; 21
    2a6e:	86 e5       	ldi	r24, 0x56	; 86
    2a70:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
    2a74:	2d e2       	ldi	r18, 0x2D	; 45
    2a76:	44 e7       	ldi	r20, 0x74	; 116
    2a78:	61 e2       	ldi	r22, 0x21	; 33
    2a7a:	86 e5       	ldi	r24, 0x56	; 86
    2a7c:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
    2a80:	29 e3       	ldi	r18, 0x39	; 57
    2a82:	44 e7       	ldi	r20, 0x74	; 116
    2a84:	6d e2       	ldi	r22, 0x2D	; 45
    2a86:	86 e5       	ldi	r24, 0x56	; 86
    2a88:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
							GLCD_DrawRectangle(86,21+menuItem*12,116,33+menuItem*12,GLCD_Black);
    2a8c:	61 2f       	mov	r22, r17
    2a8e:	66 0f       	add	r22, r22
    2a90:	61 0f       	add	r22, r17
    2a92:	66 0f       	add	r22, r22
    2a94:	66 0f       	add	r22, r22
    2a96:	21 e2       	ldi	r18, 0x21	; 33
    2a98:	26 0f       	add	r18, r22
    2a9a:	6b 5e       	subi	r22, 0xEB	; 235
    2a9c:	0f ef       	ldi	r16, 0xFF	; 255
    2a9e:	44 e7       	ldi	r20, 0x74	; 116
    2aa0:	86 e5       	ldi	r24, 0x56	; 86
    2aa2:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
							GLCD_Render();
    2aa6:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
							while(button_monitor());
    2aaa:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    2aae:	81 11       	cpse	r24, r1
    2ab0:	fc cf       	rjmp	.-8      	; 0x2aaa <set_value+0x448>
							while(!button_monitor());
    2ab2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    2ab6:	88 23       	and	r24, r24
    2ab8:	e1 f3       	breq	.-8      	; 0x2ab2 <set_value+0x450>
    2aba:	9f cf       	rjmp	.-194    	; 0x29fa <set_value+0x398>
							}//
						}
					}
					if (currentButton == 3) {
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	a1 f4       	brne	.+40     	; 0x2ae8 <set_value+0x486>
						digitsArr[currentItem]++;
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	80 2f       	mov	r24, r16
    2ac6:	00 2e       	mov	r0, r16
    2ac8:	00 0c       	add	r0, r0
    2aca:	99 0b       	sbc	r25, r25
    2acc:	e8 0f       	add	r30, r24
    2ace:	f9 1f       	adc	r31, r25
    2ad0:	20 81       	ld	r18, Z
    2ad2:	2f 5f       	subi	r18, 0xFF	; 255
    2ad4:	20 83       	st	Z, r18
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    2ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ada:	e8 0f       	add	r30, r24
    2adc:	f9 1f       	adc	r31, r25
    2ade:	80 81       	ld	r24, Z
    2ae0:	8a 30       	cpi	r24, 0x0A	; 10
    2ae2:	c4 f0       	brlt	.+48     	; 0x2b14 <set_value+0x4b2>
    2ae4:	10 82       	st	Z, r1
    2ae6:	16 c0       	rjmp	.+44     	; 0x2b14 <set_value+0x4b2>
					}
					else if (currentButton == 2) {
    2ae8:	82 30       	cpi	r24, 0x02	; 2
    2aea:	a1 f4       	brne	.+40     	; 0x2b14 <set_value+0x4b2>
						digitsArr[currentItem]--;
    2aec:	e9 81       	ldd	r30, Y+1	; 0x01
    2aee:	fa 81       	ldd	r31, Y+2	; 0x02
    2af0:	80 2f       	mov	r24, r16
    2af2:	00 2e       	mov	r0, r16
    2af4:	00 0c       	add	r0, r0
    2af6:	99 0b       	sbc	r25, r25
    2af8:	e8 0f       	add	r30, r24
    2afa:	f9 1f       	adc	r31, r25
    2afc:	20 81       	ld	r18, Z
    2afe:	21 50       	subi	r18, 0x01	; 1
    2b00:	20 83       	st	Z, r18
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	e8 0f       	add	r30, r24
    2b08:	f9 1f       	adc	r31, r25
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 23       	and	r24, r24
    2b0e:	14 f4       	brge	.+4      	; 0x2b14 <set_value+0x4b2>
    2b10:	99 e0       	ldi	r25, 0x09	; 9
    2b12:	90 83       	st	Z, r25
					}
			GLCD_GotoXY(5,20);
    2b14:	64 e1       	ldi	r22, 0x14	; 20
    2b16:	85 e0       	ldi	r24, 0x05	; 5
    2b18:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	8b 83       	std	Y+3, r24	; 0x03
    2b22:	88 23       	and	r24, r24
    2b24:	04 f1       	brlt	.+64     	; 0x2b66 <set_value+0x504>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	e8 0f       	add	r30, r24
    2b2c:	f1 1d       	adc	r31, r1
    2b2e:	87 fd       	sbrc	r24, 7
    2b30:	fa 95       	dec	r31
    2b32:	60 81       	ld	r22, Z
    2b34:	06 2e       	mov	r0, r22
    2b36:	00 0c       	add	r0, r0
    2b38:	77 0b       	sbc	r23, r23
    2b3a:	88 0b       	sbc	r24, r24
    2b3c:	99 0b       	sbc	r25, r25
    2b3e:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	08 2e       	mov	r0, r24
    2b46:	00 0c       	add	r0, r0
    2b48:	99 0b       	sbc	r25, r25
    2b4a:	8e 15       	cp	r24, r14
    2b4c:	9f 05       	cpc	r25, r15
    2b4e:	31 f4       	brne	.+12     	; 0x2b5c <set_value+0x4fa>
    2b50:	dd 20       	and	r13, r13
    2b52:	21 f0       	breq	.+8      	; 0x2b5c <set_value+0x4fa>
    2b54:	81 e6       	ldi	r24, 0x61	; 97
    2b56:	92 e0       	ldi	r25, 0x02	; 2
    2b58:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
					else if (currentButton == 2) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
					}
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	81 50       	subi	r24, 0x01	; 1
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	88 23       	and	r24, r24
    2b64:	04 f7       	brge	.-64     	; 0x2b26 <set_value+0x4c4>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2b66:	8c 81       	ldd	r24, Y+4	; 0x04
    2b68:	81 50       	subi	r24, 0x01	; 1
    2b6a:	0c 9d       	mul	r16, r12
    2b6c:	90 2d       	mov	r25, r0
    2b6e:	11 24       	eor	r1, r1
    2b70:	85 9d       	mul	r24, r5
    2b72:	90 0d       	add	r25, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	89 0f       	add	r24, r25
			if (tens){
    2b7a:	dd 20       	and	r13, r13
    2b7c:	49 f0       	breq	.+18     	; 0x2b90 <set_value+0x52e>
					if(currentItem<tens){
    2b7e:	20 2f       	mov	r18, r16
    2b80:	00 2e       	mov	r0, r16
    2b82:	00 0c       	add	r0, r0
    2b84:	33 0b       	sbc	r19, r19
    2b86:	2e 15       	cp	r18, r14
    2b88:	3f 05       	cpc	r19, r15
    2b8a:	14 f4       	brge	.+4      	; 0x2b90 <set_value+0x52e>
						rectShift+=5;
    2b8c:	8a e0       	ldi	r24, 0x0A	; 10
    2b8e:	89 0f       	add	r24, r25
					}
			}
			GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2b90:	4c e0       	ldi	r20, 0x0C	; 12
    2b92:	48 0f       	add	r20, r24
    2b94:	24 e2       	ldi	r18, 0x24	; 36
    2b96:	64 e1       	ldi	r22, 0x14	; 20
    2b98:	0e 94 83 20 	call	0x4106	; 0x4106 <GLCD_InvertRect>
			GLCD_Render();
    2b9c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
		}
		
		while(button_monitor());
    2ba0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    2ba4:	81 11       	cpse	r24, r1
    2ba6:	fc cf       	rjmp	.-8      	; 0x2ba0 <set_value+0x53e>
		while(!button_monitor());
    2ba8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    2bac:	88 23       	and	r24, r24
    2bae:	e1 f3       	breq	.-8      	; 0x2ba8 <set_value+0x546>
    2bb0:	f8 ce       	rjmp	.-528    	; 0x29a2 <set_value+0x340>
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
														GLCD_Render();
														break;
													}
													else if (menuItem == 1){
														return currValue; //if changes discarded - return initial value
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	08 c0       	rjmp	.+16     	; 0x2bc8 <set_value+0x566>
	while(tempValue)       //finding the number of digits for maximum value allowed
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <malloc>
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2bc4:	1b 82       	std	Y+3, r1	; 0x03
    2bc6:	a8 ce       	rjmp	.-688    	; 0x2918 <set_value+0x2b6>
		}
		
		while(button_monitor());
		while(!button_monitor());
	}
}
    2bc8:	2e 96       	adiw	r28, 0x0e	; 14
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	9f 90       	pop	r9
    2bea:	8f 90       	pop	r8
    2bec:	7f 90       	pop	r7
    2bee:	6f 90       	pop	r6
    2bf0:	5f 90       	pop	r5
    2bf2:	4f 90       	pop	r4
    2bf4:	3f 90       	pop	r3
    2bf6:	2f 90       	pop	r2
    2bf8:	08 95       	ret

00002bfa <debug_screen>:
void debug_screen(){
	uint8_t xOfset1 = 4;
	uint8_t xOfset2 = 26;
	uint8_t xOfset3 = 56;
	uint8_t xOfset4 = 82;
	GLCD_Clear();
    2bfa:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	48 e0       	ldi	r20, 0x08	; 8
    2c02:	65 e0       	ldi	r22, 0x05	; 5
    2c04:	80 ea       	ldi	r24, 0xA0	; 160
    2c06:	9b e0       	ldi	r25, 0x0B	; 11
    2c08:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <GLCD_SetFont>
	GLCD_GotoLine(1);
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c12:	84 e0       	ldi	r24, 0x04	; 4
    2c14:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("Spd");
    2c18:	84 e8       	ldi	r24, 0x84	; 132
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c20:	8a e1       	ldi	r24, 0x1A	; 26
    2c22:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintDouble(speedKmh,10);
    2c26:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <speedKmh>
    2c2a:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <speedKmh+0x1>
    2c2e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <speedKmh+0x2>
    2c32:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <speedKmh+0x3>
    2c36:	2a e0       	ldi	r18, 0x0A	; 10
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2c42:	88 e3       	ldi	r24, 0x38	; 56
    2c44:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("Ubt");
    2c48:	88 e8       	ldi	r24, 0x88	; 136
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2c50:	82 e5       	ldi	r24, 0x52	; 82
    2c52:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintDouble(newVoltage/10.0,100);
    2c56:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <newVoltage>
    2c5a:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <newVoltage+0x1>
    2c5e:	07 2e       	mov	r0, r23
    2c60:	00 0c       	add	r0, r0
    2c62:	88 0b       	sbc	r24, r24
    2c64:	99 0b       	sbc	r25, r25
    2c66:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__floatsisf>
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	51 e4       	ldi	r21, 0x41	; 65
    2c72:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    2c76:	24 e6       	ldi	r18, 0x64	; 100
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
	
	GLCD_GotoLine(2);
    2c82:	82 e0       	ldi	r24, 0x02	; 2
    2c84:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c88:	84 e0       	ldi	r24, 0x04	; 4
    2c8a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("Frq");
    2c8e:	8c e8       	ldi	r24, 0x8C	; 140
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c96:	8a e1       	ldi	r24, 0x1A	; 26
    2c98:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintDouble(frequency,10);
    2c9c:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <frequency>
    2ca0:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <frequency+0x1>
    2ca4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <frequency+0x2>
    2ca8:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <frequency+0x3>
    2cac:	2a e0       	ldi	r18, 0x0A	; 10
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2cb8:	88 e3       	ldi	r24, 0x38	; 56
    2cba:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("StP");
    2cbe:	80 e9       	ldi	r24, 0x90	; 144
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2cc6:	82 e5       	ldi	r24, 0x52	; 82
    2cc8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerPrecise);
    2ccc:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <speedTimerPrecise>
    2cd0:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <speedTimerPrecise+0x1>
    2cd4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <speedTimerPrecise+0x2>
    2cd8:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <speedTimerPrecise+0x3>
    2cdc:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	
	GLCD_GotoLine(3);
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2ce6:	84 e0       	ldi	r24, 0x04	; 4
    2ce8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("Stp");
    2cec:	84 e9       	ldi	r24, 0x94	; 148
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2cf4:	8a e1       	ldi	r24, 0x1A	; 26
    2cf6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(steps);
    2cfa:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <steps>
    2cfe:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <steps+0x1>
    2d02:	07 2e       	mov	r0, r23
    2d04:	00 0c       	add	r0, r0
    2d06:	88 0b       	sbc	r24, r24
    2d08:	99 0b       	sbc	r25, r25
    2d0a:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2d0e:	88 e3       	ldi	r24, 0x38	; 56
    2d10:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("StR");
    2d14:	88 e9       	ldi	r24, 0x98	; 152
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2d1c:	82 e5       	ldi	r24, 0x52	; 82
    2d1e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRough);
    2d22:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <speedTimerRough>
    2d26:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <speedTimerRough+0x1>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	
	GLCD_GotoLine(4);
    2d32:	84 e0       	ldi	r24, 0x04	; 4
    2d34:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2d38:	84 e0       	ldi	r24, 0x04	; 4
    2d3a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("nSt");
    2d3e:	8c e9       	ldi	r24, 0x9C	; 156
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2d46:	8a e1       	ldi	r24, 0x1A	; 26
    2d48:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(newSteps);
    2d4c:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <newSteps>
    2d50:	70 91 86 02 	lds	r23, 0x0286	; 0x800286 <newSteps+0x1>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2d5c:	88 e3       	ldi	r24, 0x38	; 56
    2d5e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("SRt");
    2d62:	80 ea       	ldi	r24, 0xA0	; 160
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2d6a:	82 e5       	ldi	r24, 0x52	; 82
    2d6c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRoughPrevious);
    2d70:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <speedTimerRoughPrevious>
    2d74:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <speedTimerRoughPrevious+0x1>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	
	GLCD_GotoLine(5);
    2d80:	85 e0       	ldi	r24, 0x05	; 5
    2d82:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2d86:	84 e0       	ldi	r24, 0x04	; 4
    2d88:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("Phs");
    2d8c:	84 ea       	ldi	r24, 0xA4	; 164
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2d94:	8a e1       	ldi	r24, 0x1A	; 26
    2d96:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(phase);
    2d9a:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <phase>
    2d9e:	06 2e       	mov	r0, r22
    2da0:	00 0c       	add	r0, r0
    2da2:	77 0b       	sbc	r23, r23
    2da4:	88 0b       	sbc	r24, r24
    2da6:	99 0b       	sbc	r25, r25
    2da8:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	
	GLCD_GotoLine(6);
    2dac:	86 e0       	ldi	r24, 0x06	; 6
    2dae:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2db2:	84 e0       	ldi	r24, 0x04	; 4
    2db4:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("TRt");
    2db8:	88 ea       	ldi	r24, 0xA8	; 168
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2dc0:	8a e1       	ldi	r24, 0x1A	; 26
    2dc2:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintInteger(sensorActations);
    2dc6:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <sensorActations>
    2dca:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <sensorActations+0x1>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		
	GLCD_GotoX(xOfset3);
    2dd6:	88 e3       	ldi	r24, 0x38	; 56
    2dd8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintString("Mil");
    2ddc:	8c ea       	ldi	r24, 0xAC	; 172
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2de4:	82 e5       	ldi	r24, 0x52	; 82
    2de6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_PrintDouble(milage/1000.0,100);
    2dea:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <milage>
    2dee:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <milage+0x1>
    2df2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <milage+0x2>
    2df6:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <milage+0x3>
    2dfa:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	4a e7       	ldi	r20, 0x7A	; 122
    2e04:	54 e4       	ldi	r21, 0x44	; 68
    2e06:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    2e0a:	24 e6       	ldi	r18, 0x64	; 100
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
 	GLCD_Render();
    2e16:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
    2e1a:	08 95       	ret

00002e1c <main>:
	GICR|=_BV(INT1); //External Interrupt Enable INT1
}

int main(void)
{
	presets();
    2e1c:	0e 94 47 11 	call	0x228e	; 0x228e <presets>
	if (!debugMode)main_screen();
    2e20:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <debugMode>
    2e24:	81 11       	cpse	r24, r1
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <main+0x10>
    2e28:	0e 94 36 0c 	call	0x186c	; 0x186c <main_screen>
	while(1){
		data_monitor();
    2e2c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <data_monitor>
		calculate_speed();
    2e30:	0e 94 14 12 	call	0x2428	; 0x2428 <calculate_speed>
		arrow_position_update();
    2e34:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <arrow_position_update>
		if(!debugMode)signal_monitor();else debug_screen();
    2e38:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <debugMode>
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	03 c0       	rjmp	.+6      	; 0x2e46 <main+0x2a>
    2e40:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <signal_monitor>
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <main+0x2e>
    2e46:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <debug_screen>
		if(button_monitor()) menu_screen();
    2e4a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    2e4e:	88 23       	and	r24, r24
    2e50:	69 f3       	breq	.-38     	; 0x2e2c <main+0x10>
    2e52:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <menu_screen>
    2e56:	ea cf       	rjmp	.-44     	; 0x2e2c <main+0x10>

00002e58 <menu_screen>:

void menu_screen(){
	uint8_t offset = 85;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
    2e58:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <menuItem.2781>
    2e5c:	86 30       	cpi	r24, 0x06	; 6
    2e5e:	54 f0       	brlt	.+20     	; 0x2e74 <menu_screen+0x1c>
    2e60:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
    2e64:	8f 5f       	subi	r24, 0xFF	; 255
    2e66:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
    2e6a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <menuItem.2781>
	if (menuItem < 0){page--;menuItem= 5;}
	if ((page == 2)&&(menuItem > 3)){
    2e6e:	82 30       	cpi	r24, 0x02	; 2
    2e70:	d9 f4       	brne	.+54     	; 0x2ea8 <menu_screen+0x50>
    2e72:	24 c0       	rjmp	.+72     	; 0x2ebc <menu_screen+0x64>
void menu_screen(){
	uint8_t offset = 85;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
	if (menuItem < 0){page--;menuItem= 5;}
    2e74:	88 23       	and	r24, r24
    2e76:	5c f4       	brge	.+22     	; 0x2e8e <menu_screen+0x36>
    2e78:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
    2e7c:	81 50       	subi	r24, 0x01	; 1
    2e7e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
    2e82:	95 e0       	ldi	r25, 0x05	; 5
    2e84:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <menuItem.2781>
	if ((page == 2)&&(menuItem > 3)){
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	71 f4       	brne	.+28     	; 0x2ea8 <menu_screen+0x50>
    2e8c:	08 c0       	rjmp	.+16     	; 0x2e9e <menu_screen+0x46>
    2e8e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
    2e92:	82 30       	cpi	r24, 0x02	; 2
    2e94:	49 f4       	brne	.+18     	; 0x2ea8 <menu_screen+0x50>
    2e96:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <menuItem.2781>
    2e9a:	84 30       	cpi	r24, 0x04	; 4
    2e9c:	7c f0       	brlt	.+30     	; 0x2ebc <menu_screen+0x64>
		page = 0;
    2e9e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end>
		menuItem = 0;
    2ea2:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <menuItem.2781>
    2ea6:	0a c0       	rjmp	.+20     	; 0x2ebc <menu_screen+0x64>
	}
	if (page<0){page = 2;menuItem = 3;}
    2ea8:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
    2eac:	88 23       	and	r24, r24
    2eae:	34 f4       	brge	.+12     	; 0x2ebc <menu_screen+0x64>
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
    2eb6:	83 e0       	ldi	r24, 0x03	; 3
    2eb8:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <menuItem.2781>
	GLCD_Clear();
    2ebc:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	48 e0       	ldi	r20, 0x08	; 8
    2ec4:	65 e0       	ldi	r22, 0x05	; 5
    2ec6:	80 ea       	ldi	r24, 0xA0	; 160
    2ec8:	9b e0       	ldi	r25, 0x0B	; 11
    2eca:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <GLCD_SetFont>
	if(page==0){
    2ece:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	89 c0       	rjmp	.+274    	; 0x2fe8 <menu_screen+0x190>
		//item 0
		GLCD_GotoX(10);
    2ed6:	8a e0       	ldi	r24, 0x0A	; 10
    2ed8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(1);
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Dial PWM");
    2ee2:	80 eb       	ldi	r24, 0xB0	; 176
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2eea:	85 e5       	ldi	r24, 0x55	; 85
    2eec:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(pwmDial);
    2ef0:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <pwmDial>
    2ef4:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 1
		GLCD_GotoX(10);
    2f00:	8a e0       	ldi	r24, 0x0A	; 10
    2f02:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(2);
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Arrow PWM");
    2f0c:	89 eb       	ldi	r24, 0xB9	; 185
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f14:	85 e5       	ldi	r24, 0x55	; 85
    2f16:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(pwmArrow);
    2f1a:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <pwmArrow>
    2f1e:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 2
		GLCD_GotoX(10);
    2f2a:	8a e0       	ldi	r24, 0x0A	; 10
    2f2c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(3);
    2f30:	83 e0       	ldi	r24, 0x03	; 3
    2f32:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Wheel D");
    2f36:	83 ec       	ldi	r24, 0xC3	; 195
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f3e:	85 e5       	ldi	r24, 0x55	; 85
    2f40:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintDouble(wheelDiameter,1000);
    2f44:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <wheelDiameter>
    2f48:	70 91 be 02 	lds	r23, 0x02BE	; 0x8002be <wheelDiameter+0x1>
    2f4c:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <wheelDiameter+0x2>
    2f50:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <wheelDiameter+0x3>
    2f54:	28 ee       	ldi	r18, 0xE8	; 232
    2f56:	33 e0       	ldi	r19, 0x03	; 3
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
		//item 3
		GLCD_GotoX(10);
    2f60:	8a e0       	ldi	r24, 0x0A	; 10
    2f62:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(4);
    2f66:	84 e0       	ldi	r24, 0x04	; 4
    2f68:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Ratio");
    2f6c:	8b ec       	ldi	r24, 0xCB	; 203
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f74:	85 e5       	ldi	r24, 0x55	; 85
    2f76:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintDouble(gearRatio,1000);
    2f7a:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <gearRatio>
    2f7e:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <gearRatio+0x1>
    2f82:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <gearRatio+0x2>
    2f86:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <gearRatio+0x3>
    2f8a:	28 ee       	ldi	r18, 0xE8	; 232
    2f8c:	33 e0       	ldi	r19, 0x03	; 3
    2f8e:	40 e0       	ldi	r20, 0x00	; 0
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
		//item 4
		GLCD_GotoX(10);
    2f96:	8a e0       	ldi	r24, 0x0A	; 10
    2f98:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(5);
    2f9c:	85 e0       	ldi	r24, 0x05	; 5
    2f9e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Magnets");
    2fa2:	81 ed       	ldi	r24, 0xD1	; 209
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2faa:	85 e5       	ldi	r24, 0x55	; 85
    2fac:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(magnetsOnWheel);
    2fb0:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <magnetsOnWheel>
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 5
		GLCD_GotoX(10);
    2fbe:	8a e0       	ldi	r24, 0x0A	; 10
    2fc0:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(6);
    2fc4:	86 e0       	ldi	r24, 0x06	; 6
    2fc6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Step mode");
    2fca:	89 ed       	ldi	r24, 0xD9	; 217
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2fd2:	85 e5       	ldi	r24, 0x55	; 85
    2fd4:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(stepMode);
    2fd8:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <stepMode>
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
    2fe6:	aa c0       	rjmp	.+340    	; 0x313c <menu_screen+0x2e4>
	}
	else if (page==1){
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	09 f0       	breq	.+2      	; 0x2fee <menu_screen+0x196>
    2fec:	7a c0       	rjmp	.+244    	; 0x30e2 <menu_screen+0x28a>
		//item 6
		GLCD_GotoX(10);
    2fee:	8a e0       	ldi	r24, 0x0A	; 10
    2ff0:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(1);
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Max speed");
    2ffa:	83 ee       	ldi	r24, 0xE3	; 227
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3002:	85 e5       	ldi	r24, 0x55	; 85
    3004:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(scaleMax);
    3008:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <scaleMax>
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 7
		GLCD_GotoX(10);
    3016:	8a e0       	ldi	r24, 0x0A	; 10
    3018:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(2);
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Deg/kmh");
    3022:	8d ee       	ldi	r24, 0xED	; 237
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    302a:	85 e5       	ldi	r24, 0x55	; 85
    302c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintDouble(degreesPerKmh,1000);
    3030:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <degreesPerKmh>
    3034:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    3038:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    303c:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    3040:	28 ee       	ldi	r18, 0xE8	; 232
    3042:	33 e0       	ldi	r19, 0x03	; 3
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	0e 94 89 24 	call	0x4912	; 0x4912 <GLCD_PrintDouble>
		//item 8
		GLCD_GotoX(10);
    304c:	8a e0       	ldi	r24, 0x0A	; 10
    304e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(3);
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("SM steps");
    3058:	85 ef       	ldi	r24, 0xF5	; 245
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    3060:	85 e5       	ldi	r24, 0x55	; 85
    3062:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(smSteps);
    3066:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <smSteps>
    306a:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <smSteps+0x1>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 9
		GLCD_GotoX(10);
    3076:	8a e0       	ldi	r24, 0x0A	; 10
    3078:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(4);
    307c:	84 e0       	ldi	r24, 0x04	; 4
    307e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Step inter.");
    3082:	8e ef       	ldi	r24, 0xFE	; 254
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    308a:	85 e5       	ldi	r24, 0x55	; 85
    308c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(stepInterval);
    3090:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <stepInterval>
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 10
		GLCD_GotoX(10);
    309e:	8a e0       	ldi	r24, 0x0A	; 10
    30a0:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(5);
    30a4:	85 e0       	ldi	r24, 0x05	; 5
    30a6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("LCD contrast");
    30aa:	8a e0       	ldi	r24, 0x0A	; 10
    30ac:	91 e0       	ldi	r25, 0x01	; 1
    30ae:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    30b2:	85 e5       	ldi	r24, 0x55	; 85
    30b4:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_PrintInteger(lcdContrast);
    30b8:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <lcdContrast>
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		//item 11
		GLCD_GotoX(10);
    30c6:	8a e0       	ldi	r24, 0x0A	; 10
    30c8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(6);
    30cc:	86 e0       	ldi	r24, 0x06	; 6
    30ce:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Debug mode");
    30d2:	87 e1       	ldi	r24, 0x17	; 23
    30d4:	91 e0       	ldi	r25, 0x01	; 1
    30d6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    30da:	85 e5       	ldi	r24, 0x55	; 85
    30dc:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
    30e0:	2d c0       	rjmp	.+90     	; 0x313c <menu_screen+0x2e4>
	}
	else if (page==2){
    30e2:	82 30       	cpi	r24, 0x02	; 2
    30e4:	59 f5       	brne	.+86     	; 0x313c <menu_screen+0x2e4>
		//item 12
		GLCD_GotoX(10);
    30e6:	8a e0       	ldi	r24, 0x0A	; 10
    30e8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(1);
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Calibrate arrow");
    30f2:	82 e2       	ldi	r24, 0x22	; 34
    30f4:	91 e0       	ldi	r25, 0x01	; 1
    30f6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		GLCD_GotoX(offset);
    30fa:	85 e5       	ldi	r24, 0x55	; 85
    30fc:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		//item 13
		GLCD_GotoX(10);
    3100:	8a e0       	ldi	r24, 0x0A	; 10
    3102:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(2);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Odometer reset");
    310c:	82 e3       	ldi	r24, 0x32	; 50
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		//item 14
		GLCD_GotoX(10);
    3114:	8a e0       	ldi	r24, 0x0A	; 10
    3116:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(3);
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Load defaults");
    3120:	81 e4       	ldi	r24, 0x41	; 65
    3122:	91 e0       	ldi	r25, 0x01	; 1
    3124:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
		//item 15
		GLCD_GotoX(10);
    3128:	8a e0       	ldi	r24, 0x0A	; 10
    312a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
		GLCD_GotoLine(4);
    312e:	84 e0       	ldi	r24, 0x04	; 4
    3130:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
		GLCD_PrintString("Exit");
    3134:	8f e4       	ldi	r24, 0x4F	; 79
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	}
	GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    313c:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <menuItem.2781>
    3140:	66 0f       	add	r22, r22
    3142:	66 0f       	add	r22, r22
    3144:	66 0f       	add	r22, r22
    3146:	2f e0       	ldi	r18, 0x0F	; 15
    3148:	26 0f       	add	r18, r22
    314a:	69 5f       	subi	r22, 0xF9	; 249
    314c:	4f e7       	ldi	r20, 0x7F	; 127
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	0e 94 83 20 	call	0x4106	; 0x4106 <GLCD_InvertRect>
	GLCD_Render();
    3154:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
	while (button_monitor());
    3158:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    315c:	81 11       	cpse	r24, r1
    315e:	fc cf       	rjmp	.-8      	; 0x3158 <menu_screen+0x300>
	uint8_t currentButton = 0;
	uint16_t newValue = 0;
	while(1){
		currentButton = button_monitor();
    3160:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
		if(currentButton){
    3164:	88 23       	and	r24, r24
    3166:	e1 f3       	breq	.-8      	; 0x3160 <menu_screen+0x308>
			if (currentButton == 1){
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	09 f0       	breq	.+2      	; 0x316e <menu_screen+0x316>
    316c:	60 c3       	rjmp	.+1728   	; 0x382e <menu_screen+0x9d6>
				switch(menuItem+6*page)		{
    316e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end>
    3172:	08 2e       	mov	r0, r24
    3174:	00 0c       	add	r0, r0
    3176:	99 0b       	sbc	r25, r25
    3178:	fc 01       	movw	r30, r24
    317a:	ee 0f       	add	r30, r30
    317c:	ff 1f       	adc	r31, r31
    317e:	e8 0f       	add	r30, r24
    3180:	f9 1f       	adc	r31, r25
    3182:	ee 0f       	add	r30, r30
    3184:	ff 1f       	adc	r31, r31
    3186:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <menuItem.2781>
    318a:	e8 0f       	add	r30, r24
    318c:	f1 1d       	adc	r31, r1
    318e:	87 fd       	sbrc	r24, 7
    3190:	fa 95       	dec	r31
    3192:	e0 31       	cpi	r30, 0x10	; 16
    3194:	f1 05       	cpc	r31, r1
    3196:	08 f0       	brcs	.+2      	; 0x319a <menu_screen+0x342>
    3198:	59 c3       	rjmp	.+1714   	; 0x384c <menu_screen+0x9f4>
    319a:	e6 5d       	subi	r30, 0xD6	; 214
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	0c 94 a5 27 	jmp	0x4f4a	; 0x4f4a <__tablejump2__>
					case 0:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_DIAL_MIN,pwmDial,0,"Dial light PWM");
    31a2:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <pwmDial>
    31a6:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    31aa:	04 e5       	ldi	r16, 0x54	; 84
    31ac:	11 e0       	ldi	r17, 0x01	; 1
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	94 e0       	ldi	r25, 0x04	; 4
    31b8:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=pwmDial){
    31bc:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <pwmDial>
    31c0:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    31c4:	82 17       	cp	r24, r18
    31c6:	93 07       	cpc	r25, r19
    31c8:	09 f4       	brne	.+2      	; 0x31cc <menu_screen+0x374>
    31ca:	40 c3       	rjmp	.+1664   	; 0x384c <menu_screen+0x9f4>
							pwmDial = newValue;
    31cc:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pwmDial+0x1>
    31d0:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pwmDial>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	64 e0       	ldi	r22, 0x04	; 4
    31d8:	88 e0       	ldi	r24, 0x08	; 8
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
							OCR1B = pwmDial;
    31e0:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <pwmDial>
    31e4:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <pwmDial+0x1>
    31e8:	99 bd       	out	0x29, r25	; 41
    31ea:	88 bd       	out	0x28, r24	; 40
    31ec:	2f c3       	rjmp	.+1630   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 1:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_ARROW_MIN,pwmArrow,0,"Arrow light PWM");
    31ee:	40 91 ab 02 	lds	r20, 0x02AB	; 0x8002ab <pwmArrow>
    31f2:	50 91 ac 02 	lds	r21, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    31f6:	03 e6       	ldi	r16, 0x63	; 99
    31f8:	11 e0       	ldi	r17, 0x01	; 1
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	94 e0       	ldi	r25, 0x04	; 4
    3204:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=pwmArrow){
    3208:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <pwmArrow>
    320c:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    3210:	82 17       	cp	r24, r18
    3212:	93 07       	cpc	r25, r19
    3214:	09 f4       	brne	.+2      	; 0x3218 <menu_screen+0x3c0>
    3216:	1a c3       	rjmp	.+1588   	; 0x384c <menu_screen+0x9f4>
							pwmArrow = newValue;
    3218:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <pwmArrow+0x1>
    321c:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <pwmArrow>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3220:	41 e0       	ldi	r20, 0x01	; 1
    3222:	64 e0       	ldi	r22, 0x04	; 4
    3224:	88 e0       	ldi	r24, 0x08	; 8
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
							OCR1A = pwmArrow;
    322c:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <pwmArrow>
    3230:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <pwmArrow+0x1>
    3234:	9b bd       	out	0x2b, r25	; 43
    3236:	8a bd       	out	0x2a, r24	; 42
    3238:	09 c3       	rjmp	.+1554   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 2:
					{
						newValue = set_value(WHEEL_DIAMETER_MAX*1000,WHEEL_DIAMETER_MIN*1000,wheelDiameter*1000,3,"Wheel Diameter (m)");
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a e7       	ldi	r20, 0x7A	; 122
    3240:	54 e4       	ldi	r21, 0x44	; 68
    3242:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <wheelDiameter>
    3246:	70 91 be 02 	lds	r23, 0x02BE	; 0x8002be <wheelDiameter+0x1>
    324a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <wheelDiameter+0x2>
    324e:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <wheelDiameter+0x3>
    3252:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    3256:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    325a:	03 e7       	ldi	r16, 0x73	; 115
    325c:	11 e0       	ldi	r17, 0x01	; 1
    325e:	23 e0       	ldi	r18, 0x03	; 3
    3260:	ab 01       	movw	r20, r22
    3262:	6c e2       	ldi	r22, 0x2C	; 44
    3264:	71 e0       	ldi	r23, 0x01	; 1
    3266:	80 ed       	ldi	r24, 0xD0	; 208
    3268:	97 e0       	ldi	r25, 0x07	; 7
    326a:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=wheelDiameter*1000){
    326e:	bc 01       	movw	r22, r24
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    3278:	6b 01       	movw	r12, r22
    327a:	7c 01       	movw	r14, r24
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a e7       	ldi	r20, 0x7A	; 122
    3282:	54 e4       	ldi	r21, 0x44	; 68
    3284:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <wheelDiameter>
    3288:	70 91 be 02 	lds	r23, 0x02BE	; 0x8002be <wheelDiameter+0x1>
    328c:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <wheelDiameter+0x2>
    3290:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <wheelDiameter+0x3>
    3294:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    3298:	9b 01       	movw	r18, r22
    329a:	ac 01       	movw	r20, r24
    329c:	c7 01       	movw	r24, r14
    329e:	b6 01       	movw	r22, r12
    32a0:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	09 f4       	brne	.+2      	; 0x32aa <menu_screen+0x452>
    32a8:	d1 c2       	rjmp	.+1442   	; 0x384c <menu_screen+0x9f4>
							wheelDiameter = newValue/1000.0;
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a e7       	ldi	r20, 0x7A	; 122
    32b0:	54 e4       	ldi	r21, 0x44	; 68
    32b2:	c7 01       	movw	r24, r14
    32b4:	b6 01       	movw	r22, r12
    32b6:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    32ba:	60 93 bd 02 	sts	0x02BD, r22	; 0x8002bd <wheelDiameter>
    32be:	70 93 be 02 	sts	0x02BE, r23	; 0x8002be <wheelDiameter+0x1>
    32c2:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <wheelDiameter+0x2>
    32c6:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <wheelDiameter+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	64 e0       	ldi	r22, 0x04	; 4
    32ce:	88 e0       	ldi	r24, 0x08	; 8
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    32d6:	ba c2       	rjmp	.+1396   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 3:
					{
						newValue = set_value(GEAR_RATIO_MAX*1000,GEAR_RATIO_MIN*1000,gearRatio*1000,3,"Gear ratio");
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	4a e7       	ldi	r20, 0x7A	; 122
    32de:	54 e4       	ldi	r21, 0x44	; 68
    32e0:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <gearRatio>
    32e4:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <gearRatio+0x1>
    32e8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <gearRatio+0x2>
    32ec:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <gearRatio+0x3>
    32f0:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    32f4:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    32f8:	06 e8       	ldi	r16, 0x86	; 134
    32fa:	11 e0       	ldi	r17, 0x01	; 1
    32fc:	23 e0       	ldi	r18, 0x03	; 3
    32fe:	ab 01       	movw	r20, r22
    3300:	64 e6       	ldi	r22, 0x64	; 100
    3302:	70 e0       	ldi	r23, 0x00	; 0
    3304:	88 ee       	ldi	r24, 0xE8	; 232
    3306:	93 e0       	ldi	r25, 0x03	; 3
    3308:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=gearRatio*1000){
    330c:	bc 01       	movw	r22, r24
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    3316:	6b 01       	movw	r12, r22
    3318:	7c 01       	movw	r14, r24
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	4a e7       	ldi	r20, 0x7A	; 122
    3320:	54 e4       	ldi	r21, 0x44	; 68
    3322:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <gearRatio>
    3326:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <gearRatio+0x1>
    332a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <gearRatio+0x2>
    332e:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <gearRatio+0x3>
    3332:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    3336:	9b 01       	movw	r18, r22
    3338:	ac 01       	movw	r20, r24
    333a:	c7 01       	movw	r24, r14
    333c:	b6 01       	movw	r22, r12
    333e:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    3342:	88 23       	and	r24, r24
    3344:	09 f4       	brne	.+2      	; 0x3348 <menu_screen+0x4f0>
    3346:	82 c2       	rjmp	.+1284   	; 0x384c <menu_screen+0x9f4>
							gearRatio = newValue/1000.0;
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a e7       	ldi	r20, 0x7A	; 122
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	c7 01       	movw	r24, r14
    3352:	b6 01       	movw	r22, r12
    3354:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    3358:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <gearRatio>
    335c:	70 93 b3 02 	sts	0x02B3, r23	; 0x8002b3 <gearRatio+0x1>
    3360:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <gearRatio+0x2>
    3364:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <gearRatio+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	64 e0       	ldi	r22, 0x04	; 4
    336c:	88 e0       	ldi	r24, 0x08	; 8
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    3374:	6b c2       	rjmp	.+1238   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 4:
					{
						newValue = set_value(MAGNETS_ON_WHEEL_MAX,MAGNETS_ON_WHEEL_MIN,magnetsOnWheel,0,"Magnets on wheel");
    3376:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <magnetsOnWheel>
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	01 e9       	ldi	r16, 0x91	; 145
    337e:	11 e0       	ldi	r17, 0x01	; 1
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	61 e0       	ldi	r22, 0x01	; 1
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	80 e1       	ldi	r24, 0x10	; 16
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=magnetsOnWheel){
    338e:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <magnetsOnWheel>
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	82 17       	cp	r24, r18
    3396:	93 07       	cpc	r25, r19
    3398:	09 f4       	brne	.+2      	; 0x339c <menu_screen+0x544>
    339a:	58 c2       	rjmp	.+1200   	; 0x384c <menu_screen+0x9f4>
							magnetsOnWheel = newValue;
    339c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <magnetsOnWheel>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	64 e0       	ldi	r22, 0x04	; 4
    33a4:	88 e0       	ldi	r24, 0x08	; 8
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    33ac:	4f c2       	rjmp	.+1182   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 5:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_MODE_MIN,stepMode,0,"1-full, 2-half");
    33ae:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <stepMode>
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	02 ea       	ldi	r16, 0xA2	; 162
    33b6:	11 e0       	ldi	r17, 0x01	; 1
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	8f ef       	ldi	r24, 0xFF	; 255
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=stepMode){
    33c6:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <stepMode>
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	82 17       	cp	r24, r18
    33ce:	93 07       	cpc	r25, r19
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <menu_screen+0x57c>
    33d2:	3c c2       	rjmp	.+1144   	; 0x384c <menu_screen+0x9f4>
							stepMode = newValue;
    33d4:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <stepMode>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	64 e0       	ldi	r22, 0x04	; 4
    33dc:	88 e0       	ldi	r24, 0x08	; 8
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    33e4:	33 c2       	rjmp	.+1126   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 6:
					{
						newValue = set_value(SCALE_MAX_MAX,SCALE_MAX_MIN,scaleMax,0,"Maximum speed");
    33e6:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <scaleMax>
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	01 eb       	ldi	r16, 0xB1	; 177
    33ee:	11 e0       	ldi	r17, 0x01	; 1
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	64 e1       	ldi	r22, 0x14	; 20
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	8f ef       	ldi	r24, 0xFF	; 255
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=scaleMax){
    33fe:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <scaleMax>
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	82 17       	cp	r24, r18
    3406:	93 07       	cpc	r25, r19
    3408:	09 f4       	brne	.+2      	; 0x340c <menu_screen+0x5b4>
    340a:	20 c2       	rjmp	.+1088   	; 0x384c <menu_screen+0x9f4>
							scaleMax = newValue;
    340c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <scaleMax>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	64 e0       	ldi	r22, 0x04	; 4
    3414:	88 e0       	ldi	r24, 0x08	; 8
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    341c:	17 c2       	rjmp	.+1070   	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 7:
					{
						newValue = set_value(DEGREES_PER_KMH_MAX*1000,DEGREES_PER_KMH_MIN*1000,degreesPerKmh*1000,3,"Degrees per km/h");
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	4a e7       	ldi	r20, 0x7A	; 122
    3424:	54 e4       	ldi	r21, 0x44	; 68
    3426:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <degreesPerKmh>
    342a:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    342e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    3432:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    3436:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    343a:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    343e:	0f eb       	ldi	r16, 0xBF	; 191
    3440:	11 e0       	ldi	r17, 0x01	; 1
    3442:	23 e0       	ldi	r18, 0x03	; 3
    3444:	ab 01       	movw	r20, r22
    3446:	64 e6       	ldi	r22, 0x64	; 100
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	88 e8       	ldi	r24, 0x88	; 136
    344c:	93 e1       	ldi	r25, 0x13	; 19
    344e:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=degreesPerKmh*1000){
    3452:	bc 01       	movw	r22, r24
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    345c:	6b 01       	movw	r12, r22
    345e:	7c 01       	movw	r14, r24
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	4a e7       	ldi	r20, 0x7A	; 122
    3466:	54 e4       	ldi	r21, 0x44	; 68
    3468:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <degreesPerKmh>
    346c:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    3470:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    3474:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    3478:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	c7 01       	movw	r24, r14
    3482:	b6 01       	movw	r22, r12
    3484:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    3488:	88 23       	and	r24, r24
    348a:	09 f4       	brne	.+2      	; 0x348e <menu_screen+0x636>
    348c:	df c1       	rjmp	.+958    	; 0x384c <menu_screen+0x9f4>
							degreesPerKmh = newValue/1000.0;
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a e7       	ldi	r20, 0x7A	; 122
    3494:	54 e4       	ldi	r21, 0x44	; 68
    3496:	c7 01       	movw	r24, r14
    3498:	b6 01       	movw	r22, r12
    349a:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <__divsf3>
    349e:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <degreesPerKmh>
    34a2:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <degreesPerKmh+0x1>
    34a6:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <degreesPerKmh+0x2>
    34aa:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <degreesPerKmh+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    34ae:	41 e0       	ldi	r20, 0x01	; 1
    34b0:	64 e0       	ldi	r22, 0x04	; 4
    34b2:	88 e0       	ldi	r24, 0x08	; 8
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    34ba:	c8 c1       	rjmp	.+912    	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 8:
					{
						newValue = set_value(STEPPER_MOTOR_STEPS_MAX,STEPPER_MOTOR_STEPS_MIN,smSteps,0,"Stepper motor steps");
    34bc:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <smSteps>
    34c0:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <smSteps+0x1>
    34c4:	00 ed       	ldi	r16, 0xD0	; 208
    34c6:	11 e0       	ldi	r17, 0x01	; 1
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	60 e1       	ldi	r22, 0x10	; 16
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	80 e9       	ldi	r24, 0x90	; 144
    34d0:	91 e0       	ldi	r25, 0x01	; 1
    34d2:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=smSteps){
    34d6:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <smSteps>
    34da:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <smSteps+0x1>
    34de:	82 17       	cp	r24, r18
    34e0:	93 07       	cpc	r25, r19
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <menu_screen+0x68e>
    34e4:	b3 c1       	rjmp	.+870    	; 0x384c <menu_screen+0x9f4>
							smSteps = newValue;
    34e6:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <smSteps+0x1>
    34ea:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <smSteps>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    34ee:	41 e0       	ldi	r20, 0x01	; 1
    34f0:	64 e0       	ldi	r22, 0x04	; 4
    34f2:	88 e0       	ldi	r24, 0x08	; 8
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    34fa:	a8 c1       	rjmp	.+848    	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 9:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_INTERVAL_MIN,stepInterval,0,"Step interval X64us");
    34fc:	40 91 ba 02 	lds	r20, 0x02BA	; 0x8002ba <stepInterval>
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	04 ee       	ldi	r16, 0xE4	; 228
    3504:	11 e0       	ldi	r17, 0x01	; 1
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	62 e3       	ldi	r22, 0x32	; 50
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	8f ef       	ldi	r24, 0xFF	; 255
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=stepInterval){
    3514:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <stepInterval>
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	82 17       	cp	r24, r18
    351c:	93 07       	cpc	r25, r19
    351e:	09 f4       	brne	.+2      	; 0x3522 <menu_screen+0x6ca>
    3520:	95 c1       	rjmp	.+810    	; 0x384c <menu_screen+0x9f4>
							stepInterval = newValue;
    3522:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <stepInterval>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3526:	41 e0       	ldi	r20, 0x01	; 1
    3528:	64 e0       	ldi	r22, 0x04	; 4
    352a:	88 e0       	ldi	r24, 0x08	; 8
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    3532:	8c c1       	rjmp	.+792    	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 10:
					{
						newValue = set_value(LCD_CONTRAST_MAX,LCD_CONTRAST_MIN,lcdContrast,0,"LCD contrast");
    3534:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <lcdContrast>
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	0a e0       	ldi	r16, 0x0A	; 10
    353c:	11 e0       	ldi	r17, 0x01	; 1
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	62 e3       	ldi	r22, 0x32	; 50
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	8f ef       	ldi	r24, 0xFF	; 255
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	0e 94 31 13 	call	0x2662	; 0x2662 <set_value>
						if (newValue!=lcdContrast){
    354c:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <lcdContrast>
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	82 17       	cp	r24, r18
    3554:	93 07       	cpc	r25, r19
    3556:	09 f4       	brne	.+2      	; 0x355a <menu_screen+0x702>
    3558:	79 c1       	rjmp	.+754    	; 0x384c <menu_screen+0x9f4>
							lcdContrast = newValue;
    355a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <lcdContrast>
							GLCD_SetContrast(lcdContrast);
    355e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <GLCD_SetContrast>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3562:	41 e0       	ldi	r20, 0x01	; 1
    3564:	64 e0       	ldi	r22, 0x04	; 4
    3566:	88 e0       	ldi	r24, 0x08	; 8
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
    356e:	6e c1       	rjmp	.+732    	; 0x384c <menu_screen+0x9f4>
						}
						break;
					}
					case 11:
					{
						debugMode = debugMode^_BV(0);
    3570:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <debugMode>
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	89 27       	eor	r24, r25
    3578:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <debugMode>
						while (button_monitor());
    357c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3580:	81 11       	cpse	r24, r1
    3582:	fc cf       	rjmp	.-8      	; 0x357c <menu_screen+0x724>
						main();
    3584:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <main>
						break;
					}
					case 12:
					{
						arrow_calibration();
    3588:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <arrow_calibration>
						break;
    358c:	5f c1       	rjmp	.+702    	; 0x384c <menu_screen+0x9f4>
					}
					case 13:
					{
						uint8_t yesOrNo = 0;
												
						GLCD_Clear();
    358e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
						GLCD_GotoLine(2);
    3592:	82 e0       	ldi	r24, 0x02	; 2
    3594:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
						GLCD_GotoX(45);
    3598:	8d e2       	ldi	r24, 0x2D	; 45
    359a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
						GLCD_PrintString("RESET");
    359e:	88 ef       	ldi	r24, 0xF8	; 248
    35a0:	91 e0       	ldi	r25, 0x01	; 1
    35a2:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
						GLCD_GotoLine(4);
    35a6:	84 e0       	ldi	r24, 0x04	; 4
    35a8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
						GLCD_GotoX(34);
    35ac:	82 e2       	ldi	r24, 0x22	; 34
    35ae:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
						GLCD_PrintString("ODOMETER?");
    35b2:	8e ef       	ldi	r24, 0xFE	; 254
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
																			
						GLCD_GotoLine(6);
    35ba:	86 e0       	ldi	r24, 0x06	; 6
    35bc:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
						GLCD_GotoX(28);
    35c0:	8c e1       	ldi	r24, 0x1C	; 28
    35c2:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
						GLCD_PrintString("NO");
    35c6:	88 e0       	ldi	r24, 0x08	; 8
    35c8:	92 e0       	ldi	r25, 0x02	; 2
    35ca:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
						GLCD_GotoX(84);
    35ce:	84 e5       	ldi	r24, 0x54	; 84
    35d0:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
						GLCD_PrintString("YES");
    35d4:	8b e0       	ldi	r24, 0x0B	; 11
    35d6:	92 e0       	ldi	r25, 0x02	; 2
    35d8:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
						arrow_calibration();
						break;
					}
					case 13:
					{
						uint8_t yesOrNo = 0;
    35dc:	f1 2c       	mov	r15, r1
						GLCD_PrintString("NO");
						GLCD_GotoX(84);
						GLCD_PrintString("YES");
												
redraw_duttons1:
						GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    35de:	0f 2e       	mov	r0, r31
    35e0:	fb e3       	ldi	r31, 0x3B	; 59
    35e2:	ef 2e       	mov	r14, r31
    35e4:	f0 2d       	mov	r31, r0
						GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    35e6:	14 e1       	ldi	r17, 0x14	; 20
    35e8:	d9 e6       	ldi	r29, 0x69	; 105
						GLCD_Render();
						while(button_monitor());
						while(1){
							uint8_t button = button_monitor();
							if ((button==2)||(button==3)){
								yesOrNo = yesOrNo^_BV(0);
    35ea:	c1 e0       	ldi	r28, 0x01	; 1
						GLCD_PrintString("NO");
						GLCD_GotoX(84);
						GLCD_PrintString("YES");
												
redraw_duttons1:
						GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    35ec:	fe 9c       	mul	r15, r14
    35ee:	80 2d       	mov	r24, r0
    35f0:	11 24       	eor	r1, r1
    35f2:	4e e2       	ldi	r20, 0x2E	; 46
    35f4:	48 0f       	add	r20, r24
    35f6:	0f ef       	ldi	r16, 0xFF	; 255
    35f8:	29 e3       	ldi	r18, 0x39	; 57
    35fa:	6d e2       	ldi	r22, 0x2D	; 45
    35fc:	8c 5e       	subi	r24, 0xEC	; 236
    35fe:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
						GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    3602:	f1 10       	cpse	r15, r1
    3604:	03 c0       	rjmp	.+6      	; 0x360c <menu_screen+0x7b4>
    3606:	4d 2f       	mov	r20, r29
    3608:	8f e4       	ldi	r24, 0x4F	; 79
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <menu_screen+0x7b8>
    360c:	4e e2       	ldi	r20, 0x2E	; 46
    360e:	81 2f       	mov	r24, r17
    3610:	00 e0       	ldi	r16, 0x00	; 0
    3612:	29 e3       	ldi	r18, 0x39	; 57
    3614:	6d e2       	ldi	r22, 0x2D	; 45
    3616:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
						GLCD_Render();
    361a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
						while(button_monitor());
    361e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3622:	81 11       	cpse	r24, r1
    3624:	fc cf       	rjmp	.-8      	; 0x361e <menu_screen+0x7c6>
						while(1){
							uint8_t button = button_monitor();
    3626:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
							if ((button==2)||(button==3)){
    362a:	9e ef       	ldi	r25, 0xFE	; 254
    362c:	98 0f       	add	r25, r24
    362e:	92 30       	cpi	r25, 0x02	; 2
    3630:	30 f4       	brcc	.+12     	; 0x363e <menu_screen+0x7e6>
								yesOrNo = yesOrNo^_BV(0);
    3632:	fc 26       	eor	r15, r28
								while(button_monitor());
    3634:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3638:	81 11       	cpse	r24, r1
    363a:	fc cf       	rjmp	.-8      	; 0x3634 <menu_screen+0x7dc>
    363c:	d7 cf       	rjmp	.-82     	; 0x35ec <menu_screen+0x794>
								goto redraw_duttons1;
							}
							else if(button==1){
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	91 f7       	brne	.-28     	; 0x3626 <menu_screen+0x7ce>
								if (yesOrNo){
    3642:	ff 20       	and	r15, r15
    3644:	09 f4       	brne	.+2      	; 0x3648 <menu_screen+0x7f0>
    3646:	02 c1       	rjmp	.+516    	; 0x384c <menu_screen+0x9f4>
									GLCD_Clear();
    3648:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
									GLCD_GotoLine(1);
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
									GLCD_GotoX(8);
    3652:	88 e0       	ldi	r24, 0x08	; 8
    3654:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
									GLCD_PrintString("RESETING ODOMETER");
    3658:	8f e0       	ldi	r24, 0x0F	; 15
    365a:	92 e0       	ldi	r25, 0x02	; 2
    365c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
															
									GLCD_GotoLine(3);
    3660:	83 e0       	ldi	r24, 0x03	; 3
    3662:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
									GLCD_GotoX(2);
    3666:	82 e0       	ldi	r24, 0x02	; 2
    3668:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
									GLCD_PrintString("Cells cleared");
    366c:	81 e2       	ldi	r24, 0x21	; 33
    366e:	92 e0       	ldi	r25, 0x02	; 2
    3670:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
									GLCD_Render();
    3674:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
									//odometer reset
									milage = 0;
    3678:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <milage>
    367c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <milage+0x1>
    3680:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <milage+0x2>
    3684:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <milage+0x3>
									odometerCurrentAddress = 0;
    3688:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <odometerCurrentAddress>
									sensorActations = 0;
    368c:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <sensorActations+0x1>
    3690:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <sensorActations>
    3694:	c1 2c       	mov	r12, r1
    3696:	d1 2c       	mov	r13, r1
    3698:	76 01       	movw	r14, r12
    369a:	c3 94       	inc	r12
									for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
										eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    369c:	43 e0       	ldi	r20, 0x03	; 3
    369e:	64 e0       	ldi	r22, 0x04	; 4
    36a0:	80 e8       	ldi	r24, 0x80	; 128
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
									GLCD_GotoX(83);
    36a8:	83 e5       	ldi	r24, 0x53	; 83
    36aa:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
									GLCD_PrintInteger(i+1);
    36ae:	c7 01       	movw	r24, r14
    36b0:	b6 01       	movw	r22, r12
    36b2:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
									GLCD_PrintString("/");
    36b6:	8f e2       	ldi	r24, 0x2F	; 47
    36b8:	92 e0       	ldi	r25, 0x02	; 2
    36ba:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
									GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
    36be:	69 e1       	ldi	r22, 0x19	; 25
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
									GLCD_Render();
    36ca:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
    36ce:	8f ef       	ldi	r24, 0xFF	; 255
    36d0:	c8 1a       	sub	r12, r24
    36d2:	d8 0a       	sbc	r13, r24
    36d4:	e8 0a       	sbc	r14, r24
    36d6:	f8 0a       	sbc	r15, r24
									GLCD_Render();
									//odometer reset
									milage = 0;
									odometerCurrentAddress = 0;
									sensorActations = 0;
									for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    36d8:	8a e1       	ldi	r24, 0x1A	; 26
    36da:	c8 16       	cp	r12, r24
    36dc:	d1 04       	cpc	r13, r1
    36de:	e1 04       	cpc	r14, r1
    36e0:	f1 04       	cpc	r15, r1
    36e2:	e1 f6       	brne	.-72     	; 0x369c <menu_screen+0x844>
									GLCD_PrintInteger(i+1);
									GLCD_PrintString("/");
									GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
									GLCD_Render();
									}
									odometerCurrentAddress = 0;
    36e4:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <odometerCurrentAddress>
									GLCD_GotoLine(6);
    36e8:	86 e0       	ldi	r24, 0x06	; 6
    36ea:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
									GLCD_GotoX(45);
    36ee:	8d e2       	ldi	r24, 0x2D	; 45
    36f0:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
									GLCD_PrintString("DONE!");
    36f4:	81 e3       	ldi	r24, 0x31	; 49
    36f6:	92 e0       	ldi	r25, 0x02	; 2
    36f8:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
									GLCD_Render();
    36fc:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
									while(button_monitor());
    3700:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3704:	81 11       	cpse	r24, r1
    3706:	fc cf       	rjmp	.-8      	; 0x3700 <menu_screen+0x8a8>
									while(!button_monitor());
    3708:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    370c:	88 23       	and	r24, r24
    370e:	e1 f3       	breq	.-8      	; 0x3708 <menu_screen+0x8b0>
    3710:	9d c0       	rjmp	.+314    	; 0x384c <menu_screen+0x9f4>
					}
					case 14:
					{
					//load defaults
					uint8_t yesOrNo = 0;
					GLCD_Clear();
    3712:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
					GLCD_GotoLine(2);
    3716:	82 e0       	ldi	r24, 0x02	; 2
    3718:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
					GLCD_GotoX(40);
    371c:	88 e2       	ldi	r24, 0x28	; 40
    371e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
					GLCD_PrintString("RESTORE");
    3722:	87 e3       	ldi	r24, 0x37	; 55
    3724:	92 e0       	ldi	r25, 0x02	; 2
    3726:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
					GLCD_GotoLine(4);
    372a:	84 e0       	ldi	r24, 0x04	; 4
    372c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
					GLCD_GotoX(20);
    3730:	84 e1       	ldi	r24, 0x14	; 20
    3732:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
					GLCD_PrintString("DEFAULT values?");
    3736:	8f e3       	ldi	r24, 0x3F	; 63
    3738:	92 e0       	ldi	r25, 0x02	; 2
    373a:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
										
					GLCD_GotoLine(6);
    373e:	86 e0       	ldi	r24, 0x06	; 6
    3740:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
					GLCD_GotoX(28);
    3744:	8c e1       	ldi	r24, 0x1C	; 28
    3746:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
					GLCD_PrintString("NO");
    374a:	88 e0       	ldi	r24, 0x08	; 8
    374c:	92 e0       	ldi	r25, 0x02	; 2
    374e:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
					GLCD_GotoX(84);
    3752:	84 e5       	ldi	r24, 0x54	; 84
    3754:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
					GLCD_PrintString("YES");
    3758:	8b e0       	ldi	r24, 0x0B	; 11
    375a:	92 e0       	ldi	r25, 0x02	; 2
    375c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
						break;
					}
					case 14:
					{
					//load defaults
					uint8_t yesOrNo = 0;
    3760:	f1 2c       	mov	r15, r1
					GLCD_PrintString("NO");
					GLCD_GotoX(84);
					GLCD_PrintString("YES");
											
redraw_buttons2:
					GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    3762:	0f 2e       	mov	r0, r31
    3764:	fb e3       	ldi	r31, 0x3B	; 59
    3766:	ef 2e       	mov	r14, r31
    3768:	f0 2d       	mov	r31, r0
					GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    376a:	c4 e1       	ldi	r28, 0x14	; 20
    376c:	19 e6       	ldi	r17, 0x69	; 105
										
					while(button_monitor());
					while(1){
						uint8_t button = button_monitor();
						if ((button==2)||(button==3)){
							yesOrNo = yesOrNo^_BV(0);
    376e:	d1 e0       	ldi	r29, 0x01	; 1
					GLCD_PrintString("NO");
					GLCD_GotoX(84);
					GLCD_PrintString("YES");
											
redraw_buttons2:
					GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    3770:	fe 9c       	mul	r15, r14
    3772:	80 2d       	mov	r24, r0
    3774:	11 24       	eor	r1, r1
    3776:	4e e2       	ldi	r20, 0x2E	; 46
    3778:	48 0f       	add	r20, r24
    377a:	0f ef       	ldi	r16, 0xFF	; 255
    377c:	29 e3       	ldi	r18, 0x39	; 57
    377e:	6d e2       	ldi	r22, 0x2D	; 45
    3780:	8c 5e       	subi	r24, 0xEC	; 236
    3782:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
					GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    3786:	f1 10       	cpse	r15, r1
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <menu_screen+0x938>
    378a:	41 2f       	mov	r20, r17
    378c:	8f e4       	ldi	r24, 0x4F	; 79
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <menu_screen+0x93c>
    3790:	4e e2       	ldi	r20, 0x2E	; 46
    3792:	8c 2f       	mov	r24, r28
    3794:	00 e0       	ldi	r16, 0x00	; 0
    3796:	29 e3       	ldi	r18, 0x39	; 57
    3798:	6d e2       	ldi	r22, 0x2D	; 45
    379a:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_DrawRectangle>
					GLCD_Render();
    379e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
										
					while(button_monitor());
    37a2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    37a6:	81 11       	cpse	r24, r1
    37a8:	fc cf       	rjmp	.-8      	; 0x37a2 <menu_screen+0x94a>
					while(1){
						uint8_t button = button_monitor();
    37aa:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
						if ((button==2)||(button==3)){
    37ae:	9e ef       	ldi	r25, 0xFE	; 254
    37b0:	98 0f       	add	r25, r24
    37b2:	92 30       	cpi	r25, 0x02	; 2
    37b4:	30 f4       	brcc	.+12     	; 0x37c2 <menu_screen+0x96a>
							yesOrNo = yesOrNo^_BV(0);
    37b6:	fd 26       	eor	r15, r29
							while(button_monitor());
    37b8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    37bc:	81 11       	cpse	r24, r1
    37be:	fc cf       	rjmp	.-8      	; 0x37b8 <menu_screen+0x960>
    37c0:	d7 cf       	rjmp	.-82     	; 0x3770 <menu_screen+0x918>
							goto redraw_buttons2;
						}
						else if(button==1){
    37c2:	81 30       	cpi	r24, 0x01	; 1
    37c4:	91 f7       	brne	.-28     	; 0x37aa <menu_screen+0x952>
							if (yesOrNo){
    37c6:	ff 20       	and	r15, r15
    37c8:	09 f4       	brne	.+2      	; 0x37cc <menu_screen+0x974>
    37ca:	40 c0       	rjmp	.+128    	; 0x384c <menu_screen+0x9f4>
								GLCD_Clear();
    37cc:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <GLCD_Clear>
								GLCD_GotoLine(3);
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
								GLCD_GotoX(8);
    37d6:	88 e0       	ldi	r24, 0x08	; 8
    37d8:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
								GLCD_PrintString("LOADING DEFAULTS...");
    37dc:	8f e4       	ldi	r24, 0x4F	; 79
    37de:	92 e0       	ldi	r25, 0x02	; 2
    37e0:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
								GLCD_Render();
    37e4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
								set_default_values();
    37e8:	0e 94 09 0b 	call	0x1612	; 0x1612 <set_default_values>
								eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    37ec:	41 e0       	ldi	r20, 0x01	; 1
    37ee:	64 e0       	ldi	r22, 0x04	; 4
    37f0:	88 e0       	ldi	r24, 0x08	; 8
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <eep_operations>
								GLCD_GotoLine(5);
    37f8:	85 e0       	ldi	r24, 0x05	; 5
    37fa:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <GLCD_GotoLine>
								GLCD_GotoX(45);
    37fe:	8d e2       	ldi	r24, 0x2D	; 45
    3800:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
								GLCD_PrintString("DONE!");
    3804:	81 e3       	ldi	r24, 0x31	; 49
    3806:	92 e0       	ldi	r25, 0x02	; 2
    3808:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
								GLCD_Render();
    380c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <GLCD_Render>
								while(button_monitor());
    3810:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3814:	81 11       	cpse	r24, r1
    3816:	fc cf       	rjmp	.-8      	; 0x3810 <menu_screen+0x9b8>
								while(!button_monitor());
    3818:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    381c:	88 23       	and	r24, r24
    381e:	e1 f3       	breq	.-8      	; 0x3818 <menu_screen+0x9c0>
    3820:	15 c0       	rjmp	.+42     	; 0x384c <menu_screen+0x9f4>
						break;
					}
					case 15:
					{
						//exit menu
						while (button_monitor());
    3822:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3826:	81 11       	cpse	r24, r1
    3828:	fc cf       	rjmp	.-8      	; 0x3822 <menu_screen+0x9ca>
						main();
    382a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <main>
					}
				}//
			}
		else if(currentButton == 2)	menuItem++;
    382e:	82 30       	cpi	r24, 0x02	; 2
    3830:	31 f4       	brne	.+12     	; 0x383e <menu_screen+0x9e6>
    3832:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <menuItem.2781>
    3836:	8f 5f       	subi	r24, 0xFF	; 255
    3838:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <menuItem.2781>
    383c:	07 c0       	rjmp	.+14     	; 0x384c <menu_screen+0x9f4>
		else if(currentButton == 3)	menuItem--;
    383e:	83 30       	cpi	r24, 0x03	; 3
    3840:	29 f4       	brne	.+10     	; 0x384c <menu_screen+0x9f4>
    3842:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <menuItem.2781>
    3846:	81 50       	subi	r24, 0x01	; 1
    3848:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <menuItem.2781>
		while (!button_monitor());
    384c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <button_monitor>
    3850:	88 23       	and	r24, r24
    3852:	e1 f3       	breq	.-8      	; 0x384c <menu_screen+0x9f4>
		menu_screen();
    3854:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <menu_screen>

00003858 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    3858:	66 95       	lsr	r22
    385a:	66 95       	lsr	r22
    385c:	66 95       	lsr	r22
    385e:	90 e8       	ldi	r25, 0x80	; 128
    3860:	69 9f       	mul	r22, r25
    3862:	b0 01       	movw	r22, r0
    3864:	11 24       	eor	r1, r1
    3866:	68 0f       	add	r22, r24
    3868:	71 1d       	adc	r23, r1
    386a:	fb 01       	movw	r30, r22
    386c:	e5 53       	subi	r30, 0x35	; 53
    386e:	fd 4f       	sbci	r31, 0xFD	; 253
    3870:	40 83       	st	Z, r20
    3872:	08 95       	ret

00003874 <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    3874:	66 95       	lsr	r22
    3876:	66 95       	lsr	r22
    3878:	66 95       	lsr	r22
    387a:	90 e8       	ldi	r25, 0x80	; 128
    387c:	69 9f       	mul	r22, r25
    387e:	b0 01       	movw	r22, r0
    3880:	11 24       	eor	r1, r1
    3882:	68 0f       	add	r22, r24
    3884:	71 1d       	adc	r23, r1
    3886:	fb 01       	movw	r30, r22
    3888:	e5 53       	subi	r30, 0x35	; 53
    388a:	fd 4f       	sbci	r31, 0xFD	; 253
}
    388c:	80 81       	ld	r24, Z
    388e:	08 95       	ret

00003890 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    3890:	ff 92       	push	r15
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
    389a:	c8 2f       	mov	r28, r24
    389c:	06 2f       	mov	r16, r22
    389e:	17 2f       	mov	r17, r23
    38a0:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    38a2:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    38a6:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    38aa:	88 30       	cpi	r24, 0x08	; 8
    38ac:	31 f0       	breq	.+12     	; 0x38ba <GLCD_Send+0x2a>
    38ae:	80 31       	cpi	r24, 0x10	; 16
    38b0:	21 f0       	breq	.+8      	; 0x38ba <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <__GLCD>
				break;
    38b8:	33 c0       	rjmp	.+102    	; 0x3920 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    38ba:	88 e7       	ldi	r24, 0x78	; 120
    38bc:	0e 94 14 25 	call	0x4a28	; 0x4a28 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    38c0:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    38c4:	88 31       	cpi	r24, 0x18	; 24
    38c6:	31 f0       	breq	.+12     	; 0x38d4 <GLCD_Send+0x44>
    38c8:	80 32       	cpi	r24, 0x20	; 32
    38ca:	21 f0       	breq	.+8      	; 0x38d4 <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <__GLCD>
				break;
    38d2:	26 c0       	rjmp	.+76     	; 0x3920 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    38d4:	8c 2f       	mov	r24, r28
    38d6:	0e 94 14 25 	call	0x4a28	; 0x4a28 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    38da:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    38de:	88 32       	cpi	r24, 0x28	; 40
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    38e2:	f1 10       	cpse	r15, r1
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <GLCD_Send+0x64>
    38e6:	1a c0       	rjmp	.+52     	; 0x391c <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    38e8:	80 33       	cpi	r24, 0x30	; 48
    38ea:	d9 f3       	breq	.-10     	; 0x38e2 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <__GLCD>
				break;
    38f2:	16 c0       	rjmp	.+44     	; 0x3920 <GLCD_Send+0x90>
    38f4:	c0 2f       	mov	r28, r16
    38f6:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    38f8:	8e 01       	movw	r16, r28
    38fa:	0f 5f       	subi	r16, 0xFF	; 255
    38fc:	1f 4f       	sbci	r17, 0xFF	; 255
    38fe:	fa 94       	dec	r15
    3900:	0f 0d       	add	r16, r15
    3902:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    3904:	89 91       	ld	r24, Y+
    3906:	0e 94 14 25 	call	0x4a28	; 0x4a28 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    390a:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    390e:	88 32       	cpi	r24, 0x28	; 40
    3910:	11 f0       	breq	.+4      	; 0x3916 <GLCD_Send+0x86>
    3912:	80 33       	cpi	r24, 0x30	; 48
    3914:	19 f4       	brne	.+6      	; 0x391c <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3916:	c0 17       	cp	r28, r16
    3918:	d1 07       	cpc	r29, r17
    391a:	a1 f7       	brne	.-24     	; 0x3904 <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    391c:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    3920:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <TWI_EndTransmission>
}
    3924:	df 91       	pop	r29
    3926:	cf 91       	pop	r28
    3928:	1f 91       	pop	r17
    392a:	0f 91       	pop	r16
    392c:	ff 90       	pop	r15
    392e:	08 95       	ret

00003930 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	1f 92       	push	r1
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    393c:	41 e0       	ldi	r20, 0x01	; 1
    393e:	be 01       	movw	r22, r28
    3940:	6f 5f       	subi	r22, 0xFF	; 255
    3942:	7f 4f       	sbci	r23, 0xFF	; 255
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	0e 94 48 1c 	call	0x3890	; 0x3890 <GLCD_Send>
}
    394a:	0f 90       	pop	r0
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	08 95       	ret

00003952 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    3956:	81 e2       	ldi	r24, 0x21	; 33
    3958:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    3962:	8f e7       	ldi	r24, 0x7F	; 127
    3964:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    3968:	82 e2       	ldi	r24, 0x22	; 34
    396a:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    3974:	87 e0       	ldi	r24, 0x07	; 7
    3976:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
    397a:	c0 e0       	ldi	r28, 0x00	; 0
    397c:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    397e:	be 01       	movw	r22, r28
    3980:	62 95       	swap	r22
    3982:	72 95       	swap	r23
    3984:	70 7f       	andi	r23, 0xF0	; 240
    3986:	76 27       	eor	r23, r22
    3988:	60 7f       	andi	r22, 0xF0	; 240
    398a:	76 27       	eor	r23, r22
    398c:	65 53       	subi	r22, 0x35	; 53
    398e:	7d 4f       	sbci	r23, 0xFD	; 253
    3990:	40 e1       	ldi	r20, 0x10	; 16
    3992:	80 e4       	ldi	r24, 0x40	; 64
    3994:	0e 94 48 1c 	call	0x3890	; 0x3890 <GLCD_Send>
    3998:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    399a:	c0 34       	cpi	r28, 0x40	; 64
    399c:	d1 05       	cpc	r29, r1
    399e:	79 f7       	brne	.-34     	; 0x397e <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	08 95       	ret

000039a6 <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    39a6:	cf 93       	push	r28
    39a8:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    39aa:	81 e8       	ldi	r24, 0x81	; 129
    39ac:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    39b0:	8c 2f       	mov	r24, r28
    39b2:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
}
    39b6:	cf 91       	pop	r28
    39b8:	08 95       	ret

000039ba <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    39ba:	88 23       	and	r24, r24
    39bc:	14 f0       	brlt	.+4      	; 0x39c2 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    39be:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__GLCD+0x1>
    39c2:	08 95       	ret

000039c4 <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    39c4:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    39c8:	90 34       	cpi	r25, 0x40	; 64
    39ca:	10 f4       	brcc	.+4      	; 0x39d0 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    39cc:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <__GLCD+0x2>
    39d0:	08 95       	ret

000039d2 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    39d2:	cf 93       	push	r28
    39d4:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    39d6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <GLCD_GotoX>
	GLCD_GotoY(Y);
    39da:	8c 2f       	mov	r24, r28
    39dc:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <GLCD_GotoY>
}
    39e0:	cf 91       	pop	r28
    39e2:	08 95       	ret

000039e4 <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    39e4:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    39e8:	8e ea       	ldi	r24, 0xAE	; 174
    39ea:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    39ee:	85 ed       	ldi	r24, 0xD5	; 213
    39f0:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    39f4:	80 ef       	ldi	r24, 0xF0	; 240
    39f6:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    39fa:	88 ea       	ldi	r24, 0xA8	; 168
    39fc:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    3a00:	8f e3       	ldi	r24, 0x3F	; 63
    3a02:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    3a06:	83 ed       	ldi	r24, 0xD3	; 211
    3a08:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    3a12:	8d e8       	ldi	r24, 0x8D	; 141
    3a14:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    3a18:	84 e1       	ldi	r24, 0x14	; 20
    3a1a:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    3a1e:	80 e4       	ldi	r24, 0x40	; 64
    3a20:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    3a24:	80 e2       	ldi	r24, 0x20	; 32
    3a26:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    3a30:	81 ea       	ldi	r24, 0xA1	; 161
    3a32:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    3a36:	88 ec       	ldi	r24, 0xC8	; 200
    3a38:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    3a3c:	8a ed       	ldi	r24, 0xDA	; 218
    3a3e:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    3a42:	82 e1       	ldi	r24, 0x12	; 18
    3a44:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    3a48:	81 e8       	ldi	r24, 0x81	; 129
    3a4a:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    3a4e:	8f ef       	ldi	r24, 0xFF	; 255
    3a50:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    3a54:	89 ed       	ldi	r24, 0xD9	; 217
    3a56:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    3a5a:	81 ef       	ldi	r24, 0xF1	; 241
    3a5c:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    3a60:	8b ed       	ldi	r24, 0xDB	; 219
    3a62:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    3a66:	80 e2       	ldi	r24, 0x20	; 32
    3a68:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    3a6c:	84 ea       	ldi	r24, 0xA4	; 164
    3a6e:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    3a72:	86 ea       	ldi	r24, 0xA6	; 166
    3a74:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    3a78:	8e e2       	ldi	r24, 0x2E	; 46
    3a7a:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    3a7e:	8f ea       	ldi	r24, 0xAF	; 175
    3a80:	0e 94 98 1c 	call	0x3930	; 0x3930 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    3a84:	60 e0       	ldi	r22, 0x00	; 0
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    3a8c:	86 ea       	ldi	r24, 0xA6	; 166
    3a8e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    3a92:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <__GLCD+0x8>
    3a96:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <__GLCD+0x7>
    3a9a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <__GLCD+0x6>
    3a9e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <__GLCD+0x2>
    3aa2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <__GLCD+0x1>
    3aa6:	08 95       	ret

00003aa8 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    3aa8:	88 30       	cpi	r24, 0x08	; 8
    3aaa:	28 f4       	brcc	.+10     	; 0x3ab6 <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    3aac:	88 0f       	add	r24, r24
    3aae:	88 0f       	add	r24, r24
    3ab0:	88 0f       	add	r24, r24
    3ab2:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <__GLCD+0x2>
    3ab6:	08 95       	ret

00003ab8 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    3ab8:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    3abc:	08 95       	ret

00003abe <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    3abe:	8f 92       	push	r8
    3ac0:	9f 92       	push	r9
    3ac2:	af 92       	push	r10
    3ac4:	bf 92       	push	r11
    3ac6:	cf 92       	push	r12
    3ac8:	df 92       	push	r13
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	06 2f       	mov	r16, r22
    3ad8:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    3ada:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ade:	d0 91 c3 02 	lds	r29, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    3ae2:	c0 91 c2 02 	lds	r28, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    3ae6:	6d 2f       	mov	r22, r29
    3ae8:	8c 2f       	mov	r24, r28
    3aea:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    3aee:	1f 3f       	cpi	r17, 0xFF	; 255
    3af0:	91 f4       	brne	.+36     	; 0x3b16 <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    3af2:	90 2f       	mov	r25, r16
    3af4:	97 70       	andi	r25, 0x07	; 7
    3af6:	81 2c       	mov	r8, r1
    3af8:	91 2c       	mov	r9, r1
    3afa:	54 01       	movw	r10, r8
    3afc:	83 94       	inc	r8
    3afe:	75 01       	movw	r14, r10
    3b00:	64 01       	movw	r12, r8
    3b02:	04 c0       	rjmp	.+8      	; 0x3b0c <GLCD_SetPixel+0x4e>
    3b04:	cc 0c       	add	r12, r12
    3b06:	dd 1c       	adc	r13, r13
    3b08:	ee 1c       	adc	r14, r14
    3b0a:	ff 1c       	adc	r15, r15
    3b0c:	9a 95       	dec	r25
    3b0e:	d2 f7       	brpl	.-12     	; 0x3b04 <GLCD_SetPixel+0x46>
    3b10:	48 2f       	mov	r20, r24
    3b12:	4c 29       	or	r20, r12
    3b14:	13 c0       	rjmp	.+38     	; 0x3b3c <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    3b16:	07 70       	andi	r16, 0x07	; 7
    3b18:	c1 2c       	mov	r12, r1
    3b1a:	d1 2c       	mov	r13, r1
    3b1c:	76 01       	movw	r14, r12
    3b1e:	c3 94       	inc	r12
    3b20:	b7 01       	movw	r22, r14
    3b22:	a6 01       	movw	r20, r12
    3b24:	04 c0       	rjmp	.+8      	; 0x3b2e <GLCD_SetPixel+0x70>
    3b26:	44 0f       	add	r20, r20
    3b28:	55 1f       	adc	r21, r21
    3b2a:	66 1f       	adc	r22, r22
    3b2c:	77 1f       	adc	r23, r23
    3b2e:	0a 95       	dec	r16
    3b30:	d2 f7       	brpl	.-12     	; 0x3b26 <GLCD_SetPixel+0x68>
    3b32:	8a 01       	movw	r16, r20
    3b34:	9b 01       	movw	r18, r22
    3b36:	00 95       	com	r16
    3b38:	48 2f       	mov	r20, r24
    3b3a:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3b3c:	6d 2f       	mov	r22, r29
    3b3e:	8c 2f       	mov	r24, r28
    3b40:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
}
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
    3b54:	bf 90       	pop	r11
    3b56:	af 90       	pop	r10
    3b58:	9f 90       	pop	r9
    3b5a:	8f 90       	pop	r8
    3b5c:	08 95       	ret

00003b5e <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3b5e:	3f 92       	push	r3
    3b60:	4f 92       	push	r4
    3b62:	5f 92       	push	r5
    3b64:	6f 92       	push	r6
    3b66:	7f 92       	push	r7
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3b82:	88 23       	and	r24, r24
    3b84:	0c f4       	brge	.+2      	; 0x3b88 <GLCD_SetPixels+0x2a>
    3b86:	c6 c0       	rjmp	.+396    	; 0x3d14 <GLCD_SetPixels+0x1b6>
    3b88:	44 23       	and	r20, r20
    3b8a:	0c f4       	brge	.+2      	; 0x3b8e <GLCD_SetPixels+0x30>
    3b8c:	c3 c0       	rjmp	.+390    	; 0x3d14 <GLCD_SetPixels+0x1b6>
    3b8e:	60 34       	cpi	r22, 0x40	; 64
    3b90:	08 f0       	brcs	.+2      	; 0x3b94 <GLCD_SetPixels+0x36>
    3b92:	c0 c0       	rjmp	.+384    	; 0x3d14 <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3b94:	20 34       	cpi	r18, 0x40	; 64
    3b96:	08 f0       	brcs	.+2      	; 0x3b9a <GLCD_SetPixels+0x3c>
    3b98:	bd c0       	rjmp	.+378    	; 0x3d14 <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    3b9a:	11 e0       	ldi	r17, 0x01	; 1
    3b9c:	81 2e       	mov	r8, r17
    3b9e:	86 1a       	sub	r8, r22
    3ba0:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    3ba2:	18 1b       	sub	r17, r24
    3ba4:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    3ba6:	46 2f       	mov	r20, r22
    3ba8:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    3baa:	76 2e       	mov	r7, r22
    3bac:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    3bae:	e8 2c       	mov	r14, r8
    3bb0:	f1 2c       	mov	r15, r1
    3bb2:	88 e0       	ldi	r24, 0x08	; 8
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	84 1b       	sub	r24, r20
    3bb8:	91 09       	sbc	r25, r1
    3bba:	e8 16       	cp	r14, r24
    3bbc:	f9 06       	cpc	r15, r25
    3bbe:	7c f4       	brge	.+30     	; 0x3bde <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    3bc0:	88 e0       	ldi	r24, 0x08	; 8
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	8e 19       	sub	r24, r14
    3bc6:	9f 09       	sbc	r25, r15
    3bc8:	2f ef       	ldi	r18, 0xFF	; 255
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	59 01       	movw	r10, r18
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <GLCD_SetPixels+0x76>
    3bd0:	b5 94       	asr	r11
    3bd2:	a7 94       	ror	r10
    3bd4:	8a 95       	dec	r24
    3bd6:	e2 f7       	brpl	.-8      	; 0x3bd0 <GLCD_SetPixels+0x72>
    3bd8:	8a 2d       	mov	r24, r10
			h = height;
    3bda:	68 2c       	mov	r6, r8
    3bdc:	04 c0       	rjmp	.+8      	; 0x3be6 <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    3bde:	88 e0       	ldi	r24, 0x08	; 8
    3be0:	68 2e       	mov	r6, r24
    3be2:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    3be4:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    3be6:	a8 2e       	mov	r10, r24
    3be8:	b1 2c       	mov	r11, r1
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <GLCD_SetPixels+0x92>
    3bec:	aa 0c       	add	r10, r10
    3bee:	bb 1c       	adc	r11, r11
    3bf0:	4a 95       	dec	r20
    3bf2:	e2 f7       	brpl	.-8      	; 0x3bec <GLCD_SetPixels+0x8e>
    3bf4:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    3bf6:	67 2d       	mov	r22, r7
    3bf8:	89 2d       	mov	r24, r9
    3bfa:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    3bfe:	11 23       	and	r17, r17
    3c00:	c9 f1       	breq	.+114    	; 0x3c74 <GLCD_SetPixels+0x116>
    3c02:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c04:	0f 2e       	mov	r0, r31
    3c06:	f3 ec       	ldi	r31, 0xC3	; 195
    3c08:	cf 2e       	mov	r12, r31
    3c0a:	f2 e0       	ldi	r31, 0x02	; 2
    3c0c:	df 2e       	mov	r13, r31
    3c0e:	f0 2d       	mov	r31, r0
    3c10:	c2 ec       	ldi	r28, 0xC2	; 194
    3c12:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c14:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c16:	f6 01       	movw	r30, r12
    3c18:	40 80       	ld	r4, Z
    3c1a:	b8 80       	ld	r11, Y
    3c1c:	64 2d       	mov	r22, r4
    3c1e:	8b 2d       	mov	r24, r11
    3c20:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c24:	0f 3f       	cpi	r16, 0xFF	; 255
    3c26:	19 f4       	brne	.+6      	; 0x3c2e <GLCD_SetPixels+0xd0>
    3c28:	48 2f       	mov	r20, r24
    3c2a:	43 29       	or	r20, r3
    3c2c:	02 c0       	rjmp	.+4      	; 0x3c32 <GLCD_SetPixels+0xd4>
    3c2e:	48 2f       	mov	r20, r24
    3c30:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3c32:	9b 2d       	mov	r25, r11
    3c34:	9f 5f       	subi	r25, 0xFF	; 255
    3c36:	98 83       	st	Y, r25
    3c38:	64 2d       	mov	r22, r4
    3c3a:	8b 2d       	mov	r24, r11
    3c3c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    3c40:	53 94       	inc	r5
    3c42:	51 12       	cpse	r5, r17
    3c44:	e8 cf       	rjmp	.-48     	; 0x3c16 <GLCD_SetPixels+0xb8>
    3c46:	16 c0       	rjmp	.+44     	; 0x3c74 <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3c48:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3c4a:	6c 2f       	mov	r22, r28
    3c4c:	89 2d       	mov	r24, r9
    3c4e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3c52:	11 23       	and	r17, r17
    3c54:	f1 f0       	breq	.+60     	; 0x3c92 <GLCD_SetPixels+0x134>
    3c56:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3c58:	f6 01       	movw	r30, r12
    3c5a:	60 81       	ld	r22, Z
    3c5c:	f2 01       	movw	r30, r4
    3c5e:	80 81       	ld	r24, Z
    3c60:	98 2f       	mov	r25, r24
    3c62:	9f 5f       	subi	r25, 0xFF	; 255
    3c64:	90 83       	st	Z, r25
    3c66:	40 2f       	mov	r20, r16
    3c68:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3c6c:	73 94       	inc	r7
    3c6e:	71 16       	cp	r7, r17
    3c70:	81 f0       	breq	.+32     	; 0x3c92 <GLCD_SetPixels+0x134>
    3c72:	f2 cf       	rjmp	.-28     	; 0x3c58 <GLCD_SetPixels+0xfa>
    3c74:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3c76:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3c78:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3c7a:	0f 2e       	mov	r0, r31
    3c7c:	f3 ec       	ldi	r31, 0xC3	; 195
    3c7e:	cf 2e       	mov	r12, r31
    3c80:	f2 e0       	ldi	r31, 0x02	; 2
    3c82:	df 2e       	mov	r13, r31
    3c84:	f0 2d       	mov	r31, r0
    3c86:	0f 2e       	mov	r0, r31
    3c88:	f2 ec       	ldi	r31, 0xC2	; 194
    3c8a:	4f 2e       	mov	r4, r31
    3c8c:	f2 e0       	ldi	r31, 0x02	; 2
    3c8e:	5f 2e       	mov	r5, r31
    3c90:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3c92:	26 2d       	mov	r18, r6
    3c94:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    3c96:	e2 2f       	mov	r30, r18
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	cf 01       	movw	r24, r30
    3c9c:	08 96       	adiw	r24, 0x08	; 8
    3c9e:	e8 16       	cp	r14, r24
    3ca0:	f9 06       	cpc	r15, r25
    3ca2:	94 f6       	brge	.-92     	; 0x3c48 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    3ca4:	28 15       	cp	r18, r8
    3ca6:	b0 f5       	brcc	.+108    	; 0x3d14 <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    3ca8:	ee 1a       	sub	r14, r30
    3caa:	ff 0a       	sbc	r15, r31
    3cac:	8f ef       	ldi	r24, 0xFF	; 255
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	9c 01       	movw	r18, r24
    3cb2:	02 c0       	rjmp	.+4      	; 0x3cb8 <GLCD_SetPixels+0x15a>
    3cb4:	22 0f       	add	r18, r18
    3cb6:	33 1f       	adc	r19, r19
    3cb8:	ea 94       	dec	r14
    3cba:	e2 f7       	brpl	.-8      	; 0x3cb4 <GLCD_SetPixels+0x156>
    3cbc:	79 01       	movw	r14, r18
    3cbe:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    3cc0:	6c 2f       	mov	r22, r28
    3cc2:	68 5f       	subi	r22, 0xF8	; 248
    3cc4:	89 2d       	mov	r24, r9
    3cc6:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3cca:	11 23       	and	r17, r17
    3ccc:	19 f1       	breq	.+70     	; 0x3d14 <GLCD_SetPixels+0x1b6>
    3cce:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3cd0:	0f 2e       	mov	r0, r31
    3cd2:	f3 ec       	ldi	r31, 0xC3	; 195
    3cd4:	cf 2e       	mov	r12, r31
    3cd6:	f2 e0       	ldi	r31, 0x02	; 2
    3cd8:	df 2e       	mov	r13, r31
    3cda:	f0 2d       	mov	r31, r0
    3cdc:	c2 ec       	ldi	r28, 0xC2	; 194
    3cde:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3ce0:	9e 2c       	mov	r9, r14
    3ce2:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ce4:	f6 01       	movw	r30, r12
    3ce6:	a0 80       	ld	r10, Z
    3ce8:	f8 80       	ld	r15, Y
    3cea:	6a 2d       	mov	r22, r10
    3cec:	8f 2d       	mov	r24, r15
    3cee:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3cf2:	0f 3f       	cpi	r16, 0xFF	; 255
    3cf4:	19 f4       	brne	.+6      	; 0x3cfc <GLCD_SetPixels+0x19e>
    3cf6:	48 2f       	mov	r20, r24
    3cf8:	4e 29       	or	r20, r14
    3cfa:	02 c0       	rjmp	.+4      	; 0x3d00 <GLCD_SetPixels+0x1a2>
    3cfc:	48 2f       	mov	r20, r24
    3cfe:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3d00:	9f 2d       	mov	r25, r15
    3d02:	9f 5f       	subi	r25, 0xFF	; 255
    3d04:	98 83       	st	Y, r25
    3d06:	6a 2d       	mov	r22, r10
    3d08:	8f 2d       	mov	r24, r15
    3d0a:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    3d0e:	b3 94       	inc	r11
    3d10:	b1 12       	cpse	r11, r17
    3d12:	e8 cf       	rjmp	.-48     	; 0x3ce4 <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	df 90       	pop	r13
    3d22:	cf 90       	pop	r12
    3d24:	bf 90       	pop	r11
    3d26:	af 90       	pop	r10
    3d28:	9f 90       	pop	r9
    3d2a:	8f 90       	pop	r8
    3d2c:	7f 90       	pop	r7
    3d2e:	6f 90       	pop	r6
    3d30:	5f 90       	pop	r5
    3d32:	4f 90       	pop	r4
    3d34:	3f 90       	pop	r3
    3d36:	08 95       	ret

00003d38 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3d38:	2f 92       	push	r2
    3d3a:	3f 92       	push	r3
    3d3c:	4f 92       	push	r4
    3d3e:	5f 92       	push	r5
    3d40:	6f 92       	push	r6
    3d42:	7f 92       	push	r7
    3d44:	8f 92       	push	r8
    3d46:	9f 92       	push	r9
    3d48:	af 92       	push	r10
    3d4a:	bf 92       	push	r11
    3d4c:	cf 92       	push	r12
    3d4e:	df 92       	push	r13
    3d50:	ef 92       	push	r14
    3d52:	ff 92       	push	r15
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	2c 97       	sbiw	r28, 0x0c	; 12
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	5c 01       	movw	r10, r24
    3d6e:	66 2e       	mov	r6, r22
    3d70:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3d72:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    3d76:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    3d78:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    3d7c:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    3d7e:	82 2f       	mov	r24, r18
    3d80:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    3d82:	1a f4       	brpl	.+6      	; 0x3d8a <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    3d84:	80 e8       	ldi	r24, 0x80	; 128
    3d86:	68 2e       	mov	r6, r24
    3d88:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    3d8a:	84 2f       	mov	r24, r20
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	07 96       	adiw	r24, 0x07	; 7
    3d90:	95 95       	asr	r25
    3d92:	87 95       	ror	r24
    3d94:	95 95       	asr	r25
    3d96:	87 95       	ror	r24
    3d98:	95 95       	asr	r25
    3d9a:	87 95       	ror	r24
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
    3d9e:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    3da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da2:	96 95       	lsr	r25
    3da4:	96 95       	lsr	r25
    3da6:	96 95       	lsr	r25
    3da8:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    3daa:	89 30       	cpi	r24, 0x09	; 9
    3dac:	48 f0       	brcs	.+18     	; 0x3dc0 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    3dae:	2d 81       	ldd	r18, Y+5	; 0x05
    3db0:	3e 81       	ldd	r19, Y+6	; 0x06
    3db2:	28 5f       	subi	r18, 0xF8	; 248
    3db4:	3f 4f       	sbci	r19, 0xFF	; 255
    3db6:	a9 01       	movw	r20, r18
    3db8:	48 1b       	sub	r20, r24
    3dba:	51 09       	sbc	r21, r1
    3dbc:	5e 83       	std	Y+6, r21	; 0x06
    3dbe:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3dc0:	4a 84       	ldd	r4, Y+10	; 0x0a
    3dc2:	57 e0       	ldi	r21, 0x07	; 7
    3dc4:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dca:	89 2b       	or	r24, r25
    3dcc:	09 f4       	brne	.+2      	; 0x3dd0 <GLCD_DrawBitmap+0x98>
    3dce:	fa c0       	rjmp	.+500    	; 0x3fc4 <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd2:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3dd4:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3dd6:	26 2c       	mov	r2, r6
    3dd8:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3dda:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3ddc:	88 e0       	ldi	r24, 0x08	; 8
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	fc 01       	movw	r30, r24
    3de2:	e4 19       	sub	r30, r4
    3de4:	f1 09       	sbc	r31, r1
    3de6:	fb 83       	std	Y+3, r31	; 0x03
    3de8:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3dea:	0f 2e       	mov	r0, r31
    3dec:	f3 ec       	ldi	r31, 0xC3	; 195
    3dee:	cf 2e       	mov	r12, r31
    3df0:	f2 e0       	ldi	r31, 0x02	; 2
    3df2:	df 2e       	mov	r13, r31
    3df4:	f0 2d       	mov	r31, r0
    3df6:	02 ec       	ldi	r16, 0xC2	; 194
    3df8:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3dfa:	6c 81       	ldd	r22, Y+4	; 0x04
    3dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dfe:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3e02:	39 86       	std	Y+9, r3	; 0x09
    3e04:	28 86       	std	Y+8, r2	; 0x08
    3e06:	72 9c       	mul	r7, r2
    3e08:	c0 01       	movw	r24, r0
    3e0a:	73 9c       	mul	r7, r3
    3e0c:	90 0d       	add	r25, r0
    3e0e:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    3e10:	7c 01       	movw	r14, r24
    3e12:	e2 18       	sub	r14, r2
    3e14:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e16:	66 20       	and	r6, r6
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <GLCD_DrawBitmap+0xe4>
    3e1a:	3c c0       	rjmp	.+120    	; 0x3e94 <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3e1c:	9c 01       	movw	r18, r24
    3e1e:	2a 0d       	add	r18, r10
    3e20:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e22:	85 2c       	mov	r8, r5
    3e24:	3c 87       	std	Y+12, r19	; 0x0c
    3e26:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3e28:	eb 85       	ldd	r30, Y+11	; 0x0b
    3e2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e2c:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    3e2e:	04 2c       	mov	r0, r4
    3e30:	01 c0       	rjmp	.+2      	; 0x3e34 <GLCD_DrawBitmap+0xfc>
    3e32:	99 0c       	add	r9, r9
    3e34:	0a 94       	dec	r0
    3e36:	ea f7       	brpl	.-6      	; 0x3e32 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3e38:	77 20       	and	r7, r7
    3e3a:	79 f0       	breq	.+30     	; 0x3e5a <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3e3c:	f5 01       	movw	r30, r10
    3e3e:	ee 0d       	add	r30, r14
    3e40:	ff 1d       	adc	r31, r15
    3e42:	2f ef       	ldi	r18, 0xFF	; 255
    3e44:	e2 1a       	sub	r14, r18
    3e46:	f2 0a       	sbc	r15, r18
    3e48:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0a 80       	ldd	r0, Y+2	; 0x02
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <GLCD_DrawBitmap+0x11c>
    3e50:	95 95       	asr	r25
    3e52:	87 95       	ror	r24
    3e54:	0a 94       	dec	r0
    3e56:	e2 f7       	brpl	.-8      	; 0x3e50 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3e58:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3e5a:	39 81       	ldd	r19, Y+1	; 0x01
    3e5c:	31 30       	cpi	r19, 0x01	; 1
    3e5e:	39 f4       	brne	.+14     	; 0x3e6e <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e60:	f6 01       	movw	r30, r12
    3e62:	60 81       	ld	r22, Z
    3e64:	f8 01       	movw	r30, r16
    3e66:	80 81       	ld	r24, Z
    3e68:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
    3e6c:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3e6e:	f6 01       	movw	r30, r12
    3e70:	60 81       	ld	r22, Z
    3e72:	f8 01       	movw	r30, r16
    3e74:	80 81       	ld	r24, Z
    3e76:	98 2f       	mov	r25, r24
    3e78:	9f 5f       	subi	r25, 0xFF	; 255
    3e7a:	90 83       	st	Z, r25
    3e7c:	49 2d       	mov	r20, r9
    3e7e:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e82:	83 94       	inc	r8
    3e84:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e86:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e88:	2f 5f       	subi	r18, 0xFF	; 255
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	3c 87       	std	Y+12, r19	; 0x0c
    3e8e:	2b 87       	std	Y+11, r18	; 0x0b
    3e90:	86 10       	cpse	r8, r6
    3e92:	ca cf       	rjmp	.-108    	; 0x3e28 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3e94:	ea ec       	ldi	r30, 0xCA	; 202
    3e96:	f2 e0       	ldi	r31, 0x02	; 2
    3e98:	80 81       	ld	r24, Z
    3e9a:	88 23       	and	r24, r24
    3e9c:	41 f0       	breq	.+16     	; 0x3eae <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e9e:	f6 01       	movw	r30, r12
    3ea0:	60 81       	ld	r22, Z
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	80 81       	ld	r24, Z
    3ea6:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
    3eaa:	48 2f       	mov	r20, r24
    3eac:	01 c0       	rjmp	.+2      	; 0x3eb0 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3eae:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3eb0:	f6 01       	movw	r30, r12
    3eb2:	60 81       	ld	r22, Z
    3eb4:	f8 01       	movw	r30, r16
    3eb6:	80 81       	ld	r24, Z
    3eb8:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    3ebe:	f8 5f       	subi	r31, 0xF8	; 248
    3ec0:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3ec2:	73 94       	inc	r7
    3ec4:	87 2d       	mov	r24, r7
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	2d 81       	ldd	r18, Y+5	; 0x05
    3eca:	3e 81       	ldd	r19, Y+6	; 0x06
    3ecc:	82 17       	cp	r24, r18
    3ece:	93 07       	cpc	r25, r19
    3ed0:	08 f4       	brcc	.+2      	; 0x3ed4 <GLCD_DrawBitmap+0x19c>
    3ed2:	93 cf       	rjmp	.-218    	; 0x3dfa <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    3ed4:	22 30       	cpi	r18, 0x02	; 2
    3ed6:	31 05       	cpc	r19, r1
    3ed8:	08 f4       	brcc	.+2      	; 0x3edc <GLCD_DrawBitmap+0x1a4>
    3eda:	74 c0       	rjmp	.+232    	; 0x3fc4 <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3edc:	6f 2f       	mov	r22, r31
    3ede:	8f 81       	ldd	r24, Y+7	; 0x07
    3ee0:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    3ee4:	27 2d       	mov	r18, r7
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	21 50       	subi	r18, 0x01	; 1
    3eea:	31 09       	sbc	r19, r1
    3eec:	48 85       	ldd	r20, Y+8	; 0x08
    3eee:	59 85       	ldd	r21, Y+9	; 0x09
    3ef0:	24 9f       	mul	r18, r20
    3ef2:	c0 01       	movw	r24, r0
    3ef4:	25 9f       	mul	r18, r21
    3ef6:	90 0d       	add	r25, r0
    3ef8:	34 9f       	mul	r19, r20
    3efa:	90 0d       	add	r25, r0
    3efc:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3efe:	66 20       	and	r6, r6
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <GLCD_DrawBitmap+0x1cc>
    3f02:	3e c0       	rjmp	.+124    	; 0x3f80 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3f04:	45 01       	movw	r8, r10
    3f06:	88 0e       	add	r8, r24
    3f08:	99 1e       	adc	r9, r25
    3f0a:	65 01       	movw	r12, r10
    3f0c:	5f ef       	ldi	r21, 0xFF	; 255
    3f0e:	c5 1a       	sub	r12, r21
    3f10:	d5 0a       	sbc	r13, r21
    3f12:	6a 94       	dec	r6
    3f14:	c6 0c       	add	r12, r6
    3f16:	d1 1c       	adc	r13, r1
    3f18:	c8 0e       	add	r12, r24
    3f1a:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f1c:	0f 2e       	mov	r0, r31
    3f1e:	f3 ec       	ldi	r31, 0xC3	; 195
    3f20:	ef 2e       	mov	r14, r31
    3f22:	f2 e0       	ldi	r31, 0x02	; 2
    3f24:	ff 2e       	mov	r15, r31
    3f26:	f0 2d       	mov	r31, r0
    3f28:	02 ec       	ldi	r16, 0xC2	; 194
    3f2a:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3f2c:	88 e0       	ldi	r24, 0x08	; 8
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	5c 01       	movw	r10, r24
    3f32:	a4 18       	sub	r10, r4
    3f34:	b1 08       	sbc	r11, r1
    3f36:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f38:	f7 01       	movw	r30, r14
    3f3a:	80 80       	ld	r8, Z
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	90 80       	ld	r9, Z
    3f40:	68 2d       	mov	r22, r8
    3f42:	89 2d       	mov	r24, r9
    3f44:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3f48:	f3 01       	movw	r30, r6
    3f4a:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3f4c:	50 e0       	ldi	r21, 0x00	; 0
    3f4e:	0a 2c       	mov	r0, r10
    3f50:	02 c0       	rjmp	.+4      	; 0x3f56 <GLCD_DrawBitmap+0x21e>
    3f52:	55 95       	asr	r21
    3f54:	47 95       	ror	r20
    3f56:	0a 94       	dec	r0
    3f58:	e2 f7       	brpl	.-8      	; 0x3f52 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3f5a:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3f5c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f5e:	f1 30       	cpi	r31, 0x01	; 1
    3f60:	09 f4       	brne	.+2      	; 0x3f64 <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f62:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3f64:	89 2d       	mov	r24, r9
    3f66:	8f 5f       	subi	r24, 0xFF	; 255
    3f68:	f8 01       	movw	r30, r16
    3f6a:	80 83       	st	Z, r24
    3f6c:	68 2d       	mov	r22, r8
    3f6e:	89 2d       	mov	r24, r9
    3f70:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
    3f74:	ff ef       	ldi	r31, 0xFF	; 255
    3f76:	6f 1a       	sub	r6, r31
    3f78:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3f7a:	6c 14       	cp	r6, r12
    3f7c:	7d 04       	cpc	r7, r13
    3f7e:	e1 f6       	brne	.-72     	; 0x3f38 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3f80:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <__GLCD+0x9>
    3f84:	88 23       	and	r24, r24
    3f86:	99 f0       	breq	.+38     	; 0x3fae <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    3f88:	81 30       	cpi	r24, 0x01	; 1
    3f8a:	41 f4       	brne	.+16     	; 0x3f9c <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f8c:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    3f90:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    3f94:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
    3f98:	48 2f       	mov	r20, r24
    3f9a:	0a c0       	rjmp	.+20     	; 0x3fb0 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f9c:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    3fa0:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    3fa4:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
    3fa8:	48 2f       	mov	r20, r24
    3faa:	40 95       	com	r20
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3fae:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    3fb0:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    3fb4:	e2 ec       	ldi	r30, 0xC2	; 194
    3fb6:	f2 e0       	ldi	r31, 0x02	; 2
    3fb8:	80 81       	ld	r24, Z
    3fba:	98 2f       	mov	r25, r24
    3fbc:	9f 5f       	subi	r25, 0xFF	; 255
    3fbe:	90 83       	st	Z, r25
    3fc0:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    3fc4:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <GLCD_GetX>
    3fc8:	6a 85       	ldd	r22, Y+10	; 0x0a
    3fca:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
}
    3fce:	2c 96       	adiw	r28, 0x0c	; 12
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	df 91       	pop	r29
    3fdc:	cf 91       	pop	r28
    3fde:	1f 91       	pop	r17
    3fe0:	0f 91       	pop	r16
    3fe2:	ff 90       	pop	r15
    3fe4:	ef 90       	pop	r14
    3fe6:	df 90       	pop	r13
    3fe8:	cf 90       	pop	r12
    3fea:	bf 90       	pop	r11
    3fec:	af 90       	pop	r10
    3fee:	9f 90       	pop	r9
    3ff0:	8f 90       	pop	r8
    3ff2:	7f 90       	pop	r7
    3ff4:	6f 90       	pop	r6
    3ff6:	5f 90       	pop	r5
    3ff8:	4f 90       	pop	r4
    3ffa:	3f 90       	pop	r3
    3ffc:	2f 90       	pop	r2
    3ffe:	08 95       	ret

00004000 <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	e8 2e       	mov	r14, r24
    4010:	16 2f       	mov	r17, r22
    4012:	d4 2e       	mov	r13, r20
    4014:	f2 2e       	mov	r15, r18
    4016:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    4018:	88 23       	and	r24, r24
    401a:	0c f4       	brge	.+2      	; 0x401e <GLCD_DrawRectangle+0x1e>
    401c:	49 c0       	rjmp	.+146    	; 0x40b0 <GLCD_DrawRectangle+0xb0>
    401e:	44 23       	and	r20, r20
    4020:	0c f4       	brge	.+2      	; 0x4024 <GLCD_DrawRectangle+0x24>
    4022:	46 c0       	rjmp	.+140    	; 0x40b0 <GLCD_DrawRectangle+0xb0>
    4024:	60 34       	cpi	r22, 0x40	; 64
    4026:	08 f0       	brcs	.+2      	; 0x402a <GLCD_DrawRectangle+0x2a>
    4028:	43 c0       	rjmp	.+134    	; 0x40b0 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    402a:	8f e3       	ldi	r24, 0x3F	; 63
    402c:	82 17       	cp	r24, r18
    402e:	08 f4       	brcc	.+2      	; 0x4032 <GLCD_DrawRectangle+0x32>
    4030:	3f c0       	rjmp	.+126    	; 0x40b0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    4032:	4e 15       	cp	r20, r14
    4034:	00 f1       	brcs	.+64     	; 0x4076 <GLCD_DrawRectangle+0x76>
    4036:	1c c0       	rjmp	.+56     	; 0x4070 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    4038:	4d 2f       	mov	r20, r29
    403a:	61 2f       	mov	r22, r17
    403c:	8c 2f       	mov	r24, r28
    403e:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <GLCD_SetPixel>
		X1++;
    4042:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    4044:	0c 17       	cp	r16, r28
    4046:	c0 f7       	brcc	.-16     	; 0x4038 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    4048:	de 14       	cp	r13, r14
    404a:	d8 f0       	brcs	.+54     	; 0x4082 <GLCD_DrawRectangle+0x82>
    404c:	17 c0       	rjmp	.+46     	; 0x407c <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    404e:	4d 2f       	mov	r20, r29
    4050:	6f 2d       	mov	r22, r15
    4052:	8c 2f       	mov	r24, r28
    4054:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <GLCD_SetPixel>
		X1++;
    4058:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    405a:	0c 17       	cp	r16, r28
    405c:	c0 f7       	brcc	.-16     	; 0x404e <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    405e:	f1 16       	cp	r15, r17
    4060:	98 f0       	brcs	.+38     	; 0x4088 <GLCD_DrawRectangle+0x88>
    4062:	1c c0       	rjmp	.+56     	; 0x409c <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    4064:	0d 2f       	mov	r16, r29
    4066:	4d 2d       	mov	r20, r13
    4068:	8d 2d       	mov	r24, r13
    406a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <GLCD_SetPixels>
    406e:	20 c0       	rjmp	.+64     	; 0x40b0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    4070:	04 2f       	mov	r16, r20
    4072:	ce 2d       	mov	r28, r14
    4074:	e1 cf       	rjmp	.-62     	; 0x4038 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    4076:	0e 2d       	mov	r16, r14
    4078:	c4 2f       	mov	r28, r20
    407a:	de cf       	rjmp	.-68     	; 0x4038 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    407c:	0d 2d       	mov	r16, r13
    407e:	ce 2d       	mov	r28, r14
    4080:	e6 cf       	rjmp	.-52     	; 0x404e <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    4082:	0e 2d       	mov	r16, r14
    4084:	cd 2d       	mov	r28, r13
    4086:	e3 cf       	rjmp	.-58     	; 0x404e <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    4088:	0d 2f       	mov	r16, r29
    408a:	21 2f       	mov	r18, r17
    408c:	4e 2d       	mov	r20, r14
    408e:	6f 2d       	mov	r22, r15
    4090:	8e 2d       	mov	r24, r14
    4092:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    4096:	21 2f       	mov	r18, r17
    4098:	6f 2d       	mov	r22, r15
    409a:	e4 cf       	rjmp	.-56     	; 0x4064 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    409c:	0d 2f       	mov	r16, r29
    409e:	2f 2d       	mov	r18, r15
    40a0:	4e 2d       	mov	r20, r14
    40a2:	61 2f       	mov	r22, r17
    40a4:	8e 2d       	mov	r24, r14
    40a6:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <GLCD_SetPixels>
    40aa:	2f 2d       	mov	r18, r15
    40ac:	61 2f       	mov	r22, r17
    40ae:	da cf       	rjmp	.-76     	; 0x4064 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	08 95       	ret

000040c0 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    40ca:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    40cc:	00 e0       	ldi	r16, 0x00	; 0
    40ce:	0b c0       	rjmp	.+22     	; 0x40e6 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    40d0:	41 2f       	mov	r20, r17
    40d2:	6d 2f       	mov	r22, r29
    40d4:	8c 2f       	mov	r24, r28
    40d6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    40da:	cf 5f       	subi	r28, 0xFF	; 255
    40dc:	c0 38       	cpi	r28, 0x80	; 128
    40de:	c1 f7       	brne	.-16     	; 0x40d0 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    40e0:	d8 5f       	subi	r29, 0xF8	; 248
    40e2:	d0 34       	cpi	r29, 0x40	; 64
    40e4:	11 f0       	breq	.+4      	; 0x40ea <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    40e6:	c0 2f       	mov	r28, r16
    40e8:	f3 cf       	rjmp	.-26     	; 0x40d0 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	08 95       	ret

000040f4 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	0e 94 60 20 	call	0x40c0	; 0x40c0 <GLCD_FillScreen>
    40fa:	08 95       	ret

000040fc <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    40fc:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    40fe:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <GLCD_SetPixels>
}
    4102:	0f 91       	pop	r16
    4104:	08 95       	ret

00004106 <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    4106:	2f 92       	push	r2
    4108:	3f 92       	push	r3
    410a:	5f 92       	push	r5
    410c:	6f 92       	push	r6
    410e:	7f 92       	push	r7
    4110:	8f 92       	push	r8
    4112:	9f 92       	push	r9
    4114:	af 92       	push	r10
    4116:	bf 92       	push	r11
    4118:	cf 92       	push	r12
    411a:	df 92       	push	r13
    411c:	ef 92       	push	r14
    411e:	ff 92       	push	r15
    4120:	0f 93       	push	r16
    4122:	1f 93       	push	r17
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	d8 2e       	mov	r13, r24
    412e:	dc 18       	sub	r13, r12
    4130:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    4132:	b8 2e       	mov	r11, r24
    4134:	b6 1a       	sub	r11, r22
    4136:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    4138:	46 2f       	mov	r20, r22
    413a:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    413c:	a6 2e       	mov	r10, r22
    413e:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    4140:	0b 2d       	mov	r16, r11
    4142:	10 e0       	ldi	r17, 0x00	; 0
    4144:	88 e0       	ldi	r24, 0x08	; 8
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	84 1b       	sub	r24, r20
    414a:	91 09       	sbc	r25, r1
    414c:	08 17       	cp	r16, r24
    414e:	19 07       	cpc	r17, r25
    4150:	7c f4       	brge	.+30     	; 0x4170 <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    4152:	88 e0       	ldi	r24, 0x08	; 8
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	80 1b       	sub	r24, r16
    4158:	91 0b       	sbc	r25, r17
    415a:	2f ef       	ldi	r18, 0xFF	; 255
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	b9 01       	movw	r22, r18
    4160:	02 c0       	rjmp	.+4      	; 0x4166 <GLCD_InvertRect+0x60>
    4162:	75 95       	asr	r23
    4164:	67 95       	ror	r22
    4166:	8a 95       	dec	r24
    4168:	e2 f7       	brpl	.-8      	; 0x4162 <GLCD_InvertRect+0x5c>
    416a:	cb 01       	movw	r24, r22
		h = height;
    416c:	5b 2c       	mov	r5, r11
    416e:	04 c0       	rjmp	.+8      	; 0x4178 <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    4170:	88 e0       	ldi	r24, 0x08	; 8
    4172:	58 2e       	mov	r5, r24
    4174:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    4176:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    4178:	68 2e       	mov	r6, r24
    417a:	01 c0       	rjmp	.+2      	; 0x417e <GLCD_InvertRect+0x78>
    417c:	66 0c       	add	r6, r6
    417e:	4a 95       	dec	r20
    4180:	ea f7       	brpl	.-6      	; 0x417c <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    4182:	6a 2d       	mov	r22, r10
    4184:	8c 2d       	mov	r24, r12
    4186:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    418a:	dd 20       	and	r13, r13
    418c:	d9 f1       	breq	.+118    	; 0x4204 <GLCD_InvertRect+0xfe>
    418e:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4190:	0f 2e       	mov	r0, r31
    4192:	f3 ec       	ldi	r31, 0xC3	; 195
    4194:	ef 2e       	mov	r14, r31
    4196:	f2 e0       	ldi	r31, 0x02	; 2
    4198:	ff 2e       	mov	r15, r31
    419a:	f0 2d       	mov	r31, r0
    419c:	c2 ec       	ldi	r28, 0xC2	; 194
    419e:	d2 e0       	ldi	r29, 0x02	; 2
    41a0:	f7 01       	movw	r30, r14
    41a2:	70 80       	ld	r7, Z
    41a4:	98 80       	ld	r9, Y
    41a6:	67 2d       	mov	r22, r7
    41a8:	89 2d       	mov	r24, r9
    41aa:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    41ae:	99 2d       	mov	r25, r9
    41b0:	9f 5f       	subi	r25, 0xFF	; 255
    41b2:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    41b4:	48 2f       	mov	r20, r24
    41b6:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    41b8:	67 2d       	mov	r22, r7
    41ba:	89 2d       	mov	r24, r9
    41bc:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    41c0:	83 94       	inc	r8
    41c2:	8d 10       	cpse	r8, r13
    41c4:	ed cf       	rjmp	.-38     	; 0x41a0 <GLCD_InvertRect+0x9a>
    41c6:	1e c0       	rjmp	.+60     	; 0x4204 <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    41c8:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    41ca:	6c 2f       	mov	r22, r28
    41cc:	8c 2d       	mov	r24, r12
    41ce:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    41d2:	dd 20       	and	r13, r13
    41d4:	39 f1       	breq	.+78     	; 0x4224 <GLCD_InvertRect+0x11e>
    41d6:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    41d8:	f7 01       	movw	r30, r14
    41da:	50 80       	ld	r5, Z
    41dc:	f1 01       	movw	r30, r2
    41de:	80 80       	ld	r8, Z
    41e0:	65 2d       	mov	r22, r5
    41e2:	88 2d       	mov	r24, r8
    41e4:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    41e8:	98 2d       	mov	r25, r8
    41ea:	9f 5f       	subi	r25, 0xFF	; 255
    41ec:	f1 01       	movw	r30, r2
    41ee:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    41f0:	48 2f       	mov	r20, r24
    41f2:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    41f4:	65 2d       	mov	r22, r5
    41f6:	88 2d       	mov	r24, r8
    41f8:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    41fc:	63 94       	inc	r6
    41fe:	6d 14       	cp	r6, r13
    4200:	89 f0       	breq	.+34     	; 0x4224 <GLCD_InvertRect+0x11e>
    4202:	ea cf       	rjmp	.-44     	; 0x41d8 <GLCD_InvertRect+0xd2>
    4204:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    4206:	5a 18       	sub	r5, r10
    4208:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    420a:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    420c:	0f 2e       	mov	r0, r31
    420e:	f3 ec       	ldi	r31, 0xC3	; 195
    4210:	ef 2e       	mov	r14, r31
    4212:	f2 e0       	ldi	r31, 0x02	; 2
    4214:	ff 2e       	mov	r15, r31
    4216:	f0 2d       	mov	r31, r0
    4218:	0f 2e       	mov	r0, r31
    421a:	f2 ec       	ldi	r31, 0xC2	; 194
    421c:	2f 2e       	mov	r2, r31
    421e:	f2 e0       	ldi	r31, 0x02	; 2
    4220:	3f 2e       	mov	r3, r31
    4222:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    4224:	8a 2d       	mov	r24, r10
    4226:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    4228:	e8 2f       	mov	r30, r24
    422a:	f0 e0       	ldi	r31, 0x00	; 0
    422c:	df 01       	movw	r26, r30
    422e:	18 96       	adiw	r26, 0x08	; 8
    4230:	0a 17       	cp	r16, r26
    4232:	1b 07       	cpc	r17, r27
    4234:	4c f6       	brge	.-110    	; 0x41c8 <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    4236:	8b 15       	cp	r24, r11
    4238:	58 f5       	brcc	.+86     	; 0x4290 <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    423a:	0e 1b       	sub	r16, r30
    423c:	1f 0b       	sbc	r17, r31
    423e:	8f ef       	ldi	r24, 0xFF	; 255
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	9c 01       	movw	r18, r24
    4244:	02 c0       	rjmp	.+4      	; 0x424a <GLCD_InvertRect+0x144>
    4246:	22 0f       	add	r18, r18
    4248:	33 1f       	adc	r19, r19
    424a:	0a 95       	dec	r16
    424c:	e2 f7       	brpl	.-8      	; 0x4246 <GLCD_InvertRect+0x140>
    424e:	b2 2e       	mov	r11, r18
    4250:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    4252:	6c 2f       	mov	r22, r28
    4254:	68 5f       	subi	r22, 0xF8	; 248
    4256:	8c 2d       	mov	r24, r12
    4258:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    425c:	dd 20       	and	r13, r13
    425e:	c1 f0       	breq	.+48     	; 0x4290 <GLCD_InvertRect+0x18a>
    4260:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4262:	03 ec       	ldi	r16, 0xC3	; 195
    4264:	12 e0       	ldi	r17, 0x02	; 2
    4266:	c2 ec       	ldi	r28, 0xC2	; 194
    4268:	d2 e0       	ldi	r29, 0x02	; 2
    426a:	f8 01       	movw	r30, r16
    426c:	c0 80       	ld	r12, Z
    426e:	f8 80       	ld	r15, Y
    4270:	6c 2d       	mov	r22, r12
    4272:	8f 2d       	mov	r24, r15
    4274:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4278:	9f 2d       	mov	r25, r15
    427a:	9f 5f       	subi	r25, 0xFF	; 255
    427c:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    427e:	48 2f       	mov	r20, r24
    4280:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4282:	6c 2d       	mov	r22, r12
    4284:	8f 2d       	mov	r24, r15
    4286:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    428a:	e3 94       	inc	r14
    428c:	ed 10       	cpse	r14, r13
    428e:	ed cf       	rjmp	.-38     	; 0x426a <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	ff 90       	pop	r15
    429a:	ef 90       	pop	r14
    429c:	df 90       	pop	r13
    429e:	cf 90       	pop	r12
    42a0:	bf 90       	pop	r11
    42a2:	af 90       	pop	r10
    42a4:	9f 90       	pop	r9
    42a6:	8f 90       	pop	r8
    42a8:	7f 90       	pop	r7
    42aa:	6f 90       	pop	r6
    42ac:	5f 90       	pop	r5
    42ae:	3f 90       	pop	r3
    42b0:	2f 90       	pop	r2
    42b2:	08 95       	ret

000042b4 <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    42b4:	66 23       	and	r22, r22
    42b6:	f4 f0       	brlt	.+60     	; 0x42f4 <GLCD_SetFont+0x40>
    42b8:	40 34       	cpi	r20, 0x40	; 64
    42ba:	e0 f4       	brcc	.+56     	; 0x42f4 <GLCD_SetFont+0x40>
    42bc:	22 30       	cpi	r18, 0x02	; 2
    42be:	d0 f4       	brcc	.+52     	; 0x42f4 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    42c0:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <__GLCD+0x5>
    42c4:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    42c8:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    42cc:	40 93 c8 02 	sts	0x02C8, r20	; 0x8002c8 <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	41 50       	subi	r20, 0x01	; 1
    42d4:	51 09       	sbc	r21, r1
    42d6:	ca 01       	movw	r24, r20
    42d8:	99 23       	and	r25, r25
    42da:	0c f4       	brge	.+2      	; 0x42de <GLCD_SetFont+0x2a>
    42dc:	07 96       	adiw	r24, 0x07	; 7
    42de:	95 95       	asr	r25
    42e0:	87 95       	ror	r24
    42e2:	95 95       	asr	r25
    42e4:	87 95       	ror	r24
    42e6:	95 95       	asr	r25
    42e8:	87 95       	ror	r24
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    42f0:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <__GLCD+0x9>
    42f4:	08 95       	ret

000042f6 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    42f6:	2f 92       	push	r2
    42f8:	3f 92       	push	r3
    42fa:	4f 92       	push	r4
    42fc:	5f 92       	push	r5
    42fe:	6f 92       	push	r6
    4300:	7f 92       	push	r7
    4302:	8f 92       	push	r8
    4304:	9f 92       	push	r9
    4306:	af 92       	push	r10
    4308:	bf 92       	push	r11
    430a:	cf 92       	push	r12
    430c:	df 92       	push	r13
    430e:	ef 92       	push	r14
    4310:	ff 92       	push	r15
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	cd b7       	in	r28, 0x3d	; 61
    431c:	de b7       	in	r29, 0x3e	; 62
    431e:	2b 97       	sbiw	r28, 0x0b	; 11
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	f8 94       	cli
    4324:	de bf       	out	0x3e, r29	; 62
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    432a:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    432e:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    4330:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    4334:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    4336:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    433a:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    433c:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <__GLCD+0x6>
    4340:	29 9f       	mul	r18, r25
    4342:	90 01       	movw	r18, r0
    4344:	11 24       	eor	r1, r1
    4346:	2f 5f       	subi	r18, 0xFF	; 255
    4348:	3f 4f       	sbci	r19, 0xFF	; 255
    434a:	82 9f       	mul	r24, r18
    434c:	a0 01       	movw	r20, r0
    434e:	83 9f       	mul	r24, r19
    4350:	50 0d       	add	r21, r0
    4352:	11 24       	eor	r1, r1
    4354:	59 87       	std	Y+9, r21	; 0x09
    4356:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    4358:	4f 5f       	subi	r20, 0xFF	; 255
    435a:	5f 4f       	sbci	r21, 0xFF	; 255
    435c:	5e 83       	std	Y+6, r21	; 0x06
    435e:	4d 83       	std	Y+5, r20	; 0x05
    4360:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <__GLCD+0x4>
    4364:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <__GLCD+0x5>
    4368:	a8 85       	ldd	r26, Y+8	; 0x08
    436a:	b9 85       	ldd	r27, Y+9	; 0x09
    436c:	ea 0f       	add	r30, r26
    436e:	fb 1f       	adc	r31, r27
    4370:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    4372:	7f 80       	ldd	r7, Y+7	; 0x07
    4374:	b7 e0       	ldi	r27, 0x07	; 7
    4376:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    4378:	99 23       	and	r25, r25
    437a:	09 f4       	brne	.+2      	; 0x437e <GLCD_PrintChar+0x88>
    437c:	92 c0       	rjmp	.+292    	; 0x44a2 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    437e:	ef 81       	ldd	r30, Y+7	; 0x07
    4380:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    4382:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4384:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4386:	88 e0       	ldi	r24, 0x08	; 8
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	9c 01       	movw	r18, r24
    438c:	27 19       	sub	r18, r7
    438e:	31 09       	sbc	r19, r1
    4390:	3a 83       	std	Y+2, r19	; 0x02
    4392:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4394:	0f 2e       	mov	r0, r31
    4396:	fa ec       	ldi	r31, 0xCA	; 202
    4398:	8f 2e       	mov	r8, r31
    439a:	f2 e0       	ldi	r31, 0x02	; 2
    439c:	9f 2e       	mov	r9, r31
    439e:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    43a0:	0f 2e       	mov	r0, r31
    43a2:	f3 ec       	ldi	r31, 0xC3	; 195
    43a4:	af 2e       	mov	r10, r31
    43a6:	f2 e0       	ldi	r31, 0x02	; 2
    43a8:	bf 2e       	mov	r11, r31
    43aa:	f0 2d       	mov	r31, r0
    43ac:	02 ec       	ldi	r16, 0xC2	; 194
    43ae:	12 e0       	ldi	r17, 0x02	; 2
    43b0:	67 2c       	mov	r6, r7
    43b2:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    43b4:	6b 81       	ldd	r22, Y+3	; 0x03
    43b6:	8c 81       	ldd	r24, Y+4	; 0x04
    43b8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    43bc:	4d 81       	ldd	r20, Y+5	; 0x05
    43be:	5e 81       	ldd	r21, Y+6	; 0x06
    43c0:	43 0d       	add	r20, r3
    43c2:	51 1d       	adc	r21, r1
    43c4:	5b 87       	std	Y+11, r21	; 0x0b
    43c6:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    43c8:	7a 01       	movw	r14, r20
    43ca:	51 e0       	ldi	r21, 0x01	; 1
    43cc:	e5 1a       	sub	r14, r21
    43ce:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    43d0:	77 20       	and	r7, r7
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <GLCD_PrintChar+0xe0>
    43d4:	4f c0       	rjmp	.+158    	; 0x4474 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    43d6:	0f 2e       	mov	r0, r31
    43d8:	f9 ec       	ldi	r31, 0xC9	; 201
    43da:	cf 2e       	mov	r12, r31
    43dc:	f2 e0       	ldi	r31, 0x02	; 2
    43de:	df 2e       	mov	r13, r31
    43e0:	f0 2d       	mov	r31, r0
    43e2:	83 2d       	mov	r24, r3
    43e4:	36 2c       	mov	r3, r6
    43e6:	67 2c       	mov	r6, r7
    43e8:	72 2c       	mov	r7, r2
    43ea:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    43ec:	a5 ec       	ldi	r26, 0xC5	; 197
    43ee:	b2 e0       	ldi	r27, 0x02	; 2
    43f0:	2d 91       	ld	r18, X+
    43f2:	3c 91       	ld	r19, X
    43f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    43f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    43f8:	e2 0f       	add	r30, r18
    43fa:	f3 1f       	adc	r31, r19
    43fc:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    43fe:	4e 2e       	mov	r4, r30
    4400:	03 2c       	mov	r0, r3
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <GLCD_PrintChar+0x110>
    4404:	44 0c       	add	r4, r4
    4406:	0a 94       	dec	r0
    4408:	ea f7       	brpl	.-6      	; 0x4404 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    440a:	55 20       	and	r5, r5
    440c:	81 f0       	breq	.+32     	; 0x442e <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    440e:	f9 01       	movw	r30, r18
    4410:	ee 0d       	add	r30, r14
    4412:	ff 1d       	adc	r31, r15
    4414:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	09 80       	ldd	r0, Y+1	; 0x01
    441a:	02 c0       	rjmp	.+4      	; 0x4420 <GLCD_PrintChar+0x12a>
    441c:	35 95       	asr	r19
    441e:	27 95       	ror	r18
    4420:	0a 94       	dec	r0
    4422:	e2 f7       	brpl	.-8      	; 0x441c <GLCD_PrintChar+0x126>
				data |= dataPrev;
    4424:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    4426:	f6 01       	movw	r30, r12
    4428:	80 81       	ld	r24, Z
    442a:	e8 0e       	add	r14, r24
    442c:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    442e:	d4 01       	movw	r26, r8
    4430:	8c 91       	ld	r24, X
    4432:	81 30       	cpi	r24, 0x01	; 1
    4434:	39 f4       	brne	.+14     	; 0x4444 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4436:	f5 01       	movw	r30, r10
    4438:	60 81       	ld	r22, Z
    443a:	d8 01       	movw	r26, r16
    443c:	8c 91       	ld	r24, X
    443e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
    4442:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4444:	f5 01       	movw	r30, r10
    4446:	60 81       	ld	r22, Z
    4448:	d8 01       	movw	r26, r16
    444a:	8c 91       	ld	r24, X
    444c:	98 2f       	mov	r25, r24
    444e:	9f 5f       	subi	r25, 0xFF	; 255
    4450:	9c 93       	st	X, r25
    4452:	44 2d       	mov	r20, r4
    4454:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    4458:	f6 01       	movw	r30, r12
    445a:	80 81       	ld	r24, Z
    445c:	2a 85       	ldd	r18, Y+10	; 0x0a
    445e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4460:	28 0f       	add	r18, r24
    4462:	31 1d       	adc	r19, r1
    4464:	3b 87       	std	Y+11, r19	; 0x0b
    4466:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4468:	73 94       	inc	r7
    446a:	76 10       	cpse	r7, r6
    446c:	bf cf       	rjmp	.-130    	; 0x43ec <GLCD_PrintChar+0xf6>
    446e:	76 2c       	mov	r7, r6
    4470:	63 2c       	mov	r6, r3
    4472:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    4474:	d4 01       	movw	r26, r8
    4476:	8c 91       	ld	r24, X
    4478:	81 11       	cpse	r24, r1
    447a:	07 c0       	rjmp	.+14     	; 0x448a <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    447c:	42 2d       	mov	r20, r2
    447e:	f5 01       	movw	r30, r10
    4480:	60 81       	ld	r22, Z
    4482:	d8 01       	movw	r26, r16
    4484:	8c 91       	ld	r24, X
    4486:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    448a:	bb 81       	ldd	r27, Y+3	; 0x03
    448c:	b8 5f       	subi	r27, 0xF8	; 248
    448e:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    4490:	33 94       	inc	r3
    4492:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <__GLCD+0x8>
    4496:	38 16       	cp	r3, r24
    4498:	08 f4       	brcc	.+2      	; 0x449c <GLCD_PrintChar+0x1a6>
    449a:	8c cf       	rjmp	.-232    	; 0x43b4 <GLCD_PrintChar+0xbe>
    449c:	57 2c       	mov	r5, r7
    449e:	76 2c       	mov	r7, r6
    44a0:	03 c0       	rjmp	.+6      	; 0x44a8 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    44a2:	ef 81       	ldd	r30, Y+7	; 0x07
    44a4:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    44a6:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    44a8:	2f 81       	ldd	r18, Y+7	; 0x07
    44aa:	22 95       	swap	r18
    44ac:	26 95       	lsr	r18
    44ae:	26 95       	lsr	r18
    44b0:	23 70       	andi	r18, 0x03	; 3
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <__GLCD+0x7>
    44b8:	82 95       	swap	r24
    44ba:	86 95       	lsr	r24
    44bc:	86 95       	lsr	r24
    44be:	83 70       	andi	r24, 0x03	; 3
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	ff 81       	ldd	r31, Y+7	; 0x07
    44c4:	8f 0f       	add	r24, r31
    44c6:	91 1d       	adc	r25, r1
    44c8:	28 17       	cp	r18, r24
    44ca:	39 07       	cpc	r19, r25
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <GLCD_PrintChar+0x1da>
    44ce:	69 c0       	rjmp	.+210    	; 0x45a2 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    44d0:	6b 81       	ldd	r22, Y+3	; 0x03
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    44d8:	28 85       	ldd	r18, Y+8	; 0x08
    44da:	39 85       	ldd	r19, Y+9	; 0x09
    44dc:	23 0d       	add	r18, r3
    44de:	31 1d       	adc	r19, r1
    44e0:	3a 83       	std	Y+2, r19	; 0x02
    44e2:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    44e4:	55 20       	and	r5, r5
    44e6:	09 f4       	brne	.+2      	; 0x44ea <GLCD_PrintChar+0x1f4>
    44e8:	51 c0       	rjmp	.+162    	; 0x458c <GLCD_PrintChar+0x296>
    44ea:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    44ec:	0f 2e       	mov	r0, r31
    44ee:	f3 ec       	ldi	r31, 0xC3	; 195
    44f0:	af 2e       	mov	r10, r31
    44f2:	f2 e0       	ldi	r31, 0x02	; 2
    44f4:	bf 2e       	mov	r11, r31
    44f6:	f0 2d       	mov	r31, r0
    44f8:	02 ec       	ldi	r16, 0xC2	; 194
    44fa:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    44fc:	0f 2e       	mov	r0, r31
    44fe:	f5 ec       	ldi	r31, 0xC5	; 197
    4500:	cf 2e       	mov	r12, r31
    4502:	f2 e0       	ldi	r31, 0x02	; 2
    4504:	df 2e       	mov	r13, r31
    4506:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4508:	88 e0       	ldi	r24, 0x08	; 8
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	ac 01       	movw	r20, r24
    450e:	47 19       	sub	r20, r7
    4510:	51 09       	sbc	r21, r1
    4512:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4514:	0f 2e       	mov	r0, r31
    4516:	fa ec       	ldi	r31, 0xCA	; 202
    4518:	ef 2e       	mov	r14, r31
    451a:	f2 e0       	ldi	r31, 0x02	; 2
    451c:	ff 2e       	mov	r15, r31
    451e:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    4520:	0f 2e       	mov	r0, r31
    4522:	f9 ec       	ldi	r31, 0xC9	; 201
    4524:	8f 2e       	mov	r8, r31
    4526:	f2 e0       	ldi	r31, 0x02	; 2
    4528:	9f 2e       	mov	r9, r31
    452a:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    452c:	d5 01       	movw	r26, r10
    452e:	2c 90       	ld	r2, X
    4530:	f8 01       	movw	r30, r16
    4532:	40 80       	ld	r4, Z
    4534:	62 2d       	mov	r22, r2
    4536:	84 2d       	mov	r24, r4
    4538:	0e 94 3a 1c 	call	0x3874	; 0x3874 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    453c:	d6 01       	movw	r26, r12
    453e:	ed 91       	ld	r30, X+
    4540:	fc 91       	ld	r31, X
    4542:	29 81       	ldd	r18, Y+1	; 0x01
    4544:	3a 81       	ldd	r19, Y+2	; 0x02
    4546:	e2 0f       	add	r30, r18
    4548:	f3 1f       	adc	r31, r19
    454a:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    454c:	50 e0       	ldi	r21, 0x00	; 0
    454e:	06 2c       	mov	r0, r6
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <GLCD_PrintChar+0x260>
    4552:	55 95       	asr	r21
    4554:	47 95       	ror	r20
    4556:	0a 94       	dec	r0
    4558:	e2 f7       	brpl	.-8      	; 0x4552 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    455a:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    455c:	d7 01       	movw	r26, r14
    455e:	9c 91       	ld	r25, X
    4560:	91 30       	cpi	r25, 0x01	; 1
    4562:	09 f4       	brne	.+2      	; 0x4566 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4564:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4566:	84 2d       	mov	r24, r4
    4568:	8f 5f       	subi	r24, 0xFF	; 255
    456a:	f8 01       	movw	r30, r16
    456c:	80 83       	st	Z, r24
    456e:	62 2d       	mov	r22, r2
    4570:	84 2d       	mov	r24, r4
    4572:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    4576:	d4 01       	movw	r26, r8
    4578:	8c 91       	ld	r24, X
    457a:	e9 81       	ldd	r30, Y+1	; 0x01
    457c:	fa 81       	ldd	r31, Y+2	; 0x02
    457e:	e8 0f       	add	r30, r24
    4580:	f1 1d       	adc	r31, r1
    4582:	fa 83       	std	Y+2, r31	; 0x02
    4584:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4586:	33 94       	inc	r3
    4588:	35 10       	cpse	r3, r5
    458a:	d0 cf       	rjmp	.-96     	; 0x452c <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    458c:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <__GLCD+0x9>
    4590:	81 11       	cpse	r24, r1
    4592:	07 c0       	rjmp	.+14     	; 0x45a2 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <__GLCD+0x2>
    459a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    459e:	0e 94 2c 1c 	call	0x3858	; 0x3858 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    45a2:	8c 81       	ldd	r24, Y+4	; 0x04
    45a4:	8f 5f       	subi	r24, 0xFF	; 255
    45a6:	6f 81       	ldd	r22, Y+7	; 0x07
    45a8:	85 0d       	add	r24, r5
    45aa:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <GLCD_GotoXY>
}
    45ae:	2b 96       	adiw	r28, 0x0b	; 11
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	1f 91       	pop	r17
    45c0:	0f 91       	pop	r16
    45c2:	ff 90       	pop	r15
    45c4:	ef 90       	pop	r14
    45c6:	df 90       	pop	r13
    45c8:	cf 90       	pop	r12
    45ca:	bf 90       	pop	r11
    45cc:	af 90       	pop	r10
    45ce:	9f 90       	pop	r9
    45d0:	8f 90       	pop	r8
    45d2:	7f 90       	pop	r7
    45d4:	6f 90       	pop	r6
    45d6:	5f 90       	pop	r5
    45d8:	4f 90       	pop	r4
    45da:	3f 90       	pop	r3
    45dc:	2f 90       	pop	r2
    45de:	08 95       	ret

000045e0 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    45e0:	ef 92       	push	r14
    45e2:	ff 92       	push	r15
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	ec 01       	movw	r28, r24
	while(*Text)
    45ee:	88 81       	ld	r24, Y
    45f0:	88 23       	and	r24, r24
    45f2:	19 f1       	breq	.+70     	; 0x463a <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    45f4:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <__GLCD+0x1>
    45f8:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <__GLCD+0x6>
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	29 0f       	add	r18, r25
    4600:	31 1d       	adc	r19, r1
    4602:	20 38       	cpi	r18, 0x80	; 128
    4604:	31 05       	cpc	r19, r1
    4606:	cc f4       	brge	.+50     	; 0x463a <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    4608:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    460a:	0f 2e       	mov	r0, r31
    460c:	f2 ec       	ldi	r31, 0xC2	; 194
    460e:	ef 2e       	mov	r14, r31
    4610:	f2 e0       	ldi	r31, 0x02	; 2
    4612:	ff 2e       	mov	r15, r31
    4614:	f0 2d       	mov	r31, r0
    4616:	07 ec       	ldi	r16, 0xC7	; 199
    4618:	12 e0       	ldi	r17, 0x02	; 2
    461a:	0a c0       	rjmp	.+20     	; 0x4630 <GLCD_PrintString+0x50>
    461c:	f7 01       	movw	r30, r14
    461e:	90 81       	ld	r25, Z
    4620:	f8 01       	movw	r30, r16
    4622:	20 81       	ld	r18, Z
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	29 0f       	add	r18, r25
    4628:	31 1d       	adc	r19, r1
    462a:	20 38       	cpi	r18, 0x80	; 128
    462c:	31 05       	cpc	r19, r1
    462e:	2c f4       	brge	.+10     	; 0x463a <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    4630:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    4634:	89 91       	ld	r24, Y+
    4636:	81 11       	cpse	r24, r1
    4638:	f1 cf       	rjmp	.-30     	; 0x461c <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
    4642:	ff 90       	pop	r15
    4644:	ef 90       	pop	r14
    4646:	08 95       	ret

00004648 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    4648:	0f 93       	push	r16
    464a:	1f 93       	push	r17
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62
    4654:	2c 97       	sbiw	r28, 0x0c	; 12
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	f8 94       	cli
    465a:	de bf       	out	0x3e, r29	; 62
    465c:	0f be       	out	0x3f, r0	; 63
    465e:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    4660:	61 15       	cp	r22, r1
    4662:	71 05       	cpc	r23, r1
    4664:	81 05       	cpc	r24, r1
    4666:	91 05       	cpc	r25, r1
    4668:	21 f4       	brne	.+8      	; 0x4672 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    466a:	80 e3       	ldi	r24, 0x30	; 48
    466c:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
    4670:	45 c1       	rjmp	.+650    	; 0x48fc <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    4672:	61 15       	cp	r22, r1
    4674:	71 05       	cpc	r23, r1
    4676:	81 05       	cpc	r24, r1
    4678:	20 e8       	ldi	r18, 0x80	; 128
    467a:	92 07       	cpc	r25, r18
    467c:	09 f4       	brne	.+2      	; 0x4680 <GLCD_PrintInteger+0x38>
    467e:	3e c1       	rjmp	.+636    	; 0x48fc <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    4680:	fe 01       	movw	r30, r28
    4682:	31 96       	adiw	r30, 0x01	; 1
    4684:	2c e0       	ldi	r18, 0x0C	; 12
    4686:	df 01       	movw	r26, r30
    4688:	1d 92       	st	X+, r1
    468a:	2a 95       	dec	r18
    468c:	e9 f7       	brne	.-6      	; 0x4688 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    468e:	20 e3       	ldi	r18, 0x30	; 48
    4690:	2b 87       	std	Y+11, r18	; 0x0b
    4692:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    4694:	29 87       	std	Y+9, r18	; 0x09
    4696:	28 87       	std	Y+8, r18	; 0x08
    4698:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    469a:	2e 83       	std	Y+6, r18	; 0x06
    469c:	2d 83       	std	Y+5, r18	; 0x05
    469e:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    46a0:	2b 83       	std	Y+3, r18	; 0x03
    46a2:	2a 83       	std	Y+2, r18	; 0x02
    46a4:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    46a6:	99 23       	and	r25, r25
    46a8:	5c f4       	brge	.+22     	; 0x46c0 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    46aa:	9b 01       	movw	r18, r22
    46ac:	ac 01       	movw	r20, r24
    46ae:	88 27       	eor	r24, r24
    46b0:	99 27       	eor	r25, r25
    46b2:	dc 01       	movw	r26, r24
    46b4:	82 1b       	sub	r24, r18
    46b6:	93 0b       	sbc	r25, r19
    46b8:	a4 0b       	sbc	r26, r20
    46ba:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    46bc:	41 e0       	ldi	r20, 0x01	; 1
    46be:	03 c0       	rjmp	.+6      	; 0x46c6 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    46c4:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    46c6:	81 30       	cpi	r24, 0x01	; 1
    46c8:	3a ec       	ldi	r19, 0xCA	; 202
    46ca:	93 07       	cpc	r25, r19
    46cc:	3a e9       	ldi	r19, 0x9A	; 154
    46ce:	a3 07       	cpc	r26, r19
    46d0:	3b e3       	ldi	r19, 0x3B	; 59
    46d2:	b3 07       	cpc	r27, r19
    46d4:	94 f0       	brlt	.+36     	; 0x46fa <GLCD_PrintInteger+0xb2>
    46d6:	2a 81       	ldd	r18, Y+2	; 0x02
    46d8:	2f 5f       	subi	r18, 0xFF	; 255
    46da:	01 c0       	rjmp	.+2      	; 0x46de <GLCD_PrintInteger+0x96>
    46dc:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    46de:	9a 5c       	subi	r25, 0xCA	; 202
    46e0:	aa 49       	sbci	r26, 0x9A	; 154
    46e2:	bb 43       	sbci	r27, 0x3B	; 59
    46e4:	32 2f       	mov	r19, r18
    46e6:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    46e8:	81 30       	cpi	r24, 0x01	; 1
    46ea:	5a ec       	ldi	r21, 0xCA	; 202
    46ec:	95 07       	cpc	r25, r21
    46ee:	5a e9       	ldi	r21, 0x9A	; 154
    46f0:	a5 07       	cpc	r26, r21
    46f2:	5b e3       	ldi	r21, 0x3B	; 59
    46f4:	b5 07       	cpc	r27, r21
    46f6:	94 f7       	brge	.-28     	; 0x46dc <GLCD_PrintInteger+0x94>
    46f8:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    46fa:	81 15       	cp	r24, r1
    46fc:	21 ee       	ldi	r18, 0xE1	; 225
    46fe:	92 07       	cpc	r25, r18
    4700:	25 ef       	ldi	r18, 0xF5	; 245
    4702:	a2 07       	cpc	r26, r18
    4704:	25 e0       	ldi	r18, 0x05	; 5
    4706:	b2 07       	cpc	r27, r18
    4708:	94 f0       	brlt	.+36     	; 0x472e <GLCD_PrintInteger+0xe6>
    470a:	2b 81       	ldd	r18, Y+3	; 0x03
    470c:	2f 5f       	subi	r18, 0xFF	; 255
    470e:	01 c0       	rjmp	.+2      	; 0x4712 <GLCD_PrintInteger+0xca>
    4710:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    4712:	91 5e       	subi	r25, 0xE1	; 225
    4714:	a5 4f       	sbci	r26, 0xF5	; 245
    4716:	b5 40       	sbci	r27, 0x05	; 5
    4718:	32 2f       	mov	r19, r18
    471a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    471c:	81 15       	cp	r24, r1
    471e:	51 ee       	ldi	r21, 0xE1	; 225
    4720:	95 07       	cpc	r25, r21
    4722:	55 ef       	ldi	r21, 0xF5	; 245
    4724:	a5 07       	cpc	r26, r21
    4726:	55 e0       	ldi	r21, 0x05	; 5
    4728:	b5 07       	cpc	r27, r21
    472a:	94 f7       	brge	.-28     	; 0x4710 <GLCD_PrintInteger+0xc8>
    472c:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    472e:	80 38       	cpi	r24, 0x80	; 128
    4730:	26 e9       	ldi	r18, 0x96	; 150
    4732:	92 07       	cpc	r25, r18
    4734:	28 e9       	ldi	r18, 0x98	; 152
    4736:	a2 07       	cpc	r26, r18
    4738:	b1 05       	cpc	r27, r1
    473a:	94 f0       	brlt	.+36     	; 0x4760 <GLCD_PrintInteger+0x118>
    473c:	2c 81       	ldd	r18, Y+4	; 0x04
    473e:	2f 5f       	subi	r18, 0xFF	; 255
    4740:	01 c0       	rjmp	.+2      	; 0x4744 <GLCD_PrintInteger+0xfc>
    4742:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    4744:	80 58       	subi	r24, 0x80	; 128
    4746:	96 49       	sbci	r25, 0x96	; 150
    4748:	a8 49       	sbci	r26, 0x98	; 152
    474a:	b1 09       	sbc	r27, r1
    474c:	32 2f       	mov	r19, r18
    474e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    4750:	80 38       	cpi	r24, 0x80	; 128
    4752:	56 e9       	ldi	r21, 0x96	; 150
    4754:	95 07       	cpc	r25, r21
    4756:	58 e9       	ldi	r21, 0x98	; 152
    4758:	a5 07       	cpc	r26, r21
    475a:	b1 05       	cpc	r27, r1
    475c:	94 f7       	brge	.-28     	; 0x4742 <GLCD_PrintInteger+0xfa>
    475e:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    4760:	80 34       	cpi	r24, 0x40	; 64
    4762:	22 e4       	ldi	r18, 0x42	; 66
    4764:	92 07       	cpc	r25, r18
    4766:	2f e0       	ldi	r18, 0x0F	; 15
    4768:	a2 07       	cpc	r26, r18
    476a:	b1 05       	cpc	r27, r1
    476c:	94 f0       	brlt	.+36     	; 0x4792 <GLCD_PrintInteger+0x14a>
    476e:	2d 81       	ldd	r18, Y+5	; 0x05
    4770:	2f 5f       	subi	r18, 0xFF	; 255
    4772:	01 c0       	rjmp	.+2      	; 0x4776 <GLCD_PrintInteger+0x12e>
    4774:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    4776:	80 54       	subi	r24, 0x40	; 64
    4778:	92 44       	sbci	r25, 0x42	; 66
    477a:	af 40       	sbci	r26, 0x0F	; 15
    477c:	b1 09       	sbc	r27, r1
    477e:	32 2f       	mov	r19, r18
    4780:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    4782:	80 34       	cpi	r24, 0x40	; 64
    4784:	52 e4       	ldi	r21, 0x42	; 66
    4786:	95 07       	cpc	r25, r21
    4788:	5f e0       	ldi	r21, 0x0F	; 15
    478a:	a5 07       	cpc	r26, r21
    478c:	b1 05       	cpc	r27, r1
    478e:	94 f7       	brge	.-28     	; 0x4774 <GLCD_PrintInteger+0x12c>
    4790:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    4792:	80 3a       	cpi	r24, 0xA0	; 160
    4794:	26 e8       	ldi	r18, 0x86	; 134
    4796:	92 07       	cpc	r25, r18
    4798:	21 e0       	ldi	r18, 0x01	; 1
    479a:	a2 07       	cpc	r26, r18
    479c:	b1 05       	cpc	r27, r1
    479e:	94 f0       	brlt	.+36     	; 0x47c4 <GLCD_PrintInteger+0x17c>
    47a0:	2e 81       	ldd	r18, Y+6	; 0x06
    47a2:	2f 5f       	subi	r18, 0xFF	; 255
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <GLCD_PrintInteger+0x160>
    47a6:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    47a8:	80 5a       	subi	r24, 0xA0	; 160
    47aa:	96 48       	sbci	r25, 0x86	; 134
    47ac:	a1 40       	sbci	r26, 0x01	; 1
    47ae:	b1 09       	sbc	r27, r1
    47b0:	32 2f       	mov	r19, r18
    47b2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    47b4:	80 3a       	cpi	r24, 0xA0	; 160
    47b6:	56 e8       	ldi	r21, 0x86	; 134
    47b8:	95 07       	cpc	r25, r21
    47ba:	51 e0       	ldi	r21, 0x01	; 1
    47bc:	a5 07       	cpc	r26, r21
    47be:	b1 05       	cpc	r27, r1
    47c0:	94 f7       	brge	.-28     	; 0x47a6 <GLCD_PrintInteger+0x15e>
    47c2:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    47c4:	80 31       	cpi	r24, 0x10	; 16
    47c6:	27 e2       	ldi	r18, 0x27	; 39
    47c8:	92 07       	cpc	r25, r18
    47ca:	a1 05       	cpc	r26, r1
    47cc:	b1 05       	cpc	r27, r1
    47ce:	8c f0       	brlt	.+34     	; 0x47f2 <GLCD_PrintInteger+0x1aa>
    47d0:	2f 81       	ldd	r18, Y+7	; 0x07
    47d2:	2f 5f       	subi	r18, 0xFF	; 255
    47d4:	01 c0       	rjmp	.+2      	; 0x47d8 <GLCD_PrintInteger+0x190>
    47d6:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    47d8:	80 51       	subi	r24, 0x10	; 16
    47da:	97 42       	sbci	r25, 0x27	; 39
    47dc:	a1 09       	sbc	r26, r1
    47de:	b1 09       	sbc	r27, r1
    47e0:	32 2f       	mov	r19, r18
    47e2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    47e4:	80 31       	cpi	r24, 0x10	; 16
    47e6:	57 e2       	ldi	r21, 0x27	; 39
    47e8:	95 07       	cpc	r25, r21
    47ea:	a1 05       	cpc	r26, r1
    47ec:	b1 05       	cpc	r27, r1
    47ee:	9c f7       	brge	.-26     	; 0x47d6 <GLCD_PrintInteger+0x18e>
    47f0:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    47f2:	88 3e       	cpi	r24, 0xE8	; 232
    47f4:	23 e0       	ldi	r18, 0x03	; 3
    47f6:	92 07       	cpc	r25, r18
    47f8:	a1 05       	cpc	r26, r1
    47fa:	b1 05       	cpc	r27, r1
    47fc:	8c f0       	brlt	.+34     	; 0x4820 <GLCD_PrintInteger+0x1d8>
    47fe:	28 85       	ldd	r18, Y+8	; 0x08
    4800:	2f 5f       	subi	r18, 0xFF	; 255
    4802:	01 c0       	rjmp	.+2      	; 0x4806 <GLCD_PrintInteger+0x1be>
    4804:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    4806:	88 5e       	subi	r24, 0xE8	; 232
    4808:	93 40       	sbci	r25, 0x03	; 3
    480a:	a1 09       	sbc	r26, r1
    480c:	b1 09       	sbc	r27, r1
    480e:	32 2f       	mov	r19, r18
    4810:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4812:	88 3e       	cpi	r24, 0xE8	; 232
    4814:	53 e0       	ldi	r21, 0x03	; 3
    4816:	95 07       	cpc	r25, r21
    4818:	a1 05       	cpc	r26, r1
    481a:	b1 05       	cpc	r27, r1
    481c:	9c f7       	brge	.-26     	; 0x4804 <GLCD_PrintInteger+0x1bc>
    481e:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    4820:	84 36       	cpi	r24, 0x64	; 100
    4822:	91 05       	cpc	r25, r1
    4824:	a1 05       	cpc	r26, r1
    4826:	b1 05       	cpc	r27, r1
    4828:	84 f0       	brlt	.+32     	; 0x484a <GLCD_PrintInteger+0x202>
    482a:	29 85       	ldd	r18, Y+9	; 0x09
    482c:	2f 5f       	subi	r18, 0xFF	; 255
    482e:	01 c0       	rjmp	.+2      	; 0x4832 <GLCD_PrintInteger+0x1ea>
    4830:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    4832:	84 56       	subi	r24, 0x64	; 100
    4834:	91 09       	sbc	r25, r1
    4836:	a1 09       	sbc	r26, r1
    4838:	b1 09       	sbc	r27, r1
    483a:	32 2f       	mov	r19, r18
    483c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    483e:	84 36       	cpi	r24, 0x64	; 100
    4840:	91 05       	cpc	r25, r1
    4842:	a1 05       	cpc	r26, r1
    4844:	b1 05       	cpc	r27, r1
    4846:	a4 f7       	brge	.-24     	; 0x4830 <GLCD_PrintInteger+0x1e8>
    4848:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    484a:	8a 30       	cpi	r24, 0x0A	; 10
    484c:	91 05       	cpc	r25, r1
    484e:	a1 05       	cpc	r26, r1
    4850:	b1 05       	cpc	r27, r1
    4852:	7c f0       	brlt	.+30     	; 0x4872 <GLCD_PrintInteger+0x22a>
    4854:	2a 85       	ldd	r18, Y+10	; 0x0a
    4856:	2f 5f       	subi	r18, 0xFF	; 255
    4858:	01 c0       	rjmp	.+2      	; 0x485c <GLCD_PrintInteger+0x214>
    485a:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    485c:	0a 97       	sbiw	r24, 0x0a	; 10
    485e:	a1 09       	sbc	r26, r1
    4860:	b1 09       	sbc	r27, r1
    4862:	32 2f       	mov	r19, r18
    4864:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    4866:	8a 30       	cpi	r24, 0x0A	; 10
    4868:	91 05       	cpc	r25, r1
    486a:	a1 05       	cpc	r26, r1
    486c:	b1 05       	cpc	r27, r1
    486e:	ac f7       	brge	.-22     	; 0x485a <GLCD_PrintInteger+0x212>
    4870:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    4872:	18 16       	cp	r1, r24
    4874:	19 06       	cpc	r1, r25
    4876:	1a 06       	cpc	r1, r26
    4878:	1b 06       	cpc	r1, r27
    487a:	5c f4       	brge	.+22     	; 0x4892 <GLCD_PrintInteger+0x24a>
    487c:	5b 85       	ldd	r21, Y+11	; 0x0b
    487e:	8c 01       	movw	r16, r24
    4880:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    4882:	01 50       	subi	r16, 0x01	; 1
    4884:	11 09       	sbc	r17, r1
    4886:	21 09       	sbc	r18, r1
    4888:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    488a:	d9 f7       	brne	.-10     	; 0x4882 <GLCD_PrintInteger+0x23a>
    488c:	65 2f       	mov	r22, r21
    488e:	68 0f       	add	r22, r24
    4890:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    4892:	89 81       	ldd	r24, Y+1	; 0x01
    4894:	80 33       	cpi	r24, 0x30	; 48
    4896:	61 f4       	brne	.+24     	; 0x48b0 <GLCD_PrintInteger+0x268>
    4898:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    489a:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    489c:	e1 e0       	ldi	r30, 0x01	; 1
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	ec 0f       	add	r30, r28
    48a2:	fd 1f       	adc	r31, r29
    48a4:	e8 0f       	add	r30, r24
    48a6:	f1 1d       	adc	r31, r1
    48a8:	90 81       	ld	r25, Z
    48aa:	90 33       	cpi	r25, 0x30	; 48
    48ac:	b1 f3       	breq	.-20     	; 0x489a <GLCD_PrintInteger+0x252>
    48ae:	01 c0       	rjmp	.+2      	; 0x48b2 <GLCD_PrintInteger+0x26a>
    48b0:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    48b2:	44 23       	and	r20, r20
    48b4:	31 f0       	breq	.+12     	; 0x48c2 <GLCD_PrintInteger+0x27a>
	{
		i--;
    48b6:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    48b8:	fe 01       	movw	r30, r28
    48ba:	e8 0f       	add	r30, r24
    48bc:	f1 1d       	adc	r31, r1
    48be:	9d e2       	ldi	r25, 0x2D	; 45
    48c0:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    48c2:	4a e0       	ldi	r20, 0x0A	; 10
    48c4:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    48c6:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	e1 e0       	ldi	r30, 0x01	; 1
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	ec 0f       	add	r30, r28
    48d0:	fd 1f       	adc	r31, r29
    48d2:	e2 0f       	add	r30, r18
    48d4:	f1 1d       	adc	r31, r1
    48d6:	df 01       	movw	r26, r30
    48d8:	a8 0f       	add	r26, r24
    48da:	b9 1f       	adc	r27, r25
    48dc:	3c 91       	ld	r19, X
    48de:	30 83       	st	Z, r19
		i++;
    48e0:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    48e2:	42 17       	cp	r20, r18
    48e4:	90 f7       	brcc	.-28     	; 0x48ca <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    48e6:	e1 e0       	ldi	r30, 0x01	; 1
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	ec 0f       	add	r30, r28
    48ec:	fd 1f       	adc	r31, r29
    48ee:	e2 0f       	add	r30, r18
    48f0:	f1 1d       	adc	r31, r1
    48f2:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    48f4:	ce 01       	movw	r24, r28
    48f6:	01 96       	adiw	r24, 0x01	; 1
    48f8:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <GLCD_PrintString>
	}
}
    48fc:	2c 96       	adiw	r28, 0x0c	; 12
    48fe:	0f b6       	in	r0, 0x3f	; 63
    4900:	f8 94       	cli
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	1f 91       	pop	r17
    490e:	0f 91       	pop	r16
    4910:	08 95       	ret

00004912 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    4912:	8f 92       	push	r8
    4914:	9f 92       	push	r9
    4916:	af 92       	push	r10
    4918:	bf 92       	push	r11
    491a:	cf 92       	push	r12
    491c:	df 92       	push	r13
    491e:	ef 92       	push	r14
    4920:	ff 92       	push	r15
    4922:	6b 01       	movw	r12, r22
    4924:	7c 01       	movw	r14, r24
    4926:	49 01       	movw	r8, r18
    4928:	5a 01       	movw	r10, r20
	if (Value == 0)
    492a:	20 e0       	ldi	r18, 0x00	; 0
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	a9 01       	movw	r20, r18
    4930:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    4934:	81 11       	cpse	r24, r1
    4936:	0a c0       	rjmp	.+20     	; 0x494c <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    4938:	80 e3       	ldi	r24, 0x30	; 48
    493a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    493e:	8e e2       	ldi	r24, 0x2E	; 46
    4940:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    4944:	80 e3       	ldi	r24, 0x30	; 48
    4946:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
    494a:	4a c0       	rjmp	.+148    	; 0x49e0 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    494c:	20 e0       	ldi	r18, 0x00	; 0
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	40 e0       	ldi	r20, 0x00	; 0
    4952:	5f ec       	ldi	r21, 0xCF	; 207
    4954:	c7 01       	movw	r24, r14
    4956:	b6 01       	movw	r22, r12
    4958:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__gesf2>
    495c:	88 23       	and	r24, r24
    495e:	0c f4       	brge	.+2      	; 0x4962 <GLCD_PrintDouble+0x50>
    4960:	3f c0       	rjmp	.+126    	; 0x49e0 <GLCD_PrintDouble+0xce>
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e0       	ldi	r20, 0x00	; 0
    4968:	5f e4       	ldi	r21, 0x4F	; 79
    496a:	c7 01       	movw	r24, r14
    496c:	b6 01       	movw	r22, r12
    496e:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    4972:	88 23       	and	r24, r24
    4974:	ac f5       	brge	.+106    	; 0x49e0 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	a9 01       	movw	r20, r18
    497c:	c7 01       	movw	r24, r14
    497e:	b6 01       	movw	r22, r12
    4980:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__cmpsf2>
    4984:	88 23       	and	r24, r24
    4986:	3c f4       	brge	.+14     	; 0x4996 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    4988:	f7 fa       	bst	r15, 7
    498a:	f0 94       	com	r15
    498c:	f7 f8       	bld	r15, 7
    498e:	f0 94       	com	r15
			GLCD_PrintChar('-');
    4990:	8d e2       	ldi	r24, 0x2D	; 45
    4992:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    4996:	c7 01       	movw	r24, r14
    4998:	b6 01       	movw	r22, r12
    499a:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__fixsfsi>
    499e:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    49a2:	8e e2       	ldi	r24, 0x2E	; 46
    49a4:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    49a8:	c7 01       	movw	r24, r14
    49aa:	b6 01       	movw	r22, r12
    49ac:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    49b0:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    49b4:	9b 01       	movw	r18, r22
    49b6:	ac 01       	movw	r20, r24
    49b8:	c7 01       	movw	r24, r14
    49ba:	b6 01       	movw	r22, r12
    49bc:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <__subsf3>
    49c0:	6b 01       	movw	r12, r22
    49c2:	7c 01       	movw	r14, r24
    49c4:	c5 01       	movw	r24, r10
    49c6:	b4 01       	movw	r22, r8
    49c8:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__floatunsisf>
    49cc:	9b 01       	movw	r18, r22
    49ce:	ac 01       	movw	r20, r24
    49d0:	c7 01       	movw	r24, r14
    49d2:	b6 01       	movw	r22, r12
    49d4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__mulsf3>
    49d8:	0e 94 01 26 	call	0x4c02	; 0x4c02 <__fixsfsi>
    49dc:	0e 94 24 23 	call	0x4648	; 0x4648 <GLCD_PrintInteger>
	}
}
    49e0:	ff 90       	pop	r15
    49e2:	ef 90       	pop	r14
    49e4:	df 90       	pop	r13
    49e6:	cf 90       	pop	r12
    49e8:	bf 90       	pop	r11
    49ea:	af 90       	pop	r10
    49ec:	9f 90       	pop	r9
    49ee:	8f 90       	pop	r8
    49f0:	08 95       	ret

000049f2 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    49f2:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    49f4:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    49f6:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    49f8:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    49fa:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    49fc:	8c e0       	ldi	r24, 0x0C	; 12
    49fe:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    4a00:	84 e0       	ldi	r24, 0x04	; 4
    4a02:	86 bf       	out	0x36, r24	; 54
    4a04:	08 95       	ret

00004a06 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    4a06:	81 b1       	in	r24, 0x01	; 1
}
    4a08:	88 7f       	andi	r24, 0xF8	; 248
    4a0a:	08 95       	ret

00004a0c <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4a0c:	84 ea       	ldi	r24, 0xA4	; 164
    4a0e:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    4a10:	06 b6       	in	r0, 0x36	; 54
    4a12:	07 fe       	sbrs	r0, 7
    4a14:	fd cf       	rjmp	.-6      	; 0x4a10 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    4a16:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TWI_Status>
}
    4a1a:	08 95       	ret

00004a1c <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    4a1c:	85 ed       	ldi	r24, 0xD5	; 213
    4a1e:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    4a20:	06 b6       	in	r0, 0x36	; 54
    4a22:	04 fc       	sbrc	r0, 4
    4a24:	fd cf       	rjmp	.-6      	; 0x4a20 <TWI_EndTransmission+0x4>
}
    4a26:	08 95       	ret

00004a28 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    4a28:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    4a2a:	84 e8       	ldi	r24, 0x84	; 132
    4a2c:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    4a2e:	06 b6       	in	r0, 0x36	; 54
    4a30:	07 fe       	sbrs	r0, 7
    4a32:	fd cf       	rjmp	.-6      	; 0x4a2e <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    4a34:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TWI_Status>
}
    4a38:	08 95       	ret

00004a3a <__subsf3>:
    4a3a:	50 58       	subi	r21, 0x80	; 128

00004a3c <__addsf3>:
    4a3c:	bb 27       	eor	r27, r27
    4a3e:	aa 27       	eor	r26, r26
    4a40:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <__addsf3x>
    4a44:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__fp_round>
    4a48:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <__fp_pscA>
    4a4c:	38 f0       	brcs	.+14     	; 0x4a5c <__addsf3+0x20>
    4a4e:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__fp_pscB>
    4a52:	20 f0       	brcs	.+8      	; 0x4a5c <__addsf3+0x20>
    4a54:	39 f4       	brne	.+14     	; 0x4a64 <__addsf3+0x28>
    4a56:	9f 3f       	cpi	r25, 0xFF	; 255
    4a58:	19 f4       	brne	.+6      	; 0x4a60 <__addsf3+0x24>
    4a5a:	26 f4       	brtc	.+8      	; 0x4a64 <__addsf3+0x28>
    4a5c:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <__fp_nan>
    4a60:	0e f4       	brtc	.+2      	; 0x4a64 <__addsf3+0x28>
    4a62:	e0 95       	com	r30
    4a64:	e7 fb       	bst	r30, 7
    4a66:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__fp_inf>

00004a6a <__addsf3x>:
    4a6a:	e9 2f       	mov	r30, r25
    4a6c:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fp_split3>
    4a70:	58 f3       	brcs	.-42     	; 0x4a48 <__addsf3+0xc>
    4a72:	ba 17       	cp	r27, r26
    4a74:	62 07       	cpc	r22, r18
    4a76:	73 07       	cpc	r23, r19
    4a78:	84 07       	cpc	r24, r20
    4a7a:	95 07       	cpc	r25, r21
    4a7c:	20 f0       	brcs	.+8      	; 0x4a86 <__addsf3x+0x1c>
    4a7e:	79 f4       	brne	.+30     	; 0x4a9e <__addsf3x+0x34>
    4a80:	a6 f5       	brtc	.+104    	; 0x4aea <__addsf3x+0x80>
    4a82:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__fp_zero>
    4a86:	0e f4       	brtc	.+2      	; 0x4a8a <__addsf3x+0x20>
    4a88:	e0 95       	com	r30
    4a8a:	0b 2e       	mov	r0, r27
    4a8c:	ba 2f       	mov	r27, r26
    4a8e:	a0 2d       	mov	r26, r0
    4a90:	0b 01       	movw	r0, r22
    4a92:	b9 01       	movw	r22, r18
    4a94:	90 01       	movw	r18, r0
    4a96:	0c 01       	movw	r0, r24
    4a98:	ca 01       	movw	r24, r20
    4a9a:	a0 01       	movw	r20, r0
    4a9c:	11 24       	eor	r1, r1
    4a9e:	ff 27       	eor	r31, r31
    4aa0:	59 1b       	sub	r21, r25
    4aa2:	99 f0       	breq	.+38     	; 0x4aca <__addsf3x+0x60>
    4aa4:	59 3f       	cpi	r21, 0xF9	; 249
    4aa6:	50 f4       	brcc	.+20     	; 0x4abc <__addsf3x+0x52>
    4aa8:	50 3e       	cpi	r21, 0xE0	; 224
    4aaa:	68 f1       	brcs	.+90     	; 0x4b06 <__addsf3x+0x9c>
    4aac:	1a 16       	cp	r1, r26
    4aae:	f0 40       	sbci	r31, 0x00	; 0
    4ab0:	a2 2f       	mov	r26, r18
    4ab2:	23 2f       	mov	r18, r19
    4ab4:	34 2f       	mov	r19, r20
    4ab6:	44 27       	eor	r20, r20
    4ab8:	58 5f       	subi	r21, 0xF8	; 248
    4aba:	f3 cf       	rjmp	.-26     	; 0x4aa2 <__addsf3x+0x38>
    4abc:	46 95       	lsr	r20
    4abe:	37 95       	ror	r19
    4ac0:	27 95       	ror	r18
    4ac2:	a7 95       	ror	r26
    4ac4:	f0 40       	sbci	r31, 0x00	; 0
    4ac6:	53 95       	inc	r21
    4ac8:	c9 f7       	brne	.-14     	; 0x4abc <__addsf3x+0x52>
    4aca:	7e f4       	brtc	.+30     	; 0x4aea <__addsf3x+0x80>
    4acc:	1f 16       	cp	r1, r31
    4ace:	ba 0b       	sbc	r27, r26
    4ad0:	62 0b       	sbc	r22, r18
    4ad2:	73 0b       	sbc	r23, r19
    4ad4:	84 0b       	sbc	r24, r20
    4ad6:	ba f0       	brmi	.+46     	; 0x4b06 <__addsf3x+0x9c>
    4ad8:	91 50       	subi	r25, 0x01	; 1
    4ada:	a1 f0       	breq	.+40     	; 0x4b04 <__addsf3x+0x9a>
    4adc:	ff 0f       	add	r31, r31
    4ade:	bb 1f       	adc	r27, r27
    4ae0:	66 1f       	adc	r22, r22
    4ae2:	77 1f       	adc	r23, r23
    4ae4:	88 1f       	adc	r24, r24
    4ae6:	c2 f7       	brpl	.-16     	; 0x4ad8 <__addsf3x+0x6e>
    4ae8:	0e c0       	rjmp	.+28     	; 0x4b06 <__addsf3x+0x9c>
    4aea:	ba 0f       	add	r27, r26
    4aec:	62 1f       	adc	r22, r18
    4aee:	73 1f       	adc	r23, r19
    4af0:	84 1f       	adc	r24, r20
    4af2:	48 f4       	brcc	.+18     	; 0x4b06 <__addsf3x+0x9c>
    4af4:	87 95       	ror	r24
    4af6:	77 95       	ror	r23
    4af8:	67 95       	ror	r22
    4afa:	b7 95       	ror	r27
    4afc:	f7 95       	ror	r31
    4afe:	9e 3f       	cpi	r25, 0xFE	; 254
    4b00:	08 f0       	brcs	.+2      	; 0x4b04 <__addsf3x+0x9a>
    4b02:	b0 cf       	rjmp	.-160    	; 0x4a64 <__addsf3+0x28>
    4b04:	93 95       	inc	r25
    4b06:	88 0f       	add	r24, r24
    4b08:	08 f0       	brcs	.+2      	; 0x4b0c <__addsf3x+0xa2>
    4b0a:	99 27       	eor	r25, r25
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	97 95       	ror	r25
    4b10:	87 95       	ror	r24
    4b12:	08 95       	ret

00004b14 <__cmpsf2>:
    4b14:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__fp_cmp>
    4b18:	08 f4       	brcc	.+2      	; 0x4b1c <__cmpsf2+0x8>
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	08 95       	ret

00004b1e <__divsf3>:
    4b1e:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__divsf3x>
    4b22:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__fp_round>
    4b26:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__fp_pscB>
    4b2a:	58 f0       	brcs	.+22     	; 0x4b42 <__divsf3+0x24>
    4b2c:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <__fp_pscA>
    4b30:	40 f0       	brcs	.+16     	; 0x4b42 <__divsf3+0x24>
    4b32:	29 f4       	brne	.+10     	; 0x4b3e <__divsf3+0x20>
    4b34:	5f 3f       	cpi	r21, 0xFF	; 255
    4b36:	29 f0       	breq	.+10     	; 0x4b42 <__divsf3+0x24>
    4b38:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__fp_inf>
    4b3c:	51 11       	cpse	r21, r1
    4b3e:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_szero>
    4b42:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <__fp_nan>

00004b46 <__divsf3x>:
    4b46:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fp_split3>
    4b4a:	68 f3       	brcs	.-38     	; 0x4b26 <__divsf3+0x8>

00004b4c <__divsf3_pse>:
    4b4c:	99 23       	and	r25, r25
    4b4e:	b1 f3       	breq	.-20     	; 0x4b3c <__divsf3+0x1e>
    4b50:	55 23       	and	r21, r21
    4b52:	91 f3       	breq	.-28     	; 0x4b38 <__divsf3+0x1a>
    4b54:	95 1b       	sub	r25, r21
    4b56:	55 0b       	sbc	r21, r21
    4b58:	bb 27       	eor	r27, r27
    4b5a:	aa 27       	eor	r26, r26
    4b5c:	62 17       	cp	r22, r18
    4b5e:	73 07       	cpc	r23, r19
    4b60:	84 07       	cpc	r24, r20
    4b62:	38 f0       	brcs	.+14     	; 0x4b72 <__divsf3_pse+0x26>
    4b64:	9f 5f       	subi	r25, 0xFF	; 255
    4b66:	5f 4f       	sbci	r21, 0xFF	; 255
    4b68:	22 0f       	add	r18, r18
    4b6a:	33 1f       	adc	r19, r19
    4b6c:	44 1f       	adc	r20, r20
    4b6e:	aa 1f       	adc	r26, r26
    4b70:	a9 f3       	breq	.-22     	; 0x4b5c <__divsf3_pse+0x10>
    4b72:	35 d0       	rcall	.+106    	; 0x4bde <__divsf3_pse+0x92>
    4b74:	0e 2e       	mov	r0, r30
    4b76:	3a f0       	brmi	.+14     	; 0x4b86 <__divsf3_pse+0x3a>
    4b78:	e0 e8       	ldi	r30, 0x80	; 128
    4b7a:	32 d0       	rcall	.+100    	; 0x4be0 <__divsf3_pse+0x94>
    4b7c:	91 50       	subi	r25, 0x01	; 1
    4b7e:	50 40       	sbci	r21, 0x00	; 0
    4b80:	e6 95       	lsr	r30
    4b82:	00 1c       	adc	r0, r0
    4b84:	ca f7       	brpl	.-14     	; 0x4b78 <__divsf3_pse+0x2c>
    4b86:	2b d0       	rcall	.+86     	; 0x4bde <__divsf3_pse+0x92>
    4b88:	fe 2f       	mov	r31, r30
    4b8a:	29 d0       	rcall	.+82     	; 0x4bde <__divsf3_pse+0x92>
    4b8c:	66 0f       	add	r22, r22
    4b8e:	77 1f       	adc	r23, r23
    4b90:	88 1f       	adc	r24, r24
    4b92:	bb 1f       	adc	r27, r27
    4b94:	26 17       	cp	r18, r22
    4b96:	37 07       	cpc	r19, r23
    4b98:	48 07       	cpc	r20, r24
    4b9a:	ab 07       	cpc	r26, r27
    4b9c:	b0 e8       	ldi	r27, 0x80	; 128
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <__divsf3_pse+0x56>
    4ba0:	bb 0b       	sbc	r27, r27
    4ba2:	80 2d       	mov	r24, r0
    4ba4:	bf 01       	movw	r22, r30
    4ba6:	ff 27       	eor	r31, r31
    4ba8:	93 58       	subi	r25, 0x83	; 131
    4baa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bac:	3a f0       	brmi	.+14     	; 0x4bbc <__divsf3_pse+0x70>
    4bae:	9e 3f       	cpi	r25, 0xFE	; 254
    4bb0:	51 05       	cpc	r21, r1
    4bb2:	78 f0       	brcs	.+30     	; 0x4bd2 <__divsf3_pse+0x86>
    4bb4:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__fp_inf>
    4bb8:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_szero>
    4bbc:	5f 3f       	cpi	r21, 0xFF	; 255
    4bbe:	e4 f3       	brlt	.-8      	; 0x4bb8 <__divsf3_pse+0x6c>
    4bc0:	98 3e       	cpi	r25, 0xE8	; 232
    4bc2:	d4 f3       	brlt	.-12     	; 0x4bb8 <__divsf3_pse+0x6c>
    4bc4:	86 95       	lsr	r24
    4bc6:	77 95       	ror	r23
    4bc8:	67 95       	ror	r22
    4bca:	b7 95       	ror	r27
    4bcc:	f7 95       	ror	r31
    4bce:	9f 5f       	subi	r25, 0xFF	; 255
    4bd0:	c9 f7       	brne	.-14     	; 0x4bc4 <__divsf3_pse+0x78>
    4bd2:	88 0f       	add	r24, r24
    4bd4:	91 1d       	adc	r25, r1
    4bd6:	96 95       	lsr	r25
    4bd8:	87 95       	ror	r24
    4bda:	97 f9       	bld	r25, 7
    4bdc:	08 95       	ret
    4bde:	e1 e0       	ldi	r30, 0x01	; 1
    4be0:	66 0f       	add	r22, r22
    4be2:	77 1f       	adc	r23, r23
    4be4:	88 1f       	adc	r24, r24
    4be6:	bb 1f       	adc	r27, r27
    4be8:	62 17       	cp	r22, r18
    4bea:	73 07       	cpc	r23, r19
    4bec:	84 07       	cpc	r24, r20
    4bee:	ba 07       	cpc	r27, r26
    4bf0:	20 f0       	brcs	.+8      	; 0x4bfa <__divsf3_pse+0xae>
    4bf2:	62 1b       	sub	r22, r18
    4bf4:	73 0b       	sbc	r23, r19
    4bf6:	84 0b       	sbc	r24, r20
    4bf8:	ba 0b       	sbc	r27, r26
    4bfa:	ee 1f       	adc	r30, r30
    4bfc:	88 f7       	brcc	.-30     	; 0x4be0 <__divsf3_pse+0x94>
    4bfe:	e0 95       	com	r30
    4c00:	08 95       	ret

00004c02 <__fixsfsi>:
    4c02:	0e 94 08 26 	call	0x4c10	; 0x4c10 <__fixunssfsi>
    4c06:	68 94       	set
    4c08:	b1 11       	cpse	r27, r1
    4c0a:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_szero>
    4c0e:	08 95       	ret

00004c10 <__fixunssfsi>:
    4c10:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__fp_splitA>
    4c14:	88 f0       	brcs	.+34     	; 0x4c38 <__fixunssfsi+0x28>
    4c16:	9f 57       	subi	r25, 0x7F	; 127
    4c18:	98 f0       	brcs	.+38     	; 0x4c40 <__fixunssfsi+0x30>
    4c1a:	b9 2f       	mov	r27, r25
    4c1c:	99 27       	eor	r25, r25
    4c1e:	b7 51       	subi	r27, 0x17	; 23
    4c20:	b0 f0       	brcs	.+44     	; 0x4c4e <__fixunssfsi+0x3e>
    4c22:	e1 f0       	breq	.+56     	; 0x4c5c <__fixunssfsi+0x4c>
    4c24:	66 0f       	add	r22, r22
    4c26:	77 1f       	adc	r23, r23
    4c28:	88 1f       	adc	r24, r24
    4c2a:	99 1f       	adc	r25, r25
    4c2c:	1a f0       	brmi	.+6      	; 0x4c34 <__fixunssfsi+0x24>
    4c2e:	ba 95       	dec	r27
    4c30:	c9 f7       	brne	.-14     	; 0x4c24 <__fixunssfsi+0x14>
    4c32:	14 c0       	rjmp	.+40     	; 0x4c5c <__fixunssfsi+0x4c>
    4c34:	b1 30       	cpi	r27, 0x01	; 1
    4c36:	91 f0       	breq	.+36     	; 0x4c5c <__fixunssfsi+0x4c>
    4c38:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__fp_zero>
    4c3c:	b1 e0       	ldi	r27, 0x01	; 1
    4c3e:	08 95       	ret
    4c40:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__fp_zero>
    4c44:	67 2f       	mov	r22, r23
    4c46:	78 2f       	mov	r23, r24
    4c48:	88 27       	eor	r24, r24
    4c4a:	b8 5f       	subi	r27, 0xF8	; 248
    4c4c:	39 f0       	breq	.+14     	; 0x4c5c <__fixunssfsi+0x4c>
    4c4e:	b9 3f       	cpi	r27, 0xF9	; 249
    4c50:	cc f3       	brlt	.-14     	; 0x4c44 <__fixunssfsi+0x34>
    4c52:	86 95       	lsr	r24
    4c54:	77 95       	ror	r23
    4c56:	67 95       	ror	r22
    4c58:	b3 95       	inc	r27
    4c5a:	d9 f7       	brne	.-10     	; 0x4c52 <__fixunssfsi+0x42>
    4c5c:	3e f4       	brtc	.+14     	; 0x4c6c <__fixunssfsi+0x5c>
    4c5e:	90 95       	com	r25
    4c60:	80 95       	com	r24
    4c62:	70 95       	com	r23
    4c64:	61 95       	neg	r22
    4c66:	7f 4f       	sbci	r23, 0xFF	; 255
    4c68:	8f 4f       	sbci	r24, 0xFF	; 255
    4c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c6c:	08 95       	ret

00004c6e <__floatunsisf>:
    4c6e:	e8 94       	clt
    4c70:	09 c0       	rjmp	.+18     	; 0x4c84 <__floatsisf+0x12>

00004c72 <__floatsisf>:
    4c72:	97 fb       	bst	r25, 7
    4c74:	3e f4       	brtc	.+14     	; 0x4c84 <__floatsisf+0x12>
    4c76:	90 95       	com	r25
    4c78:	80 95       	com	r24
    4c7a:	70 95       	com	r23
    4c7c:	61 95       	neg	r22
    4c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c80:	8f 4f       	sbci	r24, 0xFF	; 255
    4c82:	9f 4f       	sbci	r25, 0xFF	; 255
    4c84:	99 23       	and	r25, r25
    4c86:	a9 f0       	breq	.+42     	; 0x4cb2 <__floatsisf+0x40>
    4c88:	f9 2f       	mov	r31, r25
    4c8a:	96 e9       	ldi	r25, 0x96	; 150
    4c8c:	bb 27       	eor	r27, r27
    4c8e:	93 95       	inc	r25
    4c90:	f6 95       	lsr	r31
    4c92:	87 95       	ror	r24
    4c94:	77 95       	ror	r23
    4c96:	67 95       	ror	r22
    4c98:	b7 95       	ror	r27
    4c9a:	f1 11       	cpse	r31, r1
    4c9c:	f8 cf       	rjmp	.-16     	; 0x4c8e <__floatsisf+0x1c>
    4c9e:	fa f4       	brpl	.+62     	; 0x4cde <__floatsisf+0x6c>
    4ca0:	bb 0f       	add	r27, r27
    4ca2:	11 f4       	brne	.+4      	; 0x4ca8 <__floatsisf+0x36>
    4ca4:	60 ff       	sbrs	r22, 0
    4ca6:	1b c0       	rjmp	.+54     	; 0x4cde <__floatsisf+0x6c>
    4ca8:	6f 5f       	subi	r22, 0xFF	; 255
    4caa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cac:	8f 4f       	sbci	r24, 0xFF	; 255
    4cae:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb0:	16 c0       	rjmp	.+44     	; 0x4cde <__floatsisf+0x6c>
    4cb2:	88 23       	and	r24, r24
    4cb4:	11 f0       	breq	.+4      	; 0x4cba <__floatsisf+0x48>
    4cb6:	96 e9       	ldi	r25, 0x96	; 150
    4cb8:	11 c0       	rjmp	.+34     	; 0x4cdc <__floatsisf+0x6a>
    4cba:	77 23       	and	r23, r23
    4cbc:	21 f0       	breq	.+8      	; 0x4cc6 <__floatsisf+0x54>
    4cbe:	9e e8       	ldi	r25, 0x8E	; 142
    4cc0:	87 2f       	mov	r24, r23
    4cc2:	76 2f       	mov	r23, r22
    4cc4:	05 c0       	rjmp	.+10     	; 0x4cd0 <__floatsisf+0x5e>
    4cc6:	66 23       	and	r22, r22
    4cc8:	71 f0       	breq	.+28     	; 0x4ce6 <__floatsisf+0x74>
    4cca:	96 e8       	ldi	r25, 0x86	; 134
    4ccc:	86 2f       	mov	r24, r22
    4cce:	70 e0       	ldi	r23, 0x00	; 0
    4cd0:	60 e0       	ldi	r22, 0x00	; 0
    4cd2:	2a f0       	brmi	.+10     	; 0x4cde <__floatsisf+0x6c>
    4cd4:	9a 95       	dec	r25
    4cd6:	66 0f       	add	r22, r22
    4cd8:	77 1f       	adc	r23, r23
    4cda:	88 1f       	adc	r24, r24
    4cdc:	da f7       	brpl	.-10     	; 0x4cd4 <__floatsisf+0x62>
    4cde:	88 0f       	add	r24, r24
    4ce0:	96 95       	lsr	r25
    4ce2:	87 95       	ror	r24
    4ce4:	97 f9       	bld	r25, 7
    4ce6:	08 95       	ret

00004ce8 <__fp_cmp>:
    4ce8:	99 0f       	add	r25, r25
    4cea:	00 08       	sbc	r0, r0
    4cec:	55 0f       	add	r21, r21
    4cee:	aa 0b       	sbc	r26, r26
    4cf0:	e0 e8       	ldi	r30, 0x80	; 128
    4cf2:	fe ef       	ldi	r31, 0xFE	; 254
    4cf4:	16 16       	cp	r1, r22
    4cf6:	17 06       	cpc	r1, r23
    4cf8:	e8 07       	cpc	r30, r24
    4cfa:	f9 07       	cpc	r31, r25
    4cfc:	c0 f0       	brcs	.+48     	; 0x4d2e <__fp_cmp+0x46>
    4cfe:	12 16       	cp	r1, r18
    4d00:	13 06       	cpc	r1, r19
    4d02:	e4 07       	cpc	r30, r20
    4d04:	f5 07       	cpc	r31, r21
    4d06:	98 f0       	brcs	.+38     	; 0x4d2e <__fp_cmp+0x46>
    4d08:	62 1b       	sub	r22, r18
    4d0a:	73 0b       	sbc	r23, r19
    4d0c:	84 0b       	sbc	r24, r20
    4d0e:	95 0b       	sbc	r25, r21
    4d10:	39 f4       	brne	.+14     	; 0x4d20 <__fp_cmp+0x38>
    4d12:	0a 26       	eor	r0, r26
    4d14:	61 f0       	breq	.+24     	; 0x4d2e <__fp_cmp+0x46>
    4d16:	23 2b       	or	r18, r19
    4d18:	24 2b       	or	r18, r20
    4d1a:	25 2b       	or	r18, r21
    4d1c:	21 f4       	brne	.+8      	; 0x4d26 <__fp_cmp+0x3e>
    4d1e:	08 95       	ret
    4d20:	0a 26       	eor	r0, r26
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <__fp_cmp+0x3e>
    4d24:	a1 40       	sbci	r26, 0x01	; 1
    4d26:	a6 95       	lsr	r26
    4d28:	8f ef       	ldi	r24, 0xFF	; 255
    4d2a:	81 1d       	adc	r24, r1
    4d2c:	81 1d       	adc	r24, r1
    4d2e:	08 95       	ret

00004d30 <__fp_inf>:
    4d30:	97 f9       	bld	r25, 7
    4d32:	9f 67       	ori	r25, 0x7F	; 127
    4d34:	80 e8       	ldi	r24, 0x80	; 128
    4d36:	70 e0       	ldi	r23, 0x00	; 0
    4d38:	60 e0       	ldi	r22, 0x00	; 0
    4d3a:	08 95       	ret

00004d3c <__fp_nan>:
    4d3c:	9f ef       	ldi	r25, 0xFF	; 255
    4d3e:	80 ec       	ldi	r24, 0xC0	; 192
    4d40:	08 95       	ret

00004d42 <__fp_pscA>:
    4d42:	00 24       	eor	r0, r0
    4d44:	0a 94       	dec	r0
    4d46:	16 16       	cp	r1, r22
    4d48:	17 06       	cpc	r1, r23
    4d4a:	18 06       	cpc	r1, r24
    4d4c:	09 06       	cpc	r0, r25
    4d4e:	08 95       	ret

00004d50 <__fp_pscB>:
    4d50:	00 24       	eor	r0, r0
    4d52:	0a 94       	dec	r0
    4d54:	12 16       	cp	r1, r18
    4d56:	13 06       	cpc	r1, r19
    4d58:	14 06       	cpc	r1, r20
    4d5a:	05 06       	cpc	r0, r21
    4d5c:	08 95       	ret

00004d5e <__fp_round>:
    4d5e:	09 2e       	mov	r0, r25
    4d60:	03 94       	inc	r0
    4d62:	00 0c       	add	r0, r0
    4d64:	11 f4       	brne	.+4      	; 0x4d6a <__fp_round+0xc>
    4d66:	88 23       	and	r24, r24
    4d68:	52 f0       	brmi	.+20     	; 0x4d7e <__fp_round+0x20>
    4d6a:	bb 0f       	add	r27, r27
    4d6c:	40 f4       	brcc	.+16     	; 0x4d7e <__fp_round+0x20>
    4d6e:	bf 2b       	or	r27, r31
    4d70:	11 f4       	brne	.+4      	; 0x4d76 <__fp_round+0x18>
    4d72:	60 ff       	sbrs	r22, 0
    4d74:	04 c0       	rjmp	.+8      	; 0x4d7e <__fp_round+0x20>
    4d76:	6f 5f       	subi	r22, 0xFF	; 255
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7e:	08 95       	ret

00004d80 <__fp_split3>:
    4d80:	57 fd       	sbrc	r21, 7
    4d82:	90 58       	subi	r25, 0x80	; 128
    4d84:	44 0f       	add	r20, r20
    4d86:	55 1f       	adc	r21, r21
    4d88:	59 f0       	breq	.+22     	; 0x4da0 <__fp_splitA+0x10>
    4d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4d8c:	71 f0       	breq	.+28     	; 0x4daa <__fp_splitA+0x1a>
    4d8e:	47 95       	ror	r20

00004d90 <__fp_splitA>:
    4d90:	88 0f       	add	r24, r24
    4d92:	97 fb       	bst	r25, 7
    4d94:	99 1f       	adc	r25, r25
    4d96:	61 f0       	breq	.+24     	; 0x4db0 <__fp_splitA+0x20>
    4d98:	9f 3f       	cpi	r25, 0xFF	; 255
    4d9a:	79 f0       	breq	.+30     	; 0x4dba <__fp_splitA+0x2a>
    4d9c:	87 95       	ror	r24
    4d9e:	08 95       	ret
    4da0:	12 16       	cp	r1, r18
    4da2:	13 06       	cpc	r1, r19
    4da4:	14 06       	cpc	r1, r20
    4da6:	55 1f       	adc	r21, r21
    4da8:	f2 cf       	rjmp	.-28     	; 0x4d8e <__fp_split3+0xe>
    4daa:	46 95       	lsr	r20
    4dac:	f1 df       	rcall	.-30     	; 0x4d90 <__fp_splitA>
    4dae:	08 c0       	rjmp	.+16     	; 0x4dc0 <__fp_splitA+0x30>
    4db0:	16 16       	cp	r1, r22
    4db2:	17 06       	cpc	r1, r23
    4db4:	18 06       	cpc	r1, r24
    4db6:	99 1f       	adc	r25, r25
    4db8:	f1 cf       	rjmp	.-30     	; 0x4d9c <__fp_splitA+0xc>
    4dba:	86 95       	lsr	r24
    4dbc:	71 05       	cpc	r23, r1
    4dbe:	61 05       	cpc	r22, r1
    4dc0:	08 94       	sec
    4dc2:	08 95       	ret

00004dc4 <__fp_zero>:
    4dc4:	e8 94       	clt

00004dc6 <__fp_szero>:
    4dc6:	bb 27       	eor	r27, r27
    4dc8:	66 27       	eor	r22, r22
    4dca:	77 27       	eor	r23, r23
    4dcc:	cb 01       	movw	r24, r22
    4dce:	97 f9       	bld	r25, 7
    4dd0:	08 95       	ret

00004dd2 <__gesf2>:
    4dd2:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__fp_cmp>
    4dd6:	08 f4       	brcc	.+2      	; 0x4dda <__gesf2+0x8>
    4dd8:	8f ef       	ldi	r24, 0xFF	; 255
    4dda:	08 95       	ret

00004ddc <__mulsf3>:
    4ddc:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__mulsf3x>
    4de0:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__fp_round>
    4de4:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <__fp_pscA>
    4de8:	38 f0       	brcs	.+14     	; 0x4df8 <__mulsf3+0x1c>
    4dea:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__fp_pscB>
    4dee:	20 f0       	brcs	.+8      	; 0x4df8 <__mulsf3+0x1c>
    4df0:	95 23       	and	r25, r21
    4df2:	11 f0       	breq	.+4      	; 0x4df8 <__mulsf3+0x1c>
    4df4:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__fp_inf>
    4df8:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <__fp_nan>
    4dfc:	11 24       	eor	r1, r1
    4dfe:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_szero>

00004e02 <__mulsf3x>:
    4e02:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fp_split3>
    4e06:	70 f3       	brcs	.-36     	; 0x4de4 <__mulsf3+0x8>

00004e08 <__mulsf3_pse>:
    4e08:	95 9f       	mul	r25, r21
    4e0a:	c1 f3       	breq	.-16     	; 0x4dfc <__mulsf3+0x20>
    4e0c:	95 0f       	add	r25, r21
    4e0e:	50 e0       	ldi	r21, 0x00	; 0
    4e10:	55 1f       	adc	r21, r21
    4e12:	62 9f       	mul	r22, r18
    4e14:	f0 01       	movw	r30, r0
    4e16:	72 9f       	mul	r23, r18
    4e18:	bb 27       	eor	r27, r27
    4e1a:	f0 0d       	add	r31, r0
    4e1c:	b1 1d       	adc	r27, r1
    4e1e:	63 9f       	mul	r22, r19
    4e20:	aa 27       	eor	r26, r26
    4e22:	f0 0d       	add	r31, r0
    4e24:	b1 1d       	adc	r27, r1
    4e26:	aa 1f       	adc	r26, r26
    4e28:	64 9f       	mul	r22, r20
    4e2a:	66 27       	eor	r22, r22
    4e2c:	b0 0d       	add	r27, r0
    4e2e:	a1 1d       	adc	r26, r1
    4e30:	66 1f       	adc	r22, r22
    4e32:	82 9f       	mul	r24, r18
    4e34:	22 27       	eor	r18, r18
    4e36:	b0 0d       	add	r27, r0
    4e38:	a1 1d       	adc	r26, r1
    4e3a:	62 1f       	adc	r22, r18
    4e3c:	73 9f       	mul	r23, r19
    4e3e:	b0 0d       	add	r27, r0
    4e40:	a1 1d       	adc	r26, r1
    4e42:	62 1f       	adc	r22, r18
    4e44:	83 9f       	mul	r24, r19
    4e46:	a0 0d       	add	r26, r0
    4e48:	61 1d       	adc	r22, r1
    4e4a:	22 1f       	adc	r18, r18
    4e4c:	74 9f       	mul	r23, r20
    4e4e:	33 27       	eor	r19, r19
    4e50:	a0 0d       	add	r26, r0
    4e52:	61 1d       	adc	r22, r1
    4e54:	23 1f       	adc	r18, r19
    4e56:	84 9f       	mul	r24, r20
    4e58:	60 0d       	add	r22, r0
    4e5a:	21 1d       	adc	r18, r1
    4e5c:	82 2f       	mov	r24, r18
    4e5e:	76 2f       	mov	r23, r22
    4e60:	6a 2f       	mov	r22, r26
    4e62:	11 24       	eor	r1, r1
    4e64:	9f 57       	subi	r25, 0x7F	; 127
    4e66:	50 40       	sbci	r21, 0x00	; 0
    4e68:	9a f0       	brmi	.+38     	; 0x4e90 <__mulsf3_pse+0x88>
    4e6a:	f1 f0       	breq	.+60     	; 0x4ea8 <__mulsf3_pse+0xa0>
    4e6c:	88 23       	and	r24, r24
    4e6e:	4a f0       	brmi	.+18     	; 0x4e82 <__mulsf3_pse+0x7a>
    4e70:	ee 0f       	add	r30, r30
    4e72:	ff 1f       	adc	r31, r31
    4e74:	bb 1f       	adc	r27, r27
    4e76:	66 1f       	adc	r22, r22
    4e78:	77 1f       	adc	r23, r23
    4e7a:	88 1f       	adc	r24, r24
    4e7c:	91 50       	subi	r25, 0x01	; 1
    4e7e:	50 40       	sbci	r21, 0x00	; 0
    4e80:	a9 f7       	brne	.-22     	; 0x4e6c <__mulsf3_pse+0x64>
    4e82:	9e 3f       	cpi	r25, 0xFE	; 254
    4e84:	51 05       	cpc	r21, r1
    4e86:	80 f0       	brcs	.+32     	; 0x4ea8 <__mulsf3_pse+0xa0>
    4e88:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__fp_inf>
    4e8c:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_szero>
    4e90:	5f 3f       	cpi	r21, 0xFF	; 255
    4e92:	e4 f3       	brlt	.-8      	; 0x4e8c <__mulsf3_pse+0x84>
    4e94:	98 3e       	cpi	r25, 0xE8	; 232
    4e96:	d4 f3       	brlt	.-12     	; 0x4e8c <__mulsf3_pse+0x84>
    4e98:	86 95       	lsr	r24
    4e9a:	77 95       	ror	r23
    4e9c:	67 95       	ror	r22
    4e9e:	b7 95       	ror	r27
    4ea0:	f7 95       	ror	r31
    4ea2:	e7 95       	ror	r30
    4ea4:	9f 5f       	subi	r25, 0xFF	; 255
    4ea6:	c1 f7       	brne	.-16     	; 0x4e98 <__mulsf3_pse+0x90>
    4ea8:	fe 2b       	or	r31, r30
    4eaa:	88 0f       	add	r24, r24
    4eac:	91 1d       	adc	r25, r1
    4eae:	96 95       	lsr	r25
    4eb0:	87 95       	ror	r24
    4eb2:	97 f9       	bld	r25, 7
    4eb4:	08 95       	ret

00004eb6 <__udivmodhi4>:
    4eb6:	aa 1b       	sub	r26, r26
    4eb8:	bb 1b       	sub	r27, r27
    4eba:	51 e1       	ldi	r21, 0x11	; 17
    4ebc:	07 c0       	rjmp	.+14     	; 0x4ecc <__udivmodhi4_ep>

00004ebe <__udivmodhi4_loop>:
    4ebe:	aa 1f       	adc	r26, r26
    4ec0:	bb 1f       	adc	r27, r27
    4ec2:	a6 17       	cp	r26, r22
    4ec4:	b7 07       	cpc	r27, r23
    4ec6:	10 f0       	brcs	.+4      	; 0x4ecc <__udivmodhi4_ep>
    4ec8:	a6 1b       	sub	r26, r22
    4eca:	b7 0b       	sbc	r27, r23

00004ecc <__udivmodhi4_ep>:
    4ecc:	88 1f       	adc	r24, r24
    4ece:	99 1f       	adc	r25, r25
    4ed0:	5a 95       	dec	r21
    4ed2:	a9 f7       	brne	.-22     	; 0x4ebe <__udivmodhi4_loop>
    4ed4:	80 95       	com	r24
    4ed6:	90 95       	com	r25
    4ed8:	bc 01       	movw	r22, r24
    4eda:	cd 01       	movw	r24, r26
    4edc:	08 95       	ret

00004ede <__divmodhi4>:
    4ede:	97 fb       	bst	r25, 7
    4ee0:	07 2e       	mov	r0, r23
    4ee2:	16 f4       	brtc	.+4      	; 0x4ee8 <__divmodhi4+0xa>
    4ee4:	00 94       	com	r0
    4ee6:	07 d0       	rcall	.+14     	; 0x4ef6 <__divmodhi4_neg1>
    4ee8:	77 fd       	sbrc	r23, 7
    4eea:	09 d0       	rcall	.+18     	; 0x4efe <__divmodhi4_neg2>
    4eec:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__udivmodhi4>
    4ef0:	07 fc       	sbrc	r0, 7
    4ef2:	05 d0       	rcall	.+10     	; 0x4efe <__divmodhi4_neg2>
    4ef4:	3e f4       	brtc	.+14     	; 0x4f04 <__divmodhi4_exit>

00004ef6 <__divmodhi4_neg1>:
    4ef6:	90 95       	com	r25
    4ef8:	81 95       	neg	r24
    4efa:	9f 4f       	sbci	r25, 0xFF	; 255
    4efc:	08 95       	ret

00004efe <__divmodhi4_neg2>:
    4efe:	70 95       	com	r23
    4f00:	61 95       	neg	r22
    4f02:	7f 4f       	sbci	r23, 0xFF	; 255

00004f04 <__divmodhi4_exit>:
    4f04:	08 95       	ret

00004f06 <__udivmodsi4>:
    4f06:	a1 e2       	ldi	r26, 0x21	; 33
    4f08:	1a 2e       	mov	r1, r26
    4f0a:	aa 1b       	sub	r26, r26
    4f0c:	bb 1b       	sub	r27, r27
    4f0e:	fd 01       	movw	r30, r26
    4f10:	0d c0       	rjmp	.+26     	; 0x4f2c <__udivmodsi4_ep>

00004f12 <__udivmodsi4_loop>:
    4f12:	aa 1f       	adc	r26, r26
    4f14:	bb 1f       	adc	r27, r27
    4f16:	ee 1f       	adc	r30, r30
    4f18:	ff 1f       	adc	r31, r31
    4f1a:	a2 17       	cp	r26, r18
    4f1c:	b3 07       	cpc	r27, r19
    4f1e:	e4 07       	cpc	r30, r20
    4f20:	f5 07       	cpc	r31, r21
    4f22:	20 f0       	brcs	.+8      	; 0x4f2c <__udivmodsi4_ep>
    4f24:	a2 1b       	sub	r26, r18
    4f26:	b3 0b       	sbc	r27, r19
    4f28:	e4 0b       	sbc	r30, r20
    4f2a:	f5 0b       	sbc	r31, r21

00004f2c <__udivmodsi4_ep>:
    4f2c:	66 1f       	adc	r22, r22
    4f2e:	77 1f       	adc	r23, r23
    4f30:	88 1f       	adc	r24, r24
    4f32:	99 1f       	adc	r25, r25
    4f34:	1a 94       	dec	r1
    4f36:	69 f7       	brne	.-38     	; 0x4f12 <__udivmodsi4_loop>
    4f38:	60 95       	com	r22
    4f3a:	70 95       	com	r23
    4f3c:	80 95       	com	r24
    4f3e:	90 95       	com	r25
    4f40:	9b 01       	movw	r18, r22
    4f42:	ac 01       	movw	r20, r24
    4f44:	bd 01       	movw	r22, r26
    4f46:	cf 01       	movw	r24, r30
    4f48:	08 95       	ret

00004f4a <__tablejump2__>:
    4f4a:	ee 0f       	add	r30, r30
    4f4c:	ff 1f       	adc	r31, r31
    4f4e:	05 90       	lpm	r0, Z+
    4f50:	f4 91       	lpm	r31, Z
    4f52:	e0 2d       	mov	r30, r0
    4f54:	09 94       	ijmp

00004f56 <__umulhisi3>:
    4f56:	a2 9f       	mul	r26, r18
    4f58:	b0 01       	movw	r22, r0
    4f5a:	b3 9f       	mul	r27, r19
    4f5c:	c0 01       	movw	r24, r0
    4f5e:	a3 9f       	mul	r26, r19
    4f60:	70 0d       	add	r23, r0
    4f62:	81 1d       	adc	r24, r1
    4f64:	11 24       	eor	r1, r1
    4f66:	91 1d       	adc	r25, r1
    4f68:	b2 9f       	mul	r27, r18
    4f6a:	70 0d       	add	r23, r0
    4f6c:	81 1d       	adc	r24, r1
    4f6e:	11 24       	eor	r1, r1
    4f70:	91 1d       	adc	r25, r1
    4f72:	08 95       	ret

00004f74 <malloc>:
    4f74:	0f 93       	push	r16
    4f76:	1f 93       	push	r17
    4f78:	cf 93       	push	r28
    4f7a:	df 93       	push	r29
    4f7c:	82 30       	cpi	r24, 0x02	; 2
    4f7e:	91 05       	cpc	r25, r1
    4f80:	10 f4       	brcc	.+4      	; 0x4f86 <malloc+0x12>
    4f82:	82 e0       	ldi	r24, 0x02	; 2
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <__flp>
    4f8a:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <__flp+0x1>
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	a0 e0       	ldi	r26, 0x00	; 0
    4f94:	b0 e0       	ldi	r27, 0x00	; 0
    4f96:	30 97       	sbiw	r30, 0x00	; 0
    4f98:	19 f1       	breq	.+70     	; 0x4fe0 <malloc+0x6c>
    4f9a:	40 81       	ld	r20, Z
    4f9c:	51 81       	ldd	r21, Z+1	; 0x01
    4f9e:	02 81       	ldd	r16, Z+2	; 0x02
    4fa0:	13 81       	ldd	r17, Z+3	; 0x03
    4fa2:	48 17       	cp	r20, r24
    4fa4:	59 07       	cpc	r21, r25
    4fa6:	c8 f0       	brcs	.+50     	; 0x4fda <malloc+0x66>
    4fa8:	84 17       	cp	r24, r20
    4faa:	95 07       	cpc	r25, r21
    4fac:	69 f4       	brne	.+26     	; 0x4fc8 <malloc+0x54>
    4fae:	10 97       	sbiw	r26, 0x00	; 0
    4fb0:	31 f0       	breq	.+12     	; 0x4fbe <malloc+0x4a>
    4fb2:	12 96       	adiw	r26, 0x02	; 2
    4fb4:	0c 93       	st	X, r16
    4fb6:	12 97       	sbiw	r26, 0x02	; 2
    4fb8:	13 96       	adiw	r26, 0x03	; 3
    4fba:	1c 93       	st	X, r17
    4fbc:	27 c0       	rjmp	.+78     	; 0x500c <malloc+0x98>
    4fbe:	00 93 cd 06 	sts	0x06CD, r16	; 0x8006cd <__flp>
    4fc2:	10 93 ce 06 	sts	0x06CE, r17	; 0x8006ce <__flp+0x1>
    4fc6:	22 c0       	rjmp	.+68     	; 0x500c <malloc+0x98>
    4fc8:	21 15       	cp	r18, r1
    4fca:	31 05       	cpc	r19, r1
    4fcc:	19 f0       	breq	.+6      	; 0x4fd4 <malloc+0x60>
    4fce:	42 17       	cp	r20, r18
    4fd0:	53 07       	cpc	r21, r19
    4fd2:	18 f4       	brcc	.+6      	; 0x4fda <malloc+0x66>
    4fd4:	9a 01       	movw	r18, r20
    4fd6:	bd 01       	movw	r22, r26
    4fd8:	ef 01       	movw	r28, r30
    4fda:	df 01       	movw	r26, r30
    4fdc:	f8 01       	movw	r30, r16
    4fde:	db cf       	rjmp	.-74     	; 0x4f96 <malloc+0x22>
    4fe0:	21 15       	cp	r18, r1
    4fe2:	31 05       	cpc	r19, r1
    4fe4:	f9 f0       	breq	.+62     	; 0x5024 <malloc+0xb0>
    4fe6:	28 1b       	sub	r18, r24
    4fe8:	39 0b       	sbc	r19, r25
    4fea:	24 30       	cpi	r18, 0x04	; 4
    4fec:	31 05       	cpc	r19, r1
    4fee:	80 f4       	brcc	.+32     	; 0x5010 <malloc+0x9c>
    4ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff4:	61 15       	cp	r22, r1
    4ff6:	71 05       	cpc	r23, r1
    4ff8:	21 f0       	breq	.+8      	; 0x5002 <malloc+0x8e>
    4ffa:	fb 01       	movw	r30, r22
    4ffc:	93 83       	std	Z+3, r25	; 0x03
    4ffe:	82 83       	std	Z+2, r24	; 0x02
    5000:	04 c0       	rjmp	.+8      	; 0x500a <malloc+0x96>
    5002:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <__flp+0x1>
    5006:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <__flp>
    500a:	fe 01       	movw	r30, r28
    500c:	32 96       	adiw	r30, 0x02	; 2
    500e:	44 c0       	rjmp	.+136    	; 0x5098 <malloc+0x124>
    5010:	fe 01       	movw	r30, r28
    5012:	e2 0f       	add	r30, r18
    5014:	f3 1f       	adc	r31, r19
    5016:	81 93       	st	Z+, r24
    5018:	91 93       	st	Z+, r25
    501a:	22 50       	subi	r18, 0x02	; 2
    501c:	31 09       	sbc	r19, r1
    501e:	39 83       	std	Y+1, r19	; 0x01
    5020:	28 83       	st	Y, r18
    5022:	3a c0       	rjmp	.+116    	; 0x5098 <malloc+0x124>
    5024:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <__brkval>
    5028:	30 91 cc 06 	lds	r19, 0x06CC	; 0x8006cc <__brkval+0x1>
    502c:	23 2b       	or	r18, r19
    502e:	41 f4       	brne	.+16     	; 0x5040 <malloc+0xcc>
    5030:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    5034:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    5038:	30 93 cc 06 	sts	0x06CC, r19	; 0x8006cc <__brkval+0x1>
    503c:	20 93 cb 06 	sts	0x06CB, r18	; 0x8006cb <__brkval>
    5040:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    5044:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    5048:	21 15       	cp	r18, r1
    504a:	31 05       	cpc	r19, r1
    504c:	41 f4       	brne	.+16     	; 0x505e <malloc+0xea>
    504e:	2d b7       	in	r18, 0x3d	; 61
    5050:	3e b7       	in	r19, 0x3e	; 62
    5052:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    5056:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    505a:	24 1b       	sub	r18, r20
    505c:	35 0b       	sbc	r19, r21
    505e:	e0 91 cb 06 	lds	r30, 0x06CB	; 0x8006cb <__brkval>
    5062:	f0 91 cc 06 	lds	r31, 0x06CC	; 0x8006cc <__brkval+0x1>
    5066:	e2 17       	cp	r30, r18
    5068:	f3 07       	cpc	r31, r19
    506a:	a0 f4       	brcc	.+40     	; 0x5094 <malloc+0x120>
    506c:	2e 1b       	sub	r18, r30
    506e:	3f 0b       	sbc	r19, r31
    5070:	28 17       	cp	r18, r24
    5072:	39 07       	cpc	r19, r25
    5074:	78 f0       	brcs	.+30     	; 0x5094 <malloc+0x120>
    5076:	ac 01       	movw	r20, r24
    5078:	4e 5f       	subi	r20, 0xFE	; 254
    507a:	5f 4f       	sbci	r21, 0xFF	; 255
    507c:	24 17       	cp	r18, r20
    507e:	35 07       	cpc	r19, r21
    5080:	48 f0       	brcs	.+18     	; 0x5094 <malloc+0x120>
    5082:	4e 0f       	add	r20, r30
    5084:	5f 1f       	adc	r21, r31
    5086:	50 93 cc 06 	sts	0x06CC, r21	; 0x8006cc <__brkval+0x1>
    508a:	40 93 cb 06 	sts	0x06CB, r20	; 0x8006cb <__brkval>
    508e:	81 93       	st	Z+, r24
    5090:	91 93       	st	Z+, r25
    5092:	02 c0       	rjmp	.+4      	; 0x5098 <malloc+0x124>
    5094:	e0 e0       	ldi	r30, 0x00	; 0
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	cf 01       	movw	r24, r30
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	1f 91       	pop	r17
    50a0:	0f 91       	pop	r16
    50a2:	08 95       	ret

000050a4 <free>:
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	00 97       	sbiw	r24, 0x00	; 0
    50aa:	09 f4       	brne	.+2      	; 0x50ae <free+0xa>
    50ac:	81 c0       	rjmp	.+258    	; 0x51b0 <free+0x10c>
    50ae:	fc 01       	movw	r30, r24
    50b0:	32 97       	sbiw	r30, 0x02	; 2
    50b2:	13 82       	std	Z+3, r1	; 0x03
    50b4:	12 82       	std	Z+2, r1	; 0x02
    50b6:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <__flp>
    50ba:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <__flp+0x1>
    50be:	10 97       	sbiw	r26, 0x00	; 0
    50c0:	81 f4       	brne	.+32     	; 0x50e2 <free+0x3e>
    50c2:	20 81       	ld	r18, Z
    50c4:	31 81       	ldd	r19, Z+1	; 0x01
    50c6:	82 0f       	add	r24, r18
    50c8:	93 1f       	adc	r25, r19
    50ca:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <__brkval>
    50ce:	30 91 cc 06 	lds	r19, 0x06CC	; 0x8006cc <__brkval+0x1>
    50d2:	28 17       	cp	r18, r24
    50d4:	39 07       	cpc	r19, r25
    50d6:	51 f5       	brne	.+84     	; 0x512c <free+0x88>
    50d8:	f0 93 cc 06 	sts	0x06CC, r31	; 0x8006cc <__brkval+0x1>
    50dc:	e0 93 cb 06 	sts	0x06CB, r30	; 0x8006cb <__brkval>
    50e0:	67 c0       	rjmp	.+206    	; 0x51b0 <free+0x10c>
    50e2:	ed 01       	movw	r28, r26
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	ce 17       	cp	r28, r30
    50ea:	df 07       	cpc	r29, r31
    50ec:	40 f4       	brcc	.+16     	; 0x50fe <free+0x5a>
    50ee:	4a 81       	ldd	r20, Y+2	; 0x02
    50f0:	5b 81       	ldd	r21, Y+3	; 0x03
    50f2:	9e 01       	movw	r18, r28
    50f4:	41 15       	cp	r20, r1
    50f6:	51 05       	cpc	r21, r1
    50f8:	f1 f0       	breq	.+60     	; 0x5136 <free+0x92>
    50fa:	ea 01       	movw	r28, r20
    50fc:	f5 cf       	rjmp	.-22     	; 0x50e8 <free+0x44>
    50fe:	d3 83       	std	Z+3, r29	; 0x03
    5100:	c2 83       	std	Z+2, r28	; 0x02
    5102:	40 81       	ld	r20, Z
    5104:	51 81       	ldd	r21, Z+1	; 0x01
    5106:	84 0f       	add	r24, r20
    5108:	95 1f       	adc	r25, r21
    510a:	c8 17       	cp	r28, r24
    510c:	d9 07       	cpc	r29, r25
    510e:	59 f4       	brne	.+22     	; 0x5126 <free+0x82>
    5110:	88 81       	ld	r24, Y
    5112:	99 81       	ldd	r25, Y+1	; 0x01
    5114:	84 0f       	add	r24, r20
    5116:	95 1f       	adc	r25, r21
    5118:	02 96       	adiw	r24, 0x02	; 2
    511a:	91 83       	std	Z+1, r25	; 0x01
    511c:	80 83       	st	Z, r24
    511e:	8a 81       	ldd	r24, Y+2	; 0x02
    5120:	9b 81       	ldd	r25, Y+3	; 0x03
    5122:	93 83       	std	Z+3, r25	; 0x03
    5124:	82 83       	std	Z+2, r24	; 0x02
    5126:	21 15       	cp	r18, r1
    5128:	31 05       	cpc	r19, r1
    512a:	29 f4       	brne	.+10     	; 0x5136 <free+0x92>
    512c:	f0 93 ce 06 	sts	0x06CE, r31	; 0x8006ce <__flp+0x1>
    5130:	e0 93 cd 06 	sts	0x06CD, r30	; 0x8006cd <__flp>
    5134:	3d c0       	rjmp	.+122    	; 0x51b0 <free+0x10c>
    5136:	e9 01       	movw	r28, r18
    5138:	fb 83       	std	Y+3, r31	; 0x03
    513a:	ea 83       	std	Y+2, r30	; 0x02
    513c:	49 91       	ld	r20, Y+
    513e:	59 91       	ld	r21, Y+
    5140:	c4 0f       	add	r28, r20
    5142:	d5 1f       	adc	r29, r21
    5144:	ec 17       	cp	r30, r28
    5146:	fd 07       	cpc	r31, r29
    5148:	61 f4       	brne	.+24     	; 0x5162 <free+0xbe>
    514a:	80 81       	ld	r24, Z
    514c:	91 81       	ldd	r25, Z+1	; 0x01
    514e:	84 0f       	add	r24, r20
    5150:	95 1f       	adc	r25, r21
    5152:	02 96       	adiw	r24, 0x02	; 2
    5154:	e9 01       	movw	r28, r18
    5156:	99 83       	std	Y+1, r25	; 0x01
    5158:	88 83       	st	Y, r24
    515a:	82 81       	ldd	r24, Z+2	; 0x02
    515c:	93 81       	ldd	r25, Z+3	; 0x03
    515e:	9b 83       	std	Y+3, r25	; 0x03
    5160:	8a 83       	std	Y+2, r24	; 0x02
    5162:	e0 e0       	ldi	r30, 0x00	; 0
    5164:	f0 e0       	ldi	r31, 0x00	; 0
    5166:	12 96       	adiw	r26, 0x02	; 2
    5168:	8d 91       	ld	r24, X+
    516a:	9c 91       	ld	r25, X
    516c:	13 97       	sbiw	r26, 0x03	; 3
    516e:	00 97       	sbiw	r24, 0x00	; 0
    5170:	19 f0       	breq	.+6      	; 0x5178 <free+0xd4>
    5172:	fd 01       	movw	r30, r26
    5174:	dc 01       	movw	r26, r24
    5176:	f7 cf       	rjmp	.-18     	; 0x5166 <free+0xc2>
    5178:	8d 91       	ld	r24, X+
    517a:	9c 91       	ld	r25, X
    517c:	11 97       	sbiw	r26, 0x01	; 1
    517e:	9d 01       	movw	r18, r26
    5180:	2e 5f       	subi	r18, 0xFE	; 254
    5182:	3f 4f       	sbci	r19, 0xFF	; 255
    5184:	82 0f       	add	r24, r18
    5186:	93 1f       	adc	r25, r19
    5188:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <__brkval>
    518c:	30 91 cc 06 	lds	r19, 0x06CC	; 0x8006cc <__brkval+0x1>
    5190:	28 17       	cp	r18, r24
    5192:	39 07       	cpc	r19, r25
    5194:	69 f4       	brne	.+26     	; 0x51b0 <free+0x10c>
    5196:	30 97       	sbiw	r30, 0x00	; 0
    5198:	29 f4       	brne	.+10     	; 0x51a4 <free+0x100>
    519a:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <__flp+0x1>
    519e:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <__flp>
    51a2:	02 c0       	rjmp	.+4      	; 0x51a8 <free+0x104>
    51a4:	13 82       	std	Z+3, r1	; 0x03
    51a6:	12 82       	std	Z+2, r1	; 0x02
    51a8:	b0 93 cc 06 	sts	0x06CC, r27	; 0x8006cc <__brkval+0x1>
    51ac:	a0 93 cb 06 	sts	0x06CB, r26	; 0x8006cb <__brkval>
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	08 95       	ret

000051b6 <eeprom_read_byte>:
    51b6:	e1 99       	sbic	0x1c, 1	; 28
    51b8:	fe cf       	rjmp	.-4      	; 0x51b6 <eeprom_read_byte>
    51ba:	9f bb       	out	0x1f, r25	; 31
    51bc:	8e bb       	out	0x1e, r24	; 30
    51be:	e0 9a       	sbi	0x1c, 0	; 28
    51c0:	99 27       	eor	r25, r25
    51c2:	8d b3       	in	r24, 0x1d	; 29
    51c4:	08 95       	ret

000051c6 <eeprom_read_dword>:
    51c6:	a6 e1       	ldi	r26, 0x16	; 22
    51c8:	b0 e0       	ldi	r27, 0x00	; 0
    51ca:	44 e0       	ldi	r20, 0x04	; 4
    51cc:	50 e0       	ldi	r21, 0x00	; 0
    51ce:	0c 94 21 29 	jmp	0x5242	; 0x5242 <eeprom_read_blraw>

000051d2 <eeprom_read_word>:
    51d2:	a8 e1       	ldi	r26, 0x18	; 24
    51d4:	b0 e0       	ldi	r27, 0x00	; 0
    51d6:	42 e0       	ldi	r20, 0x02	; 2
    51d8:	50 e0       	ldi	r21, 0x00	; 0
    51da:	0c 94 21 29 	jmp	0x5242	; 0x5242 <eeprom_read_blraw>

000051de <eeprom_update_byte>:
    51de:	26 2f       	mov	r18, r22

000051e0 <eeprom_update_r18>:
    51e0:	e1 99       	sbic	0x1c, 1	; 28
    51e2:	fe cf       	rjmp	.-4      	; 0x51e0 <eeprom_update_r18>
    51e4:	9f bb       	out	0x1f, r25	; 31
    51e6:	8e bb       	out	0x1e, r24	; 30
    51e8:	e0 9a       	sbi	0x1c, 0	; 28
    51ea:	01 97       	sbiw	r24, 0x01	; 1
    51ec:	0d b2       	in	r0, 0x1d	; 29
    51ee:	02 16       	cp	r0, r18
    51f0:	31 f0       	breq	.+12     	; 0x51fe <eeprom_update_r18+0x1e>
    51f2:	2d bb       	out	0x1d, r18	; 29
    51f4:	0f b6       	in	r0, 0x3f	; 63
    51f6:	f8 94       	cli
    51f8:	e2 9a       	sbi	0x1c, 2	; 28
    51fa:	e1 9a       	sbi	0x1c, 1	; 28
    51fc:	0f be       	out	0x3f, r0	; 63
    51fe:	08 95       	ret

00005200 <eeprom_update_dword>:
    5200:	03 96       	adiw	r24, 0x03	; 3
    5202:	27 2f       	mov	r18, r23
    5204:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <eeprom_update_r18>
    5208:	0e 94 ef 28 	call	0x51de	; 0x51de <eeprom_update_byte>
    520c:	25 2f       	mov	r18, r21
    520e:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <eeprom_update_r18>
    5212:	24 2f       	mov	r18, r20
    5214:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <eeprom_update_r18>

00005218 <eeprom_update_word>:
    5218:	01 96       	adiw	r24, 0x01	; 1
    521a:	27 2f       	mov	r18, r23
    521c:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <eeprom_update_r18>
    5220:	0c 94 ef 28 	jmp	0x51de	; 0x51de <eeprom_update_byte>

00005224 <eeprom_write_dword>:
    5224:	24 2f       	mov	r18, r20
    5226:	0e 94 30 29 	call	0x5260	; 0x5260 <eeprom_write_r18>
    522a:	25 2f       	mov	r18, r21
    522c:	0e 94 30 29 	call	0x5260	; 0x5260 <eeprom_write_r18>
    5230:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <eeprom_write_word>

00005234 <eeprom_write_word>:
    5234:	0e 94 2f 29 	call	0x525e	; 0x525e <eeprom_write_byte>
    5238:	27 2f       	mov	r18, r23
    523a:	0c 94 30 29 	jmp	0x5260	; 0x5260 <eeprom_write_r18>

0000523e <eeprom_read_block>:
    523e:	dc 01       	movw	r26, r24
    5240:	cb 01       	movw	r24, r22

00005242 <eeprom_read_blraw>:
    5242:	fc 01       	movw	r30, r24
    5244:	e1 99       	sbic	0x1c, 1	; 28
    5246:	fe cf       	rjmp	.-4      	; 0x5244 <eeprom_read_blraw+0x2>
    5248:	06 c0       	rjmp	.+12     	; 0x5256 <eeprom_read_blraw+0x14>
    524a:	ff bb       	out	0x1f, r31	; 31
    524c:	ee bb       	out	0x1e, r30	; 30
    524e:	e0 9a       	sbi	0x1c, 0	; 28
    5250:	31 96       	adiw	r30, 0x01	; 1
    5252:	0d b2       	in	r0, 0x1d	; 29
    5254:	0d 92       	st	X+, r0
    5256:	41 50       	subi	r20, 0x01	; 1
    5258:	50 40       	sbci	r21, 0x00	; 0
    525a:	b8 f7       	brcc	.-18     	; 0x524a <eeprom_read_blraw+0x8>
    525c:	08 95       	ret

0000525e <eeprom_write_byte>:
    525e:	26 2f       	mov	r18, r22

00005260 <eeprom_write_r18>:
    5260:	e1 99       	sbic	0x1c, 1	; 28
    5262:	fe cf       	rjmp	.-4      	; 0x5260 <eeprom_write_r18>
    5264:	9f bb       	out	0x1f, r25	; 31
    5266:	8e bb       	out	0x1e, r24	; 30
    5268:	2d bb       	out	0x1d, r18	; 29
    526a:	0f b6       	in	r0, 0x3f	; 63
    526c:	f8 94       	cli
    526e:	e2 9a       	sbi	0x1c, 2	; 28
    5270:	e1 9a       	sbi	0x1c, 1	; 28
    5272:	0f be       	out	0x3f, r0	; 63
    5274:	01 96       	adiw	r24, 0x01	; 1
    5276:	08 95       	ret

00005278 <_exit>:
    5278:	f8 94       	cli

0000527a <__stop_program>:
    527a:	ff cf       	rjmp	.-2      	; 0x527a <__stop_program>
