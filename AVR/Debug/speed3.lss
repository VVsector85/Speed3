
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000210  00800060  00005256  000052ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000460  00800270  00800270  000054fa  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  000054fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000555c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00005598  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006898  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3e  00000000  00000000  0000c240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002934  00000000  00000000  0000d07e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c28  00000000  00000000  0000f9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ff7  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059b2  00000000  00000000  000115d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00016f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_9>
      28:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	73 18       	sub	r7, r3
      56:	99 18       	sub	r9, r9
      58:	bf 18       	sub	r11, r15
      5a:	0e 19       	sub	r16, r14
      5c:	5d 19       	sub	r21, r13
      5e:	79 19       	sub	r23, r9
      60:	95 19       	sub	r25, r5
      62:	b1 19       	sub	r27, r1
      64:	00 1a       	sub	r0, r16
      66:	20 1a       	sub	r2, r16
      68:	3c 1a       	sub	r3, r28
      6a:	5a 1a       	sub	r5, r26
      6c:	66 1a       	sub	r6, r22
      6e:	69 1a       	sub	r6, r25
      70:	26 1b       	sub	r18, r22
      72:	b1 1b       	sub	r27, r17

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	12 e0       	ldi	r17, 0x02	; 2
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e6 e5       	ldi	r30, 0x56	; 86
    1556:	f2 e5       	ldi	r31, 0x52	; 82
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a0 37       	cpi	r26, 0x70	; 112
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	a0 e7       	ldi	r26, 0x70	; 112
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	a0 3d       	cpi	r26, 0xD0	; 208
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <main>
    1578:	0c 94 29 29 	jmp	0x5252	; 0x5252 <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2939>:

	tempValue = currValue;
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	8c 91       	ld	r24, X
    1592:	13 97       	sbiw	r26, 0x03	; 3
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	8c 93       	st	X, r24
    159a:	12 97       	sbiw	r26, 0x02	; 2
    159c:	88 23       	and	r24, r24
    159e:	7c f1       	brlt	.+94     	; 0x15fe <new_value.2939+0x7e>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	0d 91       	ld	r16, X+
    15a2:	1c 91       	ld	r17, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	e0 e0       	ldi	r30, 0x00	; 0
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	68 2f       	mov	r22, r24
    15ac:	08 2e       	mov	r0, r24
    15ae:	00 0c       	add	r0, r0
    15b0:	77 0b       	sbc	r23, r23
    15b2:	98 01       	movw	r18, r16
    15b4:	26 0f       	add	r18, r22
    15b6:	37 1f       	adc	r19, r23
    15b8:	e9 01       	movw	r28, r18
    15ba:	28 81       	ld	r18, Y
    15bc:	02 2e       	mov	r0, r18
    15be:	00 0c       	add	r0, r0
    15c0:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	94 f4       	brge	.+36     	; 0x15ec <new_value.2939+0x6c>
    15c8:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15ca:	a9 01       	movw	r20, r18
    15cc:	44 0f       	add	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	24 0f       	add	r18, r20
    15de:	35 1f       	adc	r19, r21
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	49 2f       	mov	r20, r25
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	46 17       	cp	r20, r22
    15e8:	57 07       	cpc	r21, r23
    15ea:	7c f3       	brlt	.-34     	; 0x15ca <new_value.2939+0x4a>
				tenPower*=10;
			}
			newValue += tenPower;
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	81 50       	subi	r24, 0x01	; 1
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f2:	12 96       	adiw	r26, 0x02	; 2
    15f4:	8c 93       	st	X, r24
    15f6:	12 97       	sbiw	r26, 0x02	; 2
    15f8:	88 23       	and	r24, r24
    15fa:	bc f6       	brge	.-82     	; 0x15aa <new_value.2939+0x2a>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <new_value.2939+0x82>
	tempValue = currValue;
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
    15fe:	e0 e0       	ldi	r30, 0x00	; 0
    1600:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1602:	cf 01       	movw	r24, r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	3f 90       	pop	r3
    160e:	2f 90       	pop	r2
    1610:	08 95       	ret

00001612 <default_values>:
	0b00001000,
	0b00000100			
};

void default_values(){
	 lcdContrast = LCD_CONTRAST_DEFAULT;
    1612:	8a ef       	ldi	r24, 0xFA	; 250
    1614:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <lcdContrast>
	 magnetsOnWheel = MAGNETS_ON_WHEEL_DEFAULT;
    1618:	86 e0       	ldi	r24, 0x06	; 6
    161a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <magnetsOnWheel>
	 gearRatio = GEAR_RATIO_DEFAULT;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <gearRatio>
    162a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <gearRatio+0x1>
    162e:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <gearRatio+0x2>
    1632:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <gearRatio+0x3>
	 wheelDiameter = WHEEL_DIAMETER_DEFAULT;	
    1636:	83 e3       	ldi	r24, 0x33	; 51
    1638:	93 e3       	ldi	r25, 0x33	; 51
    163a:	a3 e3       	ldi	r26, 0x33	; 51
    163c:	bf e3       	ldi	r27, 0x3F	; 63
    163e:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <wheelDiameter>
    1642:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <wheelDiameter+0x1>
    1646:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <wheelDiameter+0x2>
    164a:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <wheelDiameter+0x3>
	 degreesPerKmh = DEGREES_PER_KMH_DEFAULT;
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	93 e3       	ldi	r25, 0x33	; 51
    1652:	a3 ea       	ldi	r26, 0xA3	; 163
    1654:	bf e3       	ldi	r27, 0x3F	; 63
    1656:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <degreesPerKmh>
    165a:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <degreesPerKmh+0x1>
    165e:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <degreesPerKmh+0x2>
    1662:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <degreesPerKmh+0x3>
	 pwmArrow = PWM_ARROW_DEFAULT;
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	94 e0       	ldi	r25, 0x04	; 4
    166a:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <pwmArrow+0x1>
    166e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <pwmArrow>
	 pwmDial = PWM_DIAL_DEFAULT;
    1672:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <pwmDial+0x1>
    1676:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <pwmDial>
	 scaleMax	= SCALE_MAX_DEFAULT;
    167a:	8e eb       	ldi	r24, 0xBE	; 190
    167c:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <scaleMax>
	 stepInterval = STEP_INTERVAL_DEFAULT;
    1680:	86 e9       	ldi	r24, 0x96	; 150
    1682:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <stepInterval>
	 smSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
    1686:	80 e6       	ldi	r24, 0x60	; 96
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <smSteps+0x1>
    168e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <smSteps>
	 stepMode = STEP_MODE_DEFAULT;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepMode>
    1698:	08 95       	ret

0000169a <step>:
	}
}

void step(uint8_t mode){
	uint8_t tempPort = 0;
	if (dir)
    169a:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <dir>
    169e:	99 23       	and	r25, r25
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <step+0x28>
	{
		phase++;
    16a2:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <phase>
    16a6:	9f 5f       	subi	r25, 0xFF	; 255
    16a8:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <phase>
		steps++;
    16ac:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <steps>
    16b0:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <steps+0x1>
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	30 93 9f 02 	sts	0x029F, r19	; 0x80029f <steps+0x1>
    16bc:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <steps>
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <step+0x46>
	}
	else
	{
		phase--;
    16c2:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <phase>
    16c6:	91 50       	subi	r25, 0x01	; 1
    16c8:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <phase>
		steps--;
    16cc:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <steps>
    16d0:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <steps+0x1>
    16d4:	21 50       	subi	r18, 0x01	; 1
    16d6:	31 09       	sbc	r19, r1
    16d8:	30 93 9f 02 	sts	0x029F, r19	; 0x80029f <steps+0x1>
    16dc:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <steps>
	}
		 if (phase < 0) phase = 7;
    16e0:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <phase>
    16e4:	99 23       	and	r25, r25
    16e6:	24 f4       	brge	.+8      	; 0x16f0 <step+0x56>
    16e8:	97 e0       	ldi	r25, 0x07	; 7
    16ea:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <phase>
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <step+0x62>
	else if (phase > 7) phase = 0;
    16f0:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <phase>
    16f4:	98 30       	cpi	r25, 0x08	; 8
    16f6:	14 f0       	brlt	.+4      	; 0x16fc <step+0x62>
    16f8:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <phase>
	tempPort = PORTA;
    16fc:	9b b3       	in	r25, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    16fe:	90 7f       	andi	r25, 0xF0	; 240
		 if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[phase];
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	51 f4       	brne	.+20     	; 0x1718 <step+0x7e>
    1704:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <phase>
    1708:	0e 2e       	mov	r0, r30
    170a:	00 0c       	add	r0, r0
    170c:	ff 0b       	sbc	r31, r31
    170e:	e0 5a       	subi	r30, 0xA0	; 160
    1710:	fd 4f       	sbci	r31, 0xFD	; 253
    1712:	80 81       	ld	r24, Z
    1714:	98 2b       	or	r25, r24
    1716:	0b c0       	rjmp	.+22     	; 0x172e <step+0x94>
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	49 f4       	brne	.+18     	; 0x172e <step+0x94>
    171c:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <phase>
    1720:	0e 2e       	mov	r0, r30
    1722:	00 0c       	add	r0, r0
    1724:	ff 0b       	sbc	r31, r31
    1726:	e8 59       	subi	r30, 0x98	; 152
    1728:	fd 4f       	sbci	r31, 0xFD	; 253
    172a:	80 81       	ld	r24, Z
    172c:	98 2b       	or	r25, r24
	PORTA = tempPort;
    172e:	9b bb       	out	0x1b, r25	; 27
    1730:	08 95       	ret

00001732 <__vector_10>:
	if (!arrowCalibrated) arrow_calibration();
	MCUCR|= _BV(ISC11); //External falling edge interrupt INT1 (Hall sensor)
	GICR|=_BV(INT1); //External Interrupt Enable INT1
}

ISR( TIMER0_COMP_vect ){
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	step(stepMode);
    1754:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <stepMode>
    1758:	0e 94 4d 0b 	call	0x169a	; 0x169a <step>
	if (steps == newSteps){	//stop Stepper Motor rotation
    175c:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <steps>
    1760:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <steps+0x1>
    1764:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <newSteps>
    1768:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <newSteps+0x1>
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	39 f4       	brne	.+14     	; 0x1780 <__vector_10+0x4e>
		arrowMoving = 0;
    1772:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <arrowMoving>
		TCCR0 = 0;
    1776:	13 be       	out	0x33, r1	; 51
		OCR0 = 0;
    1778:	1c be       	out	0x3c, r1	; 60
		TIMSK&=~_BV(OCIE0);
    177a:	89 b7       	in	r24, 0x39	; 57
    177c:	8d 7f       	andi	r24, 0xFD	; 253
    177e:	89 bf       	out	0x39, r24	; 57
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_4>:
		 if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[phase];
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
	PORTA = tempPort;
}

ISR( TIMER2_COMP_vect ){
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
	speedTimerRough++; //speedTimer increments each period timePerTic*TIC
    17b0:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <speedTimerRough>
    17b4:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <speedTimerRough+0x1>
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <speedTimerRough+0x1>
    17be:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <speedTimerRough>
}
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_9>:

ISR (TIMER1_OVF_vect){
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    17de:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <signalOn>
    17e2:	88 23       	and	r24, r24
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <__vector_9+0x28>
    17e6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <signalCounter>
    17ea:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <signalCounter+0x1>
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <signalCounter+0x1>
    17f4:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <signalCounter>
}
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_2>:

ISR(INT1_vect){
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	8f 93       	push	r24
    1812:	9f 93       	push	r25
    1814:	af 93       	push	r26
    1816:	bf 93       	push	r27
//interrupt occurs when Hall sensor is triggered
if (firstMeasure)
    1818:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <firstMeasure>
    181c:	88 23       	and	r24, r24
    181e:	21 f1       	breq	.+72     	; 0x1868 <__vector_2+0x62>
	{
		//speedTimerPrecise = (speedTimerRough*TIC) + TCNT2;
		tempTCNT = TCNT2;
    1820:	84 b5       	in	r24, 0x24	; 36
    1822:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <tempTCNT>
		TCNT2 = 0;
    1826:	14 bc       	out	0x24, r1	; 36
		speedTimerRoughTemp = speedTimerRough;
    1828:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <speedTimerRough>
    182c:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <speedTimerRough+0x1>
    1830:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <speedTimerRoughTemp+0x1>
    1834:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <speedTimerRoughTemp>
		speedTimerRough = 0;
    1838:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <speedTimerRough+0x1>
    183c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <speedTimerRough>
		totalRotations++;
    1840:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <totalRotations>
    1844:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <totalRotations+0x1>
    1848:	a0 91 a4 02 	lds	r26, 0x02A4	; 0x8002a4 <totalRotations+0x2>
    184c:	b0 91 a5 02 	lds	r27, 0x02A5	; 0x8002a5 <totalRotations+0x3>
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	a1 1d       	adc	r26, r1
    1854:	b1 1d       	adc	r27, r1
    1856:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <totalRotations>
    185a:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <totalRotations+0x1>
    185e:	a0 93 a4 02 	sts	0x02A4, r26	; 0x8002a4 <totalRotations+0x2>
    1862:	b0 93 a5 02 	sts	0x02A5, r27	; 0x8002a5 <totalRotations+0x3>
    1866:	07 c0       	rjmp	.+14     	; 0x1876 <__vector_2+0x70>
	}
else
	{
		//first triggering of the sensor starts TIMER2
		TCNT2 = 0;
    1868:	14 bc       	out	0x24, r1	; 36
		TIMSK|=_BV(OCIE2);
    186a:	89 b7       	in	r24, 0x39	; 57
    186c:	80 68       	ori	r24, 0x80	; 128
    186e:	89 bf       	out	0x39, r24	; 57
		firstMeasure = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <firstMeasure>
	}
}
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <main_screen>:
		}
	}
}

void main_screen()
{
    1888:	8f 92       	push	r8
    188a:	9f 92       	push	r9
    188c:	af 92       	push	r10
    188e:	bf 92       	push	r11
    1890:	cf 92       	push	r12
    1892:	df 92       	push	r13
    1894:	ef 92       	push	r14
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
	if (!signalOn){
    189e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <signalOn>
    18a2:	81 11       	cpse	r24, r1
    18a4:	d8 c0       	rjmp	.+432    	; 0x1a56 <main_screen+0x1ce>

		uint8_t offsetX = 10;
		uint8_t offsetY = 11;
		GLCD_Clear();
    18a6:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    18aa:	0f ef       	ldi	r16, 0xFF	; 255
    18ac:	27 e1       	ldi	r18, 0x17	; 23
    18ae:	44 e2       	ldi	r20, 0x24	; 36
    18b0:	6b e0       	ldi	r22, 0x0B	; 11
    18b2:	8a e0       	ldi	r24, 0x0A	; 10
    18b4:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    18b8:	24 e1       	ldi	r18, 0x14	; 20
    18ba:	46 e2       	ldi	r20, 0x26	; 38
    18bc:	6e e0       	ldi	r22, 0x0E	; 14
    18be:	85 e2       	ldi	r24, 0x25	; 37
    18c0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>

		if (voltage>=BRICK_1)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    18c4:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18c8:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    18cc:	89 36       	cpi	r24, 0x69	; 105
    18ce:	91 05       	cpc	r25, r1
    18d0:	34 f0       	brlt	.+12     	; 0x18de <main_screen+0x56>
    18d2:	25 e1       	ldi	r18, 0x15	; 21
    18d4:	40 e1       	ldi	r20, 0x10	; 16
    18d6:	6d e0       	ldi	r22, 0x0D	; 13
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	0e 94 1e 20 	call	0x403c	; 0x403c <GLCD_FillRectangle>
		if (voltage>=BRICK_2)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    18de:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18e2:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    18e6:	8e 36       	cpi	r24, 0x6E	; 110
    18e8:	91 05       	cpc	r25, r1
    18ea:	3c f0       	brlt	.+14     	; 0x18fa <main_screen+0x72>
    18ec:	0f ef       	ldi	r16, 0xFF	; 255
    18ee:	25 e1       	ldi	r18, 0x15	; 21
    18f0:	46 e1       	ldi	r20, 0x16	; 22
    18f2:	6d e0       	ldi	r22, 0x0D	; 13
    18f4:	82 e1       	ldi	r24, 0x12	; 18
    18f6:	0e 94 1e 20 	call	0x403c	; 0x403c <GLCD_FillRectangle>
		if (voltage>=BRICK_3)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    18fa:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    18fe:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    1902:	83 37       	cpi	r24, 0x73	; 115
    1904:	91 05       	cpc	r25, r1
    1906:	3c f0       	brlt	.+14     	; 0x1916 <main_screen+0x8e>
    1908:	0f ef       	ldi	r16, 0xFF	; 255
    190a:	25 e1       	ldi	r18, 0x15	; 21
    190c:	4c e1       	ldi	r20, 0x1C	; 28
    190e:	6d e0       	ldi	r22, 0x0D	; 13
    1910:	88 e1       	ldi	r24, 0x18	; 24
    1912:	0e 94 1e 20 	call	0x403c	; 0x403c <GLCD_FillRectangle>
		if (voltage>=BRICK_4)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    1916:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <voltage>
    191a:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <voltage+0x1>
    191e:	88 37       	cpi	r24, 0x78	; 120
    1920:	91 05       	cpc	r25, r1
    1922:	3c f0       	brlt	.+14     	; 0x1932 <main_screen+0xaa>
    1924:	0f ef       	ldi	r16, 0xFF	; 255
    1926:	25 e1       	ldi	r18, 0x15	; 21
    1928:	42 e2       	ldi	r20, 0x22	; 34
    192a:	6d e0       	ldi	r22, 0x0D	; 13
    192c:	8e e1       	ldi	r24, 0x1E	; 30
    192e:	0e 94 1e 20 	call	0x403c	; 0x403c <GLCD_FillRectangle>

		GLCD_GotoXY(33+offsetX, 4+offsetY);
    1932:	6f e0       	ldi	r22, 0x0F	; 15
    1934:	8b e2       	ldi	r24, 0x2B	; 43
    1936:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	48 e0       	ldi	r20, 0x08	; 8
    193e:	65 e0       	ldi	r22, 0x05	; 5
    1940:	80 ea       	ldi	r24, 0xA0	; 160
    1942:	9b e0       	ldi	r25, 0x0B	; 11
    1944:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    1948:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <voltage>
    194c:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <voltage+0x1>
    1950:	07 2e       	mov	r0, r23
    1952:	00 0c       	add	r0, r0
    1954:	88 0b       	sbc	r24, r24
    1956:	99 0b       	sbc	r25, r25
    1958:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__floatsisf>
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    1968:	2a e0       	ldi	r18, 0x0A	; 10
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
		GLCD_PrintString("V");
    1974:	88 e6       	ldi	r24, 0x68	; 104
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>

		GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	62 e1       	ldi	r22, 0x12	; 18
    1982:	86 e3       	ldi	r24, 0x36	; 54
    1984:	94 e0       	ldi	r25, 0x04	; 4
    1986:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <GLCD_SetFont>
		GLCD_GotoXY(4, 31);
    198a:	6f e1       	ldi	r22, 0x1F	; 31
    198c:	84 e0       	ldi	r24, 0x04	; 4
    198e:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    1992:	80 90 76 02 	lds	r8, 0x0276	; 0x800276 <distance>
    1996:	90 90 77 02 	lds	r9, 0x0277	; 0x800277 <distance+0x1>
    199a:	a0 90 78 02 	lds	r10, 0x0278	; 0x800278 <distance+0x2>
    199e:	b0 90 79 02 	lds	r11, 0x0279	; 0x800279 <distance+0x3>
    19a2:	84 e6       	ldi	r24, 0x64	; 100
    19a4:	88 16       	cp	r8, r24
    19a6:	91 04       	cpc	r9, r1
    19a8:	a1 04       	cpc	r10, r1
    19aa:	b1 04       	cpc	r11, r1
    19ac:	70 f0       	brcs	.+28     	; 0x19ca <main_screen+0x142>
    19ae:	c5 01       	movw	r24, r10
    19b0:	b4 01       	movw	r22, r8
    19b2:	2a e0       	ldi	r18, 0x0A	; 10
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <__udivmodsi4>
		uint8_t l = 0;

		while(tempDistance){
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	41 05       	cpc	r20, r1
    19c4:	51 05       	cpc	r21, r1
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <main_screen+0x14a>
    19c8:	40 c0       	rjmp	.+128    	; 0x1a4a <main_screen+0x1c2>

		GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
		GLCD_GotoXY(4, 31);
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    19ca:	24 e6       	ldi	r18, 0x64	; 100
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t l = 0;

		while(tempDistance){
			tempDistance/=10;
    19d4:	0f 2e       	mov	r0, r31
    19d6:	fa e0       	ldi	r31, 0x0A	; 10
    19d8:	cf 2e       	mov	r12, r31
    19da:	d1 2c       	mov	r13, r1
    19dc:	e1 2c       	mov	r14, r1
    19de:	f1 2c       	mov	r15, r1
    19e0:	f0 2d       	mov	r31, r0
    19e2:	ca 01       	movw	r24, r20
    19e4:	b9 01       	movw	r22, r18
    19e6:	a7 01       	movw	r20, r14
    19e8:	96 01       	movw	r18, r12
    19ea:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <__udivmodsi4>
			l++;
    19ee:	cf 5f       	subi	r28, 0xFF	; 255
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

		while(tempDistance){
    19f0:	21 15       	cp	r18, r1
    19f2:	31 05       	cpc	r19, r1
    19f4:	41 05       	cpc	r20, r1
    19f6:	51 05       	cpc	r21, r1
    19f8:	a1 f7       	brne	.-24     	; 0x19e2 <main_screen+0x15a>
			tempDistance/=10;
			l++;
		}

		int8_t zeros = 6-l;
		if (distance < 100)zeros = 4;
    19fa:	84 e6       	ldi	r24, 0x64	; 100
    19fc:	88 16       	cp	r8, r24
    19fe:	91 04       	cpc	r9, r1
    1a00:	a1 04       	cpc	r10, r1
    1a02:	b1 04       	cpc	r11, r1
    1a04:	18 f5       	brcc	.+70     	; 0x1a4c <main_screen+0x1c4>
    1a06:	d4 e0       	ldi	r29, 0x04	; 4
    1a08:	c0 e0       	ldi	r28, 0x00	; 0
			if (zeros > 0){
				for (int8_t i = 0;i<zeros;i++){
					GLCD_PrintString("0");
    1a0a:	8a e6       	ldi	r24, 0x6A	; 106
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
    1a12:	cf 5f       	subi	r28, 0xFF	; 255
		}

		int8_t zeros = 6-l;
		if (distance < 100)zeros = 4;
			if (zeros > 0){
				for (int8_t i = 0;i<zeros;i++){
    1a14:	cd 17       	cp	r28, r29
    1a16:	cc f3       	brlt	.-14     	; 0x1a0a <main_screen+0x182>
					GLCD_PrintString("0");
				}
			}
		GLCD_PrintDouble((double)distance/100.0,10);
    1a18:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <distance>
    1a1c:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <distance+0x1>
    1a20:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <distance+0x2>
    1a24:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <distance+0x3>
    1a28:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	48 ec       	ldi	r20, 0xC8	; 200
    1a32:	52 e4       	ldi	r21, 0x42	; 66
    1a34:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    1a38:	2a e0       	ldi	r18, 0x0A	; 10
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
		GLCD_Render();
    1a44:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
		}
}
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <main_screen+0x1ce>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

		while(tempDistance){
    1a4a:	c0 e0       	ldi	r28, 0x00	; 0
			tempDistance/=10;
			l++;
		}

		int8_t zeros = 6-l;
    1a4c:	d6 e0       	ldi	r29, 0x06	; 6
    1a4e:	dc 1b       	sub	r29, r28
		if (distance < 100)zeros = 4;
			if (zeros > 0){
    1a50:	1d 16       	cp	r1, r29
    1a52:	14 f7       	brge	.-60     	; 0x1a18 <main_screen+0x190>
    1a54:	d9 cf       	rjmp	.-78     	; 0x1a08 <main_screen+0x180>
				}
			}
		GLCD_PrintDouble((double)distance/100.0,10);
		GLCD_Render();
		}
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	08 95       	ret

00001a6e <speed_arrow_update>:
			}
	return 0;
}

void speed_arrow_update(){
	newSteps = speedKmh/kmhPerStep;
    1a6e:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <kmhPerStep>
    1a72:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <kmhPerStep+0x1>
    1a76:	40 91 88 02 	lds	r20, 0x0288	; 0x800288 <kmhPerStep+0x2>
    1a7a:	50 91 89 02 	lds	r21, 0x0289	; 0x800289 <kmhPerStep+0x3>
    1a7e:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <speedKmh>
    1a82:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <speedKmh+0x1>
    1a86:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <speedKmh+0x2>
    1a8a:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <speedKmh+0x3>
    1a8e:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    1a92:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    1a96:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <newSteps+0x1>
    1a9a:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <newSteps>
	int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (for how many steps arrow should be shifted)
    1a9e:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <steps>
    1aa2:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <steps+0x1>
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	86 1b       	sub	r24, r22
    1aaa:	97 0b       	sbc	r25, r23
	if (shiftSteps!=0){
    1aac:	99 f0       	breq	.+38     	; 0x1ad4 <speed_arrow_update+0x66>
		if (shiftSteps > 0) dir = 0; else dir = 1;
    1aae:	1a f0       	brmi	.+6      	; 0x1ab6 <speed_arrow_update+0x48>
    1ab0:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <dir>
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <speed_arrow_update+0x4e>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <dir>
		arrowMoving = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <arrowMoving>
		//Timer0 is used to generate pulses for Stepper Motor driver
		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
    1ac2:	83 b7       	in	r24, 0x33	; 51
    1ac4:	8d 60       	ori	r24, 0x0D	; 13
    1ac6:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1ac8:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <stepInterval>
    1acc:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1ace:	89 b7       	in	r24, 0x39	; 57
    1ad0:	82 60       	ori	r24, 0x02	; 2
    1ad2:	89 bf       	out	0x39, r24	; 57
    1ad4:	08 95       	ret

00001ad6 <button_monitor>:
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
    1ad6:	b5 9b       	sbis	0x16, 5	; 22
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <button_monitor+0xc>
    1ada:	b6 9b       	sbis	0x16, 6	; 22
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <button_monitor+0xc>
    1ade:	b7 99       	sbic	0x16, 7	; 22
    1ae0:	2a c0       	rjmp	.+84     	; 0x1b36 <button_monitor+0x60>
		btnPressed = 0;
		return 0;
	}
	else if((!(PINB&_BV(5)))&&(!btnPressed)){
    1ae2:	b5 99       	sbic	0x16, 5	; 22
    1ae4:	0d c0       	rjmp	.+26     	; 0x1b00 <button_monitor+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae6:	8f e9       	ldi	r24, 0x9F	; 159
    1ae8:	9f e0       	ldi	r25, 0x0F	; 15
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <button_monitor+0x14>
    1aee:	00 c0       	rjmp	.+0      	; 0x1af0 <button_monitor+0x1a>
    1af0:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
    1af2:	86 b3       	in	r24, 0x16	; 22

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1af4:	85 fb       	bst	r24, 5
    1af6:	99 27       	eor	r25, r25
    1af8:	90 f9       	bld	r25, 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 27       	eor	r24, r25
    1afe:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
			btnPressed = 1;
		}
	}
	else if((!(PINB&_BV(6)))&&(!btnPressed)){
    1b00:	96 b3       	in	r25, 0x16	; 22
    1b02:	89 2f       	mov	r24, r25
    1b04:	80 74       	andi	r24, 0x40	; 64
    1b06:	96 fd       	sbrc	r25, 6
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <button_monitor+0x48>
    1b0a:	ef e9       	ldi	r30, 0x9F	; 159
    1b0c:	ff e0       	ldi	r31, 0x0F	; 15
    1b0e:	31 97       	sbiw	r30, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <button_monitor+0x38>
    1b12:	00 c0       	rjmp	.+0      	; 0x1b14 <button_monitor+0x3e>
    1b14:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(6))){
    1b16:	b6 99       	sbic	0x16, 6	; 22
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <button_monitor+0x6a>
			btnPressed = 2;
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	08 95       	ret
		}
	}
	else if((!(PINB&_BV(7)))&&(!btnPressed)){
    1b1e:	b7 99       	sbic	0x16, 7	; 22
    1b20:	0c c0       	rjmp	.+24     	; 0x1b3a <button_monitor+0x64>
    1b22:	8f e9       	ldi	r24, 0x9F	; 159
    1b24:	9f e0       	ldi	r25, 0x0F	; 15
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <button_monitor+0x50>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <button_monitor+0x56>
    1b2c:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(7))){
    1b2e:	b7 99       	sbic	0x16, 7	; 22
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <button_monitor+0x68>
			btnPressed = 3;
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	08 95       	ret

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	08 95       	ret
		if (!debugMode)main_screen();
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	08 95       	ret
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PINB&_BV(7))){
			btnPressed = 3;
		}
	}
	return btnPressed;
}
    1b40:	08 95       	ret

00001b42 <arrow_calibration>:

void arrow_calibration(){
	steps = 0;
    1b42:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <steps+0x1>
    1b46:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <steps>
	phase = 0;
    1b4a:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <phase>
	newSteps = smSteps*stepMode/4;	//moving arrow 90 degrees clockwise
    1b4e:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <stepMode>
    1b52:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <smSteps>
    1b56:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <smSteps+0x1>
    1b5a:	42 9f       	mul	r20, r18
    1b5c:	c0 01       	movw	r24, r0
    1b5e:	43 9f       	mul	r20, r19
    1b60:	90 0d       	add	r25, r0
    1b62:	11 24       	eor	r1, r1
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <newSteps+0x1>
    1b70:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <newSteps>
	dir = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <dir>
	arrowMoving = 1;
    1b7a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1b7e:	83 b7       	in	r24, 0x33	; 51
    1b80:	8d 60       	ori	r24, 0x0D	; 13
    1b82:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1b84:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <stepInterval>
    1b88:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1b8a:	89 b7       	in	r24, 0x39	; 57
    1b8c:	82 60       	ori	r24, 0x02	; 2
    1b8e:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1b90:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <arrowMoving>
    1b94:	81 11       	cpse	r24, r1
    1b96:	fc cf       	rjmp	.-8      	; 0x1b90 <arrow_calibration+0x4e>
    1b98:	2f ef       	ldi	r18, 0xFF	; 255
    1b9a:	82 e5       	ldi	r24, 0x52	; 82
    1b9c:	97 e0       	ldi	r25, 0x07	; 7
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	80 40       	sbci	r24, 0x00	; 0
    1ba2:	90 40       	sbci	r25, 0x00	; 0
    1ba4:	e1 f7       	brne	.-8      	; 0x1b9e <arrow_calibration+0x5c>
    1ba6:	00 c0       	rjmp	.+0      	; 0x1ba8 <arrow_calibration+0x66>
    1ba8:	00 00       	nop
	_delay_ms(150);
	steps = smSteps*stepMode;
    1baa:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <stepMode>
    1bae:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <smSteps>
    1bb2:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <smSteps+0x1>
    1bb6:	42 9f       	mul	r20, r18
    1bb8:	c0 01       	movw	r24, r0
    1bba:	43 9f       	mul	r20, r19
    1bbc:	90 0d       	add	r25, r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <steps+0x1>
    1bc4:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1bc8:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <newSteps+0x1>
    1bcc:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <newSteps>
	dir = 0;
    1bd0:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <dir>
	arrowMoving = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1bda:	83 b7       	in	r24, 0x33	; 51
    1bdc:	8d 60       	ori	r24, 0x0D	; 13
    1bde:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1be0:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <stepInterval>
    1be4:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1be6:	89 b7       	in	r24, 0x39	; 57
    1be8:	82 60       	ori	r24, 0x02	; 2
    1bea:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1bec:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <arrowMoving>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	fc cf       	rjmp	.-8      	; 0x1bec <arrow_calibration+0xaa>
	steps = 0;
    1bf4:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <steps+0x1>
    1bf8:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <steps>
	newSteps = 0;
    1bfc:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <newSteps+0x1>
    1c00:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <newSteps>
	arrowCalibrated = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <arrowCalibrated>
    1c0a:	08 95       	ret

00001c0c <draw_arrow>:
}

void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1c0c:	88 23       	and	r24, r24
    1c0e:	81 f0       	breq	.+32     	; 0x1c30 <draw_arrow+0x24>
		GLCD_Clear();
    1c10:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c14:	67 e0       	ldi	r22, 0x07	; 7
    1c16:	86 e1       	ldi	r24, 0x16	; 22
    1c18:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1c1c:	2f ef       	ldi	r18, 0xFF	; 255
    1c1e:	47 e3       	ldi	r20, 0x37	; 55
    1c20:	6c e5       	ldi	r22, 0x5C	; 92
    1c22:	84 e6       	ldi	r24, 0x64	; 100
    1c24:	90 e1       	ldi	r25, 0x10	; 16
    1c26:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <GLCD_DrawBitmap>
		GLCD_Render();
    1c2a:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
    1c2e:	08 95       	ret
		}else{
		GLCD_Clear();
    1c30:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c34:	67 e0       	ldi	r22, 0x07	; 7
    1c36:	86 e1       	ldi	r24, 0x16	; 22
    1c38:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1c3c:	2f ef       	ldi	r18, 0xFF	; 255
    1c3e:	47 e3       	ldi	r20, 0x37	; 55
    1c40:	6c e5       	ldi	r22, 0x5C	; 92
    1c42:	80 ee       	ldi	r24, 0xE0	; 224
    1c44:	9d e0       	ldi	r25, 0x0D	; 13
    1c46:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <GLCD_DrawBitmap>
		GLCD_Render();
    1c4a:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
    1c4e:	08 95       	ret

00001c50 <draw_skull>:
	}
}

void draw_skull (void)
{
	GLCD_Clear();
    1c50:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
	GLCD_GotoXY(27, 7);
    1c54:	67 e0       	ldi	r22, 0x07	; 7
    1c56:	8b e1       	ldi	r24, 0x1B	; 27
    1c58:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1c5c:	2f ef       	ldi	r18, 0xFF	; 255
    1c5e:	44 e3       	ldi	r20, 0x34	; 52
    1c60:	66 e5       	ldi	r22, 0x56	; 86
    1c62:	88 ee       	ldi	r24, 0xE8	; 232
    1c64:	92 e1       	ldi	r25, 0x12	; 18
    1c66:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <GLCD_DrawBitmap>
	GLCD_Render();
    1c6a:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
    1c6e:	08 95       	ret

00001c70 <signal_monitor>:
	}
	if (speedKmh>scaleMax)speedKmh = scaleMax;
}

void signal_monitor(){
	if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1c70:	b4 99       	sbic	0x16, 4	; 22
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <signal_monitor+0x1e>
    1c74:	b3 9b       	sbis	0x16, 3	; 22
    1c76:	0b c0       	rjmp	.+22     	; 0x1c8e <signal_monitor+0x1e>
		draw_arrow(0);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <draw_arrow>
		signalOn = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <signalOn>
		signalCounter = 0;
    1c84:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1c88:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
    1c8c:	21 c0       	rjmp	.+66     	; 0x1cd0 <signal_monitor+0x60>
	}
	else if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1c8e:	b3 99       	sbic	0x16, 3	; 22
    1c90:	0d c0       	rjmp	.+26     	; 0x1cac <signal_monitor+0x3c>
    1c92:	b4 9b       	sbis	0x16, 4	; 22
    1c94:	0b c0       	rjmp	.+22     	; 0x1cac <signal_monitor+0x3c>
		draw_arrow(1);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <draw_arrow>
		signalOn = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <signalOn>
		signalCounter = 0;
    1ca2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1ca6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
    1caa:	12 c0       	rjmp	.+36     	; 0x1cd0 <signal_monitor+0x60>
	}
	else if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1cac:	b4 99       	sbic	0x16, 4	; 22
    1cae:	0c c0       	rjmp	.+24     	; 0x1cc8 <signal_monitor+0x58>
    1cb0:	b3 99       	sbic	0x16, 3	; 22
    1cb2:	0a c0       	rjmp	.+20     	; 0x1cc8 <signal_monitor+0x58>
		draw_skull();
    1cb4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <draw_skull>
		signalOn = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <signalOn>
		signalCounter = 0;
    1cbe:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1cc2:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <signal_monitor+0x60>
	}
	if (signalOn){
    1cc8:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <signalOn>
    1ccc:	88 23       	and	r24, r24
    1cce:	e9 f0       	breq	.+58     	; 0x1d0a <signal_monitor+0x9a>
		if((PINB&_BV(3))&&(PINB&_BV(4))){
    1cd0:	b3 9b       	sbis	0x16, 3	; 22
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <signal_monitor+0x76>
    1cd4:	b4 9b       	sbis	0x16, 4	; 22
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <signal_monitor+0x76>
			GLCD_Clear();
    1cd8:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
			GLCD_Render();
    1cdc:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
			TIMSK|=_BV(TOIE1);		// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1ce0:	89 b7       	in	r24, 0x39	; 57
    1ce2:	84 60       	ori	r24, 0x04	; 4
    1ce4:	89 bf       	out	0x39, r24	; 57
		}							// In order to define if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
		if (signalCounter > SIGNAL_COUNTER_MAX)	// if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1ce6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <signalCounter>
    1cea:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <signalCounter+0x1>
    1cee:	8d 32       	cpi	r24, 0x2D	; 45
    1cf0:	91 40       	sbci	r25, 0x01	; 1
    1cf2:	58 f0       	brcs	.+22     	; 0x1d0a <signal_monitor+0x9a>
		{
			signalOn = 0;
    1cf4:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <signalOn>
			signalCounter = 0;
    1cf8:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <signalCounter+0x1>
    1cfc:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <signalCounter>
			TIMSK&=~_BV(TOIE1);
    1d00:	89 b7       	in	r24, 0x39	; 57
    1d02:	8b 7f       	andi	r24, 0xFB	; 251
    1d04:	89 bf       	out	0x39, r24	; 57
			main_screen();
    1d06:	0e 94 44 0c 	call	0x1888	; 0x1888 <main_screen>
    1d0a:	08 95       	ret

00001d0c <read_ADC>:
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
	GLCD_Render();
}

uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
    1d0c:	87 b9       	out	0x07, r24	; 7
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d0e:	e6 2f       	mov	r30, r22
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	1e 16       	cp	r1, r30
    1d14:	1f 06       	cpc	r1, r31
    1d16:	8c f4       	brge	.+34     	; 0x1d3a <read_ADC+0x2e>
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1d20:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1d22:	36 99       	sbic	0x06, 6	; 6
    1d24:	fe cf       	rjmp	.-4      	; 0x1d22 <read_ADC+0x16>
		tmp += ADCW;
    1d26:	44 b1       	in	r20, 0x04	; 4
    1d28:	55 b1       	in	r21, 0x05	; 5
    1d2a:	84 0f       	add	r24, r20
    1d2c:	95 1f       	adc	r25, r21
}

uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	2e 17       	cp	r18, r30
    1d34:	3f 07       	cpc	r19, r31
    1d36:	a1 f7       	brne	.-24     	; 0x1d20 <read_ADC+0x14>
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <read_ADC+0x32>
	GLCD_Render();
}

uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	0e 94 48 27 	call	0x4e90	; 0x4e90 <__udivmodhi4>
    1d44:	cb 01       	movw	r24, r22
}
    1d46:	08 95       	ret

00001d48 <data_monitor>:
			main_screen();
		}
	}
}

void data_monitor(){
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
	newVoltage = (read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER;
    1d4c:	6a e0       	ldi	r22, 0x0A	; 10
    1d4e:	84 e0       	ldi	r24, 0x04	; 4
    1d50:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <read_ADC>
    1d54:	bc 01       	movw	r22, r24
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    1d5e:	2a e9       	ldi	r18, 0x9A	; 154
    1d60:	39 e9       	ldi	r19, 0x99	; 153
    1d62:	4c ec       	ldi	r20, 0xCC	; 204
    1d64:	52 e4       	ldi	r21, 0x42	; 66
    1d66:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	50 e4       	ldi	r21, 0x40	; 64
    1d72:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 ec       	ldi	r20, 0xC0	; 192
    1d7c:	50 e4       	ldi	r21, 0x40	; 64
    1d7e:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    1d82:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__fixsfsi>
    1d86:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <newVoltage+0x1>
    1d8a:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <newVoltage>
	if (newVoltage<SLEEP_VOLTAGE){//Disabling power consumers during ignition to prevent MCU from reboot
    1d8e:	64 36       	cpi	r22, 0x64	; 100
    1d90:	71 05       	cpc	r23, r1
    1d92:	cc f5       	brge	.+114    	; 0x1e06 <data_monitor+0xbe>
		PORTA|=_BV(3);
    1d94:	db 9a       	sbi	0x1b, 3	; 27
		PORTA|=_BV(0);
    1d96:	d8 9a       	sbi	0x1b, 0	; 27
		OCR1A = 0;
    1d98:	1b bc       	out	0x2b, r1	; 43
    1d9a:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1d9c:	19 bc       	out	0x29, r1	; 41
    1d9e:	18 bc       	out	0x28, r1	; 40
		GLCD_Clear();
    1da0:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
		GLCD_Render();
    1da4:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
		while((read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER<SLEEP_VOLTAGE);
    1da8:	6a e0       	ldi	r22, 0x0A	; 10
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <read_ADC>
    1db0:	bc 01       	movw	r22, r24
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    1dba:	2a e9       	ldi	r18, 0x9A	; 154
    1dbc:	39 e9       	ldi	r19, 0x99	; 153
    1dbe:	4c ec       	ldi	r20, 0xCC	; 204
    1dc0:	52 e4       	ldi	r21, 0x42	; 66
    1dc2:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	50 e4       	ldi	r21, 0x40	; 64
    1dce:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 ec       	ldi	r20, 0xC0	; 192
    1dd8:	50 e4       	ldi	r21, 0x40	; 64
    1dda:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	48 ec       	ldi	r20, 0xC8	; 200
    1de4:	52 e4       	ldi	r21, 0x42	; 66
    1de6:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	ec f2       	brlt	.-70     	; 0x1da8 <data_monitor+0x60>
		OCR1A = pwmArrow;
    1dee:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <pwmArrow>
    1df2:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    1df6:	9b bd       	out	0x2b, r25	; 43
    1df8:	8a bd       	out	0x2a, r24	; 42
		OCR1B = pwmDial;
    1dfa:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <pwmDial>
    1dfe:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    1e02:	99 bd       	out	0x29, r25	; 41
    1e04:	88 bd       	out	0x28, r24	; 40
	}
	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    1e06:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <newVoltage>
    1e0a:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <newVoltage+0x1>
    1e0e:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <voltage>
    1e12:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <voltage+0x1>
    1e16:	82 17       	cp	r24, r18
    1e18:	93 07       	cpc	r25, r19
    1e1a:	51 f0       	breq	.+20     	; 0x1e30 <data_monitor+0xe8>
	{
		voltage = newVoltage;
    1e1c:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <voltage+0x1>
    1e20:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <voltage>
		if (!debugMode)main_screen();
    1e24:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    1e28:	81 11       	cpse	r24, r1
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <data_monitor+0xe8>
    1e2c:	0e 94 44 0c 	call	0x1888	; 0x1888 <main_screen>
	}
	newDistance = (round(totalRotations)*circLength)/10.0;
    1e30:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <totalRotations>
    1e34:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <totalRotations+0x1>
    1e38:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <totalRotations+0x2>
    1e3c:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <totalRotations+0x3>
    1e40:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    1e44:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <round>
    1e48:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <circLength>
    1e4c:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <circLength+0x1>
    1e50:	40 91 90 02 	lds	r20, 0x0290	; 0x800290 <circLength+0x2>
    1e54:	50 91 91 02 	lds	r21, 0x0291	; 0x800291 <circLength+0x3>
    1e58:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    1e68:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    1e6c:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <newDistance>
    1e70:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <newDistance+0x1>
    1e74:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <newDistance+0x2>
    1e78:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <newDistance+0x3>
	if (newDistance!=distance)	//when the distance value changes by 100 meters - update the data on the screen
    1e7c:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <distance>
    1e80:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <distance+0x1>
    1e84:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <distance+0x2>
    1e88:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <distance+0x3>
    1e8c:	60 17       	cp	r22, r16
    1e8e:	71 07       	cpc	r23, r17
    1e90:	82 07       	cpc	r24, r18
    1e92:	93 07       	cpc	r25, r19
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <data_monitor+0x16a>
	{
		distance = newDistance;
    1e96:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <distance>
    1e9a:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <distance+0x1>
    1e9e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <distance+0x2>
    1ea2:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <distance+0x3>
		if (!debugMode)main_screen();
    1ea6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    1eaa:	81 11       	cpse	r24, r1
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <data_monitor+0x16a>
    1eae:	0e 94 44 0c 	call	0x1888	; 0x1888 <main_screen>
	}
}
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	08 95       	ret

00001eb8 <eep_operations>:
		tmp += ADCW;
	}
	return tmp/cycles;
}

void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1eb8:	8f 92       	push	r8
    1eba:	9f 92       	push	r9
    1ebc:	af 92       	push	r10
    1ebe:	bf 92       	push	r11
    1ec0:	df 92       	push	r13
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ec 01       	movw	r28, r24
    1ed0:	d6 2e       	mov	r13, r22
    1ed2:	04 2f       	mov	r16, r20
	if (eepAction==EEP_WRITE){
    1ed4:	41 30       	cpi	r20, 0x01	; 1
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <eep_operations+0x22>
    1ed8:	6b c0       	rjmp	.+214    	; 0x1fb0 <eep_operations+0xf8>
		eeprom_update_byte((uint8_t*)eepStartAddress,0);
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1ee0:	0d 2d       	mov	r16, r13
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	c0 0f       	add	r28, r16
    1ee6:	d1 1f       	adc	r29, r17
    1ee8:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <pwmArrow>
    1eec:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <eeprom_update_word>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1ef6:	c0 0f       	add	r28, r16
    1ef8:	d1 1f       	adc	r29, r17
    1efa:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <pwmDial>
    1efe:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    1f02:	ce 01       	movw	r24, r28
    1f04:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1f08:	c0 0f       	add	r28, r16
    1f0a:	d1 1f       	adc	r29, r17
    1f0c:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <scaleMax>
    1f10:	ce 01       	movw	r24, r28
    1f12:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1f16:	c0 0f       	add	r28, r16
    1f18:	d1 1f       	adc	r29, r17
    1f1a:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <stepInterval>
    1f1e:	ce 01       	movw	r24, r28
    1f20:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1f24:	c0 0f       	add	r28, r16
    1f26:	d1 1f       	adc	r29, r17
    1f28:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <smSteps>
    1f2c:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <smSteps+0x1>
    1f30:	ce 01       	movw	r24, r28
    1f32:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1f36:	c0 0f       	add	r28, r16
    1f38:	d1 1f       	adc	r29, r17
    1f3a:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <lcdContrast>
    1f3e:	ce 01       	movw	r24, r28
    1f40:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1f44:	c0 0f       	add	r28, r16
    1f46:	d1 1f       	adc	r29, r17
    1f48:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <magnetsOnWheel>
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1f52:	c0 0f       	add	r28, r16
    1f54:	d1 1f       	adc	r29, r17
    1f56:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <stepMode>
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1f60:	c0 0f       	add	r28, r16
    1f62:	d1 1f       	adc	r29, r17
    1f64:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <wheelDiameter>
    1f68:	50 91 bf 02 	lds	r21, 0x02BF	; 0x8002bf <wheelDiameter+0x1>
    1f6c:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <wheelDiameter+0x2>
    1f70:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <wheelDiameter+0x3>
    1f74:	ce 01       	movw	r24, r28
    1f76:	0e 94 ed 28 	call	0x51da	; 0x51da <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1f7a:	c0 0f       	add	r28, r16
    1f7c:	d1 1f       	adc	r29, r17
    1f7e:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <gearRatio>
    1f82:	50 91 b4 02 	lds	r21, 0x02B4	; 0x8002b4 <gearRatio+0x1>
    1f86:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <gearRatio+0x2>
    1f8a:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <gearRatio+0x3>
    1f8e:	ce 01       	movw	r24, r28
    1f90:	0e 94 ed 28 	call	0x51da	; 0x51da <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1f94:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <degreesPerKmh>
    1f98:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <degreesPerKmh+0x1>
    1f9c:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <degreesPerKmh+0x2>
    1fa0:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <degreesPerKmh+0x3>
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	8c 0f       	add	r24, r28
    1fa8:	9d 1f       	adc	r25, r29
    1faa:	0e 94 ed 28 	call	0x51da	; 0x51da <eeprom_update_dword>
    1fae:	65 c1       	rjmp	.+714    	; 0x227a <eep_operations+0x3c2>
		}
		if(eepAction==EEP_READ){
    1fb0:	41 11       	cpse	r20, r1
    1fb2:	5f c1       	rjmp	.+702    	; 0x2272 <eep_operations+0x3ba>
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fb4:	06 2f       	mov	r16, r22
    1fb6:	10 e0       	ldi	r17, 0x00	; 0
    1fb8:	c0 0f       	add	r28, r16
    1fba:	d1 1f       	adc	r29, r17
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	0e 94 d6 28 	call	0x51ac	; 0x51ac <eeprom_read_word>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	24 e0       	ldi	r18, 0x04	; 4
    1fc6:	92 07       	cpc	r25, r18
    1fc8:	28 f4       	brcc	.+10     	; 0x1fd4 <eep_operations+0x11c>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
		}
		if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fca:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <pwmArrow+0x1>
    1fce:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <pwmArrow>
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <eep_operations+0x128>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	94 e0       	ldi	r25, 0x04	; 4
    1fd8:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <pwmArrow+0x1>
    1fdc:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <pwmArrow>
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fe0:	c0 0f       	add	r28, r16
    1fe2:	d1 1f       	adc	r29, r17
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 d6 28 	call	0x51ac	; 0x51ac <eeprom_read_word>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	34 e0       	ldi	r19, 0x04	; 4
    1fee:	93 07       	cpc	r25, r19
    1ff0:	28 f4       	brcc	.+10     	; 0x1ffc <eep_operations+0x144>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
		}
		if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1ff2:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <pwmDial+0x1>
    1ff6:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <pwmDial>
    1ffa:	06 c0       	rjmp	.+12     	; 0x2008 <eep_operations+0x150>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	94 e0       	ldi	r25, 0x04	; 4
    2000:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <pwmDial+0x1>
    2004:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <pwmDial>
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2008:	c0 0f       	add	r28, r16
    200a:	d1 1f       	adc	r29, r17
    200c:	ce 01       	movw	r24, r28
    200e:	0e 94 c8 28 	call	0x5190	; 0x5190 <eeprom_read_byte>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
    2012:	84 31       	cpi	r24, 0x14	; 20
    2014:	18 f0       	brcs	.+6      	; 0x201c <eep_operations+0x164>
		if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2016:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <scaleMax>
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <eep_operations+0x16a>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
    201c:	8e eb       	ldi	r24, 0xBE	; 190
    201e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <scaleMax>
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2022:	c0 0f       	add	r28, r16
    2024:	d1 1f       	adc	r29, r17
    2026:	ce 01       	movw	r24, r28
    2028:	0e 94 c8 28 	call	0x5190	; 0x5190 <eeprom_read_byte>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    202c:	82 33       	cpi	r24, 0x32	; 50
    202e:	18 f0       	brcs	.+6      	; 0x2036 <eep_operations+0x17e>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2030:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <stepInterval>
    2034:	03 c0       	rjmp	.+6      	; 0x203c <eep_operations+0x184>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    2036:	86 e9       	ldi	r24, 0x96	; 150
    2038:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <stepInterval>
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    203c:	c0 0f       	add	r28, r16
    203e:	d1 1f       	adc	r29, r17
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 d6 28 	call	0x51ac	; 0x51ac <eeprom_read_word>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    2046:	9c 01       	movw	r18, r24
    2048:	20 51       	subi	r18, 0x10	; 16
    204a:	31 09       	sbc	r19, r1
    204c:	21 38       	cpi	r18, 0x81	; 129
    204e:	31 40       	sbci	r19, 0x01	; 1
    2050:	28 f4       	brcc	.+10     	; 0x205c <eep_operations+0x1a4>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    2052:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <smSteps+0x1>
    2056:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <smSteps>
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <eep_operations+0x1b0>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    205c:	80 e6       	ldi	r24, 0x60	; 96
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <smSteps+0x1>
    2064:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <smSteps>
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2068:	c0 0f       	add	r28, r16
    206a:	d1 1f       	adc	r29, r17
    206c:	ce 01       	movw	r24, r28
    206e:	0e 94 c8 28 	call	0x5190	; 0x5190 <eeprom_read_byte>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    2072:	82 33       	cpi	r24, 0x32	; 50
    2074:	18 f0       	brcs	.+6      	; 0x207c <eep_operations+0x1c4>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2076:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <lcdContrast>
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <eep_operations+0x1ca>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    207c:	86 e9       	ldi	r24, 0x96	; 150
    207e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <lcdContrast>
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2082:	c0 0f       	add	r28, r16
    2084:	d1 1f       	adc	r29, r17
    2086:	ce 01       	movw	r24, r28
    2088:	0e 94 c8 28 	call	0x5190	; 0x5190 <eeprom_read_byte>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    208c:	9f ef       	ldi	r25, 0xFF	; 255
    208e:	98 0f       	add	r25, r24
    2090:	90 31       	cpi	r25, 0x10	; 16
    2092:	18 f4       	brcc	.+6      	; 0x209a <eep_operations+0x1e2>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2094:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <magnetsOnWheel>
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <eep_operations+0x1e8>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    209a:	86 e0       	ldi	r24, 0x06	; 6
    209c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <magnetsOnWheel>
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    20a0:	c0 0f       	add	r28, r16
    20a2:	d1 1f       	adc	r29, r17
    20a4:	ce 01       	movw	r24, r28
    20a6:	0e 94 c8 28 	call	0x5190	; 0x5190 <eeprom_read_byte>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    20aa:	9f ef       	ldi	r25, 0xFF	; 255
    20ac:	98 0f       	add	r25, r24
    20ae:	92 30       	cpi	r25, 0x02	; 2
    20b0:	18 f4       	brcc	.+6      	; 0x20b8 <eep_operations+0x200>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    20b2:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepMode>
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <eep_operations+0x206>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepMode>
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    20be:	c0 0f       	add	r28, r16
    20c0:	d1 1f       	adc	r29, r17
    20c2:	ce 01       	movw	r24, r28
    20c4:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <eeprom_read_dword>
    20c8:	4b 01       	movw	r8, r22
    20ca:	5c 01       	movw	r10, r24
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	50 e4       	ldi	r21, 0x40	; 64
    20d4:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__gesf2>
    20d8:	18 16       	cp	r1, r24
    20da:	9c f0       	brlt	.+38     	; 0x2102 <eep_operations+0x24a>
    20dc:	2a e9       	ldi	r18, 0x9A	; 154
    20de:	39 e9       	ldi	r19, 0x99	; 153
    20e0:	49 e9       	ldi	r20, 0x99	; 153
    20e2:	5e e3       	ldi	r21, 0x3E	; 62
    20e4:	c5 01       	movw	r24, r10
    20e6:	b4 01       	movw	r22, r8
    20e8:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	4c f0       	brlt	.+18     	; 0x2102 <eep_operations+0x24a>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    20f0:	80 92 be 02 	sts	0x02BE, r8	; 0x8002be <wheelDiameter>
    20f4:	90 92 bf 02 	sts	0x02BF, r9	; 0x8002bf <wheelDiameter+0x1>
    20f8:	a0 92 c0 02 	sts	0x02C0, r10	; 0x8002c0 <wheelDiameter+0x2>
    20fc:	b0 92 c1 02 	sts	0x02C1, r11	; 0x8002c1 <wheelDiameter+0x3>
    2100:	0c c0       	rjmp	.+24     	; 0x211a <eep_operations+0x262>
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    2102:	83 e3       	ldi	r24, 0x33	; 51
    2104:	93 e3       	ldi	r25, 0x33	; 51
    2106:	a3 e3       	ldi	r26, 0x33	; 51
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <wheelDiameter>
    210e:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <wheelDiameter+0x1>
    2112:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <wheelDiameter+0x2>
    2116:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <wheelDiameter+0x3>
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    211a:	c0 0f       	add	r28, r16
    211c:	d1 1f       	adc	r29, r17
    211e:	ce 01       	movw	r24, r28
    2120:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <eeprom_read_dword>
    2124:	4b 01       	movw	r8, r22
    2126:	5c 01       	movw	r10, r24
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__gesf2>
    2134:	18 16       	cp	r1, r24
    2136:	9c f0       	brlt	.+38     	; 0x215e <eep_operations+0x2a6>
    2138:	2d ec       	ldi	r18, 0xCD	; 205
    213a:	3c ec       	ldi	r19, 0xCC	; 204
    213c:	4c ec       	ldi	r20, 0xCC	; 204
    213e:	5d e3       	ldi	r21, 0x3D	; 61
    2140:	c5 01       	movw	r24, r10
    2142:	b4 01       	movw	r22, r8
    2144:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    2148:	88 23       	and	r24, r24
    214a:	4c f0       	brlt	.+18     	; 0x215e <eep_operations+0x2a6>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    214c:	80 92 b3 02 	sts	0x02B3, r8	; 0x8002b3 <gearRatio>
    2150:	90 92 b4 02 	sts	0x02B4, r9	; 0x8002b4 <gearRatio+0x1>
    2154:	a0 92 b5 02 	sts	0x02B5, r10	; 0x8002b5 <gearRatio+0x2>
    2158:	b0 92 b6 02 	sts	0x02B6, r11	; 0x8002b6 <gearRatio+0x3>
    215c:	0c c0       	rjmp	.+24     	; 0x2176 <eep_operations+0x2be>
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e8       	ldi	r26, 0x80	; 128
    2164:	bf e3       	ldi	r27, 0x3F	; 63
    2166:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <gearRatio>
    216a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <gearRatio+0x1>
    216e:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <gearRatio+0x2>
    2172:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <gearRatio+0x3>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2176:	c8 01       	movw	r24, r16
    2178:	8c 0f       	add	r24, r28
    217a:	9d 1f       	adc	r25, r29
    217c:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <eeprom_read_dword>
    2180:	4b 01       	movw	r8, r22
    2182:	5c 01       	movw	r10, r24
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 ea       	ldi	r20, 0xA0	; 160
    218a:	50 e4       	ldi	r21, 0x40	; 64
    218c:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__gesf2>
    2190:	18 16       	cp	r1, r24
    2192:	5c f0       	brlt	.+22     	; 0x21aa <eep_operations+0x2f2>
    2194:	2d ec       	ldi	r18, 0xCD	; 205
    2196:	3c ec       	ldi	r19, 0xCC	; 204
    2198:	4c ec       	ldi	r20, 0xCC	; 204
    219a:	5d e3       	ldi	r21, 0x3D	; 61
    219c:	c5 01       	movw	r24, r10
    219e:	b4 01       	movw	r22, r8
    21a0:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	0c f0       	brlt	.+2      	; 0x21aa <eep_operations+0x2f2>
    21a8:	5b c0       	rjmp	.+182    	; 0x2260 <eep_operations+0x3a8>
    21aa:	83 e3       	ldi	r24, 0x33	; 51
    21ac:	93 e3       	ldi	r25, 0x33	; 51
    21ae:	a3 ea       	ldi	r26, 0xA3	; 163
    21b0:	bf e3       	ldi	r27, 0x3F	; 63
    21b2:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <degreesPerKmh>
    21b6:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <degreesPerKmh+0x1>
    21ba:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <degreesPerKmh+0x2>
    21be:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <degreesPerKmh+0x3>
    21c2:	5b c0       	rjmp	.+182    	; 0x227a <eep_operations+0x3c2>
    21c4:	1f 5f       	subi	r17, 0xFF	; 255
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <eep_operations+0x316>
	}
	if (eepAction==EEP_ODOMETER_READ){
    21c8:	11 e0       	ldi	r17, 0x01	; 1
		uint32_t tempTotalRotations = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempTotalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    21ca:	ed 2c       	mov	r14, r13
    21cc:	f1 2c       	mov	r15, r1
    21ce:	2f ef       	ldi	r18, 0xFF	; 255
    21d0:	21 0f       	add	r18, r17
    21d2:	2e 9d       	mul	r18, r14
    21d4:	c0 01       	movw	r24, r0
    21d6:	2f 9d       	mul	r18, r15
    21d8:	90 0d       	add	r25, r0
    21da:	11 24       	eor	r1, r1
    21dc:	8c 0f       	add	r24, r28
    21de:	9d 1f       	adc	r25, r29
    21e0:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <eeprom_read_dword>
			if(tempTotalRotations>totalRotations){	//finding the latest record (the highest value)
    21e4:	80 90 a2 02 	lds	r8, 0x02A2	; 0x8002a2 <totalRotations>
    21e8:	90 90 a3 02 	lds	r9, 0x02A3	; 0x8002a3 <totalRotations+0x1>
    21ec:	a0 90 a4 02 	lds	r10, 0x02A4	; 0x8002a4 <totalRotations+0x2>
    21f0:	b0 90 a5 02 	lds	r11, 0x02A5	; 0x8002a5 <totalRotations+0x3>
    21f4:	86 16       	cp	r8, r22
    21f6:	97 06       	cpc	r9, r23
    21f8:	a8 06       	cpc	r10, r24
    21fa:	b9 06       	cpc	r11, r25
    21fc:	78 f4       	brcc	.+30     	; 0x221c <eep_operations+0x364>
				totalRotations = tempTotalRotations;
    21fe:	60 93 a2 02 	sts	0x02A2, r22	; 0x8002a2 <totalRotations>
    2202:	70 93 a3 02 	sts	0x02A3, r23	; 0x8002a3 <totalRotations+0x1>
    2206:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <totalRotations+0x2>
    220a:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <totalRotations+0x3>
				odometerCurrentAddress = i + 1;	//address for the nexy record
    220e:	10 93 7d 02 	sts	0x027D, r17	; 0x80027d <odometerCurrentAddress>
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2212:	15 30       	cpi	r17, 0x05	; 5
    2214:	b8 f2       	brcs	.-82     	; 0x21c4 <eep_operations+0x30c>
    2216:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <odometerCurrentAddress>
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <eep_operations+0x36a>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
		uint32_t tempTotalRotations = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    221c:	15 30       	cpi	r17, 0x05	; 5
    221e:	90 f2       	brcs	.-92     	; 0x21c4 <eep_operations+0x30c>
    2220:	2c c0       	rjmp	.+88     	; 0x227a <eep_operations+0x3c2>
				odometerCurrentAddress = i + 1;	//address for the nexy record
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
    2222:	03 30       	cpi	r16, 0x03	; 3
    2224:	51 f5       	brne	.+84     	; 0x227a <eep_operations+0x3c2>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
    2226:	40 91 a2 02 	lds	r20, 0x02A2	; 0x8002a2 <totalRotations>
    222a:	50 91 a3 02 	lds	r21, 0x02A3	; 0x8002a3 <totalRotations+0x1>
    222e:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <totalRotations+0x2>
    2232:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <totalRotations+0x3>
    2236:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <odometerCurrentAddress>
    223a:	9e 01       	movw	r18, r28
    223c:	8d 9d       	mul	r24, r13
    223e:	20 0d       	add	r18, r0
    2240:	31 1d       	adc	r19, r1
    2242:	11 24       	eor	r1, r1
    2244:	c9 01       	movw	r24, r18
    2246:	0e 94 ff 28 	call	0x51fe	; 0x51fe <eeprom_write_dword>
			odometerCurrentAddress++;
    224a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <odometerCurrentAddress>
    224e:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2250:	85 30       	cpi	r24, 0x05	; 5
    2252:	18 f4       	brcc	.+6      	; 0x225a <eep_operations+0x3a2>
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
    2254:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <odometerCurrentAddress>
    2258:	10 c0       	rjmp	.+32     	; 0x227a <eep_operations+0x3c2>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    225a:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <odometerCurrentAddress>
	}
}
    225e:	0d c0       	rjmp	.+26     	; 0x227a <eep_operations+0x3c2>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2260:	80 92 ae 02 	sts	0x02AE, r8	; 0x8002ae <degreesPerKmh>
    2264:	90 92 af 02 	sts	0x02AF, r9	; 0x8002af <degreesPerKmh+0x1>
    2268:	a0 92 b0 02 	sts	0x02B0, r10	; 0x8002b0 <degreesPerKmh+0x2>
    226c:	b0 92 b1 02 	sts	0x02B1, r11	; 0x8002b1 <degreesPerKmh+0x3>
    2270:	04 c0       	rjmp	.+8      	; 0x227a <eep_operations+0x3c2>
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
    2272:	42 30       	cpi	r20, 0x02	; 2
    2274:	09 f4       	brne	.+2      	; 0x2278 <eep_operations+0x3c0>
    2276:	a8 cf       	rjmp	.-176    	; 0x21c8 <eep_operations+0x310>
    2278:	d4 cf       	rjmp	.-88     	; 0x2222 <eep_operations+0x36a>
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	ff 90       	pop	r15
    2284:	ef 90       	pop	r14
    2286:	df 90       	pop	r13
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	08 95       	ret

00002292 <presets>:
	 stepInterval = STEP_INTERVAL_DEFAULT;
	 smSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
	 stepMode = STEP_MODE_DEFAULT;
}

void presets (void){
    2292:	cf 92       	push	r12
    2294:	df 92       	push	r13
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	cf 93       	push	r28
	DDRA|=_BV(0); //ENABLE 2
    229c:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA|=_BV(1); //PHASE 2
    229e:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA|=_BV(2); //PHASE 1
    22a0:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA|=_BV(3); //ENABLE 1
    22a2:	d3 9a       	sbi	0x1a, 3	; 26
	DDRD|=_BV(4);//PWM DIAL LIGHT
    22a4:	8c 9a       	sbi	0x11, 4	; 17
	DDRD|=_BV(5);//PWM ARROW LIGHT
    22a6:	8d 9a       	sbi	0x11, 5	; 17
	PORTA|=_BV(3);//ENABLE 1 high (disabled)
    22a8:	db 9a       	sbi	0x1b, 3	; 27
	PORTA|=_BV(0);//ENABLE 2 high (disabled)
    22aa:	d8 9a       	sbi	0x1b, 0	; 27
	PORTB|=_BV(5);//internal pull-up for external buttons
    22ac:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=_BV(6);
    22ae:	c6 9a       	sbi	0x18, 6	; 24
	PORTB|=_BV(7);
    22b0:	c7 9a       	sbi	0x18, 7	; 24
	//=======================ADC
	ADCSRA |= _BV(ADEN);
    22b2:	37 9a       	sbi	0x06, 7	; 6
	//=======================
	ADCSRA |= _BV(ADPS0);		//
    22b4:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    22b6:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |= _BV(ADPS2);		//
    22b8:	32 9a       	sbi	0x06, 2	; 6
	//=======================
	// reading data from EEPROM
	uint8_t firstEepRead;
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    22ba:	88 e0       	ldi	r24, 0x08	; 8
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 c8 28 	call	0x5190	; 0x5190 <eeprom_read_byte>
	if (firstEepRead){
    22c2:	88 23       	and	r24, r24
    22c4:	89 f0       	breq	.+34     	; 0x22e8 <presets+0x56>
		default_values();
    22c6:	0e 94 09 0b 	call	0x1612	; 0x1612 <default_values>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	64 e0       	ldi	r22, 0x04	; 4
    22ce:	88 e0       	ldi	r24, 0x08	; 8
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    22d6:	c5 e0       	ldi	r28, 0x05	; 5
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    22d8:	43 e0       	ldi	r20, 0x03	; 3
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	80 e8       	ldi	r24, 0x80	; 128
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    22e4:	c1 50       	subi	r28, 0x01	; 1
	uint8_t firstEepRead;
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		default_values();
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    22e6:	c1 f7       	brne	.-16     	; 0x22d8 <presets+0x46>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
		}
	}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	88 e0       	ldi	r24, 0x08	; 8
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    22f4:	42 e0       	ldi	r20, 0x02	; 2
    22f6:	64 e0       	ldi	r22, 0x04	; 4
    22f8:	80 e8       	ldi	r24, 0x80	; 128
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
	circLength = gearRatio * wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    2300:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <wheelDiameter>
    2304:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <wheelDiameter+0x1>
    2308:	40 91 c0 02 	lds	r20, 0x02C0	; 0x8002c0 <wheelDiameter+0x2>
    230c:	50 91 c1 02 	lds	r21, 0x02C1	; 0x8002c1 <wheelDiameter+0x3>
    2310:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <gearRatio>
    2314:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <gearRatio+0x1>
    2318:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <gearRatio+0x2>
    231c:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <gearRatio+0x3>
    2320:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    2324:	2b ed       	ldi	r18, 0xDB	; 219
    2326:	3f e0       	ldi	r19, 0x0F	; 15
    2328:	49 e4       	ldi	r20, 0x49	; 73
    232a:	50 e4       	ldi	r21, 0x40	; 64
    232c:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    2330:	6b 01       	movw	r12, r22
    2332:	7c 01       	movw	r14, r24
    2334:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <magnetsOnWheel>
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__floatsisf>
    2342:	9b 01       	movw	r18, r22
    2344:	ac 01       	movw	r20, r24
    2346:	c7 01       	movw	r24, r14
    2348:	b6 01       	movw	r22, r12
    234a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    234e:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <circLength>
    2352:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <circLength+0x1>
    2356:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <circLength+0x2>
    235a:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <circLength+0x3>
	timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, Timer2 prescaler=256)
    235e:	8d eb       	ldi	r24, 0xBD	; 189
    2360:	97 e3       	ldi	r25, 0x37	; 55
    2362:	a6 e8       	ldi	r26, 0x86	; 134
    2364:	b7 e3       	ldi	r27, 0x37	; 55
    2366:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <timePerTic>
    236a:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <timePerTic+0x1>
    236e:	a0 93 94 02 	sts	0x0294, r26	; 0x800294 <timePerTic+0x2>
    2372:	b0 93 95 02 	sts	0x0295, r27	; 0x800295 <timePerTic+0x3>
	TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);//Timer2 is used to measure time between Hall sensor triggering
    2376:	85 b5       	in	r24, 0x25	; 37
    2378:	8e 60       	ori	r24, 0x0E	; 14
    237a:	85 bd       	out	0x25, r24	; 37
	OCR2 = TIC-1; //upper limit of Timer2
    237c:	8e ef       	ldi	r24, 0xFE	; 254
    237e:	83 bd       	out	0x23, r24	; 35
	//dial and arrow light PWM (Timer1)
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);	//Fast PWM 10-bit
    2380:	83 ea       	ldi	r24, 0xA3	; 163
    2382:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);	//prescaler = 64
    2384:	8b e0       	ldi	r24, 0x0B	; 11
    2386:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    2388:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <pwmArrow>
    238c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    2390:	9b bd       	out	0x2b, r25	; 43
    2392:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    2394:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <pwmDial>
    2398:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    239c:	99 bd       	out	0x29, r25	; 41
    239e:	88 bd       	out	0x28, r24	; 40
	//
	kmhPerStep = (360.0/(smSteps*stepMode))/degreesPerKmh;
    23a0:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <stepMode>
    23a4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <smSteps>
    23a8:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <smSteps+0x1>
    23ac:	28 9f       	mul	r18, r24
    23ae:	b0 01       	movw	r22, r0
    23b0:	29 9f       	mul	r18, r25
    23b2:	70 0d       	add	r23, r0
    23b4:	11 24       	eor	r1, r1
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    23be:	9b 01       	movw	r18, r22
    23c0:	ac 01       	movw	r20, r24
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	84 eb       	ldi	r24, 0xB4	; 180
    23c8:	93 e4       	ldi	r25, 0x43	; 67
    23ca:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    23ce:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <degreesPerKmh>
    23d2:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <degreesPerKmh+0x1>
    23d6:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <degreesPerKmh+0x2>
    23da:	50 91 b1 02 	lds	r21, 0x02B1	; 0x8002b1 <degreesPerKmh+0x3>
    23de:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    23e2:	60 93 86 02 	sts	0x0286, r22	; 0x800286 <kmhPerStep>
    23e6:	70 93 87 02 	sts	0x0287, r23	; 0x800287 <kmhPerStep+0x1>
    23ea:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <kmhPerStep+0x2>
    23ee:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <kmhPerStep+0x3>
	//display initialization
	GLCD_Setup();
    23f2:	0e 94 92 1c 	call	0x3924	; 0x3924 <GLCD_Setup>
	GLCD_Clear();
    23f6:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
	GLCD_SetContrast(lcdContrast);
    23fa:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <lcdContrast>
    23fe:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <GLCD_SetContrast>
	GLCD_Render();
    2402:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
	sei();
    2406:	78 94       	sei
	if (!arrowCalibrated) arrow_calibration();
    2408:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <arrowCalibrated>
    240c:	81 11       	cpse	r24, r1
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <presets+0x182>
    2410:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <arrow_calibration>
	MCUCR|= _BV(ISC11); //External falling edge interrupt INT1 (Hall sensor)
    2414:	85 b7       	in	r24, 0x35	; 53
    2416:	88 60       	ori	r24, 0x08	; 8
    2418:	85 bf       	out	0x35, r24	; 53
	GICR|=_BV(INT1); //External Interrupt Enable INT1
    241a:	8b b7       	in	r24, 0x3b	; 59
    241c:	80 68       	ori	r24, 0x80	; 128
    241e:	8b bf       	out	0x3b, r24	; 59
}
    2420:	cf 91       	pop	r28
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	08 95       	ret

0000242c <calculate_speed>:
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
		TIMSK|=_BV(OCIE0);
	}
}

void calculate_speed(){
    242c:	cf 93       	push	r28
	
	if(speedTimerRough>speedTimerRoughTemp+10){
    242e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <speedTimerRoughTemp>
    2432:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <speedTimerRoughTemp+0x1>
    2436:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <speedTimerRough>
    243a:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <speedTimerRough+0x1>
    243e:	0a 96       	adiw	r24, 0x0a	; 10
    2440:	82 17       	cp	r24, r18
    2442:	93 07       	cpc	r25, r19
    2444:	88 f4       	brcc	.+34     	; 0x2468 <calculate_speed+0x3c>
			speedTimerPrecise = speedTimerRough*TIC;
    2446:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <speedTimerRough>
    244a:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <speedTimerRough+0x1>
    244e:	af ef       	ldi	r26, 0xFF	; 255
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__umulhisi3>
    2456:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <speedTimerPrecise>
    245a:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <speedTimerPrecise+0x1>
    245e:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <speedTimerPrecise+0x2>
    2462:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <speedTimerPrecise+0x3>
    2466:	18 c0       	rjmp	.+48     	; 0x2498 <calculate_speed+0x6c>
	}else{
			speedTimerPrecise = (speedTimerRoughTemp*TIC) + tempTCNT;
    2468:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <speedTimerRoughTemp>
    246c:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <speedTimerRoughTemp+0x1>
    2470:	40 91 a6 02 	lds	r20, 0x02A6	; 0x8002a6 <tempTCNT>
    2474:	af ef       	ldi	r26, 0xFF	; 255
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__umulhisi3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	84 0f       	add	r24, r20
    2482:	91 1d       	adc	r25, r1
    2484:	a1 1d       	adc	r26, r1
    2486:	b1 1d       	adc	r27, r1
    2488:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <speedTimerPrecise>
    248c:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <speedTimerPrecise+0x1>
    2490:	a0 93 9c 02 	sts	0x029C, r26	; 0x80029c <speedTimerPrecise+0x2>
    2494:	b0 93 9d 02 	sts	0x029D, r27	; 0x80029d <speedTimerPrecise+0x3>
	}
	
	if (speedTimerPrecise){
    2498:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <speedTimerPrecise>
    249c:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <speedTimerPrecise+0x1>
    24a0:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <speedTimerPrecise+0x2>
    24a4:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <speedTimerPrecise+0x3>
    24a8:	61 15       	cp	r22, r1
    24aa:	71 05       	cpc	r23, r1
    24ac:	81 05       	cpc	r24, r1
    24ae:	91 05       	cpc	r25, r1
    24b0:	b1 f1       	breq	.+108    	; 0x251e <calculate_speed+0xf2>
				frequency = 1.0/(timePerTic*speedTimerPrecise);
    24b2:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    24b6:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <timePerTic>
    24ba:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <timePerTic+0x1>
    24be:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <timePerTic+0x2>
    24c2:	50 91 95 02 	lds	r21, 0x0295	; 0x800295 <timePerTic+0x3>
    24c6:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    24ca:	9b 01       	movw	r18, r22
    24cc:	ac 01       	movw	r20, r24
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	80 e8       	ldi	r24, 0x80	; 128
    24d4:	9f e3       	ldi	r25, 0x3F	; 63
    24d6:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    24da:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <frequency>
    24de:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <frequency+0x1>
    24e2:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <frequency+0x2>
    24e6:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <frequency+0x3>
				speedKmh = frequency*3.6*circLength;
    24ea:	26 e6       	ldi	r18, 0x66	; 102
    24ec:	36 e6       	ldi	r19, 0x66	; 102
    24ee:	46 e6       	ldi	r20, 0x66	; 102
    24f0:	50 e4       	ldi	r21, 0x40	; 64
    24f2:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    24f6:	9b 01       	movw	r18, r22
    24f8:	ac 01       	movw	r20, r24
    24fa:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <circLength>
    24fe:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <circLength+0x1>
    2502:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <circLength+0x2>
    2506:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <circLength+0x3>
    250a:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    250e:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <speedKmh>
    2512:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <speedKmh+0x1>
    2516:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <speedKmh+0x2>
    251a:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <speedKmh+0x3>
	}
	if(speedTimerRough>(MAX_PERIOD/magnetsOnWheel)){//if Hall sensor was not triggered for too long (MIN_INTERVAL*TIC*0.16us) it means that vehicle does not move
    251e:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <speedTimerRough>
    2522:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <speedTimerRough+0x1>
    2526:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <magnetsOnWheel>
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	8c ed       	ldi	r24, 0xDC	; 220
    252e:	95 e0       	ldi	r25, 0x05	; 5
    2530:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <__divmodhi4>
    2534:	62 17       	cp	r22, r18
    2536:	73 07       	cpc	r23, r19
    2538:	80 f5       	brcc	.+96     	; 0x259a <calculate_speed+0x16e>
				TIMSK&=~_BV(OCIE2);
    253a:	89 b7       	in	r24, 0x39	; 57
    253c:	8f 77       	andi	r24, 0x7F	; 127
    253e:	89 bf       	out	0x39, r24	; 57
				TCNT2 = 0;
    2540:	14 bc       	out	0x24, r1	; 36
				speedTimerRough = 0;
    2542:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <speedTimerRough+0x1>
    2546:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <speedTimerRough>
				speedTimerRoughTemp = 0;
    254a:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <speedTimerRoughTemp+0x1>
    254e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <speedTimerRoughTemp>
				speedTimerPrecise = 0;
    2552:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <speedTimerPrecise>
    2556:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <speedTimerPrecise+0x1>
    255a:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <speedTimerPrecise+0x2>
    255e:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <speedTimerPrecise+0x3>
				speedKmh = 0;
    2562:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <speedKmh>
    2566:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <speedKmh+0x1>
    256a:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <speedKmh+0x2>
    256e:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <speedKmh+0x3>
				firstMeasure = 0;
    2572:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <firstMeasure>
				frequency = 0;
    2576:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <frequency>
    257a:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <frequency+0x1>
    257e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <frequency+0x2>
    2582:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <frequency+0x3>
				tempTCNT = 0;
    2586:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <tempTCNT>
				cli();
    258a:	f8 94       	cli
				eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    258c:	43 e0       	ldi	r20, 0x03	; 3
    258e:	64 e0       	ldi	r22, 0x04	; 4
    2590:	80 e8       	ldi	r24, 0x80	; 128
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
				sei();
    2598:	78 94       	sei
	}
	if (speedKmh>scaleMax)speedKmh = scaleMax;
    259a:	c0 91 ab 02 	lds	r28, 0x02AB	; 0x8002ab <scaleMax>
    259e:	6c 2f       	mov	r22, r28
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__floatsisf>
    25aa:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <speedKmh>
    25ae:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <speedKmh+0x1>
    25b2:	40 91 8c 02 	lds	r20, 0x028C	; 0x80028c <speedKmh+0x2>
    25b6:	50 91 8d 02 	lds	r21, 0x028D	; 0x80028d <speedKmh+0x3>
    25ba:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    25be:	88 23       	and	r24, r24
    25c0:	74 f4       	brge	.+28     	; 0x25de <calculate_speed+0x1b2>
    25c2:	6c 2f       	mov	r22, r28
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    25ce:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <speedKmh>
    25d2:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <speedKmh+0x1>
    25d6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <speedKmh+0x2>
    25da:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <speedKmh+0x3>
}
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <set_value>:
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}

uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    25e2:	2f 92       	push	r2
    25e4:	3f 92       	push	r3
    25e6:	4f 92       	push	r4
    25e8:	5f 92       	push	r5
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	2e 97       	sbiw	r28, 0x0e	; 14
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	5c 01       	movw	r10, r24
    2618:	4b 01       	movw	r8, r22
    261a:	5a 87       	std	Y+10, r21	; 0x0a
    261c:	49 87       	std	Y+9, r20	; 0x09
    261e:	d2 2e       	mov	r13, r18

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	48 e0       	ldi	r20, 0x08	; 8
    2624:	65 e0       	ldi	r22, 0x05	; 5
    2626:	80 ea       	ldi	r24, 0xA0	; 160
    2628:	9b e0       	ldi	r25, 0x0B	; 11
    262a:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <GLCD_SetFont>
	GLCD_Clear();
    262e:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
	GLCD_GotoLine(1);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(10);
    2638:	8a e0       	ldi	r24, 0x0A	; 10
    263a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString(text);
    263e:	c8 01       	movw	r24, r16
    2640:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoXY(90,24);
    2644:	68 e1       	ldi	r22, 0x18	; 24
    2646:	8a e5       	ldi	r24, 0x5A	; 90
    2648:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	GLCD_PrintString("Edit");
    264c:	8c e6       	ldi	r24, 0x6C	; 108
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoXY(90,36);
    2654:	64 e2       	ldi	r22, 0x24	; 36
    2656:	8a e5       	ldi	r24, 0x5A	; 90
    2658:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	GLCD_PrintString("Back");
    265c:	81 e7       	ldi	r24, 0x71	; 113
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoXY(90,48);
    2664:	60 e3       	ldi	r22, 0x30	; 48
    2666:	8a e5       	ldi	r24, 0x5A	; 90
    2668:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	GLCD_PrintString("Save");
    266c:	86 e7       	ldi	r24, 0x76	; 118
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	
	if (tens){
    2674:	dd 20       	and	r13, r13
    2676:	09 f4       	brne	.+2      	; 0x267a <set_value+0x98>
    2678:	68 c0       	rjmp	.+208    	; 0x274a <set_value+0x168>
		uint16_t devider = 1;
		for (int8_t i = 0;i<tens;i++){devider*=10;}
    267a:	2d 2d       	mov	r18, r13
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	12 16       	cp	r1, r18
    2680:	13 06       	cpc	r1, r19
    2682:	bc f4       	brge	.+46     	; 0x26b2 <set_value+0xd0>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	01 e0       	ldi	r16, 0x01	; 1
    2688:	10 e0       	ldi	r17, 0x00	; 0
    268a:	a8 01       	movw	r20, r16
    268c:	44 0f       	add	r20, r20
    268e:	55 1f       	adc	r21, r21
    2690:	00 0f       	add	r16, r16
    2692:	11 1f       	adc	r17, r17
    2694:	00 0f       	add	r16, r16
    2696:	11 1f       	adc	r17, r17
    2698:	00 0f       	add	r16, r16
    269a:	11 1f       	adc	r17, r17
    269c:	04 0f       	add	r16, r20
    269e:	15 1f       	adc	r17, r21
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	48 2f       	mov	r20, r24
    26a4:	08 2e       	mov	r0, r24
    26a6:	00 0c       	add	r0, r0
    26a8:	55 0b       	sbc	r21, r21
    26aa:	42 17       	cp	r20, r18
    26ac:	53 07       	cpc	r21, r19
    26ae:	6c f3       	brlt	.-38     	; 0x268a <set_value+0xa8>
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <set_value+0xd4>
    26b2:	01 e0       	ldi	r16, 0x01	; 1
    26b4:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_GotoXY(6,41);
    26b6:	69 e2       	ldi	r22, 0x29	; 41
    26b8:	86 e0       	ldi	r24, 0x06	; 6
    26ba:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_PrintString("min:");
    26be:	8b e7       	ldi	r24, 0x7B	; 123
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_PrintDouble(minValue/(double)devider,devider);
    26c6:	28 01       	movw	r4, r16
    26c8:	61 2c       	mov	r6, r1
    26ca:	71 2c       	mov	r7, r1
    26cc:	c3 01       	movw	r24, r6
    26ce:	b2 01       	movw	r22, r4
    26d0:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    26d4:	6d 83       	std	Y+5, r22	; 0x05
    26d6:	7e 83       	std	Y+6, r23	; 0x06
    26d8:	8f 83       	std	Y+7, r24	; 0x07
    26da:	98 87       	std	Y+8, r25	; 0x08
    26dc:	b4 01       	movw	r22, r8
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    26e6:	2d 81       	ldd	r18, Y+5	; 0x05
    26e8:	3e 81       	ldd	r19, Y+6	; 0x06
    26ea:	4f 81       	ldd	r20, Y+7	; 0x07
    26ec:	58 85       	ldd	r21, Y+8	; 0x08
    26ee:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    26f2:	a3 01       	movw	r20, r6
    26f4:	92 01       	movw	r18, r4
    26f6:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
		GLCD_GotoXY(6,51);
    26fa:	63 e3       	ldi	r22, 0x33	; 51
    26fc:	86 e0       	ldi	r24, 0x06	; 6
    26fe:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_PrintString("max:");
    2702:	80 e8       	ldi	r24, 0x80	; 128
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_PrintDouble(maxValue/(double)devider,devider);
    270a:	b5 01       	movw	r22, r10
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    2714:	2d 81       	ldd	r18, Y+5	; 0x05
    2716:	3e 81       	ldd	r19, Y+6	; 0x06
    2718:	4f 81       	ldd	r20, Y+7	; 0x07
    271a:	58 85       	ldd	r21, Y+8	; 0x08
    271c:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    2720:	a3 01       	movw	r20, r6
    2722:	92 01       	movw	r18, r4
    2724:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2728:	29 85       	ldd	r18, Y+9	; 0x09
    272a:	2b 87       	std	Y+11, r18	; 0x0b
    272c:	3a 85       	ldd	r19, Y+10	; 0x0a
    272e:	3c 87       	std	Y+12, r19	; 0x0c
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2730:	ad 86       	std	Y+13, r10	; 0x0d
    2732:	be 86       	std	Y+14, r11	; 0x0e
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2734:	0f 2e       	mov	r0, r31
    2736:	fd e0       	ldi	r31, 0x0D	; 13
    2738:	5f 2e       	mov	r5, r31
    273a:	f0 2d       	mov	r31, r0
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
	GLCD_PrintInteger(digitsArr[digitIndex]);
		if ((digitIndex==tens)&&(tens)){
    273c:	ed 2c       	mov	r14, r13
    273e:	f1 2c       	mov	r15, r1
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2740:	0f 2e       	mov	r0, r31
    2742:	f3 ef       	ldi	r31, 0xF3	; 243
    2744:	cf 2e       	mov	r12, r31
    2746:	f0 2d       	mov	r31, r0
    2748:	1b c0       	rjmp	.+54     	; 0x2780 <set_value+0x19e>
		GLCD_PrintDouble(minValue/(double)devider,devider);
		GLCD_GotoXY(6,51);
		GLCD_PrintString("max:");
		GLCD_PrintDouble(maxValue/(double)devider,devider);
		}else{
		GLCD_GotoXY(6,41);
    274a:	69 e2       	ldi	r22, 0x29	; 41
    274c:	86 e0       	ldi	r24, 0x06	; 6
    274e:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_PrintString("min:");
    2752:	8b e7       	ldi	r24, 0x7B	; 123
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_PrintInteger(minValue);
    275a:	b4 01       	movw	r22, r8
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		GLCD_GotoXY(6,51);
    2764:	63 e3       	ldi	r22, 0x33	; 51
    2766:	86 e0       	ldi	r24, 0x06	; 6
    2768:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		GLCD_PrintString("max:");
    276c:	80 e8       	ldi	r24, 0x80	; 128
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_PrintInteger(maxValue);
    2774:	b5 01       	movw	r22, r10
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
    277e:	d4 cf       	rjmp	.-88     	; 0x2728 <set_value+0x146>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	89 2b       	or	r24, r25
    2786:	99 f0       	breq	.+38     	; 0x27ae <set_value+0x1cc>
    2788:	2b 85       	ldd	r18, Y+11	; 0x0b
    278a:	3c 85       	ldd	r19, Y+12	; 0x0c
    278c:	00 e0       	ldi	r16, 0x00	; 0
		{
		   tempValue = tempValue / 10;
    278e:	ad ec       	ldi	r26, 0xCD	; 205
    2790:	bc ec       	ldi	r27, 0xCC	; 204
    2792:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__umulhisi3>
    2796:	9c 01       	movw	r18, r24
    2798:	36 95       	lsr	r19
    279a:	27 95       	ror	r18
    279c:	36 95       	lsr	r19
    279e:	27 95       	ror	r18
    27a0:	36 95       	lsr	r19
    27a2:	27 95       	ror	r18
		   valueLength++;
    27a4:	0f 5f       	subi	r16, 0xFF	; 255
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    27a6:	21 15       	cp	r18, r1
    27a8:	31 05       	cpc	r19, r1
    27aa:	89 f7       	brne	.-30     	; 0x278e <set_value+0x1ac>
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <set_value+0x1ce>
	int8_t *digitsArr;
	int8_t currentItem = 0;
restore_initial_value:

	tempValue = currValue;
	valueLength = 0;
    27ae:	00 e0       	ldi	r16, 0x00	; 0
		{
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
    27b0:	1c 82       	std	Y+4, r1	; 0x04
	while(tempValue)       //finding the number of digits for maximum value allowed
    27b2:	a1 14       	cp	r10, r1
    27b4:	b1 04       	cpc	r11, r1
    27b6:	09 f4       	brne	.+2      	; 0x27ba <set_value+0x1d8>
    27b8:	bf c1       	rjmp	.+894    	; 0x2b38 <set_value+0x556>
    27ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    27bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    27be:	66 24       	eor	r6, r6
    27c0:	63 94       	inc	r6
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <set_value+0x1e4>
    27c4:	68 2e       	mov	r6, r24
		{
			tempValue = tempValue / 10;
    27c6:	ad ec       	ldi	r26, 0xCD	; 205
    27c8:	bc ec       	ldi	r27, 0xCC	; 204
    27ca:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__umulhisi3>
    27ce:	9c 01       	movw	r18, r24
    27d0:	36 95       	lsr	r19
    27d2:	27 95       	ror	r18
    27d4:	36 95       	lsr	r19
    27d6:	27 95       	ror	r18
    27d8:	36 95       	lsr	r19
    27da:	27 95       	ror	r18
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	86 0d       	add	r24, r6
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    27e0:	21 15       	cp	r18, r1
    27e2:	31 05       	cpc	r19, r1
    27e4:	79 f7       	brne	.-34     	; 0x27c4 <set_value+0x1e2>
    27e6:	6c 82       	std	Y+4, r6	; 0x04
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    27e8:	71 2c       	mov	r7, r1
    27ea:	c3 01       	movw	r24, r6
    27ec:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <malloc>
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    27f4:	1b 82       	std	Y+3, r1	; 0x03
    27f6:	16 14       	cp	r1, r6
    27f8:	17 04       	cpc	r1, r7
    27fa:	0c f0       	brlt	.+2      	; 0x27fe <set_value+0x21c>
    27fc:	4d c0       	rjmp	.+154    	; 0x2898 <set_value+0x2b6>
    27fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    2800:	fc 85       	ldd	r31, Y+12	; 0x0c
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
		if (digitIndex<valueLength){
    2808:	40 2f       	mov	r20, r16
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	64 17       	cp	r22, r20
    280e:	75 07       	cpc	r23, r21
    2810:	7c f5       	brge	.+94     	; 0x2870 <set_value+0x28e>
			digitsArr[digitIndex] = tempValue % 10;
    2812:	69 80       	ldd	r6, Y+1	; 0x01
    2814:	7a 80       	ldd	r7, Y+2	; 0x02
    2816:	68 0e       	add	r6, r24
    2818:	71 1c       	adc	r7, r1
    281a:	87 fd       	sbrc	r24, 7
    281c:	7a 94       	dec	r7
    281e:	9f 01       	movw	r18, r30
    2820:	ad ec       	ldi	r26, 0xCD	; 205
    2822:	bc ec       	ldi	r27, 0xCC	; 204
    2824:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__umulhisi3>
    2828:	96 95       	lsr	r25
    282a:	87 95       	ror	r24
    282c:	96 95       	lsr	r25
    282e:	87 95       	ror	r24
    2830:	96 95       	lsr	r25
    2832:	87 95       	ror	r24
    2834:	9c 01       	movw	r18, r24
    2836:	22 0f       	add	r18, r18
    2838:	33 1f       	adc	r19, r19
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	82 0f       	add	r24, r18
    2848:	93 1f       	adc	r25, r19
    284a:	df 01       	movw	r26, r30
    284c:	a8 1b       	sub	r26, r24
    284e:	b9 0b       	sbc	r27, r25
    2850:	cd 01       	movw	r24, r26
    2852:	d3 01       	movw	r26, r6
    2854:	8c 93       	st	X, r24
			tempValue = tempValue / 10;
    2856:	9f 01       	movw	r18, r30
    2858:	ad ec       	ldi	r26, 0xCD	; 205
    285a:	bc ec       	ldi	r27, 0xCC	; 204
    285c:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__umulhisi3>
    2860:	fc 01       	movw	r30, r24
    2862:	f6 95       	lsr	r31
    2864:	e7 95       	ror	r30
    2866:	f6 95       	lsr	r31
    2868:	e7 95       	ror	r30
    286a:	f6 95       	lsr	r31
    286c:	e7 95       	ror	r30
    286e:	07 c0       	rjmp	.+14     	; 0x287e <set_value+0x29c>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    2870:	a9 81       	ldd	r26, Y+1	; 0x01
    2872:	ba 81       	ldd	r27, Y+2	; 0x02
    2874:	a8 0f       	add	r26, r24
    2876:	b1 1d       	adc	r27, r1
    2878:	87 fd       	sbrc	r24, 7
    287a:	ba 95       	dec	r27
    287c:	1c 92       	st	X, r1
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	8b 83       	std	Y+3, r24	; 0x03
    2884:	68 2f       	mov	r22, r24
    2886:	08 2e       	mov	r0, r24
    2888:	00 0c       	add	r0, r0
    288a:	77 0b       	sbc	r23, r23
    288c:	2c 81       	ldd	r18, Y+4	; 0x04
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	62 17       	cp	r22, r18
    2892:	73 07       	cpc	r23, r19
    2894:	0c f4       	brge	.+2      	; 0x2898 <set_value+0x2b6>
    2896:	ba cf       	rjmp	.-140    	; 0x280c <set_value+0x22a>
			tempValue = tempValue / 10;
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	GLCD_GotoXY(5,20);
    2898:	64 e1       	ldi	r22, 0x14	; 20
    289a:	85 e0       	ldi	r24, 0x05	; 5
    289c:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	41 e1       	ldi	r20, 0x11	; 17
    28a4:	6c e0       	ldi	r22, 0x0C	; 12
    28a6:	84 e7       	ldi	r24, 0x74	; 116
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <GLCD_SetFont>
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	0f ef       	ldi	r16, 0xFF	; 255
    28b2:	08 0f       	add	r16, r24
    28b4:	05 9d       	mul	r16, r5
    28b6:	00 2d       	mov	r16, r0
    28b8:	11 24       	eor	r1, r1
    28ba:	0b 5f       	subi	r16, 0xFB	; 251
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    28bc:	81 50       	subi	r24, 0x01	; 1
    28be:	8b 83       	std	Y+3, r24	; 0x03
    28c0:	88 23       	and	r24, r24
    28c2:	0c f1       	brlt	.+66     	; 0x2906 <set_value+0x324>
	GLCD_PrintInteger(digitsArr[digitIndex]);
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	e8 0f       	add	r30, r24
    28ca:	f1 1d       	adc	r31, r1
    28cc:	87 fd       	sbrc	r24, 7
    28ce:	fa 95       	dec	r31
    28d0:	60 81       	ld	r22, Z
    28d2:	06 2e       	mov	r0, r22
    28d4:	00 0c       	add	r0, r0
    28d6:	77 0b       	sbc	r23, r23
    28d8:	88 0b       	sbc	r24, r24
    28da:	99 0b       	sbc	r25, r25
    28dc:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		if ((digitIndex==tens)&&(tens)){
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	08 2e       	mov	r0, r24
    28e4:	00 0c       	add	r0, r0
    28e6:	99 0b       	sbc	r25, r25
    28e8:	8e 15       	cp	r24, r14
    28ea:	9f 05       	cpc	r25, r15
    28ec:	39 f4       	brne	.+14     	; 0x28fc <set_value+0x31a>
    28ee:	dd 20       	and	r13, r13
    28f0:	29 f0       	breq	.+10     	; 0x28fc <set_value+0x31a>
			GLCD_PrintString(".");
    28f2:	8e e5       	ldi	r24, 0x5E	; 94
    28f4:	92 e0       	ldi	r25, 0x02	; 2
    28f6:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
			rectShift+=5;
    28fa:	0b 5f       	subi	r16, 0xFB	; 251
		}
	}
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	81 50       	subi	r24, 0x01	; 1
    2900:	8b 83       	std	Y+3, r24	; 0x03
    2902:	88 23       	and	r24, r24
    2904:	fc f6       	brge	.-66     	; 0x28c4 <set_value+0x2e2>
		if ((digitIndex==tens)&&(tens)){
			GLCD_PrintString(".");
			rectShift+=5;
		}
	}
	GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2906:	4c e0       	ldi	r20, 0x0C	; 12
    2908:	40 0f       	add	r20, r16
    290a:	24 e2       	ldi	r18, 0x24	; 36
    290c:	64 e1       	ldi	r22, 0x14	; 20
    290e:	80 2f       	mov	r24, r16
    2910:	0e 94 23 20 	call	0x4046	; 0x4046 <GLCD_InvertRect>
	GLCD_Render();
    2914:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
	while (button_monitor());
    2918:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    291c:	81 11       	cpse	r24, r1
    291e:	fc cf       	rjmp	.-8      	; 0x2918 <set_value+0x336>
    2920:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t currentButton = 0;
		while(1){
			currentButton = button_monitor();
    2922:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
			if(currentButton){
    2926:	88 23       	and	r24, r24
    2928:	09 f4       	brne	.+2      	; 0x292c <set_value+0x34a>
    292a:	fa c0       	rjmp	.+500    	; 0x2b20 <set_value+0x53e>
				rectShift = 0;
				if (currentButton == 1) {
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	09 f0       	breq	.+2      	; 0x2932 <set_value+0x350>
    2930:	85 c0       	rjmp	.+266    	; 0x2a3c <set_value+0x45a>
							currentItem++;
    2932:	0f 5f       	subi	r16, 0xFF	; 255
							if (currentItem==maxValueLength){
    2934:	20 2f       	mov	r18, r16
    2936:	00 2e       	mov	r0, r16
    2938:	00 0c       	add	r0, r0
    293a:	33 0b       	sbc	r19, r19
    293c:	8c 81       	ldd	r24, Y+4	; 0x04
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	28 17       	cp	r18, r24
    2942:	39 07       	cpc	r19, r25
    2944:	09 f0       	breq	.+2      	; 0x2948 <set_value+0x366>
    2946:	a6 c0       	rjmp	.+332    	; 0x2a94 <set_value+0x4b2>
								currentItem = 0;
								uint16_t checkValue = new_value();
    2948:	9e 01       	movw	r18, r28
    294a:	2f 5f       	subi	r18, 0xFF	; 255
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	19 01       	movw	r2, r18
    2950:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2939>
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
    2954:	a8 16       	cp	r10, r24
    2956:	b9 06       	cpc	r11, r25
    2958:	08 f4       	brcc	.+2      	; 0x295c <set_value+0x37a>
    295a:	12 cf       	rjmp	.-476    	; 0x2780 <set_value+0x19e>
    295c:	88 15       	cp	r24, r8
    295e:	99 05       	cpc	r25, r9
    2960:	08 f4       	brcc	.+2      	; 0x2964 <set_value+0x382>
    2962:	0e cf       	rjmp	.-484    	; 0x2780 <set_value+0x19e>
								//=====
								while(button_monitor());
    2964:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    2968:	81 11       	cpse	r24, r1
    296a:	fc cf       	rjmp	.-8      	; 0x2964 <set_value+0x382>
								int8_t menuItem = 0;
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
    296c:	24 e2       	ldi	r18, 0x24	; 36
    296e:	41 e1       	ldi	r20, 0x11	; 17
    2970:	64 e1       	ldi	r22, 0x14	; 20
    2972:	85 e0       	ldi	r24, 0x05	; 5
    2974:	0e 94 23 20 	call	0x4046	; 0x4046 <GLCD_InvertRect>
								currentItem = 0;
								uint16_t checkValue = new_value();
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
								//=====
								while(button_monitor());
								int8_t menuItem = 0;
    2978:	10 e0       	ldi	r17, 0x00	; 0
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
								while(1){
										currentButton = button_monitor();
    297a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
										if(currentButton){
    297e:	88 23       	and	r24, r24
    2980:	91 f1       	breq	.+100    	; 0x29e6 <set_value+0x404>
											if (currentButton == 3) {
    2982:	83 30       	cpi	r24, 0x03	; 3
    2984:	21 f4       	brne	.+8      	; 0x298e <set_value+0x3ac>
												menuItem--;
    2986:	11 50       	subi	r17, 0x01	; 1
												if (menuItem<0)menuItem = 2;
    2988:	72 f5       	brpl	.+92     	; 0x29e6 <set_value+0x404>
    298a:	12 e0       	ldi	r17, 0x02	; 2
    298c:	2c c0       	rjmp	.+88     	; 0x29e6 <set_value+0x404>
											}
											else if (currentButton == 2) {
    298e:	82 30       	cpi	r24, 0x02	; 2
    2990:	29 f4       	brne	.+10     	; 0x299c <set_value+0x3ba>
												menuItem++;
    2992:	1f 5f       	subi	r17, 0xFF	; 255
												if (menuItem>2)menuItem = 0;
    2994:	13 30       	cpi	r17, 0x03	; 3
    2996:	3c f1       	brlt	.+78     	; 0x29e6 <set_value+0x404>
    2998:	10 e0       	ldi	r17, 0x00	; 0
    299a:	25 c0       	rjmp	.+74     	; 0x29e6 <set_value+0x404>
											}
											else if (currentButton == 1) {
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	19 f5       	brne	.+70     	; 0x29e6 <set_value+0x404>
													if (!menuItem){	//getting back to value edit
    29a0:	11 11       	cpse	r17, r1
    29a2:	16 c0       	rjmp	.+44     	; 0x29d0 <set_value+0x3ee>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
    29a4:	00 e0       	ldi	r16, 0x00	; 0
    29a6:	21 e2       	ldi	r18, 0x21	; 33
    29a8:	44 e7       	ldi	r20, 0x74	; 116
    29aa:	65 e1       	ldi	r22, 0x15	; 21
    29ac:	86 e5       	ldi	r24, 0x56	; 86
    29ae:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
    29b2:	2d e2       	ldi	r18, 0x2D	; 45
    29b4:	44 e7       	ldi	r20, 0x74	; 116
    29b6:	61 e2       	ldi	r22, 0x21	; 33
    29b8:	86 e5       	ldi	r24, 0x56	; 86
    29ba:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
    29be:	29 e3       	ldi	r18, 0x39	; 57
    29c0:	44 e7       	ldi	r20, 0x74	; 116
    29c2:	6d e2       	ldi	r22, 0x2D	; 45
    29c4:	86 e5       	ldi	r24, 0x56	; 86
    29c6:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
														GLCD_Render();
    29ca:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
														break;
    29ce:	62 c0       	rjmp	.+196    	; 0x2a94 <set_value+0x4b2>
													}
													else if (menuItem == 1){
    29d0:	11 30       	cpi	r17, 0x01	; 1
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <set_value+0x3f4>
    29d4:	ae c0       	rjmp	.+348    	; 0x2b32 <set_value+0x550>
														return currValue; //if changes discarded - return initial value
													}
													else if (menuItem == 2){
    29d6:	12 30       	cpi	r17, 0x02	; 2
    29d8:	31 f4       	brne	.+12     	; 0x29e6 <set_value+0x404>
														return new_value();
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	1c 01       	movw	r2, r24
    29e0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2939>
    29e4:	b1 c0       	rjmp	.+354    	; 0x2b48 <set_value+0x566>
													}
											}
										}
							for (int8_t i=0;i<3;i++)GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);
    29e6:	00 e0       	ldi	r16, 0x00	; 0
    29e8:	21 e2       	ldi	r18, 0x21	; 33
    29ea:	44 e7       	ldi	r20, 0x74	; 116
    29ec:	65 e1       	ldi	r22, 0x15	; 21
    29ee:	86 e5       	ldi	r24, 0x56	; 86
    29f0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
    29f4:	2d e2       	ldi	r18, 0x2D	; 45
    29f6:	44 e7       	ldi	r20, 0x74	; 116
    29f8:	61 e2       	ldi	r22, 0x21	; 33
    29fa:	86 e5       	ldi	r24, 0x56	; 86
    29fc:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
    2a00:	29 e3       	ldi	r18, 0x39	; 57
    2a02:	44 e7       	ldi	r20, 0x74	; 116
    2a04:	6d e2       	ldi	r22, 0x2D	; 45
    2a06:	86 e5       	ldi	r24, 0x56	; 86
    2a08:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
							GLCD_DrawRectangle(86,21+menuItem*12,116,33+menuItem*12,GLCD_Black);
    2a0c:	61 2f       	mov	r22, r17
    2a0e:	66 0f       	add	r22, r22
    2a10:	61 0f       	add	r22, r17
    2a12:	66 0f       	add	r22, r22
    2a14:	66 0f       	add	r22, r22
    2a16:	21 e2       	ldi	r18, 0x21	; 33
    2a18:	26 0f       	add	r18, r22
    2a1a:	6b 5e       	subi	r22, 0xEB	; 235
    2a1c:	0f ef       	ldi	r16, 0xFF	; 255
    2a1e:	44 e7       	ldi	r20, 0x74	; 116
    2a20:	86 e5       	ldi	r24, 0x56	; 86
    2a22:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
							GLCD_Render();
    2a26:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
							while(button_monitor());
    2a2a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    2a2e:	81 11       	cpse	r24, r1
    2a30:	fc cf       	rjmp	.-8      	; 0x2a2a <set_value+0x448>
							while(!button_monitor());
    2a32:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    2a36:	88 23       	and	r24, r24
    2a38:	e1 f3       	breq	.-8      	; 0x2a32 <set_value+0x450>
    2a3a:	9f cf       	rjmp	.-194    	; 0x297a <set_value+0x398>
							}//
						}
					}
					if (currentButton == 3) {
    2a3c:	83 30       	cpi	r24, 0x03	; 3
    2a3e:	a1 f4       	brne	.+40     	; 0x2a68 <set_value+0x486>
						digitsArr[currentItem]++;
    2a40:	e9 81       	ldd	r30, Y+1	; 0x01
    2a42:	fa 81       	ldd	r31, Y+2	; 0x02
    2a44:	80 2f       	mov	r24, r16
    2a46:	00 2e       	mov	r0, r16
    2a48:	00 0c       	add	r0, r0
    2a4a:	99 0b       	sbc	r25, r25
    2a4c:	e8 0f       	add	r30, r24
    2a4e:	f9 1f       	adc	r31, r25
    2a50:	20 81       	ld	r18, Z
    2a52:	2f 5f       	subi	r18, 0xFF	; 255
    2a54:	20 83       	st	Z, r18
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	e8 0f       	add	r30, r24
    2a5c:	f9 1f       	adc	r31, r25
    2a5e:	80 81       	ld	r24, Z
    2a60:	8a 30       	cpi	r24, 0x0A	; 10
    2a62:	c4 f0       	brlt	.+48     	; 0x2a94 <set_value+0x4b2>
    2a64:	10 82       	st	Z, r1
    2a66:	16 c0       	rjmp	.+44     	; 0x2a94 <set_value+0x4b2>
					}
					else if (currentButton == 2) {
    2a68:	82 30       	cpi	r24, 0x02	; 2
    2a6a:	a1 f4       	brne	.+40     	; 0x2a94 <set_value+0x4b2>
						digitsArr[currentItem]--;
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a70:	80 2f       	mov	r24, r16
    2a72:	00 2e       	mov	r0, r16
    2a74:	00 0c       	add	r0, r0
    2a76:	99 0b       	sbc	r25, r25
    2a78:	e8 0f       	add	r30, r24
    2a7a:	f9 1f       	adc	r31, r25
    2a7c:	20 81       	ld	r18, Z
    2a7e:	21 50       	subi	r18, 0x01	; 1
    2a80:	20 83       	st	Z, r18
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	e8 0f       	add	r30, r24
    2a88:	f9 1f       	adc	r31, r25
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 23       	and	r24, r24
    2a8e:	14 f4       	brge	.+4      	; 0x2a94 <set_value+0x4b2>
    2a90:	99 e0       	ldi	r25, 0x09	; 9
    2a92:	90 83       	st	Z, r25
					}
			GLCD_GotoXY(5,20);
    2a94:	64 e1       	ldi	r22, 0x14	; 20
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9e:	81 50       	subi	r24, 0x01	; 1
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
    2aa2:	88 23       	and	r24, r24
    2aa4:	04 f1       	brlt	.+64     	; 0x2ae6 <set_value+0x504>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aaa:	e8 0f       	add	r30, r24
    2aac:	f1 1d       	adc	r31, r1
    2aae:	87 fd       	sbrc	r24, 7
    2ab0:	fa 95       	dec	r31
    2ab2:	60 81       	ld	r22, Z
    2ab4:	06 2e       	mov	r0, r22
    2ab6:	00 0c       	add	r0, r0
    2ab8:	77 0b       	sbc	r23, r23
    2aba:	88 0b       	sbc	r24, r24
    2abc:	99 0b       	sbc	r25, r25
    2abe:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	08 2e       	mov	r0, r24
    2ac6:	00 0c       	add	r0, r0
    2ac8:	99 0b       	sbc	r25, r25
    2aca:	8e 15       	cp	r24, r14
    2acc:	9f 05       	cpc	r25, r15
    2ace:	31 f4       	brne	.+12     	; 0x2adc <set_value+0x4fa>
    2ad0:	dd 20       	and	r13, r13
    2ad2:	21 f0       	breq	.+8      	; 0x2adc <set_value+0x4fa>
    2ad4:	8e e5       	ldi	r24, 0x5E	; 94
    2ad6:	92 e0       	ldi	r25, 0x02	; 2
    2ad8:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
					else if (currentButton == 2) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
					}
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	81 50       	subi	r24, 0x01	; 1
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
    2ae2:	88 23       	and	r24, r24
    2ae4:	04 f7       	brge	.-64     	; 0x2aa6 <set_value+0x4c4>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae8:	81 50       	subi	r24, 0x01	; 1
    2aea:	0c 9d       	mul	r16, r12
    2aec:	90 2d       	mov	r25, r0
    2aee:	11 24       	eor	r1, r1
    2af0:	85 9d       	mul	r24, r5
    2af2:	90 0d       	add	r25, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	85 e0       	ldi	r24, 0x05	; 5
    2af8:	89 0f       	add	r24, r25
			if (tens){
    2afa:	dd 20       	and	r13, r13
    2afc:	49 f0       	breq	.+18     	; 0x2b10 <set_value+0x52e>
					if(currentItem<tens){
    2afe:	20 2f       	mov	r18, r16
    2b00:	00 2e       	mov	r0, r16
    2b02:	00 0c       	add	r0, r0
    2b04:	33 0b       	sbc	r19, r19
    2b06:	2e 15       	cp	r18, r14
    2b08:	3f 05       	cpc	r19, r15
    2b0a:	14 f4       	brge	.+4      	; 0x2b10 <set_value+0x52e>
						rectShift+=5;
    2b0c:	8a e0       	ldi	r24, 0x0A	; 10
    2b0e:	89 0f       	add	r24, r25
					}
			}
			GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2b10:	4c e0       	ldi	r20, 0x0C	; 12
    2b12:	48 0f       	add	r20, r24
    2b14:	24 e2       	ldi	r18, 0x24	; 36
    2b16:	64 e1       	ldi	r22, 0x14	; 20
    2b18:	0e 94 23 20 	call	0x4046	; 0x4046 <GLCD_InvertRect>
			GLCD_Render();
    2b1c:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
		}
		
		while(button_monitor());
    2b20:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    2b24:	81 11       	cpse	r24, r1
    2b26:	fc cf       	rjmp	.-8      	; 0x2b20 <set_value+0x53e>
		while(!button_monitor());
    2b28:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    2b2c:	88 23       	and	r24, r24
    2b2e:	e1 f3       	breq	.-8      	; 0x2b28 <set_value+0x546>
    2b30:	f8 ce       	rjmp	.-528    	; 0x2922 <set_value+0x340>
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
														GLCD_Render();
														break;
													}
													else if (menuItem == 1){
														return currValue; //if changes discarded - return initial value
    2b32:	89 85       	ldd	r24, Y+9	; 0x09
    2b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b36:	08 c0       	rjmp	.+16     	; 0x2b48 <set_value+0x566>
	while(tempValue)       //finding the number of digits for maximum value allowed
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <malloc>
    2b40:	9a 83       	std	Y+2, r25	; 0x02
    2b42:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2b44:	1b 82       	std	Y+3, r1	; 0x03
    2b46:	a8 ce       	rjmp	.-688    	; 0x2898 <set_value+0x2b6>
		}
		
		while(button_monitor());
		while(!button_monitor());
	}
}
    2b48:	2e 96       	adiw	r28, 0x0e	; 14
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	ef 90       	pop	r14
    2b60:	df 90       	pop	r13
    2b62:	cf 90       	pop	r12
    2b64:	bf 90       	pop	r11
    2b66:	af 90       	pop	r10
    2b68:	9f 90       	pop	r9
    2b6a:	8f 90       	pop	r8
    2b6c:	7f 90       	pop	r7
    2b6e:	6f 90       	pop	r6
    2b70:	5f 90       	pop	r5
    2b72:	4f 90       	pop	r4
    2b74:	3f 90       	pop	r3
    2b76:	2f 90       	pop	r2
    2b78:	08 95       	ret

00002b7a <debug_screen>:
void debug_screen(){
	uint8_t xOfset1 = 4;
	uint8_t xOfset2 = 26;
	uint8_t xOfset3 = 56;
	uint8_t xOfset4 = 82;
	GLCD_Clear();
    2b7a:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	48 e0       	ldi	r20, 0x08	; 8
    2b82:	65 e0       	ldi	r22, 0x05	; 5
    2b84:	80 ea       	ldi	r24, 0xA0	; 160
    2b86:	9b e0       	ldi	r25, 0x0B	; 11
    2b88:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <GLCD_SetFont>
	GLCD_GotoLine(1);
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2b92:	84 e0       	ldi	r24, 0x04	; 4
    2b94:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("Spd");
    2b98:	85 e8       	ldi	r24, 0x85	; 133
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2ba0:	8a e1       	ldi	r24, 0x1A	; 26
    2ba2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintDouble(speedKmh,10);
    2ba6:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <speedKmh>
    2baa:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <speedKmh+0x1>
    2bae:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <speedKmh+0x2>
    2bb2:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <speedKmh+0x3>
    2bb6:	2a e0       	ldi	r18, 0x0A	; 10
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2bc2:	88 e3       	ldi	r24, 0x38	; 56
    2bc4:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("Ubt");
    2bc8:	89 e8       	ldi	r24, 0x89	; 137
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2bd0:	82 e5       	ldi	r24, 0x52	; 82
    2bd2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintDouble(newVoltage/10.0,100);
    2bd6:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <newVoltage>
    2bda:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <newVoltage+0x1>
    2bde:	07 2e       	mov	r0, r23
    2be0:	00 0c       	add	r0, r0
    2be2:	88 0b       	sbc	r24, r24
    2be4:	99 0b       	sbc	r25, r25
    2be6:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__floatsisf>
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    2bf6:	24 e6       	ldi	r18, 0x64	; 100
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
	
	GLCD_GotoLine(2);
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c08:	84 e0       	ldi	r24, 0x04	; 4
    2c0a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("Frq");
    2c0e:	8d e8       	ldi	r24, 0x8D	; 141
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c16:	8a e1       	ldi	r24, 0x1A	; 26
    2c18:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintDouble(frequency,10);
    2c1c:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <frequency>
    2c20:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <frequency+0x1>
    2c24:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <frequency+0x2>
    2c28:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <frequency+0x3>
    2c2c:	2a e0       	ldi	r18, 0x0A	; 10
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2c38:	88 e3       	ldi	r24, 0x38	; 56
    2c3a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("StP");
    2c3e:	81 e9       	ldi	r24, 0x91	; 145
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2c46:	82 e5       	ldi	r24, 0x52	; 82
    2c48:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerPrecise);
    2c4c:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <speedTimerPrecise>
    2c50:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <speedTimerPrecise+0x1>
    2c54:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <speedTimerPrecise+0x2>
    2c58:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <speedTimerPrecise+0x3>
    2c5c:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
	GLCD_GotoLine(3);
    2c60:	83 e0       	ldi	r24, 0x03	; 3
    2c62:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c66:	84 e0       	ldi	r24, 0x04	; 4
    2c68:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("Stp");
    2c6c:	85 e9       	ldi	r24, 0x95	; 149
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c74:	8a e1       	ldi	r24, 0x1A	; 26
    2c76:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(steps);
    2c7a:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <steps>
    2c7e:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <steps+0x1>
    2c82:	07 2e       	mov	r0, r23
    2c84:	00 0c       	add	r0, r0
    2c86:	88 0b       	sbc	r24, r24
    2c88:	99 0b       	sbc	r25, r25
    2c8a:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2c8e:	88 e3       	ldi	r24, 0x38	; 56
    2c90:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("StR");
    2c94:	89 e9       	ldi	r24, 0x99	; 153
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2c9c:	82 e5       	ldi	r24, 0x52	; 82
    2c9e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRough);
    2ca2:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <speedTimerRough>
    2ca6:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <speedTimerRough+0x1>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
	GLCD_GotoLine(4);
    2cb2:	84 e0       	ldi	r24, 0x04	; 4
    2cb4:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2cb8:	84 e0       	ldi	r24, 0x04	; 4
    2cba:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("nSt");
    2cbe:	8d e9       	ldi	r24, 0x9D	; 157
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2cc6:	8a e1       	ldi	r24, 0x1A	; 26
    2cc8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(newSteps);
    2ccc:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <newSteps>
    2cd0:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <newSteps+0x1>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2cdc:	88 e3       	ldi	r24, 0x38	; 56
    2cde:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("SRt");
    2ce2:	81 ea       	ldi	r24, 0xA1	; 161
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2cea:	82 e5       	ldi	r24, 0x52	; 82
    2cec:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRoughTemp);
    2cf0:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <speedTimerRoughTemp>
    2cf4:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <speedTimerRoughTemp+0x1>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
	GLCD_GotoLine(5);
    2d00:	85 e0       	ldi	r24, 0x05	; 5
    2d02:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2d06:	84 e0       	ldi	r24, 0x04	; 4
    2d08:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("Phs");
    2d0c:	85 ea       	ldi	r24, 0xA5	; 165
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2d14:	8a e1       	ldi	r24, 0x1A	; 26
    2d16:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(phase);
    2d1a:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <phase>
    2d1e:	06 2e       	mov	r0, r22
    2d20:	00 0c       	add	r0, r0
    2d22:	77 0b       	sbc	r23, r23
    2d24:	88 0b       	sbc	r24, r24
    2d26:	99 0b       	sbc	r25, r25
    2d28:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
	GLCD_GotoLine(6);
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2d32:	84 e0       	ldi	r24, 0x04	; 4
    2d34:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintString("TRt");
    2d38:	89 ea       	ldi	r24, 0xA9	; 169
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2d40:	8a e1       	ldi	r24, 0x1A	; 26
    2d42:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_PrintInteger(totalRotations);
    2d46:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <totalRotations>
    2d4a:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <totalRotations+0x1>
    2d4e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <totalRotations+0x2>
    2d52:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <totalRotations+0x3>
    2d56:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	
// 	GLCD_GotoX(xOfset3);
// 	GLCD_PrintString("Dst");
// 	GLCD_GotoX(xOfset4);
// 	GLCD_PrintDouble(distance/100.0,100);
 	GLCD_Render();
    2d5a:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
    2d5e:	08 95       	ret

00002d60 <main>:
}


int main(void)
{
	presets();
    2d60:	0e 94 49 11 	call	0x2292	; 0x2292 <presets>
	if (!debugMode)main_screen();
    2d64:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    2d68:	81 11       	cpse	r24, r1
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <main+0x10>
    2d6c:	0e 94 44 0c 	call	0x1888	; 0x1888 <main_screen>
	while(1){
				data_monitor();
    2d70:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <data_monitor>
				calculate_speed();
    2d74:	0e 94 16 12 	call	0x242c	; 0x242c <calculate_speed>
				speed_arrow_update();
    2d78:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <speed_arrow_update>
				if(!debugMode)signal_monitor();else debug_screen();
    2d7c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    2d80:	81 11       	cpse	r24, r1
    2d82:	03 c0       	rjmp	.+6      	; 0x2d8a <main+0x2a>
    2d84:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <signal_monitor>
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <main+0x2e>
    2d8a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <debug_screen>
				if(button_monitor()) menu_screen();
    2d8e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    2d92:	88 23       	and	r24, r24
    2d94:	69 f3       	breq	.-38     	; 0x2d70 <main+0x10>
    2d96:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <menu_screen>
    2d9a:	ea cf       	rjmp	.-44     	; 0x2d70 <main+0x10>

00002d9c <menu_screen>:

void menu_screen(){
	uint8_t offset = 85;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
    2d9c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <menuItem.2778>
    2da0:	86 30       	cpi	r24, 0x06	; 6
    2da2:	54 f0       	brlt	.+20     	; 0x2db8 <menu_screen+0x1c>
    2da4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
    2da8:	8f 5f       	subi	r24, 0xFF	; 255
    2daa:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
    2dae:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <menuItem.2778>
	if (menuItem < 0){page--;menuItem= 5;}
	if ((page == 2)&&(menuItem > 3)){
    2db2:	82 30       	cpi	r24, 0x02	; 2
    2db4:	d9 f4       	brne	.+54     	; 0x2dec <menu_screen+0x50>
    2db6:	24 c0       	rjmp	.+72     	; 0x2e00 <menu_screen+0x64>
void menu_screen(){
	uint8_t offset = 85;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
	if (menuItem < 0){page--;menuItem= 5;}
    2db8:	88 23       	and	r24, r24
    2dba:	5c f4       	brge	.+22     	; 0x2dd2 <menu_screen+0x36>
    2dbc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
    2dc0:	81 50       	subi	r24, 0x01	; 1
    2dc2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
    2dc6:	95 e0       	ldi	r25, 0x05	; 5
    2dc8:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <menuItem.2778>
	if ((page == 2)&&(menuItem > 3)){
    2dcc:	82 30       	cpi	r24, 0x02	; 2
    2dce:	71 f4       	brne	.+28     	; 0x2dec <menu_screen+0x50>
    2dd0:	08 c0       	rjmp	.+16     	; 0x2de2 <menu_screen+0x46>
    2dd2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	49 f4       	brne	.+18     	; 0x2dec <menu_screen+0x50>
    2dda:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <menuItem.2778>
    2dde:	84 30       	cpi	r24, 0x04	; 4
    2de0:	7c f0       	brlt	.+30     	; 0x2e00 <menu_screen+0x64>
		page = 0;
    2de2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
		menuItem = 0;
    2de6:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <menuItem.2778>
    2dea:	0a c0       	rjmp	.+20     	; 0x2e00 <menu_screen+0x64>
	}
	if (page<0){page = 2;menuItem = 3;}
    2dec:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
    2df0:	88 23       	and	r24, r24
    2df2:	34 f4       	brge	.+12     	; 0x2e00 <menu_screen+0x64>
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
    2dfa:	83 e0       	ldi	r24, 0x03	; 3
    2dfc:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <menuItem.2778>
	GLCD_Clear();
    2e00:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	48 e0       	ldi	r20, 0x08	; 8
    2e08:	65 e0       	ldi	r22, 0x05	; 5
    2e0a:	80 ea       	ldi	r24, 0xA0	; 160
    2e0c:	9b e0       	ldi	r25, 0x0B	; 11
    2e0e:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <GLCD_SetFont>
	if(page==0){
    2e12:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
    2e16:	81 11       	cpse	r24, r1
    2e18:	89 c0       	rjmp	.+274    	; 0x2f2c <menu_screen+0x190>
		//item 0
		GLCD_GotoX(10);
    2e1a:	8a e0       	ldi	r24, 0x0A	; 10
    2e1c:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(1);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Dial PWM");
    2e26:	8d ea       	ldi	r24, 0xAD	; 173
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e2e:	85 e5       	ldi	r24, 0x55	; 85
    2e30:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(pwmDial);
    2e34:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <pwmDial>
    2e38:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 1
		GLCD_GotoX(10);
    2e44:	8a e0       	ldi	r24, 0x0A	; 10
    2e46:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(2);
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Arrow PWM");
    2e50:	86 eb       	ldi	r24, 0xB6	; 182
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e58:	85 e5       	ldi	r24, 0x55	; 85
    2e5a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(pwmArrow);
    2e5e:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <pwmArrow>
    2e62:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 2
		GLCD_GotoX(10);
    2e6e:	8a e0       	ldi	r24, 0x0A	; 10
    2e70:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(3);
    2e74:	83 e0       	ldi	r24, 0x03	; 3
    2e76:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Wheel D");
    2e7a:	80 ec       	ldi	r24, 0xC0	; 192
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e82:	85 e5       	ldi	r24, 0x55	; 85
    2e84:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintDouble(wheelDiameter,1000);
    2e88:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <wheelDiameter>
    2e8c:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <wheelDiameter+0x1>
    2e90:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <wheelDiameter+0x2>
    2e94:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <wheelDiameter+0x3>
    2e98:	28 ee       	ldi	r18, 0xE8	; 232
    2e9a:	33 e0       	ldi	r19, 0x03	; 3
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
		//item 3
		GLCD_GotoX(10);
    2ea4:	8a e0       	ldi	r24, 0x0A	; 10
    2ea6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(4);
    2eaa:	84 e0       	ldi	r24, 0x04	; 4
    2eac:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Ratio");
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2eb8:	85 e5       	ldi	r24, 0x55	; 85
    2eba:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintDouble(gearRatio,1000);
    2ebe:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <gearRatio>
    2ec2:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <gearRatio+0x1>
    2ec6:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <gearRatio+0x2>
    2eca:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <gearRatio+0x3>
    2ece:	28 ee       	ldi	r18, 0xE8	; 232
    2ed0:	33 e0       	ldi	r19, 0x03	; 3
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
		//item 4
		GLCD_GotoX(10);
    2eda:	8a e0       	ldi	r24, 0x0A	; 10
    2edc:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(5);
    2ee0:	85 e0       	ldi	r24, 0x05	; 5
    2ee2:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Magnets");
    2ee6:	8e ec       	ldi	r24, 0xCE	; 206
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2eee:	85 e5       	ldi	r24, 0x55	; 85
    2ef0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(magnetsOnWheel);
    2ef4:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <magnetsOnWheel>
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 5
		GLCD_GotoX(10);
    2f02:	8a e0       	ldi	r24, 0x0A	; 10
    2f04:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(6);
    2f08:	86 e0       	ldi	r24, 0x06	; 6
    2f0a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Step mode");
    2f0e:	86 ed       	ldi	r24, 0xD6	; 214
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f16:	85 e5       	ldi	r24, 0x55	; 85
    2f18:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(stepMode);
    2f1c:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <stepMode>
    2f20:	70 e0       	ldi	r23, 0x00	; 0
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
    2f2a:	aa c0       	rjmp	.+340    	; 0x3080 <menu_screen+0x2e4>
	}
	else if (page==1){
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <menu_screen+0x196>
    2f30:	7a c0       	rjmp	.+244    	; 0x3026 <menu_screen+0x28a>
		//item 6
		GLCD_GotoX(10);
    2f32:	8a e0       	ldi	r24, 0x0A	; 10
    2f34:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(1);
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Max speed");
    2f3e:	80 ee       	ldi	r24, 0xE0	; 224
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f46:	85 e5       	ldi	r24, 0x55	; 85
    2f48:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(scaleMax);
    2f4c:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <scaleMax>
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 7
		GLCD_GotoX(10);
    2f5a:	8a e0       	ldi	r24, 0x0A	; 10
    2f5c:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(2);
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Deg/kmh");
    2f66:	8a ee       	ldi	r24, 0xEA	; 234
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f6e:	85 e5       	ldi	r24, 0x55	; 85
    2f70:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintDouble(degreesPerKmh,1000);
    2f74:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <degreesPerKmh>
    2f78:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <degreesPerKmh+0x1>
    2f7c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <degreesPerKmh+0x2>
    2f80:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <degreesPerKmh+0x3>
    2f84:	28 ee       	ldi	r18, 0xE8	; 232
    2f86:	33 e0       	ldi	r19, 0x03	; 3
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	0e 94 29 24 	call	0x4852	; 0x4852 <GLCD_PrintDouble>
		//item 8
		GLCD_GotoX(10);
    2f90:	8a e0       	ldi	r24, 0x0A	; 10
    2f92:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(3);
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("SM steps");
    2f9c:	82 ef       	ldi	r24, 0xF2	; 242
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2fa4:	85 e5       	ldi	r24, 0x55	; 85
    2fa6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(smSteps);
    2faa:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <smSteps>
    2fae:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <smSteps+0x1>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 9
		GLCD_GotoX(10);
    2fba:	8a e0       	ldi	r24, 0x0A	; 10
    2fbc:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(4);
    2fc0:	84 e0       	ldi	r24, 0x04	; 4
    2fc2:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Step inter.");
    2fc6:	8b ef       	ldi	r24, 0xFB	; 251
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2fce:	85 e5       	ldi	r24, 0x55	; 85
    2fd0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(stepInterval);
    2fd4:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <stepInterval>
    2fd8:	70 e0       	ldi	r23, 0x00	; 0
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 10
		GLCD_GotoX(10);
    2fe2:	8a e0       	ldi	r24, 0x0A	; 10
    2fe4:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(5);
    2fe8:	85 e0       	ldi	r24, 0x05	; 5
    2fea:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("LCD contrast");
    2fee:	87 e0       	ldi	r24, 0x07	; 7
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2ff6:	85 e5       	ldi	r24, 0x55	; 85
    2ff8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_PrintInteger(lcdContrast);
    2ffc:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <lcdContrast>
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		//item 11
		GLCD_GotoX(10);
    300a:	8a e0       	ldi	r24, 0x0A	; 10
    300c:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(6);
    3010:	86 e0       	ldi	r24, 0x06	; 6
    3012:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Debug mode");
    3016:	84 e1       	ldi	r24, 0x14	; 20
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    301e:	85 e5       	ldi	r24, 0x55	; 85
    3020:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
    3024:	2d c0       	rjmp	.+90     	; 0x3080 <menu_screen+0x2e4>
	}
	else if (page==2){
    3026:	82 30       	cpi	r24, 0x02	; 2
    3028:	59 f5       	brne	.+86     	; 0x3080 <menu_screen+0x2e4>
		//item 12
		GLCD_GotoX(10);
    302a:	8a e0       	ldi	r24, 0x0A	; 10
    302c:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(1);
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Calibrate arrow");
    3036:	8f e1       	ldi	r24, 0x1F	; 31
    3038:	91 e0       	ldi	r25, 0x01	; 1
    303a:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		GLCD_GotoX(offset);
    303e:	85 e5       	ldi	r24, 0x55	; 85
    3040:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		//item 13
		GLCD_GotoX(10);
    3044:	8a e0       	ldi	r24, 0x0A	; 10
    3046:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(2);
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Odometer reset");
    3050:	8f e2       	ldi	r24, 0x2F	; 47
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		//item 14
		GLCD_GotoX(10);
    3058:	8a e0       	ldi	r24, 0x0A	; 10
    305a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(3);
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Load defaults");
    3064:	8e e3       	ldi	r24, 0x3E	; 62
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
		//item 15
		GLCD_GotoX(10);
    306c:	8a e0       	ldi	r24, 0x0A	; 10
    306e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
		GLCD_GotoLine(4);
    3072:	84 e0       	ldi	r24, 0x04	; 4
    3074:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
		GLCD_PrintString("Exit");
    3078:	8c e4       	ldi	r24, 0x4C	; 76
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	}
	GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    3080:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <menuItem.2778>
    3084:	66 0f       	add	r22, r22
    3086:	66 0f       	add	r22, r22
    3088:	66 0f       	add	r22, r22
    308a:	2f e0       	ldi	r18, 0x0F	; 15
    308c:	26 0f       	add	r18, r22
    308e:	69 5f       	subi	r22, 0xF9	; 249
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	0e 94 23 20 	call	0x4046	; 0x4046 <GLCD_InvertRect>
	GLCD_Render();
    3098:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
	while (button_monitor());
    309c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    30a0:	81 11       	cpse	r24, r1
    30a2:	fc cf       	rjmp	.-8      	; 0x309c <menu_screen+0x300>
	uint8_t currentButton = 0;
	uint16_t newValue = 0;
	while(1){
		currentButton = button_monitor();
    30a4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
		if(currentButton){
    30a8:	88 23       	and	r24, r24
    30aa:	e1 f3       	breq	.-8      	; 0x30a4 <menu_screen+0x308>
			if (currentButton == 1){
    30ac:	81 30       	cpi	r24, 0x01	; 1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <menu_screen+0x316>
    30b0:	5e c3       	rjmp	.+1724   	; 0x376e <menu_screen+0x9d2>
				switch(menuItem+6*page)		{
    30b2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
    30b6:	08 2e       	mov	r0, r24
    30b8:	00 0c       	add	r0, r0
    30ba:	99 0b       	sbc	r25, r25
    30bc:	fc 01       	movw	r30, r24
    30be:	ee 0f       	add	r30, r30
    30c0:	ff 1f       	adc	r31, r31
    30c2:	e8 0f       	add	r30, r24
    30c4:	f9 1f       	adc	r31, r25
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <menuItem.2778>
    30ce:	e8 0f       	add	r30, r24
    30d0:	f1 1d       	adc	r31, r1
    30d2:	87 fd       	sbrc	r24, 7
    30d4:	fa 95       	dec	r31
    30d6:	e0 31       	cpi	r30, 0x10	; 16
    30d8:	f1 05       	cpc	r31, r1
    30da:	08 f0       	brcs	.+2      	; 0x30de <menu_screen+0x342>
    30dc:	57 c3       	rjmp	.+1710   	; 0x378c <menu_screen+0x9f0>
    30de:	e6 5d       	subi	r30, 0xD6	; 214
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	0c 94 92 27 	jmp	0x4f24	; 0x4f24 <__tablejump2__>
					case 0:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_DIAL_MIN,pwmDial,0,"Dial light PWM");
    30e6:	40 91 b7 02 	lds	r20, 0x02B7	; 0x8002b7 <pwmDial>
    30ea:	50 91 b8 02 	lds	r21, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    30ee:	01 e5       	ldi	r16, 0x51	; 81
    30f0:	11 e0       	ldi	r17, 0x01	; 1
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	70 e0       	ldi	r23, 0x00	; 0
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	94 e0       	ldi	r25, 0x04	; 4
    30fc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=pwmDial){
    3100:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <pwmDial>
    3104:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    3108:	82 17       	cp	r24, r18
    310a:	93 07       	cpc	r25, r19
    310c:	09 f4       	brne	.+2      	; 0x3110 <menu_screen+0x374>
    310e:	3e c3       	rjmp	.+1660   	; 0x378c <menu_screen+0x9f0>
							pwmDial = newValue;
    3110:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <pwmDial+0x1>
    3114:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <pwmDial>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	64 e0       	ldi	r22, 0x04	; 4
    311c:	88 e0       	ldi	r24, 0x08	; 8
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
							OCR1B = pwmDial;
    3124:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <pwmDial>
    3128:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <pwmDial+0x1>
    312c:	99 bd       	out	0x29, r25	; 41
    312e:	88 bd       	out	0x28, r24	; 40
    3130:	2d c3       	rjmp	.+1626   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 1:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_ARROW_MIN,pwmArrow,0,"Arrow light PWM");
    3132:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <pwmArrow>
    3136:	50 91 ad 02 	lds	r21, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    313a:	00 e6       	ldi	r16, 0x60	; 96
    313c:	11 e0       	ldi	r17, 0x01	; 1
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	94 e0       	ldi	r25, 0x04	; 4
    3148:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=pwmArrow){
    314c:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <pwmArrow>
    3150:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    3154:	82 17       	cp	r24, r18
    3156:	93 07       	cpc	r25, r19
    3158:	09 f4       	brne	.+2      	; 0x315c <menu_screen+0x3c0>
    315a:	18 c3       	rjmp	.+1584   	; 0x378c <menu_screen+0x9f0>
							pwmArrow = newValue;
    315c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <pwmArrow+0x1>
    3160:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <pwmArrow>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	64 e0       	ldi	r22, 0x04	; 4
    3168:	88 e0       	ldi	r24, 0x08	; 8
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
							OCR1A = pwmArrow;
    3170:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <pwmArrow>
    3174:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <pwmArrow+0x1>
    3178:	9b bd       	out	0x2b, r25	; 43
    317a:	8a bd       	out	0x2a, r24	; 42
    317c:	07 c3       	rjmp	.+1550   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 2:
					{
						newValue = set_value(WHEEL_DIAMETER_MAX*1000,WHEEL_DIAMETER_MIN*1000,wheelDiameter*1000,3,"Wheel Diameter (m)");
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4a e7       	ldi	r20, 0x7A	; 122
    3184:	54 e4       	ldi	r21, 0x44	; 68
    3186:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <wheelDiameter>
    318a:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <wheelDiameter+0x1>
    318e:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <wheelDiameter+0x2>
    3192:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <wheelDiameter+0x3>
    3196:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    319a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    319e:	00 e7       	ldi	r16, 0x70	; 112
    31a0:	11 e0       	ldi	r17, 0x01	; 1
    31a2:	23 e0       	ldi	r18, 0x03	; 3
    31a4:	ab 01       	movw	r20, r22
    31a6:	6c e2       	ldi	r22, 0x2C	; 44
    31a8:	71 e0       	ldi	r23, 0x01	; 1
    31aa:	80 ed       	ldi	r24, 0xD0	; 208
    31ac:	97 e0       	ldi	r25, 0x07	; 7
    31ae:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=wheelDiameter*1000){
    31b2:	bc 01       	movw	r22, r24
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    31bc:	6b 01       	movw	r12, r22
    31be:	7c 01       	movw	r14, r24
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	54 e4       	ldi	r21, 0x44	; 68
    31c8:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <wheelDiameter>
    31cc:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <wheelDiameter+0x1>
    31d0:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <wheelDiameter+0x2>
    31d4:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <wheelDiameter+0x3>
    31d8:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    31dc:	9b 01       	movw	r18, r22
    31de:	ac 01       	movw	r20, r24
    31e0:	c7 01       	movw	r24, r14
    31e2:	b6 01       	movw	r22, r12
    31e4:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    31e8:	88 23       	and	r24, r24
    31ea:	09 f4       	brne	.+2      	; 0x31ee <menu_screen+0x452>
    31ec:	cf c2       	rjmp	.+1438   	; 0x378c <menu_screen+0x9f0>
							wheelDiameter = newValue/1000.0;
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	4a e7       	ldi	r20, 0x7A	; 122
    31f4:	54 e4       	ldi	r21, 0x44	; 68
    31f6:	c7 01       	movw	r24, r14
    31f8:	b6 01       	movw	r22, r12
    31fa:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    31fe:	60 93 be 02 	sts	0x02BE, r22	; 0x8002be <wheelDiameter>
    3202:	70 93 bf 02 	sts	0x02BF, r23	; 0x8002bf <wheelDiameter+0x1>
    3206:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <wheelDiameter+0x2>
    320a:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <wheelDiameter+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    320e:	41 e0       	ldi	r20, 0x01	; 1
    3210:	64 e0       	ldi	r22, 0x04	; 4
    3212:	88 e0       	ldi	r24, 0x08	; 8
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    321a:	b8 c2       	rjmp	.+1392   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 3:
					{
						newValue = set_value(GEAR_RATIO_MAX*1000,GEAR_RATIO_MIN*1000,gearRatio*1000,3,"Gear ratio");
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a e7       	ldi	r20, 0x7A	; 122
    3222:	54 e4       	ldi	r21, 0x44	; 68
    3224:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <gearRatio>
    3228:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <gearRatio+0x1>
    322c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <gearRatio+0x2>
    3230:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <gearRatio+0x3>
    3234:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    3238:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    323c:	03 e8       	ldi	r16, 0x83	; 131
    323e:	11 e0       	ldi	r17, 0x01	; 1
    3240:	23 e0       	ldi	r18, 0x03	; 3
    3242:	ab 01       	movw	r20, r22
    3244:	64 e6       	ldi	r22, 0x64	; 100
    3246:	70 e0       	ldi	r23, 0x00	; 0
    3248:	88 ee       	ldi	r24, 0xE8	; 232
    324a:	93 e0       	ldi	r25, 0x03	; 3
    324c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=gearRatio*1000){
    3250:	bc 01       	movw	r22, r24
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    325a:	6b 01       	movw	r12, r22
    325c:	7c 01       	movw	r14, r24
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	4a e7       	ldi	r20, 0x7A	; 122
    3264:	54 e4       	ldi	r21, 0x44	; 68
    3266:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <gearRatio>
    326a:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <gearRatio+0x1>
    326e:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <gearRatio+0x2>
    3272:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <gearRatio+0x3>
    3276:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    327a:	9b 01       	movw	r18, r22
    327c:	ac 01       	movw	r20, r24
    327e:	c7 01       	movw	r24, r14
    3280:	b6 01       	movw	r22, r12
    3282:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    3286:	88 23       	and	r24, r24
    3288:	09 f4       	brne	.+2      	; 0x328c <menu_screen+0x4f0>
    328a:	80 c2       	rjmp	.+1280   	; 0x378c <menu_screen+0x9f0>
							gearRatio = newValue/1000.0;
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a e7       	ldi	r20, 0x7A	; 122
    3292:	54 e4       	ldi	r21, 0x44	; 68
    3294:	c7 01       	movw	r24, r14
    3296:	b6 01       	movw	r22, r12
    3298:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    329c:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <gearRatio>
    32a0:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <gearRatio+0x1>
    32a4:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <gearRatio+0x2>
    32a8:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <gearRatio+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    32ac:	41 e0       	ldi	r20, 0x01	; 1
    32ae:	64 e0       	ldi	r22, 0x04	; 4
    32b0:	88 e0       	ldi	r24, 0x08	; 8
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    32b8:	69 c2       	rjmp	.+1234   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 4:
					{
						newValue = set_value(MAGNETS_ON_WHEEL_MAX,MAGNETS_ON_WHEEL_MIN,magnetsOnWheel,0,"Magnets on wheel");
    32ba:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <magnetsOnWheel>
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	0e e8       	ldi	r16, 0x8E	; 142
    32c2:	11 e0       	ldi	r17, 0x01	; 1
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	61 e0       	ldi	r22, 0x01	; 1
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	80 e1       	ldi	r24, 0x10	; 16
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=magnetsOnWheel){
    32d2:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <magnetsOnWheel>
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	82 17       	cp	r24, r18
    32da:	93 07       	cpc	r25, r19
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <menu_screen+0x544>
    32de:	56 c2       	rjmp	.+1196   	; 0x378c <menu_screen+0x9f0>
							magnetsOnWheel = newValue;
    32e0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <magnetsOnWheel>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	64 e0       	ldi	r22, 0x04	; 4
    32e8:	88 e0       	ldi	r24, 0x08	; 8
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    32f0:	4d c2       	rjmp	.+1178   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 5:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_MODE_MIN,stepMode,0,"1-full, 2-half");
    32f2:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <stepMode>
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	0f e9       	ldi	r16, 0x9F	; 159
    32fa:	11 e0       	ldi	r17, 0x01	; 1
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	61 e0       	ldi	r22, 0x01	; 1
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=stepMode){
    330a:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <stepMode>
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	82 17       	cp	r24, r18
    3312:	93 07       	cpc	r25, r19
    3314:	09 f4       	brne	.+2      	; 0x3318 <menu_screen+0x57c>
    3316:	3a c2       	rjmp	.+1140   	; 0x378c <menu_screen+0x9f0>
							stepMode = newValue;
    3318:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepMode>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    331c:	41 e0       	ldi	r20, 0x01	; 1
    331e:	64 e0       	ldi	r22, 0x04	; 4
    3320:	88 e0       	ldi	r24, 0x08	; 8
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    3328:	31 c2       	rjmp	.+1122   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 6:
					{
						newValue = set_value(SCALE_MAX_MAX,SCALE_MAX_MIN,scaleMax,0,"Maximum speed");
    332a:	40 91 ab 02 	lds	r20, 0x02AB	; 0x8002ab <scaleMax>
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	0e ea       	ldi	r16, 0xAE	; 174
    3332:	11 e0       	ldi	r17, 0x01	; 1
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	64 e1       	ldi	r22, 0x14	; 20
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	80 e9       	ldi	r24, 0x90	; 144
    333c:	91 e0       	ldi	r25, 0x01	; 1
    333e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=scaleMax){
    3342:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <scaleMax>
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	82 17       	cp	r24, r18
    334a:	93 07       	cpc	r25, r19
    334c:	09 f4       	brne	.+2      	; 0x3350 <menu_screen+0x5b4>
    334e:	1e c2       	rjmp	.+1084   	; 0x378c <menu_screen+0x9f0>
							scaleMax = newValue;
    3350:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <scaleMax>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3354:	41 e0       	ldi	r20, 0x01	; 1
    3356:	64 e0       	ldi	r22, 0x04	; 4
    3358:	88 e0       	ldi	r24, 0x08	; 8
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    3360:	15 c2       	rjmp	.+1066   	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 7:
					{
						newValue = set_value(DEGREES_PER_KMH_MAX*1000,DEGREES_PER_KMH_MIN*1000,degreesPerKmh*1000,3,"Degrees per km/h");
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a e7       	ldi	r20, 0x7A	; 122
    3368:	54 e4       	ldi	r21, 0x44	; 68
    336a:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <degreesPerKmh>
    336e:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <degreesPerKmh+0x1>
    3372:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <degreesPerKmh+0x2>
    3376:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <degreesPerKmh+0x3>
    337a:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    337e:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3382:	0c eb       	ldi	r16, 0xBC	; 188
    3384:	11 e0       	ldi	r17, 0x01	; 1
    3386:	23 e0       	ldi	r18, 0x03	; 3
    3388:	ab 01       	movw	r20, r22
    338a:	64 e6       	ldi	r22, 0x64	; 100
    338c:	70 e0       	ldi	r23, 0x00	; 0
    338e:	88 e8       	ldi	r24, 0x88	; 136
    3390:	93 e1       	ldi	r25, 0x13	; 19
    3392:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=degreesPerKmh*1000){
    3396:	bc 01       	movw	r22, r24
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    33a0:	6b 01       	movw	r12, r22
    33a2:	7c 01       	movw	r14, r24
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	4a e7       	ldi	r20, 0x7A	; 122
    33aa:	54 e4       	ldi	r21, 0x44	; 68
    33ac:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <degreesPerKmh>
    33b0:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <degreesPerKmh+0x1>
    33b4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <degreesPerKmh+0x2>
    33b8:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <degreesPerKmh+0x3>
    33bc:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    33c0:	9b 01       	movw	r18, r22
    33c2:	ac 01       	movw	r20, r24
    33c4:	c7 01       	movw	r24, r14
    33c6:	b6 01       	movw	r22, r12
    33c8:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    33cc:	88 23       	and	r24, r24
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <menu_screen+0x636>
    33d0:	dd c1       	rjmp	.+954    	; 0x378c <menu_screen+0x9f0>
							degreesPerKmh = newValue/1000.0;
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a e7       	ldi	r20, 0x7A	; 122
    33d8:	54 e4       	ldi	r21, 0x44	; 68
    33da:	c7 01       	movw	r24, r14
    33dc:	b6 01       	movw	r22, r12
    33de:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__divsf3>
    33e2:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <degreesPerKmh>
    33e6:	70 93 af 02 	sts	0x02AF, r23	; 0x8002af <degreesPerKmh+0x1>
    33ea:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <degreesPerKmh+0x2>
    33ee:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <degreesPerKmh+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    33f2:	41 e0       	ldi	r20, 0x01	; 1
    33f4:	64 e0       	ldi	r22, 0x04	; 4
    33f6:	88 e0       	ldi	r24, 0x08	; 8
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    33fe:	c6 c1       	rjmp	.+908    	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 8:
					{
						newValue = set_value(STEPPER_MOTOR_STEPS_MAX,STEPPER_MOTOR_STEPS_MIN,smSteps,0,"Stepper motor steps");
    3400:	40 91 b9 02 	lds	r20, 0x02B9	; 0x8002b9 <smSteps>
    3404:	50 91 ba 02 	lds	r21, 0x02BA	; 0x8002ba <smSteps+0x1>
    3408:	0d ec       	ldi	r16, 0xCD	; 205
    340a:	11 e0       	ldi	r17, 0x01	; 1
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	60 e1       	ldi	r22, 0x10	; 16
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	80 e9       	ldi	r24, 0x90	; 144
    3414:	91 e0       	ldi	r25, 0x01	; 1
    3416:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=smSteps){
    341a:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <smSteps>
    341e:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <smSteps+0x1>
    3422:	82 17       	cp	r24, r18
    3424:	93 07       	cpc	r25, r19
    3426:	09 f4       	brne	.+2      	; 0x342a <menu_screen+0x68e>
    3428:	b1 c1       	rjmp	.+866    	; 0x378c <menu_screen+0x9f0>
							smSteps = newValue;
    342a:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <smSteps+0x1>
    342e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <smSteps>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3432:	41 e0       	ldi	r20, 0x01	; 1
    3434:	64 e0       	ldi	r22, 0x04	; 4
    3436:	88 e0       	ldi	r24, 0x08	; 8
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    343e:	a6 c1       	rjmp	.+844    	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 9:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_INTERVAL_MIN,stepInterval,0,"Step interval X64us");
    3440:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <stepInterval>
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	01 ee       	ldi	r16, 0xE1	; 225
    3448:	11 e0       	ldi	r17, 0x01	; 1
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	62 e3       	ldi	r22, 0x32	; 50
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=stepInterval){
    3458:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <stepInterval>
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	82 17       	cp	r24, r18
    3460:	93 07       	cpc	r25, r19
    3462:	09 f4       	brne	.+2      	; 0x3466 <menu_screen+0x6ca>
    3464:	93 c1       	rjmp	.+806    	; 0x378c <menu_screen+0x9f0>
							stepInterval = newValue;
    3466:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <stepInterval>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	64 e0       	ldi	r22, 0x04	; 4
    346e:	88 e0       	ldi	r24, 0x08	; 8
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    3476:	8a c1       	rjmp	.+788    	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 10:
					{
						newValue = set_value(LCD_CONTRAST_MAX,LCD_CONTRAST_MIN,lcdContrast,0,"LCD contrast");
    3478:	40 91 b2 02 	lds	r20, 0x02B2	; 0x8002b2 <lcdContrast>
    347c:	50 e0       	ldi	r21, 0x00	; 0
    347e:	07 e0       	ldi	r16, 0x07	; 7
    3480:	11 e0       	ldi	r17, 0x01	; 1
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	62 e3       	ldi	r22, 0x32	; 50
    3486:	70 e0       	ldi	r23, 0x00	; 0
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <set_value>
						if (newValue!=lcdContrast){
    3490:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <lcdContrast>
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	82 17       	cp	r24, r18
    3498:	93 07       	cpc	r25, r19
    349a:	09 f4       	brne	.+2      	; 0x349e <menu_screen+0x702>
    349c:	77 c1       	rjmp	.+750    	; 0x378c <menu_screen+0x9f0>
							lcdContrast = newValue;
    349e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <lcdContrast>
							GLCD_SetContrast(lcdContrast);
    34a2:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <GLCD_SetContrast>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    34a6:	41 e0       	ldi	r20, 0x01	; 1
    34a8:	64 e0       	ldi	r22, 0x04	; 4
    34aa:	88 e0       	ldi	r24, 0x08	; 8
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
    34b2:	6c c1       	rjmp	.+728    	; 0x378c <menu_screen+0x9f0>
						}
						break;
					}
					case 11:
					{
						debugMode = debugMode^_BV(0);
    34b4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <debugMode>
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	89 27       	eor	r24, r25
    34bc:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <debugMode>
						while (button_monitor());
    34c0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    34c4:	81 11       	cpse	r24, r1
    34c6:	fc cf       	rjmp	.-8      	; 0x34c0 <menu_screen+0x724>
						main();
    34c8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <main>
						break;
					}
					case 12:
					{
						arrow_calibration();
    34cc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <arrow_calibration>
						break;
    34d0:	5d c1       	rjmp	.+698    	; 0x378c <menu_screen+0x9f0>
					}
					case 13:
					{
						uint8_t yesOrNo = 0;
												
						GLCD_Clear();
    34d2:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
						GLCD_GotoLine(2);
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
						GLCD_GotoX(45);
    34dc:	8d e2       	ldi	r24, 0x2D	; 45
    34de:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
						GLCD_PrintString("RESET");
    34e2:	85 ef       	ldi	r24, 0xF5	; 245
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
						GLCD_GotoLine(4);
    34ea:	84 e0       	ldi	r24, 0x04	; 4
    34ec:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
						GLCD_GotoX(34);
    34f0:	82 e2       	ldi	r24, 0x22	; 34
    34f2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
						GLCD_PrintString("ODOMETER?");
    34f6:	8b ef       	ldi	r24, 0xFB	; 251
    34f8:	91 e0       	ldi	r25, 0x01	; 1
    34fa:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
																			
						GLCD_GotoLine(6);
    34fe:	86 e0       	ldi	r24, 0x06	; 6
    3500:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
						GLCD_GotoX(28);
    3504:	8c e1       	ldi	r24, 0x1C	; 28
    3506:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
						GLCD_PrintString("NO");
    350a:	85 e0       	ldi	r24, 0x05	; 5
    350c:	92 e0       	ldi	r25, 0x02	; 2
    350e:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
						GLCD_GotoX(84);
    3512:	84 e5       	ldi	r24, 0x54	; 84
    3514:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
						GLCD_PrintString("YES");
    3518:	88 e0       	ldi	r24, 0x08	; 8
    351a:	92 e0       	ldi	r25, 0x02	; 2
    351c:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
						arrow_calibration();
						break;
					}
					case 13:
					{
						uint8_t yesOrNo = 0;
    3520:	c0 e0       	ldi	r28, 0x00	; 0
						GLCD_PrintString("NO");
						GLCD_GotoX(84);
						GLCD_PrintString("YES");
												
reset_odometer:
						GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    3522:	0f 2e       	mov	r0, r31
    3524:	fb e3       	ldi	r31, 0x3B	; 59
    3526:	ff 2e       	mov	r15, r31
    3528:	f0 2d       	mov	r31, r0
						GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    352a:	0f 2e       	mov	r0, r31
    352c:	f4 e1       	ldi	r31, 0x14	; 20
    352e:	cf 2e       	mov	r12, r31
    3530:	f0 2d       	mov	r31, r0
    3532:	19 e6       	ldi	r17, 0x69	; 105
						GLCD_Render();
						while(button_monitor());
						while(1){
							uint8_t button = button_monitor();
							if ((button==2)||(button==3)){
								yesOrNo = yesOrNo^_BV(0);
    3534:	d1 e0       	ldi	r29, 0x01	; 1
						GLCD_PrintString("NO");
						GLCD_GotoX(84);
						GLCD_PrintString("YES");
												
reset_odometer:
						GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    3536:	cf 9d       	mul	r28, r15
    3538:	80 2d       	mov	r24, r0
    353a:	11 24       	eor	r1, r1
    353c:	4e e2       	ldi	r20, 0x2E	; 46
    353e:	48 0f       	add	r20, r24
    3540:	0f ef       	ldi	r16, 0xFF	; 255
    3542:	29 e3       	ldi	r18, 0x39	; 57
    3544:	6d e2       	ldi	r22, 0x2D	; 45
    3546:	8c 5e       	subi	r24, 0xEC	; 236
    3548:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
						GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    354c:	c1 11       	cpse	r28, r1
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <menu_screen+0x7ba>
    3550:	41 2f       	mov	r20, r17
    3552:	8f e4       	ldi	r24, 0x4F	; 79
    3554:	02 c0       	rjmp	.+4      	; 0x355a <menu_screen+0x7be>
    3556:	4e e2       	ldi	r20, 0x2E	; 46
    3558:	8c 2d       	mov	r24, r12
    355a:	00 e0       	ldi	r16, 0x00	; 0
    355c:	29 e3       	ldi	r18, 0x39	; 57
    355e:	6d e2       	ldi	r22, 0x2D	; 45
    3560:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
						GLCD_Render();
    3564:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
						while(button_monitor());
    3568:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    356c:	81 11       	cpse	r24, r1
    356e:	fc cf       	rjmp	.-8      	; 0x3568 <menu_screen+0x7cc>
						while(1){
							uint8_t button = button_monitor();
    3570:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
							if ((button==2)||(button==3)){
    3574:	9e ef       	ldi	r25, 0xFE	; 254
    3576:	98 0f       	add	r25, r24
    3578:	92 30       	cpi	r25, 0x02	; 2
    357a:	30 f4       	brcc	.+12     	; 0x3588 <menu_screen+0x7ec>
								yesOrNo = yesOrNo^_BV(0);
    357c:	cd 27       	eor	r28, r29
								while(button_monitor());
    357e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    3582:	81 11       	cpse	r24, r1
    3584:	fc cf       	rjmp	.-8      	; 0x357e <menu_screen+0x7e2>
    3586:	d7 cf       	rjmp	.-82     	; 0x3536 <menu_screen+0x79a>
								goto reset_odometer;
							}
							else if(button==1){
    3588:	81 30       	cpi	r24, 0x01	; 1
    358a:	91 f7       	brne	.-28     	; 0x3570 <menu_screen+0x7d4>
								if (yesOrNo){
    358c:	cc 23       	and	r28, r28
    358e:	09 f4       	brne	.+2      	; 0x3592 <menu_screen+0x7f6>
    3590:	fd c0       	rjmp	.+506    	; 0x378c <menu_screen+0x9f0>
									GLCD_Clear();
    3592:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
									GLCD_GotoLine(1);
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
									GLCD_GotoX(8);
    359c:	88 e0       	ldi	r24, 0x08	; 8
    359e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
									GLCD_PrintString("RESETING ODOMETER");
    35a2:	8c e0       	ldi	r24, 0x0C	; 12
    35a4:	92 e0       	ldi	r25, 0x02	; 2
    35a6:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
															
									GLCD_GotoLine(3);
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
									GLCD_GotoX(2);
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
									GLCD_PrintString("Cells cleared");
    35b6:	8e e1       	ldi	r24, 0x1E	; 30
    35b8:	92 e0       	ldi	r25, 0x02	; 2
    35ba:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
									GLCD_Render();
    35be:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
									//odometer reset
									totalRotations = 0;
    35c2:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <totalRotations>
    35c6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <totalRotations+0x1>
    35ca:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <totalRotations+0x2>
    35ce:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <totalRotations+0x3>
    35d2:	c1 2c       	mov	r12, r1
    35d4:	d1 2c       	mov	r13, r1
    35d6:	76 01       	movw	r14, r12
    35d8:	c3 94       	inc	r12
									for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
										eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    35da:	43 e0       	ldi	r20, 0x03	; 3
    35dc:	64 e0       	ldi	r22, 0x04	; 4
    35de:	80 e8       	ldi	r24, 0x80	; 128
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
									GLCD_GotoX(83);
    35e6:	83 e5       	ldi	r24, 0x53	; 83
    35e8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
									GLCD_PrintInteger(i+1);
    35ec:	c7 01       	movw	r24, r14
    35ee:	b6 01       	movw	r22, r12
    35f0:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
									GLCD_PrintString("/");
    35f4:	8c e2       	ldi	r24, 0x2C	; 44
    35f6:	92 e0       	ldi	r25, 0x02	; 2
    35f8:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
									GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
    35fc:	65 e0       	ldi	r22, 0x05	; 5
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
									GLCD_Render();
    3608:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
    360c:	8f ef       	ldi	r24, 0xFF	; 255
    360e:	c8 1a       	sub	r12, r24
    3610:	d8 0a       	sbc	r13, r24
    3612:	e8 0a       	sbc	r14, r24
    3614:	f8 0a       	sbc	r15, r24
									GLCD_GotoX(2);
									GLCD_PrintString("Cells cleared");
									GLCD_Render();
									//odometer reset
									totalRotations = 0;
									for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    3616:	86 e0       	ldi	r24, 0x06	; 6
    3618:	c8 16       	cp	r12, r24
    361a:	d1 04       	cpc	r13, r1
    361c:	e1 04       	cpc	r14, r1
    361e:	f1 04       	cpc	r15, r1
    3620:	e1 f6       	brne	.-72     	; 0x35da <menu_screen+0x83e>
									GLCD_PrintInteger(i+1);
									GLCD_PrintString("/");
									GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
									GLCD_Render();
									}
									GLCD_GotoLine(6);
    3622:	86 e0       	ldi	r24, 0x06	; 6
    3624:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
									GLCD_GotoX(45);
    3628:	8d e2       	ldi	r24, 0x2D	; 45
    362a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
									GLCD_PrintString("DONE!");
    362e:	8e e2       	ldi	r24, 0x2E	; 46
    3630:	92 e0       	ldi	r25, 0x02	; 2
    3632:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
									GLCD_Render();
    3636:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
									while(button_monitor());
    363a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    363e:	81 11       	cpse	r24, r1
    3640:	fc cf       	rjmp	.-8      	; 0x363a <menu_screen+0x89e>
									while(!button_monitor());
    3642:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    3646:	88 23       	and	r24, r24
    3648:	e1 f3       	breq	.-8      	; 0x3642 <menu_screen+0x8a6>
    364a:	a0 c0       	rjmp	.+320    	; 0x378c <menu_screen+0x9f0>
					}
					case 14:
					{
					//load defaults
					uint8_t yesOrNo = 0;
					GLCD_Clear();
    364c:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
					GLCD_GotoLine(2);
    3650:	82 e0       	ldi	r24, 0x02	; 2
    3652:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
					GLCD_GotoX(40);
    3656:	88 e2       	ldi	r24, 0x28	; 40
    3658:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
					GLCD_PrintString("RESTORE");
    365c:	84 e3       	ldi	r24, 0x34	; 52
    365e:	92 e0       	ldi	r25, 0x02	; 2
    3660:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
					GLCD_GotoLine(4);
    3664:	84 e0       	ldi	r24, 0x04	; 4
    3666:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
					GLCD_GotoX(20);
    366a:	84 e1       	ldi	r24, 0x14	; 20
    366c:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
					GLCD_PrintString("DEFAULT values?");
    3670:	8c e3       	ldi	r24, 0x3C	; 60
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
										
					GLCD_GotoLine(6);
    3678:	86 e0       	ldi	r24, 0x06	; 6
    367a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
					GLCD_GotoX(28);
    367e:	8c e1       	ldi	r24, 0x1C	; 28
    3680:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
					GLCD_PrintString("NO");
    3684:	85 e0       	ldi	r24, 0x05	; 5
    3686:	92 e0       	ldi	r25, 0x02	; 2
    3688:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
					GLCD_GotoX(84);
    368c:	84 e5       	ldi	r24, 0x54	; 84
    368e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
					GLCD_PrintString("YES");
    3692:	88 e0       	ldi	r24, 0x08	; 8
    3694:	92 e0       	ldi	r25, 0x02	; 2
    3696:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
						break;
					}
					case 14:
					{
					//load defaults
					uint8_t yesOrNo = 0;
    369a:	c0 e0       	ldi	r28, 0x00	; 0
					GLCD_PrintString("NO");
					GLCD_GotoX(84);
					GLCD_PrintString("YES");
											
restore_defaults:
					GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    369c:	0f 2e       	mov	r0, r31
    369e:	fb e3       	ldi	r31, 0x3B	; 59
    36a0:	ff 2e       	mov	r15, r31
    36a2:	f0 2d       	mov	r31, r0
					GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    36a4:	0f 2e       	mov	r0, r31
    36a6:	f4 e1       	ldi	r31, 0x14	; 20
    36a8:	cf 2e       	mov	r12, r31
    36aa:	f0 2d       	mov	r31, r0
    36ac:	19 e6       	ldi	r17, 0x69	; 105
										
					while(button_monitor());
					while(1){
						uint8_t button = button_monitor();
						if ((button==2)||(button==3)){
							yesOrNo = yesOrNo^_BV(0);
    36ae:	d1 e0       	ldi	r29, 0x01	; 1
					GLCD_PrintString("NO");
					GLCD_GotoX(84);
					GLCD_PrintString("YES");
											
restore_defaults:
					GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    36b0:	cf 9d       	mul	r28, r15
    36b2:	80 2d       	mov	r24, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	4e e2       	ldi	r20, 0x2E	; 46
    36b8:	48 0f       	add	r20, r24
    36ba:	0f ef       	ldi	r16, 0xFF	; 255
    36bc:	29 e3       	ldi	r18, 0x39	; 57
    36be:	6d e2       	ldi	r22, 0x2D	; 45
    36c0:	8c 5e       	subi	r24, 0xEC	; 236
    36c2:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
					GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    36c6:	c1 11       	cpse	r28, r1
    36c8:	03 c0       	rjmp	.+6      	; 0x36d0 <menu_screen+0x934>
    36ca:	41 2f       	mov	r20, r17
    36cc:	8f e4       	ldi	r24, 0x4F	; 79
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <menu_screen+0x938>
    36d0:	4e e2       	ldi	r20, 0x2E	; 46
    36d2:	8c 2d       	mov	r24, r12
    36d4:	00 e0       	ldi	r16, 0x00	; 0
    36d6:	29 e3       	ldi	r18, 0x39	; 57
    36d8:	6d e2       	ldi	r22, 0x2D	; 45
    36da:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <GLCD_DrawRectangle>
					GLCD_Render();
    36de:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
										
					while(button_monitor());
    36e2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    36e6:	81 11       	cpse	r24, r1
    36e8:	fc cf       	rjmp	.-8      	; 0x36e2 <menu_screen+0x946>
					while(1){
						uint8_t button = button_monitor();
    36ea:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
						if ((button==2)||(button==3)){
    36ee:	9e ef       	ldi	r25, 0xFE	; 254
    36f0:	98 0f       	add	r25, r24
    36f2:	92 30       	cpi	r25, 0x02	; 2
    36f4:	30 f4       	brcc	.+12     	; 0x3702 <menu_screen+0x966>
							yesOrNo = yesOrNo^_BV(0);
    36f6:	cd 27       	eor	r28, r29
							while(button_monitor());
    36f8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    36fc:	81 11       	cpse	r24, r1
    36fe:	fc cf       	rjmp	.-8      	; 0x36f8 <menu_screen+0x95c>
    3700:	d7 cf       	rjmp	.-82     	; 0x36b0 <menu_screen+0x914>
							goto restore_defaults;
						}
						else if(button==1){
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	91 f7       	brne	.-28     	; 0x36ea <menu_screen+0x94e>
							if (yesOrNo){
    3706:	cc 23       	and	r28, r28
    3708:	09 f4       	brne	.+2      	; 0x370c <menu_screen+0x970>
    370a:	40 c0       	rjmp	.+128    	; 0x378c <menu_screen+0x9f0>
								GLCD_Clear();
    370c:	0e 94 1a 20 	call	0x4034	; 0x4034 <GLCD_Clear>
								GLCD_GotoLine(3);
    3710:	83 e0       	ldi	r24, 0x03	; 3
    3712:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
								GLCD_GotoX(8);
    3716:	88 e0       	ldi	r24, 0x08	; 8
    3718:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
								GLCD_PrintString("LOADING DEFAULTS...");
    371c:	8c e4       	ldi	r24, 0x4C	; 76
    371e:	92 e0       	ldi	r25, 0x02	; 2
    3720:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
								GLCD_Render();
    3724:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
								default_values();
    3728:	0e 94 09 0b 	call	0x1612	; 0x1612 <default_values>
								eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	64 e0       	ldi	r22, 0x04	; 4
    3730:	88 e0       	ldi	r24, 0x08	; 8
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <eep_operations>
								GLCD_GotoLine(5);
    3738:	85 e0       	ldi	r24, 0x05	; 5
    373a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <GLCD_GotoLine>
								GLCD_GotoX(45);
    373e:	8d e2       	ldi	r24, 0x2D	; 45
    3740:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
								GLCD_PrintString("DONE!");
    3744:	8e e2       	ldi	r24, 0x2E	; 46
    3746:	92 e0       	ldi	r25, 0x02	; 2
    3748:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
								GLCD_Render();
    374c:	0e 94 49 1c 	call	0x3892	; 0x3892 <GLCD_Render>
								while(button_monitor());
    3750:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    3754:	81 11       	cpse	r24, r1
    3756:	fc cf       	rjmp	.-8      	; 0x3750 <menu_screen+0x9b4>
								while(!button_monitor());
    3758:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    375c:	88 23       	and	r24, r24
    375e:	e1 f3       	breq	.-8      	; 0x3758 <menu_screen+0x9bc>
    3760:	15 c0       	rjmp	.+42     	; 0x378c <menu_screen+0x9f0>
						break;
					}
					case 15:
					{
						//exit menu
						while (button_monitor());
    3762:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    3766:	81 11       	cpse	r24, r1
    3768:	fc cf       	rjmp	.-8      	; 0x3762 <menu_screen+0x9c6>
						main();
    376a:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <main>
					}
				}//
			}
		else if(currentButton == 2)	menuItem++;
    376e:	82 30       	cpi	r24, 0x02	; 2
    3770:	31 f4       	brne	.+12     	; 0x377e <menu_screen+0x9e2>
    3772:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <menuItem.2778>
    3776:	8f 5f       	subi	r24, 0xFF	; 255
    3778:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <menuItem.2778>
    377c:	07 c0       	rjmp	.+14     	; 0x378c <menu_screen+0x9f0>
		else if(currentButton == 3)	menuItem--;
    377e:	83 30       	cpi	r24, 0x03	; 3
    3780:	29 f4       	brne	.+10     	; 0x378c <menu_screen+0x9f0>
    3782:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <menuItem.2778>
    3786:	81 50       	subi	r24, 0x01	; 1
    3788:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <menuItem.2778>
		while (!button_monitor());
    378c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_monitor>
    3790:	88 23       	and	r24, r24
    3792:	e1 f3       	breq	.-8      	; 0x378c <menu_screen+0x9f0>
		menu_screen();
    3794:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <menu_screen>

00003798 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    3798:	66 95       	lsr	r22
    379a:	66 95       	lsr	r22
    379c:	66 95       	lsr	r22
    379e:	90 e8       	ldi	r25, 0x80	; 128
    37a0:	69 9f       	mul	r22, r25
    37a2:	b0 01       	movw	r22, r0
    37a4:	11 24       	eor	r1, r1
    37a6:	68 0f       	add	r22, r24
    37a8:	71 1d       	adc	r23, r1
    37aa:	fb 01       	movw	r30, r22
    37ac:	e4 53       	subi	r30, 0x34	; 52
    37ae:	fd 4f       	sbci	r31, 0xFD	; 253
    37b0:	40 83       	st	Z, r20
    37b2:	08 95       	ret

000037b4 <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    37b4:	66 95       	lsr	r22
    37b6:	66 95       	lsr	r22
    37b8:	66 95       	lsr	r22
    37ba:	90 e8       	ldi	r25, 0x80	; 128
    37bc:	69 9f       	mul	r22, r25
    37be:	b0 01       	movw	r22, r0
    37c0:	11 24       	eor	r1, r1
    37c2:	68 0f       	add	r22, r24
    37c4:	71 1d       	adc	r23, r1
    37c6:	fb 01       	movw	r30, r22
    37c8:	e4 53       	subi	r30, 0x34	; 52
    37ca:	fd 4f       	sbci	r31, 0xFD	; 253
}
    37cc:	80 81       	ld	r24, Z
    37ce:	08 95       	ret

000037d0 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	c8 2f       	mov	r28, r24
    37dc:	06 2f       	mov	r16, r22
    37de:	17 2f       	mov	r17, r23
    37e0:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    37e2:	0e 94 a6 24 	call	0x494c	; 0x494c <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    37e6:	0e 94 a3 24 	call	0x4946	; 0x4946 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    37ea:	88 30       	cpi	r24, 0x08	; 8
    37ec:	31 f0       	breq	.+12     	; 0x37fa <GLCD_Send+0x2a>
    37ee:	80 31       	cpi	r24, 0x10	; 16
    37f0:	21 f0       	breq	.+8      	; 0x37fa <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__GLCD>
				break;
    37f8:	33 c0       	rjmp	.+102    	; 0x3860 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    37fa:	88 e7       	ldi	r24, 0x78	; 120
    37fc:	0e 94 b4 24 	call	0x4968	; 0x4968 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3800:	0e 94 a3 24 	call	0x4946	; 0x4946 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    3804:	88 31       	cpi	r24, 0x18	; 24
    3806:	31 f0       	breq	.+12     	; 0x3814 <GLCD_Send+0x44>
    3808:	80 32       	cpi	r24, 0x20	; 32
    380a:	21 f0       	breq	.+8      	; 0x3814 <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__GLCD>
				break;
    3812:	26 c0       	rjmp	.+76     	; 0x3860 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    3814:	8c 2f       	mov	r24, r28
    3816:	0e 94 b4 24 	call	0x4968	; 0x4968 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    381a:	0e 94 a3 24 	call	0x4946	; 0x4946 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    381e:	88 32       	cpi	r24, 0x28	; 40
    3820:	19 f4       	brne	.+6      	; 0x3828 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3822:	f1 10       	cpse	r15, r1
    3824:	07 c0       	rjmp	.+14     	; 0x3834 <GLCD_Send+0x64>
    3826:	1a c0       	rjmp	.+52     	; 0x385c <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3828:	80 33       	cpi	r24, 0x30	; 48
    382a:	d9 f3       	breq	.-10     	; 0x3822 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__GLCD>
				break;
    3832:	16 c0       	rjmp	.+44     	; 0x3860 <GLCD_Send+0x90>
    3834:	c0 2f       	mov	r28, r16
    3836:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    3838:	8e 01       	movw	r16, r28
    383a:	0f 5f       	subi	r16, 0xFF	; 255
    383c:	1f 4f       	sbci	r17, 0xFF	; 255
    383e:	fa 94       	dec	r15
    3840:	0f 0d       	add	r16, r15
    3842:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    3844:	89 91       	ld	r24, Y+
    3846:	0e 94 b4 24 	call	0x4968	; 0x4968 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    384a:	0e 94 a3 24 	call	0x4946	; 0x4946 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    384e:	88 32       	cpi	r24, 0x28	; 40
    3850:	11 f0       	breq	.+4      	; 0x3856 <GLCD_Send+0x86>
    3852:	80 33       	cpi	r24, 0x30	; 48
    3854:	19 f4       	brne	.+6      	; 0x385c <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3856:	c0 17       	cp	r28, r16
    3858:	d1 07       	cpc	r29, r17
    385a:	a1 f7       	brne	.-24     	; 0x3844 <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    385c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    3860:	0e 94 ae 24 	call	0x495c	; 0x495c <TWI_EndTransmission>
}
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	08 95       	ret

00003870 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	1f 92       	push	r1
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	be 01       	movw	r22, r28
    3880:	6f 5f       	subi	r22, 0xFF	; 255
    3882:	7f 4f       	sbci	r23, 0xFF	; 255
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <GLCD_Send>
}
    388a:	0f 90       	pop	r0
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	08 95       	ret

00003892 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    3896:	81 e2       	ldi	r24, 0x21	; 33
    3898:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    38a2:	8f e7       	ldi	r24, 0x7F	; 127
    38a4:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    38a8:	82 e2       	ldi	r24, 0x22	; 34
    38aa:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    38b4:	87 e0       	ldi	r24, 0x07	; 7
    38b6:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
    38ba:	c0 e0       	ldi	r28, 0x00	; 0
    38bc:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    38be:	be 01       	movw	r22, r28
    38c0:	62 95       	swap	r22
    38c2:	72 95       	swap	r23
    38c4:	70 7f       	andi	r23, 0xF0	; 240
    38c6:	76 27       	eor	r23, r22
    38c8:	60 7f       	andi	r22, 0xF0	; 240
    38ca:	76 27       	eor	r23, r22
    38cc:	64 53       	subi	r22, 0x34	; 52
    38ce:	7d 4f       	sbci	r23, 0xFD	; 253
    38d0:	40 e1       	ldi	r20, 0x10	; 16
    38d2:	80 e4       	ldi	r24, 0x40	; 64
    38d4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <GLCD_Send>
    38d8:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    38da:	c0 34       	cpi	r28, 0x40	; 64
    38dc:	d1 05       	cpc	r29, r1
    38de:	79 f7       	brne	.-34     	; 0x38be <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    38e6:	cf 93       	push	r28
    38e8:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    38ea:	81 e8       	ldi	r24, 0x81	; 129
    38ec:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    38f0:	8c 2f       	mov	r24, r28
    38f2:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
}
    38f6:	cf 91       	pop	r28
    38f8:	08 95       	ret

000038fa <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    38fa:	88 23       	and	r24, r24
    38fc:	14 f0       	brlt	.+4      	; 0x3902 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    38fe:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <__GLCD+0x1>
    3902:	08 95       	ret

00003904 <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    3904:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    3908:	90 34       	cpi	r25, 0x40	; 64
    390a:	10 f4       	brcc	.+4      	; 0x3910 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    390c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__GLCD+0x2>
    3910:	08 95       	ret

00003912 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    3912:	cf 93       	push	r28
    3914:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    3916:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <GLCD_GotoX>
	GLCD_GotoY(Y);
    391a:	8c 2f       	mov	r24, r28
    391c:	0e 94 82 1c 	call	0x3904	; 0x3904 <GLCD_GotoY>
}
    3920:	cf 91       	pop	r28
    3922:	08 95       	ret

00003924 <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    3924:	0e 94 99 24 	call	0x4932	; 0x4932 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    3928:	8e ea       	ldi	r24, 0xAE	; 174
    392a:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    392e:	85 ed       	ldi	r24, 0xD5	; 213
    3930:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    3934:	80 ef       	ldi	r24, 0xF0	; 240
    3936:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    393a:	88 ea       	ldi	r24, 0xA8	; 168
    393c:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    3940:	8f e3       	ldi	r24, 0x3F	; 63
    3942:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    3946:	83 ed       	ldi	r24, 0xD3	; 211
    3948:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    3952:	8d e8       	ldi	r24, 0x8D	; 141
    3954:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    3958:	84 e1       	ldi	r24, 0x14	; 20
    395a:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    395e:	80 e4       	ldi	r24, 0x40	; 64
    3960:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    3964:	80 e2       	ldi	r24, 0x20	; 32
    3966:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    3970:	81 ea       	ldi	r24, 0xA1	; 161
    3972:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    3976:	88 ec       	ldi	r24, 0xC8	; 200
    3978:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    397c:	8a ed       	ldi	r24, 0xDA	; 218
    397e:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    3982:	82 e1       	ldi	r24, 0x12	; 18
    3984:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    3988:	81 e8       	ldi	r24, 0x81	; 129
    398a:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    398e:	8f ef       	ldi	r24, 0xFF	; 255
    3990:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    3994:	89 ed       	ldi	r24, 0xD9	; 217
    3996:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    399a:	81 ef       	ldi	r24, 0xF1	; 241
    399c:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    39a0:	8b ed       	ldi	r24, 0xDB	; 219
    39a2:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    39a6:	80 e2       	ldi	r24, 0x20	; 32
    39a8:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    39ac:	84 ea       	ldi	r24, 0xA4	; 164
    39ae:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    39b2:	86 ea       	ldi	r24, 0xA6	; 166
    39b4:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    39b8:	8e e2       	ldi	r24, 0x2E	; 46
    39ba:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    39be:	8f ea       	ldi	r24, 0xAF	; 175
    39c0:	0e 94 38 1c 	call	0x3870	; 0x3870 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    39c4:	60 e0       	ldi	r22, 0x00	; 0
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    39cc:	86 ea       	ldi	r24, 0xA6	; 166
    39ce:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    39d2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <__GLCD+0x8>
    39d6:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <__GLCD+0x7>
    39da:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <__GLCD+0x6>
    39de:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__GLCD+0x2>
    39e2:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <__GLCD+0x1>
    39e6:	08 95       	ret

000039e8 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    39e8:	88 30       	cpi	r24, 0x08	; 8
    39ea:	28 f4       	brcc	.+10     	; 0x39f6 <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    39ec:	88 0f       	add	r24, r24
    39ee:	88 0f       	add	r24, r24
    39f0:	88 0f       	add	r24, r24
    39f2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__GLCD+0x2>
    39f6:	08 95       	ret

000039f8 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    39f8:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    39fc:	08 95       	ret

000039fe <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    39fe:	8f 92       	push	r8
    3a00:	9f 92       	push	r9
    3a02:	af 92       	push	r10
    3a04:	bf 92       	push	r11
    3a06:	cf 92       	push	r12
    3a08:	df 92       	push	r13
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	06 2f       	mov	r16, r22
    3a18:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    3a1a:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a1e:	d0 91 c4 02 	lds	r29, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    3a22:	c0 91 c3 02 	lds	r28, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    3a26:	6d 2f       	mov	r22, r29
    3a28:	8c 2f       	mov	r24, r28
    3a2a:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    3a2e:	1f 3f       	cpi	r17, 0xFF	; 255
    3a30:	91 f4       	brne	.+36     	; 0x3a56 <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    3a32:	90 2f       	mov	r25, r16
    3a34:	97 70       	andi	r25, 0x07	; 7
    3a36:	81 2c       	mov	r8, r1
    3a38:	91 2c       	mov	r9, r1
    3a3a:	54 01       	movw	r10, r8
    3a3c:	83 94       	inc	r8
    3a3e:	75 01       	movw	r14, r10
    3a40:	64 01       	movw	r12, r8
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <GLCD_SetPixel+0x4e>
    3a44:	cc 0c       	add	r12, r12
    3a46:	dd 1c       	adc	r13, r13
    3a48:	ee 1c       	adc	r14, r14
    3a4a:	ff 1c       	adc	r15, r15
    3a4c:	9a 95       	dec	r25
    3a4e:	d2 f7       	brpl	.-12     	; 0x3a44 <GLCD_SetPixel+0x46>
    3a50:	48 2f       	mov	r20, r24
    3a52:	4c 29       	or	r20, r12
    3a54:	13 c0       	rjmp	.+38     	; 0x3a7c <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    3a56:	07 70       	andi	r16, 0x07	; 7
    3a58:	c1 2c       	mov	r12, r1
    3a5a:	d1 2c       	mov	r13, r1
    3a5c:	76 01       	movw	r14, r12
    3a5e:	c3 94       	inc	r12
    3a60:	b7 01       	movw	r22, r14
    3a62:	a6 01       	movw	r20, r12
    3a64:	04 c0       	rjmp	.+8      	; 0x3a6e <GLCD_SetPixel+0x70>
    3a66:	44 0f       	add	r20, r20
    3a68:	55 1f       	adc	r21, r21
    3a6a:	66 1f       	adc	r22, r22
    3a6c:	77 1f       	adc	r23, r23
    3a6e:	0a 95       	dec	r16
    3a70:	d2 f7       	brpl	.-12     	; 0x3a66 <GLCD_SetPixel+0x68>
    3a72:	8a 01       	movw	r16, r20
    3a74:	9b 01       	movw	r18, r22
    3a76:	00 95       	com	r16
    3a78:	48 2f       	mov	r20, r24
    3a7a:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3a7c:	6d 2f       	mov	r22, r29
    3a7e:	8c 2f       	mov	r24, r28
    3a80:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
}
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	0f 91       	pop	r16
    3a8c:	ff 90       	pop	r15
    3a8e:	ef 90       	pop	r14
    3a90:	df 90       	pop	r13
    3a92:	cf 90       	pop	r12
    3a94:	bf 90       	pop	r11
    3a96:	af 90       	pop	r10
    3a98:	9f 90       	pop	r9
    3a9a:	8f 90       	pop	r8
    3a9c:	08 95       	ret

00003a9e <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3a9e:	3f 92       	push	r3
    3aa0:	4f 92       	push	r4
    3aa2:	5f 92       	push	r5
    3aa4:	6f 92       	push	r6
    3aa6:	7f 92       	push	r7
    3aa8:	8f 92       	push	r8
    3aaa:	9f 92       	push	r9
    3aac:	af 92       	push	r10
    3aae:	bf 92       	push	r11
    3ab0:	cf 92       	push	r12
    3ab2:	df 92       	push	r13
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3ac2:	88 23       	and	r24, r24
    3ac4:	0c f4       	brge	.+2      	; 0x3ac8 <GLCD_SetPixels+0x2a>
    3ac6:	c6 c0       	rjmp	.+396    	; 0x3c54 <GLCD_SetPixels+0x1b6>
    3ac8:	44 23       	and	r20, r20
    3aca:	0c f4       	brge	.+2      	; 0x3ace <GLCD_SetPixels+0x30>
    3acc:	c3 c0       	rjmp	.+390    	; 0x3c54 <GLCD_SetPixels+0x1b6>
    3ace:	60 34       	cpi	r22, 0x40	; 64
    3ad0:	08 f0       	brcs	.+2      	; 0x3ad4 <GLCD_SetPixels+0x36>
    3ad2:	c0 c0       	rjmp	.+384    	; 0x3c54 <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3ad4:	20 34       	cpi	r18, 0x40	; 64
    3ad6:	08 f0       	brcs	.+2      	; 0x3ada <GLCD_SetPixels+0x3c>
    3ad8:	bd c0       	rjmp	.+378    	; 0x3c54 <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    3ada:	11 e0       	ldi	r17, 0x01	; 1
    3adc:	81 2e       	mov	r8, r17
    3ade:	86 1a       	sub	r8, r22
    3ae0:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    3ae2:	18 1b       	sub	r17, r24
    3ae4:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    3ae6:	46 2f       	mov	r20, r22
    3ae8:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    3aea:	76 2e       	mov	r7, r22
    3aec:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    3aee:	e8 2c       	mov	r14, r8
    3af0:	f1 2c       	mov	r15, r1
    3af2:	88 e0       	ldi	r24, 0x08	; 8
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	84 1b       	sub	r24, r20
    3af8:	91 09       	sbc	r25, r1
    3afa:	e8 16       	cp	r14, r24
    3afc:	f9 06       	cpc	r15, r25
    3afe:	7c f4       	brge	.+30     	; 0x3b1e <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    3b00:	88 e0       	ldi	r24, 0x08	; 8
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	8e 19       	sub	r24, r14
    3b06:	9f 09       	sbc	r25, r15
    3b08:	2f ef       	ldi	r18, 0xFF	; 255
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	59 01       	movw	r10, r18
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <GLCD_SetPixels+0x76>
    3b10:	b5 94       	asr	r11
    3b12:	a7 94       	ror	r10
    3b14:	8a 95       	dec	r24
    3b16:	e2 f7       	brpl	.-8      	; 0x3b10 <GLCD_SetPixels+0x72>
    3b18:	8a 2d       	mov	r24, r10
			h = height;
    3b1a:	68 2c       	mov	r6, r8
    3b1c:	04 c0       	rjmp	.+8      	; 0x3b26 <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    3b1e:	88 e0       	ldi	r24, 0x08	; 8
    3b20:	68 2e       	mov	r6, r24
    3b22:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    3b24:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    3b26:	a8 2e       	mov	r10, r24
    3b28:	b1 2c       	mov	r11, r1
    3b2a:	02 c0       	rjmp	.+4      	; 0x3b30 <GLCD_SetPixels+0x92>
    3b2c:	aa 0c       	add	r10, r10
    3b2e:	bb 1c       	adc	r11, r11
    3b30:	4a 95       	dec	r20
    3b32:	e2 f7       	brpl	.-8      	; 0x3b2c <GLCD_SetPixels+0x8e>
    3b34:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    3b36:	67 2d       	mov	r22, r7
    3b38:	89 2d       	mov	r24, r9
    3b3a:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    3b3e:	11 23       	and	r17, r17
    3b40:	c9 f1       	breq	.+114    	; 0x3bb4 <GLCD_SetPixels+0x116>
    3b42:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b44:	0f 2e       	mov	r0, r31
    3b46:	f4 ec       	ldi	r31, 0xC4	; 196
    3b48:	cf 2e       	mov	r12, r31
    3b4a:	f2 e0       	ldi	r31, 0x02	; 2
    3b4c:	df 2e       	mov	r13, r31
    3b4e:	f0 2d       	mov	r31, r0
    3b50:	c3 ec       	ldi	r28, 0xC3	; 195
    3b52:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3b54:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b56:	f6 01       	movw	r30, r12
    3b58:	40 80       	ld	r4, Z
    3b5a:	b8 80       	ld	r11, Y
    3b5c:	64 2d       	mov	r22, r4
    3b5e:	8b 2d       	mov	r24, r11
    3b60:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3b64:	0f 3f       	cpi	r16, 0xFF	; 255
    3b66:	19 f4       	brne	.+6      	; 0x3b6e <GLCD_SetPixels+0xd0>
    3b68:	48 2f       	mov	r20, r24
    3b6a:	43 29       	or	r20, r3
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <GLCD_SetPixels+0xd4>
    3b6e:	48 2f       	mov	r20, r24
    3b70:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3b72:	9b 2d       	mov	r25, r11
    3b74:	9f 5f       	subi	r25, 0xFF	; 255
    3b76:	98 83       	st	Y, r25
    3b78:	64 2d       	mov	r22, r4
    3b7a:	8b 2d       	mov	r24, r11
    3b7c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    3b80:	53 94       	inc	r5
    3b82:	51 12       	cpse	r5, r17
    3b84:	e8 cf       	rjmp	.-48     	; 0x3b56 <GLCD_SetPixels+0xb8>
    3b86:	16 c0       	rjmp	.+44     	; 0x3bb4 <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3b88:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3b8a:	6c 2f       	mov	r22, r28
    3b8c:	89 2d       	mov	r24, r9
    3b8e:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3b92:	11 23       	and	r17, r17
    3b94:	f1 f0       	breq	.+60     	; 0x3bd2 <GLCD_SetPixels+0x134>
    3b96:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3b98:	f6 01       	movw	r30, r12
    3b9a:	60 81       	ld	r22, Z
    3b9c:	f2 01       	movw	r30, r4
    3b9e:	80 81       	ld	r24, Z
    3ba0:	98 2f       	mov	r25, r24
    3ba2:	9f 5f       	subi	r25, 0xFF	; 255
    3ba4:	90 83       	st	Z, r25
    3ba6:	40 2f       	mov	r20, r16
    3ba8:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3bac:	73 94       	inc	r7
    3bae:	71 16       	cp	r7, r17
    3bb0:	81 f0       	breq	.+32     	; 0x3bd2 <GLCD_SetPixels+0x134>
    3bb2:	f2 cf       	rjmp	.-28     	; 0x3b98 <GLCD_SetPixels+0xfa>
    3bb4:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3bb6:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3bb8:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3bba:	0f 2e       	mov	r0, r31
    3bbc:	f4 ec       	ldi	r31, 0xC4	; 196
    3bbe:	cf 2e       	mov	r12, r31
    3bc0:	f2 e0       	ldi	r31, 0x02	; 2
    3bc2:	df 2e       	mov	r13, r31
    3bc4:	f0 2d       	mov	r31, r0
    3bc6:	0f 2e       	mov	r0, r31
    3bc8:	f3 ec       	ldi	r31, 0xC3	; 195
    3bca:	4f 2e       	mov	r4, r31
    3bcc:	f2 e0       	ldi	r31, 0x02	; 2
    3bce:	5f 2e       	mov	r5, r31
    3bd0:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3bd2:	26 2d       	mov	r18, r6
    3bd4:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    3bd6:	e2 2f       	mov	r30, r18
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	cf 01       	movw	r24, r30
    3bdc:	08 96       	adiw	r24, 0x08	; 8
    3bde:	e8 16       	cp	r14, r24
    3be0:	f9 06       	cpc	r15, r25
    3be2:	94 f6       	brge	.-92     	; 0x3b88 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    3be4:	28 15       	cp	r18, r8
    3be6:	b0 f5       	brcc	.+108    	; 0x3c54 <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    3be8:	ee 1a       	sub	r14, r30
    3bea:	ff 0a       	sbc	r15, r31
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9c 01       	movw	r18, r24
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <GLCD_SetPixels+0x15a>
    3bf4:	22 0f       	add	r18, r18
    3bf6:	33 1f       	adc	r19, r19
    3bf8:	ea 94       	dec	r14
    3bfa:	e2 f7       	brpl	.-8      	; 0x3bf4 <GLCD_SetPixels+0x156>
    3bfc:	79 01       	movw	r14, r18
    3bfe:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    3c00:	6c 2f       	mov	r22, r28
    3c02:	68 5f       	subi	r22, 0xF8	; 248
    3c04:	89 2d       	mov	r24, r9
    3c06:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3c0a:	11 23       	and	r17, r17
    3c0c:	19 f1       	breq	.+70     	; 0x3c54 <GLCD_SetPixels+0x1b6>
    3c0e:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c10:	0f 2e       	mov	r0, r31
    3c12:	f4 ec       	ldi	r31, 0xC4	; 196
    3c14:	cf 2e       	mov	r12, r31
    3c16:	f2 e0       	ldi	r31, 0x02	; 2
    3c18:	df 2e       	mov	r13, r31
    3c1a:	f0 2d       	mov	r31, r0
    3c1c:	c3 ec       	ldi	r28, 0xC3	; 195
    3c1e:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c20:	9e 2c       	mov	r9, r14
    3c22:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c24:	f6 01       	movw	r30, r12
    3c26:	a0 80       	ld	r10, Z
    3c28:	f8 80       	ld	r15, Y
    3c2a:	6a 2d       	mov	r22, r10
    3c2c:	8f 2d       	mov	r24, r15
    3c2e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c32:	0f 3f       	cpi	r16, 0xFF	; 255
    3c34:	19 f4       	brne	.+6      	; 0x3c3c <GLCD_SetPixels+0x19e>
    3c36:	48 2f       	mov	r20, r24
    3c38:	4e 29       	or	r20, r14
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <GLCD_SetPixels+0x1a2>
    3c3c:	48 2f       	mov	r20, r24
    3c3e:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3c40:	9f 2d       	mov	r25, r15
    3c42:	9f 5f       	subi	r25, 0xFF	; 255
    3c44:	98 83       	st	Y, r25
    3c46:	6a 2d       	mov	r22, r10
    3c48:	8f 2d       	mov	r24, r15
    3c4a:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    3c4e:	b3 94       	inc	r11
    3c50:	b1 12       	cpse	r11, r17
    3c52:	e8 cf       	rjmp	.-48     	; 0x3c24 <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	ff 90       	pop	r15
    3c5e:	ef 90       	pop	r14
    3c60:	df 90       	pop	r13
    3c62:	cf 90       	pop	r12
    3c64:	bf 90       	pop	r11
    3c66:	af 90       	pop	r10
    3c68:	9f 90       	pop	r9
    3c6a:	8f 90       	pop	r8
    3c6c:	7f 90       	pop	r7
    3c6e:	6f 90       	pop	r6
    3c70:	5f 90       	pop	r5
    3c72:	4f 90       	pop	r4
    3c74:	3f 90       	pop	r3
    3c76:	08 95       	ret

00003c78 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	2c 97       	sbiw	r28, 0x0c	; 12
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	cd bf       	out	0x3d, r28	; 61
    3cac:	5c 01       	movw	r10, r24
    3cae:	66 2e       	mov	r6, r22
    3cb0:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3cb2:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    3cb6:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    3cb8:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    3cbc:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    3cbe:	82 2f       	mov	r24, r18
    3cc0:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    3cc2:	1a f4       	brpl	.+6      	; 0x3cca <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    3cc4:	80 e8       	ldi	r24, 0x80	; 128
    3cc6:	68 2e       	mov	r6, r24
    3cc8:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    3cca:	84 2f       	mov	r24, r20
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	07 96       	adiw	r24, 0x07	; 7
    3cd0:	95 95       	asr	r25
    3cd2:	87 95       	ror	r24
    3cd4:	95 95       	asr	r25
    3cd6:	87 95       	ror	r24
    3cd8:	95 95       	asr	r25
    3cda:	87 95       	ror	r24
    3cdc:	8d 83       	std	Y+5, r24	; 0x05
    3cde:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	96 95       	lsr	r25
    3ce4:	96 95       	lsr	r25
    3ce6:	96 95       	lsr	r25
    3ce8:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    3cea:	89 30       	cpi	r24, 0x09	; 9
    3cec:	48 f0       	brcs	.+18     	; 0x3d00 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    3cee:	2d 81       	ldd	r18, Y+5	; 0x05
    3cf0:	3e 81       	ldd	r19, Y+6	; 0x06
    3cf2:	28 5f       	subi	r18, 0xF8	; 248
    3cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf6:	a9 01       	movw	r20, r18
    3cf8:	48 1b       	sub	r20, r24
    3cfa:	51 09       	sbc	r21, r1
    3cfc:	5e 83       	std	Y+6, r21	; 0x06
    3cfe:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3d00:	4a 84       	ldd	r4, Y+10	; 0x0a
    3d02:	57 e0       	ldi	r21, 0x07	; 7
    3d04:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3d06:	8d 81       	ldd	r24, Y+5	; 0x05
    3d08:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0a:	89 2b       	or	r24, r25
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <GLCD_DrawBitmap+0x98>
    3d0e:	fa c0       	rjmp	.+500    	; 0x3f04 <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d12:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3d14:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3d16:	26 2c       	mov	r2, r6
    3d18:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3d1a:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3d1c:	88 e0       	ldi	r24, 0x08	; 8
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	fc 01       	movw	r30, r24
    3d22:	e4 19       	sub	r30, r4
    3d24:	f1 09       	sbc	r31, r1
    3d26:	fb 83       	std	Y+3, r31	; 0x03
    3d28:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d2a:	0f 2e       	mov	r0, r31
    3d2c:	f4 ec       	ldi	r31, 0xC4	; 196
    3d2e:	cf 2e       	mov	r12, r31
    3d30:	f2 e0       	ldi	r31, 0x02	; 2
    3d32:	df 2e       	mov	r13, r31
    3d34:	f0 2d       	mov	r31, r0
    3d36:	03 ec       	ldi	r16, 0xC3	; 195
    3d38:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3d3a:	6c 81       	ldd	r22, Y+4	; 0x04
    3d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d3e:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3d42:	39 86       	std	Y+9, r3	; 0x09
    3d44:	28 86       	std	Y+8, r2	; 0x08
    3d46:	72 9c       	mul	r7, r2
    3d48:	c0 01       	movw	r24, r0
    3d4a:	73 9c       	mul	r7, r3
    3d4c:	90 0d       	add	r25, r0
    3d4e:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    3d50:	7c 01       	movw	r14, r24
    3d52:	e2 18       	sub	r14, r2
    3d54:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3d56:	66 20       	and	r6, r6
    3d58:	09 f4       	brne	.+2      	; 0x3d5c <GLCD_DrawBitmap+0xe4>
    3d5a:	3c c0       	rjmp	.+120    	; 0x3dd4 <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3d5c:	9c 01       	movw	r18, r24
    3d5e:	2a 0d       	add	r18, r10
    3d60:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3d62:	85 2c       	mov	r8, r5
    3d64:	3c 87       	std	Y+12, r19	; 0x0c
    3d66:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3d68:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d6a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d6c:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    3d6e:	04 2c       	mov	r0, r4
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <GLCD_DrawBitmap+0xfc>
    3d72:	99 0c       	add	r9, r9
    3d74:	0a 94       	dec	r0
    3d76:	ea f7       	brpl	.-6      	; 0x3d72 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3d78:	77 20       	and	r7, r7
    3d7a:	79 f0       	breq	.+30     	; 0x3d9a <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3d7c:	f5 01       	movw	r30, r10
    3d7e:	ee 0d       	add	r30, r14
    3d80:	ff 1d       	adc	r31, r15
    3d82:	2f ef       	ldi	r18, 0xFF	; 255
    3d84:	e2 1a       	sub	r14, r18
    3d86:	f2 0a       	sbc	r15, r18
    3d88:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	0a 80       	ldd	r0, Y+2	; 0x02
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <GLCD_DrawBitmap+0x11c>
    3d90:	95 95       	asr	r25
    3d92:	87 95       	ror	r24
    3d94:	0a 94       	dec	r0
    3d96:	e2 f7       	brpl	.-8      	; 0x3d90 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3d98:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3d9a:	39 81       	ldd	r19, Y+1	; 0x01
    3d9c:	31 30       	cpi	r19, 0x01	; 1
    3d9e:	39 f4       	brne	.+14     	; 0x3dae <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3da0:	f6 01       	movw	r30, r12
    3da2:	60 81       	ld	r22, Z
    3da4:	f8 01       	movw	r30, r16
    3da6:	80 81       	ld	r24, Z
    3da8:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
    3dac:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3dae:	f6 01       	movw	r30, r12
    3db0:	60 81       	ld	r22, Z
    3db2:	f8 01       	movw	r30, r16
    3db4:	80 81       	ld	r24, Z
    3db6:	98 2f       	mov	r25, r24
    3db8:	9f 5f       	subi	r25, 0xFF	; 255
    3dba:	90 83       	st	Z, r25
    3dbc:	49 2d       	mov	r20, r9
    3dbe:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3dc2:	83 94       	inc	r8
    3dc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    3dc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3dc8:	2f 5f       	subi	r18, 0xFF	; 255
    3dca:	3f 4f       	sbci	r19, 0xFF	; 255
    3dcc:	3c 87       	std	Y+12, r19	; 0x0c
    3dce:	2b 87       	std	Y+11, r18	; 0x0b
    3dd0:	86 10       	cpse	r8, r6
    3dd2:	ca cf       	rjmp	.-108    	; 0x3d68 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3dd4:	eb ec       	ldi	r30, 0xCB	; 203
    3dd6:	f2 e0       	ldi	r31, 0x02	; 2
    3dd8:	80 81       	ld	r24, Z
    3dda:	88 23       	and	r24, r24
    3ddc:	41 f0       	breq	.+16     	; 0x3dee <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3dde:	f6 01       	movw	r30, r12
    3de0:	60 81       	ld	r22, Z
    3de2:	f8 01       	movw	r30, r16
    3de4:	80 81       	ld	r24, Z
    3de6:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
    3dea:	48 2f       	mov	r20, r24
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3dee:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3df0:	f6 01       	movw	r30, r12
    3df2:	60 81       	ld	r22, Z
    3df4:	f8 01       	movw	r30, r16
    3df6:	80 81       	ld	r24, Z
    3df8:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    3dfe:	f8 5f       	subi	r31, 0xF8	; 248
    3e00:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3e02:	73 94       	inc	r7
    3e04:	87 2d       	mov	r24, r7
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	2d 81       	ldd	r18, Y+5	; 0x05
    3e0a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e0c:	82 17       	cp	r24, r18
    3e0e:	93 07       	cpc	r25, r19
    3e10:	08 f4       	brcc	.+2      	; 0x3e14 <GLCD_DrawBitmap+0x19c>
    3e12:	93 cf       	rjmp	.-218    	; 0x3d3a <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    3e14:	22 30       	cpi	r18, 0x02	; 2
    3e16:	31 05       	cpc	r19, r1
    3e18:	08 f4       	brcc	.+2      	; 0x3e1c <GLCD_DrawBitmap+0x1a4>
    3e1a:	74 c0       	rjmp	.+232    	; 0x3f04 <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3e1c:	6f 2f       	mov	r22, r31
    3e1e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e20:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    3e24:	27 2d       	mov	r18, r7
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	21 50       	subi	r18, 0x01	; 1
    3e2a:	31 09       	sbc	r19, r1
    3e2c:	48 85       	ldd	r20, Y+8	; 0x08
    3e2e:	59 85       	ldd	r21, Y+9	; 0x09
    3e30:	24 9f       	mul	r18, r20
    3e32:	c0 01       	movw	r24, r0
    3e34:	25 9f       	mul	r18, r21
    3e36:	90 0d       	add	r25, r0
    3e38:	34 9f       	mul	r19, r20
    3e3a:	90 0d       	add	r25, r0
    3e3c:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e3e:	66 20       	and	r6, r6
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <GLCD_DrawBitmap+0x1cc>
    3e42:	3e c0       	rjmp	.+124    	; 0x3ec0 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3e44:	45 01       	movw	r8, r10
    3e46:	88 0e       	add	r8, r24
    3e48:	99 1e       	adc	r9, r25
    3e4a:	65 01       	movw	r12, r10
    3e4c:	5f ef       	ldi	r21, 0xFF	; 255
    3e4e:	c5 1a       	sub	r12, r21
    3e50:	d5 0a       	sbc	r13, r21
    3e52:	6a 94       	dec	r6
    3e54:	c6 0c       	add	r12, r6
    3e56:	d1 1c       	adc	r13, r1
    3e58:	c8 0e       	add	r12, r24
    3e5a:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e5c:	0f 2e       	mov	r0, r31
    3e5e:	f4 ec       	ldi	r31, 0xC4	; 196
    3e60:	ef 2e       	mov	r14, r31
    3e62:	f2 e0       	ldi	r31, 0x02	; 2
    3e64:	ff 2e       	mov	r15, r31
    3e66:	f0 2d       	mov	r31, r0
    3e68:	03 ec       	ldi	r16, 0xC3	; 195
    3e6a:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e6c:	88 e0       	ldi	r24, 0x08	; 8
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	5c 01       	movw	r10, r24
    3e72:	a4 18       	sub	r10, r4
    3e74:	b1 08       	sbc	r11, r1
    3e76:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e78:	f7 01       	movw	r30, r14
    3e7a:	80 80       	ld	r8, Z
    3e7c:	f8 01       	movw	r30, r16
    3e7e:	90 80       	ld	r9, Z
    3e80:	68 2d       	mov	r22, r8
    3e82:	89 2d       	mov	r24, r9
    3e84:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3e88:	f3 01       	movw	r30, r6
    3e8a:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e8c:	50 e0       	ldi	r21, 0x00	; 0
    3e8e:	0a 2c       	mov	r0, r10
    3e90:	02 c0       	rjmp	.+4      	; 0x3e96 <GLCD_DrawBitmap+0x21e>
    3e92:	55 95       	asr	r21
    3e94:	47 95       	ror	r20
    3e96:	0a 94       	dec	r0
    3e98:	e2 f7       	brpl	.-8      	; 0x3e92 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3e9a:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3e9c:	f9 81       	ldd	r31, Y+1	; 0x01
    3e9e:	f1 30       	cpi	r31, 0x01	; 1
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ea2:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3ea4:	89 2d       	mov	r24, r9
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	80 83       	st	Z, r24
    3eac:	68 2d       	mov	r22, r8
    3eae:	89 2d       	mov	r24, r9
    3eb0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
    3eb4:	ff ef       	ldi	r31, 0xFF	; 255
    3eb6:	6f 1a       	sub	r6, r31
    3eb8:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3eba:	6c 14       	cp	r6, r12
    3ebc:	7d 04       	cpc	r7, r13
    3ebe:	e1 f6       	brne	.-72     	; 0x3e78 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3ec0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <__GLCD+0x9>
    3ec4:	88 23       	and	r24, r24
    3ec6:	99 f0       	breq	.+38     	; 0x3eee <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    3ec8:	81 30       	cpi	r24, 0x01	; 1
    3eca:	41 f4       	brne	.+16     	; 0x3edc <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ecc:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    3ed0:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    3ed4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
    3ed8:	48 2f       	mov	r20, r24
    3eda:	0a c0       	rjmp	.+20     	; 0x3ef0 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3edc:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    3ee0:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    3ee4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
    3ee8:	48 2f       	mov	r20, r24
    3eea:	40 95       	com	r20
    3eec:	01 c0       	rjmp	.+2      	; 0x3ef0 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3eee:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    3ef0:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    3ef4:	e3 ec       	ldi	r30, 0xC3	; 195
    3ef6:	f2 e0       	ldi	r31, 0x02	; 2
    3ef8:	80 81       	ld	r24, Z
    3efa:	98 2f       	mov	r25, r24
    3efc:	9f 5f       	subi	r25, 0xFF	; 255
    3efe:	90 83       	st	Z, r25
    3f00:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    3f04:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <GLCD_GetX>
    3f08:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f0a:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
}
    3f0e:	2c 96       	adiw	r28, 0x0c	; 12
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	cd bf       	out	0x3d, r28	; 61
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	df 90       	pop	r13
    3f28:	cf 90       	pop	r12
    3f2a:	bf 90       	pop	r11
    3f2c:	af 90       	pop	r10
    3f2e:	9f 90       	pop	r9
    3f30:	8f 90       	pop	r8
    3f32:	7f 90       	pop	r7
    3f34:	6f 90       	pop	r6
    3f36:	5f 90       	pop	r5
    3f38:	4f 90       	pop	r4
    3f3a:	3f 90       	pop	r3
    3f3c:	2f 90       	pop	r2
    3f3e:	08 95       	ret

00003f40 <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3f40:	df 92       	push	r13
    3f42:	ef 92       	push	r14
    3f44:	ff 92       	push	r15
    3f46:	0f 93       	push	r16
    3f48:	1f 93       	push	r17
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
    3f4e:	e8 2e       	mov	r14, r24
    3f50:	16 2f       	mov	r17, r22
    3f52:	d4 2e       	mov	r13, r20
    3f54:	f2 2e       	mov	r15, r18
    3f56:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3f58:	88 23       	and	r24, r24
    3f5a:	0c f4       	brge	.+2      	; 0x3f5e <GLCD_DrawRectangle+0x1e>
    3f5c:	49 c0       	rjmp	.+146    	; 0x3ff0 <GLCD_DrawRectangle+0xb0>
    3f5e:	44 23       	and	r20, r20
    3f60:	0c f4       	brge	.+2      	; 0x3f64 <GLCD_DrawRectangle+0x24>
    3f62:	46 c0       	rjmp	.+140    	; 0x3ff0 <GLCD_DrawRectangle+0xb0>
    3f64:	60 34       	cpi	r22, 0x40	; 64
    3f66:	08 f0       	brcs	.+2      	; 0x3f6a <GLCD_DrawRectangle+0x2a>
    3f68:	43 c0       	rjmp	.+134    	; 0x3ff0 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3f6a:	8f e3       	ldi	r24, 0x3F	; 63
    3f6c:	82 17       	cp	r24, r18
    3f6e:	08 f4       	brcc	.+2      	; 0x3f72 <GLCD_DrawRectangle+0x32>
    3f70:	3f c0       	rjmp	.+126    	; 0x3ff0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3f72:	4e 15       	cp	r20, r14
    3f74:	00 f1       	brcs	.+64     	; 0x3fb6 <GLCD_DrawRectangle+0x76>
    3f76:	1c c0       	rjmp	.+56     	; 0x3fb0 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3f78:	4d 2f       	mov	r20, r29
    3f7a:	61 2f       	mov	r22, r17
    3f7c:	8c 2f       	mov	r24, r28
    3f7e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <GLCD_SetPixel>
		X1++;
    3f82:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3f84:	0c 17       	cp	r16, r28
    3f86:	c0 f7       	brcc	.-16     	; 0x3f78 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3f88:	de 14       	cp	r13, r14
    3f8a:	d8 f0       	brcs	.+54     	; 0x3fc2 <GLCD_DrawRectangle+0x82>
    3f8c:	17 c0       	rjmp	.+46     	; 0x3fbc <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3f8e:	4d 2f       	mov	r20, r29
    3f90:	6f 2d       	mov	r22, r15
    3f92:	8c 2f       	mov	r24, r28
    3f94:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <GLCD_SetPixel>
		X1++;
    3f98:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3f9a:	0c 17       	cp	r16, r28
    3f9c:	c0 f7       	brcc	.-16     	; 0x3f8e <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    3f9e:	f1 16       	cp	r15, r17
    3fa0:	98 f0       	brcs	.+38     	; 0x3fc8 <GLCD_DrawRectangle+0x88>
    3fa2:	1c c0       	rjmp	.+56     	; 0x3fdc <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3fa4:	0d 2f       	mov	r16, r29
    3fa6:	4d 2d       	mov	r20, r13
    3fa8:	8d 2d       	mov	r24, r13
    3faa:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <GLCD_SetPixels>
    3fae:	20 c0       	rjmp	.+64     	; 0x3ff0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3fb0:	04 2f       	mov	r16, r20
    3fb2:	ce 2d       	mov	r28, r14
    3fb4:	e1 cf       	rjmp	.-62     	; 0x3f78 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    3fb6:	0e 2d       	mov	r16, r14
    3fb8:	c4 2f       	mov	r28, r20
    3fba:	de cf       	rjmp	.-68     	; 0x3f78 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3fbc:	0d 2d       	mov	r16, r13
    3fbe:	ce 2d       	mov	r28, r14
    3fc0:	e6 cf       	rjmp	.-52     	; 0x3f8e <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    3fc2:	0e 2d       	mov	r16, r14
    3fc4:	cd 2d       	mov	r28, r13
    3fc6:	e3 cf       	rjmp	.-58     	; 0x3f8e <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3fc8:	0d 2f       	mov	r16, r29
    3fca:	21 2f       	mov	r18, r17
    3fcc:	4e 2d       	mov	r20, r14
    3fce:	6f 2d       	mov	r22, r15
    3fd0:	8e 2d       	mov	r24, r14
    3fd2:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    3fd6:	21 2f       	mov	r18, r17
    3fd8:	6f 2d       	mov	r22, r15
    3fda:	e4 cf       	rjmp	.-56     	; 0x3fa4 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3fdc:	0d 2f       	mov	r16, r29
    3fde:	2f 2d       	mov	r18, r15
    3fe0:	4e 2d       	mov	r20, r14
    3fe2:	61 2f       	mov	r22, r17
    3fe4:	8e 2d       	mov	r24, r14
    3fe6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <GLCD_SetPixels>
    3fea:	2f 2d       	mov	r18, r15
    3fec:	61 2f       	mov	r22, r17
    3fee:	da cf       	rjmp	.-76     	; 0x3fa4 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	ff 90       	pop	r15
    3ffa:	ef 90       	pop	r14
    3ffc:	df 90       	pop	r13
    3ffe:	08 95       	ret

00004000 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    400a:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    400c:	00 e0       	ldi	r16, 0x00	; 0
    400e:	0b c0       	rjmp	.+22     	; 0x4026 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    4010:	41 2f       	mov	r20, r17
    4012:	6d 2f       	mov	r22, r29
    4014:	8c 2f       	mov	r24, r28
    4016:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    401a:	cf 5f       	subi	r28, 0xFF	; 255
    401c:	c0 38       	cpi	r28, 0x80	; 128
    401e:	c1 f7       	brne	.-16     	; 0x4010 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    4020:	d8 5f       	subi	r29, 0xF8	; 248
    4022:	d0 34       	cpi	r29, 0x40	; 64
    4024:	11 f0       	breq	.+4      	; 0x402a <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    4026:	c0 2f       	mov	r28, r16
    4028:	f3 cf       	rjmp	.-26     	; 0x4010 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    402a:	df 91       	pop	r29
    402c:	cf 91       	pop	r28
    402e:	1f 91       	pop	r17
    4030:	0f 91       	pop	r16
    4032:	08 95       	ret

00004034 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	0e 94 00 20 	call	0x4000	; 0x4000 <GLCD_FillScreen>
    403a:	08 95       	ret

0000403c <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    403c:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    403e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <GLCD_SetPixels>
}
    4042:	0f 91       	pop	r16
    4044:	08 95       	ret

00004046 <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    4046:	2f 92       	push	r2
    4048:	3f 92       	push	r3
    404a:	5f 92       	push	r5
    404c:	6f 92       	push	r6
    404e:	7f 92       	push	r7
    4050:	8f 92       	push	r8
    4052:	9f 92       	push	r9
    4054:	af 92       	push	r10
    4056:	bf 92       	push	r11
    4058:	cf 92       	push	r12
    405a:	df 92       	push	r13
    405c:	ef 92       	push	r14
    405e:	ff 92       	push	r15
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	d8 2e       	mov	r13, r24
    406e:	dc 18       	sub	r13, r12
    4070:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    4072:	b8 2e       	mov	r11, r24
    4074:	b6 1a       	sub	r11, r22
    4076:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    4078:	46 2f       	mov	r20, r22
    407a:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    407c:	a6 2e       	mov	r10, r22
    407e:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    4080:	0b 2d       	mov	r16, r11
    4082:	10 e0       	ldi	r17, 0x00	; 0
    4084:	88 e0       	ldi	r24, 0x08	; 8
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	84 1b       	sub	r24, r20
    408a:	91 09       	sbc	r25, r1
    408c:	08 17       	cp	r16, r24
    408e:	19 07       	cpc	r17, r25
    4090:	7c f4       	brge	.+30     	; 0x40b0 <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    4092:	88 e0       	ldi	r24, 0x08	; 8
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	80 1b       	sub	r24, r16
    4098:	91 0b       	sbc	r25, r17
    409a:	2f ef       	ldi	r18, 0xFF	; 255
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	b9 01       	movw	r22, r18
    40a0:	02 c0       	rjmp	.+4      	; 0x40a6 <GLCD_InvertRect+0x60>
    40a2:	75 95       	asr	r23
    40a4:	67 95       	ror	r22
    40a6:	8a 95       	dec	r24
    40a8:	e2 f7       	brpl	.-8      	; 0x40a2 <GLCD_InvertRect+0x5c>
    40aa:	cb 01       	movw	r24, r22
		h = height;
    40ac:	5b 2c       	mov	r5, r11
    40ae:	04 c0       	rjmp	.+8      	; 0x40b8 <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    40b0:	88 e0       	ldi	r24, 0x08	; 8
    40b2:	58 2e       	mov	r5, r24
    40b4:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    40b8:	68 2e       	mov	r6, r24
    40ba:	01 c0       	rjmp	.+2      	; 0x40be <GLCD_InvertRect+0x78>
    40bc:	66 0c       	add	r6, r6
    40be:	4a 95       	dec	r20
    40c0:	ea f7       	brpl	.-6      	; 0x40bc <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    40c2:	6a 2d       	mov	r22, r10
    40c4:	8c 2d       	mov	r24, r12
    40c6:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    40ca:	dd 20       	and	r13, r13
    40cc:	d9 f1       	breq	.+118    	; 0x4144 <GLCD_InvertRect+0xfe>
    40ce:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    40d0:	0f 2e       	mov	r0, r31
    40d2:	f4 ec       	ldi	r31, 0xC4	; 196
    40d4:	ef 2e       	mov	r14, r31
    40d6:	f2 e0       	ldi	r31, 0x02	; 2
    40d8:	ff 2e       	mov	r15, r31
    40da:	f0 2d       	mov	r31, r0
    40dc:	c3 ec       	ldi	r28, 0xC3	; 195
    40de:	d2 e0       	ldi	r29, 0x02	; 2
    40e0:	f7 01       	movw	r30, r14
    40e2:	70 80       	ld	r7, Z
    40e4:	98 80       	ld	r9, Y
    40e6:	67 2d       	mov	r22, r7
    40e8:	89 2d       	mov	r24, r9
    40ea:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    40ee:	99 2d       	mov	r25, r9
    40f0:	9f 5f       	subi	r25, 0xFF	; 255
    40f2:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    40f4:	48 2f       	mov	r20, r24
    40f6:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    40f8:	67 2d       	mov	r22, r7
    40fa:	89 2d       	mov	r24, r9
    40fc:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    4100:	83 94       	inc	r8
    4102:	8d 10       	cpse	r8, r13
    4104:	ed cf       	rjmp	.-38     	; 0x40e0 <GLCD_InvertRect+0x9a>
    4106:	1e c0       	rjmp	.+60     	; 0x4144 <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    4108:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    410a:	6c 2f       	mov	r22, r28
    410c:	8c 2d       	mov	r24, r12
    410e:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    4112:	dd 20       	and	r13, r13
    4114:	39 f1       	breq	.+78     	; 0x4164 <GLCD_InvertRect+0x11e>
    4116:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4118:	f7 01       	movw	r30, r14
    411a:	50 80       	ld	r5, Z
    411c:	f1 01       	movw	r30, r2
    411e:	80 80       	ld	r8, Z
    4120:	65 2d       	mov	r22, r5
    4122:	88 2d       	mov	r24, r8
    4124:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4128:	98 2d       	mov	r25, r8
    412a:	9f 5f       	subi	r25, 0xFF	; 255
    412c:	f1 01       	movw	r30, r2
    412e:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4130:	48 2f       	mov	r20, r24
    4132:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4134:	65 2d       	mov	r22, r5
    4136:	88 2d       	mov	r24, r8
    4138:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    413c:	63 94       	inc	r6
    413e:	6d 14       	cp	r6, r13
    4140:	89 f0       	breq	.+34     	; 0x4164 <GLCD_InvertRect+0x11e>
    4142:	ea cf       	rjmp	.-44     	; 0x4118 <GLCD_InvertRect+0xd2>
    4144:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    4146:	5a 18       	sub	r5, r10
    4148:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    414a:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    414c:	0f 2e       	mov	r0, r31
    414e:	f4 ec       	ldi	r31, 0xC4	; 196
    4150:	ef 2e       	mov	r14, r31
    4152:	f2 e0       	ldi	r31, 0x02	; 2
    4154:	ff 2e       	mov	r15, r31
    4156:	f0 2d       	mov	r31, r0
    4158:	0f 2e       	mov	r0, r31
    415a:	f3 ec       	ldi	r31, 0xC3	; 195
    415c:	2f 2e       	mov	r2, r31
    415e:	f2 e0       	ldi	r31, 0x02	; 2
    4160:	3f 2e       	mov	r3, r31
    4162:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    4164:	8a 2d       	mov	r24, r10
    4166:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    4168:	e8 2f       	mov	r30, r24
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	df 01       	movw	r26, r30
    416e:	18 96       	adiw	r26, 0x08	; 8
    4170:	0a 17       	cp	r16, r26
    4172:	1b 07       	cpc	r17, r27
    4174:	4c f6       	brge	.-110    	; 0x4108 <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    4176:	8b 15       	cp	r24, r11
    4178:	58 f5       	brcc	.+86     	; 0x41d0 <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    417a:	0e 1b       	sub	r16, r30
    417c:	1f 0b       	sbc	r17, r31
    417e:	8f ef       	ldi	r24, 0xFF	; 255
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	9c 01       	movw	r18, r24
    4184:	02 c0       	rjmp	.+4      	; 0x418a <GLCD_InvertRect+0x144>
    4186:	22 0f       	add	r18, r18
    4188:	33 1f       	adc	r19, r19
    418a:	0a 95       	dec	r16
    418c:	e2 f7       	brpl	.-8      	; 0x4186 <GLCD_InvertRect+0x140>
    418e:	b2 2e       	mov	r11, r18
    4190:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    4192:	6c 2f       	mov	r22, r28
    4194:	68 5f       	subi	r22, 0xF8	; 248
    4196:	8c 2d       	mov	r24, r12
    4198:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    419c:	dd 20       	and	r13, r13
    419e:	c1 f0       	breq	.+48     	; 0x41d0 <GLCD_InvertRect+0x18a>
    41a0:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    41a2:	04 ec       	ldi	r16, 0xC4	; 196
    41a4:	12 e0       	ldi	r17, 0x02	; 2
    41a6:	c3 ec       	ldi	r28, 0xC3	; 195
    41a8:	d2 e0       	ldi	r29, 0x02	; 2
    41aa:	f8 01       	movw	r30, r16
    41ac:	c0 80       	ld	r12, Z
    41ae:	f8 80       	ld	r15, Y
    41b0:	6c 2d       	mov	r22, r12
    41b2:	8f 2d       	mov	r24, r15
    41b4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    41b8:	9f 2d       	mov	r25, r15
    41ba:	9f 5f       	subi	r25, 0xFF	; 255
    41bc:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    41be:	48 2f       	mov	r20, r24
    41c0:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    41c2:	6c 2d       	mov	r22, r12
    41c4:	8f 2d       	mov	r24, r15
    41c6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    41ca:	e3 94       	inc	r14
    41cc:	ed 10       	cpse	r14, r13
    41ce:	ed cf       	rjmp	.-38     	; 0x41aa <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	1f 91       	pop	r17
    41d6:	0f 91       	pop	r16
    41d8:	ff 90       	pop	r15
    41da:	ef 90       	pop	r14
    41dc:	df 90       	pop	r13
    41de:	cf 90       	pop	r12
    41e0:	bf 90       	pop	r11
    41e2:	af 90       	pop	r10
    41e4:	9f 90       	pop	r9
    41e6:	8f 90       	pop	r8
    41e8:	7f 90       	pop	r7
    41ea:	6f 90       	pop	r6
    41ec:	5f 90       	pop	r5
    41ee:	3f 90       	pop	r3
    41f0:	2f 90       	pop	r2
    41f2:	08 95       	ret

000041f4 <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    41f4:	66 23       	and	r22, r22
    41f6:	f4 f0       	brlt	.+60     	; 0x4234 <GLCD_SetFont+0x40>
    41f8:	40 34       	cpi	r20, 0x40	; 64
    41fa:	e0 f4       	brcc	.+56     	; 0x4234 <GLCD_SetFont+0x40>
    41fc:	22 30       	cpi	r18, 0x02	; 2
    41fe:	d0 f4       	brcc	.+52     	; 0x4234 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    4200:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <__GLCD+0x5>
    4204:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    4208:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    420c:	40 93 c9 02 	sts	0x02C9, r20	; 0x8002c9 <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    4210:	50 e0       	ldi	r21, 0x00	; 0
    4212:	41 50       	subi	r20, 0x01	; 1
    4214:	51 09       	sbc	r21, r1
    4216:	ca 01       	movw	r24, r20
    4218:	99 23       	and	r25, r25
    421a:	0c f4       	brge	.+2      	; 0x421e <GLCD_SetFont+0x2a>
    421c:	07 96       	adiw	r24, 0x07	; 7
    421e:	95 95       	asr	r25
    4220:	87 95       	ror	r24
    4222:	95 95       	asr	r25
    4224:	87 95       	ror	r24
    4226:	95 95       	asr	r25
    4228:	87 95       	ror	r24
    422a:	8f 5f       	subi	r24, 0xFF	; 255
    422c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    4230:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <__GLCD+0x9>
    4234:	08 95       	ret

00004236 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    4236:	2f 92       	push	r2
    4238:	3f 92       	push	r3
    423a:	4f 92       	push	r4
    423c:	5f 92       	push	r5
    423e:	6f 92       	push	r6
    4240:	7f 92       	push	r7
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	2b 97       	sbiw	r28, 0x0b	; 11
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    426a:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    426e:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    4270:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    4274:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    4276:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    427a:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    427c:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <__GLCD+0x6>
    4280:	29 9f       	mul	r18, r25
    4282:	90 01       	movw	r18, r0
    4284:	11 24       	eor	r1, r1
    4286:	2f 5f       	subi	r18, 0xFF	; 255
    4288:	3f 4f       	sbci	r19, 0xFF	; 255
    428a:	82 9f       	mul	r24, r18
    428c:	a0 01       	movw	r20, r0
    428e:	83 9f       	mul	r24, r19
    4290:	50 0d       	add	r21, r0
    4292:	11 24       	eor	r1, r1
    4294:	59 87       	std	Y+9, r21	; 0x09
    4296:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    4298:	4f 5f       	subi	r20, 0xFF	; 255
    429a:	5f 4f       	sbci	r21, 0xFF	; 255
    429c:	5e 83       	std	Y+6, r21	; 0x06
    429e:	4d 83       	std	Y+5, r20	; 0x05
    42a0:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <__GLCD+0x4>
    42a4:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <__GLCD+0x5>
    42a8:	a8 85       	ldd	r26, Y+8	; 0x08
    42aa:	b9 85       	ldd	r27, Y+9	; 0x09
    42ac:	ea 0f       	add	r30, r26
    42ae:	fb 1f       	adc	r31, r27
    42b0:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    42b2:	7f 80       	ldd	r7, Y+7	; 0x07
    42b4:	b7 e0       	ldi	r27, 0x07	; 7
    42b6:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    42b8:	99 23       	and	r25, r25
    42ba:	09 f4       	brne	.+2      	; 0x42be <GLCD_PrintChar+0x88>
    42bc:	92 c0       	rjmp	.+292    	; 0x43e2 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    42be:	ef 81       	ldd	r30, Y+7	; 0x07
    42c0:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    42c2:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    42c4:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    42c6:	88 e0       	ldi	r24, 0x08	; 8
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	9c 01       	movw	r18, r24
    42cc:	27 19       	sub	r18, r7
    42ce:	31 09       	sbc	r19, r1
    42d0:	3a 83       	std	Y+2, r19	; 0x02
    42d2:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    42d4:	0f 2e       	mov	r0, r31
    42d6:	fb ec       	ldi	r31, 0xCB	; 203
    42d8:	8f 2e       	mov	r8, r31
    42da:	f2 e0       	ldi	r31, 0x02	; 2
    42dc:	9f 2e       	mov	r9, r31
    42de:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    42e0:	0f 2e       	mov	r0, r31
    42e2:	f4 ec       	ldi	r31, 0xC4	; 196
    42e4:	af 2e       	mov	r10, r31
    42e6:	f2 e0       	ldi	r31, 0x02	; 2
    42e8:	bf 2e       	mov	r11, r31
    42ea:	f0 2d       	mov	r31, r0
    42ec:	03 ec       	ldi	r16, 0xC3	; 195
    42ee:	12 e0       	ldi	r17, 0x02	; 2
    42f0:	67 2c       	mov	r6, r7
    42f2:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    42f4:	6b 81       	ldd	r22, Y+3	; 0x03
    42f6:	8c 81       	ldd	r24, Y+4	; 0x04
    42f8:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    42fc:	4d 81       	ldd	r20, Y+5	; 0x05
    42fe:	5e 81       	ldd	r21, Y+6	; 0x06
    4300:	43 0d       	add	r20, r3
    4302:	51 1d       	adc	r21, r1
    4304:	5b 87       	std	Y+11, r21	; 0x0b
    4306:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    4308:	7a 01       	movw	r14, r20
    430a:	51 e0       	ldi	r21, 0x01	; 1
    430c:	e5 1a       	sub	r14, r21
    430e:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4310:	77 20       	and	r7, r7
    4312:	09 f4       	brne	.+2      	; 0x4316 <GLCD_PrintChar+0xe0>
    4314:	4f c0       	rjmp	.+158    	; 0x43b4 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    4316:	0f 2e       	mov	r0, r31
    4318:	fa ec       	ldi	r31, 0xCA	; 202
    431a:	cf 2e       	mov	r12, r31
    431c:	f2 e0       	ldi	r31, 0x02	; 2
    431e:	df 2e       	mov	r13, r31
    4320:	f0 2d       	mov	r31, r0
    4322:	83 2d       	mov	r24, r3
    4324:	36 2c       	mov	r3, r6
    4326:	67 2c       	mov	r6, r7
    4328:	72 2c       	mov	r7, r2
    432a:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    432c:	a6 ec       	ldi	r26, 0xC6	; 198
    432e:	b2 e0       	ldi	r27, 0x02	; 2
    4330:	2d 91       	ld	r18, X+
    4332:	3c 91       	ld	r19, X
    4334:	ea 85       	ldd	r30, Y+10	; 0x0a
    4336:	fb 85       	ldd	r31, Y+11	; 0x0b
    4338:	e2 0f       	add	r30, r18
    433a:	f3 1f       	adc	r31, r19
    433c:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    433e:	4e 2e       	mov	r4, r30
    4340:	03 2c       	mov	r0, r3
    4342:	01 c0       	rjmp	.+2      	; 0x4346 <GLCD_PrintChar+0x110>
    4344:	44 0c       	add	r4, r4
    4346:	0a 94       	dec	r0
    4348:	ea f7       	brpl	.-6      	; 0x4344 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    434a:	55 20       	and	r5, r5
    434c:	81 f0       	breq	.+32     	; 0x436e <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    434e:	f9 01       	movw	r30, r18
    4350:	ee 0d       	add	r30, r14
    4352:	ff 1d       	adc	r31, r15
    4354:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	09 80       	ldd	r0, Y+1	; 0x01
    435a:	02 c0       	rjmp	.+4      	; 0x4360 <GLCD_PrintChar+0x12a>
    435c:	35 95       	asr	r19
    435e:	27 95       	ror	r18
    4360:	0a 94       	dec	r0
    4362:	e2 f7       	brpl	.-8      	; 0x435c <GLCD_PrintChar+0x126>
				data |= dataPrev;
    4364:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    4366:	f6 01       	movw	r30, r12
    4368:	80 81       	ld	r24, Z
    436a:	e8 0e       	add	r14, r24
    436c:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    436e:	d4 01       	movw	r26, r8
    4370:	8c 91       	ld	r24, X
    4372:	81 30       	cpi	r24, 0x01	; 1
    4374:	39 f4       	brne	.+14     	; 0x4384 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4376:	f5 01       	movw	r30, r10
    4378:	60 81       	ld	r22, Z
    437a:	d8 01       	movw	r26, r16
    437c:	8c 91       	ld	r24, X
    437e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
    4382:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4384:	f5 01       	movw	r30, r10
    4386:	60 81       	ld	r22, Z
    4388:	d8 01       	movw	r26, r16
    438a:	8c 91       	ld	r24, X
    438c:	98 2f       	mov	r25, r24
    438e:	9f 5f       	subi	r25, 0xFF	; 255
    4390:	9c 93       	st	X, r25
    4392:	44 2d       	mov	r20, r4
    4394:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    4398:	f6 01       	movw	r30, r12
    439a:	80 81       	ld	r24, Z
    439c:	2a 85       	ldd	r18, Y+10	; 0x0a
    439e:	3b 85       	ldd	r19, Y+11	; 0x0b
    43a0:	28 0f       	add	r18, r24
    43a2:	31 1d       	adc	r19, r1
    43a4:	3b 87       	std	Y+11, r19	; 0x0b
    43a6:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    43a8:	73 94       	inc	r7
    43aa:	76 10       	cpse	r7, r6
    43ac:	bf cf       	rjmp	.-130    	; 0x432c <GLCD_PrintChar+0xf6>
    43ae:	76 2c       	mov	r7, r6
    43b0:	63 2c       	mov	r6, r3
    43b2:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    43b4:	d4 01       	movw	r26, r8
    43b6:	8c 91       	ld	r24, X
    43b8:	81 11       	cpse	r24, r1
    43ba:	07 c0       	rjmp	.+14     	; 0x43ca <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    43bc:	42 2d       	mov	r20, r2
    43be:	f5 01       	movw	r30, r10
    43c0:	60 81       	ld	r22, Z
    43c2:	d8 01       	movw	r26, r16
    43c4:	8c 91       	ld	r24, X
    43c6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    43ca:	bb 81       	ldd	r27, Y+3	; 0x03
    43cc:	b8 5f       	subi	r27, 0xF8	; 248
    43ce:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    43d0:	33 94       	inc	r3
    43d2:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <__GLCD+0x8>
    43d6:	38 16       	cp	r3, r24
    43d8:	08 f4       	brcc	.+2      	; 0x43dc <GLCD_PrintChar+0x1a6>
    43da:	8c cf       	rjmp	.-232    	; 0x42f4 <GLCD_PrintChar+0xbe>
    43dc:	57 2c       	mov	r5, r7
    43de:	76 2c       	mov	r7, r6
    43e0:	03 c0       	rjmp	.+6      	; 0x43e8 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    43e2:	ef 81       	ldd	r30, Y+7	; 0x07
    43e4:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    43e6:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    43e8:	2f 81       	ldd	r18, Y+7	; 0x07
    43ea:	22 95       	swap	r18
    43ec:	26 95       	lsr	r18
    43ee:	26 95       	lsr	r18
    43f0:	23 70       	andi	r18, 0x03	; 3
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <__GLCD+0x7>
    43f8:	82 95       	swap	r24
    43fa:	86 95       	lsr	r24
    43fc:	86 95       	lsr	r24
    43fe:	83 70       	andi	r24, 0x03	; 3
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	ff 81       	ldd	r31, Y+7	; 0x07
    4404:	8f 0f       	add	r24, r31
    4406:	91 1d       	adc	r25, r1
    4408:	28 17       	cp	r18, r24
    440a:	39 07       	cpc	r19, r25
    440c:	09 f4       	brne	.+2      	; 0x4410 <GLCD_PrintChar+0x1da>
    440e:	69 c0       	rjmp	.+210    	; 0x44e2 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    4410:	6b 81       	ldd	r22, Y+3	; 0x03
    4412:	8c 81       	ldd	r24, Y+4	; 0x04
    4414:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    4418:	28 85       	ldd	r18, Y+8	; 0x08
    441a:	39 85       	ldd	r19, Y+9	; 0x09
    441c:	23 0d       	add	r18, r3
    441e:	31 1d       	adc	r19, r1
    4420:	3a 83       	std	Y+2, r19	; 0x02
    4422:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4424:	55 20       	and	r5, r5
    4426:	09 f4       	brne	.+2      	; 0x442a <GLCD_PrintChar+0x1f4>
    4428:	51 c0       	rjmp	.+162    	; 0x44cc <GLCD_PrintChar+0x296>
    442a:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    442c:	0f 2e       	mov	r0, r31
    442e:	f4 ec       	ldi	r31, 0xC4	; 196
    4430:	af 2e       	mov	r10, r31
    4432:	f2 e0       	ldi	r31, 0x02	; 2
    4434:	bf 2e       	mov	r11, r31
    4436:	f0 2d       	mov	r31, r0
    4438:	03 ec       	ldi	r16, 0xC3	; 195
    443a:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    443c:	0f 2e       	mov	r0, r31
    443e:	f6 ec       	ldi	r31, 0xC6	; 198
    4440:	cf 2e       	mov	r12, r31
    4442:	f2 e0       	ldi	r31, 0x02	; 2
    4444:	df 2e       	mov	r13, r31
    4446:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4448:	88 e0       	ldi	r24, 0x08	; 8
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	ac 01       	movw	r20, r24
    444e:	47 19       	sub	r20, r7
    4450:	51 09       	sbc	r21, r1
    4452:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4454:	0f 2e       	mov	r0, r31
    4456:	fb ec       	ldi	r31, 0xCB	; 203
    4458:	ef 2e       	mov	r14, r31
    445a:	f2 e0       	ldi	r31, 0x02	; 2
    445c:	ff 2e       	mov	r15, r31
    445e:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    4460:	0f 2e       	mov	r0, r31
    4462:	fa ec       	ldi	r31, 0xCA	; 202
    4464:	8f 2e       	mov	r8, r31
    4466:	f2 e0       	ldi	r31, 0x02	; 2
    4468:	9f 2e       	mov	r9, r31
    446a:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    446c:	d5 01       	movw	r26, r10
    446e:	2c 90       	ld	r2, X
    4470:	f8 01       	movw	r30, r16
    4472:	40 80       	ld	r4, Z
    4474:	62 2d       	mov	r22, r2
    4476:	84 2d       	mov	r24, r4
    4478:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    447c:	d6 01       	movw	r26, r12
    447e:	ed 91       	ld	r30, X+
    4480:	fc 91       	ld	r31, X
    4482:	29 81       	ldd	r18, Y+1	; 0x01
    4484:	3a 81       	ldd	r19, Y+2	; 0x02
    4486:	e2 0f       	add	r30, r18
    4488:	f3 1f       	adc	r31, r19
    448a:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    448c:	50 e0       	ldi	r21, 0x00	; 0
    448e:	06 2c       	mov	r0, r6
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <GLCD_PrintChar+0x260>
    4492:	55 95       	asr	r21
    4494:	47 95       	ror	r20
    4496:	0a 94       	dec	r0
    4498:	e2 f7       	brpl	.-8      	; 0x4492 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    449a:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    449c:	d7 01       	movw	r26, r14
    449e:	9c 91       	ld	r25, X
    44a0:	91 30       	cpi	r25, 0x01	; 1
    44a2:	09 f4       	brne	.+2      	; 0x44a6 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    44a4:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    44a6:	84 2d       	mov	r24, r4
    44a8:	8f 5f       	subi	r24, 0xFF	; 255
    44aa:	f8 01       	movw	r30, r16
    44ac:	80 83       	st	Z, r24
    44ae:	62 2d       	mov	r22, r2
    44b0:	84 2d       	mov	r24, r4
    44b2:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    44b6:	d4 01       	movw	r26, r8
    44b8:	8c 91       	ld	r24, X
    44ba:	e9 81       	ldd	r30, Y+1	; 0x01
    44bc:	fa 81       	ldd	r31, Y+2	; 0x02
    44be:	e8 0f       	add	r30, r24
    44c0:	f1 1d       	adc	r31, r1
    44c2:	fa 83       	std	Y+2, r31	; 0x02
    44c4:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    44c6:	33 94       	inc	r3
    44c8:	35 10       	cpse	r3, r5
    44ca:	d0 cf       	rjmp	.-96     	; 0x446c <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    44cc:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <__GLCD+0x9>
    44d0:	81 11       	cpse	r24, r1
    44d2:	07 c0       	rjmp	.+14     	; 0x44e2 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    44d4:	40 e0       	ldi	r20, 0x00	; 0
    44d6:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <__GLCD+0x2>
    44da:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    44de:	0e 94 cc 1b 	call	0x3798	; 0x3798 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    44e2:	8c 81       	ldd	r24, Y+4	; 0x04
    44e4:	8f 5f       	subi	r24, 0xFF	; 255
    44e6:	6f 81       	ldd	r22, Y+7	; 0x07
    44e8:	85 0d       	add	r24, r5
    44ea:	0e 94 89 1c 	call	0x3912	; 0x3912 <GLCD_GotoXY>
}
    44ee:	2b 96       	adiw	r28, 0x0b	; 11
    44f0:	0f b6       	in	r0, 0x3f	; 63
    44f2:	f8 94       	cli
    44f4:	de bf       	out	0x3e, r29	; 62
    44f6:	0f be       	out	0x3f, r0	; 63
    44f8:	cd bf       	out	0x3d, r28	; 61
    44fa:	df 91       	pop	r29
    44fc:	cf 91       	pop	r28
    44fe:	1f 91       	pop	r17
    4500:	0f 91       	pop	r16
    4502:	ff 90       	pop	r15
    4504:	ef 90       	pop	r14
    4506:	df 90       	pop	r13
    4508:	cf 90       	pop	r12
    450a:	bf 90       	pop	r11
    450c:	af 90       	pop	r10
    450e:	9f 90       	pop	r9
    4510:	8f 90       	pop	r8
    4512:	7f 90       	pop	r7
    4514:	6f 90       	pop	r6
    4516:	5f 90       	pop	r5
    4518:	4f 90       	pop	r4
    451a:	3f 90       	pop	r3
    451c:	2f 90       	pop	r2
    451e:	08 95       	ret

00004520 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    4520:	ef 92       	push	r14
    4522:	ff 92       	push	r15
    4524:	0f 93       	push	r16
    4526:	1f 93       	push	r17
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	ec 01       	movw	r28, r24
	while(*Text)
    452e:	88 81       	ld	r24, Y
    4530:	88 23       	and	r24, r24
    4532:	19 f1       	breq	.+70     	; 0x457a <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4534:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__GLCD+0x1>
    4538:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <__GLCD+0x6>
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	29 0f       	add	r18, r25
    4540:	31 1d       	adc	r19, r1
    4542:	20 38       	cpi	r18, 0x80	; 128
    4544:	31 05       	cpc	r19, r1
    4546:	cc f4       	brge	.+50     	; 0x457a <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    4548:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    454a:	0f 2e       	mov	r0, r31
    454c:	f3 ec       	ldi	r31, 0xC3	; 195
    454e:	ef 2e       	mov	r14, r31
    4550:	f2 e0       	ldi	r31, 0x02	; 2
    4552:	ff 2e       	mov	r15, r31
    4554:	f0 2d       	mov	r31, r0
    4556:	08 ec       	ldi	r16, 0xC8	; 200
    4558:	12 e0       	ldi	r17, 0x02	; 2
    455a:	0a c0       	rjmp	.+20     	; 0x4570 <GLCD_PrintString+0x50>
    455c:	f7 01       	movw	r30, r14
    455e:	90 81       	ld	r25, Z
    4560:	f8 01       	movw	r30, r16
    4562:	20 81       	ld	r18, Z
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	29 0f       	add	r18, r25
    4568:	31 1d       	adc	r19, r1
    456a:	20 38       	cpi	r18, 0x80	; 128
    456c:	31 05       	cpc	r19, r1
    456e:	2c f4       	brge	.+10     	; 0x457a <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    4570:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    4574:	89 91       	ld	r24, Y+
    4576:	81 11       	cpse	r24, r1
    4578:	f1 cf       	rjmp	.-30     	; 0x455c <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    457a:	df 91       	pop	r29
    457c:	cf 91       	pop	r28
    457e:	1f 91       	pop	r17
    4580:	0f 91       	pop	r16
    4582:	ff 90       	pop	r15
    4584:	ef 90       	pop	r14
    4586:	08 95       	ret

00004588 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    4588:	0f 93       	push	r16
    458a:	1f 93       	push	r17
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	cd b7       	in	r28, 0x3d	; 61
    4592:	de b7       	in	r29, 0x3e	; 62
    4594:	2c 97       	sbiw	r28, 0x0c	; 12
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	f8 94       	cli
    459a:	de bf       	out	0x3e, r29	; 62
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    45a0:	61 15       	cp	r22, r1
    45a2:	71 05       	cpc	r23, r1
    45a4:	81 05       	cpc	r24, r1
    45a6:	91 05       	cpc	r25, r1
    45a8:	21 f4       	brne	.+8      	; 0x45b2 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    45aa:	80 e3       	ldi	r24, 0x30	; 48
    45ac:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
    45b0:	45 c1       	rjmp	.+650    	; 0x483c <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    45b2:	61 15       	cp	r22, r1
    45b4:	71 05       	cpc	r23, r1
    45b6:	81 05       	cpc	r24, r1
    45b8:	20 e8       	ldi	r18, 0x80	; 128
    45ba:	92 07       	cpc	r25, r18
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <GLCD_PrintInteger+0x38>
    45be:	3e c1       	rjmp	.+636    	; 0x483c <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    45c0:	fe 01       	movw	r30, r28
    45c2:	31 96       	adiw	r30, 0x01	; 1
    45c4:	2c e0       	ldi	r18, 0x0C	; 12
    45c6:	df 01       	movw	r26, r30
    45c8:	1d 92       	st	X+, r1
    45ca:	2a 95       	dec	r18
    45cc:	e9 f7       	brne	.-6      	; 0x45c8 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    45ce:	20 e3       	ldi	r18, 0x30	; 48
    45d0:	2b 87       	std	Y+11, r18	; 0x0b
    45d2:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    45d4:	29 87       	std	Y+9, r18	; 0x09
    45d6:	28 87       	std	Y+8, r18	; 0x08
    45d8:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    45da:	2e 83       	std	Y+6, r18	; 0x06
    45dc:	2d 83       	std	Y+5, r18	; 0x05
    45de:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    45e0:	2b 83       	std	Y+3, r18	; 0x03
    45e2:	2a 83       	std	Y+2, r18	; 0x02
    45e4:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    45e6:	99 23       	and	r25, r25
    45e8:	5c f4       	brge	.+22     	; 0x4600 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    45ea:	9b 01       	movw	r18, r22
    45ec:	ac 01       	movw	r20, r24
    45ee:	88 27       	eor	r24, r24
    45f0:	99 27       	eor	r25, r25
    45f2:	dc 01       	movw	r26, r24
    45f4:	82 1b       	sub	r24, r18
    45f6:	93 0b       	sbc	r25, r19
    45f8:	a4 0b       	sbc	r26, r20
    45fa:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    45fc:	41 e0       	ldi	r20, 0x01	; 1
    45fe:	03 c0       	rjmp	.+6      	; 0x4606 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    4604:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    4606:	81 30       	cpi	r24, 0x01	; 1
    4608:	3a ec       	ldi	r19, 0xCA	; 202
    460a:	93 07       	cpc	r25, r19
    460c:	3a e9       	ldi	r19, 0x9A	; 154
    460e:	a3 07       	cpc	r26, r19
    4610:	3b e3       	ldi	r19, 0x3B	; 59
    4612:	b3 07       	cpc	r27, r19
    4614:	94 f0       	brlt	.+36     	; 0x463a <GLCD_PrintInteger+0xb2>
    4616:	2a 81       	ldd	r18, Y+2	; 0x02
    4618:	2f 5f       	subi	r18, 0xFF	; 255
    461a:	01 c0       	rjmp	.+2      	; 0x461e <GLCD_PrintInteger+0x96>
    461c:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    461e:	9a 5c       	subi	r25, 0xCA	; 202
    4620:	aa 49       	sbci	r26, 0x9A	; 154
    4622:	bb 43       	sbci	r27, 0x3B	; 59
    4624:	32 2f       	mov	r19, r18
    4626:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    4628:	81 30       	cpi	r24, 0x01	; 1
    462a:	5a ec       	ldi	r21, 0xCA	; 202
    462c:	95 07       	cpc	r25, r21
    462e:	5a e9       	ldi	r21, 0x9A	; 154
    4630:	a5 07       	cpc	r26, r21
    4632:	5b e3       	ldi	r21, 0x3B	; 59
    4634:	b5 07       	cpc	r27, r21
    4636:	94 f7       	brge	.-28     	; 0x461c <GLCD_PrintInteger+0x94>
    4638:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    463a:	81 15       	cp	r24, r1
    463c:	21 ee       	ldi	r18, 0xE1	; 225
    463e:	92 07       	cpc	r25, r18
    4640:	25 ef       	ldi	r18, 0xF5	; 245
    4642:	a2 07       	cpc	r26, r18
    4644:	25 e0       	ldi	r18, 0x05	; 5
    4646:	b2 07       	cpc	r27, r18
    4648:	94 f0       	brlt	.+36     	; 0x466e <GLCD_PrintInteger+0xe6>
    464a:	2b 81       	ldd	r18, Y+3	; 0x03
    464c:	2f 5f       	subi	r18, 0xFF	; 255
    464e:	01 c0       	rjmp	.+2      	; 0x4652 <GLCD_PrintInteger+0xca>
    4650:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    4652:	91 5e       	subi	r25, 0xE1	; 225
    4654:	a5 4f       	sbci	r26, 0xF5	; 245
    4656:	b5 40       	sbci	r27, 0x05	; 5
    4658:	32 2f       	mov	r19, r18
    465a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    465c:	81 15       	cp	r24, r1
    465e:	51 ee       	ldi	r21, 0xE1	; 225
    4660:	95 07       	cpc	r25, r21
    4662:	55 ef       	ldi	r21, 0xF5	; 245
    4664:	a5 07       	cpc	r26, r21
    4666:	55 e0       	ldi	r21, 0x05	; 5
    4668:	b5 07       	cpc	r27, r21
    466a:	94 f7       	brge	.-28     	; 0x4650 <GLCD_PrintInteger+0xc8>
    466c:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    466e:	80 38       	cpi	r24, 0x80	; 128
    4670:	26 e9       	ldi	r18, 0x96	; 150
    4672:	92 07       	cpc	r25, r18
    4674:	28 e9       	ldi	r18, 0x98	; 152
    4676:	a2 07       	cpc	r26, r18
    4678:	b1 05       	cpc	r27, r1
    467a:	94 f0       	brlt	.+36     	; 0x46a0 <GLCD_PrintInteger+0x118>
    467c:	2c 81       	ldd	r18, Y+4	; 0x04
    467e:	2f 5f       	subi	r18, 0xFF	; 255
    4680:	01 c0       	rjmp	.+2      	; 0x4684 <GLCD_PrintInteger+0xfc>
    4682:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    4684:	80 58       	subi	r24, 0x80	; 128
    4686:	96 49       	sbci	r25, 0x96	; 150
    4688:	a8 49       	sbci	r26, 0x98	; 152
    468a:	b1 09       	sbc	r27, r1
    468c:	32 2f       	mov	r19, r18
    468e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    4690:	80 38       	cpi	r24, 0x80	; 128
    4692:	56 e9       	ldi	r21, 0x96	; 150
    4694:	95 07       	cpc	r25, r21
    4696:	58 e9       	ldi	r21, 0x98	; 152
    4698:	a5 07       	cpc	r26, r21
    469a:	b1 05       	cpc	r27, r1
    469c:	94 f7       	brge	.-28     	; 0x4682 <GLCD_PrintInteger+0xfa>
    469e:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    46a0:	80 34       	cpi	r24, 0x40	; 64
    46a2:	22 e4       	ldi	r18, 0x42	; 66
    46a4:	92 07       	cpc	r25, r18
    46a6:	2f e0       	ldi	r18, 0x0F	; 15
    46a8:	a2 07       	cpc	r26, r18
    46aa:	b1 05       	cpc	r27, r1
    46ac:	94 f0       	brlt	.+36     	; 0x46d2 <GLCD_PrintInteger+0x14a>
    46ae:	2d 81       	ldd	r18, Y+5	; 0x05
    46b0:	2f 5f       	subi	r18, 0xFF	; 255
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <GLCD_PrintInteger+0x12e>
    46b4:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    46b6:	80 54       	subi	r24, 0x40	; 64
    46b8:	92 44       	sbci	r25, 0x42	; 66
    46ba:	af 40       	sbci	r26, 0x0F	; 15
    46bc:	b1 09       	sbc	r27, r1
    46be:	32 2f       	mov	r19, r18
    46c0:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    46c2:	80 34       	cpi	r24, 0x40	; 64
    46c4:	52 e4       	ldi	r21, 0x42	; 66
    46c6:	95 07       	cpc	r25, r21
    46c8:	5f e0       	ldi	r21, 0x0F	; 15
    46ca:	a5 07       	cpc	r26, r21
    46cc:	b1 05       	cpc	r27, r1
    46ce:	94 f7       	brge	.-28     	; 0x46b4 <GLCD_PrintInteger+0x12c>
    46d0:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    46d2:	80 3a       	cpi	r24, 0xA0	; 160
    46d4:	26 e8       	ldi	r18, 0x86	; 134
    46d6:	92 07       	cpc	r25, r18
    46d8:	21 e0       	ldi	r18, 0x01	; 1
    46da:	a2 07       	cpc	r26, r18
    46dc:	b1 05       	cpc	r27, r1
    46de:	94 f0       	brlt	.+36     	; 0x4704 <GLCD_PrintInteger+0x17c>
    46e0:	2e 81       	ldd	r18, Y+6	; 0x06
    46e2:	2f 5f       	subi	r18, 0xFF	; 255
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <GLCD_PrintInteger+0x160>
    46e6:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    46e8:	80 5a       	subi	r24, 0xA0	; 160
    46ea:	96 48       	sbci	r25, 0x86	; 134
    46ec:	a1 40       	sbci	r26, 0x01	; 1
    46ee:	b1 09       	sbc	r27, r1
    46f0:	32 2f       	mov	r19, r18
    46f2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    46f4:	80 3a       	cpi	r24, 0xA0	; 160
    46f6:	56 e8       	ldi	r21, 0x86	; 134
    46f8:	95 07       	cpc	r25, r21
    46fa:	51 e0       	ldi	r21, 0x01	; 1
    46fc:	a5 07       	cpc	r26, r21
    46fe:	b1 05       	cpc	r27, r1
    4700:	94 f7       	brge	.-28     	; 0x46e6 <GLCD_PrintInteger+0x15e>
    4702:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    4704:	80 31       	cpi	r24, 0x10	; 16
    4706:	27 e2       	ldi	r18, 0x27	; 39
    4708:	92 07       	cpc	r25, r18
    470a:	a1 05       	cpc	r26, r1
    470c:	b1 05       	cpc	r27, r1
    470e:	8c f0       	brlt	.+34     	; 0x4732 <GLCD_PrintInteger+0x1aa>
    4710:	2f 81       	ldd	r18, Y+7	; 0x07
    4712:	2f 5f       	subi	r18, 0xFF	; 255
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <GLCD_PrintInteger+0x190>
    4716:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    4718:	80 51       	subi	r24, 0x10	; 16
    471a:	97 42       	sbci	r25, 0x27	; 39
    471c:	a1 09       	sbc	r26, r1
    471e:	b1 09       	sbc	r27, r1
    4720:	32 2f       	mov	r19, r18
    4722:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    4724:	80 31       	cpi	r24, 0x10	; 16
    4726:	57 e2       	ldi	r21, 0x27	; 39
    4728:	95 07       	cpc	r25, r21
    472a:	a1 05       	cpc	r26, r1
    472c:	b1 05       	cpc	r27, r1
    472e:	9c f7       	brge	.-26     	; 0x4716 <GLCD_PrintInteger+0x18e>
    4730:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4732:	88 3e       	cpi	r24, 0xE8	; 232
    4734:	23 e0       	ldi	r18, 0x03	; 3
    4736:	92 07       	cpc	r25, r18
    4738:	a1 05       	cpc	r26, r1
    473a:	b1 05       	cpc	r27, r1
    473c:	8c f0       	brlt	.+34     	; 0x4760 <GLCD_PrintInteger+0x1d8>
    473e:	28 85       	ldd	r18, Y+8	; 0x08
    4740:	2f 5f       	subi	r18, 0xFF	; 255
    4742:	01 c0       	rjmp	.+2      	; 0x4746 <GLCD_PrintInteger+0x1be>
    4744:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    4746:	88 5e       	subi	r24, 0xE8	; 232
    4748:	93 40       	sbci	r25, 0x03	; 3
    474a:	a1 09       	sbc	r26, r1
    474c:	b1 09       	sbc	r27, r1
    474e:	32 2f       	mov	r19, r18
    4750:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4752:	88 3e       	cpi	r24, 0xE8	; 232
    4754:	53 e0       	ldi	r21, 0x03	; 3
    4756:	95 07       	cpc	r25, r21
    4758:	a1 05       	cpc	r26, r1
    475a:	b1 05       	cpc	r27, r1
    475c:	9c f7       	brge	.-26     	; 0x4744 <GLCD_PrintInteger+0x1bc>
    475e:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    4760:	84 36       	cpi	r24, 0x64	; 100
    4762:	91 05       	cpc	r25, r1
    4764:	a1 05       	cpc	r26, r1
    4766:	b1 05       	cpc	r27, r1
    4768:	84 f0       	brlt	.+32     	; 0x478a <GLCD_PrintInteger+0x202>
    476a:	29 85       	ldd	r18, Y+9	; 0x09
    476c:	2f 5f       	subi	r18, 0xFF	; 255
    476e:	01 c0       	rjmp	.+2      	; 0x4772 <GLCD_PrintInteger+0x1ea>
    4770:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    4772:	84 56       	subi	r24, 0x64	; 100
    4774:	91 09       	sbc	r25, r1
    4776:	a1 09       	sbc	r26, r1
    4778:	b1 09       	sbc	r27, r1
    477a:	32 2f       	mov	r19, r18
    477c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    477e:	84 36       	cpi	r24, 0x64	; 100
    4780:	91 05       	cpc	r25, r1
    4782:	a1 05       	cpc	r26, r1
    4784:	b1 05       	cpc	r27, r1
    4786:	a4 f7       	brge	.-24     	; 0x4770 <GLCD_PrintInteger+0x1e8>
    4788:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    478a:	8a 30       	cpi	r24, 0x0A	; 10
    478c:	91 05       	cpc	r25, r1
    478e:	a1 05       	cpc	r26, r1
    4790:	b1 05       	cpc	r27, r1
    4792:	7c f0       	brlt	.+30     	; 0x47b2 <GLCD_PrintInteger+0x22a>
    4794:	2a 85       	ldd	r18, Y+10	; 0x0a
    4796:	2f 5f       	subi	r18, 0xFF	; 255
    4798:	01 c0       	rjmp	.+2      	; 0x479c <GLCD_PrintInteger+0x214>
    479a:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    479c:	0a 97       	sbiw	r24, 0x0a	; 10
    479e:	a1 09       	sbc	r26, r1
    47a0:	b1 09       	sbc	r27, r1
    47a2:	32 2f       	mov	r19, r18
    47a4:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    47a6:	8a 30       	cpi	r24, 0x0A	; 10
    47a8:	91 05       	cpc	r25, r1
    47aa:	a1 05       	cpc	r26, r1
    47ac:	b1 05       	cpc	r27, r1
    47ae:	ac f7       	brge	.-22     	; 0x479a <GLCD_PrintInteger+0x212>
    47b0:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    47b2:	18 16       	cp	r1, r24
    47b4:	19 06       	cpc	r1, r25
    47b6:	1a 06       	cpc	r1, r26
    47b8:	1b 06       	cpc	r1, r27
    47ba:	5c f4       	brge	.+22     	; 0x47d2 <GLCD_PrintInteger+0x24a>
    47bc:	5b 85       	ldd	r21, Y+11	; 0x0b
    47be:	8c 01       	movw	r16, r24
    47c0:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    47c2:	01 50       	subi	r16, 0x01	; 1
    47c4:	11 09       	sbc	r17, r1
    47c6:	21 09       	sbc	r18, r1
    47c8:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    47ca:	d9 f7       	brne	.-10     	; 0x47c2 <GLCD_PrintInteger+0x23a>
    47cc:	65 2f       	mov	r22, r21
    47ce:	68 0f       	add	r22, r24
    47d0:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	80 33       	cpi	r24, 0x30	; 48
    47d6:	61 f4       	brne	.+24     	; 0x47f0 <GLCD_PrintInteger+0x268>
    47d8:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    47da:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    47dc:	e1 e0       	ldi	r30, 0x01	; 1
    47de:	f0 e0       	ldi	r31, 0x00	; 0
    47e0:	ec 0f       	add	r30, r28
    47e2:	fd 1f       	adc	r31, r29
    47e4:	e8 0f       	add	r30, r24
    47e6:	f1 1d       	adc	r31, r1
    47e8:	90 81       	ld	r25, Z
    47ea:	90 33       	cpi	r25, 0x30	; 48
    47ec:	b1 f3       	breq	.-20     	; 0x47da <GLCD_PrintInteger+0x252>
    47ee:	01 c0       	rjmp	.+2      	; 0x47f2 <GLCD_PrintInteger+0x26a>
    47f0:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    47f2:	44 23       	and	r20, r20
    47f4:	31 f0       	breq	.+12     	; 0x4802 <GLCD_PrintInteger+0x27a>
	{
		i--;
    47f6:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    47f8:	fe 01       	movw	r30, r28
    47fa:	e8 0f       	add	r30, r24
    47fc:	f1 1d       	adc	r31, r1
    47fe:	9d e2       	ldi	r25, 0x2D	; 45
    4800:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    4802:	4a e0       	ldi	r20, 0x0A	; 10
    4804:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    4806:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	e1 e0       	ldi	r30, 0x01	; 1
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	ec 0f       	add	r30, r28
    4810:	fd 1f       	adc	r31, r29
    4812:	e2 0f       	add	r30, r18
    4814:	f1 1d       	adc	r31, r1
    4816:	df 01       	movw	r26, r30
    4818:	a8 0f       	add	r26, r24
    481a:	b9 1f       	adc	r27, r25
    481c:	3c 91       	ld	r19, X
    481e:	30 83       	st	Z, r19
		i++;
    4820:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    4822:	42 17       	cp	r20, r18
    4824:	90 f7       	brcc	.-28     	; 0x480a <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    4826:	e1 e0       	ldi	r30, 0x01	; 1
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	ec 0f       	add	r30, r28
    482c:	fd 1f       	adc	r31, r29
    482e:	e2 0f       	add	r30, r18
    4830:	f1 1d       	adc	r31, r1
    4832:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    4834:	ce 01       	movw	r24, r28
    4836:	01 96       	adiw	r24, 0x01	; 1
    4838:	0e 94 90 22 	call	0x4520	; 0x4520 <GLCD_PrintString>
	}
}
    483c:	2c 96       	adiw	r28, 0x0c	; 12
    483e:	0f b6       	in	r0, 0x3f	; 63
    4840:	f8 94       	cli
    4842:	de bf       	out	0x3e, r29	; 62
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	cd bf       	out	0x3d, r28	; 61
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	1f 91       	pop	r17
    484e:	0f 91       	pop	r16
    4850:	08 95       	ret

00004852 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    4852:	8f 92       	push	r8
    4854:	9f 92       	push	r9
    4856:	af 92       	push	r10
    4858:	bf 92       	push	r11
    485a:	cf 92       	push	r12
    485c:	df 92       	push	r13
    485e:	ef 92       	push	r14
    4860:	ff 92       	push	r15
    4862:	6b 01       	movw	r12, r22
    4864:	7c 01       	movw	r14, r24
    4866:	49 01       	movw	r8, r18
    4868:	5a 01       	movw	r10, r20
	if (Value == 0)
    486a:	20 e0       	ldi	r18, 0x00	; 0
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	a9 01       	movw	r20, r18
    4870:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    4874:	81 11       	cpse	r24, r1
    4876:	0a c0       	rjmp	.+20     	; 0x488c <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    4878:	80 e3       	ldi	r24, 0x30	; 48
    487a:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    487e:	8e e2       	ldi	r24, 0x2E	; 46
    4880:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    4884:	80 e3       	ldi	r24, 0x30	; 48
    4886:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
    488a:	4a c0       	rjmp	.+148    	; 0x4920 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	40 e0       	ldi	r20, 0x00	; 0
    4892:	5f ec       	ldi	r21, 0xCF	; 207
    4894:	c7 01       	movw	r24, r14
    4896:	b6 01       	movw	r22, r12
    4898:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__gesf2>
    489c:	88 23       	and	r24, r24
    489e:	0c f4       	brge	.+2      	; 0x48a2 <GLCD_PrintDouble+0x50>
    48a0:	3f c0       	rjmp	.+126    	; 0x4920 <GLCD_PrintDouble+0xce>
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e0       	ldi	r20, 0x00	; 0
    48a8:	5f e4       	ldi	r21, 0x4F	; 79
    48aa:	c7 01       	movw	r24, r14
    48ac:	b6 01       	movw	r22, r12
    48ae:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    48b2:	88 23       	and	r24, r24
    48b4:	ac f5       	brge	.+106    	; 0x4920 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	a9 01       	movw	r20, r18
    48bc:	c7 01       	movw	r24, r14
    48be:	b6 01       	movw	r22, r12
    48c0:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__cmpsf2>
    48c4:	88 23       	and	r24, r24
    48c6:	3c f4       	brge	.+14     	; 0x48d6 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    48c8:	f7 fa       	bst	r15, 7
    48ca:	f0 94       	com	r15
    48cc:	f7 f8       	bld	r15, 7
    48ce:	f0 94       	com	r15
			GLCD_PrintChar('-');
    48d0:	8d e2       	ldi	r24, 0x2D	; 45
    48d2:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    48d6:	c7 01       	movw	r24, r14
    48d8:	b6 01       	movw	r22, r12
    48da:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__fixsfsi>
    48de:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    48e2:	8e e2       	ldi	r24, 0x2E	; 46
    48e4:	0e 94 1b 21 	call	0x4236	; 0x4236 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    48e8:	c7 01       	movw	r24, r14
    48ea:	b6 01       	movw	r22, r12
    48ec:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    48f0:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    48f4:	9b 01       	movw	r18, r22
    48f6:	ac 01       	movw	r20, r24
    48f8:	c7 01       	movw	r24, r14
    48fa:	b6 01       	movw	r22, r12
    48fc:	0e 94 bd 24 	call	0x497a	; 0x497a <__subsf3>
    4900:	6b 01       	movw	r12, r22
    4902:	7c 01       	movw	r14, r24
    4904:	c5 01       	movw	r24, r10
    4906:	b4 01       	movw	r22, r8
    4908:	0e 94 d7 25 	call	0x4bae	; 0x4bae <__floatunsisf>
    490c:	9b 01       	movw	r18, r22
    490e:	ac 01       	movw	r20, r24
    4910:	c7 01       	movw	r24, r14
    4912:	b6 01       	movw	r22, r12
    4914:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__mulsf3>
    4918:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__fixsfsi>
    491c:	0e 94 c4 22 	call	0x4588	; 0x4588 <GLCD_PrintInteger>
	}
}
    4920:	ff 90       	pop	r15
    4922:	ef 90       	pop	r14
    4924:	df 90       	pop	r13
    4926:	cf 90       	pop	r12
    4928:	bf 90       	pop	r11
    492a:	af 90       	pop	r10
    492c:	9f 90       	pop	r9
    492e:	8f 90       	pop	r8
    4930:	08 95       	ret

00004932 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    4932:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    4934:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    4936:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    4938:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    493a:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    493c:	8c e0       	ldi	r24, 0x0C	; 12
    493e:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    4940:	84 e0       	ldi	r24, 0x04	; 4
    4942:	86 bf       	out	0x36, r24	; 54
    4944:	08 95       	ret

00004946 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    4946:	81 b1       	in	r24, 0x01	; 1
}
    4948:	88 7f       	andi	r24, 0xF8	; 248
    494a:	08 95       	ret

0000494c <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    494c:	84 ea       	ldi	r24, 0xA4	; 164
    494e:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    4950:	06 b6       	in	r0, 0x36	; 54
    4952:	07 fe       	sbrs	r0, 7
    4954:	fd cf       	rjmp	.-6      	; 0x4950 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    4956:	0e 94 a3 24 	call	0x4946	; 0x4946 <TWI_Status>
}
    495a:	08 95       	ret

0000495c <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    495c:	85 ed       	ldi	r24, 0xD5	; 213
    495e:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    4960:	06 b6       	in	r0, 0x36	; 54
    4962:	04 fc       	sbrc	r0, 4
    4964:	fd cf       	rjmp	.-6      	; 0x4960 <TWI_EndTransmission+0x4>
}
    4966:	08 95       	ret

00004968 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    4968:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    496a:	84 e8       	ldi	r24, 0x84	; 132
    496c:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    496e:	06 b6       	in	r0, 0x36	; 54
    4970:	07 fe       	sbrs	r0, 7
    4972:	fd cf       	rjmp	.-6      	; 0x496e <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    4974:	0e 94 a3 24 	call	0x4946	; 0x4946 <TWI_Status>
}
    4978:	08 95       	ret

0000497a <__subsf3>:
    497a:	50 58       	subi	r21, 0x80	; 128

0000497c <__addsf3>:
    497c:	bb 27       	eor	r27, r27
    497e:	aa 27       	eor	r26, r26
    4980:	0e 94 d5 24 	call	0x49aa	; 0x49aa <__addsf3x>
    4984:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__fp_round>
    4988:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__fp_pscA>
    498c:	38 f0       	brcs	.+14     	; 0x499c <__addsf3+0x20>
    498e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__fp_pscB>
    4992:	20 f0       	brcs	.+8      	; 0x499c <__addsf3+0x20>
    4994:	39 f4       	brne	.+14     	; 0x49a4 <__addsf3+0x28>
    4996:	9f 3f       	cpi	r25, 0xFF	; 255
    4998:	19 f4       	brne	.+6      	; 0x49a0 <__addsf3+0x24>
    499a:	26 f4       	brtc	.+8      	; 0x49a4 <__addsf3+0x28>
    499c:	0c 94 3e 26 	jmp	0x4c7c	; 0x4c7c <__fp_nan>
    49a0:	0e f4       	brtc	.+2      	; 0x49a4 <__addsf3+0x28>
    49a2:	e0 95       	com	r30
    49a4:	e7 fb       	bst	r30, 7
    49a6:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__fp_inf>

000049aa <__addsf3x>:
    49aa:	e9 2f       	mov	r30, r25
    49ac:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__fp_split3>
    49b0:	58 f3       	brcs	.-42     	; 0x4988 <__addsf3+0xc>
    49b2:	ba 17       	cp	r27, r26
    49b4:	62 07       	cpc	r22, r18
    49b6:	73 07       	cpc	r23, r19
    49b8:	84 07       	cpc	r24, r20
    49ba:	95 07       	cpc	r25, r21
    49bc:	20 f0       	brcs	.+8      	; 0x49c6 <__addsf3x+0x1c>
    49be:	79 f4       	brne	.+30     	; 0x49de <__addsf3x+0x34>
    49c0:	a6 f5       	brtc	.+104    	; 0x4a2a <__addsf3x+0x80>
    49c2:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__fp_zero>
    49c6:	0e f4       	brtc	.+2      	; 0x49ca <__addsf3x+0x20>
    49c8:	e0 95       	com	r30
    49ca:	0b 2e       	mov	r0, r27
    49cc:	ba 2f       	mov	r27, r26
    49ce:	a0 2d       	mov	r26, r0
    49d0:	0b 01       	movw	r0, r22
    49d2:	b9 01       	movw	r22, r18
    49d4:	90 01       	movw	r18, r0
    49d6:	0c 01       	movw	r0, r24
    49d8:	ca 01       	movw	r24, r20
    49da:	a0 01       	movw	r20, r0
    49dc:	11 24       	eor	r1, r1
    49de:	ff 27       	eor	r31, r31
    49e0:	59 1b       	sub	r21, r25
    49e2:	99 f0       	breq	.+38     	; 0x4a0a <__addsf3x+0x60>
    49e4:	59 3f       	cpi	r21, 0xF9	; 249
    49e6:	50 f4       	brcc	.+20     	; 0x49fc <__addsf3x+0x52>
    49e8:	50 3e       	cpi	r21, 0xE0	; 224
    49ea:	68 f1       	brcs	.+90     	; 0x4a46 <__addsf3x+0x9c>
    49ec:	1a 16       	cp	r1, r26
    49ee:	f0 40       	sbci	r31, 0x00	; 0
    49f0:	a2 2f       	mov	r26, r18
    49f2:	23 2f       	mov	r18, r19
    49f4:	34 2f       	mov	r19, r20
    49f6:	44 27       	eor	r20, r20
    49f8:	58 5f       	subi	r21, 0xF8	; 248
    49fa:	f3 cf       	rjmp	.-26     	; 0x49e2 <__addsf3x+0x38>
    49fc:	46 95       	lsr	r20
    49fe:	37 95       	ror	r19
    4a00:	27 95       	ror	r18
    4a02:	a7 95       	ror	r26
    4a04:	f0 40       	sbci	r31, 0x00	; 0
    4a06:	53 95       	inc	r21
    4a08:	c9 f7       	brne	.-14     	; 0x49fc <__addsf3x+0x52>
    4a0a:	7e f4       	brtc	.+30     	; 0x4a2a <__addsf3x+0x80>
    4a0c:	1f 16       	cp	r1, r31
    4a0e:	ba 0b       	sbc	r27, r26
    4a10:	62 0b       	sbc	r22, r18
    4a12:	73 0b       	sbc	r23, r19
    4a14:	84 0b       	sbc	r24, r20
    4a16:	ba f0       	brmi	.+46     	; 0x4a46 <__addsf3x+0x9c>
    4a18:	91 50       	subi	r25, 0x01	; 1
    4a1a:	a1 f0       	breq	.+40     	; 0x4a44 <__addsf3x+0x9a>
    4a1c:	ff 0f       	add	r31, r31
    4a1e:	bb 1f       	adc	r27, r27
    4a20:	66 1f       	adc	r22, r22
    4a22:	77 1f       	adc	r23, r23
    4a24:	88 1f       	adc	r24, r24
    4a26:	c2 f7       	brpl	.-16     	; 0x4a18 <__addsf3x+0x6e>
    4a28:	0e c0       	rjmp	.+28     	; 0x4a46 <__addsf3x+0x9c>
    4a2a:	ba 0f       	add	r27, r26
    4a2c:	62 1f       	adc	r22, r18
    4a2e:	73 1f       	adc	r23, r19
    4a30:	84 1f       	adc	r24, r20
    4a32:	48 f4       	brcc	.+18     	; 0x4a46 <__addsf3x+0x9c>
    4a34:	87 95       	ror	r24
    4a36:	77 95       	ror	r23
    4a38:	67 95       	ror	r22
    4a3a:	b7 95       	ror	r27
    4a3c:	f7 95       	ror	r31
    4a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    4a40:	08 f0       	brcs	.+2      	; 0x4a44 <__addsf3x+0x9a>
    4a42:	b0 cf       	rjmp	.-160    	; 0x49a4 <__addsf3+0x28>
    4a44:	93 95       	inc	r25
    4a46:	88 0f       	add	r24, r24
    4a48:	08 f0       	brcs	.+2      	; 0x4a4c <__addsf3x+0xa2>
    4a4a:	99 27       	eor	r25, r25
    4a4c:	ee 0f       	add	r30, r30
    4a4e:	97 95       	ror	r25
    4a50:	87 95       	ror	r24
    4a52:	08 95       	ret

00004a54 <__cmpsf2>:
    4a54:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__fp_cmp>
    4a58:	08 f4       	brcc	.+2      	; 0x4a5c <__cmpsf2+0x8>
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	08 95       	ret

00004a5e <__divsf3>:
    4a5e:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divsf3x>
    4a62:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__fp_round>
    4a66:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__fp_pscB>
    4a6a:	58 f0       	brcs	.+22     	; 0x4a82 <__divsf3+0x24>
    4a6c:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__fp_pscA>
    4a70:	40 f0       	brcs	.+16     	; 0x4a82 <__divsf3+0x24>
    4a72:	29 f4       	brne	.+10     	; 0x4a7e <__divsf3+0x20>
    4a74:	5f 3f       	cpi	r21, 0xFF	; 255
    4a76:	29 f0       	breq	.+10     	; 0x4a82 <__divsf3+0x24>
    4a78:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__fp_inf>
    4a7c:	51 11       	cpse	r21, r1
    4a7e:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__fp_szero>
    4a82:	0c 94 3e 26 	jmp	0x4c7c	; 0x4c7c <__fp_nan>

00004a86 <__divsf3x>:
    4a86:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__fp_split3>
    4a8a:	68 f3       	brcs	.-38     	; 0x4a66 <__divsf3+0x8>

00004a8c <__divsf3_pse>:
    4a8c:	99 23       	and	r25, r25
    4a8e:	b1 f3       	breq	.-20     	; 0x4a7c <__divsf3+0x1e>
    4a90:	55 23       	and	r21, r21
    4a92:	91 f3       	breq	.-28     	; 0x4a78 <__divsf3+0x1a>
    4a94:	95 1b       	sub	r25, r21
    4a96:	55 0b       	sbc	r21, r21
    4a98:	bb 27       	eor	r27, r27
    4a9a:	aa 27       	eor	r26, r26
    4a9c:	62 17       	cp	r22, r18
    4a9e:	73 07       	cpc	r23, r19
    4aa0:	84 07       	cpc	r24, r20
    4aa2:	38 f0       	brcs	.+14     	; 0x4ab2 <__divsf3_pse+0x26>
    4aa4:	9f 5f       	subi	r25, 0xFF	; 255
    4aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa8:	22 0f       	add	r18, r18
    4aaa:	33 1f       	adc	r19, r19
    4aac:	44 1f       	adc	r20, r20
    4aae:	aa 1f       	adc	r26, r26
    4ab0:	a9 f3       	breq	.-22     	; 0x4a9c <__divsf3_pse+0x10>
    4ab2:	35 d0       	rcall	.+106    	; 0x4b1e <__divsf3_pse+0x92>
    4ab4:	0e 2e       	mov	r0, r30
    4ab6:	3a f0       	brmi	.+14     	; 0x4ac6 <__divsf3_pse+0x3a>
    4ab8:	e0 e8       	ldi	r30, 0x80	; 128
    4aba:	32 d0       	rcall	.+100    	; 0x4b20 <__divsf3_pse+0x94>
    4abc:	91 50       	subi	r25, 0x01	; 1
    4abe:	50 40       	sbci	r21, 0x00	; 0
    4ac0:	e6 95       	lsr	r30
    4ac2:	00 1c       	adc	r0, r0
    4ac4:	ca f7       	brpl	.-14     	; 0x4ab8 <__divsf3_pse+0x2c>
    4ac6:	2b d0       	rcall	.+86     	; 0x4b1e <__divsf3_pse+0x92>
    4ac8:	fe 2f       	mov	r31, r30
    4aca:	29 d0       	rcall	.+82     	; 0x4b1e <__divsf3_pse+0x92>
    4acc:	66 0f       	add	r22, r22
    4ace:	77 1f       	adc	r23, r23
    4ad0:	88 1f       	adc	r24, r24
    4ad2:	bb 1f       	adc	r27, r27
    4ad4:	26 17       	cp	r18, r22
    4ad6:	37 07       	cpc	r19, r23
    4ad8:	48 07       	cpc	r20, r24
    4ada:	ab 07       	cpc	r26, r27
    4adc:	b0 e8       	ldi	r27, 0x80	; 128
    4ade:	09 f0       	breq	.+2      	; 0x4ae2 <__divsf3_pse+0x56>
    4ae0:	bb 0b       	sbc	r27, r27
    4ae2:	80 2d       	mov	r24, r0
    4ae4:	bf 01       	movw	r22, r30
    4ae6:	ff 27       	eor	r31, r31
    4ae8:	93 58       	subi	r25, 0x83	; 131
    4aea:	5f 4f       	sbci	r21, 0xFF	; 255
    4aec:	3a f0       	brmi	.+14     	; 0x4afc <__divsf3_pse+0x70>
    4aee:	9e 3f       	cpi	r25, 0xFE	; 254
    4af0:	51 05       	cpc	r21, r1
    4af2:	78 f0       	brcs	.+30     	; 0x4b12 <__divsf3_pse+0x86>
    4af4:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__fp_inf>
    4af8:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__fp_szero>
    4afc:	5f 3f       	cpi	r21, 0xFF	; 255
    4afe:	e4 f3       	brlt	.-8      	; 0x4af8 <__divsf3_pse+0x6c>
    4b00:	98 3e       	cpi	r25, 0xE8	; 232
    4b02:	d4 f3       	brlt	.-12     	; 0x4af8 <__divsf3_pse+0x6c>
    4b04:	86 95       	lsr	r24
    4b06:	77 95       	ror	r23
    4b08:	67 95       	ror	r22
    4b0a:	b7 95       	ror	r27
    4b0c:	f7 95       	ror	r31
    4b0e:	9f 5f       	subi	r25, 0xFF	; 255
    4b10:	c9 f7       	brne	.-14     	; 0x4b04 <__divsf3_pse+0x78>
    4b12:	88 0f       	add	r24, r24
    4b14:	91 1d       	adc	r25, r1
    4b16:	96 95       	lsr	r25
    4b18:	87 95       	ror	r24
    4b1a:	97 f9       	bld	r25, 7
    4b1c:	08 95       	ret
    4b1e:	e1 e0       	ldi	r30, 0x01	; 1
    4b20:	66 0f       	add	r22, r22
    4b22:	77 1f       	adc	r23, r23
    4b24:	88 1f       	adc	r24, r24
    4b26:	bb 1f       	adc	r27, r27
    4b28:	62 17       	cp	r22, r18
    4b2a:	73 07       	cpc	r23, r19
    4b2c:	84 07       	cpc	r24, r20
    4b2e:	ba 07       	cpc	r27, r26
    4b30:	20 f0       	brcs	.+8      	; 0x4b3a <__divsf3_pse+0xae>
    4b32:	62 1b       	sub	r22, r18
    4b34:	73 0b       	sbc	r23, r19
    4b36:	84 0b       	sbc	r24, r20
    4b38:	ba 0b       	sbc	r27, r26
    4b3a:	ee 1f       	adc	r30, r30
    4b3c:	88 f7       	brcc	.-30     	; 0x4b20 <__divsf3_pse+0x94>
    4b3e:	e0 95       	com	r30
    4b40:	08 95       	ret

00004b42 <__fixsfsi>:
    4b42:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4b46:	68 94       	set
    4b48:	b1 11       	cpse	r27, r1
    4b4a:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__fp_szero>
    4b4e:	08 95       	ret

00004b50 <__fixunssfsi>:
    4b50:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <__fp_splitA>
    4b54:	88 f0       	brcs	.+34     	; 0x4b78 <__fixunssfsi+0x28>
    4b56:	9f 57       	subi	r25, 0x7F	; 127
    4b58:	98 f0       	brcs	.+38     	; 0x4b80 <__fixunssfsi+0x30>
    4b5a:	b9 2f       	mov	r27, r25
    4b5c:	99 27       	eor	r25, r25
    4b5e:	b7 51       	subi	r27, 0x17	; 23
    4b60:	b0 f0       	brcs	.+44     	; 0x4b8e <__fixunssfsi+0x3e>
    4b62:	e1 f0       	breq	.+56     	; 0x4b9c <__fixunssfsi+0x4c>
    4b64:	66 0f       	add	r22, r22
    4b66:	77 1f       	adc	r23, r23
    4b68:	88 1f       	adc	r24, r24
    4b6a:	99 1f       	adc	r25, r25
    4b6c:	1a f0       	brmi	.+6      	; 0x4b74 <__fixunssfsi+0x24>
    4b6e:	ba 95       	dec	r27
    4b70:	c9 f7       	brne	.-14     	; 0x4b64 <__fixunssfsi+0x14>
    4b72:	14 c0       	rjmp	.+40     	; 0x4b9c <__fixunssfsi+0x4c>
    4b74:	b1 30       	cpi	r27, 0x01	; 1
    4b76:	91 f0       	breq	.+36     	; 0x4b9c <__fixunssfsi+0x4c>
    4b78:	0e 94 82 26 	call	0x4d04	; 0x4d04 <__fp_zero>
    4b7c:	b1 e0       	ldi	r27, 0x01	; 1
    4b7e:	08 95       	ret
    4b80:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__fp_zero>
    4b84:	67 2f       	mov	r22, r23
    4b86:	78 2f       	mov	r23, r24
    4b88:	88 27       	eor	r24, r24
    4b8a:	b8 5f       	subi	r27, 0xF8	; 248
    4b8c:	39 f0       	breq	.+14     	; 0x4b9c <__fixunssfsi+0x4c>
    4b8e:	b9 3f       	cpi	r27, 0xF9	; 249
    4b90:	cc f3       	brlt	.-14     	; 0x4b84 <__fixunssfsi+0x34>
    4b92:	86 95       	lsr	r24
    4b94:	77 95       	ror	r23
    4b96:	67 95       	ror	r22
    4b98:	b3 95       	inc	r27
    4b9a:	d9 f7       	brne	.-10     	; 0x4b92 <__fixunssfsi+0x42>
    4b9c:	3e f4       	brtc	.+14     	; 0x4bac <__fixunssfsi+0x5c>
    4b9e:	90 95       	com	r25
    4ba0:	80 95       	com	r24
    4ba2:	70 95       	com	r23
    4ba4:	61 95       	neg	r22
    4ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    4baa:	9f 4f       	sbci	r25, 0xFF	; 255
    4bac:	08 95       	ret

00004bae <__floatunsisf>:
    4bae:	e8 94       	clt
    4bb0:	09 c0       	rjmp	.+18     	; 0x4bc4 <__floatsisf+0x12>

00004bb2 <__floatsisf>:
    4bb2:	97 fb       	bst	r25, 7
    4bb4:	3e f4       	brtc	.+14     	; 0x4bc4 <__floatsisf+0x12>
    4bb6:	90 95       	com	r25
    4bb8:	80 95       	com	r24
    4bba:	70 95       	com	r23
    4bbc:	61 95       	neg	r22
    4bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc4:	99 23       	and	r25, r25
    4bc6:	a9 f0       	breq	.+42     	; 0x4bf2 <__floatsisf+0x40>
    4bc8:	f9 2f       	mov	r31, r25
    4bca:	96 e9       	ldi	r25, 0x96	; 150
    4bcc:	bb 27       	eor	r27, r27
    4bce:	93 95       	inc	r25
    4bd0:	f6 95       	lsr	r31
    4bd2:	87 95       	ror	r24
    4bd4:	77 95       	ror	r23
    4bd6:	67 95       	ror	r22
    4bd8:	b7 95       	ror	r27
    4bda:	f1 11       	cpse	r31, r1
    4bdc:	f8 cf       	rjmp	.-16     	; 0x4bce <__floatsisf+0x1c>
    4bde:	fa f4       	brpl	.+62     	; 0x4c1e <__floatsisf+0x6c>
    4be0:	bb 0f       	add	r27, r27
    4be2:	11 f4       	brne	.+4      	; 0x4be8 <__floatsisf+0x36>
    4be4:	60 ff       	sbrs	r22, 0
    4be6:	1b c0       	rjmp	.+54     	; 0x4c1e <__floatsisf+0x6c>
    4be8:	6f 5f       	subi	r22, 0xFF	; 255
    4bea:	7f 4f       	sbci	r23, 0xFF	; 255
    4bec:	8f 4f       	sbci	r24, 0xFF	; 255
    4bee:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf0:	16 c0       	rjmp	.+44     	; 0x4c1e <__floatsisf+0x6c>
    4bf2:	88 23       	and	r24, r24
    4bf4:	11 f0       	breq	.+4      	; 0x4bfa <__floatsisf+0x48>
    4bf6:	96 e9       	ldi	r25, 0x96	; 150
    4bf8:	11 c0       	rjmp	.+34     	; 0x4c1c <__floatsisf+0x6a>
    4bfa:	77 23       	and	r23, r23
    4bfc:	21 f0       	breq	.+8      	; 0x4c06 <__floatsisf+0x54>
    4bfe:	9e e8       	ldi	r25, 0x8E	; 142
    4c00:	87 2f       	mov	r24, r23
    4c02:	76 2f       	mov	r23, r22
    4c04:	05 c0       	rjmp	.+10     	; 0x4c10 <__floatsisf+0x5e>
    4c06:	66 23       	and	r22, r22
    4c08:	71 f0       	breq	.+28     	; 0x4c26 <__floatsisf+0x74>
    4c0a:	96 e8       	ldi	r25, 0x86	; 134
    4c0c:	86 2f       	mov	r24, r22
    4c0e:	70 e0       	ldi	r23, 0x00	; 0
    4c10:	60 e0       	ldi	r22, 0x00	; 0
    4c12:	2a f0       	brmi	.+10     	; 0x4c1e <__floatsisf+0x6c>
    4c14:	9a 95       	dec	r25
    4c16:	66 0f       	add	r22, r22
    4c18:	77 1f       	adc	r23, r23
    4c1a:	88 1f       	adc	r24, r24
    4c1c:	da f7       	brpl	.-10     	; 0x4c14 <__floatsisf+0x62>
    4c1e:	88 0f       	add	r24, r24
    4c20:	96 95       	lsr	r25
    4c22:	87 95       	ror	r24
    4c24:	97 f9       	bld	r25, 7
    4c26:	08 95       	ret

00004c28 <__fp_cmp>:
    4c28:	99 0f       	add	r25, r25
    4c2a:	00 08       	sbc	r0, r0
    4c2c:	55 0f       	add	r21, r21
    4c2e:	aa 0b       	sbc	r26, r26
    4c30:	e0 e8       	ldi	r30, 0x80	; 128
    4c32:	fe ef       	ldi	r31, 0xFE	; 254
    4c34:	16 16       	cp	r1, r22
    4c36:	17 06       	cpc	r1, r23
    4c38:	e8 07       	cpc	r30, r24
    4c3a:	f9 07       	cpc	r31, r25
    4c3c:	c0 f0       	brcs	.+48     	; 0x4c6e <__fp_cmp+0x46>
    4c3e:	12 16       	cp	r1, r18
    4c40:	13 06       	cpc	r1, r19
    4c42:	e4 07       	cpc	r30, r20
    4c44:	f5 07       	cpc	r31, r21
    4c46:	98 f0       	brcs	.+38     	; 0x4c6e <__fp_cmp+0x46>
    4c48:	62 1b       	sub	r22, r18
    4c4a:	73 0b       	sbc	r23, r19
    4c4c:	84 0b       	sbc	r24, r20
    4c4e:	95 0b       	sbc	r25, r21
    4c50:	39 f4       	brne	.+14     	; 0x4c60 <__fp_cmp+0x38>
    4c52:	0a 26       	eor	r0, r26
    4c54:	61 f0       	breq	.+24     	; 0x4c6e <__fp_cmp+0x46>
    4c56:	23 2b       	or	r18, r19
    4c58:	24 2b       	or	r18, r20
    4c5a:	25 2b       	or	r18, r21
    4c5c:	21 f4       	brne	.+8      	; 0x4c66 <__fp_cmp+0x3e>
    4c5e:	08 95       	ret
    4c60:	0a 26       	eor	r0, r26
    4c62:	09 f4       	brne	.+2      	; 0x4c66 <__fp_cmp+0x3e>
    4c64:	a1 40       	sbci	r26, 0x01	; 1
    4c66:	a6 95       	lsr	r26
    4c68:	8f ef       	ldi	r24, 0xFF	; 255
    4c6a:	81 1d       	adc	r24, r1
    4c6c:	81 1d       	adc	r24, r1
    4c6e:	08 95       	ret

00004c70 <__fp_inf>:
    4c70:	97 f9       	bld	r25, 7
    4c72:	9f 67       	ori	r25, 0x7F	; 127
    4c74:	80 e8       	ldi	r24, 0x80	; 128
    4c76:	70 e0       	ldi	r23, 0x00	; 0
    4c78:	60 e0       	ldi	r22, 0x00	; 0
    4c7a:	08 95       	ret

00004c7c <__fp_nan>:
    4c7c:	9f ef       	ldi	r25, 0xFF	; 255
    4c7e:	80 ec       	ldi	r24, 0xC0	; 192
    4c80:	08 95       	ret

00004c82 <__fp_pscA>:
    4c82:	00 24       	eor	r0, r0
    4c84:	0a 94       	dec	r0
    4c86:	16 16       	cp	r1, r22
    4c88:	17 06       	cpc	r1, r23
    4c8a:	18 06       	cpc	r1, r24
    4c8c:	09 06       	cpc	r0, r25
    4c8e:	08 95       	ret

00004c90 <__fp_pscB>:
    4c90:	00 24       	eor	r0, r0
    4c92:	0a 94       	dec	r0
    4c94:	12 16       	cp	r1, r18
    4c96:	13 06       	cpc	r1, r19
    4c98:	14 06       	cpc	r1, r20
    4c9a:	05 06       	cpc	r0, r21
    4c9c:	08 95       	ret

00004c9e <__fp_round>:
    4c9e:	09 2e       	mov	r0, r25
    4ca0:	03 94       	inc	r0
    4ca2:	00 0c       	add	r0, r0
    4ca4:	11 f4       	brne	.+4      	; 0x4caa <__fp_round+0xc>
    4ca6:	88 23       	and	r24, r24
    4ca8:	52 f0       	brmi	.+20     	; 0x4cbe <__fp_round+0x20>
    4caa:	bb 0f       	add	r27, r27
    4cac:	40 f4       	brcc	.+16     	; 0x4cbe <__fp_round+0x20>
    4cae:	bf 2b       	or	r27, r31
    4cb0:	11 f4       	brne	.+4      	; 0x4cb6 <__fp_round+0x18>
    4cb2:	60 ff       	sbrs	r22, 0
    4cb4:	04 c0       	rjmp	.+8      	; 0x4cbe <__fp_round+0x20>
    4cb6:	6f 5f       	subi	r22, 0xFF	; 255
    4cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cba:	8f 4f       	sbci	r24, 0xFF	; 255
    4cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cbe:	08 95       	ret

00004cc0 <__fp_split3>:
    4cc0:	57 fd       	sbrc	r21, 7
    4cc2:	90 58       	subi	r25, 0x80	; 128
    4cc4:	44 0f       	add	r20, r20
    4cc6:	55 1f       	adc	r21, r21
    4cc8:	59 f0       	breq	.+22     	; 0x4ce0 <__fp_splitA+0x10>
    4cca:	5f 3f       	cpi	r21, 0xFF	; 255
    4ccc:	71 f0       	breq	.+28     	; 0x4cea <__fp_splitA+0x1a>
    4cce:	47 95       	ror	r20

00004cd0 <__fp_splitA>:
    4cd0:	88 0f       	add	r24, r24
    4cd2:	97 fb       	bst	r25, 7
    4cd4:	99 1f       	adc	r25, r25
    4cd6:	61 f0       	breq	.+24     	; 0x4cf0 <__fp_splitA+0x20>
    4cd8:	9f 3f       	cpi	r25, 0xFF	; 255
    4cda:	79 f0       	breq	.+30     	; 0x4cfa <__fp_splitA+0x2a>
    4cdc:	87 95       	ror	r24
    4cde:	08 95       	ret
    4ce0:	12 16       	cp	r1, r18
    4ce2:	13 06       	cpc	r1, r19
    4ce4:	14 06       	cpc	r1, r20
    4ce6:	55 1f       	adc	r21, r21
    4ce8:	f2 cf       	rjmp	.-28     	; 0x4cce <__fp_split3+0xe>
    4cea:	46 95       	lsr	r20
    4cec:	f1 df       	rcall	.-30     	; 0x4cd0 <__fp_splitA>
    4cee:	08 c0       	rjmp	.+16     	; 0x4d00 <__fp_splitA+0x30>
    4cf0:	16 16       	cp	r1, r22
    4cf2:	17 06       	cpc	r1, r23
    4cf4:	18 06       	cpc	r1, r24
    4cf6:	99 1f       	adc	r25, r25
    4cf8:	f1 cf       	rjmp	.-30     	; 0x4cdc <__fp_splitA+0xc>
    4cfa:	86 95       	lsr	r24
    4cfc:	71 05       	cpc	r23, r1
    4cfe:	61 05       	cpc	r22, r1
    4d00:	08 94       	sec
    4d02:	08 95       	ret

00004d04 <__fp_zero>:
    4d04:	e8 94       	clt

00004d06 <__fp_szero>:
    4d06:	bb 27       	eor	r27, r27
    4d08:	66 27       	eor	r22, r22
    4d0a:	77 27       	eor	r23, r23
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	97 f9       	bld	r25, 7
    4d10:	08 95       	ret

00004d12 <__gesf2>:
    4d12:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__fp_cmp>
    4d16:	08 f4       	brcc	.+2      	; 0x4d1a <__gesf2+0x8>
    4d18:	8f ef       	ldi	r24, 0xFF	; 255
    4d1a:	08 95       	ret

00004d1c <__mulsf3>:
    4d1c:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <__mulsf3x>
    4d20:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__fp_round>
    4d24:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__fp_pscA>
    4d28:	38 f0       	brcs	.+14     	; 0x4d38 <__mulsf3+0x1c>
    4d2a:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__fp_pscB>
    4d2e:	20 f0       	brcs	.+8      	; 0x4d38 <__mulsf3+0x1c>
    4d30:	95 23       	and	r25, r21
    4d32:	11 f0       	breq	.+4      	; 0x4d38 <__mulsf3+0x1c>
    4d34:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__fp_inf>
    4d38:	0c 94 3e 26 	jmp	0x4c7c	; 0x4c7c <__fp_nan>
    4d3c:	11 24       	eor	r1, r1
    4d3e:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__fp_szero>

00004d42 <__mulsf3x>:
    4d42:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__fp_split3>
    4d46:	70 f3       	brcs	.-36     	; 0x4d24 <__mulsf3+0x8>

00004d48 <__mulsf3_pse>:
    4d48:	95 9f       	mul	r25, r21
    4d4a:	c1 f3       	breq	.-16     	; 0x4d3c <__mulsf3+0x20>
    4d4c:	95 0f       	add	r25, r21
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	55 1f       	adc	r21, r21
    4d52:	62 9f       	mul	r22, r18
    4d54:	f0 01       	movw	r30, r0
    4d56:	72 9f       	mul	r23, r18
    4d58:	bb 27       	eor	r27, r27
    4d5a:	f0 0d       	add	r31, r0
    4d5c:	b1 1d       	adc	r27, r1
    4d5e:	63 9f       	mul	r22, r19
    4d60:	aa 27       	eor	r26, r26
    4d62:	f0 0d       	add	r31, r0
    4d64:	b1 1d       	adc	r27, r1
    4d66:	aa 1f       	adc	r26, r26
    4d68:	64 9f       	mul	r22, r20
    4d6a:	66 27       	eor	r22, r22
    4d6c:	b0 0d       	add	r27, r0
    4d6e:	a1 1d       	adc	r26, r1
    4d70:	66 1f       	adc	r22, r22
    4d72:	82 9f       	mul	r24, r18
    4d74:	22 27       	eor	r18, r18
    4d76:	b0 0d       	add	r27, r0
    4d78:	a1 1d       	adc	r26, r1
    4d7a:	62 1f       	adc	r22, r18
    4d7c:	73 9f       	mul	r23, r19
    4d7e:	b0 0d       	add	r27, r0
    4d80:	a1 1d       	adc	r26, r1
    4d82:	62 1f       	adc	r22, r18
    4d84:	83 9f       	mul	r24, r19
    4d86:	a0 0d       	add	r26, r0
    4d88:	61 1d       	adc	r22, r1
    4d8a:	22 1f       	adc	r18, r18
    4d8c:	74 9f       	mul	r23, r20
    4d8e:	33 27       	eor	r19, r19
    4d90:	a0 0d       	add	r26, r0
    4d92:	61 1d       	adc	r22, r1
    4d94:	23 1f       	adc	r18, r19
    4d96:	84 9f       	mul	r24, r20
    4d98:	60 0d       	add	r22, r0
    4d9a:	21 1d       	adc	r18, r1
    4d9c:	82 2f       	mov	r24, r18
    4d9e:	76 2f       	mov	r23, r22
    4da0:	6a 2f       	mov	r22, r26
    4da2:	11 24       	eor	r1, r1
    4da4:	9f 57       	subi	r25, 0x7F	; 127
    4da6:	50 40       	sbci	r21, 0x00	; 0
    4da8:	9a f0       	brmi	.+38     	; 0x4dd0 <__mulsf3_pse+0x88>
    4daa:	f1 f0       	breq	.+60     	; 0x4de8 <__mulsf3_pse+0xa0>
    4dac:	88 23       	and	r24, r24
    4dae:	4a f0       	brmi	.+18     	; 0x4dc2 <__mulsf3_pse+0x7a>
    4db0:	ee 0f       	add	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	bb 1f       	adc	r27, r27
    4db6:	66 1f       	adc	r22, r22
    4db8:	77 1f       	adc	r23, r23
    4dba:	88 1f       	adc	r24, r24
    4dbc:	91 50       	subi	r25, 0x01	; 1
    4dbe:	50 40       	sbci	r21, 0x00	; 0
    4dc0:	a9 f7       	brne	.-22     	; 0x4dac <__mulsf3_pse+0x64>
    4dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    4dc4:	51 05       	cpc	r21, r1
    4dc6:	80 f0       	brcs	.+32     	; 0x4de8 <__mulsf3_pse+0xa0>
    4dc8:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__fp_inf>
    4dcc:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__fp_szero>
    4dd0:	5f 3f       	cpi	r21, 0xFF	; 255
    4dd2:	e4 f3       	brlt	.-8      	; 0x4dcc <__mulsf3_pse+0x84>
    4dd4:	98 3e       	cpi	r25, 0xE8	; 232
    4dd6:	d4 f3       	brlt	.-12     	; 0x4dcc <__mulsf3_pse+0x84>
    4dd8:	86 95       	lsr	r24
    4dda:	77 95       	ror	r23
    4ddc:	67 95       	ror	r22
    4dde:	b7 95       	ror	r27
    4de0:	f7 95       	ror	r31
    4de2:	e7 95       	ror	r30
    4de4:	9f 5f       	subi	r25, 0xFF	; 255
    4de6:	c1 f7       	brne	.-16     	; 0x4dd8 <__mulsf3_pse+0x90>
    4de8:	fe 2b       	or	r31, r30
    4dea:	88 0f       	add	r24, r24
    4dec:	91 1d       	adc	r25, r1
    4dee:	96 95       	lsr	r25
    4df0:	87 95       	ror	r24
    4df2:	97 f9       	bld	r25, 7
    4df4:	08 95       	ret

00004df6 <round>:
    4df6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <__fp_splitA>
    4dfa:	e8 f0       	brcs	.+58     	; 0x4e36 <round+0x40>
    4dfc:	9e 37       	cpi	r25, 0x7E	; 126
    4dfe:	e8 f0       	brcs	.+58     	; 0x4e3a <round+0x44>
    4e00:	96 39       	cpi	r25, 0x96	; 150
    4e02:	b8 f4       	brcc	.+46     	; 0x4e32 <round+0x3c>
    4e04:	9e 38       	cpi	r25, 0x8E	; 142
    4e06:	48 f4       	brcc	.+18     	; 0x4e1a <round+0x24>
    4e08:	67 2f       	mov	r22, r23
    4e0a:	78 2f       	mov	r23, r24
    4e0c:	88 27       	eor	r24, r24
    4e0e:	98 5f       	subi	r25, 0xF8	; 248
    4e10:	f9 cf       	rjmp	.-14     	; 0x4e04 <round+0xe>
    4e12:	86 95       	lsr	r24
    4e14:	77 95       	ror	r23
    4e16:	67 95       	ror	r22
    4e18:	93 95       	inc	r25
    4e1a:	95 39       	cpi	r25, 0x95	; 149
    4e1c:	d0 f3       	brcs	.-12     	; 0x4e12 <round+0x1c>
    4e1e:	b6 2f       	mov	r27, r22
    4e20:	b1 70       	andi	r27, 0x01	; 1
    4e22:	6b 0f       	add	r22, r27
    4e24:	71 1d       	adc	r23, r1
    4e26:	81 1d       	adc	r24, r1
    4e28:	20 f4       	brcc	.+8      	; 0x4e32 <round+0x3c>
    4e2a:	87 95       	ror	r24
    4e2c:	77 95       	ror	r23
    4e2e:	67 95       	ror	r22
    4e30:	93 95       	inc	r25
    4e32:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__fp_mintl>
    4e36:	0c 94 3a 27 	jmp	0x4e74	; 0x4e74 <__fp_mpack>
    4e3a:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__fp_szero>

00004e3e <__fp_mintl>:
    4e3e:	88 23       	and	r24, r24
    4e40:	71 f4       	brne	.+28     	; 0x4e5e <__fp_mintl+0x20>
    4e42:	77 23       	and	r23, r23
    4e44:	21 f0       	breq	.+8      	; 0x4e4e <__fp_mintl+0x10>
    4e46:	98 50       	subi	r25, 0x08	; 8
    4e48:	87 2b       	or	r24, r23
    4e4a:	76 2f       	mov	r23, r22
    4e4c:	07 c0       	rjmp	.+14     	; 0x4e5c <__fp_mintl+0x1e>
    4e4e:	66 23       	and	r22, r22
    4e50:	11 f4       	brne	.+4      	; 0x4e56 <__fp_mintl+0x18>
    4e52:	99 27       	eor	r25, r25
    4e54:	0d c0       	rjmp	.+26     	; 0x4e70 <__fp_mintl+0x32>
    4e56:	90 51       	subi	r25, 0x10	; 16
    4e58:	86 2b       	or	r24, r22
    4e5a:	70 e0       	ldi	r23, 0x00	; 0
    4e5c:	60 e0       	ldi	r22, 0x00	; 0
    4e5e:	2a f0       	brmi	.+10     	; 0x4e6a <__fp_mintl+0x2c>
    4e60:	9a 95       	dec	r25
    4e62:	66 0f       	add	r22, r22
    4e64:	77 1f       	adc	r23, r23
    4e66:	88 1f       	adc	r24, r24
    4e68:	da f7       	brpl	.-10     	; 0x4e60 <__fp_mintl+0x22>
    4e6a:	88 0f       	add	r24, r24
    4e6c:	96 95       	lsr	r25
    4e6e:	87 95       	ror	r24
    4e70:	97 f9       	bld	r25, 7
    4e72:	08 95       	ret

00004e74 <__fp_mpack>:
    4e74:	9f 3f       	cpi	r25, 0xFF	; 255
    4e76:	31 f0       	breq	.+12     	; 0x4e84 <__fp_mpack_finite+0xc>

00004e78 <__fp_mpack_finite>:
    4e78:	91 50       	subi	r25, 0x01	; 1
    4e7a:	20 f4       	brcc	.+8      	; 0x4e84 <__fp_mpack_finite+0xc>
    4e7c:	87 95       	ror	r24
    4e7e:	77 95       	ror	r23
    4e80:	67 95       	ror	r22
    4e82:	b7 95       	ror	r27
    4e84:	88 0f       	add	r24, r24
    4e86:	91 1d       	adc	r25, r1
    4e88:	96 95       	lsr	r25
    4e8a:	87 95       	ror	r24
    4e8c:	97 f9       	bld	r25, 7
    4e8e:	08 95       	ret

00004e90 <__udivmodhi4>:
    4e90:	aa 1b       	sub	r26, r26
    4e92:	bb 1b       	sub	r27, r27
    4e94:	51 e1       	ldi	r21, 0x11	; 17
    4e96:	07 c0       	rjmp	.+14     	; 0x4ea6 <__udivmodhi4_ep>

00004e98 <__udivmodhi4_loop>:
    4e98:	aa 1f       	adc	r26, r26
    4e9a:	bb 1f       	adc	r27, r27
    4e9c:	a6 17       	cp	r26, r22
    4e9e:	b7 07       	cpc	r27, r23
    4ea0:	10 f0       	brcs	.+4      	; 0x4ea6 <__udivmodhi4_ep>
    4ea2:	a6 1b       	sub	r26, r22
    4ea4:	b7 0b       	sbc	r27, r23

00004ea6 <__udivmodhi4_ep>:
    4ea6:	88 1f       	adc	r24, r24
    4ea8:	99 1f       	adc	r25, r25
    4eaa:	5a 95       	dec	r21
    4eac:	a9 f7       	brne	.-22     	; 0x4e98 <__udivmodhi4_loop>
    4eae:	80 95       	com	r24
    4eb0:	90 95       	com	r25
    4eb2:	bc 01       	movw	r22, r24
    4eb4:	cd 01       	movw	r24, r26
    4eb6:	08 95       	ret

00004eb8 <__divmodhi4>:
    4eb8:	97 fb       	bst	r25, 7
    4eba:	07 2e       	mov	r0, r23
    4ebc:	16 f4       	brtc	.+4      	; 0x4ec2 <__divmodhi4+0xa>
    4ebe:	00 94       	com	r0
    4ec0:	07 d0       	rcall	.+14     	; 0x4ed0 <__divmodhi4_neg1>
    4ec2:	77 fd       	sbrc	r23, 7
    4ec4:	09 d0       	rcall	.+18     	; 0x4ed8 <__divmodhi4_neg2>
    4ec6:	0e 94 48 27 	call	0x4e90	; 0x4e90 <__udivmodhi4>
    4eca:	07 fc       	sbrc	r0, 7
    4ecc:	05 d0       	rcall	.+10     	; 0x4ed8 <__divmodhi4_neg2>
    4ece:	3e f4       	brtc	.+14     	; 0x4ede <__divmodhi4_exit>

00004ed0 <__divmodhi4_neg1>:
    4ed0:	90 95       	com	r25
    4ed2:	81 95       	neg	r24
    4ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed6:	08 95       	ret

00004ed8 <__divmodhi4_neg2>:
    4ed8:	70 95       	com	r23
    4eda:	61 95       	neg	r22
    4edc:	7f 4f       	sbci	r23, 0xFF	; 255

00004ede <__divmodhi4_exit>:
    4ede:	08 95       	ret

00004ee0 <__udivmodsi4>:
    4ee0:	a1 e2       	ldi	r26, 0x21	; 33
    4ee2:	1a 2e       	mov	r1, r26
    4ee4:	aa 1b       	sub	r26, r26
    4ee6:	bb 1b       	sub	r27, r27
    4ee8:	fd 01       	movw	r30, r26
    4eea:	0d c0       	rjmp	.+26     	; 0x4f06 <__udivmodsi4_ep>

00004eec <__udivmodsi4_loop>:
    4eec:	aa 1f       	adc	r26, r26
    4eee:	bb 1f       	adc	r27, r27
    4ef0:	ee 1f       	adc	r30, r30
    4ef2:	ff 1f       	adc	r31, r31
    4ef4:	a2 17       	cp	r26, r18
    4ef6:	b3 07       	cpc	r27, r19
    4ef8:	e4 07       	cpc	r30, r20
    4efa:	f5 07       	cpc	r31, r21
    4efc:	20 f0       	brcs	.+8      	; 0x4f06 <__udivmodsi4_ep>
    4efe:	a2 1b       	sub	r26, r18
    4f00:	b3 0b       	sbc	r27, r19
    4f02:	e4 0b       	sbc	r30, r20
    4f04:	f5 0b       	sbc	r31, r21

00004f06 <__udivmodsi4_ep>:
    4f06:	66 1f       	adc	r22, r22
    4f08:	77 1f       	adc	r23, r23
    4f0a:	88 1f       	adc	r24, r24
    4f0c:	99 1f       	adc	r25, r25
    4f0e:	1a 94       	dec	r1
    4f10:	69 f7       	brne	.-38     	; 0x4eec <__udivmodsi4_loop>
    4f12:	60 95       	com	r22
    4f14:	70 95       	com	r23
    4f16:	80 95       	com	r24
    4f18:	90 95       	com	r25
    4f1a:	9b 01       	movw	r18, r22
    4f1c:	ac 01       	movw	r20, r24
    4f1e:	bd 01       	movw	r22, r26
    4f20:	cf 01       	movw	r24, r30
    4f22:	08 95       	ret

00004f24 <__tablejump2__>:
    4f24:	ee 0f       	add	r30, r30
    4f26:	ff 1f       	adc	r31, r31
    4f28:	05 90       	lpm	r0, Z+
    4f2a:	f4 91       	lpm	r31, Z
    4f2c:	e0 2d       	mov	r30, r0
    4f2e:	09 94       	ijmp

00004f30 <__umulhisi3>:
    4f30:	a2 9f       	mul	r26, r18
    4f32:	b0 01       	movw	r22, r0
    4f34:	b3 9f       	mul	r27, r19
    4f36:	c0 01       	movw	r24, r0
    4f38:	a3 9f       	mul	r26, r19
    4f3a:	70 0d       	add	r23, r0
    4f3c:	81 1d       	adc	r24, r1
    4f3e:	11 24       	eor	r1, r1
    4f40:	91 1d       	adc	r25, r1
    4f42:	b2 9f       	mul	r27, r18
    4f44:	70 0d       	add	r23, r0
    4f46:	81 1d       	adc	r24, r1
    4f48:	11 24       	eor	r1, r1
    4f4a:	91 1d       	adc	r25, r1
    4f4c:	08 95       	ret

00004f4e <malloc>:
    4f4e:	0f 93       	push	r16
    4f50:	1f 93       	push	r17
    4f52:	cf 93       	push	r28
    4f54:	df 93       	push	r29
    4f56:	82 30       	cpi	r24, 0x02	; 2
    4f58:	91 05       	cpc	r25, r1
    4f5a:	10 f4       	brcc	.+4      	; 0x4f60 <malloc+0x12>
    4f5c:	82 e0       	ldi	r24, 0x02	; 2
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <__flp>
    4f64:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <__flp+0x1>
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	a0 e0       	ldi	r26, 0x00	; 0
    4f6e:	b0 e0       	ldi	r27, 0x00	; 0
    4f70:	30 97       	sbiw	r30, 0x00	; 0
    4f72:	19 f1       	breq	.+70     	; 0x4fba <malloc+0x6c>
    4f74:	40 81       	ld	r20, Z
    4f76:	51 81       	ldd	r21, Z+1	; 0x01
    4f78:	02 81       	ldd	r16, Z+2	; 0x02
    4f7a:	13 81       	ldd	r17, Z+3	; 0x03
    4f7c:	48 17       	cp	r20, r24
    4f7e:	59 07       	cpc	r21, r25
    4f80:	c8 f0       	brcs	.+50     	; 0x4fb4 <malloc+0x66>
    4f82:	84 17       	cp	r24, r20
    4f84:	95 07       	cpc	r25, r21
    4f86:	69 f4       	brne	.+26     	; 0x4fa2 <malloc+0x54>
    4f88:	10 97       	sbiw	r26, 0x00	; 0
    4f8a:	31 f0       	breq	.+12     	; 0x4f98 <malloc+0x4a>
    4f8c:	12 96       	adiw	r26, 0x02	; 2
    4f8e:	0c 93       	st	X, r16
    4f90:	12 97       	sbiw	r26, 0x02	; 2
    4f92:	13 96       	adiw	r26, 0x03	; 3
    4f94:	1c 93       	st	X, r17
    4f96:	27 c0       	rjmp	.+78     	; 0x4fe6 <malloc+0x98>
    4f98:	00 93 ce 06 	sts	0x06CE, r16	; 0x8006ce <__flp>
    4f9c:	10 93 cf 06 	sts	0x06CF, r17	; 0x8006cf <__flp+0x1>
    4fa0:	22 c0       	rjmp	.+68     	; 0x4fe6 <malloc+0x98>
    4fa2:	21 15       	cp	r18, r1
    4fa4:	31 05       	cpc	r19, r1
    4fa6:	19 f0       	breq	.+6      	; 0x4fae <malloc+0x60>
    4fa8:	42 17       	cp	r20, r18
    4faa:	53 07       	cpc	r21, r19
    4fac:	18 f4       	brcc	.+6      	; 0x4fb4 <malloc+0x66>
    4fae:	9a 01       	movw	r18, r20
    4fb0:	bd 01       	movw	r22, r26
    4fb2:	ef 01       	movw	r28, r30
    4fb4:	df 01       	movw	r26, r30
    4fb6:	f8 01       	movw	r30, r16
    4fb8:	db cf       	rjmp	.-74     	; 0x4f70 <malloc+0x22>
    4fba:	21 15       	cp	r18, r1
    4fbc:	31 05       	cpc	r19, r1
    4fbe:	f9 f0       	breq	.+62     	; 0x4ffe <malloc+0xb0>
    4fc0:	28 1b       	sub	r18, r24
    4fc2:	39 0b       	sbc	r19, r25
    4fc4:	24 30       	cpi	r18, 0x04	; 4
    4fc6:	31 05       	cpc	r19, r1
    4fc8:	80 f4       	brcc	.+32     	; 0x4fea <malloc+0x9c>
    4fca:	8a 81       	ldd	r24, Y+2	; 0x02
    4fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4fce:	61 15       	cp	r22, r1
    4fd0:	71 05       	cpc	r23, r1
    4fd2:	21 f0       	breq	.+8      	; 0x4fdc <malloc+0x8e>
    4fd4:	fb 01       	movw	r30, r22
    4fd6:	93 83       	std	Z+3, r25	; 0x03
    4fd8:	82 83       	std	Z+2, r24	; 0x02
    4fda:	04 c0       	rjmp	.+8      	; 0x4fe4 <malloc+0x96>
    4fdc:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <__flp+0x1>
    4fe0:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <__flp>
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	32 96       	adiw	r30, 0x02	; 2
    4fe8:	44 c0       	rjmp	.+136    	; 0x5072 <malloc+0x124>
    4fea:	fe 01       	movw	r30, r28
    4fec:	e2 0f       	add	r30, r18
    4fee:	f3 1f       	adc	r31, r19
    4ff0:	81 93       	st	Z+, r24
    4ff2:	91 93       	st	Z+, r25
    4ff4:	22 50       	subi	r18, 0x02	; 2
    4ff6:	31 09       	sbc	r19, r1
    4ff8:	39 83       	std	Y+1, r19	; 0x01
    4ffa:	28 83       	st	Y, r18
    4ffc:	3a c0       	rjmp	.+116    	; 0x5072 <malloc+0x124>
    4ffe:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <__brkval>
    5002:	30 91 cd 06 	lds	r19, 0x06CD	; 0x8006cd <__brkval+0x1>
    5006:	23 2b       	or	r18, r19
    5008:	41 f4       	brne	.+16     	; 0x501a <malloc+0xcc>
    500a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    500e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    5012:	30 93 cd 06 	sts	0x06CD, r19	; 0x8006cd <__brkval+0x1>
    5016:	20 93 cc 06 	sts	0x06CC, r18	; 0x8006cc <__brkval>
    501a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    501e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    5022:	21 15       	cp	r18, r1
    5024:	31 05       	cpc	r19, r1
    5026:	41 f4       	brne	.+16     	; 0x5038 <malloc+0xea>
    5028:	2d b7       	in	r18, 0x3d	; 61
    502a:	3e b7       	in	r19, 0x3e	; 62
    502c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    5030:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    5034:	24 1b       	sub	r18, r20
    5036:	35 0b       	sbc	r19, r21
    5038:	e0 91 cc 06 	lds	r30, 0x06CC	; 0x8006cc <__brkval>
    503c:	f0 91 cd 06 	lds	r31, 0x06CD	; 0x8006cd <__brkval+0x1>
    5040:	e2 17       	cp	r30, r18
    5042:	f3 07       	cpc	r31, r19
    5044:	a0 f4       	brcc	.+40     	; 0x506e <malloc+0x120>
    5046:	2e 1b       	sub	r18, r30
    5048:	3f 0b       	sbc	r19, r31
    504a:	28 17       	cp	r18, r24
    504c:	39 07       	cpc	r19, r25
    504e:	78 f0       	brcs	.+30     	; 0x506e <malloc+0x120>
    5050:	ac 01       	movw	r20, r24
    5052:	4e 5f       	subi	r20, 0xFE	; 254
    5054:	5f 4f       	sbci	r21, 0xFF	; 255
    5056:	24 17       	cp	r18, r20
    5058:	35 07       	cpc	r19, r21
    505a:	48 f0       	brcs	.+18     	; 0x506e <malloc+0x120>
    505c:	4e 0f       	add	r20, r30
    505e:	5f 1f       	adc	r21, r31
    5060:	50 93 cd 06 	sts	0x06CD, r21	; 0x8006cd <__brkval+0x1>
    5064:	40 93 cc 06 	sts	0x06CC, r20	; 0x8006cc <__brkval>
    5068:	81 93       	st	Z+, r24
    506a:	91 93       	st	Z+, r25
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <malloc+0x124>
    506e:	e0 e0       	ldi	r30, 0x00	; 0
    5070:	f0 e0       	ldi	r31, 0x00	; 0
    5072:	cf 01       	movw	r24, r30
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	1f 91       	pop	r17
    507a:	0f 91       	pop	r16
    507c:	08 95       	ret

0000507e <free>:
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	00 97       	sbiw	r24, 0x00	; 0
    5084:	09 f4       	brne	.+2      	; 0x5088 <free+0xa>
    5086:	81 c0       	rjmp	.+258    	; 0x518a <free+0x10c>
    5088:	fc 01       	movw	r30, r24
    508a:	32 97       	sbiw	r30, 0x02	; 2
    508c:	13 82       	std	Z+3, r1	; 0x03
    508e:	12 82       	std	Z+2, r1	; 0x02
    5090:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <__flp>
    5094:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <__flp+0x1>
    5098:	10 97       	sbiw	r26, 0x00	; 0
    509a:	81 f4       	brne	.+32     	; 0x50bc <free+0x3e>
    509c:	20 81       	ld	r18, Z
    509e:	31 81       	ldd	r19, Z+1	; 0x01
    50a0:	82 0f       	add	r24, r18
    50a2:	93 1f       	adc	r25, r19
    50a4:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <__brkval>
    50a8:	30 91 cd 06 	lds	r19, 0x06CD	; 0x8006cd <__brkval+0x1>
    50ac:	28 17       	cp	r18, r24
    50ae:	39 07       	cpc	r19, r25
    50b0:	51 f5       	brne	.+84     	; 0x5106 <free+0x88>
    50b2:	f0 93 cd 06 	sts	0x06CD, r31	; 0x8006cd <__brkval+0x1>
    50b6:	e0 93 cc 06 	sts	0x06CC, r30	; 0x8006cc <__brkval>
    50ba:	67 c0       	rjmp	.+206    	; 0x518a <free+0x10c>
    50bc:	ed 01       	movw	r28, r26
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	ce 17       	cp	r28, r30
    50c4:	df 07       	cpc	r29, r31
    50c6:	40 f4       	brcc	.+16     	; 0x50d8 <free+0x5a>
    50c8:	4a 81       	ldd	r20, Y+2	; 0x02
    50ca:	5b 81       	ldd	r21, Y+3	; 0x03
    50cc:	9e 01       	movw	r18, r28
    50ce:	41 15       	cp	r20, r1
    50d0:	51 05       	cpc	r21, r1
    50d2:	f1 f0       	breq	.+60     	; 0x5110 <free+0x92>
    50d4:	ea 01       	movw	r28, r20
    50d6:	f5 cf       	rjmp	.-22     	; 0x50c2 <free+0x44>
    50d8:	d3 83       	std	Z+3, r29	; 0x03
    50da:	c2 83       	std	Z+2, r28	; 0x02
    50dc:	40 81       	ld	r20, Z
    50de:	51 81       	ldd	r21, Z+1	; 0x01
    50e0:	84 0f       	add	r24, r20
    50e2:	95 1f       	adc	r25, r21
    50e4:	c8 17       	cp	r28, r24
    50e6:	d9 07       	cpc	r29, r25
    50e8:	59 f4       	brne	.+22     	; 0x5100 <free+0x82>
    50ea:	88 81       	ld	r24, Y
    50ec:	99 81       	ldd	r25, Y+1	; 0x01
    50ee:	84 0f       	add	r24, r20
    50f0:	95 1f       	adc	r25, r21
    50f2:	02 96       	adiw	r24, 0x02	; 2
    50f4:	91 83       	std	Z+1, r25	; 0x01
    50f6:	80 83       	st	Z, r24
    50f8:	8a 81       	ldd	r24, Y+2	; 0x02
    50fa:	9b 81       	ldd	r25, Y+3	; 0x03
    50fc:	93 83       	std	Z+3, r25	; 0x03
    50fe:	82 83       	std	Z+2, r24	; 0x02
    5100:	21 15       	cp	r18, r1
    5102:	31 05       	cpc	r19, r1
    5104:	29 f4       	brne	.+10     	; 0x5110 <free+0x92>
    5106:	f0 93 cf 06 	sts	0x06CF, r31	; 0x8006cf <__flp+0x1>
    510a:	e0 93 ce 06 	sts	0x06CE, r30	; 0x8006ce <__flp>
    510e:	3d c0       	rjmp	.+122    	; 0x518a <free+0x10c>
    5110:	e9 01       	movw	r28, r18
    5112:	fb 83       	std	Y+3, r31	; 0x03
    5114:	ea 83       	std	Y+2, r30	; 0x02
    5116:	49 91       	ld	r20, Y+
    5118:	59 91       	ld	r21, Y+
    511a:	c4 0f       	add	r28, r20
    511c:	d5 1f       	adc	r29, r21
    511e:	ec 17       	cp	r30, r28
    5120:	fd 07       	cpc	r31, r29
    5122:	61 f4       	brne	.+24     	; 0x513c <free+0xbe>
    5124:	80 81       	ld	r24, Z
    5126:	91 81       	ldd	r25, Z+1	; 0x01
    5128:	84 0f       	add	r24, r20
    512a:	95 1f       	adc	r25, r21
    512c:	02 96       	adiw	r24, 0x02	; 2
    512e:	e9 01       	movw	r28, r18
    5130:	99 83       	std	Y+1, r25	; 0x01
    5132:	88 83       	st	Y, r24
    5134:	82 81       	ldd	r24, Z+2	; 0x02
    5136:	93 81       	ldd	r25, Z+3	; 0x03
    5138:	9b 83       	std	Y+3, r25	; 0x03
    513a:	8a 83       	std	Y+2, r24	; 0x02
    513c:	e0 e0       	ldi	r30, 0x00	; 0
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	12 96       	adiw	r26, 0x02	; 2
    5142:	8d 91       	ld	r24, X+
    5144:	9c 91       	ld	r25, X
    5146:	13 97       	sbiw	r26, 0x03	; 3
    5148:	00 97       	sbiw	r24, 0x00	; 0
    514a:	19 f0       	breq	.+6      	; 0x5152 <free+0xd4>
    514c:	fd 01       	movw	r30, r26
    514e:	dc 01       	movw	r26, r24
    5150:	f7 cf       	rjmp	.-18     	; 0x5140 <free+0xc2>
    5152:	8d 91       	ld	r24, X+
    5154:	9c 91       	ld	r25, X
    5156:	11 97       	sbiw	r26, 0x01	; 1
    5158:	9d 01       	movw	r18, r26
    515a:	2e 5f       	subi	r18, 0xFE	; 254
    515c:	3f 4f       	sbci	r19, 0xFF	; 255
    515e:	82 0f       	add	r24, r18
    5160:	93 1f       	adc	r25, r19
    5162:	20 91 cc 06 	lds	r18, 0x06CC	; 0x8006cc <__brkval>
    5166:	30 91 cd 06 	lds	r19, 0x06CD	; 0x8006cd <__brkval+0x1>
    516a:	28 17       	cp	r18, r24
    516c:	39 07       	cpc	r19, r25
    516e:	69 f4       	brne	.+26     	; 0x518a <free+0x10c>
    5170:	30 97       	sbiw	r30, 0x00	; 0
    5172:	29 f4       	brne	.+10     	; 0x517e <free+0x100>
    5174:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <__flp+0x1>
    5178:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <__flp>
    517c:	02 c0       	rjmp	.+4      	; 0x5182 <free+0x104>
    517e:	13 82       	std	Z+3, r1	; 0x03
    5180:	12 82       	std	Z+2, r1	; 0x02
    5182:	b0 93 cd 06 	sts	0x06CD, r27	; 0x8006cd <__brkval+0x1>
    5186:	a0 93 cc 06 	sts	0x06CC, r26	; 0x8006cc <__brkval>
    518a:	df 91       	pop	r29
    518c:	cf 91       	pop	r28
    518e:	08 95       	ret

00005190 <eeprom_read_byte>:
    5190:	e1 99       	sbic	0x1c, 1	; 28
    5192:	fe cf       	rjmp	.-4      	; 0x5190 <eeprom_read_byte>
    5194:	9f bb       	out	0x1f, r25	; 31
    5196:	8e bb       	out	0x1e, r24	; 30
    5198:	e0 9a       	sbi	0x1c, 0	; 28
    519a:	99 27       	eor	r25, r25
    519c:	8d b3       	in	r24, 0x1d	; 29
    519e:	08 95       	ret

000051a0 <eeprom_read_dword>:
    51a0:	a6 e1       	ldi	r26, 0x16	; 22
    51a2:	b0 e0       	ldi	r27, 0x00	; 0
    51a4:	44 e0       	ldi	r20, 0x04	; 4
    51a6:	50 e0       	ldi	r21, 0x00	; 0
    51a8:	0c 94 0e 29 	jmp	0x521c	; 0x521c <eeprom_read_blraw>

000051ac <eeprom_read_word>:
    51ac:	a8 e1       	ldi	r26, 0x18	; 24
    51ae:	b0 e0       	ldi	r27, 0x00	; 0
    51b0:	42 e0       	ldi	r20, 0x02	; 2
    51b2:	50 e0       	ldi	r21, 0x00	; 0
    51b4:	0c 94 0e 29 	jmp	0x521c	; 0x521c <eeprom_read_blraw>

000051b8 <eeprom_update_byte>:
    51b8:	26 2f       	mov	r18, r22

000051ba <eeprom_update_r18>:
    51ba:	e1 99       	sbic	0x1c, 1	; 28
    51bc:	fe cf       	rjmp	.-4      	; 0x51ba <eeprom_update_r18>
    51be:	9f bb       	out	0x1f, r25	; 31
    51c0:	8e bb       	out	0x1e, r24	; 30
    51c2:	e0 9a       	sbi	0x1c, 0	; 28
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	0d b2       	in	r0, 0x1d	; 29
    51c8:	02 16       	cp	r0, r18
    51ca:	31 f0       	breq	.+12     	; 0x51d8 <eeprom_update_r18+0x1e>
    51cc:	2d bb       	out	0x1d, r18	; 29
    51ce:	0f b6       	in	r0, 0x3f	; 63
    51d0:	f8 94       	cli
    51d2:	e2 9a       	sbi	0x1c, 2	; 28
    51d4:	e1 9a       	sbi	0x1c, 1	; 28
    51d6:	0f be       	out	0x3f, r0	; 63
    51d8:	08 95       	ret

000051da <eeprom_update_dword>:
    51da:	03 96       	adiw	r24, 0x03	; 3
    51dc:	27 2f       	mov	r18, r23
    51de:	0e 94 dd 28 	call	0x51ba	; 0x51ba <eeprom_update_r18>
    51e2:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <eeprom_update_byte>
    51e6:	25 2f       	mov	r18, r21
    51e8:	0e 94 dd 28 	call	0x51ba	; 0x51ba <eeprom_update_r18>
    51ec:	24 2f       	mov	r18, r20
    51ee:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <eeprom_update_r18>

000051f2 <eeprom_update_word>:
    51f2:	01 96       	adiw	r24, 0x01	; 1
    51f4:	27 2f       	mov	r18, r23
    51f6:	0e 94 dd 28 	call	0x51ba	; 0x51ba <eeprom_update_r18>
    51fa:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <eeprom_update_byte>

000051fe <eeprom_write_dword>:
    51fe:	24 2f       	mov	r18, r20
    5200:	0e 94 1d 29 	call	0x523a	; 0x523a <eeprom_write_r18>
    5204:	25 2f       	mov	r18, r21
    5206:	0e 94 1d 29 	call	0x523a	; 0x523a <eeprom_write_r18>
    520a:	0c 94 07 29 	jmp	0x520e	; 0x520e <eeprom_write_word>

0000520e <eeprom_write_word>:
    520e:	0e 94 1c 29 	call	0x5238	; 0x5238 <eeprom_write_byte>
    5212:	27 2f       	mov	r18, r23
    5214:	0c 94 1d 29 	jmp	0x523a	; 0x523a <eeprom_write_r18>

00005218 <eeprom_read_block>:
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22

0000521c <eeprom_read_blraw>:
    521c:	fc 01       	movw	r30, r24
    521e:	e1 99       	sbic	0x1c, 1	; 28
    5220:	fe cf       	rjmp	.-4      	; 0x521e <eeprom_read_blraw+0x2>
    5222:	06 c0       	rjmp	.+12     	; 0x5230 <eeprom_read_blraw+0x14>
    5224:	ff bb       	out	0x1f, r31	; 31
    5226:	ee bb       	out	0x1e, r30	; 30
    5228:	e0 9a       	sbi	0x1c, 0	; 28
    522a:	31 96       	adiw	r30, 0x01	; 1
    522c:	0d b2       	in	r0, 0x1d	; 29
    522e:	0d 92       	st	X+, r0
    5230:	41 50       	subi	r20, 0x01	; 1
    5232:	50 40       	sbci	r21, 0x00	; 0
    5234:	b8 f7       	brcc	.-18     	; 0x5224 <eeprom_read_blraw+0x8>
    5236:	08 95       	ret

00005238 <eeprom_write_byte>:
    5238:	26 2f       	mov	r18, r22

0000523a <eeprom_write_r18>:
    523a:	e1 99       	sbic	0x1c, 1	; 28
    523c:	fe cf       	rjmp	.-4      	; 0x523a <eeprom_write_r18>
    523e:	9f bb       	out	0x1f, r25	; 31
    5240:	8e bb       	out	0x1e, r24	; 30
    5242:	2d bb       	out	0x1d, r18	; 29
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	e2 9a       	sbi	0x1c, 2	; 28
    524a:	e1 9a       	sbi	0x1c, 1	; 28
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	01 96       	adiw	r24, 0x01	; 1
    5250:	08 95       	ret

00005252 <_exit>:
    5252:	f8 94       	cli

00005254 <__stop_program>:
    5254:	ff cf       	rjmp	.-2      	; 0x5254 <__stop_program>
