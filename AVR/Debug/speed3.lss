
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000216  00800060  000052fa  0000538e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045c  00800276  00800276  000055a4  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00005640  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006954  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e44  00000000  00000000  0000c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002932  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca0  00000000  00000000  0000fb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000102c  00000000  00000000  000107cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059ec  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  000171e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_9>
      28:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	b4 19       	sub	r27, r4
      56:	da 19       	sub	r29, r10
      58:	00 1a       	sub	r0, r16
      5a:	4f 1a       	sub	r4, r31
      5c:	9e 1a       	sub	r9, r30
      5e:	ba 1a       	sub	r11, r26
      60:	d6 1a       	sub	r13, r22
      62:	f2 1a       	sub	r15, r18
      64:	41 1b       	sub	r20, r17
      66:	61 1b       	sub	r22, r17
      68:	7d 1b       	sub	r23, r29
      6a:	9b 1b       	sub	r25, r27
      6c:	a7 1b       	sub	r26, r23
      6e:	aa 1b       	sub	r26, r26
      70:	1a 1c       	adc	r1, r10
      72:	50 1c       	adc	r5, r0

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	12 e0       	ldi	r17, 0x02	; 2
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ea ef       	ldi	r30, 0xFA	; 250
    1556:	f2 e5       	ldi	r31, 0x52	; 82
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a6 37       	cpi	r26, 0x76	; 118
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	a6 e7       	ldi	r26, 0x76	; 118
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	a2 3d       	cpi	r26, 0xD2	; 210
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <main>
    1578:	0c 94 7b 29 	jmp	0x52f6	; 0x52f6 <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2934>:

	tempValue = currValue;
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	8c 91       	ld	r24, X
    1592:	13 97       	sbiw	r26, 0x03	; 3
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	8c 93       	st	X, r24
    159a:	12 97       	sbiw	r26, 0x02	; 2
    159c:	88 23       	and	r24, r24
    159e:	7c f1       	brlt	.+94     	; 0x15fe <new_value.2934+0x7e>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	0d 91       	ld	r16, X+
    15a2:	1c 91       	ld	r17, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	e0 e0       	ldi	r30, 0x00	; 0
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	68 2f       	mov	r22, r24
    15ac:	08 2e       	mov	r0, r24
    15ae:	00 0c       	add	r0, r0
    15b0:	77 0b       	sbc	r23, r23
    15b2:	98 01       	movw	r18, r16
    15b4:	26 0f       	add	r18, r22
    15b6:	37 1f       	adc	r19, r23
    15b8:	e9 01       	movw	r28, r18
    15ba:	28 81       	ld	r18, Y
    15bc:	02 2e       	mov	r0, r18
    15be:	00 0c       	add	r0, r0
    15c0:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	94 f4       	brge	.+36     	; 0x15ec <new_value.2934+0x6c>
    15c8:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15ca:	a9 01       	movw	r20, r18
    15cc:	44 0f       	add	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	24 0f       	add	r18, r20
    15de:	35 1f       	adc	r19, r21
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	49 2f       	mov	r20, r25
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	46 17       	cp	r20, r22
    15e8:	57 07       	cpc	r21, r23
    15ea:	7c f3       	brlt	.-34     	; 0x15ca <new_value.2934+0x4a>
				tenPower*=10;
			}
			newValue += tenPower;
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	81 50       	subi	r24, 0x01	; 1
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f2:	12 96       	adiw	r26, 0x02	; 2
    15f4:	8c 93       	st	X, r24
    15f6:	12 97       	sbiw	r26, 0x02	; 2
    15f8:	88 23       	and	r24, r24
    15fa:	bc f6       	brge	.-82     	; 0x15aa <new_value.2934+0x2a>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <new_value.2934+0x82>
	tempValue = currValue;
	valueLength = 0;

	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
    15fe:	e0 e0       	ldi	r30, 0x00	; 0
    1600:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1602:	cf 01       	movw	r24, r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	3f 90       	pop	r3
    160e:	2f 90       	pop	r2
    1610:	08 95       	ret

00001612 <print_min_max.2919>:
	GLCD_PrintString("Edit");
	GLCD_GotoXY(90,36);
	GLCD_PrintString("Exit");
	GLCD_GotoXY(90,48);
	GLCD_PrintString("Save");
	void print_min_max(){
    1612:	2f 92       	push	r2
    1614:	3f 92       	push	r3
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	e1 01       	movw	r28, r2
			GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	48 e0       	ldi	r20, 0x08	; 8
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	80 ea       	ldi	r24, 0xA0	; 160
    1638:	9b e0       	ldi	r25, 0x0B	; 11
    163a:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
			GLCD_GotoXY(6,41);
    163e:	69 e2       	ldi	r22, 0x29	; 41
    1640:	86 e0       	ldi	r24, 0x06	; 6
    1642:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
			GLCD_PrintString("min:");
    1646:	86 e6       	ldi	r24, 0x66	; 102
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
			GLCD_GotoXY(6,51);
    164e:	63 e3       	ldi	r22, 0x33	; 51
    1650:	86 e0       	ldi	r24, 0x06	; 6
    1652:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
			GLCD_PrintString("max:");
    1656:	8b e6       	ldi	r24, 0x6B	; 107
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
			if (tens){
    165e:	48 85       	ldd	r20, Y+8	; 0x08
    1660:	44 23       	and	r20, r20
    1662:	09 f4       	brne	.+2      	; 0x1666 <print_min_max.2919+0x54>
    1664:	4d c0       	rjmp	.+154    	; 0x1700 <print_min_max.2919+0xee>
				uint16_t devider = 1;
				for (int8_t i = 0;i<tens;i++){devider*=10;}
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	14 16       	cp	r1, r20
    166a:	15 06       	cpc	r1, r21
    166c:	cc f4       	brge	.+50     	; 0x16a0 <print_min_max.2919+0x8e>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	01 e0       	ldi	r16, 0x01	; 1
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	98 01       	movw	r18, r16
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	68 01       	movw	r12, r16
    167c:	cc 0c       	add	r12, r12
    167e:	dd 1c       	adc	r13, r13
    1680:	cc 0c       	add	r12, r12
    1682:	dd 1c       	adc	r13, r13
    1684:	cc 0c       	add	r12, r12
    1686:	dd 1c       	adc	r13, r13
    1688:	89 01       	movw	r16, r18
    168a:	0c 0d       	add	r16, r12
    168c:	1d 1d       	adc	r17, r13
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	28 2f       	mov	r18, r24
    1692:	08 2e       	mov	r0, r24
    1694:	00 0c       	add	r0, r0
    1696:	33 0b       	sbc	r19, r19
    1698:	24 17       	cp	r18, r20
    169a:	35 07       	cpc	r19, r21
    169c:	5c f3       	brlt	.-42     	; 0x1674 <print_min_max.2919+0x62>
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <print_min_max.2919+0x92>
    16a0:	01 e0       	ldi	r16, 0x01	; 1
    16a2:	10 e0       	ldi	r17, 0x00	; 0
				GLCD_GotoXY(30,41);
    16a4:	69 e2       	ldi	r22, 0x29	; 41
    16a6:	8e e1       	ldi	r24, 0x1E	; 30
    16a8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
				GLCD_PrintDouble(minValue/(double)devider,devider);
    16ac:	68 01       	movw	r12, r16
    16ae:	e1 2c       	mov	r14, r1
    16b0:	f1 2c       	mov	r15, r1
    16b2:	c7 01       	movw	r24, r14
    16b4:	b6 01       	movw	r22, r12
    16b6:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    16ba:	4b 01       	movw	r8, r22
    16bc:	5c 01       	movw	r10, r24
    16be:	6e 81       	ldd	r22, Y+6	; 0x06
    16c0:	7f 81       	ldd	r23, Y+7	; 0x07
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    16ca:	a5 01       	movw	r20, r10
    16cc:	94 01       	movw	r18, r8
    16ce:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    16d2:	a7 01       	movw	r20, r14
    16d4:	96 01       	movw	r18, r12
    16d6:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
				GLCD_GotoXY(30,51);
    16da:	63 e3       	ldi	r22, 0x33	; 51
    16dc:	8e e1       	ldi	r24, 0x1E	; 30
    16de:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
				GLCD_PrintDouble(maxValue/(double)devider,devider);
    16e2:	6c 81       	ldd	r22, Y+4	; 0x04
    16e4:	7d 81       	ldd	r23, Y+5	; 0x05
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    16ee:	a5 01       	movw	r20, r10
    16f0:	94 01       	movw	r18, r8
    16f2:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    16f6:	a7 01       	movw	r20, r14
    16f8:	96 01       	movw	r18, r12
    16fa:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <print_min_max.2919+0x116>
				}else{
				GLCD_GotoXY(30,41);
    1700:	69 e2       	ldi	r22, 0x29	; 41
    1702:	8e e1       	ldi	r24, 0x1E	; 30
    1704:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
				GLCD_PrintInteger(minValue);
    1708:	6e 81       	ldd	r22, Y+6	; 0x06
    170a:	7f 81       	ldd	r23, Y+7	; 0x07
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
				GLCD_GotoXY(30,51);
    1714:	63 e3       	ldi	r22, 0x33	; 51
    1716:	8e e1       	ldi	r24, 0x1E	; 30
    1718:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
				GLCD_PrintInteger(maxValue);
    171c:	6c 81       	ldd	r22, Y+4	; 0x04
    171e:	7d 81       	ldd	r23, Y+5	; 0x05
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
			}
			GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	41 e1       	ldi	r20, 0x11	; 17
    172c:	6c e0       	ldi	r22, 0x0C	; 12
    172e:	84 e7       	ldi	r24, 0x74	; 116
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
		}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	3f 90       	pop	r3
    1750:	2f 90       	pop	r2
    1752:	08 95       	ret

00001754 <set_default_values>:
	0b00000000,
	0b00001000,
	0b00000100			
};
void set_default_values(){
	 lcdContrast = LCD_CONTRAST_DEFAULT;
    1754:	8a ef       	ldi	r24, 0xFA	; 250
    1756:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <lcdContrast>
	 magnetsOnWheel = MAGNETS_ON_WHEEL_DEFAULT;
    175a:	86 e0       	ldi	r24, 0x06	; 6
    175c:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <magnetsOnWheel>
	 gearRatio = GEAR_RATIO_DEFAULT;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e8       	ldi	r26, 0x80	; 128
    1766:	bf e3       	ldi	r27, 0x3F	; 63
    1768:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <gearRatio>
    176c:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <gearRatio+0x1>
    1770:	a0 93 b8 02 	sts	0x02B8, r26	; 0x8002b8 <gearRatio+0x2>
    1774:	b0 93 b9 02 	sts	0x02B9, r27	; 0x8002b9 <gearRatio+0x3>
	 wheelDiameter = WHEEL_DIAMETER_DEFAULT;	
    1778:	83 e3       	ldi	r24, 0x33	; 51
    177a:	93 e3       	ldi	r25, 0x33	; 51
    177c:	a3 e3       	ldi	r26, 0x33	; 51
    177e:	bf e3       	ldi	r27, 0x3F	; 63
    1780:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <wheelDiameter>
    1784:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <wheelDiameter+0x1>
    1788:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <wheelDiameter+0x2>
    178c:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <wheelDiameter+0x3>
	 degreesPerKmh = DEGREES_PER_KMH_DEFAULT;
    1790:	83 e3       	ldi	r24, 0x33	; 51
    1792:	93 e3       	ldi	r25, 0x33	; 51
    1794:	a3 ea       	ldi	r26, 0xA3	; 163
    1796:	bf e3       	ldi	r27, 0x3F	; 63
    1798:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <degreesPerKmh>
    179c:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <degreesPerKmh+0x1>
    17a0:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <degreesPerKmh+0x2>
    17a4:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <degreesPerKmh+0x3>
	 pwmArrowLight = PWM_ARROW_DEFAULT;
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	94 e0       	ldi	r25, 0x04	; 4
    17ac:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <pwmArrowLight+0x1>
    17b0:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <pwmArrowLight>
	 pwmDialLight = PWM_DIAL_DEFAULT;
    17b4:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pwmDialLight+0x1>
    17b8:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pwmDialLight>
	 maxSpeedOnDial	= MAX_SPEED_DEFAULT;
    17bc:	8e eb       	ldi	r24, 0xBE	; 190
    17be:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <maxSpeedOnDial>
	 stepInterval = STEP_INTERVAL_DEFAULT;
    17c2:	86 e9       	ldi	r24, 0x96	; 150
    17c4:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepInterval>
	 stepperMotorSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
    17c8:	80 e6       	ldi	r24, 0x60	; 96
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <stepperMotorSteps+0x1>
    17d0:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <stepperMotorSteps>
	 stepMode = STEP_MODE_DEFAULT;
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <stepMode>
    17da:	08 95       	ret

000017dc <step>:
		OCR0 = 0;
	}
}
void step(uint8_t mode){
	uint8_t tempPort = 0;
	if (dir)
    17dc:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <dir>
    17e0:	99 23       	and	r25, r25
    17e2:	81 f0       	breq	.+32     	; 0x1804 <step+0x28>
	{
		phase++;
    17e4:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <phase>
    17e8:	9f 5f       	subi	r25, 0xFF	; 255
    17ea:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <phase>
		steps++;
    17ee:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <steps>
    17f2:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <steps+0x1>
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	30 93 a3 02 	sts	0x02A3, r19	; 0x8002a3 <steps+0x1>
    17fe:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <steps>
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <step+0x46>
	}
	else
	{
		phase--;
    1804:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <phase>
    1808:	91 50       	subi	r25, 0x01	; 1
    180a:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <phase>
		steps--;
    180e:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <steps>
    1812:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <steps+0x1>
    1816:	21 50       	subi	r18, 0x01	; 1
    1818:	31 09       	sbc	r19, r1
    181a:	30 93 a3 02 	sts	0x02A3, r19	; 0x8002a3 <steps+0x1>
    181e:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <steps>
	}
	if		(phase < 0) phase = 7;
    1822:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <phase>
    1826:	99 23       	and	r25, r25
    1828:	24 f4       	brge	.+8      	; 0x1832 <step+0x56>
    182a:	97 e0       	ldi	r25, 0x07	; 7
    182c:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <phase>
    1830:	06 c0       	rjmp	.+12     	; 0x183e <step+0x62>
	else if (phase > 7) phase = 0;
    1832:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <phase>
    1836:	98 30       	cpi	r25, 0x08	; 8
    1838:	14 f0       	brlt	.+4      	; 0x183e <step+0x62>
    183a:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <phase>
	tempPort = PORTA&~0x0F;
    183e:	9b b3       	in	r25, 0x1b	; 27
    1840:	90 7f       	andi	r25, 0xF0	; 240
	if(mode == HALF_STEP)		tempPort|=phaseArrayHalfStep[phase];
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	51 f4       	brne	.+20     	; 0x185a <step+0x7e>
    1846:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <phase>
    184a:	0e 2e       	mov	r0, r30
    184c:	00 0c       	add	r0, r0
    184e:	ff 0b       	sbc	r31, r31
    1850:	ea 59       	subi	r30, 0x9A	; 154
    1852:	fd 4f       	sbci	r31, 0xFD	; 253
    1854:	80 81       	ld	r24, Z
    1856:	98 2b       	or	r25, r24
    1858:	0b c0       	rjmp	.+22     	; 0x1870 <step+0x94>
	else if(mode == FULL_STEP)  tempPort|=phaseArrayFullStep[phase];
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	49 f4       	brne	.+18     	; 0x1870 <step+0x94>
    185e:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <phase>
    1862:	0e 2e       	mov	r0, r30
    1864:	00 0c       	add	r0, r0
    1866:	ff 0b       	sbc	r31, r31
    1868:	e2 59       	subi	r30, 0x92	; 146
    186a:	fd 4f       	sbci	r31, 0xFD	; 253
    186c:	80 81       	ld	r24, Z
    186e:	98 2b       	or	r25, r24
	PORTA = tempPort;
    1870:	9b bb       	out	0x1b, r25	; 27
    1872:	08 95       	ret

00001874 <__vector_10>:
		if(!debugMode)signal_monitor();else debug_screen();
		if(button_monitor()) menu_screen();
	}
	return 0;
}
ISR( TIMER0_COMP_vect ){
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
	step(stepMode);
    1896:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <stepMode>
    189a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <step>
	if (steps == newSteps){	//if the required arrow position is reached - stop Stepper Motor rotation
    189e:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <steps>
    18a2:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <steps+0x1>
    18a6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <newSteps>
    18aa:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <newSteps+0x1>
    18ae:	28 17       	cp	r18, r24
    18b0:	39 07       	cpc	r19, r25
    18b2:	39 f4       	brne	.+14     	; 0x18c2 <__vector_10+0x4e>
		arrowMoving = 0;
    18b4:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <arrowMoving>
		TIMSK&=~_BV(OCIE0);
    18b8:	89 b7       	in	r24, 0x39	; 57
    18ba:	8d 7f       	andi	r24, 0xFD	; 253
    18bc:	89 bf       	out	0x39, r24	; 57
		TCCR0 = 0;
    18be:	13 be       	out	0x33, r1	; 51
		OCR0 = 0;
    18c0:	1c be       	out	0x3c, r1	; 60
	}
}
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <__vector_4>:
	tempPort = PORTA&~0x0F;
	if(mode == HALF_STEP)		tempPort|=phaseArrayHalfStep[phase];
	else if(mode == FULL_STEP)  tempPort|=phaseArrayFullStep[phase];
	PORTA = tempPort;
}
ISR( TIMER2_COMP_vect ){
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
	speedTimerRough++; //speedTimer increments each period timePerTic*TIC
    18f2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <speedTimerRough>
    18f6:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <speedTimerRough+0x1>
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <speedTimerRough+0x1>
    1900:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <speedTimerRough>
}
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <__vector_9>:
ISR (TIMER1_OVF_vect){
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	8f 93       	push	r24
    191e:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    1920:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <signalOn>
    1924:	88 23       	and	r24, r24
    1926:	49 f0       	breq	.+18     	; 0x193a <__vector_9+0x28>
    1928:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <signalCounter>
    192c:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <signalCounter+0x1>
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <signalCounter+0x1>
    1936:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <signalCounter>
}
    193a:	9f 91       	pop	r25
    193c:	8f 91       	pop	r24
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	0f 90       	pop	r0
    1944:	1f 90       	pop	r1
    1946:	18 95       	reti

00001948 <__vector_2>:
ISR(INT1_vect){
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
//interrupt occurs when Hall sensor is actuated
if (firstMeasure)
    1956:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <firstMeasure>
    195a:	88 23       	and	r24, r24
    195c:	d1 f0       	breq	.+52     	; 0x1992 <__vector_2+0x4a>
	{
		previousTCNT2 = TCNT2;
    195e:	84 b5       	in	r24, 0x24	; 36
    1960:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <previousTCNT2>
		TCNT2 = 0;
    1964:	14 bc       	out	0x24, r1	; 36
		speedTimerRoughPrevious = speedTimerRough;
    1966:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <speedTimerRough>
    196a:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <speedTimerRough+0x1>
    196e:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <speedTimerRoughPrevious+0x1>
    1972:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <speedTimerRoughPrevious>
		speedTimerRough = 0;
    1976:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <speedTimerRough+0x1>
    197a:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <speedTimerRough>
		sensorActations++;
    197e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <sensorActations>
    1982:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <sensorActations+0x1>
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <sensorActations+0x1>
    198c:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <sensorActations>
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <__vector_2+0x58>
	}
else
	{
		TCNT2 = 0;
    1992:	14 bc       	out	0x24, r1	; 36
		TIMSK|=_BV(OCIE2);	//first actuation of the Hall sensor enables TIMER2 compare match interrupt
    1994:	89 b7       	in	r24, 0x39	; 57
    1996:	80 68       	ori	r24, 0x80	; 128
    1998:	89 bf       	out	0x39, r24	; 57
		firstMeasure = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <firstMeasure>
	}
}
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <main_screen>:
		}
	}
	
}
void main_screen()
{
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
	if (!signalOn){
    19bc:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <signalOn>
    19c0:	81 11       	cpse	r24, r1
    19c2:	ec c0       	rjmp	.+472    	; 0x1b9c <main_screen+0x1ee>
		uint8_t offsetX = 10;
		uint8_t offsetY = 11;
		GLCD_Clear();
    19c4:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    19c8:	0f ef       	ldi	r16, 0xFF	; 255
    19ca:	27 e1       	ldi	r18, 0x17	; 23
    19cc:	44 e2       	ldi	r20, 0x24	; 36
    19ce:	6b e0       	ldi	r22, 0x0B	; 11
    19d0:	8a e0       	ldi	r24, 0x0A	; 10
    19d2:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    19d6:	24 e1       	ldi	r18, 0x14	; 20
    19d8:	46 e2       	ldi	r20, 0x26	; 38
    19da:	6e e0       	ldi	r22, 0x0E	; 14
    19dc:	85 e2       	ldi	r24, 0x25	; 37
    19de:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>

		if (voltage>=BRICK_1)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    19e2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <voltage>
    19e6:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <voltage+0x1>
    19ea:	89 36       	cpi	r24, 0x69	; 105
    19ec:	91 05       	cpc	r25, r1
    19ee:	34 f0       	brlt	.+12     	; 0x19fc <main_screen+0x4e>
    19f0:	25 e1       	ldi	r18, 0x15	; 21
    19f2:	40 e1       	ldi	r20, 0x10	; 16
    19f4:	6d e0       	ldi	r22, 0x0D	; 13
    19f6:	8c e0       	ldi	r24, 0x0C	; 12
    19f8:	0e 94 bd 20 	call	0x417a	; 0x417a <GLCD_FillRectangle>
		if (voltage>=BRICK_2)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    19fc:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <voltage>
    1a00:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <voltage+0x1>
    1a04:	8e 36       	cpi	r24, 0x6E	; 110
    1a06:	91 05       	cpc	r25, r1
    1a08:	3c f0       	brlt	.+14     	; 0x1a18 <main_screen+0x6a>
    1a0a:	0f ef       	ldi	r16, 0xFF	; 255
    1a0c:	25 e1       	ldi	r18, 0x15	; 21
    1a0e:	46 e1       	ldi	r20, 0x16	; 22
    1a10:	6d e0       	ldi	r22, 0x0D	; 13
    1a12:	82 e1       	ldi	r24, 0x12	; 18
    1a14:	0e 94 bd 20 	call	0x417a	; 0x417a <GLCD_FillRectangle>
		if (voltage>=BRICK_3)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    1a18:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <voltage>
    1a1c:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <voltage+0x1>
    1a20:	83 37       	cpi	r24, 0x73	; 115
    1a22:	91 05       	cpc	r25, r1
    1a24:	3c f0       	brlt	.+14     	; 0x1a34 <main_screen+0x86>
    1a26:	0f ef       	ldi	r16, 0xFF	; 255
    1a28:	25 e1       	ldi	r18, 0x15	; 21
    1a2a:	4c e1       	ldi	r20, 0x1C	; 28
    1a2c:	6d e0       	ldi	r22, 0x0D	; 13
    1a2e:	88 e1       	ldi	r24, 0x18	; 24
    1a30:	0e 94 bd 20 	call	0x417a	; 0x417a <GLCD_FillRectangle>
		if (voltage>=BRICK_4)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    1a34:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <voltage>
    1a38:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <voltage+0x1>
    1a3c:	88 37       	cpi	r24, 0x78	; 120
    1a3e:	91 05       	cpc	r25, r1
    1a40:	3c f0       	brlt	.+14     	; 0x1a50 <main_screen+0xa2>
    1a42:	0f ef       	ldi	r16, 0xFF	; 255
    1a44:	25 e1       	ldi	r18, 0x15	; 21
    1a46:	42 e2       	ldi	r20, 0x22	; 34
    1a48:	6d e0       	ldi	r22, 0x0D	; 13
    1a4a:	8e e1       	ldi	r24, 0x1E	; 30
    1a4c:	0e 94 bd 20 	call	0x417a	; 0x417a <GLCD_FillRectangle>

		GLCD_GotoXY(33+offsetX, 4+offsetY);
    1a50:	6f e0       	ldi	r22, 0x0F	; 15
    1a52:	8b e2       	ldi	r24, 0x2B	; 43
    1a54:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	48 e0       	ldi	r20, 0x08	; 8
    1a5c:	65 e0       	ldi	r22, 0x05	; 5
    1a5e:	80 ea       	ldi	r24, 0xA0	; 160
    1a60:	9b e0       	ldi	r25, 0x0B	; 11
    1a62:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    1a66:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <voltage>
    1a6a:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <voltage+0x1>
    1a6e:	07 2e       	mov	r0, r23
    1a70:	00 0c       	add	r0, r0
    1a72:	88 0b       	sbc	r24, r24
    1a74:	99 0b       	sbc	r25, r25
    1a76:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__floatsisf>
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    1a86:	2a e0       	ldi	r18, 0x0A	; 10
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
		GLCD_PrintString("V");
    1a92:	80 e7       	ldi	r24, 0x70	; 112
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>

		GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	62 e1       	ldi	r22, 0x12	; 18
    1aa0:	86 e3       	ldi	r24, 0x36	; 54
    1aa2:	94 e0       	ldi	r25, 0x04	; 4
    1aa4:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
		GLCD_GotoXY(4, 31);
    1aa8:	6f e1       	ldi	r22, 0x1F	; 31
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>

		uint32_t tempMilage = milage/100;
    1ab0:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <milage>
    1ab4:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <milage+0x1>
    1ab8:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <milage+0x2>
    1abc:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <milage+0x3>
    1ac0:	24 e6       	ldi	r18, 0x64	; 100
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
		int8_t l = 0;
		
		while(tempMilage){
    1acc:	21 15       	cp	r18, r1
    1ace:	31 05       	cpc	r19, r1
    1ad0:	41 05       	cpc	r20, r1
    1ad2:	51 05       	cpc	r21, r1
    1ad4:	d9 f0       	breq	.+54     	; 0x1b0c <main_screen+0x15e>
    1ad6:	c0 e0       	ldi	r28, 0x00	; 0
			tempMilage/=10;
    1ad8:	0f 2e       	mov	r0, r31
    1ada:	fa e0       	ldi	r31, 0x0A	; 10
    1adc:	cf 2e       	mov	r12, r31
    1ade:	d1 2c       	mov	r13, r1
    1ae0:	e1 2c       	mov	r14, r1
    1ae2:	f1 2c       	mov	r15, r1
    1ae4:	f0 2d       	mov	r31, r0
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	b9 01       	movw	r22, r18
    1aea:	a7 01       	movw	r20, r14
    1aec:	96 01       	movw	r18, r12
    1aee:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    1af2:	cf 5f       	subi	r28, 0xFF	; 255
		GLCD_GotoXY(4, 31);

		uint32_t tempMilage = milage/100;
		int8_t l = 0;
		
		while(tempMilage){
    1af4:	21 15       	cp	r18, r1
    1af6:	31 05       	cpc	r19, r1
    1af8:	41 05       	cpc	r20, r1
    1afa:	51 05       	cpc	r21, r1
    1afc:	a1 f7       	brne	.-24     	; 0x1ae6 <main_screen+0x138>
			tempMilage/=10;
			l++;
		}
		if (l<2) l = 2;
    1afe:	c2 30       	cpi	r28, 0x02	; 2
    1b00:	3c f0       	brlt	.+14     	; 0x1b10 <main_screen+0x162>
		int8_t zeros = 6-l;
    1b02:	d6 e0       	ldi	r29, 0x06	; 6
    1b04:	dc 1b       	sub	r29, r28
				for (int8_t i = 0;i<zeros;i++){
    1b06:	1d 16       	cp	r1, r29
    1b08:	24 f0       	brlt	.+8      	; 0x1b12 <main_screen+0x164>
    1b0a:	0b c0       	rjmp	.+22     	; 0x1b22 <main_screen+0x174>
		while(tempMilage){
			tempMilage/=10;
			l++;
		}
		if (l<2) l = 2;
		int8_t zeros = 6-l;
    1b0c:	d4 e0       	ldi	r29, 0x04	; 4
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <main_screen+0x164>
    1b10:	d4 e0       	ldi	r29, 0x04	; 4
    1b12:	c0 e0       	ldi	r28, 0x00	; 0
				for (int8_t i = 0;i<zeros;i++){
					GLCD_PrintString("0");
    1b14:	82 e7       	ldi	r24, 0x72	; 114
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
    1b1c:	cf 5f       	subi	r28, 0xFF	; 255
			tempMilage/=10;
			l++;
		}
		if (l<2) l = 2;
		int8_t zeros = 6-l;
				for (int8_t i = 0;i<zeros;i++){
    1b1e:	cd 17       	cp	r28, r29
    1b20:	cc f3       	brlt	.-14     	; 0x1b14 <main_screen+0x166>
					GLCD_PrintString("0");
				}
		GLCD_PrintInteger(milage/1000);
    1b22:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <milage>
    1b26:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <milage+0x1>
    1b2a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <milage+0x2>
    1b2e:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <milage+0x3>
    1b32:	28 ee       	ldi	r18, 0xE8	; 232
    1b34:	33 e0       	ldi	r19, 0x03	; 3
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	b9 01       	movw	r22, r18
    1b42:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		if(milage<100000000){	
    1b46:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <milage>
    1b4a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <milage+0x1>
    1b4e:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <milage+0x2>
    1b52:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <milage+0x3>
    1b56:	81 15       	cp	r24, r1
    1b58:	91 4e       	sbci	r25, 0xE1	; 225
    1b5a:	a5 4f       	sbci	r26, 0xF5	; 245
    1b5c:	b5 40       	sbci	r27, 0x05	; 5
    1b5e:	e0 f4       	brcc	.+56     	; 0x1b98 <main_screen+0x1ea>
			GLCD_PrintString(".");
    1b60:	84 e6       	ldi	r24, 0x64	; 100
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
			GLCD_PrintInteger((milage%1000)/100);
    1b68:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <milage>
    1b6c:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <milage+0x1>
    1b70:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <milage+0x2>
    1b74:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <milage+0x3>
    1b78:	28 ee       	ldi	r18, 0xE8	; 232
    1b7a:	33 e0       	ldi	r19, 0x03	; 3
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    1b84:	24 e6       	ldi	r18, 0x64	; 100
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__udivmodsi4>
    1b90:	ca 01       	movw	r24, r20
    1b92:	b9 01       	movw	r22, r18
    1b94:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		}
		GLCD_Render();
    1b98:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
	}
}
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	08 95       	ret

00001bac <arrow_position_update>:
void arrow_position_update(){
	newSteps = speedKmh/kmhPerStep;
    1bac:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <kmhPerStep>
    1bb0:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <kmhPerStep+0x1>
    1bb4:	40 91 8c 02 	lds	r20, 0x028C	; 0x80028c <kmhPerStep+0x2>
    1bb8:	50 91 8d 02 	lds	r21, 0x028D	; 0x80028d <kmhPerStep+0x3>
    1bbc:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <speedKmh>
    1bc0:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <speedKmh+0x1>
    1bc4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <speedKmh+0x2>
    1bc8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <speedKmh+0x3>
    1bcc:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    1bd0:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    1bd4:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <newSteps+0x1>
    1bd8:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <newSteps>
	int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (for how many steps arrow should be shifted)
    1bdc:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <steps>
    1be0:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <steps+0x1>
    1be4:	c9 01       	movw	r24, r18
    1be6:	86 1b       	sub	r24, r22
    1be8:	97 0b       	sbc	r25, r23
	if (shiftSteps!=0){
    1bea:	99 f0       	breq	.+38     	; 0x1c12 <arrow_position_update+0x66>
		if (shiftSteps > 0) dir = 0; else dir = 1;
    1bec:	1a f0       	brmi	.+6      	; 0x1bf4 <arrow_position_update+0x48>
    1bee:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <dir>
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <arrow_position_update+0x4e>
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <dir>
		arrowMoving = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <arrowMoving>
		//Timer0 is used to generate pulses for Stepper Motor driver
		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
    1c00:	83 b7       	in	r24, 0x33	; 51
    1c02:	8d 60       	ori	r24, 0x0D	; 13
    1c04:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1c06:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <stepInterval>
    1c0a:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1c0c:	89 b7       	in	r24, 0x39	; 57
    1c0e:	82 60       	ori	r24, 0x02	; 2
    1c10:	89 bf       	out	0x39, r24	; 57
    1c12:	08 95       	ret

00001c14 <button_monitor>:
		if (!debugMode)main_screen();//when the milage value changes by 100 meters - update data on the screen
	}
}
uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
    1c14:	b5 9b       	sbis	0x16, 5	; 22
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <button_monitor+0xc>
    1c18:	b6 9b       	sbis	0x16, 6	; 22
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <button_monitor+0xc>
    1c1c:	b7 99       	sbic	0x16, 7	; 22
    1c1e:	33 c0       	rjmp	.+102    	; 0x1c86 <button_monitor+0x72>
		btnPressed = 0;
		return 0;
	}
	else if((!(PIN_SET))&&(!btnPressed)){
    1c20:	b5 99       	sbic	0x16, 5	; 22
    1c22:	10 c0       	rjmp	.+32     	; 0x1c44 <button_monitor+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c24:	2f ef       	ldi	r18, 0xFF	; 255
    1c26:	30 e7       	ldi	r19, 0x70	; 112
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	21 50       	subi	r18, 0x01	; 1
    1c2c:	30 40       	sbci	r19, 0x00	; 0
    1c2e:	80 40       	sbci	r24, 0x00	; 0
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <button_monitor+0x16>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <button_monitor+0x20>
    1c34:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_SET)){
    1c36:	86 b3       	in	r24, 0x16	; 22
}
uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
		btnPressed = 0;
		return 0;
    1c38:	85 fb       	bst	r24, 5
    1c3a:	99 27       	eor	r25, r25
    1c3c:	90 f9       	bld	r25, 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	89 27       	eor	r24, r25
    1c42:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_SET)){
			btnPressed = 1;
		}
	}
	else if((!(PIN_DOWN))&&(!btnPressed)){
    1c44:	96 b3       	in	r25, 0x16	; 22
    1c46:	89 2f       	mov	r24, r25
    1c48:	80 74       	andi	r24, 0x40	; 64
    1c4a:	96 fd       	sbrc	r25, 6
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <button_monitor+0x54>
    1c4e:	9f ef       	ldi	r25, 0xFF	; 255
    1c50:	20 e7       	ldi	r18, 0x70	; 112
    1c52:	32 e0       	ldi	r19, 0x02	; 2
    1c54:	91 50       	subi	r25, 0x01	; 1
    1c56:	20 40       	sbci	r18, 0x00	; 0
    1c58:	30 40       	sbci	r19, 0x00	; 0
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <button_monitor+0x40>
    1c5c:	00 c0       	rjmp	.+0      	; 0x1c5e <button_monitor+0x4a>
    1c5e:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_DOWN)){
    1c60:	b6 99       	sbic	0x16, 6	; 22
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <button_monitor+0x7c>
			btnPressed = 2;
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	08 95       	ret
		}
	}
	else if((!(PIN_UP))&&(!btnPressed)){
    1c68:	b7 99       	sbic	0x16, 7	; 22
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <button_monitor+0x76>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	90 e7       	ldi	r25, 0x70	; 112
    1c70:	22 e0       	ldi	r18, 0x02	; 2
    1c72:	81 50       	subi	r24, 0x01	; 1
    1c74:	90 40       	sbci	r25, 0x00	; 0
    1c76:	20 40       	sbci	r18, 0x00	; 0
    1c78:	e1 f7       	brne	.-8      	; 0x1c72 <button_monitor+0x5e>
    1c7a:	00 c0       	rjmp	.+0      	; 0x1c7c <button_monitor+0x68>
    1c7c:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PIN_UP)){
    1c7e:	b7 99       	sbic	0x16, 7	; 22
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <button_monitor+0x7a>
			btnPressed = 3;
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	08 95       	ret
}
uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PIN_SET)&&(PIN_DOWN)&&(PIN_UP)){
		btnPressed = 0;
		return 0;
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	08 95       	ret
		sensorActations = 0;
		if (!debugMode)main_screen();//when the milage value changes by 100 meters - update data on the screen
	}
}
uint8_t button_monitor(){
	uint8_t btnPressed = 0;
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	08 95       	ret
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PIN_UP)){
			btnPressed = 3;
		}
	}
	return btnPressed;
}
    1c90:	08 95       	ret

00001c92 <yes_no_menu.2784>:
		TIMSK|=_BV(OCIE2);	//first actuation of the Hall sensor enables TIMER2 compare match interrupt
		firstMeasure = 1;
	}
}
void menu_screen(){
	uint8_t yes_no_menu(const char *textLine1, uint8_t offsetLine1, const char *textLine2, uint8_t offsetLine2){
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	7c 01       	movw	r14, r24
    1ca0:	06 2f       	mov	r16, r22
    1ca2:	ea 01       	movw	r28, r20
    1ca4:	12 2f       	mov	r17, r18
		uint8_t yesOrNo = 0;
		GLCD_Clear();
    1ca6:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
		GLCD_GotoLine(2);
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_GotoX(offsetLine1);
    1cb0:	80 2f       	mov	r24, r16
    1cb2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintString(textLine1);
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoLine(4);
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_GotoX(offsetLine2);
    1cc2:	81 2f       	mov	r24, r17
    1cc4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintString(textLine2);
    1cc8:	ce 01       	movw	r24, r28
    1cca:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		
		GLCD_GotoLine(6);
    1cce:	86 e0       	ldi	r24, 0x06	; 6
    1cd0:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_GotoX(28);
    1cd4:	8c e1       	ldi	r24, 0x1C	; 28
    1cd6:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintString("NO");
    1cda:	84 e7       	ldi	r24, 0x74	; 116
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(84);
    1ce2:	84 e5       	ldi	r24, 0x54	; 84
    1ce4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintString("YES");
    1ce8:	87 e7       	ldi	r24, 0x77	; 119
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		
		GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    1cf0:	0f ef       	ldi	r16, 0xFF	; 255
    1cf2:	29 e3       	ldi	r18, 0x39	; 57
    1cf4:	4e e2       	ldi	r20, 0x2E	; 46
    1cf6:	6d e2       	ldi	r22, 0x2D	; 45
    1cf8:	84 e1       	ldi	r24, 0x14	; 20
    1cfa:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
		GLCD_Render();
    1cfe:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
		while(button_monitor());
    1d02:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    1d06:	81 11       	cpse	r24, r1
    1d08:	fc cf       	rjmp	.-8      	; 0x1d02 <yes_no_menu.2784+0x70>
    1d0a:	c0 e0       	ldi	r28, 0x00	; 0
		while(1){
			uint8_t button = button_monitor();
			if ((button==2)||(button==3)){
				yesOrNo = yesOrNo^_BV(0);
    1d0c:	11 e0       	ldi	r17, 0x01	; 1
				GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    1d0e:	db e3       	ldi	r29, 0x3B	; 59
				GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    1d10:	0f 2e       	mov	r0, r31
    1d12:	f9 e6       	ldi	r31, 0x69	; 105
    1d14:	ef 2e       	mov	r14, r31
    1d16:	f0 2d       	mov	r31, r0
    1d18:	0f 2e       	mov	r0, r31
    1d1a:	f4 e1       	ldi	r31, 0x14	; 20
    1d1c:	ff 2e       	mov	r15, r31
    1d1e:	f0 2d       	mov	r31, r0
		
		GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
		GLCD_Render();
		while(button_monitor());
		while(1){
			uint8_t button = button_monitor();
    1d20:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
			if ((button==2)||(button==3)){
    1d24:	9e ef       	ldi	r25, 0xFE	; 254
    1d26:	98 0f       	add	r25, r24
    1d28:	92 30       	cpi	r25, 0x02	; 2
    1d2a:	f8 f4       	brcc	.+62     	; 0x1d6a <yes_no_menu.2784+0xd8>
				yesOrNo = yesOrNo^_BV(0);
    1d2c:	c1 27       	eor	r28, r17
				GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    1d2e:	cd 9f       	mul	r28, r29
    1d30:	80 2d       	mov	r24, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	4e e2       	ldi	r20, 0x2E	; 46
    1d36:	48 0f       	add	r20, r24
    1d38:	0f ef       	ldi	r16, 0xFF	; 255
    1d3a:	29 e3       	ldi	r18, 0x39	; 57
    1d3c:	6d e2       	ldi	r22, 0x2D	; 45
    1d3e:	8c 5e       	subi	r24, 0xEC	; 236
    1d40:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
				GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    1d44:	cc 23       	and	r28, r28
    1d46:	19 f0       	breq	.+6      	; 0x1d4e <yes_no_menu.2784+0xbc>
    1d48:	4e e2       	ldi	r20, 0x2E	; 46
    1d4a:	8f 2d       	mov	r24, r15
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <yes_no_menu.2784+0xc0>
    1d4e:	4e 2d       	mov	r20, r14
    1d50:	8f e4       	ldi	r24, 0x4F	; 79
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	29 e3       	ldi	r18, 0x39	; 57
    1d56:	6d e2       	ldi	r22, 0x2D	; 45
    1d58:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
				GLCD_Render();
    1d5c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
				while(button_monitor());
    1d60:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    1d64:	81 11       	cpse	r24, r1
    1d66:	fc cf       	rjmp	.-8      	; 0x1d60 <yes_no_menu.2784+0xce>
    1d68:	db cf       	rjmp	.-74     	; 0x1d20 <yes_no_menu.2784+0x8e>
			}
			else if(button==1) return yesOrNo;
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	c9 f6       	brne	.-78     	; 0x1d20 <yes_no_menu.2784+0x8e>
		}
	}
    1d6e:	8c 2f       	mov	r24, r28
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	08 95       	ret

00001d7e <arrow_calibration>:
		}
	}
	return btnPressed;
}
void arrow_calibration(){
	steps = 0;
    1d7e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <steps+0x1>
    1d82:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <steps>
	phase = 0;
    1d86:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <phase>
	newSteps = stepperMotorSteps*stepMode/4;	//moving arrow 90 degrees clockwise
    1d8a:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <stepMode>
    1d8e:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    1d92:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    1d96:	42 9f       	mul	r20, r18
    1d98:	c0 01       	movw	r24, r0
    1d9a:	43 9f       	mul	r20, r19
    1d9c:	90 0d       	add	r25, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	96 95       	lsr	r25
    1da2:	87 95       	ror	r24
    1da4:	96 95       	lsr	r25
    1da6:	87 95       	ror	r24
    1da8:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <newSteps+0x1>
    1dac:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <newSteps>
	dir = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <dir>
	arrowMoving = 1;
    1db6:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1dba:	83 b7       	in	r24, 0x33	; 51
    1dbc:	8d 60       	ori	r24, 0x0D	; 13
    1dbe:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1dc0:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <stepInterval>
    1dc4:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1dc6:	89 b7       	in	r24, 0x39	; 57
    1dc8:	82 60       	ori	r24, 0x02	; 2
    1dca:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1dcc:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <arrowMoving>
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	fc cf       	rjmp	.-8      	; 0x1dcc <arrow_calibration+0x4e>
    1dd4:	2f ef       	ldi	r18, 0xFF	; 255
    1dd6:	82 e5       	ldi	r24, 0x52	; 82
    1dd8:	97 e0       	ldi	r25, 0x07	; 7
    1dda:	21 50       	subi	r18, 0x01	; 1
    1ddc:	80 40       	sbci	r24, 0x00	; 0
    1dde:	90 40       	sbci	r25, 0x00	; 0
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <arrow_calibration+0x5c>
    1de2:	00 c0       	rjmp	.+0      	; 0x1de4 <arrow_calibration+0x66>
    1de4:	00 00       	nop
	_delay_ms(150);
	steps = stepperMotorSteps*stepMode;
    1de6:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <stepMode>
    1dea:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    1dee:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    1df2:	42 9f       	mul	r20, r18
    1df4:	c0 01       	movw	r24, r0
    1df6:	43 9f       	mul	r20, r19
    1df8:	90 0d       	add	r25, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <steps+0x1>
    1e00:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1e04:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <newSteps+0x1>
    1e08:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <newSteps>
	dir = 0;
    1e0c:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <dir>
	arrowMoving = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1e16:	83 b7       	in	r24, 0x33	; 51
    1e18:	8d 60       	ori	r24, 0x0D	; 13
    1e1a:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1e1c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <stepInterval>
    1e20:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1e22:	89 b7       	in	r24, 0x39	; 57
    1e24:	82 60       	ori	r24, 0x02	; 2
    1e26:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1e28:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <arrowMoving>
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	fc cf       	rjmp	.-8      	; 0x1e28 <arrow_calibration+0xaa>
	steps = 0;
    1e30:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <steps+0x1>
    1e34:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <steps>
	newSteps = 0;
    1e38:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <newSteps+0x1>
    1e3c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <newSteps>
	arrowCalibrated = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <arrowCalibrated>
    1e46:	08 95       	ret

00001e48 <draw_arrow>:
}
void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1e48:	88 23       	and	r24, r24
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <draw_arrow+0x24>
		GLCD_Clear();
    1e4c:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1e50:	67 e0       	ldi	r22, 0x07	; 7
    1e52:	86 e1       	ldi	r24, 0x16	; 22
    1e54:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	47 e3       	ldi	r20, 0x37	; 55
    1e5c:	6c e5       	ldi	r22, 0x5C	; 92
    1e5e:	84 e6       	ldi	r24, 0x64	; 100
    1e60:	90 e1       	ldi	r25, 0x10	; 16
    1e62:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <GLCD_DrawBitmap>
		GLCD_Render();
    1e66:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
    1e6a:	08 95       	ret
		}else{
		GLCD_Clear();
    1e6c:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1e70:	67 e0       	ldi	r22, 0x07	; 7
    1e72:	86 e1       	ldi	r24, 0x16	; 22
    1e74:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1e78:	2f ef       	ldi	r18, 0xFF	; 255
    1e7a:	47 e3       	ldi	r20, 0x37	; 55
    1e7c:	6c e5       	ldi	r22, 0x5C	; 92
    1e7e:	80 ee       	ldi	r24, 0xE0	; 224
    1e80:	9d e0       	ldi	r25, 0x0D	; 13
    1e82:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <GLCD_DrawBitmap>
		GLCD_Render();
    1e86:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
    1e8a:	08 95       	ret

00001e8c <draw_skull>:
	}
}
void draw_skull (void)
{
	GLCD_Clear();
    1e8c:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
	GLCD_GotoXY(27, 7);
    1e90:	67 e0       	ldi	r22, 0x07	; 7
    1e92:	8b e1       	ldi	r24, 0x1B	; 27
    1e94:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1e98:	2f ef       	ldi	r18, 0xFF	; 255
    1e9a:	44 e3       	ldi	r20, 0x34	; 52
    1e9c:	66 e5       	ldi	r22, 0x56	; 86
    1e9e:	88 ee       	ldi	r24, 0xE8	; 232
    1ea0:	92 e1       	ldi	r25, 0x12	; 18
    1ea2:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <GLCD_DrawBitmap>
	GLCD_Render();
    1ea6:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
    1eaa:	08 95       	ret

00001eac <signal_monitor>:
			sei();
	}
	if (speedKmh>maxSpeedOnDial)speedKmh = maxSpeedOnDial;
}
void signal_monitor(){
	if(!(PIN_RIGHT)&&(PIN_LEFT)){
    1eac:	b4 99       	sbic	0x16, 4	; 22
    1eae:	0d c0       	rjmp	.+26     	; 0x1eca <signal_monitor+0x1e>
    1eb0:	b3 9b       	sbis	0x16, 3	; 22
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <signal_monitor+0x1e>
		draw_arrow(LEFT);
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <draw_arrow>
		signalOn = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <signalOn>
		signalCounter = 0;
    1ec0:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <signalCounter+0x1>
    1ec4:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <signalCounter>
    1ec8:	21 c0       	rjmp	.+66     	; 0x1f0c <signal_monitor+0x60>
	}
	else if(!(PIN_LEFT)&&(PIN_RIGHT)){
    1eca:	b3 99       	sbic	0x16, 3	; 22
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <signal_monitor+0x3c>
    1ece:	b4 9b       	sbis	0x16, 4	; 22
    1ed0:	0b c0       	rjmp	.+22     	; 0x1ee8 <signal_monitor+0x3c>
		draw_arrow(RIGHT);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <draw_arrow>
		signalOn = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <signalOn>
		signalCounter = 0;
    1ede:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <signalCounter+0x1>
    1ee2:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <signalCounter>
    1ee6:	12 c0       	rjmp	.+36     	; 0x1f0c <signal_monitor+0x60>
	}
	else if(!(PIN_RIGHT)&&!(PIN_LEFT)){
    1ee8:	b4 99       	sbic	0x16, 4	; 22
    1eea:	0c c0       	rjmp	.+24     	; 0x1f04 <signal_monitor+0x58>
    1eec:	b3 99       	sbic	0x16, 3	; 22
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <signal_monitor+0x58>
		draw_skull();
    1ef0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <draw_skull>
		signalOn = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <signalOn>
		signalCounter = 0;
    1efa:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <signalCounter+0x1>
    1efe:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <signalCounter>
    1f02:	04 c0       	rjmp	.+8      	; 0x1f0c <signal_monitor+0x60>
	}
	if (signalOn){
    1f04:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <signalOn>
    1f08:	88 23       	and	r24, r24
    1f0a:	e9 f0       	breq	.+58     	; 0x1f46 <signal_monitor+0x9a>
		if((PIN_LEFT)&&(PIN_RIGHT)){
    1f0c:	b3 9b       	sbis	0x16, 3	; 22
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <signal_monitor+0x76>
    1f10:	b4 9b       	sbis	0x16, 4	; 22
    1f12:	07 c0       	rjmp	.+14     	; 0x1f22 <signal_monitor+0x76>
			GLCD_Clear();
    1f14:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
			GLCD_Render();
    1f18:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
			TIMSK|=_BV(TOIE1);		// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1f1c:	89 b7       	in	r24, 0x39	; 57
    1f1e:	84 60       	ori	r24, 0x04	; 4
    1f20:	89 bf       	out	0x39, r24	; 57
		}							// In order to define if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
		if (signalCounter > SIGNAL_COUNTER_MAX)	// if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1f22:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <signalCounter>
    1f26:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <signalCounter+0x1>
    1f2a:	8d 32       	cpi	r24, 0x2D	; 45
    1f2c:	91 40       	sbci	r25, 0x01	; 1
    1f2e:	58 f0       	brcs	.+22     	; 0x1f46 <signal_monitor+0x9a>
		{
			signalOn = 0;
    1f30:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <signalOn>
			signalCounter = 0;
    1f34:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <signalCounter+0x1>
    1f38:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <signalCounter>
			TIMSK&=~_BV(TOIE1);
    1f3c:	89 b7       	in	r24, 0x39	; 57
    1f3e:	8b 7f       	andi	r24, 0xFB	; 251
    1f40:	89 bf       	out	0x39, r24	; 57
			main_screen();
    1f42:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <main_screen>
    1f46:	08 95       	ret

00001f48 <read_ADC>:
	GLCD_GotoXY(27, 7);
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
	GLCD_Render();
}
uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
    1f48:	87 b9       	out	0x07, r24	; 7
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1f4a:	e6 2f       	mov	r30, r22
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	1e 16       	cp	r1, r30
    1f50:	1f 06       	cpc	r1, r31
    1f52:	8c f4       	brge	.+34     	; 0x1f76 <read_ADC+0x2e>
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1f5c:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1f5e:	36 99       	sbic	0x06, 6	; 6
    1f60:	fe cf       	rjmp	.-4      	; 0x1f5e <read_ADC+0x16>
		tmp += ADCW;
    1f62:	44 b1       	in	r20, 0x04	; 4
    1f64:	55 b1       	in	r21, 0x05	; 5
    1f66:	84 0f       	add	r24, r20
    1f68:	95 1f       	adc	r25, r21
	GLCD_Render();
}
uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
	for (int i = 0;i<cycles;i++)
    1f6a:	2f 5f       	subi	r18, 0xFF	; 255
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	2e 17       	cp	r18, r30
    1f70:	3f 07       	cpc	r19, r31
    1f72:	a1 f7       	brne	.-24     	; 0x1f5c <read_ADC+0x14>
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <read_ADC+0x32>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
	GLCD_Render();
}
uint16_t read_ADC(uint8_t mux, uint8_t cycles){
	ADMUX = mux;
	uint16_t tmp = 0;
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__udivmodhi4>
    1f80:	cb 01       	movw	r24, r22
}
    1f82:	08 95       	ret

00001f84 <data_monitor>:
			TIMSK&=~_BV(TOIE1);
			main_screen();
		}
	}
}
void data_monitor(){
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
	newVoltage = (read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER;
    1f88:	6a e0       	ldi	r22, 0x0A	; 10
    1f8a:	84 e0       	ldi	r24, 0x04	; 4
    1f8c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <read_ADC>
    1f90:	bc 01       	movw	r22, r24
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    1f9a:	2a e9       	ldi	r18, 0x9A	; 154
    1f9c:	39 e9       	ldi	r19, 0x99	; 153
    1f9e:	4c ec       	ldi	r20, 0xCC	; 204
    1fa0:	52 e4       	ldi	r21, 0x42	; 66
    1fa2:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	50 e4       	ldi	r21, 0x40	; 64
    1fae:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 ec       	ldi	r20, 0xC0	; 192
    1fb8:	50 e4       	ldi	r21, 0x40	; 64
    1fba:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    1fbe:	0e 94 40 26 	call	0x4c80	; 0x4c80 <__fixsfsi>
    1fc2:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <newVoltage+0x1>
    1fc6:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <newVoltage>
	if ((newVoltage<SLEEP_VOLTAGE)&&(!debugMode)){	//Disabling power consumers during ignition to prevent MCU from reboot
    1fca:	64 36       	cpi	r22, 0x64	; 100
    1fcc:	71 05       	cpc	r23, r1
    1fce:	ec f5       	brge	.+122    	; 0x204a <data_monitor+0xc6>
    1fd0:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <debugMode>
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	39 c0       	rjmp	.+114    	; 0x204a <data_monitor+0xc6>
		PORTA|=_BV(3);
    1fd8:	db 9a       	sbi	0x1b, 3	; 27
		PORTA|=_BV(0);
    1fda:	d8 9a       	sbi	0x1b, 0	; 27
		OCR1A = 0;
    1fdc:	1b bc       	out	0x2b, r1	; 43
    1fde:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1fe0:	19 bc       	out	0x29, r1	; 41
    1fe2:	18 bc       	out	0x28, r1	; 40
		GLCD_Clear();
    1fe4:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
		GLCD_Render();
    1fe8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
		while((read_ADC(ADC_MUX,ADC_CYCLES)/102.3)*AREF*DEVIDER<SLEEP_VOLTAGE);
    1fec:	6a e0       	ldi	r22, 0x0A	; 10
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <read_ADC>
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    1ffe:	2a e9       	ldi	r18, 0x9A	; 154
    2000:	39 e9       	ldi	r19, 0x99	; 153
    2002:	4c ec       	ldi	r20, 0xCC	; 204
    2004:	52 e4       	ldi	r21, 0x42	; 66
    2006:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	50 e4       	ldi	r21, 0x40	; 64
    2012:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 ec       	ldi	r20, 0xC0	; 192
    201c:	50 e4       	ldi	r21, 0x40	; 64
    201e:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	48 ec       	ldi	r20, 0xC8	; 200
    2028:	52 e4       	ldi	r21, 0x42	; 66
    202a:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    202e:	88 23       	and	r24, r24
    2030:	ec f2       	brlt	.-70     	; 0x1fec <data_monitor+0x68>
		OCR1A = pwmArrowLight;
    2032:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <pwmArrowLight>
    2036:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    203a:	9b bd       	out	0x2b, r25	; 43
    203c:	8a bd       	out	0x2a, r24	; 42
		OCR1B = pwmDialLight;
    203e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <pwmDialLight>
    2042:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    2046:	99 bd       	out	0x29, r25	; 41
    2048:	88 bd       	out	0x28, r24	; 40
	}
	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    204a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <newVoltage>
    204e:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <newVoltage+0x1>
    2052:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <voltage>
    2056:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <voltage+0x1>
    205a:	82 17       	cp	r24, r18
    205c:	93 07       	cpc	r25, r19
    205e:	51 f0       	breq	.+20     	; 0x2074 <data_monitor+0xf0>
	{
		voltage = newVoltage;
    2060:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <voltage+0x1>
    2064:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <voltage>
		if (!debugMode)main_screen();
    2068:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <debugMode>
    206c:	81 11       	cpse	r24, r1
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <data_monitor+0xf0>
    2070:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <main_screen>
	}
	uint32_t newMilage = sensorActations*circumference;
    2074:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <sensorActations>
    2078:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <sensorActations+0x1>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    2084:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <circumference>
    2088:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <circumference+0x1>
    208c:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <circumference+0x2>
    2090:	50 91 95 02 	lds	r21, 0x0295	; 0x800295 <circumference+0x3>
    2094:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2098:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
	if (newMilage>99)	
    209c:	64 36       	cpi	r22, 0x64	; 100
    209e:	71 05       	cpc	r23, r1
    20a0:	81 05       	cpc	r24, r1
    20a2:	91 05       	cpc	r25, r1
    20a4:	00 f1       	brcs	.+64     	; 0x20e6 <data_monitor+0x162>
	{
		milage+= newMilage;
    20a6:	00 91 79 02 	lds	r16, 0x0279	; 0x800279 <milage>
    20aa:	10 91 7a 02 	lds	r17, 0x027A	; 0x80027a <milage+0x1>
    20ae:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <milage+0x2>
    20b2:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <milage+0x3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	80 0f       	add	r24, r16
    20bc:	91 1f       	adc	r25, r17
    20be:	a2 1f       	adc	r26, r18
    20c0:	b3 1f       	adc	r27, r19
    20c2:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <milage>
    20c6:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <milage+0x1>
    20ca:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <milage+0x2>
    20ce:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <milage+0x3>
		sensorActations = 0;
    20d2:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <sensorActations+0x1>
    20d6:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <sensorActations>
		if (!debugMode)main_screen();//when the milage value changes by 100 meters - update data on the screen
    20da:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <debugMode>
    20de:	81 11       	cpse	r24, r1
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <data_monitor+0x162>
    20e2:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <main_screen>
	}
}
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	08 95       	ret

000020ec <eep_operations>:
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
}
void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    20ec:	8f 92       	push	r8
    20ee:	9f 92       	push	r9
    20f0:	af 92       	push	r10
    20f2:	bf 92       	push	r11
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	ec 01       	movw	r28, r24
    2100:	e6 2e       	mov	r14, r22
    2102:	14 2f       	mov	r17, r20
	if (eepAction==EEP_WRITE){
    2104:	41 30       	cpi	r20, 0x01	; 1
    2106:	09 f0       	breq	.+2      	; 0x210a <eep_operations+0x1e>
    2108:	6b c0       	rjmp	.+214    	; 0x21e0 <eep_operations+0xf4>
		eeprom_update_byte((uint8_t*)eepStartAddress,0);
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrowLight);
    2110:	ae 2c       	mov	r10, r14
    2112:	b1 2c       	mov	r11, r1
    2114:	ca 0d       	add	r28, r10
    2116:	db 1d       	adc	r29, r11
    2118:	60 91 b4 02 	lds	r22, 0x02B4	; 0x8002b4 <pwmArrowLight>
    211c:	70 91 b5 02 	lds	r23, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    2120:	ce 01       	movw	r24, r28
    2122:	0e 94 4b 29 	call	0x5296	; 0x5296 <eeprom_update_word>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDialLight);
    2126:	ca 0d       	add	r28, r10
    2128:	db 1d       	adc	r29, r11
    212a:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <pwmDialLight>
    212e:	70 91 bc 02 	lds	r23, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    2132:	ce 01       	movw	r24, r28
    2134:	0e 94 4b 29 	call	0x5296	; 0x5296 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),maxSpeedOnDial);
    2138:	ca 0d       	add	r28, r10
    213a:	db 1d       	adc	r29, r11
    213c:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <maxSpeedOnDial>
    2140:	ce 01       	movw	r24, r28
    2142:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    2146:	ca 0d       	add	r28, r10
    2148:	db 1d       	adc	r29, r11
    214a:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <stepInterval>
    214e:	ce 01       	movw	r24, r28
    2150:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),stepperMotorSteps);
    2154:	ca 0d       	add	r28, r10
    2156:	db 1d       	adc	r29, r11
    2158:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    215c:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    2160:	ce 01       	movw	r24, r28
    2162:	0e 94 4b 29 	call	0x5296	; 0x5296 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    2166:	ca 0d       	add	r28, r10
    2168:	db 1d       	adc	r29, r11
    216a:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <lcdContrast>
    216e:	ce 01       	movw	r24, r28
    2170:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    2174:	ca 0d       	add	r28, r10
    2176:	db 1d       	adc	r29, r11
    2178:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <magnetsOnWheel>
    217c:	ce 01       	movw	r24, r28
    217e:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    2182:	ca 0d       	add	r28, r10
    2184:	db 1d       	adc	r29, r11
    2186:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <stepMode>
    218a:	ce 01       	movw	r24, r28
    218c:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    2190:	ca 0d       	add	r28, r10
    2192:	db 1d       	adc	r29, r11
    2194:	40 91 c0 02 	lds	r20, 0x02C0	; 0x8002c0 <wheelDiameter>
    2198:	50 91 c1 02 	lds	r21, 0x02C1	; 0x8002c1 <wheelDiameter+0x1>
    219c:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <wheelDiameter+0x2>
    21a0:	70 91 c3 02 	lds	r23, 0x02C3	; 0x8002c3 <wheelDiameter+0x3>
    21a4:	ce 01       	movw	r24, r28
    21a6:	0e 94 3f 29 	call	0x527e	; 0x527e <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    21aa:	ca 0d       	add	r28, r10
    21ac:	db 1d       	adc	r29, r11
    21ae:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <gearRatio>
    21b2:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <gearRatio+0x1>
    21b6:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <gearRatio+0x2>
    21ba:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <gearRatio+0x3>
    21be:	ce 01       	movw	r24, r28
    21c0:	0e 94 3f 29 	call	0x527e	; 0x527e <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    21c4:	ca 0d       	add	r28, r10
    21c6:	db 1d       	adc	r29, r11
    21c8:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <degreesPerKmh>
    21cc:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    21d0:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    21d4:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    21d8:	ce 01       	movw	r24, r28
    21da:	0e 94 3f 29 	call	0x527e	; 0x527e <eeprom_update_dword>
    21de:	37 c1       	rjmp	.+622    	; 0x244e <eep_operations+0x362>
	}
	if(eepAction==EEP_READ){
    21e0:	41 11       	cpse	r20, r1
    21e2:	08 c1       	rjmp	.+528    	; 0x23f4 <eep_operations+0x308>
		pwmArrowLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    21e4:	e6 2e       	mov	r14, r22
    21e6:	f1 2c       	mov	r15, r1
    21e8:	ce 0d       	add	r28, r14
    21ea:	df 1d       	adc	r29, r15
    21ec:	ce 01       	movw	r24, r28
    21ee:	0e 94 28 29 	call	0x5250	; 0x5250 <eeprom_read_word>
		if ((pwmArrowLight>PWM_ARROW_MAX)||(pwmArrowLight<PWM_ARROW_MIN))pwmArrowLight=PWM_ARROW_DEFAULT;
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	24 e0       	ldi	r18, 0x04	; 4
    21f6:	92 07       	cpc	r25, r18
    21f8:	28 f4       	brcc	.+10     	; 0x2204 <eep_operations+0x118>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
	}
	if(eepAction==EEP_READ){
		pwmArrowLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    21fa:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <pwmArrowLight+0x1>
    21fe:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <pwmArrowLight>
    2202:	06 c0       	rjmp	.+12     	; 0x2210 <eep_operations+0x124>
		if ((pwmArrowLight>PWM_ARROW_MAX)||(pwmArrowLight<PWM_ARROW_MIN))pwmArrowLight=PWM_ARROW_DEFAULT;
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	94 e0       	ldi	r25, 0x04	; 4
    2208:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <pwmArrowLight+0x1>
    220c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <pwmArrowLight>
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    2210:	ce 0d       	add	r28, r14
    2212:	df 1d       	adc	r29, r15
    2214:	ce 01       	movw	r24, r28
    2216:	0e 94 28 29 	call	0x5250	; 0x5250 <eeprom_read_word>
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_ARROW_DEFAULT;
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	34 e0       	ldi	r19, 0x04	; 4
    221e:	93 07       	cpc	r25, r19
    2220:	28 f4       	brcc	.+10     	; 0x222c <eep_operations+0x140>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
	}
	if(eepAction==EEP_READ){
		pwmArrowLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrowLight>PWM_ARROW_MAX)||(pwmArrowLight<PWM_ARROW_MIN))pwmArrowLight=PWM_ARROW_DEFAULT;
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    2222:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pwmDialLight+0x1>
    2226:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pwmDialLight>
    222a:	06 c0       	rjmp	.+12     	; 0x2238 <eep_operations+0x14c>
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_ARROW_DEFAULT;
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	94 e0       	ldi	r25, 0x04	; 4
    2230:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pwmDialLight+0x1>
    2234:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pwmDialLight>
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2238:	ce 0d       	add	r28, r14
    223a:	df 1d       	adc	r29, r15
    223c:	ce 01       	movw	r24, r28
    223e:	0e 94 1a 29 	call	0x5234	; 0x5234 <eeprom_read_byte>
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
    2242:	84 31       	cpi	r24, 0x14	; 20
    2244:	18 f0       	brcs	.+6      	; 0x224c <eep_operations+0x160>
	if(eepAction==EEP_READ){
		pwmArrowLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrowLight>PWM_ARROW_MAX)||(pwmArrowLight<PWM_ARROW_MIN))pwmArrowLight=PWM_ARROW_DEFAULT;
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_ARROW_DEFAULT;
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2246:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <maxSpeedOnDial>
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <eep_operations+0x166>
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
    224c:	8e eb       	ldi	r24, 0xBE	; 190
    224e:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <maxSpeedOnDial>
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2252:	ce 0d       	add	r28, r14
    2254:	df 1d       	adc	r29, r15
    2256:	ce 01       	movw	r24, r28
    2258:	0e 94 1a 29 	call	0x5234	; 0x5234 <eeprom_read_byte>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    225c:	82 33       	cpi	r24, 0x32	; 50
    225e:	18 f0       	brcs	.+6      	; 0x2266 <eep_operations+0x17a>
		if ((pwmArrowLight>PWM_ARROW_MAX)||(pwmArrowLight<PWM_ARROW_MIN))pwmArrowLight=PWM_ARROW_DEFAULT;
		pwmDialLight = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_ARROW_DEFAULT;
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2260:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepInterval>
    2264:	03 c0       	rjmp	.+6      	; 0x226c <eep_operations+0x180>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    2266:	86 e9       	ldi	r24, 0x96	; 150
    2268:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepInterval>
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    226c:	ce 0d       	add	r28, r14
    226e:	df 1d       	adc	r29, r15
    2270:	ce 01       	movw	r24, r28
    2272:	0e 94 28 29 	call	0x5250	; 0x5250 <eeprom_read_word>
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    2276:	9c 01       	movw	r18, r24
    2278:	20 51       	subi	r18, 0x10	; 16
    227a:	31 09       	sbc	r19, r1
    227c:	21 38       	cpi	r18, 0x81	; 129
    227e:	31 40       	sbci	r19, 0x01	; 1
    2280:	28 f4       	brcc	.+10     	; 0x228c <eep_operations+0x1a0>
		if ((pwmDialLight>PWM_DIAL_MAX)||(pwmDialLight<PWM_DIAL_MIN))pwmDialLight=PWM_ARROW_DEFAULT;
		maxSpeedOnDial = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    2282:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <stepperMotorSteps+0x1>
    2286:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <stepperMotorSteps>
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <eep_operations+0x1ac>
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    228c:	80 e6       	ldi	r24, 0x60	; 96
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <stepperMotorSteps+0x1>
    2294:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <stepperMotorSteps>
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2298:	ce 0d       	add	r28, r14
    229a:	df 1d       	adc	r29, r15
    229c:	ce 01       	movw	r24, r28
    229e:	0e 94 1a 29 	call	0x5234	; 0x5234 <eeprom_read_byte>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    22a2:	82 33       	cpi	r24, 0x32	; 50
    22a4:	18 f0       	brcs	.+6      	; 0x22ac <eep_operations+0x1c0>
		if ((maxSpeedOnDial>MAX_SPEED_MAX)||(maxSpeedOnDial<MAX_SPEED_MIN))maxSpeedOnDial=MAX_SPEED_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22a6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <lcdContrast>
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <eep_operations+0x1c6>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    22ac:	86 e9       	ldi	r24, 0x96	; 150
    22ae:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <lcdContrast>
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22b2:	ce 0d       	add	r28, r14
    22b4:	df 1d       	adc	r29, r15
    22b6:	ce 01       	movw	r24, r28
    22b8:	0e 94 1a 29 	call	0x5234	; 0x5234 <eeprom_read_byte>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    22bc:	9f ef       	ldi	r25, 0xFF	; 255
    22be:	98 0f       	add	r25, r24
    22c0:	90 31       	cpi	r25, 0x10	; 16
    22c2:	18 f4       	brcc	.+6      	; 0x22ca <eep_operations+0x1de>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		stepperMotorSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22c4:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <magnetsOnWheel>
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <eep_operations+0x1e4>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    22ca:	86 e0       	ldi	r24, 0x06	; 6
    22cc:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <magnetsOnWheel>
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22d0:	ce 0d       	add	r28, r14
    22d2:	df 1d       	adc	r29, r15
    22d4:	ce 01       	movw	r24, r28
    22d6:	0e 94 1a 29 	call	0x5234	; 0x5234 <eeprom_read_byte>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    22da:	9f ef       	ldi	r25, 0xFF	; 255
    22dc:	98 0f       	add	r25, r24
    22de:	92 30       	cpi	r25, 0x02	; 2
    22e0:	18 f4       	brcc	.+6      	; 0x22e8 <eep_operations+0x1fc>
		if ((stepperMotorSteps>STEPPER_MOTOR_STEPS_MAX)||(stepperMotorSteps<STEPPER_MOTOR_STEPS_MIN))stepperMotorSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    22e2:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <stepMode>
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <eep_operations+0x202>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <stepMode>
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    22ee:	ce 0d       	add	r28, r14
    22f0:	df 1d       	adc	r29, r15
    22f2:	ce 01       	movw	r24, r28
    22f4:	0e 94 22 29 	call	0x5244	; 0x5244 <eeprom_read_dword>
    22f8:	4b 01       	movw	r8, r22
    22fa:	5c 01       	movw	r10, r24
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e4       	ldi	r21, 0x40	; 64
    2304:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__gesf2>
    2308:	18 16       	cp	r1, r24
    230a:	9c f0       	brlt	.+38     	; 0x2332 <eep_operations+0x246>
    230c:	2d ec       	ldi	r18, 0xCD	; 205
    230e:	3c ec       	ldi	r19, 0xCC	; 204
    2310:	4c ec       	ldi	r20, 0xCC	; 204
    2312:	5d e3       	ldi	r21, 0x3D	; 61
    2314:	c5 01       	movw	r24, r10
    2316:	b4 01       	movw	r22, r8
    2318:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    231c:	88 23       	and	r24, r24
    231e:	4c f0       	brlt	.+18     	; 0x2332 <eep_operations+0x246>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2320:	80 92 c0 02 	sts	0x02C0, r8	; 0x8002c0 <wheelDiameter>
    2324:	90 92 c1 02 	sts	0x02C1, r9	; 0x8002c1 <wheelDiameter+0x1>
    2328:	a0 92 c2 02 	sts	0x02C2, r10	; 0x8002c2 <wheelDiameter+0x2>
    232c:	b0 92 c3 02 	sts	0x02C3, r11	; 0x8002c3 <wheelDiameter+0x3>
    2330:	0c c0       	rjmp	.+24     	; 0x234a <eep_operations+0x25e>
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    2332:	83 e3       	ldi	r24, 0x33	; 51
    2334:	93 e3       	ldi	r25, 0x33	; 51
    2336:	a3 e3       	ldi	r26, 0x33	; 51
    2338:	bf e3       	ldi	r27, 0x3F	; 63
    233a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <wheelDiameter>
    233e:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <wheelDiameter+0x1>
    2342:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <wheelDiameter+0x2>
    2346:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <wheelDiameter+0x3>
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    234a:	ce 0d       	add	r28, r14
    234c:	df 1d       	adc	r29, r15
    234e:	ce 01       	movw	r24, r28
    2350:	0e 94 22 29 	call	0x5244	; 0x5244 <eeprom_read_dword>
    2354:	4b 01       	movw	r8, r22
    2356:	5c 01       	movw	r10, r24
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__gesf2>
    2364:	18 16       	cp	r1, r24
    2366:	9c f0       	brlt	.+38     	; 0x238e <eep_operations+0x2a2>
    2368:	2d ec       	ldi	r18, 0xCD	; 205
    236a:	3c ec       	ldi	r19, 0xCC	; 204
    236c:	4c ec       	ldi	r20, 0xCC	; 204
    236e:	5d e3       	ldi	r21, 0x3D	; 61
    2370:	c5 01       	movw	r24, r10
    2372:	b4 01       	movw	r22, r8
    2374:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    2378:	88 23       	and	r24, r24
    237a:	4c f0       	brlt	.+18     	; 0x238e <eep_operations+0x2a2>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    237c:	80 92 b6 02 	sts	0x02B6, r8	; 0x8002b6 <gearRatio>
    2380:	90 92 b7 02 	sts	0x02B7, r9	; 0x8002b7 <gearRatio+0x1>
    2384:	a0 92 b8 02 	sts	0x02B8, r10	; 0x8002b8 <gearRatio+0x2>
    2388:	b0 92 b9 02 	sts	0x02B9, r11	; 0x8002b9 <gearRatio+0x3>
    238c:	0c c0       	rjmp	.+24     	; 0x23a6 <eep_operations+0x2ba>
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e8       	ldi	r26, 0x80	; 128
    2394:	bf e3       	ldi	r27, 0x3F	; 63
    2396:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <gearRatio>
    239a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <gearRatio+0x1>
    239e:	a0 93 b8 02 	sts	0x02B8, r26	; 0x8002b8 <gearRatio+0x2>
    23a2:	b0 93 b9 02 	sts	0x02B9, r27	; 0x8002b9 <gearRatio+0x3>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    23a6:	c7 01       	movw	r24, r14
    23a8:	8c 0f       	add	r24, r28
    23aa:	9d 1f       	adc	r25, r29
    23ac:	0e 94 22 29 	call	0x5244	; 0x5244 <eeprom_read_dword>
    23b0:	4b 01       	movw	r8, r22
    23b2:	5c 01       	movw	r10, r24
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 ea       	ldi	r20, 0xA0	; 160
    23ba:	50 e4       	ldi	r21, 0x40	; 64
    23bc:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__gesf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	5c f0       	brlt	.+22     	; 0x23da <eep_operations+0x2ee>
    23c4:	2d ec       	ldi	r18, 0xCD	; 205
    23c6:	3c ec       	ldi	r19, 0xCC	; 204
    23c8:	4c ec       	ldi	r20, 0xCC	; 204
    23ca:	5d e3       	ldi	r21, 0x3D	; 61
    23cc:	c5 01       	movw	r24, r10
    23ce:	b4 01       	movw	r22, r8
    23d0:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	0c f0       	brlt	.+2      	; 0x23da <eep_operations+0x2ee>
    23d8:	59 c0       	rjmp	.+178    	; 0x248c <eep_operations+0x3a0>
    23da:	83 e3       	ldi	r24, 0x33	; 51
    23dc:	93 e3       	ldi	r25, 0x33	; 51
    23de:	a3 ea       	ldi	r26, 0xA3	; 163
    23e0:	bf e3       	ldi	r27, 0x3F	; 63
    23e2:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <degreesPerKmh>
    23e6:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <degreesPerKmh+0x1>
    23ea:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <degreesPerKmh+0x2>
    23ee:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <degreesPerKmh+0x3>
    23f2:	54 c0       	rjmp	.+168    	; 0x249c <eep_operations+0x3b0>
	}
	if (eepAction==EEP_ODOMETER_READ){
    23f4:	42 30       	cpi	r20, 0x02	; 2
    23f6:	59 f5       	brne	.+86     	; 0x244e <eep_operations+0x362>
		uint32_t tempMilage = 0;
		odometerCurrentAddress = 0;
    23f8:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <odometerCurrentAddress>
    23fc:	e6 2e       	mov	r14, r22
    23fe:	f1 2c       	mov	r15, r1
    2400:	11 e0       	ldi	r17, 0x01	; 1
    2402:	03 c0       	rjmp	.+6      	; 0x240a <eep_operations+0x31e>
    2404:	ce 0d       	add	r28, r14
    2406:	df 1d       	adc	r29, r15
    2408:	1f 5f       	subi	r17, 0xFF	; 255
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempMilage = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    240a:	ce 01       	movw	r24, r28
    240c:	0e 94 22 29 	call	0x5244	; 0x5244 <eeprom_read_dword>
			if(tempMilage>milage){	//finding the latest record (the highest value)
    2410:	80 90 79 02 	lds	r8, 0x0279	; 0x800279 <milage>
    2414:	90 90 7a 02 	lds	r9, 0x027A	; 0x80027a <milage+0x1>
    2418:	a0 90 7b 02 	lds	r10, 0x027B	; 0x80027b <milage+0x2>
    241c:	b0 90 7c 02 	lds	r11, 0x027C	; 0x80027c <milage+0x3>
    2420:	86 16       	cp	r8, r22
    2422:	97 06       	cpc	r9, r23
    2424:	a8 06       	cpc	r10, r24
    2426:	b9 06       	cpc	r11, r25
    2428:	78 f4       	brcc	.+30     	; 0x2448 <eep_operations+0x35c>
				milage = tempMilage;
    242a:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <milage>
    242e:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <milage+0x1>
    2432:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <milage+0x2>
    2436:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <milage+0x3>
				odometerCurrentAddress = i + 1;	//address for the next record
    243a:	10 93 80 02 	sts	0x0280, r17	; 0x800280 <odometerCurrentAddress>
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    243e:	19 31       	cpi	r17, 0x19	; 25
    2440:	08 f3       	brcs	.-62     	; 0x2404 <eep_operations+0x318>
    2442:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <odometerCurrentAddress>
    2446:	2a c0       	rjmp	.+84     	; 0x249c <eep_operations+0x3b0>
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
		uint32_t tempMilage = 0;
		odometerCurrentAddress = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2448:	19 31       	cpi	r17, 0x19	; 25
    244a:	e0 f2       	brcs	.-72     	; 0x2404 <eep_operations+0x318>
    244c:	27 c0       	rjmp	.+78     	; 0x249c <eep_operations+0x3b0>
				odometerCurrentAddress = i + 1;	//address for the next record
				if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
    244e:	13 30       	cpi	r17, 0x03	; 3
    2450:	29 f5       	brne	.+74     	; 0x249c <eep_operations+0x3b0>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
    2452:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <milage>
    2456:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <milage+0x1>
    245a:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <milage+0x2>
    245e:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <milage+0x3>
    2462:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <odometerCurrentAddress>
    2466:	9e 01       	movw	r18, r28
    2468:	8e 9d       	mul	r24, r14
    246a:	20 0d       	add	r18, r0
    246c:	31 1d       	adc	r19, r1
    246e:	11 24       	eor	r1, r1
    2470:	c9 01       	movw	r24, r18
    2472:	0e 94 51 29 	call	0x52a2	; 0x52a2 <eeprom_write_dword>
			odometerCurrentAddress++;
    2476:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <odometerCurrentAddress>
    247a:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    247c:	89 31       	cpi	r24, 0x19	; 25
    247e:	18 f4       	brcc	.+6      	; 0x2486 <eep_operations+0x39a>
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
			odometerCurrentAddress++;
    2480:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <odometerCurrentAddress>
    2484:	0b c0       	rjmp	.+22     	; 0x249c <eep_operations+0x3b0>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2486:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <odometerCurrentAddress>
	}
}
    248a:	08 c0       	rjmp	.+16     	; 0x249c <eep_operations+0x3b0>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    248c:	80 92 ad 02 	sts	0x02AD, r8	; 0x8002ad <degreesPerKmh>
    2490:	90 92 ae 02 	sts	0x02AE, r9	; 0x8002ae <degreesPerKmh+0x1>
    2494:	a0 92 af 02 	sts	0x02AF, r10	; 0x8002af <degreesPerKmh+0x2>
    2498:	b0 92 b0 02 	sts	0x02B0, r11	; 0x8002b0 <degreesPerKmh+0x3>
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	bf 90       	pop	r11
    24a8:	af 90       	pop	r10
    24aa:	9f 90       	pop	r9
    24ac:	8f 90       	pop	r8
    24ae:	08 95       	ret

000024b0 <presets>:
	 maxSpeedOnDial	= MAX_SPEED_DEFAULT;
	 stepInterval = STEP_INTERVAL_DEFAULT;
	 stepperMotorSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
	 stepMode = STEP_MODE_DEFAULT;
}
void presets (void){
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	cf 93       	push	r28
	DDRA|=_BV(0); //ENABLE 2
    24ba:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA|=_BV(1); //PHASE 2
    24bc:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA|=_BV(2); //PHASE 1
    24be:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA|=_BV(3); //ENABLE 1
    24c0:	d3 9a       	sbi	0x1a, 3	; 26
	DDRD|=_BV(4);//PWM DIAL LIGHT
    24c2:	8c 9a       	sbi	0x11, 4	; 17
	DDRD|=_BV(5);//PWM ARROW LIGHT
    24c4:	8d 9a       	sbi	0x11, 5	; 17
	PORTA|=_BV(3);//ENABLE 1 high (disabled)
    24c6:	db 9a       	sbi	0x1b, 3	; 27
	PORTA|=_BV(0);//ENABLE 2 high (disabled)
    24c8:	d8 9a       	sbi	0x1b, 0	; 27
	PORTB|=_BV(5);//internal pull-up for external buttons on PB5, PB6, PB7
    24ca:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=_BV(6);
    24cc:	c6 9a       	sbi	0x18, 6	; 24
	PORTB|=_BV(7);
    24ce:	c7 9a       	sbi	0x18, 7	; 24
	//ADC setup
	ADCSRA |= _BV(ADEN);
    24d0:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADPS0);		//
    24d2:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    24d4:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |= _BV(ADPS2);		//
    24d6:	32 9a       	sbi	0x06, 2	; 6
	// reading data from EEPROM
	uint8_t	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is started for the first time the default values have to be written to EEPROM
    24d8:	88 e0       	ldi	r24, 0x08	; 8
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 1a 29 	call	0x5234	; 0x5234 <eeprom_read_byte>
	if (firstEepRead){
    24e0:	88 23       	and	r24, r24
    24e2:	89 f0       	breq	.+34     	; 0x2506 <presets+0x56>
		set_default_values();
    24e4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <set_default_values>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	64 e0       	ldi	r22, 0x04	; 4
    24ec:	88 e0       	ldi	r24, 0x08	; 8
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    24f4:	c9 e1       	ldi	r28, 0x19	; 25
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    24f6:	43 e0       	ldi	r20, 0x03	; 3
    24f8:	64 e0       	ldi	r22, 0x04	; 4
    24fa:	80 e8       	ldi	r24, 0x80	; 128
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    2502:	c1 50       	subi	r28, 0x01	; 1
	// reading data from EEPROM
	uint8_t	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is started for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		set_default_values();
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2504:	c1 f7       	brne	.-16     	; 0x24f6 <presets+0x46>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
		}
	}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	64 e0       	ldi	r22, 0x04	; 4
    250a:	88 e0       	ldi	r24, 0x08	; 8
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    2512:	42 e0       	ldi	r20, 0x02	; 2
    2514:	64 e0       	ldi	r22, 0x04	; 4
    2516:	80 e8       	ldi	r24, 0x80	; 128
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
	TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);//Timer2 is used to measure time between Hall sensor actuation
    251e:	85 b5       	in	r24, 0x25	; 37
    2520:	8e 60       	ori	r24, 0x0E	; 14
    2522:	85 bd       	out	0x25, r24	; 37
	OCR2 = TIC-1; //upper limit of Timer2
    2524:	8e ef       	ldi	r24, 0xFE	; 254
    2526:	83 bd       	out	0x23, r24	; 35
	//dial and arrow light PWM (Timer1)
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);	//Fast PWM 10-bit
    2528:	83 ea       	ldi	r24, 0xA3	; 163
    252a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);	//prescaler = 64
    252c:	8b e0       	ldi	r24, 0x0B	; 11
    252e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrowLight;
    2530:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <pwmArrowLight>
    2534:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    2538:	9b bd       	out	0x2b, r25	; 43
    253a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDialLight;
    253c:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <pwmDialLight>
    2540:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    2544:	99 bd       	out	0x29, r25	; 41
    2546:	88 bd       	out	0x28, r24	; 40
	//
	circumference = gearRatio * wheelDiameter * pi/magnetsOnWheel;	
    2548:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <wheelDiameter>
    254c:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <wheelDiameter+0x1>
    2550:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <wheelDiameter+0x2>
    2554:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <wheelDiameter+0x3>
    2558:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <gearRatio>
    255c:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <gearRatio+0x1>
    2560:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <gearRatio+0x2>
    2564:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <gearRatio+0x3>
    2568:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    256c:	2b ed       	ldi	r18, 0xDB	; 219
    256e:	3f e0       	ldi	r19, 0x0F	; 15
    2570:	49 e4       	ldi	r20, 0x49	; 73
    2572:	50 e4       	ldi	r21, 0x40	; 64
    2574:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2578:	6b 01       	movw	r12, r22
    257a:	7c 01       	movw	r14, r24
    257c:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <magnetsOnWheel>
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__floatsisf>
    258a:	9b 01       	movw	r18, r22
    258c:	ac 01       	movw	r20, r24
    258e:	c7 01       	movw	r24, r14
    2590:	b6 01       	movw	r22, r12
    2592:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    2596:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <circumference>
    259a:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <circumference+0x1>
    259e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <circumference+0x2>
    25a2:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <circumference+0x3>
	timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, Timer2 prescaler=256)
    25a6:	8d eb       	ldi	r24, 0xBD	; 189
    25a8:	97 e3       	ldi	r25, 0x37	; 55
    25aa:	a6 e8       	ldi	r26, 0x86	; 134
    25ac:	b7 e3       	ldi	r27, 0x37	; 55
    25ae:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <timePerTic>
    25b2:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <timePerTic+0x1>
    25b6:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <timePerTic+0x2>
    25ba:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <timePerTic+0x3>
	kmhPerStep = (360.0/(stepperMotorSteps*stepMode))/degreesPerKmh;
    25be:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <stepMode>
    25c2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    25c6:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    25ca:	28 9f       	mul	r18, r24
    25cc:	b0 01       	movw	r22, r0
    25ce:	29 9f       	mul	r18, r25
    25d0:	70 0d       	add	r23, r0
    25d2:	11 24       	eor	r1, r1
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	84 eb       	ldi	r24, 0xB4	; 180
    25e6:	93 e4       	ldi	r25, 0x43	; 67
    25e8:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    25ec:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <degreesPerKmh>
    25f0:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    25f4:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    25f8:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    25fc:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    2600:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <kmhPerStep>
    2604:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <kmhPerStep+0x1>
    2608:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <kmhPerStep+0x2>
    260c:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <kmhPerStep+0x3>
	//display initialization
	GLCD_Setup();
    2610:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <GLCD_Setup>
	GLCD_Clear();
    2614:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
	GLCD_SetContrast(lcdContrast);
    2618:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <lcdContrast>
    261c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <GLCD_SetContrast>
	GLCD_Render();
    2620:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
	sei();
    2624:	78 94       	sei
	if (!arrowCalibrated) arrow_calibration();
    2626:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <arrowCalibrated>
    262a:	81 11       	cpse	r24, r1
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <presets+0x182>
    262e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <arrow_calibration>
	MCUCR|= _BV(ISC11); //Falling edge interrupt INT1 (Hall sensor)
    2632:	85 b7       	in	r24, 0x35	; 53
    2634:	88 60       	ori	r24, 0x08	; 8
    2636:	85 bf       	out	0x35, r24	; 53
	GICR|=_BV(INT1); //External Interrupt Enable INT1
    2638:	8b b7       	in	r24, 0x3b	; 59
    263a:	80 68       	ori	r24, 0x80	; 128
    263c:	8b bf       	out	0x3b, r24	; 59
}
    263e:	cf 91       	pop	r28
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	08 95       	ret

0000264a <calculate_speed>:
		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
		TIMSK|=_BV(OCIE0);
	}
}
void calculate_speed(){
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
	if(speedTimerRough>speedTimerRoughPrevious+PERIOD_INCREASE_TRESHOLD/magnetsOnWheel){	//If speed suddenly reduces to zero then next actuation of Hall sensor is not going to happen, so speedTimerRoughPrevious and previousTCNT2 will not be updated
    2656:	c0 91 be 02 	lds	r28, 0x02BE	; 0x8002be <magnetsOnWheel>
    265a:	d0 e0       	ldi	r29, 0x00	; 0
    265c:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <speedTimerRoughPrevious>
    2660:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <speedTimerRoughPrevious+0x1>
    2664:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <speedTimerRough>
    2668:	f0 91 ac 02 	lds	r31, 0x02AC	; 0x8002ac <speedTimerRough+0x1>
    266c:	8c e3       	ldi	r24, 0x3C	; 60
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	be 01       	movw	r22, r28
    2672:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    2676:	26 0f       	add	r18, r22
    2678:	37 1f       	adc	r19, r23
    267a:	2e 17       	cp	r18, r30
    267c:	3f 07       	cpc	r19, r31
    267e:	88 f4       	brcc	.+34     	; 0x26a2 <calculate_speed+0x58>
			speedTimerPrecise = speedTimerRough*(uint32_t)TIC;								//so if speedTimerRough increases significantly in comparison to previous period, speedTimerPrecise is updated using current speedTimerRough value
    2680:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <speedTimerRough>
    2684:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <speedTimerRough+0x1>
    2688:	af ef       	ldi	r26, 0xFF	; 255
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__umulhisi3>
    2690:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <speedTimerPrecise>
    2694:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <speedTimerPrecise+0x1>
    2698:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <speedTimerPrecise+0x2>
    269c:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <speedTimerPrecise+0x3>
    26a0:	18 c0       	rjmp	.+48     	; 0x26d2 <calculate_speed+0x88>
	}else{
			speedTimerPrecise = (speedTimerRoughPrevious*(uint32_t)TIC) + previousTCNT2;
    26a2:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <speedTimerRoughPrevious>
    26a6:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <speedTimerRoughPrevious+0x1>
    26aa:	40 91 a8 02 	lds	r20, 0x02A8	; 0x8002a8 <previousTCNT2>
    26ae:	af ef       	ldi	r26, 0xFF	; 255
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__umulhisi3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	84 0f       	add	r24, r20
    26bc:	91 1d       	adc	r25, r1
    26be:	a1 1d       	adc	r26, r1
    26c0:	b1 1d       	adc	r27, r1
    26c2:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <speedTimerPrecise>
    26c6:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <speedTimerPrecise+0x1>
    26ca:	a0 93 a0 02 	sts	0x02A0, r26	; 0x8002a0 <speedTimerPrecise+0x2>
    26ce:	b0 93 a1 02 	sts	0x02A1, r27	; 0x8002a1 <speedTimerPrecise+0x3>
	}
	if (speedTimerPrecise){
    26d2:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <speedTimerPrecise>
    26d6:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <speedTimerPrecise+0x1>
    26da:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <speedTimerPrecise+0x2>
    26de:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <speedTimerPrecise+0x3>
    26e2:	61 15       	cp	r22, r1
    26e4:	71 05       	cpc	r23, r1
    26e6:	81 05       	cpc	r24, r1
    26e8:	91 05       	cpc	r25, r1
    26ea:	a1 f1       	breq	.+104    	; 0x2754 <calculate_speed+0x10a>
			frequency = 1.0/(timePerTic*speedTimerPrecise);
    26ec:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    26f0:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <timePerTic>
    26f4:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <timePerTic+0x1>
    26f8:	40 91 98 02 	lds	r20, 0x0298	; 0x800298 <timePerTic+0x2>
    26fc:	50 91 99 02 	lds	r21, 0x0299	; 0x800299 <timePerTic+0x3>
    2700:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	80 e8       	ldi	r24, 0x80	; 128
    270e:	9f e3       	ldi	r25, 0x3F	; 63
    2710:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    2714:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <frequency>
    2718:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <frequency+0x1>
    271c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <frequency+0x2>
    2720:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <frequency+0x3>
			speedKmh = frequency*circumference*3.6; //3.6 is for converting m/s to km/h
    2724:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <circumference>
    2728:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <circumference+0x1>
    272c:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <circumference+0x2>
    2730:	50 91 95 02 	lds	r21, 0x0295	; 0x800295 <circumference+0x3>
    2734:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2738:	26 e6       	ldi	r18, 0x66	; 102
    273a:	36 e6       	ldi	r19, 0x66	; 102
    273c:	46 e6       	ldi	r20, 0x66	; 102
    273e:	50 e4       	ldi	r21, 0x40	; 64
    2740:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    2744:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <speedKmh>
    2748:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <speedKmh+0x1>
    274c:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <speedKmh+0x2>
    2750:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <speedKmh+0x3>
	}
	if(speedTimerRough>(MAX_PERIOD/magnetsOnWheel)){	//if Hall sensor was not actuated for too long (MAX_PERIOD*TIC/magnetsOnWheel*0.16us) it means that vehicle does not move
    2754:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <speedTimerRough>
    2758:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <speedTimerRough+0x1>
    275c:	8c ed       	ldi	r24, 0xDC	; 220
    275e:	95 e0       	ldi	r25, 0x05	; 5
    2760:	be 01       	movw	r22, r28
    2762:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    2766:	62 17       	cp	r22, r18
    2768:	73 07       	cpc	r23, r19
    276a:	08 f0       	brcs	.+2      	; 0x276e <calculate_speed+0x124>
    276c:	62 c0       	rjmp	.+196    	; 0x2832 <calculate_speed+0x1e8>
			TIMSK&=~_BV(OCIE2);
    276e:	89 b7       	in	r24, 0x39	; 57
    2770:	8f 77       	andi	r24, 0x7F	; 127
    2772:	89 bf       	out	0x39, r24	; 57
			TCNT2 = 0;
    2774:	14 bc       	out	0x24, r1	; 36
			speedTimerRough = 0;
    2776:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <speedTimerRough+0x1>
    277a:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <speedTimerRough>
			speedTimerRoughPrevious = 0;
    277e:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <speedTimerRoughPrevious+0x1>
    2782:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <speedTimerRoughPrevious>
			speedTimerPrecise = 0;
    2786:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <speedTimerPrecise>
    278a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <speedTimerPrecise+0x1>
    278e:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <speedTimerPrecise+0x2>
    2792:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <speedTimerPrecise+0x3>
			speedKmh = 0;
    2796:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <speedKmh>
    279a:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <speedKmh+0x1>
    279e:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <speedKmh+0x2>
    27a2:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <speedKmh+0x3>
			firstMeasure = 0;
    27a6:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <firstMeasure>
			frequency = 0;
    27aa:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <frequency>
    27ae:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <frequency+0x1>
    27b2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <frequency+0x2>
    27b6:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <frequency+0x3>
			previousTCNT2 = 0;
    27ba:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <previousTCNT2>
			milage = milage + sensorActations*circumference;
    27be:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <sensorActations>
    27c2:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <sensorActations+0x1>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    27ce:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <circumference>
    27d2:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <circumference+0x1>
    27d6:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <circumference+0x2>
    27da:	50 91 95 02 	lds	r21, 0x0295	; 0x800295 <circumference+0x3>
    27de:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    27e2:	6b 01       	movw	r12, r22
    27e4:	7c 01       	movw	r14, r24
    27e6:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <milage>
    27ea:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <milage+0x1>
    27ee:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <milage+0x2>
    27f2:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <milage+0x3>
    27f6:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    27fa:	9b 01       	movw	r18, r22
    27fc:	ac 01       	movw	r20, r24
    27fe:	c7 01       	movw	r24, r14
    2800:	b6 01       	movw	r22, r12
    2802:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__addsf3>
    2806:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    280a:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <milage>
    280e:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <milage+0x1>
    2812:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <milage+0x2>
    2816:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <milage+0x3>
			sensorActations = 0;
    281a:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <sensorActations+0x1>
    281e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <sensorActations>
			cli();
    2822:	f8 94       	cli
			eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    2824:	43 e0       	ldi	r20, 0x03	; 3
    2826:	64 e0       	ldi	r22, 0x04	; 4
    2828:	80 e8       	ldi	r24, 0x80	; 128
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
			sei();
    2830:	78 94       	sei
	}
	if (speedKmh>maxSpeedOnDial)speedKmh = maxSpeedOnDial;
    2832:	c0 91 ba 02 	lds	r28, 0x02BA	; 0x8002ba <maxSpeedOnDial>
    2836:	6c 2f       	mov	r22, r28
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__floatsisf>
    2842:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <speedKmh>
    2846:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <speedKmh+0x1>
    284a:	40 91 90 02 	lds	r20, 0x0290	; 0x800290 <speedKmh+0x2>
    284e:	50 91 91 02 	lds	r21, 0x0291	; 0x800291 <speedKmh+0x3>
    2852:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    2856:	88 23       	and	r24, r24
    2858:	74 f4       	brge	.+28     	; 0x2876 <calculate_speed+0x22c>
    285a:	6c 2f       	mov	r22, r28
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    2866:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <speedKmh>
    286a:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <speedKmh+0x1>
    286e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <speedKmh+0x2>
    2872:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <speedKmh+0x3>
}
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	ff 90       	pop	r15
    287c:	ef 90       	pop	r14
    287e:	df 90       	pop	r13
    2880:	cf 90       	pop	r12
    2882:	08 95       	ret

00002884 <set_value>:
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),milage);
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}
uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    2884:	2f 92       	push	r2
    2886:	3f 92       	push	r3
    2888:	6f 92       	push	r6
    288a:	7f 92       	push	r7
    288c:	8f 92       	push	r8
    288e:	9f 92       	push	r9
    2890:	af 92       	push	r10
    2892:	bf 92       	push	r11
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	29 97       	sbiw	r28, 0x09	; 9
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	6a 01       	movw	r12, r20
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	78 87       	std	Y+8, r23	; 0x08
    28bc:	6f 83       	std	Y+7, r22	; 0x07
    28be:	29 87       	std	Y+9, r18	; 0x09
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	48 e0       	ldi	r20, 0x08	; 8
    28c4:	65 e0       	ldi	r22, 0x05	; 5
    28c6:	80 ea       	ldi	r24, 0xA0	; 160
    28c8:	9b e0       	ldi	r25, 0x0B	; 11
    28ca:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
	GLCD_Clear();
    28ce:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
	GLCD_GotoLine(1);
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(10);
    28d8:	8a e0       	ldi	r24, 0x0A	; 10
    28da:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString(text);
    28de:	c8 01       	movw	r24, r16
    28e0:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoXY(90,24);
    28e4:	68 e1       	ldi	r22, 0x18	; 24
    28e6:	8a e5       	ldi	r24, 0x5A	; 90
    28e8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	GLCD_PrintString("Edit");
    28ec:	8b e7       	ldi	r24, 0x7B	; 123
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoXY(90,36);
    28f4:	64 e2       	ldi	r22, 0x24	; 36
    28f6:	8a e5       	ldi	r24, 0x5A	; 90
    28f8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	GLCD_PrintString("Exit");
    28fc:	80 e8       	ldi	r24, 0x80	; 128
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoXY(90,48);
    2904:	60 e3       	ldi	r22, 0x30	; 48
    2906:	8a e5       	ldi	r24, 0x5A	; 90
    2908:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	GLCD_PrintString("Save");
    290c:	85 e8       	ldi	r24, 0x85	; 133
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2914:	9c 2c       	mov	r9, r12
    2916:	ed 2c       	mov	r14, r13
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2918:	77 24       	eor	r7, r7
    291a:	73 94       	inc	r7
		}
	}
	
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    291c:	0f 2e       	mov	r0, r31
    291e:	fd e0       	ldi	r31, 0x0D	; 13
    2920:	6f 2e       	mov	r6, r31
    2922:	f0 2d       	mov	r31, r0
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2924:	0f 2e       	mov	r0, r31
    2926:	f3 ef       	ldi	r31, 0xF3	; 243
    2928:	ff 2e       	mov	r15, r31
    292a:	f0 2d       	mov	r31, r0
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
					}
					else if (currentButton == 2) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    292c:	0f 2e       	mov	r0, r31
    292e:	f9 e0       	ldi	r31, 0x09	; 9
    2930:	8f 2e       	mov	r8, r31
    2932:	f0 2d       	mov	r31, r0
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2934:	c1 14       	cp	r12, r1
    2936:	d1 04       	cpc	r13, r1
    2938:	99 f0       	breq	.+38     	; 0x2960 <set_value+0xdc>
    293a:	29 2d       	mov	r18, r9
    293c:	3e 2d       	mov	r19, r14
    293e:	00 e0       	ldi	r16, 0x00	; 0
		{
		   tempValue = tempValue / 10;
    2940:	ad ec       	ldi	r26, 0xCD	; 205
    2942:	bc ec       	ldi	r27, 0xCC	; 204
    2944:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__umulhisi3>
    2948:	9c 01       	movw	r18, r24
    294a:	36 95       	lsr	r19
    294c:	27 95       	ror	r18
    294e:	36 95       	lsr	r19
    2950:	27 95       	ror	r18
    2952:	36 95       	lsr	r19
    2954:	27 95       	ror	r18
		   valueLength++;
    2956:	0f 5f       	subi	r16, 0xFF	; 255
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    2958:	21 15       	cp	r18, r1
    295a:	31 05       	cpc	r19, r1
    295c:	89 f7       	brne	.-30     	; 0x2940 <set_value+0xbc>
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <set_value+0xde>
	int8_t *digitsArr;
	int8_t currentItem = 0;
restore_initial_value:

	tempValue = currValue;
	valueLength = 0;
    2960:	00 e0       	ldi	r16, 0x00	; 0
	while(tempValue)       //finding the number of digits for current value
		{
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
    2962:	2d 81       	ldd	r18, Y+5	; 0x05
    2964:	3e 81       	ldd	r19, Y+6	; 0x06
	maxValueLength = 0;
    2966:	1c 82       	std	Y+4, r1	; 0x04
	while(tempValue)       //finding the number of digits for maximum value allowed
    2968:	21 15       	cp	r18, r1
    296a:	31 05       	cpc	r19, r1
    296c:	09 f4       	brne	.+2      	; 0x2970 <set_value+0xec>
    296e:	d0 c1       	rjmp	.+928    	; 0x2d10 <set_value+0x48c>
    2970:	a7 2c       	mov	r10, r7
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <set_value+0xf2>
    2974:	a8 2e       	mov	r10, r24
		{
			tempValue = tempValue / 10;
    2976:	ad ec       	ldi	r26, 0xCD	; 205
    2978:	bc ec       	ldi	r27, 0xCC	; 204
    297a:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__umulhisi3>
    297e:	9c 01       	movw	r18, r24
    2980:	36 95       	lsr	r19
    2982:	27 95       	ror	r18
    2984:	36 95       	lsr	r19
    2986:	27 95       	ror	r18
    2988:	36 95       	lsr	r19
    298a:	27 95       	ror	r18
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	8a 0d       	add	r24, r10
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2990:	21 15       	cp	r18, r1
    2992:	31 05       	cpc	r19, r1
    2994:	79 f7       	brne	.-34     	; 0x2974 <set_value+0xf0>
    2996:	ac 82       	std	Y+4, r10	; 0x04
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2998:	b1 2c       	mov	r11, r1
    299a:	c5 01       	movw	r24, r10
    299c:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <malloc>
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    29a4:	1b 82       	std	Y+3, r1	; 0x03
    29a6:	1a 14       	cp	r1, r10
    29a8:	1b 04       	cpc	r1, r11
    29aa:	0c f0       	brlt	.+2      	; 0x29ae <set_value+0x12a>
    29ac:	4c c0       	rjmp	.+152    	; 0x2a46 <set_value+0x1c2>
    29ae:	e9 2d       	mov	r30, r9
    29b0:	fe 2d       	mov	r31, r14
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
		if (digitIndex<valueLength){
    29b8:	40 2f       	mov	r20, r16
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	64 17       	cp	r22, r20
    29be:	75 07       	cpc	r23, r21
    29c0:	74 f5       	brge	.+92     	; 0x2a1e <set_value+0x19a>
			digitsArr[digitIndex] = tempValue % 10;
    29c2:	a9 80       	ldd	r10, Y+1	; 0x01
    29c4:	ba 80       	ldd	r11, Y+2	; 0x02
    29c6:	a8 0e       	add	r10, r24
    29c8:	b1 1c       	adc	r11, r1
    29ca:	87 fd       	sbrc	r24, 7
    29cc:	ba 94       	dec	r11
    29ce:	9f 01       	movw	r18, r30
    29d0:	ad ec       	ldi	r26, 0xCD	; 205
    29d2:	bc ec       	ldi	r27, 0xCC	; 204
    29d4:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__umulhisi3>
    29d8:	96 95       	lsr	r25
    29da:	87 95       	ror	r24
    29dc:	96 95       	lsr	r25
    29de:	87 95       	ror	r24
    29e0:	96 95       	lsr	r25
    29e2:	87 95       	ror	r24
    29e4:	9c 01       	movw	r18, r24
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	82 0f       	add	r24, r18
    29f8:	93 1f       	adc	r25, r19
    29fa:	9f 01       	movw	r18, r30
    29fc:	28 1b       	sub	r18, r24
    29fe:	39 0b       	sbc	r19, r25
    2a00:	d5 01       	movw	r26, r10
    2a02:	2c 93       	st	X, r18
			tempValue = tempValue / 10;
    2a04:	9f 01       	movw	r18, r30
    2a06:	ad ec       	ldi	r26, 0xCD	; 205
    2a08:	bc ec       	ldi	r27, 0xCC	; 204
    2a0a:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__umulhisi3>
    2a0e:	fc 01       	movw	r30, r24
    2a10:	f6 95       	lsr	r31
    2a12:	e7 95       	ror	r30
    2a14:	f6 95       	lsr	r31
    2a16:	e7 95       	ror	r30
    2a18:	f6 95       	lsr	r31
    2a1a:	e7 95       	ror	r30
    2a1c:	07 c0       	rjmp	.+14     	; 0x2a2c <set_value+0x1a8>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    2a1e:	a9 81       	ldd	r26, Y+1	; 0x01
    2a20:	ba 81       	ldd	r27, Y+2	; 0x02
    2a22:	a8 0f       	add	r26, r24
    2a24:	b1 1d       	adc	r27, r1
    2a26:	87 fd       	sbrc	r24, 7
    2a28:	ba 95       	dec	r27
    2a2a:	1c 92       	st	X, r1
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	8b 83       	std	Y+3, r24	; 0x03
    2a32:	68 2f       	mov	r22, r24
    2a34:	08 2e       	mov	r0, r24
    2a36:	00 0c       	add	r0, r0
    2a38:	77 0b       	sbc	r23, r23
    2a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	62 17       	cp	r22, r18
    2a40:	73 07       	cpc	r23, r19
    2a42:	0c f4       	brge	.+2      	; 0x2a46 <set_value+0x1c2>
    2a44:	bb cf       	rjmp	.-138    	; 0x29bc <set_value+0x138>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}
	
	GLCD_GotoXY(5,20);
    2a46:	64 e1       	ldi	r22, 0x14	; 20
    2a48:	85 e0       	ldi	r24, 0x05	; 5
    2a4a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	41 e1       	ldi	r20, 0x11	; 17
    2a52:	6c e0       	ldi	r22, 0x0C	; 12
    2a54:	84 e7       	ldi	r24, 0x74	; 116
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5e:	0f ef       	ldi	r16, 0xFF	; 255
    2a60:	08 0f       	add	r16, r24
    2a62:	06 9d       	mul	r16, r6
    2a64:	00 2d       	mov	r16, r0
    2a66:	11 24       	eor	r1, r1
    2a68:	0b 5f       	subi	r16, 0xFB	; 251
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2a6a:	81 50       	subi	r24, 0x01	; 1
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
    2a6e:	88 23       	and	r24, r24
    2a70:	24 f1       	brlt	.+72     	; 0x2aba <set_value+0x236>
		GLCD_PrintInteger(digitsArr[digitIndex]);
    2a72:	e9 81       	ldd	r30, Y+1	; 0x01
    2a74:	fa 81       	ldd	r31, Y+2	; 0x02
    2a76:	e8 0f       	add	r30, r24
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	87 fd       	sbrc	r24, 7
    2a7c:	fa 95       	dec	r31
    2a7e:	60 81       	ld	r22, Z
    2a80:	06 2e       	mov	r0, r22
    2a82:	00 0c       	add	r0, r0
    2a84:	77 0b       	sbc	r23, r23
    2a86:	88 0b       	sbc	r24, r24
    2a88:	99 0b       	sbc	r25, r25
    2a8a:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		if ((digitIndex==tens)&&(tens)){
    2a8e:	29 85       	ldd	r18, Y+9	; 0x09
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	08 2e       	mov	r0, r24
    2a94:	00 0c       	add	r0, r0
    2a96:	99 0b       	sbc	r25, r25
    2a98:	42 2f       	mov	r20, r18
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	84 17       	cp	r24, r20
    2a9e:	95 07       	cpc	r25, r21
    2aa0:	39 f4       	brne	.+14     	; 0x2ab0 <set_value+0x22c>
    2aa2:	22 23       	and	r18, r18
    2aa4:	29 f0       	breq	.+10     	; 0x2ab0 <set_value+0x22c>
			GLCD_PrintString(".");
    2aa6:	84 e6       	ldi	r24, 0x64	; 100
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
			rectShift+=5;
    2aae:	0b 5f       	subi	r16, 0xFB	; 251
	}
	
	GLCD_GotoXY(5,20);
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	81 50       	subi	r24, 0x01	; 1
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    2ab6:	88 23       	and	r24, r24
    2ab8:	e4 f6       	brge	.-72     	; 0x2a72 <set_value+0x1ee>
		if ((digitIndex==tens)&&(tens)){
			GLCD_PrintString(".");
			rectShift+=5;
		}
	}
	GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2aba:	4c e0       	ldi	r20, 0x0C	; 12
    2abc:	40 0f       	add	r20, r16
    2abe:	24 e2       	ldi	r18, 0x24	; 36
    2ac0:	64 e1       	ldi	r22, 0x14	; 20
    2ac2:	80 2f       	mov	r24, r16
    2ac4:	0e 94 c2 20 	call	0x4184	; 0x4184 <GLCD_InvertRect>
	print_min_max();
    2ac8:	9e 01       	movw	r18, r28
    2aca:	2f 5f       	subi	r18, 0xFF	; 255
    2acc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ace:	19 01       	movw	r2, r18
    2ad0:	0e 94 09 0b 	call	0x1612	; 0x1612 <print_min_max.2919>
	GLCD_Render();
    2ad4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
	while (button_monitor());
    2ad8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    2adc:	81 11       	cpse	r24, r1
    2ade:	fc cf       	rjmp	.-8      	; 0x2ad8 <set_value+0x254>
    2ae0:	b1 2c       	mov	r11, r1
	uint8_t currentButton = 0;
		while(1){
			currentButton = button_monitor();
    2ae2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
			if(currentButton){
    2ae6:	88 23       	and	r24, r24
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <set_value+0x268>
    2aea:	06 c1       	rjmp	.+524    	; 0x2cf8 <set_value+0x474>
				rectShift = 0;
				if (currentButton == 1) {
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <set_value+0x26e>
    2af0:	87 c0       	rjmp	.+270    	; 0x2c00 <set_value+0x37c>
							currentItem++;
    2af2:	b3 94       	inc	r11
							if (currentItem==maxValueLength){
    2af4:	2b 2d       	mov	r18, r11
    2af6:	0b 2c       	mov	r0, r11
    2af8:	00 0c       	add	r0, r0
    2afa:	33 0b       	sbc	r19, r19
    2afc:	8c 81       	ldd	r24, Y+4	; 0x04
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	28 17       	cp	r18, r24
    2b02:	39 07       	cpc	r19, r25
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <set_value+0x284>
    2b06:	a7 c0       	rjmp	.+334    	; 0x2c56 <set_value+0x3d2>
								currentItem = 0;
								uint16_t checkValue = new_value();
    2b08:	ce 01       	movw	r24, r28
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	1c 01       	movw	r2, r24
    2b0e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2934>
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
    2b12:	2d 81       	ldd	r18, Y+5	; 0x05
    2b14:	3e 81       	ldd	r19, Y+6	; 0x06
    2b16:	28 17       	cp	r18, r24
    2b18:	39 07       	cpc	r19, r25
    2b1a:	08 f4       	brcc	.+2      	; 0x2b1e <set_value+0x29a>
    2b1c:	0b cf       	rjmp	.-490    	; 0x2934 <set_value+0xb0>
    2b1e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b20:	38 85       	ldd	r19, Y+8	; 0x08
    2b22:	82 17       	cp	r24, r18
    2b24:	93 07       	cpc	r25, r19
    2b26:	08 f4       	brcc	.+2      	; 0x2b2a <set_value+0x2a6>
    2b28:	05 cf       	rjmp	.-502    	; 0x2934 <set_value+0xb0>
								int8_t menuItem = 0;
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
    2b2a:	24 e2       	ldi	r18, 0x24	; 36
    2b2c:	41 e1       	ldi	r20, 0x11	; 17
    2b2e:	64 e1       	ldi	r22, 0x14	; 20
    2b30:	85 e0       	ldi	r24, 0x05	; 5
    2b32:	0e 94 c2 20 	call	0x4184	; 0x4184 <GLCD_InvertRect>
								while(button_monitor());
    2b36:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    2b3a:	81 11       	cpse	r24, r1
    2b3c:	fc cf       	rjmp	.-8      	; 0x2b36 <set_value+0x2b2>
    2b3e:	10 e0       	ldi	r17, 0x00	; 0
								while(1){
										currentButton = button_monitor();
    2b40:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
										if(currentButton){
    2b44:	88 23       	and	r24, r24
    2b46:	89 f1       	breq	.+98     	; 0x2baa <set_value+0x326>
											if (currentButton == 3) {
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	21 f4       	brne	.+8      	; 0x2b54 <set_value+0x2d0>
												menuItem--;
    2b4c:	11 50       	subi	r17, 0x01	; 1
												if (menuItem<0)menuItem = 2;
    2b4e:	6a f5       	brpl	.+90     	; 0x2baa <set_value+0x326>
    2b50:	12 e0       	ldi	r17, 0x02	; 2
    2b52:	2b c0       	rjmp	.+86     	; 0x2baa <set_value+0x326>
											}
											else if (currentButton == 2) {
    2b54:	82 30       	cpi	r24, 0x02	; 2
    2b56:	29 f4       	brne	.+10     	; 0x2b62 <set_value+0x2de>
												menuItem++;
    2b58:	1f 5f       	subi	r17, 0xFF	; 255
												if (menuItem>2)menuItem = 0;
    2b5a:	13 30       	cpi	r17, 0x03	; 3
    2b5c:	34 f1       	brlt	.+76     	; 0x2baa <set_value+0x326>
    2b5e:	10 e0       	ldi	r17, 0x00	; 0
    2b60:	24 c0       	rjmp	.+72     	; 0x2baa <set_value+0x326>
											}
											else if (currentButton == 1) {
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	11 f5       	brne	.+68     	; 0x2baa <set_value+0x326>
													if (!menuItem){	//getting back to value edit
    2b66:	11 11       	cpse	r17, r1
    2b68:	15 c0       	rjmp	.+42     	; 0x2b94 <set_value+0x310>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
    2b6a:	00 e0       	ldi	r16, 0x00	; 0
    2b6c:	21 e2       	ldi	r18, 0x21	; 33
    2b6e:	44 e7       	ldi	r20, 0x74	; 116
    2b70:	65 e1       	ldi	r22, 0x15	; 21
    2b72:	86 e5       	ldi	r24, 0x56	; 86
    2b74:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
    2b78:	2d e2       	ldi	r18, 0x2D	; 45
    2b7a:	44 e7       	ldi	r20, 0x74	; 116
    2b7c:	61 e2       	ldi	r22, 0x21	; 33
    2b7e:	86 e5       	ldi	r24, 0x56	; 86
    2b80:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
    2b84:	29 e3       	ldi	r18, 0x39	; 57
    2b86:	44 e7       	ldi	r20, 0x74	; 116
    2b88:	6d e2       	ldi	r22, 0x2D	; 45
    2b8a:	86 e5       	ldi	r24, 0x56	; 86
    2b8c:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
												menuItem++;
												if (menuItem>2)menuItem = 0;
											}
											else if (currentButton == 1) {
													if (!menuItem){	//getting back to value edit
														currentItem = 0;
    2b90:	b1 2c       	mov	r11, r1
    2b92:	61 c0       	rjmp	.+194    	; 0x2c56 <set_value+0x3d2>
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
														break;
													}
													else if (menuItem == 1){
    2b94:	11 30       	cpi	r17, 0x01	; 1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <set_value+0x316>
    2b98:	b8 c0       	rjmp	.+368    	; 0x2d0a <set_value+0x486>
														return currValue; //if changes discarded - return initial value
													}
													else if (menuItem == 2){
    2b9a:	12 30       	cpi	r17, 0x02	; 2
    2b9c:	31 f4       	brne	.+12     	; 0x2baa <set_value+0x326>
														return new_value();
    2b9e:	de 01       	movw	r26, r28
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	1d 01       	movw	r2, r26
    2ba4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2934>
    2ba8:	bb c0       	rjmp	.+374    	; 0x2d20 <set_value+0x49c>
													}
											}
										}
							for (int8_t i=0;i<3;i++)GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);
    2baa:	00 e0       	ldi	r16, 0x00	; 0
    2bac:	21 e2       	ldi	r18, 0x21	; 33
    2bae:	44 e7       	ldi	r20, 0x74	; 116
    2bb0:	65 e1       	ldi	r22, 0x15	; 21
    2bb2:	86 e5       	ldi	r24, 0x56	; 86
    2bb4:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
    2bb8:	2d e2       	ldi	r18, 0x2D	; 45
    2bba:	44 e7       	ldi	r20, 0x74	; 116
    2bbc:	61 e2       	ldi	r22, 0x21	; 33
    2bbe:	86 e5       	ldi	r24, 0x56	; 86
    2bc0:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
    2bc4:	29 e3       	ldi	r18, 0x39	; 57
    2bc6:	44 e7       	ldi	r20, 0x74	; 116
    2bc8:	6d e2       	ldi	r22, 0x2D	; 45
    2bca:	86 e5       	ldi	r24, 0x56	; 86
    2bcc:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
							GLCD_DrawRectangle(86,21+menuItem*12,116,33+menuItem*12,GLCD_Black);
    2bd0:	61 2f       	mov	r22, r17
    2bd2:	66 0f       	add	r22, r22
    2bd4:	61 0f       	add	r22, r17
    2bd6:	66 0f       	add	r22, r22
    2bd8:	66 0f       	add	r22, r22
    2bda:	21 e2       	ldi	r18, 0x21	; 33
    2bdc:	26 0f       	add	r18, r22
    2bde:	6b 5e       	subi	r22, 0xEB	; 235
    2be0:	0f ef       	ldi	r16, 0xFF	; 255
    2be2:	44 e7       	ldi	r20, 0x74	; 116
    2be4:	86 e5       	ldi	r24, 0x56	; 86
    2be6:	0e 94 3f 20 	call	0x407e	; 0x407e <GLCD_DrawRectangle>
							GLCD_Render();
    2bea:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
							while(button_monitor());
    2bee:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	fc cf       	rjmp	.-8      	; 0x2bee <set_value+0x36a>
							while(!button_monitor());
    2bf6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    2bfa:	88 23       	and	r24, r24
    2bfc:	e1 f3       	breq	.-8      	; 0x2bf6 <set_value+0x372>
    2bfe:	a0 cf       	rjmp	.-192    	; 0x2b40 <set_value+0x2bc>
							}
						}
					}
					if (currentButton == 3) {
    2c00:	83 30       	cpi	r24, 0x03	; 3
    2c02:	a1 f4       	brne	.+40     	; 0x2c2c <set_value+0x3a8>
						digitsArr[currentItem]++;
    2c04:	e9 81       	ldd	r30, Y+1	; 0x01
    2c06:	fa 81       	ldd	r31, Y+2	; 0x02
    2c08:	8b 2d       	mov	r24, r11
    2c0a:	0b 2c       	mov	r0, r11
    2c0c:	00 0c       	add	r0, r0
    2c0e:	99 0b       	sbc	r25, r25
    2c10:	e8 0f       	add	r30, r24
    2c12:	f9 1f       	adc	r31, r25
    2c14:	20 81       	ld	r18, Z
    2c16:	2f 5f       	subi	r18, 0xFF	; 255
    2c18:	20 83       	st	Z, r18
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    2c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1e:	e8 0f       	add	r30, r24
    2c20:	f9 1f       	adc	r31, r25
    2c22:	80 81       	ld	r24, Z
    2c24:	8a 30       	cpi	r24, 0x0A	; 10
    2c26:	bc f0       	brlt	.+46     	; 0x2c56 <set_value+0x3d2>
    2c28:	10 82       	st	Z, r1
    2c2a:	15 c0       	rjmp	.+42     	; 0x2c56 <set_value+0x3d2>
					}
					else if (currentButton == 2) {
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	99 f4       	brne	.+38     	; 0x2c56 <set_value+0x3d2>
						digitsArr[currentItem]--;
    2c30:	e9 81       	ldd	r30, Y+1	; 0x01
    2c32:	fa 81       	ldd	r31, Y+2	; 0x02
    2c34:	8b 2d       	mov	r24, r11
    2c36:	0b 2c       	mov	r0, r11
    2c38:	00 0c       	add	r0, r0
    2c3a:	99 0b       	sbc	r25, r25
    2c3c:	e8 0f       	add	r30, r24
    2c3e:	f9 1f       	adc	r31, r25
    2c40:	20 81       	ld	r18, Z
    2c42:	21 50       	subi	r18, 0x01	; 1
    2c44:	20 83       	st	Z, r18
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	e8 0f       	add	r30, r24
    2c4c:	f9 1f       	adc	r31, r25
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 23       	and	r24, r24
    2c52:	0c f4       	brge	.+2      	; 0x2c56 <set_value+0x3d2>
    2c54:	80 82       	st	Z, r8
					}
			GLCD_GotoXY(5,20);
    2c56:	64 e1       	ldi	r22, 0x14	; 20
    2c58:	85 e0       	ldi	r24, 0x05	; 5
    2c5a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	81 50       	subi	r24, 0x01	; 1
    2c62:	8b 83       	std	Y+3, r24	; 0x03
    2c64:	88 23       	and	r24, r24
    2c66:	1c f1       	brlt	.+70     	; 0x2cae <set_value+0x42a>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2c68:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6c:	e8 0f       	add	r30, r24
    2c6e:	f1 1d       	adc	r31, r1
    2c70:	87 fd       	sbrc	r24, 7
    2c72:	fa 95       	dec	r31
    2c74:	60 81       	ld	r22, Z
    2c76:	06 2e       	mov	r0, r22
    2c78:	00 0c       	add	r0, r0
    2c7a:	77 0b       	sbc	r23, r23
    2c7c:	88 0b       	sbc	r24, r24
    2c7e:	99 0b       	sbc	r25, r25
    2c80:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    2c84:	29 85       	ldd	r18, Y+9	; 0x09
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	08 2e       	mov	r0, r24
    2c8a:	00 0c       	add	r0, r0
    2c8c:	99 0b       	sbc	r25, r25
    2c8e:	42 2f       	mov	r20, r18
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	84 17       	cp	r24, r20
    2c94:	95 07       	cpc	r25, r21
    2c96:	31 f4       	brne	.+12     	; 0x2ca4 <set_value+0x420>
    2c98:	22 23       	and	r18, r18
    2c9a:	21 f0       	breq	.+8      	; 0x2ca4 <set_value+0x420>
    2c9c:	84 e6       	ldi	r24, 0x64	; 100
    2c9e:	92 e0       	ldi	r25, 0x02	; 2
    2ca0:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
					else if (currentButton == 2) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
					}
			GLCD_GotoXY(5,20);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	81 50       	subi	r24, 0x01	; 1
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
    2caa:	88 23       	and	r24, r24
    2cac:	ec f6       	brge	.-70     	; 0x2c68 <set_value+0x3e4>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2cae:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb0:	81 50       	subi	r24, 0x01	; 1
    2cb2:	bf 9c       	mul	r11, r15
    2cb4:	90 2d       	mov	r25, r0
    2cb6:	11 24       	eor	r1, r1
    2cb8:	86 9d       	mul	r24, r6
    2cba:	90 0d       	add	r25, r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	85 e0       	ldi	r24, 0x05	; 5
    2cc0:	89 0f       	add	r24, r25
			if (tens){
    2cc2:	29 85       	ldd	r18, Y+9	; 0x09
    2cc4:	22 23       	and	r18, r18
    2cc6:	51 f0       	breq	.+20     	; 0x2cdc <set_value+0x458>
					if(currentItem<tens){
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	4b 2d       	mov	r20, r11
    2ccc:	0b 2c       	mov	r0, r11
    2cce:	00 0c       	add	r0, r0
    2cd0:	55 0b       	sbc	r21, r21
    2cd2:	42 17       	cp	r20, r18
    2cd4:	53 07       	cpc	r21, r19
    2cd6:	14 f4       	brge	.+4      	; 0x2cdc <set_value+0x458>
						rectShift+=5;
    2cd8:	8a e0       	ldi	r24, 0x0A	; 10
    2cda:	89 0f       	add	r24, r25
					}
			}
			GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2cdc:	4c e0       	ldi	r20, 0x0C	; 12
    2cde:	48 0f       	add	r20, r24
    2ce0:	24 e2       	ldi	r18, 0x24	; 36
    2ce2:	64 e1       	ldi	r22, 0x14	; 20
    2ce4:	0e 94 c2 20 	call	0x4184	; 0x4184 <GLCD_InvertRect>
			print_min_max();
    2ce8:	9e 01       	movw	r18, r28
    2cea:	2f 5f       	subi	r18, 0xFF	; 255
    2cec:	3f 4f       	sbci	r19, 0xFF	; 255
    2cee:	19 01       	movw	r2, r18
    2cf0:	0e 94 09 0b 	call	0x1612	; 0x1612 <print_min_max.2919>
			GLCD_Render();
    2cf4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
		}

		while(button_monitor());
    2cf8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	fc cf       	rjmp	.-8      	; 0x2cf8 <set_value+0x474>
		while(!button_monitor());
    2d00:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    2d04:	88 23       	and	r24, r24
    2d06:	e1 f3       	breq	.-8      	; 0x2d00 <set_value+0x47c>
    2d08:	ec ce       	rjmp	.-552    	; 0x2ae2 <set_value+0x25e>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
														break;
													}
													else if (menuItem == 1){
														return currValue; //if changes discarded - return initial value
    2d0a:	8c 2d       	mov	r24, r12
    2d0c:	9d 2d       	mov	r25, r13
    2d0e:	08 c0       	rjmp	.+16     	; 0x2d20 <set_value+0x49c>
	while(tempValue)       //finding the number of digits for maximum value allowed
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}
	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <malloc>
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2d1c:	1b 82       	std	Y+3, r1	; 0x03
    2d1e:	93 ce       	rjmp	.-730    	; 0x2a46 <set_value+0x1c2>
		}

		while(button_monitor());
		while(!button_monitor());
	}
}
    2d20:	29 96       	adiw	r28, 0x09	; 9
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
    2d3c:	bf 90       	pop	r11
    2d3e:	af 90       	pop	r10
    2d40:	9f 90       	pop	r9
    2d42:	8f 90       	pop	r8
    2d44:	7f 90       	pop	r7
    2d46:	6f 90       	pop	r6
    2d48:	3f 90       	pop	r3
    2d4a:	2f 90       	pop	r2
    2d4c:	08 95       	ret

00002d4e <debug_screen>:
void debug_screen(){
    2d4e:	cf 93       	push	r28
	uint8_t xOfset1 = 4;
	uint8_t xOfset2 = 26;
	uint8_t xOfset3 = 60;
	uint8_t xOfset4 = 86;
	GLCD_Clear();
    2d50:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	48 e0       	ldi	r20, 0x08	; 8
    2d58:	65 e0       	ldi	r22, 0x05	; 5
    2d5a:	80 ea       	ldi	r24, 0xA0	; 160
    2d5c:	9b e0       	ldi	r25, 0x0B	; 11
    2d5e:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
	GLCD_GotoLine(0);
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2d68:	84 e0       	ldi	r24, 0x04	; 4
    2d6a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Spd");
    2d6e:	8a e8       	ldi	r24, 0x8A	; 138
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2d76:	8a e1       	ldi	r24, 0x1A	; 26
    2d78:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintDouble(speedKmh,10);
    2d7c:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <speedKmh>
    2d80:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <speedKmh+0x1>
    2d84:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <speedKmh+0x2>
    2d88:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <speedKmh+0x3>
    2d8c:	2a e0       	ldi	r18, 0x0A	; 10
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e0       	ldi	r20, 0x00	; 0
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2d98:	8c e3       	ldi	r24, 0x3C	; 60
    2d9a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Ubt");
    2d9e:	8e e8       	ldi	r24, 0x8E	; 142
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2da6:	86 e5       	ldi	r24, 0x56	; 86
    2da8:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintDouble(newVoltage/10.0,100);
    2dac:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <newVoltage>
    2db0:	70 91 82 02 	lds	r23, 0x0282	; 0x800282 <newVoltage+0x1>
    2db4:	07 2e       	mov	r0, r23
    2db6:	00 0c       	add	r0, r0
    2db8:	88 0b       	sbc	r24, r24
    2dba:	99 0b       	sbc	r25, r25
    2dbc:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__floatsisf>
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    2dcc:	24 e6       	ldi	r18, 0x64	; 100
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
	
	GLCD_GotoLine(1);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2dde:	84 e0       	ldi	r24, 0x04	; 4
    2de0:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Frq");
    2de4:	82 e9       	ldi	r24, 0x92	; 146
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2dec:	8a e1       	ldi	r24, 0x1A	; 26
    2dee:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintDouble(frequency,10);
    2df2:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <frequency>
    2df6:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <frequency+0x1>
    2dfa:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <frequency+0x2>
    2dfe:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <frequency+0x3>
    2e02:	2a e0       	ldi	r18, 0x0A	; 10
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2e0e:	8c e3       	ldi	r24, 0x3C	; 60
    2e10:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("StP");
    2e14:	86 e9       	ldi	r24, 0x96	; 150
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2e1c:	86 e5       	ldi	r24, 0x56	; 86
    2e1e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerPrecise);
    2e22:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <speedTimerPrecise>
    2e26:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <speedTimerPrecise+0x1>
    2e2a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <speedTimerPrecise+0x2>
    2e2e:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <speedTimerPrecise+0x3>
    2e32:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoLine(2);
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2e3c:	84 e0       	ldi	r24, 0x04	; 4
    2e3e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Stp");
    2e42:	8a e9       	ldi	r24, 0x9A	; 154
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2e4a:	8a e1       	ldi	r24, 0x1A	; 26
    2e4c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(steps);
    2e50:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <steps>
    2e54:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <steps+0x1>
    2e58:	07 2e       	mov	r0, r23
    2e5a:	00 0c       	add	r0, r0
    2e5c:	88 0b       	sbc	r24, r24
    2e5e:	99 0b       	sbc	r25, r25
    2e60:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2e64:	8c e3       	ldi	r24, 0x3C	; 60
    2e66:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("StR");
    2e6a:	8e e9       	ldi	r24, 0x9E	; 158
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2e72:	86 e5       	ldi	r24, 0x56	; 86
    2e74:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRough);
    2e78:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <speedTimerRough>
    2e7c:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <speedTimerRough+0x1>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoLine(3);
    2e88:	83 e0       	ldi	r24, 0x03	; 3
    2e8a:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2e8e:	84 e0       	ldi	r24, 0x04	; 4
    2e90:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("nSt");
    2e94:	82 ea       	ldi	r24, 0xA2	; 162
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2e9c:	8a e1       	ldi	r24, 0x1A	; 26
    2e9e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(newSteps);
    2ea2:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <newSteps>
    2ea6:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <newSteps+0x1>
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2eb2:	8c e3       	ldi	r24, 0x3C	; 60
    2eb4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("tRP");
    2eb8:	86 ea       	ldi	r24, 0xA6	; 166
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2ec0:	86 e5       	ldi	r24, 0x56	; 86
    2ec2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRoughPrevious);
    2ec6:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <speedTimerRoughPrevious>
    2eca:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <speedTimerRoughPrevious+0x1>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoLine(4);
    2ed6:	84 e0       	ldi	r24, 0x04	; 4
    2ed8:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2edc:	84 e0       	ldi	r24, 0x04	; 4
    2ede:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Phs");
    2ee2:	8a ea       	ldi	r24, 0xAA	; 170
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2eea:	8a e1       	ldi	r24, 0x1A	; 26
    2eec:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(phase);
    2ef0:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <phase>
    2ef4:	06 2e       	mov	r0, r22
    2ef6:	00 0c       	add	r0, r0
    2ef8:	77 0b       	sbc	r23, r23
    2efa:	88 0b       	sbc	r24, r24
    2efc:	99 0b       	sbc	r25, r25
    2efe:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2f02:	8c e3       	ldi	r24, 0x3C	; 60
    2f04:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Trn");
    2f08:	8e ea       	ldi	r24, 0xAE	; 174
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2f10:	86 e5       	ldi	r24, 0x56	; 86
    2f12:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("L");
    2f16:	82 eb       	ldi	r24, 0xB2	; 178
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_PrintInteger(!(PIN_LEFT));
    2f1e:	66 b3       	in	r22, 0x16	; 22
    2f20:	66 95       	lsr	r22
    2f22:	66 95       	lsr	r22
    2f24:	66 95       	lsr	r22
    2f26:	c1 e0       	ldi	r28, 0x01	; 1
    2f28:	6c 27       	eor	r22, r28
    2f2a:	86 2f       	mov	r24, r22
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	61 70       	andi	r22, 0x01	; 1
    2f38:	77 27       	eor	r23, r23
    2f3a:	88 27       	eor	r24, r24
    2f3c:	99 27       	eor	r25, r25
    2f3e:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	GLCD_PrintString(" R");
    2f42:	84 eb       	ldi	r24, 0xB4	; 180
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_PrintInteger(!(PIN_RIGHT));
    2f4a:	66 b3       	in	r22, 0x16	; 22
    2f4c:	62 95       	swap	r22
    2f4e:	6f 70       	andi	r22, 0x0F	; 15
    2f50:	6c 27       	eor	r22, r28
    2f52:	86 2f       	mov	r24, r22
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e0       	ldi	r26, 0x00	; 0
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	61 70       	andi	r22, 0x01	; 1
    2f60:	77 27       	eor	r23, r23
    2f62:	88 27       	eor	r24, r24
    2f64:	99 27       	eor	r25, r25
    2f66:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoLine(5);
    2f6a:	85 e0       	ldi	r24, 0x05	; 5
    2f6c:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2f70:	84 e0       	ldi	r24, 0x04	; 4
    2f72:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("SAc");
    2f76:	87 eb       	ldi	r24, 0xB7	; 183
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2f7e:	8a e1       	ldi	r24, 0x1A	; 26
    2f80:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintInteger(sensorActations);
    2f84:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <sensorActations>
    2f88:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <sensorActations+0x1>
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	
	GLCD_GotoLine(6);	
    2f94:	86 e0       	ldi	r24, 0x06	; 6
    2f96:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2f9a:	84 e0       	ldi	r24, 0x04	; 4
    2f9c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintString("Mil");
    2fa0:	8b eb       	ldi	r24, 0xBB	; 187
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2fa8:	8a e1       	ldi	r24, 0x1A	; 26
    2faa:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_PrintDouble(milage/1000.0,100);
    2fae:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <milage>
    2fb2:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <milage+0x1>
    2fb6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <milage+0x2>
    2fba:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <milage+0x3>
    2fbe:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a e7       	ldi	r20, 0x7A	; 122
    2fc8:	54 e4       	ldi	r21, 0x44	; 68
    2fca:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    2fce:	24 e6       	ldi	r18, 0x64	; 100
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
 	GLCD_Render();
    2fda:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
    2fde:	cf 91       	pop	r28
    2fe0:	08 95       	ret

00002fe2 <main>:
	MCUCR|= _BV(ISC11); //Falling edge interrupt INT1 (Hall sensor)
	GICR|=_BV(INT1); //External Interrupt Enable INT1
}
int main(void)
{
	presets();
    2fe2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <presets>
	if (!debugMode)main_screen();
    2fe6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <debugMode>
    2fea:	81 11       	cpse	r24, r1
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <main+0x10>
    2fee:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <main_screen>
	while(1){
		data_monitor();
    2ff2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <data_monitor>
		calculate_speed();
    2ff6:	0e 94 25 13 	call	0x264a	; 0x264a <calculate_speed>
		arrow_position_update();
    2ffa:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <arrow_position_update>
		if(!debugMode)signal_monitor();else debug_screen();
    2ffe:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <debugMode>
    3002:	81 11       	cpse	r24, r1
    3004:	03 c0       	rjmp	.+6      	; 0x300c <main+0x2a>
    3006:	0e 94 56 0f 	call	0x1eac	; 0x1eac <signal_monitor>
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <main+0x2e>
    300c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <debug_screen>
		if(button_monitor()) menu_screen();
    3010:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    3014:	88 23       	and	r24, r24
    3016:	69 f3       	breq	.-38     	; 0x2ff2 <main+0x10>
    3018:	0e 94 0f 18 	call	0x301e	; 0x301e <menu_screen>
    301c:	ea cf       	rjmp	.-44     	; 0x2ff2 <main+0x10>

0000301e <menu_screen>:
		}
	}
	uint8_t offset = 88;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
    301e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <menuItem.2796>
    3022:	86 30       	cpi	r24, 0x06	; 6
    3024:	54 f0       	brlt	.+20     	; 0x303a <menu_screen+0x1c>
    3026:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
    3030:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <menuItem.2796>
	if (menuItem < 0){page--;menuItem= 5;}
	if ((page == 2)&&(menuItem > 3)){page = 0; menuItem = 0;}
    3034:	82 30       	cpi	r24, 0x02	; 2
    3036:	d9 f4       	brne	.+54     	; 0x306e <menu_screen+0x50>
    3038:	24 c0       	rjmp	.+72     	; 0x3082 <menu_screen+0x64>
	}
	uint8_t offset = 88;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
	if (menuItem < 0){page--;menuItem= 5;}
    303a:	88 23       	and	r24, r24
    303c:	5c f4       	brge	.+22     	; 0x3054 <menu_screen+0x36>
    303e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
    3042:	81 50       	subi	r24, 0x01	; 1
    3044:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
    3048:	95 e0       	ldi	r25, 0x05	; 5
    304a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <menuItem.2796>
	if ((page == 2)&&(menuItem > 3)){page = 0; menuItem = 0;}
    304e:	82 30       	cpi	r24, 0x02	; 2
    3050:	71 f4       	brne	.+28     	; 0x306e <menu_screen+0x50>
    3052:	08 c0       	rjmp	.+16     	; 0x3064 <menu_screen+0x46>
    3054:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
    3058:	82 30       	cpi	r24, 0x02	; 2
    305a:	49 f4       	brne	.+18     	; 0x306e <menu_screen+0x50>
    305c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <menuItem.2796>
    3060:	84 30       	cpi	r24, 0x04	; 4
    3062:	7c f0       	brlt	.+30     	; 0x3082 <menu_screen+0x64>
    3064:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    3068:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <menuItem.2796>
    306c:	0a c0       	rjmp	.+20     	; 0x3082 <menu_screen+0x64>
	if (page < 0){page = 2;menuItem = 3;}
    306e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
    3072:	88 23       	and	r24, r24
    3074:	34 f4       	brge	.+12     	; 0x3082 <menu_screen+0x64>
    3076:	82 e0       	ldi	r24, 0x02	; 2
    3078:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <menuItem.2796>
	GLCD_Clear();
    3082:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	48 e0       	ldi	r20, 0x08	; 8
    308a:	65 e0       	ldi	r22, 0x05	; 5
    308c:	80 ea       	ldi	r24, 0xA0	; 160
    308e:	9b e0       	ldi	r25, 0x0B	; 11
    3090:	0e 94 99 21 	call	0x4332	; 0x4332 <GLCD_SetFont>
	if(page==0){
    3094:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
    3098:	81 11       	cpse	r24, r1
    309a:	89 c0       	rjmp	.+274    	; 0x31ae <menu_screen+0x190>
		//item 0
		GLCD_GotoX(10);
    309c:	8a e0       	ldi	r24, 0x0A	; 10
    309e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(1);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Dial PWM");
    30a8:	8f eb       	ldi	r24, 0xBF	; 191
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    30b0:	88 e5       	ldi	r24, 0x58	; 88
    30b2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(pwmDialLight);
    30b6:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <pwmDialLight>
    30ba:	70 91 bc 02 	lds	r23, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 1
		GLCD_GotoX(10);
    30c6:	8a e0       	ldi	r24, 0x0A	; 10
    30c8:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(2);
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Arrow PWM");
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    30da:	88 e5       	ldi	r24, 0x58	; 88
    30dc:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(pwmArrowLight);
    30e0:	60 91 b4 02 	lds	r22, 0x02B4	; 0x8002b4 <pwmArrowLight>
    30e4:	70 91 b5 02 	lds	r23, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 2
		GLCD_GotoX(10);
    30f0:	8a e0       	ldi	r24, 0x0A	; 10
    30f2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(3);
    30f6:	83 e0       	ldi	r24, 0x03	; 3
    30f8:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Wheel diam.");
    30fc:	82 ed       	ldi	r24, 0xD2	; 210
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    3104:	88 e5       	ldi	r24, 0x58	; 88
    3106:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintDouble(wheelDiameter,1000);
    310a:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <wheelDiameter>
    310e:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <wheelDiameter+0x1>
    3112:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <wheelDiameter+0x2>
    3116:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <wheelDiameter+0x3>
    311a:	28 ee       	ldi	r18, 0xE8	; 232
    311c:	33 e0       	ldi	r19, 0x03	; 3
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
		//item 3
		GLCD_GotoX(10);
    3126:	8a e0       	ldi	r24, 0x0A	; 10
    3128:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(4);
    312c:	84 e0       	ldi	r24, 0x04	; 4
    312e:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Gear ratio");
    3132:	8e ed       	ldi	r24, 0xDE	; 222
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    313a:	88 e5       	ldi	r24, 0x58	; 88
    313c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintDouble(gearRatio,1000);
    3140:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <gearRatio>
    3144:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <gearRatio+0x1>
    3148:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <gearRatio+0x2>
    314c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <gearRatio+0x3>
    3150:	28 ee       	ldi	r18, 0xE8	; 232
    3152:	33 e0       	ldi	r19, 0x03	; 3
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
		//item 4
		GLCD_GotoX(10);
    315c:	8a e0       	ldi	r24, 0x0A	; 10
    315e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(5);
    3162:	85 e0       	ldi	r24, 0x05	; 5
    3164:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Magnets");
    3168:	89 ee       	ldi	r24, 0xE9	; 233
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    3170:	88 e5       	ldi	r24, 0x58	; 88
    3172:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(magnetsOnWheel);
    3176:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <magnetsOnWheel>
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 5
		GLCD_GotoX(10);
    3184:	8a e0       	ldi	r24, 0x0A	; 10
    3186:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(6);
    318a:	86 e0       	ldi	r24, 0x06	; 6
    318c:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Step mode");
    3190:	81 ef       	ldi	r24, 0xF1	; 241
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    3198:	88 e5       	ldi	r24, 0x58	; 88
    319a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(stepMode);
    319e:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <stepMode>
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
    31ac:	aa c0       	rjmp	.+340    	; 0x3302 <menu_screen+0x2e4>
	}
	else if (page==1){
    31ae:	81 30       	cpi	r24, 0x01	; 1
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <menu_screen+0x196>
    31b2:	7a c0       	rjmp	.+244    	; 0x32a8 <menu_screen+0x28a>
		//item 6
		GLCD_GotoX(10);
    31b4:	8a e0       	ldi	r24, 0x0A	; 10
    31b6:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(1);
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Max speed");
    31c0:	8b ef       	ldi	r24, 0xFB	; 251
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    31c8:	88 e5       	ldi	r24, 0x58	; 88
    31ca:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(maxSpeedOnDial);
    31ce:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <maxSpeedOnDial>
    31d2:	70 e0       	ldi	r23, 0x00	; 0
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 7
		GLCD_GotoX(10);
    31dc:	8a e0       	ldi	r24, 0x0A	; 10
    31de:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(2);
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Deg/kmh");
    31e8:	85 e0       	ldi	r24, 0x05	; 5
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    31f0:	88 e5       	ldi	r24, 0x58	; 88
    31f2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintDouble(degreesPerKmh,1000);
    31f6:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <degreesPerKmh>
    31fa:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    31fe:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    3202:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    3206:	28 ee       	ldi	r18, 0xE8	; 232
    3208:	33 e0       	ldi	r19, 0x03	; 3
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	0e 94 c8 24 	call	0x4990	; 0x4990 <GLCD_PrintDouble>
		//item 8
		GLCD_GotoX(10);
    3212:	8a e0       	ldi	r24, 0x0A	; 10
    3214:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(3);
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("SM steps");
    321e:	8d e0       	ldi	r24, 0x0D	; 13
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    3226:	88 e5       	ldi	r24, 0x58	; 88
    3228:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(stepperMotorSteps);
    322c:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    3230:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 9
		GLCD_GotoX(10);
    323c:	8a e0       	ldi	r24, 0x0A	; 10
    323e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(4);
    3242:	84 e0       	ldi	r24, 0x04	; 4
    3244:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Step interv.");
    3248:	86 e1       	ldi	r24, 0x16	; 22
    324a:	91 e0       	ldi	r25, 0x01	; 1
    324c:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    3250:	88 e5       	ldi	r24, 0x58	; 88
    3252:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(stepInterval);
    3256:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <stepInterval>
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 10
		GLCD_GotoX(10);
    3264:	8a e0       	ldi	r24, 0x0A	; 10
    3266:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(5);
    326a:	85 e0       	ldi	r24, 0x05	; 5
    326c:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("LCD contrast");
    3270:	83 e2       	ldi	r24, 0x23	; 35
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    3278:	88 e5       	ldi	r24, 0x58	; 88
    327a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_PrintInteger(lcdContrast);
    327e:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <lcdContrast>
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		//item 11
		GLCD_GotoX(10);
    328c:	8a e0       	ldi	r24, 0x0A	; 10
    328e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(6);
    3292:	86 e0       	ldi	r24, 0x06	; 6
    3294:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Debug mode");
    3298:	80 e3       	ldi	r24, 0x30	; 48
    329a:	91 e0       	ldi	r25, 0x01	; 1
    329c:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    32a0:	88 e5       	ldi	r24, 0x58	; 88
    32a2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
    32a6:	2d c0       	rjmp	.+90     	; 0x3302 <menu_screen+0x2e4>
	}
	else if (page==2){
    32a8:	82 30       	cpi	r24, 0x02	; 2
    32aa:	59 f5       	brne	.+86     	; 0x3302 <menu_screen+0x2e4>
		//item 12
		GLCD_GotoX(10);
    32ac:	8a e0       	ldi	r24, 0x0A	; 10
    32ae:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(1);
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Calibrate arrow");
    32b8:	8b e3       	ldi	r24, 0x3B	; 59
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		GLCD_GotoX(offset);
    32c0:	88 e5       	ldi	r24, 0x58	; 88
    32c2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		//item 13
		GLCD_GotoX(10);
    32c6:	8a e0       	ldi	r24, 0x0A	; 10
    32c8:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(2);
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Odometer reset");
    32d2:	8b e4       	ldi	r24, 0x4B	; 75
    32d4:	91 e0       	ldi	r25, 0x01	; 1
    32d6:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		//item 14
		GLCD_GotoX(10);
    32da:	8a e0       	ldi	r24, 0x0A	; 10
    32dc:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(3);
    32e0:	83 e0       	ldi	r24, 0x03	; 3
    32e2:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Load defaults");
    32e6:	8a e5       	ldi	r24, 0x5A	; 90
    32e8:	91 e0       	ldi	r25, 0x01	; 1
    32ea:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
		//item 15
		GLCD_GotoX(10);
    32ee:	8a e0       	ldi	r24, 0x0A	; 10
    32f0:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
		GLCD_GotoLine(4);
    32f4:	84 e0       	ldi	r24, 0x04	; 4
    32f6:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
		GLCD_PrintString("Exit");
    32fa:	80 e8       	ldi	r24, 0x80	; 128
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	}
	GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    3302:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <menuItem.2796>
    3306:	66 0f       	add	r22, r22
    3308:	66 0f       	add	r22, r22
    330a:	66 0f       	add	r22, r22
    330c:	2f e0       	ldi	r18, 0x0F	; 15
    330e:	26 0f       	add	r18, r22
    3310:	69 5f       	subi	r22, 0xF9	; 249
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	0e 94 c2 20 	call	0x4184	; 0x4184 <GLCD_InvertRect>
	GLCD_Render();
    331a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
	while (button_monitor());
    331e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    3322:	81 11       	cpse	r24, r1
    3324:	fc cf       	rjmp	.-8      	; 0x331e <menu_screen+0x300>
	uint8_t currentButton = 0;
	uint16_t newValue = 0;
	while(1){
		currentButton = button_monitor();
    3326:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
		if(currentButton){
    332a:	88 23       	and	r24, r24
    332c:	e1 f3       	breq	.-8      	; 0x3326 <menu_screen+0x308>
			if (currentButton == 1){
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	09 f0       	breq	.+2      	; 0x3334 <menu_screen+0x316>
    3332:	bc c2       	rjmp	.+1400   	; 0x38ac <menu_screen+0x88e>
				switch(menuItem+6*page)		{
    3334:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
    3338:	08 2e       	mov	r0, r24
    333a:	00 0c       	add	r0, r0
    333c:	99 0b       	sbc	r25, r25
    333e:	fc 01       	movw	r30, r24
    3340:	ee 0f       	add	r30, r30
    3342:	ff 1f       	adc	r31, r31
    3344:	e8 0f       	add	r30, r24
    3346:	f9 1f       	adc	r31, r25
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <menuItem.2796>
    3350:	e8 0f       	add	r30, r24
    3352:	f1 1d       	adc	r31, r1
    3354:	87 fd       	sbrc	r24, 7
    3356:	fa 95       	dec	r31
    3358:	e0 31       	cpi	r30, 0x10	; 16
    335a:	f1 05       	cpc	r31, r1
    335c:	08 f0       	brcs	.+2      	; 0x3360 <menu_screen+0x342>
    335e:	b5 c2       	rjmp	.+1386   	; 0x38ca <menu_screen+0x8ac>
    3360:	e6 5d       	subi	r30, 0xD6	; 214
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__tablejump2__>
					case 0:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_DIAL_MIN,pwmDialLight,0,"Dial light PWM");
    3368:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <pwmDialLight>
    336c:	50 91 bc 02 	lds	r21, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    3370:	08 e6       	ldi	r16, 0x68	; 104
    3372:	11 e0       	ldi	r17, 0x01	; 1
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	94 e0       	ldi	r25, 0x04	; 4
    337e:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=pwmDialLight){
    3382:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <pwmDialLight>
    3386:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    338a:	82 17       	cp	r24, r18
    338c:	93 07       	cpc	r25, r19
    338e:	09 f4       	brne	.+2      	; 0x3392 <menu_screen+0x374>
    3390:	9c c2       	rjmp	.+1336   	; 0x38ca <menu_screen+0x8ac>
							pwmDialLight = newValue;
    3392:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pwmDialLight+0x1>
    3396:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pwmDialLight>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	64 e0       	ldi	r22, 0x04	; 4
    339e:	88 e0       	ldi	r24, 0x08	; 8
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
							OCR1B = pwmDialLight;
    33a6:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <pwmDialLight>
    33aa:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <pwmDialLight+0x1>
    33ae:	99 bd       	out	0x29, r25	; 41
    33b0:	88 bd       	out	0x28, r24	; 40
    33b2:	8b c2       	rjmp	.+1302   	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 1:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_ARROW_MIN,pwmArrowLight,0,"Arrow light PWM");
    33b4:	40 91 b4 02 	lds	r20, 0x02B4	; 0x8002b4 <pwmArrowLight>
    33b8:	50 91 b5 02 	lds	r21, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    33bc:	07 e7       	ldi	r16, 0x77	; 119
    33be:	11 e0       	ldi	r17, 0x01	; 1
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	94 e0       	ldi	r25, 0x04	; 4
    33ca:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=pwmArrowLight){
    33ce:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <pwmArrowLight>
    33d2:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    33d6:	82 17       	cp	r24, r18
    33d8:	93 07       	cpc	r25, r19
    33da:	09 f4       	brne	.+2      	; 0x33de <menu_screen+0x3c0>
    33dc:	76 c2       	rjmp	.+1260   	; 0x38ca <menu_screen+0x8ac>
							pwmArrowLight = newValue;
    33de:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <pwmArrowLight+0x1>
    33e2:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <pwmArrowLight>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	64 e0       	ldi	r22, 0x04	; 4
    33ea:	88 e0       	ldi	r24, 0x08	; 8
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
							OCR1A = pwmArrowLight;
    33f2:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <pwmArrowLight>
    33f6:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <pwmArrowLight+0x1>
    33fa:	9b bd       	out	0x2b, r25	; 43
    33fc:	8a bd       	out	0x2a, r24	; 42
    33fe:	65 c2       	rjmp	.+1226   	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 2:
					{
						newValue = set_value(WHEEL_DIAMETER_MAX*1000,WHEEL_DIAMETER_MIN*1000,wheelDiameter*1000,3,"Wheel Diameter (m)");
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	4a e7       	ldi	r20, 0x7A	; 122
    3406:	54 e4       	ldi	r21, 0x44	; 68
    3408:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <wheelDiameter>
    340c:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <wheelDiameter+0x1>
    3410:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <wheelDiameter+0x2>
    3414:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <wheelDiameter+0x3>
    3418:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    341c:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    3420:	07 e8       	ldi	r16, 0x87	; 135
    3422:	11 e0       	ldi	r17, 0x01	; 1
    3424:	23 e0       	ldi	r18, 0x03	; 3
    3426:	ab 01       	movw	r20, r22
    3428:	64 e6       	ldi	r22, 0x64	; 100
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	80 ed       	ldi	r24, 0xD0	; 208
    342e:	97 e0       	ldi	r25, 0x07	; 7
    3430:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=wheelDiameter*1000){
    3434:	bc 01       	movw	r22, r24
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    343e:	6b 01       	movw	r12, r22
    3440:	7c 01       	movw	r14, r24
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	4a e7       	ldi	r20, 0x7A	; 122
    3448:	54 e4       	ldi	r21, 0x44	; 68
    344a:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <wheelDiameter>
    344e:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <wheelDiameter+0x1>
    3452:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <wheelDiameter+0x2>
    3456:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <wheelDiameter+0x3>
    345a:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    345e:	9b 01       	movw	r18, r22
    3460:	ac 01       	movw	r20, r24
    3462:	c7 01       	movw	r24, r14
    3464:	b6 01       	movw	r22, r12
    3466:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    346a:	88 23       	and	r24, r24
    346c:	09 f4       	brne	.+2      	; 0x3470 <menu_screen+0x452>
    346e:	2d c2       	rjmp	.+1114   	; 0x38ca <menu_screen+0x8ac>
							wheelDiameter = newValue/1000.0;
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4a e7       	ldi	r20, 0x7A	; 122
    3476:	54 e4       	ldi	r21, 0x44	; 68
    3478:	c7 01       	movw	r24, r14
    347a:	b6 01       	movw	r22, r12
    347c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    3480:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <wheelDiameter>
    3484:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <wheelDiameter+0x1>
    3488:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <wheelDiameter+0x2>
    348c:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <wheelDiameter+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	88 e0       	ldi	r24, 0x08	; 8
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    349c:	16 c2       	rjmp	.+1068   	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 3:
					{
						newValue = set_value(GEAR_RATIO_MAX*1000,GEAR_RATIO_MIN*1000,gearRatio*1000,3,"Gear ratio");
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	4a e7       	ldi	r20, 0x7A	; 122
    34a4:	54 e4       	ldi	r21, 0x44	; 68
    34a6:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <gearRatio>
    34aa:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <gearRatio+0x1>
    34ae:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <gearRatio+0x2>
    34b2:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <gearRatio+0x3>
    34b6:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    34ba:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    34be:	0e ed       	ldi	r16, 0xDE	; 222
    34c0:	10 e0       	ldi	r17, 0x00	; 0
    34c2:	23 e0       	ldi	r18, 0x03	; 3
    34c4:	ab 01       	movw	r20, r22
    34c6:	64 e6       	ldi	r22, 0x64	; 100
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	88 ee       	ldi	r24, 0xE8	; 232
    34cc:	93 e0       	ldi	r25, 0x03	; 3
    34ce:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=gearRatio*1000){
    34d2:	bc 01       	movw	r22, r24
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    34dc:	6b 01       	movw	r12, r22
    34de:	7c 01       	movw	r14, r24
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	4a e7       	ldi	r20, 0x7A	; 122
    34e6:	54 e4       	ldi	r21, 0x44	; 68
    34e8:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <gearRatio>
    34ec:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <gearRatio+0x1>
    34f0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <gearRatio+0x2>
    34f4:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <gearRatio+0x3>
    34f8:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	c7 01       	movw	r24, r14
    3502:	b6 01       	movw	r22, r12
    3504:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    3508:	88 23       	and	r24, r24
    350a:	09 f4       	brne	.+2      	; 0x350e <menu_screen+0x4f0>
    350c:	de c1       	rjmp	.+956    	; 0x38ca <menu_screen+0x8ac>
							gearRatio = newValue/1000.0;
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	4a e7       	ldi	r20, 0x7A	; 122
    3514:	54 e4       	ldi	r21, 0x44	; 68
    3516:	c7 01       	movw	r24, r14
    3518:	b6 01       	movw	r22, r12
    351a:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    351e:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <gearRatio>
    3522:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <gearRatio+0x1>
    3526:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <gearRatio+0x2>
    352a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <gearRatio+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    352e:	41 e0       	ldi	r20, 0x01	; 1
    3530:	64 e0       	ldi	r22, 0x04	; 4
    3532:	88 e0       	ldi	r24, 0x08	; 8
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    353a:	c7 c1       	rjmp	.+910    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 4:
					{
						newValue = set_value(MAGNETS_ON_WHEEL_MAX,MAGNETS_ON_WHEEL_MIN,magnetsOnWheel,0,"Magnets on wheel");
    353c:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <magnetsOnWheel>
    3540:	50 e0       	ldi	r21, 0x00	; 0
    3542:	0a e9       	ldi	r16, 0x9A	; 154
    3544:	11 e0       	ldi	r17, 0x01	; 1
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	61 e0       	ldi	r22, 0x01	; 1
    354a:	70 e0       	ldi	r23, 0x00	; 0
    354c:	80 e1       	ldi	r24, 0x10	; 16
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=magnetsOnWheel){
    3554:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <magnetsOnWheel>
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	82 17       	cp	r24, r18
    355c:	93 07       	cpc	r25, r19
    355e:	09 f4       	brne	.+2      	; 0x3562 <menu_screen+0x544>
    3560:	b4 c1       	rjmp	.+872    	; 0x38ca <menu_screen+0x8ac>
							magnetsOnWheel = newValue;
    3562:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <magnetsOnWheel>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	64 e0       	ldi	r22, 0x04	; 4
    356a:	88 e0       	ldi	r24, 0x08	; 8
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    3572:	ab c1       	rjmp	.+854    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 5:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_MODE_MIN,stepMode,0,"1-full, 2-half");
    3574:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <stepMode>
    3578:	50 e0       	ldi	r21, 0x00	; 0
    357a:	0b ea       	ldi	r16, 0xAB	; 171
    357c:	11 e0       	ldi	r17, 0x01	; 1
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	61 e0       	ldi	r22, 0x01	; 1
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	8f ef       	ldi	r24, 0xFF	; 255
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=stepMode){
    358c:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <stepMode>
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	82 17       	cp	r24, r18
    3594:	93 07       	cpc	r25, r19
    3596:	09 f4       	brne	.+2      	; 0x359a <menu_screen+0x57c>
    3598:	98 c1       	rjmp	.+816    	; 0x38ca <menu_screen+0x8ac>
							stepMode = newValue;
    359a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <stepMode>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    359e:	41 e0       	ldi	r20, 0x01	; 1
    35a0:	64 e0       	ldi	r22, 0x04	; 4
    35a2:	88 e0       	ldi	r24, 0x08	; 8
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    35aa:	8f c1       	rjmp	.+798    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 6:
					{
						newValue = set_value(MAX_SPEED_MAX,MAX_SPEED_MIN,maxSpeedOnDial,0,"Maximum speed");
    35ac:	40 91 ba 02 	lds	r20, 0x02BA	; 0x8002ba <maxSpeedOnDial>
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	0a eb       	ldi	r16, 0xBA	; 186
    35b4:	11 e0       	ldi	r17, 0x01	; 1
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	64 e1       	ldi	r22, 0x14	; 20
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	8f ef       	ldi	r24, 0xFF	; 255
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=maxSpeedOnDial){
    35c4:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <maxSpeedOnDial>
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	82 17       	cp	r24, r18
    35cc:	93 07       	cpc	r25, r19
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <menu_screen+0x5b4>
    35d0:	7c c1       	rjmp	.+760    	; 0x38ca <menu_screen+0x8ac>
							maxSpeedOnDial = newValue;
    35d2:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <maxSpeedOnDial>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	64 e0       	ldi	r22, 0x04	; 4
    35da:	88 e0       	ldi	r24, 0x08	; 8
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    35e2:	73 c1       	rjmp	.+742    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 7:
					{
						newValue = set_value(DEGREES_PER_KMH_MAX*1000,DEGREES_PER_KMH_MIN*1000,degreesPerKmh*1000,3,"Degrees per km/h");
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	4a e7       	ldi	r20, 0x7A	; 122
    35ea:	54 e4       	ldi	r21, 0x44	; 68
    35ec:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <degreesPerKmh>
    35f0:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    35f4:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    35f8:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    35fc:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    3600:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    3604:	08 ec       	ldi	r16, 0xC8	; 200
    3606:	11 e0       	ldi	r17, 0x01	; 1
    3608:	23 e0       	ldi	r18, 0x03	; 3
    360a:	ab 01       	movw	r20, r22
    360c:	64 e6       	ldi	r22, 0x64	; 100
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	88 e8       	ldi	r24, 0x88	; 136
    3612:	93 e1       	ldi	r25, 0x13	; 19
    3614:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=degreesPerKmh*1000){
    3618:	bc 01       	movw	r22, r24
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    3622:	6b 01       	movw	r12, r22
    3624:	7c 01       	movw	r14, r24
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	4a e7       	ldi	r20, 0x7A	; 122
    362c:	54 e4       	ldi	r21, 0x44	; 68
    362e:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <degreesPerKmh>
    3632:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <degreesPerKmh+0x1>
    3636:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <degreesPerKmh+0x2>
    363a:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <degreesPerKmh+0x3>
    363e:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    3642:	9b 01       	movw	r18, r22
    3644:	ac 01       	movw	r20, r24
    3646:	c7 01       	movw	r24, r14
    3648:	b6 01       	movw	r22, r12
    364a:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    364e:	88 23       	and	r24, r24
    3650:	09 f4       	brne	.+2      	; 0x3654 <menu_screen+0x636>
    3652:	3b c1       	rjmp	.+630    	; 0x38ca <menu_screen+0x8ac>
							degreesPerKmh = newValue/1000.0;
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	4a e7       	ldi	r20, 0x7A	; 122
    365a:	54 e4       	ldi	r21, 0x44	; 68
    365c:	c7 01       	movw	r24, r14
    365e:	b6 01       	movw	r22, r12
    3660:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__divsf3>
    3664:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <degreesPerKmh>
    3668:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <degreesPerKmh+0x1>
    366c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <degreesPerKmh+0x2>
    3670:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <degreesPerKmh+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3674:	41 e0       	ldi	r20, 0x01	; 1
    3676:	64 e0       	ldi	r22, 0x04	; 4
    3678:	88 e0       	ldi	r24, 0x08	; 8
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    3680:	24 c1       	rjmp	.+584    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 8:
					{
						newValue = set_value(STEPPER_MOTOR_STEPS_MAX,STEPPER_MOTOR_STEPS_MIN,stepperMotorSteps,0,"Stepper motor steps");
    3682:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    3686:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    368a:	09 ed       	ldi	r16, 0xD9	; 217
    368c:	11 e0       	ldi	r17, 0x01	; 1
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	60 e1       	ldi	r22, 0x10	; 16
    3692:	70 e0       	ldi	r23, 0x00	; 0
    3694:	80 e9       	ldi	r24, 0x90	; 144
    3696:	91 e0       	ldi	r25, 0x01	; 1
    3698:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=stepperMotorSteps){
    369c:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <stepperMotorSteps>
    36a0:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <stepperMotorSteps+0x1>
    36a4:	82 17       	cp	r24, r18
    36a6:	93 07       	cpc	r25, r19
    36a8:	09 f4       	brne	.+2      	; 0x36ac <menu_screen+0x68e>
    36aa:	0f c1       	rjmp	.+542    	; 0x38ca <menu_screen+0x8ac>
							stepperMotorSteps = newValue;
    36ac:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <stepperMotorSteps+0x1>
    36b0:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <stepperMotorSteps>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    36b4:	41 e0       	ldi	r20, 0x01	; 1
    36b6:	64 e0       	ldi	r22, 0x04	; 4
    36b8:	88 e0       	ldi	r24, 0x08	; 8
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    36c0:	04 c1       	rjmp	.+520    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 9:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_INTERVAL_MIN,stepInterval,0,"Step interval X64us");
    36c2:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <stepInterval>
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	0d ee       	ldi	r16, 0xED	; 237
    36ca:	11 e0       	ldi	r17, 0x01	; 1
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	62 e3       	ldi	r22, 0x32	; 50
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	8f ef       	ldi	r24, 0xFF	; 255
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=stepInterval){
    36da:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <stepInterval>
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	82 17       	cp	r24, r18
    36e2:	93 07       	cpc	r25, r19
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <menu_screen+0x6ca>
    36e6:	f1 c0       	rjmp	.+482    	; 0x38ca <menu_screen+0x8ac>
							stepInterval = newValue;
    36e8:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <stepInterval>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    36ec:	41 e0       	ldi	r20, 0x01	; 1
    36ee:	64 e0       	ldi	r22, 0x04	; 4
    36f0:	88 e0       	ldi	r24, 0x08	; 8
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    36f8:	e8 c0       	rjmp	.+464    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 10:
					{
						newValue = set_value(LCD_CONTRAST_MAX,LCD_CONTRAST_MIN,lcdContrast,0,"LCD contrast");
    36fa:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <lcdContrast>
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	03 e2       	ldi	r16, 0x23	; 35
    3702:	11 e0       	ldi	r17, 0x01	; 1
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	62 e3       	ldi	r22, 0x32	; 50
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	8f ef       	ldi	r24, 0xFF	; 255
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 42 14 	call	0x2884	; 0x2884 <set_value>
						if (newValue!=lcdContrast){
    3712:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <lcdContrast>
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	82 17       	cp	r24, r18
    371a:	93 07       	cpc	r25, r19
    371c:	09 f4       	brne	.+2      	; 0x3720 <menu_screen+0x702>
    371e:	d5 c0       	rjmp	.+426    	; 0x38ca <menu_screen+0x8ac>
							lcdContrast = newValue;
    3720:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <lcdContrast>
							GLCD_SetContrast(lcdContrast);
    3724:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <GLCD_SetContrast>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3728:	41 e0       	ldi	r20, 0x01	; 1
    372a:	64 e0       	ldi	r22, 0x04	; 4
    372c:	88 e0       	ldi	r24, 0x08	; 8
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
    3734:	ca c0       	rjmp	.+404    	; 0x38ca <menu_screen+0x8ac>
						}
						break;
					}
					case 11:
					{
						debugMode = debugMode^_BV(0);
    3736:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <debugMode>
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	89 27       	eor	r24, r25
    373e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <debugMode>
						while (button_monitor());
    3742:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    3746:	81 11       	cpse	r24, r1
    3748:	fc cf       	rjmp	.-8      	; 0x3742 <menu_screen+0x724>
						main();
    374a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <main>
						break;
					}
					case 12:
					{
						arrow_calibration();
    374e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <arrow_calibration>
						break;
    3752:	bb c0       	rjmp	.+374    	; 0x38ca <menu_screen+0x8ac>
					}
					case 13:
					{
 						if(yes_no_menu("RESET",45,"ODOMETER?",34)){
    3754:	22 e2       	ldi	r18, 0x22	; 34
    3756:	41 e0       	ldi	r20, 0x01	; 1
    3758:	52 e0       	ldi	r21, 0x02	; 2
    375a:	6d e2       	ldi	r22, 0x2D	; 45
    375c:	8b e0       	ldi	r24, 0x0B	; 11
    375e:	92 e0       	ldi	r25, 0x02	; 2
    3760:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <yes_no_menu.2784>
    3764:	88 23       	and	r24, r24
    3766:	09 f4       	brne	.+2      	; 0x376a <menu_screen+0x74c>
    3768:	b0 c0       	rjmp	.+352    	; 0x38ca <menu_screen+0x8ac>
							GLCD_Clear();
    376a:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
							GLCD_GotoLine(1);
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
							GLCD_GotoX(6);
    3774:	86 e0       	ldi	r24, 0x06	; 6
    3776:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
							GLCD_PrintString("RESETTING ODOMETER");
    377a:	81 e1       	ldi	r24, 0x11	; 17
    377c:	92 e0       	ldi	r25, 0x02	; 2
    377e:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
														
							GLCD_GotoLine(3);
    3782:	83 e0       	ldi	r24, 0x03	; 3
    3784:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
							GLCD_GotoX(2);
    3788:	82 e0       	ldi	r24, 0x02	; 2
    378a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
							GLCD_PrintString("Cells cleared");
    378e:	84 e2       	ldi	r24, 0x24	; 36
    3790:	92 e0       	ldi	r25, 0x02	; 2
    3792:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
							GLCD_Render();
    3796:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
							//odometer reset
							milage = 0;
    379a:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <milage>
    379e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <milage+0x1>
    37a2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <milage+0x2>
    37a6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <milage+0x3>
							odometerCurrentAddress = 0;
    37aa:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <odometerCurrentAddress>
							sensorActations = 0;
    37ae:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <sensorActations+0x1>
    37b2:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <sensorActations>
    37b6:	c1 2c       	mov	r12, r1
    37b8:	d1 2c       	mov	r13, r1
    37ba:	76 01       	movw	r14, r12
    37bc:	c3 94       	inc	r12
							for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
								eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    37be:	43 e0       	ldi	r20, 0x03	; 3
    37c0:	64 e0       	ldi	r22, 0x04	; 4
    37c2:	80 e8       	ldi	r24, 0x80	; 128
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
								GLCD_GotoX(83);
    37ca:	83 e5       	ldi	r24, 0x53	; 83
    37cc:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
								GLCD_PrintInteger(i+1);
    37d0:	c7 01       	movw	r24, r14
    37d2:	b6 01       	movw	r22, r12
    37d4:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
								GLCD_PrintString("/");
    37d8:	82 e3       	ldi	r24, 0x32	; 50
    37da:	92 e0       	ldi	r25, 0x02	; 2
    37dc:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
								GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
    37e0:	69 e1       	ldi	r22, 0x19	; 25
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
								GLCD_Render();
    37ec:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
    37f0:	8f ef       	ldi	r24, 0xFF	; 255
    37f2:	c8 1a       	sub	r12, r24
    37f4:	d8 0a       	sbc	r13, r24
    37f6:	e8 0a       	sbc	r14, r24
    37f8:	f8 0a       	sbc	r15, r24
							GLCD_Render();
							//odometer reset
							milage = 0;
							odometerCurrentAddress = 0;
							sensorActations = 0;
							for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    37fa:	8a e1       	ldi	r24, 0x1A	; 26
    37fc:	c8 16       	cp	r12, r24
    37fe:	d1 04       	cpc	r13, r1
    3800:	e1 04       	cpc	r14, r1
    3802:	f1 04       	cpc	r15, r1
    3804:	e1 f6       	brne	.-72     	; 0x37be <menu_screen+0x7a0>
								GLCD_PrintInteger(i+1);
								GLCD_PrintString("/");
								GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
								GLCD_Render();
							}
							odometerCurrentAddress = 0;
    3806:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <odometerCurrentAddress>
							GLCD_GotoLine(6);
    380a:	86 e0       	ldi	r24, 0x06	; 6
    380c:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
							GLCD_GotoX(45);
    3810:	8d e2       	ldi	r24, 0x2D	; 45
    3812:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
							GLCD_PrintString("DONE!");
    3816:	84 e3       	ldi	r24, 0x34	; 52
    3818:	92 e0       	ldi	r25, 0x02	; 2
    381a:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
							GLCD_Render();
    381e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
							while(button_monitor());
    3822:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    3826:	81 11       	cpse	r24, r1
    3828:	fc cf       	rjmp	.-8      	; 0x3822 <menu_screen+0x804>
							while(!button_monitor());
    382a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    382e:	88 23       	and	r24, r24
    3830:	e1 f3       	breq	.-8      	; 0x382a <menu_screen+0x80c>
    3832:	4b c0       	rjmp	.+150    	; 0x38ca <menu_screen+0x8ac>
						break;
					}
					case 14:
					{
					//load defaults
						if (yes_no_menu("RESTORE",40,"DEFAULT values?",20)){
    3834:	24 e1       	ldi	r18, 0x14	; 20
    3836:	4a e3       	ldi	r20, 0x3A	; 58
    3838:	52 e0       	ldi	r21, 0x02	; 2
    383a:	68 e2       	ldi	r22, 0x28	; 40
    383c:	8a e4       	ldi	r24, 0x4A	; 74
    383e:	92 e0       	ldi	r25, 0x02	; 2
    3840:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <yes_no_menu.2784>
    3844:	88 23       	and	r24, r24
    3846:	09 f4       	brne	.+2      	; 0x384a <menu_screen+0x82c>
    3848:	40 c0       	rjmp	.+128    	; 0x38ca <menu_screen+0x8ac>
							GLCD_Clear();
    384a:	0e 94 b9 20 	call	0x4172	; 0x4172 <GLCD_Clear>
							GLCD_GotoLine(3);
    384e:	83 e0       	ldi	r24, 0x03	; 3
    3850:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
							GLCD_GotoX(8);
    3854:	88 e0       	ldi	r24, 0x08	; 8
    3856:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
							GLCD_PrintString("LOADING DEFAULTS...");
    385a:	82 e5       	ldi	r24, 0x52	; 82
    385c:	92 e0       	ldi	r25, 0x02	; 2
    385e:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
							GLCD_Render();
    3862:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
							set_default_values();
    3866:	0e 94 aa 0b 	call	0x1754	; 0x1754 <set_default_values>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    386a:	41 e0       	ldi	r20, 0x01	; 1
    386c:	64 e0       	ldi	r22, 0x04	; 4
    386e:	88 e0       	ldi	r24, 0x08	; 8
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 76 10 	call	0x20ec	; 0x20ec <eep_operations>
							GLCD_GotoLine(5);
    3876:	85 e0       	ldi	r24, 0x05	; 5
    3878:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <GLCD_GotoLine>
							GLCD_GotoX(45);
    387c:	8d e2       	ldi	r24, 0x2D	; 45
    387e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
							GLCD_PrintString("DONE!");
    3882:	84 e3       	ldi	r24, 0x34	; 52
    3884:	92 e0       	ldi	r25, 0x02	; 2
    3886:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
							GLCD_Render();
    388a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <GLCD_Render>
							while(button_monitor());
    388e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    3892:	81 11       	cpse	r24, r1
    3894:	fc cf       	rjmp	.-8      	; 0x388e <menu_screen+0x870>
							while(!button_monitor());
    3896:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    389a:	88 23       	and	r24, r24
    389c:	e1 f3       	breq	.-8      	; 0x3896 <menu_screen+0x878>
    389e:	15 c0       	rjmp	.+42     	; 0x38ca <menu_screen+0x8ac>
						break;
					}
					case 15:
					{
						//exit menu
						while (button_monitor());
    38a0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    38a4:	81 11       	cpse	r24, r1
    38a6:	fc cf       	rjmp	.-8      	; 0x38a0 <menu_screen+0x882>
						main();
    38a8:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <main>
					}
				}//
			}
		else if(currentButton == 2)	menuItem++;
    38ac:	82 30       	cpi	r24, 0x02	; 2
    38ae:	31 f4       	brne	.+12     	; 0x38bc <menu_screen+0x89e>
    38b0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <menuItem.2796>
    38b4:	8f 5f       	subi	r24, 0xFF	; 255
    38b6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <menuItem.2796>
    38ba:	07 c0       	rjmp	.+14     	; 0x38ca <menu_screen+0x8ac>
		else if(currentButton == 3)	menuItem--;
    38bc:	83 30       	cpi	r24, 0x03	; 3
    38be:	29 f4       	brne	.+10     	; 0x38ca <menu_screen+0x8ac>
    38c0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <menuItem.2796>
    38c4:	81 50       	subi	r24, 0x01	; 1
    38c6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <menuItem.2796>
		while (!button_monitor());
    38ca:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <button_monitor>
    38ce:	88 23       	and	r24, r24
    38d0:	e1 f3       	breq	.-8      	; 0x38ca <menu_screen+0x8ac>
		menu_screen();
    38d2:	0e 94 0f 18 	call	0x301e	; 0x301e <menu_screen>

000038d6 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    38d6:	66 95       	lsr	r22
    38d8:	66 95       	lsr	r22
    38da:	66 95       	lsr	r22
    38dc:	90 e8       	ldi	r25, 0x80	; 128
    38de:	69 9f       	mul	r22, r25
    38e0:	b0 01       	movw	r22, r0
    38e2:	11 24       	eor	r1, r1
    38e4:	68 0f       	add	r22, r24
    38e6:	71 1d       	adc	r23, r1
    38e8:	fb 01       	movw	r30, r22
    38ea:	e2 53       	subi	r30, 0x32	; 50
    38ec:	fd 4f       	sbci	r31, 0xFD	; 253
    38ee:	40 83       	st	Z, r20
    38f0:	08 95       	ret

000038f2 <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    38f2:	66 95       	lsr	r22
    38f4:	66 95       	lsr	r22
    38f6:	66 95       	lsr	r22
    38f8:	90 e8       	ldi	r25, 0x80	; 128
    38fa:	69 9f       	mul	r22, r25
    38fc:	b0 01       	movw	r22, r0
    38fe:	11 24       	eor	r1, r1
    3900:	68 0f       	add	r22, r24
    3902:	71 1d       	adc	r23, r1
    3904:	fb 01       	movw	r30, r22
    3906:	e2 53       	subi	r30, 0x32	; 50
    3908:	fd 4f       	sbci	r31, 0xFD	; 253
}
    390a:	80 81       	ld	r24, Z
    390c:	08 95       	ret

0000390e <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    390e:	ff 92       	push	r15
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	c8 2f       	mov	r28, r24
    391a:	06 2f       	mov	r16, r22
    391c:	17 2f       	mov	r17, r23
    391e:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    3920:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3924:	0e 94 42 25 	call	0x4a84	; 0x4a84 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    3928:	88 30       	cpi	r24, 0x08	; 8
    392a:	31 f0       	breq	.+12     	; 0x3938 <GLCD_Send+0x2a>
    392c:	80 31       	cpi	r24, 0x10	; 16
    392e:	21 f0       	breq	.+8      	; 0x3938 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__GLCD>
				break;
    3936:	33 c0       	rjmp	.+102    	; 0x399e <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    3938:	88 e7       	ldi	r24, 0x78	; 120
    393a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    393e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    3942:	88 31       	cpi	r24, 0x18	; 24
    3944:	31 f0       	breq	.+12     	; 0x3952 <GLCD_Send+0x44>
    3946:	80 32       	cpi	r24, 0x20	; 32
    3948:	21 f0       	breq	.+8      	; 0x3952 <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__GLCD>
				break;
    3950:	26 c0       	rjmp	.+76     	; 0x399e <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    3952:	8c 2f       	mov	r24, r28
    3954:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3958:	0e 94 42 25 	call	0x4a84	; 0x4a84 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    395c:	88 32       	cpi	r24, 0x28	; 40
    395e:	19 f4       	brne	.+6      	; 0x3966 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3960:	f1 10       	cpse	r15, r1
    3962:	07 c0       	rjmp	.+14     	; 0x3972 <GLCD_Send+0x64>
    3964:	1a c0       	rjmp	.+52     	; 0x399a <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3966:	80 33       	cpi	r24, 0x30	; 48
    3968:	d9 f3       	breq	.-10     	; 0x3960 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__GLCD>
				break;
    3970:	16 c0       	rjmp	.+44     	; 0x399e <GLCD_Send+0x90>
    3972:	c0 2f       	mov	r28, r16
    3974:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    3976:	8e 01       	movw	r16, r28
    3978:	0f 5f       	subi	r16, 0xFF	; 255
    397a:	1f 4f       	sbci	r17, 0xFF	; 255
    397c:	fa 94       	dec	r15
    397e:	0f 0d       	add	r16, r15
    3980:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    3982:	89 91       	ld	r24, Y+
    3984:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    3988:	0e 94 42 25 	call	0x4a84	; 0x4a84 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    398c:	88 32       	cpi	r24, 0x28	; 40
    398e:	11 f0       	breq	.+4      	; 0x3994 <GLCD_Send+0x86>
    3990:	80 33       	cpi	r24, 0x30	; 48
    3992:	19 f4       	brne	.+6      	; 0x399a <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3994:	c0 17       	cp	r28, r16
    3996:	d1 07       	cpc	r29, r17
    3998:	a1 f7       	brne	.-24     	; 0x3982 <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    399a:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    399e:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <TWI_EndTransmission>
}
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	ff 90       	pop	r15
    39ac:	08 95       	ret

000039ae <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	1f 92       	push	r1
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    39ba:	41 e0       	ldi	r20, 0x01	; 1
    39bc:	be 01       	movw	r22, r28
    39be:	6f 5f       	subi	r22, 0xFF	; 255
    39c0:	7f 4f       	sbci	r23, 0xFF	; 255
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_Send>
}
    39c8:	0f 90       	pop	r0
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	08 95       	ret

000039d0 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    39d4:	81 e2       	ldi	r24, 0x21	; 33
    39d6:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    39e0:	8f e7       	ldi	r24, 0x7F	; 127
    39e2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    39e6:	82 e2       	ldi	r24, 0x22	; 34
    39e8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    39f2:	87 e0       	ldi	r24, 0x07	; 7
    39f4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
    39f8:	c0 e0       	ldi	r28, 0x00	; 0
    39fa:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    39fc:	be 01       	movw	r22, r28
    39fe:	62 95       	swap	r22
    3a00:	72 95       	swap	r23
    3a02:	70 7f       	andi	r23, 0xF0	; 240
    3a04:	76 27       	eor	r23, r22
    3a06:	60 7f       	andi	r22, 0xF0	; 240
    3a08:	76 27       	eor	r23, r22
    3a0a:	62 53       	subi	r22, 0x32	; 50
    3a0c:	7d 4f       	sbci	r23, 0xFD	; 253
    3a0e:	40 e1       	ldi	r20, 0x10	; 16
    3a10:	80 e4       	ldi	r24, 0x40	; 64
    3a12:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_Send>
    3a16:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    3a18:	c0 34       	cpi	r28, 0x40	; 64
    3a1a:	d1 05       	cpc	r29, r1
    3a1c:	79 f7       	brne	.-34     	; 0x39fc <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	08 95       	ret

00003a24 <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    3a24:	cf 93       	push	r28
    3a26:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    3a28:	81 e8       	ldi	r24, 0x81	; 129
    3a2a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    3a2e:	8c 2f       	mov	r24, r28
    3a30:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
}
    3a34:	cf 91       	pop	r28
    3a36:	08 95       	ret

00003a38 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    3a38:	88 23       	and	r24, r24
    3a3a:	14 f0       	brlt	.+4      	; 0x3a40 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    3a3c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <__GLCD+0x1>
    3a40:	08 95       	ret

00003a42 <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    3a42:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    3a46:	90 34       	cpi	r25, 0x40	; 64
    3a48:	10 f4       	brcc	.+4      	; 0x3a4e <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    3a4a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__GLCD+0x2>
    3a4e:	08 95       	ret

00003a50 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    3a50:	cf 93       	push	r28
    3a52:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    3a54:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <GLCD_GotoX>
	GLCD_GotoY(Y);
    3a58:	8c 2f       	mov	r24, r28
    3a5a:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <GLCD_GotoY>
}
    3a5e:	cf 91       	pop	r28
    3a60:	08 95       	ret

00003a62 <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    3a62:	0e 94 38 25 	call	0x4a70	; 0x4a70 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    3a66:	8e ea       	ldi	r24, 0xAE	; 174
    3a68:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    3a6c:	85 ed       	ldi	r24, 0xD5	; 213
    3a6e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    3a72:	80 ef       	ldi	r24, 0xF0	; 240
    3a74:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    3a78:	88 ea       	ldi	r24, 0xA8	; 168
    3a7a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    3a7e:	8f e3       	ldi	r24, 0x3F	; 63
    3a80:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    3a84:	83 ed       	ldi	r24, 0xD3	; 211
    3a86:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    3a90:	8d e8       	ldi	r24, 0x8D	; 141
    3a92:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    3a96:	84 e1       	ldi	r24, 0x14	; 20
    3a98:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    3a9c:	80 e4       	ldi	r24, 0x40	; 64
    3a9e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    3aa2:	80 e2       	ldi	r24, 0x20	; 32
    3aa4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    3aae:	81 ea       	ldi	r24, 0xA1	; 161
    3ab0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    3ab4:	88 ec       	ldi	r24, 0xC8	; 200
    3ab6:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    3aba:	8a ed       	ldi	r24, 0xDA	; 218
    3abc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    3ac0:	82 e1       	ldi	r24, 0x12	; 18
    3ac2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    3ac6:	81 e8       	ldi	r24, 0x81	; 129
    3ac8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    3acc:	8f ef       	ldi	r24, 0xFF	; 255
    3ace:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    3ad2:	89 ed       	ldi	r24, 0xD9	; 217
    3ad4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    3ad8:	81 ef       	ldi	r24, 0xF1	; 241
    3ada:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    3ade:	8b ed       	ldi	r24, 0xDB	; 219
    3ae0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    3ae4:	80 e2       	ldi	r24, 0x20	; 32
    3ae6:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    3aea:	84 ea       	ldi	r24, 0xA4	; 164
    3aec:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    3af0:	86 ea       	ldi	r24, 0xA6	; 166
    3af2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    3af6:	8e e2       	ldi	r24, 0x2E	; 46
    3af8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    3afc:	8f ea       	ldi	r24, 0xAF	; 175
    3afe:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    3b0a:	86 ea       	ldi	r24, 0xA6	; 166
    3b0c:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    3b10:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <__GLCD+0x8>
    3b14:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <__GLCD+0x7>
    3b18:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <__GLCD+0x6>
    3b1c:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <__GLCD+0x2>
    3b20:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <__GLCD+0x1>
    3b24:	08 95       	ret

00003b26 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    3b26:	88 30       	cpi	r24, 0x08	; 8
    3b28:	28 f4       	brcc	.+10     	; 0x3b34 <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    3b2a:	88 0f       	add	r24, r24
    3b2c:	88 0f       	add	r24, r24
    3b2e:	88 0f       	add	r24, r24
    3b30:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__GLCD+0x2>
    3b34:	08 95       	ret

00003b36 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    3b36:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    3b3a:	08 95       	ret

00003b3c <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    3b3c:	8f 92       	push	r8
    3b3e:	9f 92       	push	r9
    3b40:	af 92       	push	r10
    3b42:	bf 92       	push	r11
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	06 2f       	mov	r16, r22
    3b56:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    3b58:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b5c:	d0 91 c6 02 	lds	r29, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    3b60:	c0 91 c5 02 	lds	r28, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    3b64:	6d 2f       	mov	r22, r29
    3b66:	8c 2f       	mov	r24, r28
    3b68:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    3b6c:	1f 3f       	cpi	r17, 0xFF	; 255
    3b6e:	91 f4       	brne	.+36     	; 0x3b94 <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    3b70:	90 2f       	mov	r25, r16
    3b72:	97 70       	andi	r25, 0x07	; 7
    3b74:	81 2c       	mov	r8, r1
    3b76:	91 2c       	mov	r9, r1
    3b78:	54 01       	movw	r10, r8
    3b7a:	83 94       	inc	r8
    3b7c:	75 01       	movw	r14, r10
    3b7e:	64 01       	movw	r12, r8
    3b80:	04 c0       	rjmp	.+8      	; 0x3b8a <GLCD_SetPixel+0x4e>
    3b82:	cc 0c       	add	r12, r12
    3b84:	dd 1c       	adc	r13, r13
    3b86:	ee 1c       	adc	r14, r14
    3b88:	ff 1c       	adc	r15, r15
    3b8a:	9a 95       	dec	r25
    3b8c:	d2 f7       	brpl	.-12     	; 0x3b82 <GLCD_SetPixel+0x46>
    3b8e:	48 2f       	mov	r20, r24
    3b90:	4c 29       	or	r20, r12
    3b92:	13 c0       	rjmp	.+38     	; 0x3bba <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    3b94:	07 70       	andi	r16, 0x07	; 7
    3b96:	c1 2c       	mov	r12, r1
    3b98:	d1 2c       	mov	r13, r1
    3b9a:	76 01       	movw	r14, r12
    3b9c:	c3 94       	inc	r12
    3b9e:	b7 01       	movw	r22, r14
    3ba0:	a6 01       	movw	r20, r12
    3ba2:	04 c0       	rjmp	.+8      	; 0x3bac <GLCD_SetPixel+0x70>
    3ba4:	44 0f       	add	r20, r20
    3ba6:	55 1f       	adc	r21, r21
    3ba8:	66 1f       	adc	r22, r22
    3baa:	77 1f       	adc	r23, r23
    3bac:	0a 95       	dec	r16
    3bae:	d2 f7       	brpl	.-12     	; 0x3ba4 <GLCD_SetPixel+0x68>
    3bb0:	8a 01       	movw	r16, r20
    3bb2:	9b 01       	movw	r18, r22
    3bb4:	00 95       	com	r16
    3bb6:	48 2f       	mov	r20, r24
    3bb8:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3bba:	6d 2f       	mov	r22, r29
    3bbc:	8c 2f       	mov	r24, r28
    3bbe:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
}
    3bc2:	df 91       	pop	r29
    3bc4:	cf 91       	pop	r28
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	df 90       	pop	r13
    3bd0:	cf 90       	pop	r12
    3bd2:	bf 90       	pop	r11
    3bd4:	af 90       	pop	r10
    3bd6:	9f 90       	pop	r9
    3bd8:	8f 90       	pop	r8
    3bda:	08 95       	ret

00003bdc <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3bdc:	3f 92       	push	r3
    3bde:	4f 92       	push	r4
    3be0:	5f 92       	push	r5
    3be2:	6f 92       	push	r6
    3be4:	7f 92       	push	r7
    3be6:	8f 92       	push	r8
    3be8:	9f 92       	push	r9
    3bea:	af 92       	push	r10
    3bec:	bf 92       	push	r11
    3bee:	cf 92       	push	r12
    3bf0:	df 92       	push	r13
    3bf2:	ef 92       	push	r14
    3bf4:	ff 92       	push	r15
    3bf6:	0f 93       	push	r16
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3c00:	88 23       	and	r24, r24
    3c02:	0c f4       	brge	.+2      	; 0x3c06 <GLCD_SetPixels+0x2a>
    3c04:	c6 c0       	rjmp	.+396    	; 0x3d92 <GLCD_SetPixels+0x1b6>
    3c06:	44 23       	and	r20, r20
    3c08:	0c f4       	brge	.+2      	; 0x3c0c <GLCD_SetPixels+0x30>
    3c0a:	c3 c0       	rjmp	.+390    	; 0x3d92 <GLCD_SetPixels+0x1b6>
    3c0c:	60 34       	cpi	r22, 0x40	; 64
    3c0e:	08 f0       	brcs	.+2      	; 0x3c12 <GLCD_SetPixels+0x36>
    3c10:	c0 c0       	rjmp	.+384    	; 0x3d92 <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3c12:	20 34       	cpi	r18, 0x40	; 64
    3c14:	08 f0       	brcs	.+2      	; 0x3c18 <GLCD_SetPixels+0x3c>
    3c16:	bd c0       	rjmp	.+378    	; 0x3d92 <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    3c18:	11 e0       	ldi	r17, 0x01	; 1
    3c1a:	81 2e       	mov	r8, r17
    3c1c:	86 1a       	sub	r8, r22
    3c1e:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    3c20:	18 1b       	sub	r17, r24
    3c22:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    3c24:	46 2f       	mov	r20, r22
    3c26:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    3c28:	76 2e       	mov	r7, r22
    3c2a:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    3c2c:	e8 2c       	mov	r14, r8
    3c2e:	f1 2c       	mov	r15, r1
    3c30:	88 e0       	ldi	r24, 0x08	; 8
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	84 1b       	sub	r24, r20
    3c36:	91 09       	sbc	r25, r1
    3c38:	e8 16       	cp	r14, r24
    3c3a:	f9 06       	cpc	r15, r25
    3c3c:	7c f4       	brge	.+30     	; 0x3c5c <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    3c3e:	88 e0       	ldi	r24, 0x08	; 8
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	8e 19       	sub	r24, r14
    3c44:	9f 09       	sbc	r25, r15
    3c46:	2f ef       	ldi	r18, 0xFF	; 255
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	59 01       	movw	r10, r18
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <GLCD_SetPixels+0x76>
    3c4e:	b5 94       	asr	r11
    3c50:	a7 94       	ror	r10
    3c52:	8a 95       	dec	r24
    3c54:	e2 f7       	brpl	.-8      	; 0x3c4e <GLCD_SetPixels+0x72>
    3c56:	8a 2d       	mov	r24, r10
			h = height;
    3c58:	68 2c       	mov	r6, r8
    3c5a:	04 c0       	rjmp	.+8      	; 0x3c64 <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    3c5c:	88 e0       	ldi	r24, 0x08	; 8
    3c5e:	68 2e       	mov	r6, r24
    3c60:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    3c62:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    3c64:	a8 2e       	mov	r10, r24
    3c66:	b1 2c       	mov	r11, r1
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <GLCD_SetPixels+0x92>
    3c6a:	aa 0c       	add	r10, r10
    3c6c:	bb 1c       	adc	r11, r11
    3c6e:	4a 95       	dec	r20
    3c70:	e2 f7       	brpl	.-8      	; 0x3c6a <GLCD_SetPixels+0x8e>
    3c72:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    3c74:	67 2d       	mov	r22, r7
    3c76:	89 2d       	mov	r24, r9
    3c78:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    3c7c:	11 23       	and	r17, r17
    3c7e:	c9 f1       	breq	.+114    	; 0x3cf2 <GLCD_SetPixels+0x116>
    3c80:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c82:	0f 2e       	mov	r0, r31
    3c84:	f6 ec       	ldi	r31, 0xC6	; 198
    3c86:	cf 2e       	mov	r12, r31
    3c88:	f2 e0       	ldi	r31, 0x02	; 2
    3c8a:	df 2e       	mov	r13, r31
    3c8c:	f0 2d       	mov	r31, r0
    3c8e:	c5 ec       	ldi	r28, 0xC5	; 197
    3c90:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3c92:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c94:	f6 01       	movw	r30, r12
    3c96:	40 80       	ld	r4, Z
    3c98:	b8 80       	ld	r11, Y
    3c9a:	64 2d       	mov	r22, r4
    3c9c:	8b 2d       	mov	r24, r11
    3c9e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3ca2:	0f 3f       	cpi	r16, 0xFF	; 255
    3ca4:	19 f4       	brne	.+6      	; 0x3cac <GLCD_SetPixels+0xd0>
    3ca6:	48 2f       	mov	r20, r24
    3ca8:	43 29       	or	r20, r3
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <GLCD_SetPixels+0xd4>
    3cac:	48 2f       	mov	r20, r24
    3cae:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3cb0:	9b 2d       	mov	r25, r11
    3cb2:	9f 5f       	subi	r25, 0xFF	; 255
    3cb4:	98 83       	st	Y, r25
    3cb6:	64 2d       	mov	r22, r4
    3cb8:	8b 2d       	mov	r24, r11
    3cba:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    3cbe:	53 94       	inc	r5
    3cc0:	51 12       	cpse	r5, r17
    3cc2:	e8 cf       	rjmp	.-48     	; 0x3c94 <GLCD_SetPixels+0xb8>
    3cc4:	16 c0       	rjmp	.+44     	; 0x3cf2 <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3cc6:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3cc8:	6c 2f       	mov	r22, r28
    3cca:	89 2d       	mov	r24, r9
    3ccc:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3cd0:	11 23       	and	r17, r17
    3cd2:	f1 f0       	breq	.+60     	; 0x3d10 <GLCD_SetPixels+0x134>
    3cd4:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3cd6:	f6 01       	movw	r30, r12
    3cd8:	60 81       	ld	r22, Z
    3cda:	f2 01       	movw	r30, r4
    3cdc:	80 81       	ld	r24, Z
    3cde:	98 2f       	mov	r25, r24
    3ce0:	9f 5f       	subi	r25, 0xFF	; 255
    3ce2:	90 83       	st	Z, r25
    3ce4:	40 2f       	mov	r20, r16
    3ce6:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3cea:	73 94       	inc	r7
    3cec:	71 16       	cp	r7, r17
    3cee:	81 f0       	breq	.+32     	; 0x3d10 <GLCD_SetPixels+0x134>
    3cf0:	f2 cf       	rjmp	.-28     	; 0x3cd6 <GLCD_SetPixels+0xfa>
    3cf2:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3cf4:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3cf6:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3cf8:	0f 2e       	mov	r0, r31
    3cfa:	f6 ec       	ldi	r31, 0xC6	; 198
    3cfc:	cf 2e       	mov	r12, r31
    3cfe:	f2 e0       	ldi	r31, 0x02	; 2
    3d00:	df 2e       	mov	r13, r31
    3d02:	f0 2d       	mov	r31, r0
    3d04:	0f 2e       	mov	r0, r31
    3d06:	f5 ec       	ldi	r31, 0xC5	; 197
    3d08:	4f 2e       	mov	r4, r31
    3d0a:	f2 e0       	ldi	r31, 0x02	; 2
    3d0c:	5f 2e       	mov	r5, r31
    3d0e:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3d10:	26 2d       	mov	r18, r6
    3d12:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    3d14:	e2 2f       	mov	r30, r18
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	cf 01       	movw	r24, r30
    3d1a:	08 96       	adiw	r24, 0x08	; 8
    3d1c:	e8 16       	cp	r14, r24
    3d1e:	f9 06       	cpc	r15, r25
    3d20:	94 f6       	brge	.-92     	; 0x3cc6 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    3d22:	28 15       	cp	r18, r8
    3d24:	b0 f5       	brcc	.+108    	; 0x3d92 <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    3d26:	ee 1a       	sub	r14, r30
    3d28:	ff 0a       	sbc	r15, r31
    3d2a:	8f ef       	ldi	r24, 0xFF	; 255
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	9c 01       	movw	r18, r24
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <GLCD_SetPixels+0x15a>
    3d32:	22 0f       	add	r18, r18
    3d34:	33 1f       	adc	r19, r19
    3d36:	ea 94       	dec	r14
    3d38:	e2 f7       	brpl	.-8      	; 0x3d32 <GLCD_SetPixels+0x156>
    3d3a:	79 01       	movw	r14, r18
    3d3c:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    3d3e:	6c 2f       	mov	r22, r28
    3d40:	68 5f       	subi	r22, 0xF8	; 248
    3d42:	89 2d       	mov	r24, r9
    3d44:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3d48:	11 23       	and	r17, r17
    3d4a:	19 f1       	breq	.+70     	; 0x3d92 <GLCD_SetPixels+0x1b6>
    3d4c:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d4e:	0f 2e       	mov	r0, r31
    3d50:	f6 ec       	ldi	r31, 0xC6	; 198
    3d52:	cf 2e       	mov	r12, r31
    3d54:	f2 e0       	ldi	r31, 0x02	; 2
    3d56:	df 2e       	mov	r13, r31
    3d58:	f0 2d       	mov	r31, r0
    3d5a:	c5 ec       	ldi	r28, 0xC5	; 197
    3d5c:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3d5e:	9e 2c       	mov	r9, r14
    3d60:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d62:	f6 01       	movw	r30, r12
    3d64:	a0 80       	ld	r10, Z
    3d66:	f8 80       	ld	r15, Y
    3d68:	6a 2d       	mov	r22, r10
    3d6a:	8f 2d       	mov	r24, r15
    3d6c:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3d70:	0f 3f       	cpi	r16, 0xFF	; 255
    3d72:	19 f4       	brne	.+6      	; 0x3d7a <GLCD_SetPixels+0x19e>
    3d74:	48 2f       	mov	r20, r24
    3d76:	4e 29       	or	r20, r14
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <GLCD_SetPixels+0x1a2>
    3d7a:	48 2f       	mov	r20, r24
    3d7c:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3d7e:	9f 2d       	mov	r25, r15
    3d80:	9f 5f       	subi	r25, 0xFF	; 255
    3d82:	98 83       	st	Y, r25
    3d84:	6a 2d       	mov	r22, r10
    3d86:	8f 2d       	mov	r24, r15
    3d88:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    3d8c:	b3 94       	inc	r11
    3d8e:	b1 12       	cpse	r11, r17
    3d90:	e8 cf       	rjmp	.-48     	; 0x3d62 <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	ff 90       	pop	r15
    3d9c:	ef 90       	pop	r14
    3d9e:	df 90       	pop	r13
    3da0:	cf 90       	pop	r12
    3da2:	bf 90       	pop	r11
    3da4:	af 90       	pop	r10
    3da6:	9f 90       	pop	r9
    3da8:	8f 90       	pop	r8
    3daa:	7f 90       	pop	r7
    3dac:	6f 90       	pop	r6
    3dae:	5f 90       	pop	r5
    3db0:	4f 90       	pop	r4
    3db2:	3f 90       	pop	r3
    3db4:	08 95       	ret

00003db6 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3db6:	2f 92       	push	r2
    3db8:	3f 92       	push	r3
    3dba:	4f 92       	push	r4
    3dbc:	5f 92       	push	r5
    3dbe:	6f 92       	push	r6
    3dc0:	7f 92       	push	r7
    3dc2:	8f 92       	push	r8
    3dc4:	9f 92       	push	r9
    3dc6:	af 92       	push	r10
    3dc8:	bf 92       	push	r11
    3dca:	cf 92       	push	r12
    3dcc:	df 92       	push	r13
    3dce:	ef 92       	push	r14
    3dd0:	ff 92       	push	r15
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	2c 97       	sbiw	r28, 0x0c	; 12
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	5c 01       	movw	r10, r24
    3dec:	66 2e       	mov	r6, r22
    3dee:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3df0:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    3df4:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    3df6:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    3dfa:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    3dfc:	82 2f       	mov	r24, r18
    3dfe:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    3e00:	1a f4       	brpl	.+6      	; 0x3e08 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    3e02:	80 e8       	ldi	r24, 0x80	; 128
    3e04:	68 2e       	mov	r6, r24
    3e06:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    3e08:	84 2f       	mov	r24, r20
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	07 96       	adiw	r24, 0x07	; 7
    3e0e:	95 95       	asr	r25
    3e10:	87 95       	ror	r24
    3e12:	95 95       	asr	r25
    3e14:	87 95       	ror	r24
    3e16:	95 95       	asr	r25
    3e18:	87 95       	ror	r24
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    3e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e20:	96 95       	lsr	r25
    3e22:	96 95       	lsr	r25
    3e24:	96 95       	lsr	r25
    3e26:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    3e28:	89 30       	cpi	r24, 0x09	; 9
    3e2a:	48 f0       	brcs	.+18     	; 0x3e3e <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    3e2c:	2d 81       	ldd	r18, Y+5	; 0x05
    3e2e:	3e 81       	ldd	r19, Y+6	; 0x06
    3e30:	28 5f       	subi	r18, 0xF8	; 248
    3e32:	3f 4f       	sbci	r19, 0xFF	; 255
    3e34:	a9 01       	movw	r20, r18
    3e36:	48 1b       	sub	r20, r24
    3e38:	51 09       	sbc	r21, r1
    3e3a:	5e 83       	std	Y+6, r21	; 0x06
    3e3c:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3e3e:	4a 84       	ldd	r4, Y+10	; 0x0a
    3e40:	57 e0       	ldi	r21, 0x07	; 7
    3e42:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3e44:	8d 81       	ldd	r24, Y+5	; 0x05
    3e46:	9e 81       	ldd	r25, Y+6	; 0x06
    3e48:	89 2b       	or	r24, r25
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <GLCD_DrawBitmap+0x98>
    3e4c:	fa c0       	rjmp	.+500    	; 0x4042 <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e50:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3e52:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3e54:	26 2c       	mov	r2, r6
    3e56:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e58:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e5a:	88 e0       	ldi	r24, 0x08	; 8
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	fc 01       	movw	r30, r24
    3e60:	e4 19       	sub	r30, r4
    3e62:	f1 09       	sbc	r31, r1
    3e64:	fb 83       	std	Y+3, r31	; 0x03
    3e66:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e68:	0f 2e       	mov	r0, r31
    3e6a:	f6 ec       	ldi	r31, 0xC6	; 198
    3e6c:	cf 2e       	mov	r12, r31
    3e6e:	f2 e0       	ldi	r31, 0x02	; 2
    3e70:	df 2e       	mov	r13, r31
    3e72:	f0 2d       	mov	r31, r0
    3e74:	05 ec       	ldi	r16, 0xC5	; 197
    3e76:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3e78:	6c 81       	ldd	r22, Y+4	; 0x04
    3e7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e7c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3e80:	39 86       	std	Y+9, r3	; 0x09
    3e82:	28 86       	std	Y+8, r2	; 0x08
    3e84:	72 9c       	mul	r7, r2
    3e86:	c0 01       	movw	r24, r0
    3e88:	73 9c       	mul	r7, r3
    3e8a:	90 0d       	add	r25, r0
    3e8c:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    3e8e:	7c 01       	movw	r14, r24
    3e90:	e2 18       	sub	r14, r2
    3e92:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3e94:	66 20       	and	r6, r6
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <GLCD_DrawBitmap+0xe4>
    3e98:	3c c0       	rjmp	.+120    	; 0x3f12 <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3e9a:	9c 01       	movw	r18, r24
    3e9c:	2a 0d       	add	r18, r10
    3e9e:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3ea0:	85 2c       	mov	r8, r5
    3ea2:	3c 87       	std	Y+12, r19	; 0x0c
    3ea4:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3ea6:	eb 85       	ldd	r30, Y+11	; 0x0b
    3ea8:	fc 85       	ldd	r31, Y+12	; 0x0c
    3eaa:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    3eac:	04 2c       	mov	r0, r4
    3eae:	01 c0       	rjmp	.+2      	; 0x3eb2 <GLCD_DrawBitmap+0xfc>
    3eb0:	99 0c       	add	r9, r9
    3eb2:	0a 94       	dec	r0
    3eb4:	ea f7       	brpl	.-6      	; 0x3eb0 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3eb6:	77 20       	and	r7, r7
    3eb8:	79 f0       	breq	.+30     	; 0x3ed8 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3eba:	f5 01       	movw	r30, r10
    3ebc:	ee 0d       	add	r30, r14
    3ebe:	ff 1d       	adc	r31, r15
    3ec0:	2f ef       	ldi	r18, 0xFF	; 255
    3ec2:	e2 1a       	sub	r14, r18
    3ec4:	f2 0a       	sbc	r15, r18
    3ec6:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	0a 80       	ldd	r0, Y+2	; 0x02
    3ecc:	02 c0       	rjmp	.+4      	; 0x3ed2 <GLCD_DrawBitmap+0x11c>
    3ece:	95 95       	asr	r25
    3ed0:	87 95       	ror	r24
    3ed2:	0a 94       	dec	r0
    3ed4:	e2 f7       	brpl	.-8      	; 0x3ece <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3ed6:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3ed8:	39 81       	ldd	r19, Y+1	; 0x01
    3eda:	31 30       	cpi	r19, 0x01	; 1
    3edc:	39 f4       	brne	.+14     	; 0x3eec <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ede:	f6 01       	movw	r30, r12
    3ee0:	60 81       	ld	r22, Z
    3ee2:	f8 01       	movw	r30, r16
    3ee4:	80 81       	ld	r24, Z
    3ee6:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
    3eea:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3eec:	f6 01       	movw	r30, r12
    3eee:	60 81       	ld	r22, Z
    3ef0:	f8 01       	movw	r30, r16
    3ef2:	80 81       	ld	r24, Z
    3ef4:	98 2f       	mov	r25, r24
    3ef6:	9f 5f       	subi	r25, 0xFF	; 255
    3ef8:	90 83       	st	Z, r25
    3efa:	49 2d       	mov	r20, r9
    3efc:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3f00:	83 94       	inc	r8
    3f02:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f04:	3c 85       	ldd	r19, Y+12	; 0x0c
    3f06:	2f 5f       	subi	r18, 0xFF	; 255
    3f08:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0a:	3c 87       	std	Y+12, r19	; 0x0c
    3f0c:	2b 87       	std	Y+11, r18	; 0x0b
    3f0e:	86 10       	cpse	r8, r6
    3f10:	ca cf       	rjmp	.-108    	; 0x3ea6 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3f12:	ed ec       	ldi	r30, 0xCD	; 205
    3f14:	f2 e0       	ldi	r31, 0x02	; 2
    3f16:	80 81       	ld	r24, Z
    3f18:	88 23       	and	r24, r24
    3f1a:	41 f0       	breq	.+16     	; 0x3f2c <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f1c:	f6 01       	movw	r30, r12
    3f1e:	60 81       	ld	r22, Z
    3f20:	f8 01       	movw	r30, r16
    3f22:	80 81       	ld	r24, Z
    3f24:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
    3f28:	48 2f       	mov	r20, r24
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3f2c:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3f2e:	f6 01       	movw	r30, r12
    3f30:	60 81       	ld	r22, Z
    3f32:	f8 01       	movw	r30, r16
    3f34:	80 81       	ld	r24, Z
    3f36:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f3c:	f8 5f       	subi	r31, 0xF8	; 248
    3f3e:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3f40:	73 94       	inc	r7
    3f42:	87 2d       	mov	r24, r7
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	2d 81       	ldd	r18, Y+5	; 0x05
    3f48:	3e 81       	ldd	r19, Y+6	; 0x06
    3f4a:	82 17       	cp	r24, r18
    3f4c:	93 07       	cpc	r25, r19
    3f4e:	08 f4       	brcc	.+2      	; 0x3f52 <GLCD_DrawBitmap+0x19c>
    3f50:	93 cf       	rjmp	.-218    	; 0x3e78 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    3f52:	22 30       	cpi	r18, 0x02	; 2
    3f54:	31 05       	cpc	r19, r1
    3f56:	08 f4       	brcc	.+2      	; 0x3f5a <GLCD_DrawBitmap+0x1a4>
    3f58:	74 c0       	rjmp	.+232    	; 0x4042 <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3f5a:	6f 2f       	mov	r22, r31
    3f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f5e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    3f62:	27 2d       	mov	r18, r7
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	21 50       	subi	r18, 0x01	; 1
    3f68:	31 09       	sbc	r19, r1
    3f6a:	48 85       	ldd	r20, Y+8	; 0x08
    3f6c:	59 85       	ldd	r21, Y+9	; 0x09
    3f6e:	24 9f       	mul	r18, r20
    3f70:	c0 01       	movw	r24, r0
    3f72:	25 9f       	mul	r18, r21
    3f74:	90 0d       	add	r25, r0
    3f76:	34 9f       	mul	r19, r20
    3f78:	90 0d       	add	r25, r0
    3f7a:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3f7c:	66 20       	and	r6, r6
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <GLCD_DrawBitmap+0x1cc>
    3f80:	3e c0       	rjmp	.+124    	; 0x3ffe <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3f82:	45 01       	movw	r8, r10
    3f84:	88 0e       	add	r8, r24
    3f86:	99 1e       	adc	r9, r25
    3f88:	65 01       	movw	r12, r10
    3f8a:	5f ef       	ldi	r21, 0xFF	; 255
    3f8c:	c5 1a       	sub	r12, r21
    3f8e:	d5 0a       	sbc	r13, r21
    3f90:	6a 94       	dec	r6
    3f92:	c6 0c       	add	r12, r6
    3f94:	d1 1c       	adc	r13, r1
    3f96:	c8 0e       	add	r12, r24
    3f98:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f9a:	0f 2e       	mov	r0, r31
    3f9c:	f6 ec       	ldi	r31, 0xC6	; 198
    3f9e:	ef 2e       	mov	r14, r31
    3fa0:	f2 e0       	ldi	r31, 0x02	; 2
    3fa2:	ff 2e       	mov	r15, r31
    3fa4:	f0 2d       	mov	r31, r0
    3fa6:	05 ec       	ldi	r16, 0xC5	; 197
    3fa8:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3faa:	88 e0       	ldi	r24, 0x08	; 8
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	5c 01       	movw	r10, r24
    3fb0:	a4 18       	sub	r10, r4
    3fb2:	b1 08       	sbc	r11, r1
    3fb4:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3fb6:	f7 01       	movw	r30, r14
    3fb8:	80 80       	ld	r8, Z
    3fba:	f8 01       	movw	r30, r16
    3fbc:	90 80       	ld	r9, Z
    3fbe:	68 2d       	mov	r22, r8
    3fc0:	89 2d       	mov	r24, r9
    3fc2:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3fc6:	f3 01       	movw	r30, r6
    3fc8:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	0a 2c       	mov	r0, r10
    3fce:	02 c0       	rjmp	.+4      	; 0x3fd4 <GLCD_DrawBitmap+0x21e>
    3fd0:	55 95       	asr	r21
    3fd2:	47 95       	ror	r20
    3fd4:	0a 94       	dec	r0
    3fd6:	e2 f7       	brpl	.-8      	; 0x3fd0 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3fd8:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3fda:	f9 81       	ldd	r31, Y+1	; 0x01
    3fdc:	f1 30       	cpi	r31, 0x01	; 1
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3fe0:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3fe2:	89 2d       	mov	r24, r9
    3fe4:	8f 5f       	subi	r24, 0xFF	; 255
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	80 83       	st	Z, r24
    3fea:	68 2d       	mov	r22, r8
    3fec:	89 2d       	mov	r24, r9
    3fee:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
    3ff2:	ff ef       	ldi	r31, 0xFF	; 255
    3ff4:	6f 1a       	sub	r6, r31
    3ff6:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3ff8:	6c 14       	cp	r6, r12
    3ffa:	7d 04       	cpc	r7, r13
    3ffc:	e1 f6       	brne	.-72     	; 0x3fb6 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3ffe:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <__GLCD+0x9>
    4002:	88 23       	and	r24, r24
    4004:	99 f0       	breq	.+38     	; 0x402c <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	41 f4       	brne	.+16     	; 0x401a <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    400a:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    400e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    4012:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
    4016:	48 2f       	mov	r20, r24
    4018:	0a c0       	rjmp	.+20     	; 0x402e <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    401a:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    401e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    4022:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
    4026:	48 2f       	mov	r20, r24
    4028:	40 95       	com	r20
    402a:	01 c0       	rjmp	.+2      	; 0x402e <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    402c:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    402e:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    4032:	e5 ec       	ldi	r30, 0xC5	; 197
    4034:	f2 e0       	ldi	r31, 0x02	; 2
    4036:	80 81       	ld	r24, Z
    4038:	98 2f       	mov	r25, r24
    403a:	9f 5f       	subi	r25, 0xFF	; 255
    403c:	90 83       	st	Z, r25
    403e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    4042:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <GLCD_GetX>
    4046:	6a 85       	ldd	r22, Y+10	; 0x0a
    4048:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
}
    404c:	2c 96       	adiw	r28, 0x0c	; 12
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	f8 94       	cli
    4052:	de bf       	out	0x3e, r29	; 62
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	cd bf       	out	0x3d, r28	; 61
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	1f 91       	pop	r17
    405e:	0f 91       	pop	r16
    4060:	ff 90       	pop	r15
    4062:	ef 90       	pop	r14
    4064:	df 90       	pop	r13
    4066:	cf 90       	pop	r12
    4068:	bf 90       	pop	r11
    406a:	af 90       	pop	r10
    406c:	9f 90       	pop	r9
    406e:	8f 90       	pop	r8
    4070:	7f 90       	pop	r7
    4072:	6f 90       	pop	r6
    4074:	5f 90       	pop	r5
    4076:	4f 90       	pop	r4
    4078:	3f 90       	pop	r3
    407a:	2f 90       	pop	r2
    407c:	08 95       	ret

0000407e <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    407e:	df 92       	push	r13
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	e8 2e       	mov	r14, r24
    408e:	16 2f       	mov	r17, r22
    4090:	d4 2e       	mov	r13, r20
    4092:	f2 2e       	mov	r15, r18
    4094:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    4096:	88 23       	and	r24, r24
    4098:	0c f4       	brge	.+2      	; 0x409c <GLCD_DrawRectangle+0x1e>
    409a:	49 c0       	rjmp	.+146    	; 0x412e <GLCD_DrawRectangle+0xb0>
    409c:	44 23       	and	r20, r20
    409e:	0c f4       	brge	.+2      	; 0x40a2 <GLCD_DrawRectangle+0x24>
    40a0:	46 c0       	rjmp	.+140    	; 0x412e <GLCD_DrawRectangle+0xb0>
    40a2:	60 34       	cpi	r22, 0x40	; 64
    40a4:	08 f0       	brcs	.+2      	; 0x40a8 <GLCD_DrawRectangle+0x2a>
    40a6:	43 c0       	rjmp	.+134    	; 0x412e <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    40a8:	8f e3       	ldi	r24, 0x3F	; 63
    40aa:	82 17       	cp	r24, r18
    40ac:	08 f4       	brcc	.+2      	; 0x40b0 <GLCD_DrawRectangle+0x32>
    40ae:	3f c0       	rjmp	.+126    	; 0x412e <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40b0:	4e 15       	cp	r20, r14
    40b2:	00 f1       	brcs	.+64     	; 0x40f4 <GLCD_DrawRectangle+0x76>
    40b4:	1c c0       	rjmp	.+56     	; 0x40ee <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    40b6:	4d 2f       	mov	r20, r29
    40b8:	61 2f       	mov	r22, r17
    40ba:	8c 2f       	mov	r24, r28
    40bc:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <GLCD_SetPixel>
		X1++;
    40c0:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    40c2:	0c 17       	cp	r16, r28
    40c4:	c0 f7       	brcc	.-16     	; 0x40b6 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40c6:	de 14       	cp	r13, r14
    40c8:	d8 f0       	brcs	.+54     	; 0x4100 <GLCD_DrawRectangle+0x82>
    40ca:	17 c0       	rjmp	.+46     	; 0x40fa <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    40cc:	4d 2f       	mov	r20, r29
    40ce:	6f 2d       	mov	r22, r15
    40d0:	8c 2f       	mov	r24, r28
    40d2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <GLCD_SetPixel>
		X1++;
    40d6:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    40d8:	0c 17       	cp	r16, r28
    40da:	c0 f7       	brcc	.-16     	; 0x40cc <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    40dc:	f1 16       	cp	r15, r17
    40de:	98 f0       	brcs	.+38     	; 0x4106 <GLCD_DrawRectangle+0x88>
    40e0:	1c c0       	rjmp	.+56     	; 0x411a <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    40e2:	0d 2f       	mov	r16, r29
    40e4:	4d 2d       	mov	r20, r13
    40e6:	8d 2d       	mov	r24, r13
    40e8:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <GLCD_SetPixels>
    40ec:	20 c0       	rjmp	.+64     	; 0x412e <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40ee:	04 2f       	mov	r16, r20
    40f0:	ce 2d       	mov	r28, r14
    40f2:	e1 cf       	rjmp	.-62     	; 0x40b6 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    40f4:	0e 2d       	mov	r16, r14
    40f6:	c4 2f       	mov	r28, r20
    40f8:	de cf       	rjmp	.-68     	; 0x40b6 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    40fa:	0d 2d       	mov	r16, r13
    40fc:	ce 2d       	mov	r28, r14
    40fe:	e6 cf       	rjmp	.-52     	; 0x40cc <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    4100:	0e 2d       	mov	r16, r14
    4102:	cd 2d       	mov	r28, r13
    4104:	e3 cf       	rjmp	.-58     	; 0x40cc <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    4106:	0d 2f       	mov	r16, r29
    4108:	21 2f       	mov	r18, r17
    410a:	4e 2d       	mov	r20, r14
    410c:	6f 2d       	mov	r22, r15
    410e:	8e 2d       	mov	r24, r14
    4110:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    4114:	21 2f       	mov	r18, r17
    4116:	6f 2d       	mov	r22, r15
    4118:	e4 cf       	rjmp	.-56     	; 0x40e2 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    411a:	0d 2f       	mov	r16, r29
    411c:	2f 2d       	mov	r18, r15
    411e:	4e 2d       	mov	r20, r14
    4120:	61 2f       	mov	r22, r17
    4122:	8e 2d       	mov	r24, r14
    4124:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <GLCD_SetPixels>
    4128:	2f 2d       	mov	r18, r15
    412a:	61 2f       	mov	r22, r17
    412c:	da cf       	rjmp	.-76     	; 0x40e2 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	1f 91       	pop	r17
    4134:	0f 91       	pop	r16
    4136:	ff 90       	pop	r15
    4138:	ef 90       	pop	r14
    413a:	df 90       	pop	r13
    413c:	08 95       	ret

0000413e <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	cf 93       	push	r28
    4144:	df 93       	push	r29
    4146:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    4148:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    414a:	00 e0       	ldi	r16, 0x00	; 0
    414c:	0b c0       	rjmp	.+22     	; 0x4164 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    414e:	41 2f       	mov	r20, r17
    4150:	6d 2f       	mov	r22, r29
    4152:	8c 2f       	mov	r24, r28
    4154:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    4158:	cf 5f       	subi	r28, 0xFF	; 255
    415a:	c0 38       	cpi	r28, 0x80	; 128
    415c:	c1 f7       	brne	.-16     	; 0x414e <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    415e:	d8 5f       	subi	r29, 0xF8	; 248
    4160:	d0 34       	cpi	r29, 0x40	; 64
    4162:	11 f0       	breq	.+4      	; 0x4168 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    4164:	c0 2f       	mov	r28, r16
    4166:	f3 cf       	rjmp	.-26     	; 0x414e <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	08 95       	ret

00004172 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	0e 94 9f 20 	call	0x413e	; 0x413e <GLCD_FillScreen>
    4178:	08 95       	ret

0000417a <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    417a:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    417c:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <GLCD_SetPixels>
}
    4180:	0f 91       	pop	r16
    4182:	08 95       	ret

00004184 <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    4184:	2f 92       	push	r2
    4186:	3f 92       	push	r3
    4188:	5f 92       	push	r5
    418a:	6f 92       	push	r6
    418c:	7f 92       	push	r7
    418e:	8f 92       	push	r8
    4190:	9f 92       	push	r9
    4192:	af 92       	push	r10
    4194:	bf 92       	push	r11
    4196:	cf 92       	push	r12
    4198:	df 92       	push	r13
    419a:	ef 92       	push	r14
    419c:	ff 92       	push	r15
    419e:	0f 93       	push	r16
    41a0:	1f 93       	push	r17
    41a2:	cf 93       	push	r28
    41a4:	df 93       	push	r29
    41a6:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	d8 2e       	mov	r13, r24
    41ac:	dc 18       	sub	r13, r12
    41ae:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    41b0:	b8 2e       	mov	r11, r24
    41b2:	b6 1a       	sub	r11, r22
    41b4:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    41b6:	46 2f       	mov	r20, r22
    41b8:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    41ba:	a6 2e       	mov	r10, r22
    41bc:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    41be:	0b 2d       	mov	r16, r11
    41c0:	10 e0       	ldi	r17, 0x00	; 0
    41c2:	88 e0       	ldi	r24, 0x08	; 8
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	84 1b       	sub	r24, r20
    41c8:	91 09       	sbc	r25, r1
    41ca:	08 17       	cp	r16, r24
    41cc:	19 07       	cpc	r17, r25
    41ce:	7c f4       	brge	.+30     	; 0x41ee <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    41d0:	88 e0       	ldi	r24, 0x08	; 8
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	80 1b       	sub	r24, r16
    41d6:	91 0b       	sbc	r25, r17
    41d8:	2f ef       	ldi	r18, 0xFF	; 255
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	b9 01       	movw	r22, r18
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <GLCD_InvertRect+0x60>
    41e0:	75 95       	asr	r23
    41e2:	67 95       	ror	r22
    41e4:	8a 95       	dec	r24
    41e6:	e2 f7       	brpl	.-8      	; 0x41e0 <GLCD_InvertRect+0x5c>
    41e8:	cb 01       	movw	r24, r22
		h = height;
    41ea:	5b 2c       	mov	r5, r11
    41ec:	04 c0       	rjmp	.+8      	; 0x41f6 <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    41ee:	88 e0       	ldi	r24, 0x08	; 8
    41f0:	58 2e       	mov	r5, r24
    41f2:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    41f4:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    41f6:	68 2e       	mov	r6, r24
    41f8:	01 c0       	rjmp	.+2      	; 0x41fc <GLCD_InvertRect+0x78>
    41fa:	66 0c       	add	r6, r6
    41fc:	4a 95       	dec	r20
    41fe:	ea f7       	brpl	.-6      	; 0x41fa <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    4200:	6a 2d       	mov	r22, r10
    4202:	8c 2d       	mov	r24, r12
    4204:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    4208:	dd 20       	and	r13, r13
    420a:	d9 f1       	breq	.+118    	; 0x4282 <GLCD_InvertRect+0xfe>
    420c:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    420e:	0f 2e       	mov	r0, r31
    4210:	f6 ec       	ldi	r31, 0xC6	; 198
    4212:	ef 2e       	mov	r14, r31
    4214:	f2 e0       	ldi	r31, 0x02	; 2
    4216:	ff 2e       	mov	r15, r31
    4218:	f0 2d       	mov	r31, r0
    421a:	c5 ec       	ldi	r28, 0xC5	; 197
    421c:	d2 e0       	ldi	r29, 0x02	; 2
    421e:	f7 01       	movw	r30, r14
    4220:	70 80       	ld	r7, Z
    4222:	98 80       	ld	r9, Y
    4224:	67 2d       	mov	r22, r7
    4226:	89 2d       	mov	r24, r9
    4228:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    422c:	99 2d       	mov	r25, r9
    422e:	9f 5f       	subi	r25, 0xFF	; 255
    4230:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    4232:	48 2f       	mov	r20, r24
    4234:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4236:	67 2d       	mov	r22, r7
    4238:	89 2d       	mov	r24, r9
    423a:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    423e:	83 94       	inc	r8
    4240:	8d 10       	cpse	r8, r13
    4242:	ed cf       	rjmp	.-38     	; 0x421e <GLCD_InvertRect+0x9a>
    4244:	1e c0       	rjmp	.+60     	; 0x4282 <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    4246:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    4248:	6c 2f       	mov	r22, r28
    424a:	8c 2d       	mov	r24, r12
    424c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    4250:	dd 20       	and	r13, r13
    4252:	39 f1       	breq	.+78     	; 0x42a2 <GLCD_InvertRect+0x11e>
    4254:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4256:	f7 01       	movw	r30, r14
    4258:	50 80       	ld	r5, Z
    425a:	f1 01       	movw	r30, r2
    425c:	80 80       	ld	r8, Z
    425e:	65 2d       	mov	r22, r5
    4260:	88 2d       	mov	r24, r8
    4262:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4266:	98 2d       	mov	r25, r8
    4268:	9f 5f       	subi	r25, 0xFF	; 255
    426a:	f1 01       	movw	r30, r2
    426c:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    426e:	48 2f       	mov	r20, r24
    4270:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4272:	65 2d       	mov	r22, r5
    4274:	88 2d       	mov	r24, r8
    4276:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    427a:	63 94       	inc	r6
    427c:	6d 14       	cp	r6, r13
    427e:	89 f0       	breq	.+34     	; 0x42a2 <GLCD_InvertRect+0x11e>
    4280:	ea cf       	rjmp	.-44     	; 0x4256 <GLCD_InvertRect+0xd2>
    4282:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    4284:	5a 18       	sub	r5, r10
    4286:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    4288:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    428a:	0f 2e       	mov	r0, r31
    428c:	f6 ec       	ldi	r31, 0xC6	; 198
    428e:	ef 2e       	mov	r14, r31
    4290:	f2 e0       	ldi	r31, 0x02	; 2
    4292:	ff 2e       	mov	r15, r31
    4294:	f0 2d       	mov	r31, r0
    4296:	0f 2e       	mov	r0, r31
    4298:	f5 ec       	ldi	r31, 0xC5	; 197
    429a:	2f 2e       	mov	r2, r31
    429c:	f2 e0       	ldi	r31, 0x02	; 2
    429e:	3f 2e       	mov	r3, r31
    42a0:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    42a2:	8a 2d       	mov	r24, r10
    42a4:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    42a6:	e8 2f       	mov	r30, r24
    42a8:	f0 e0       	ldi	r31, 0x00	; 0
    42aa:	df 01       	movw	r26, r30
    42ac:	18 96       	adiw	r26, 0x08	; 8
    42ae:	0a 17       	cp	r16, r26
    42b0:	1b 07       	cpc	r17, r27
    42b2:	4c f6       	brge	.-110    	; 0x4246 <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    42b4:	8b 15       	cp	r24, r11
    42b6:	58 f5       	brcc	.+86     	; 0x430e <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    42b8:	0e 1b       	sub	r16, r30
    42ba:	1f 0b       	sbc	r17, r31
    42bc:	8f ef       	ldi	r24, 0xFF	; 255
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	9c 01       	movw	r18, r24
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <GLCD_InvertRect+0x144>
    42c4:	22 0f       	add	r18, r18
    42c6:	33 1f       	adc	r19, r19
    42c8:	0a 95       	dec	r16
    42ca:	e2 f7       	brpl	.-8      	; 0x42c4 <GLCD_InvertRect+0x140>
    42cc:	b2 2e       	mov	r11, r18
    42ce:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    42d0:	6c 2f       	mov	r22, r28
    42d2:	68 5f       	subi	r22, 0xF8	; 248
    42d4:	8c 2d       	mov	r24, r12
    42d6:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    42da:	dd 20       	and	r13, r13
    42dc:	c1 f0       	breq	.+48     	; 0x430e <GLCD_InvertRect+0x18a>
    42de:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    42e0:	06 ec       	ldi	r16, 0xC6	; 198
    42e2:	12 e0       	ldi	r17, 0x02	; 2
    42e4:	c5 ec       	ldi	r28, 0xC5	; 197
    42e6:	d2 e0       	ldi	r29, 0x02	; 2
    42e8:	f8 01       	movw	r30, r16
    42ea:	c0 80       	ld	r12, Z
    42ec:	f8 80       	ld	r15, Y
    42ee:	6c 2d       	mov	r22, r12
    42f0:	8f 2d       	mov	r24, r15
    42f2:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    42f6:	9f 2d       	mov	r25, r15
    42f8:	9f 5f       	subi	r25, 0xFF	; 255
    42fa:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    42fc:	48 2f       	mov	r20, r24
    42fe:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4300:	6c 2d       	mov	r22, r12
    4302:	8f 2d       	mov	r24, r15
    4304:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    4308:	e3 94       	inc	r14
    430a:	ed 10       	cpse	r14, r13
    430c:	ed cf       	rjmp	.-38     	; 0x42e8 <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	ff 90       	pop	r15
    4318:	ef 90       	pop	r14
    431a:	df 90       	pop	r13
    431c:	cf 90       	pop	r12
    431e:	bf 90       	pop	r11
    4320:	af 90       	pop	r10
    4322:	9f 90       	pop	r9
    4324:	8f 90       	pop	r8
    4326:	7f 90       	pop	r7
    4328:	6f 90       	pop	r6
    432a:	5f 90       	pop	r5
    432c:	3f 90       	pop	r3
    432e:	2f 90       	pop	r2
    4330:	08 95       	ret

00004332 <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    4332:	66 23       	and	r22, r22
    4334:	f4 f0       	brlt	.+60     	; 0x4372 <GLCD_SetFont+0x40>
    4336:	40 34       	cpi	r20, 0x40	; 64
    4338:	e0 f4       	brcc	.+56     	; 0x4372 <GLCD_SetFont+0x40>
    433a:	22 30       	cpi	r18, 0x02	; 2
    433c:	d0 f4       	brcc	.+52     	; 0x4372 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    433e:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <__GLCD+0x5>
    4342:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    4346:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    434a:	40 93 cb 02 	sts	0x02CB, r20	; 0x8002cb <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    434e:	50 e0       	ldi	r21, 0x00	; 0
    4350:	41 50       	subi	r20, 0x01	; 1
    4352:	51 09       	sbc	r21, r1
    4354:	ca 01       	movw	r24, r20
    4356:	99 23       	and	r25, r25
    4358:	0c f4       	brge	.+2      	; 0x435c <GLCD_SetFont+0x2a>
    435a:	07 96       	adiw	r24, 0x07	; 7
    435c:	95 95       	asr	r25
    435e:	87 95       	ror	r24
    4360:	95 95       	asr	r25
    4362:	87 95       	ror	r24
    4364:	95 95       	asr	r25
    4366:	87 95       	ror	r24
    4368:	8f 5f       	subi	r24, 0xFF	; 255
    436a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    436e:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <__GLCD+0x9>
    4372:	08 95       	ret

00004374 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    4374:	2f 92       	push	r2
    4376:	3f 92       	push	r3
    4378:	4f 92       	push	r4
    437a:	5f 92       	push	r5
    437c:	6f 92       	push	r6
    437e:	7f 92       	push	r7
    4380:	8f 92       	push	r8
    4382:	9f 92       	push	r9
    4384:	af 92       	push	r10
    4386:	bf 92       	push	r11
    4388:	cf 92       	push	r12
    438a:	df 92       	push	r13
    438c:	ef 92       	push	r14
    438e:	ff 92       	push	r15
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	2b 97       	sbiw	r28, 0x0b	; 11
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	f8 94       	cli
    43a2:	de bf       	out	0x3e, r29	; 62
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    43a8:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    43ac:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    43ae:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    43b2:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    43b4:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    43b8:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    43ba:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <__GLCD+0x6>
    43be:	29 9f       	mul	r18, r25
    43c0:	90 01       	movw	r18, r0
    43c2:	11 24       	eor	r1, r1
    43c4:	2f 5f       	subi	r18, 0xFF	; 255
    43c6:	3f 4f       	sbci	r19, 0xFF	; 255
    43c8:	82 9f       	mul	r24, r18
    43ca:	a0 01       	movw	r20, r0
    43cc:	83 9f       	mul	r24, r19
    43ce:	50 0d       	add	r21, r0
    43d0:	11 24       	eor	r1, r1
    43d2:	59 87       	std	Y+9, r21	; 0x09
    43d4:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    43d6:	4f 5f       	subi	r20, 0xFF	; 255
    43d8:	5f 4f       	sbci	r21, 0xFF	; 255
    43da:	5e 83       	std	Y+6, r21	; 0x06
    43dc:	4d 83       	std	Y+5, r20	; 0x05
    43de:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <__GLCD+0x4>
    43e2:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <__GLCD+0x5>
    43e6:	a8 85       	ldd	r26, Y+8	; 0x08
    43e8:	b9 85       	ldd	r27, Y+9	; 0x09
    43ea:	ea 0f       	add	r30, r26
    43ec:	fb 1f       	adc	r31, r27
    43ee:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    43f0:	7f 80       	ldd	r7, Y+7	; 0x07
    43f2:	b7 e0       	ldi	r27, 0x07	; 7
    43f4:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    43f6:	99 23       	and	r25, r25
    43f8:	09 f4       	brne	.+2      	; 0x43fc <GLCD_PrintChar+0x88>
    43fa:	92 c0       	rjmp	.+292    	; 0x4520 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    43fc:	ef 81       	ldd	r30, Y+7	; 0x07
    43fe:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    4400:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4402:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4404:	88 e0       	ldi	r24, 0x08	; 8
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	9c 01       	movw	r18, r24
    440a:	27 19       	sub	r18, r7
    440c:	31 09       	sbc	r19, r1
    440e:	3a 83       	std	Y+2, r19	; 0x02
    4410:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4412:	0f 2e       	mov	r0, r31
    4414:	fd ec       	ldi	r31, 0xCD	; 205
    4416:	8f 2e       	mov	r8, r31
    4418:	f2 e0       	ldi	r31, 0x02	; 2
    441a:	9f 2e       	mov	r9, r31
    441c:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    441e:	0f 2e       	mov	r0, r31
    4420:	f6 ec       	ldi	r31, 0xC6	; 198
    4422:	af 2e       	mov	r10, r31
    4424:	f2 e0       	ldi	r31, 0x02	; 2
    4426:	bf 2e       	mov	r11, r31
    4428:	f0 2d       	mov	r31, r0
    442a:	05 ec       	ldi	r16, 0xC5	; 197
    442c:	12 e0       	ldi	r17, 0x02	; 2
    442e:	67 2c       	mov	r6, r7
    4430:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    4432:	6b 81       	ldd	r22, Y+3	; 0x03
    4434:	8c 81       	ldd	r24, Y+4	; 0x04
    4436:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    443a:	4d 81       	ldd	r20, Y+5	; 0x05
    443c:	5e 81       	ldd	r21, Y+6	; 0x06
    443e:	43 0d       	add	r20, r3
    4440:	51 1d       	adc	r21, r1
    4442:	5b 87       	std	Y+11, r21	; 0x0b
    4444:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    4446:	7a 01       	movw	r14, r20
    4448:	51 e0       	ldi	r21, 0x01	; 1
    444a:	e5 1a       	sub	r14, r21
    444c:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    444e:	77 20       	and	r7, r7
    4450:	09 f4       	brne	.+2      	; 0x4454 <GLCD_PrintChar+0xe0>
    4452:	4f c0       	rjmp	.+158    	; 0x44f2 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    4454:	0f 2e       	mov	r0, r31
    4456:	fc ec       	ldi	r31, 0xCC	; 204
    4458:	cf 2e       	mov	r12, r31
    445a:	f2 e0       	ldi	r31, 0x02	; 2
    445c:	df 2e       	mov	r13, r31
    445e:	f0 2d       	mov	r31, r0
    4460:	83 2d       	mov	r24, r3
    4462:	36 2c       	mov	r3, r6
    4464:	67 2c       	mov	r6, r7
    4466:	72 2c       	mov	r7, r2
    4468:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    446a:	a8 ec       	ldi	r26, 0xC8	; 200
    446c:	b2 e0       	ldi	r27, 0x02	; 2
    446e:	2d 91       	ld	r18, X+
    4470:	3c 91       	ld	r19, X
    4472:	ea 85       	ldd	r30, Y+10	; 0x0a
    4474:	fb 85       	ldd	r31, Y+11	; 0x0b
    4476:	e2 0f       	add	r30, r18
    4478:	f3 1f       	adc	r31, r19
    447a:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    447c:	4e 2e       	mov	r4, r30
    447e:	03 2c       	mov	r0, r3
    4480:	01 c0       	rjmp	.+2      	; 0x4484 <GLCD_PrintChar+0x110>
    4482:	44 0c       	add	r4, r4
    4484:	0a 94       	dec	r0
    4486:	ea f7       	brpl	.-6      	; 0x4482 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    4488:	55 20       	and	r5, r5
    448a:	81 f0       	breq	.+32     	; 0x44ac <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    448c:	f9 01       	movw	r30, r18
    448e:	ee 0d       	add	r30, r14
    4490:	ff 1d       	adc	r31, r15
    4492:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	09 80       	ldd	r0, Y+1	; 0x01
    4498:	02 c0       	rjmp	.+4      	; 0x449e <GLCD_PrintChar+0x12a>
    449a:	35 95       	asr	r19
    449c:	27 95       	ror	r18
    449e:	0a 94       	dec	r0
    44a0:	e2 f7       	brpl	.-8      	; 0x449a <GLCD_PrintChar+0x126>
				data |= dataPrev;
    44a2:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    44a4:	f6 01       	movw	r30, r12
    44a6:	80 81       	ld	r24, Z
    44a8:	e8 0e       	add	r14, r24
    44aa:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    44ac:	d4 01       	movw	r26, r8
    44ae:	8c 91       	ld	r24, X
    44b0:	81 30       	cpi	r24, 0x01	; 1
    44b2:	39 f4       	brne	.+14     	; 0x44c2 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    44b4:	f5 01       	movw	r30, r10
    44b6:	60 81       	ld	r22, Z
    44b8:	d8 01       	movw	r26, r16
    44ba:	8c 91       	ld	r24, X
    44bc:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
    44c0:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    44c2:	f5 01       	movw	r30, r10
    44c4:	60 81       	ld	r22, Z
    44c6:	d8 01       	movw	r26, r16
    44c8:	8c 91       	ld	r24, X
    44ca:	98 2f       	mov	r25, r24
    44cc:	9f 5f       	subi	r25, 0xFF	; 255
    44ce:	9c 93       	st	X, r25
    44d0:	44 2d       	mov	r20, r4
    44d2:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    44d6:	f6 01       	movw	r30, r12
    44d8:	80 81       	ld	r24, Z
    44da:	2a 85       	ldd	r18, Y+10	; 0x0a
    44dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    44de:	28 0f       	add	r18, r24
    44e0:	31 1d       	adc	r19, r1
    44e2:	3b 87       	std	Y+11, r19	; 0x0b
    44e4:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    44e6:	73 94       	inc	r7
    44e8:	76 10       	cpse	r7, r6
    44ea:	bf cf       	rjmp	.-130    	; 0x446a <GLCD_PrintChar+0xf6>
    44ec:	76 2c       	mov	r7, r6
    44ee:	63 2c       	mov	r6, r3
    44f0:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    44f2:	d4 01       	movw	r26, r8
    44f4:	8c 91       	ld	r24, X
    44f6:	81 11       	cpse	r24, r1
    44f8:	07 c0       	rjmp	.+14     	; 0x4508 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    44fa:	42 2d       	mov	r20, r2
    44fc:	f5 01       	movw	r30, r10
    44fe:	60 81       	ld	r22, Z
    4500:	d8 01       	movw	r26, r16
    4502:	8c 91       	ld	r24, X
    4504:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    4508:	bb 81       	ldd	r27, Y+3	; 0x03
    450a:	b8 5f       	subi	r27, 0xF8	; 248
    450c:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    450e:	33 94       	inc	r3
    4510:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__GLCD+0x8>
    4514:	38 16       	cp	r3, r24
    4516:	08 f4       	brcc	.+2      	; 0x451a <GLCD_PrintChar+0x1a6>
    4518:	8c cf       	rjmp	.-232    	; 0x4432 <GLCD_PrintChar+0xbe>
    451a:	57 2c       	mov	r5, r7
    451c:	76 2c       	mov	r7, r6
    451e:	03 c0       	rjmp	.+6      	; 0x4526 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    4520:	ef 81       	ldd	r30, Y+7	; 0x07
    4522:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    4524:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    4526:	2f 81       	ldd	r18, Y+7	; 0x07
    4528:	22 95       	swap	r18
    452a:	26 95       	lsr	r18
    452c:	26 95       	lsr	r18
    452e:	23 70       	andi	r18, 0x03	; 3
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <__GLCD+0x7>
    4536:	82 95       	swap	r24
    4538:	86 95       	lsr	r24
    453a:	86 95       	lsr	r24
    453c:	83 70       	andi	r24, 0x03	; 3
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	ff 81       	ldd	r31, Y+7	; 0x07
    4542:	8f 0f       	add	r24, r31
    4544:	91 1d       	adc	r25, r1
    4546:	28 17       	cp	r18, r24
    4548:	39 07       	cpc	r19, r25
    454a:	09 f4       	brne	.+2      	; 0x454e <GLCD_PrintChar+0x1da>
    454c:	69 c0       	rjmp	.+210    	; 0x4620 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    454e:	6b 81       	ldd	r22, Y+3	; 0x03
    4550:	8c 81       	ldd	r24, Y+4	; 0x04
    4552:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    4556:	28 85       	ldd	r18, Y+8	; 0x08
    4558:	39 85       	ldd	r19, Y+9	; 0x09
    455a:	23 0d       	add	r18, r3
    455c:	31 1d       	adc	r19, r1
    455e:	3a 83       	std	Y+2, r19	; 0x02
    4560:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4562:	55 20       	and	r5, r5
    4564:	09 f4       	brne	.+2      	; 0x4568 <GLCD_PrintChar+0x1f4>
    4566:	51 c0       	rjmp	.+162    	; 0x460a <GLCD_PrintChar+0x296>
    4568:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    456a:	0f 2e       	mov	r0, r31
    456c:	f6 ec       	ldi	r31, 0xC6	; 198
    456e:	af 2e       	mov	r10, r31
    4570:	f2 e0       	ldi	r31, 0x02	; 2
    4572:	bf 2e       	mov	r11, r31
    4574:	f0 2d       	mov	r31, r0
    4576:	05 ec       	ldi	r16, 0xC5	; 197
    4578:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    457a:	0f 2e       	mov	r0, r31
    457c:	f8 ec       	ldi	r31, 0xC8	; 200
    457e:	cf 2e       	mov	r12, r31
    4580:	f2 e0       	ldi	r31, 0x02	; 2
    4582:	df 2e       	mov	r13, r31
    4584:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4586:	88 e0       	ldi	r24, 0x08	; 8
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	ac 01       	movw	r20, r24
    458c:	47 19       	sub	r20, r7
    458e:	51 09       	sbc	r21, r1
    4590:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4592:	0f 2e       	mov	r0, r31
    4594:	fd ec       	ldi	r31, 0xCD	; 205
    4596:	ef 2e       	mov	r14, r31
    4598:	f2 e0       	ldi	r31, 0x02	; 2
    459a:	ff 2e       	mov	r15, r31
    459c:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    459e:	0f 2e       	mov	r0, r31
    45a0:	fc ec       	ldi	r31, 0xCC	; 204
    45a2:	8f 2e       	mov	r8, r31
    45a4:	f2 e0       	ldi	r31, 0x02	; 2
    45a6:	9f 2e       	mov	r9, r31
    45a8:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    45aa:	d5 01       	movw	r26, r10
    45ac:	2c 90       	ld	r2, X
    45ae:	f8 01       	movw	r30, r16
    45b0:	40 80       	ld	r4, Z
    45b2:	62 2d       	mov	r22, r2
    45b4:	84 2d       	mov	r24, r4
    45b6:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    45ba:	d6 01       	movw	r26, r12
    45bc:	ed 91       	ld	r30, X+
    45be:	fc 91       	ld	r31, X
    45c0:	29 81       	ldd	r18, Y+1	; 0x01
    45c2:	3a 81       	ldd	r19, Y+2	; 0x02
    45c4:	e2 0f       	add	r30, r18
    45c6:	f3 1f       	adc	r31, r19
    45c8:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    45ca:	50 e0       	ldi	r21, 0x00	; 0
    45cc:	06 2c       	mov	r0, r6
    45ce:	02 c0       	rjmp	.+4      	; 0x45d4 <GLCD_PrintChar+0x260>
    45d0:	55 95       	asr	r21
    45d2:	47 95       	ror	r20
    45d4:	0a 94       	dec	r0
    45d6:	e2 f7       	brpl	.-8      	; 0x45d0 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    45d8:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    45da:	d7 01       	movw	r26, r14
    45dc:	9c 91       	ld	r25, X
    45de:	91 30       	cpi	r25, 0x01	; 1
    45e0:	09 f4       	brne	.+2      	; 0x45e4 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    45e2:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    45e4:	84 2d       	mov	r24, r4
    45e6:	8f 5f       	subi	r24, 0xFF	; 255
    45e8:	f8 01       	movw	r30, r16
    45ea:	80 83       	st	Z, r24
    45ec:	62 2d       	mov	r22, r2
    45ee:	84 2d       	mov	r24, r4
    45f0:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    45f4:	d4 01       	movw	r26, r8
    45f6:	8c 91       	ld	r24, X
    45f8:	e9 81       	ldd	r30, Y+1	; 0x01
    45fa:	fa 81       	ldd	r31, Y+2	; 0x02
    45fc:	e8 0f       	add	r30, r24
    45fe:	f1 1d       	adc	r31, r1
    4600:	fa 83       	std	Y+2, r31	; 0x02
    4602:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4604:	33 94       	inc	r3
    4606:	35 10       	cpse	r3, r5
    4608:	d0 cf       	rjmp	.-96     	; 0x45aa <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    460a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <__GLCD+0x9>
    460e:	81 11       	cpse	r24, r1
    4610:	07 c0       	rjmp	.+14     	; 0x4620 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <__GLCD+0x2>
    4618:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    461c:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    4620:	8c 81       	ldd	r24, Y+4	; 0x04
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	6f 81       	ldd	r22, Y+7	; 0x07
    4626:	85 0d       	add	r24, r5
    4628:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <GLCD_GotoXY>
}
    462c:	2b 96       	adiw	r28, 0x0b	; 11
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	df 91       	pop	r29
    463a:	cf 91       	pop	r28
    463c:	1f 91       	pop	r17
    463e:	0f 91       	pop	r16
    4640:	ff 90       	pop	r15
    4642:	ef 90       	pop	r14
    4644:	df 90       	pop	r13
    4646:	cf 90       	pop	r12
    4648:	bf 90       	pop	r11
    464a:	af 90       	pop	r10
    464c:	9f 90       	pop	r9
    464e:	8f 90       	pop	r8
    4650:	7f 90       	pop	r7
    4652:	6f 90       	pop	r6
    4654:	5f 90       	pop	r5
    4656:	4f 90       	pop	r4
    4658:	3f 90       	pop	r3
    465a:	2f 90       	pop	r2
    465c:	08 95       	ret

0000465e <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    465e:	ef 92       	push	r14
    4660:	ff 92       	push	r15
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	ec 01       	movw	r28, r24
	while(*Text)
    466c:	88 81       	ld	r24, Y
    466e:	88 23       	and	r24, r24
    4670:	19 f1       	breq	.+70     	; 0x46b8 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4672:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__GLCD+0x1>
    4676:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <__GLCD+0x6>
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	29 0f       	add	r18, r25
    467e:	31 1d       	adc	r19, r1
    4680:	20 38       	cpi	r18, 0x80	; 128
    4682:	31 05       	cpc	r19, r1
    4684:	cc f4       	brge	.+50     	; 0x46b8 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    4686:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4688:	0f 2e       	mov	r0, r31
    468a:	f5 ec       	ldi	r31, 0xC5	; 197
    468c:	ef 2e       	mov	r14, r31
    468e:	f2 e0       	ldi	r31, 0x02	; 2
    4690:	ff 2e       	mov	r15, r31
    4692:	f0 2d       	mov	r31, r0
    4694:	0a ec       	ldi	r16, 0xCA	; 202
    4696:	12 e0       	ldi	r17, 0x02	; 2
    4698:	0a c0       	rjmp	.+20     	; 0x46ae <GLCD_PrintString+0x50>
    469a:	f7 01       	movw	r30, r14
    469c:	90 81       	ld	r25, Z
    469e:	f8 01       	movw	r30, r16
    46a0:	20 81       	ld	r18, Z
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	29 0f       	add	r18, r25
    46a6:	31 1d       	adc	r19, r1
    46a8:	20 38       	cpi	r18, 0x80	; 128
    46aa:	31 05       	cpc	r19, r1
    46ac:	2c f4       	brge	.+10     	; 0x46b8 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    46ae:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    46b2:	89 91       	ld	r24, Y+
    46b4:	81 11       	cpse	r24, r1
    46b6:	f1 cf       	rjmp	.-30     	; 0x469a <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    46b8:	df 91       	pop	r29
    46ba:	cf 91       	pop	r28
    46bc:	1f 91       	pop	r17
    46be:	0f 91       	pop	r16
    46c0:	ff 90       	pop	r15
    46c2:	ef 90       	pop	r14
    46c4:	08 95       	ret

000046c6 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    46c6:	0f 93       	push	r16
    46c8:	1f 93       	push	r17
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
    46d2:	2c 97       	sbiw	r28, 0x0c	; 12
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	f8 94       	cli
    46d8:	de bf       	out	0x3e, r29	; 62
    46da:	0f be       	out	0x3f, r0	; 63
    46dc:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    46de:	61 15       	cp	r22, r1
    46e0:	71 05       	cpc	r23, r1
    46e2:	81 05       	cpc	r24, r1
    46e4:	91 05       	cpc	r25, r1
    46e6:	21 f4       	brne	.+8      	; 0x46f0 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    46e8:	80 e3       	ldi	r24, 0x30	; 48
    46ea:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
    46ee:	45 c1       	rjmp	.+650    	; 0x497a <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    46f0:	61 15       	cp	r22, r1
    46f2:	71 05       	cpc	r23, r1
    46f4:	81 05       	cpc	r24, r1
    46f6:	20 e8       	ldi	r18, 0x80	; 128
    46f8:	92 07       	cpc	r25, r18
    46fa:	09 f4       	brne	.+2      	; 0x46fe <GLCD_PrintInteger+0x38>
    46fc:	3e c1       	rjmp	.+636    	; 0x497a <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    46fe:	fe 01       	movw	r30, r28
    4700:	31 96       	adiw	r30, 0x01	; 1
    4702:	2c e0       	ldi	r18, 0x0C	; 12
    4704:	df 01       	movw	r26, r30
    4706:	1d 92       	st	X+, r1
    4708:	2a 95       	dec	r18
    470a:	e9 f7       	brne	.-6      	; 0x4706 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    470c:	20 e3       	ldi	r18, 0x30	; 48
    470e:	2b 87       	std	Y+11, r18	; 0x0b
    4710:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    4712:	29 87       	std	Y+9, r18	; 0x09
    4714:	28 87       	std	Y+8, r18	; 0x08
    4716:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    4718:	2e 83       	std	Y+6, r18	; 0x06
    471a:	2d 83       	std	Y+5, r18	; 0x05
    471c:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    471e:	2b 83       	std	Y+3, r18	; 0x03
    4720:	2a 83       	std	Y+2, r18	; 0x02
    4722:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    4724:	99 23       	and	r25, r25
    4726:	5c f4       	brge	.+22     	; 0x473e <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    4728:	9b 01       	movw	r18, r22
    472a:	ac 01       	movw	r20, r24
    472c:	88 27       	eor	r24, r24
    472e:	99 27       	eor	r25, r25
    4730:	dc 01       	movw	r26, r24
    4732:	82 1b       	sub	r24, r18
    4734:	93 0b       	sbc	r25, r19
    4736:	a4 0b       	sbc	r26, r20
    4738:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    473a:	41 e0       	ldi	r20, 0x01	; 1
    473c:	03 c0       	rjmp	.+6      	; 0x4744 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    473e:	dc 01       	movw	r26, r24
    4740:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    4742:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    4744:	81 30       	cpi	r24, 0x01	; 1
    4746:	3a ec       	ldi	r19, 0xCA	; 202
    4748:	93 07       	cpc	r25, r19
    474a:	3a e9       	ldi	r19, 0x9A	; 154
    474c:	a3 07       	cpc	r26, r19
    474e:	3b e3       	ldi	r19, 0x3B	; 59
    4750:	b3 07       	cpc	r27, r19
    4752:	94 f0       	brlt	.+36     	; 0x4778 <GLCD_PrintInteger+0xb2>
    4754:	2a 81       	ldd	r18, Y+2	; 0x02
    4756:	2f 5f       	subi	r18, 0xFF	; 255
    4758:	01 c0       	rjmp	.+2      	; 0x475c <GLCD_PrintInteger+0x96>
    475a:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    475c:	9a 5c       	subi	r25, 0xCA	; 202
    475e:	aa 49       	sbci	r26, 0x9A	; 154
    4760:	bb 43       	sbci	r27, 0x3B	; 59
    4762:	32 2f       	mov	r19, r18
    4764:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    4766:	81 30       	cpi	r24, 0x01	; 1
    4768:	5a ec       	ldi	r21, 0xCA	; 202
    476a:	95 07       	cpc	r25, r21
    476c:	5a e9       	ldi	r21, 0x9A	; 154
    476e:	a5 07       	cpc	r26, r21
    4770:	5b e3       	ldi	r21, 0x3B	; 59
    4772:	b5 07       	cpc	r27, r21
    4774:	94 f7       	brge	.-28     	; 0x475a <GLCD_PrintInteger+0x94>
    4776:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4778:	81 15       	cp	r24, r1
    477a:	21 ee       	ldi	r18, 0xE1	; 225
    477c:	92 07       	cpc	r25, r18
    477e:	25 ef       	ldi	r18, 0xF5	; 245
    4780:	a2 07       	cpc	r26, r18
    4782:	25 e0       	ldi	r18, 0x05	; 5
    4784:	b2 07       	cpc	r27, r18
    4786:	94 f0       	brlt	.+36     	; 0x47ac <GLCD_PrintInteger+0xe6>
    4788:	2b 81       	ldd	r18, Y+3	; 0x03
    478a:	2f 5f       	subi	r18, 0xFF	; 255
    478c:	01 c0       	rjmp	.+2      	; 0x4790 <GLCD_PrintInteger+0xca>
    478e:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    4790:	91 5e       	subi	r25, 0xE1	; 225
    4792:	a5 4f       	sbci	r26, 0xF5	; 245
    4794:	b5 40       	sbci	r27, 0x05	; 5
    4796:	32 2f       	mov	r19, r18
    4798:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    479a:	81 15       	cp	r24, r1
    479c:	51 ee       	ldi	r21, 0xE1	; 225
    479e:	95 07       	cpc	r25, r21
    47a0:	55 ef       	ldi	r21, 0xF5	; 245
    47a2:	a5 07       	cpc	r26, r21
    47a4:	55 e0       	ldi	r21, 0x05	; 5
    47a6:	b5 07       	cpc	r27, r21
    47a8:	94 f7       	brge	.-28     	; 0x478e <GLCD_PrintInteger+0xc8>
    47aa:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    47ac:	80 38       	cpi	r24, 0x80	; 128
    47ae:	26 e9       	ldi	r18, 0x96	; 150
    47b0:	92 07       	cpc	r25, r18
    47b2:	28 e9       	ldi	r18, 0x98	; 152
    47b4:	a2 07       	cpc	r26, r18
    47b6:	b1 05       	cpc	r27, r1
    47b8:	94 f0       	brlt	.+36     	; 0x47de <GLCD_PrintInteger+0x118>
    47ba:	2c 81       	ldd	r18, Y+4	; 0x04
    47bc:	2f 5f       	subi	r18, 0xFF	; 255
    47be:	01 c0       	rjmp	.+2      	; 0x47c2 <GLCD_PrintInteger+0xfc>
    47c0:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    47c2:	80 58       	subi	r24, 0x80	; 128
    47c4:	96 49       	sbci	r25, 0x96	; 150
    47c6:	a8 49       	sbci	r26, 0x98	; 152
    47c8:	b1 09       	sbc	r27, r1
    47ca:	32 2f       	mov	r19, r18
    47cc:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    47ce:	80 38       	cpi	r24, 0x80	; 128
    47d0:	56 e9       	ldi	r21, 0x96	; 150
    47d2:	95 07       	cpc	r25, r21
    47d4:	58 e9       	ldi	r21, 0x98	; 152
    47d6:	a5 07       	cpc	r26, r21
    47d8:	b1 05       	cpc	r27, r1
    47da:	94 f7       	brge	.-28     	; 0x47c0 <GLCD_PrintInteger+0xfa>
    47dc:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    47de:	80 34       	cpi	r24, 0x40	; 64
    47e0:	22 e4       	ldi	r18, 0x42	; 66
    47e2:	92 07       	cpc	r25, r18
    47e4:	2f e0       	ldi	r18, 0x0F	; 15
    47e6:	a2 07       	cpc	r26, r18
    47e8:	b1 05       	cpc	r27, r1
    47ea:	94 f0       	brlt	.+36     	; 0x4810 <GLCD_PrintInteger+0x14a>
    47ec:	2d 81       	ldd	r18, Y+5	; 0x05
    47ee:	2f 5f       	subi	r18, 0xFF	; 255
    47f0:	01 c0       	rjmp	.+2      	; 0x47f4 <GLCD_PrintInteger+0x12e>
    47f2:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    47f4:	80 54       	subi	r24, 0x40	; 64
    47f6:	92 44       	sbci	r25, 0x42	; 66
    47f8:	af 40       	sbci	r26, 0x0F	; 15
    47fa:	b1 09       	sbc	r27, r1
    47fc:	32 2f       	mov	r19, r18
    47fe:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    4800:	80 34       	cpi	r24, 0x40	; 64
    4802:	52 e4       	ldi	r21, 0x42	; 66
    4804:	95 07       	cpc	r25, r21
    4806:	5f e0       	ldi	r21, 0x0F	; 15
    4808:	a5 07       	cpc	r26, r21
    480a:	b1 05       	cpc	r27, r1
    480c:	94 f7       	brge	.-28     	; 0x47f2 <GLCD_PrintInteger+0x12c>
    480e:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    4810:	80 3a       	cpi	r24, 0xA0	; 160
    4812:	26 e8       	ldi	r18, 0x86	; 134
    4814:	92 07       	cpc	r25, r18
    4816:	21 e0       	ldi	r18, 0x01	; 1
    4818:	a2 07       	cpc	r26, r18
    481a:	b1 05       	cpc	r27, r1
    481c:	94 f0       	brlt	.+36     	; 0x4842 <GLCD_PrintInteger+0x17c>
    481e:	2e 81       	ldd	r18, Y+6	; 0x06
    4820:	2f 5f       	subi	r18, 0xFF	; 255
    4822:	01 c0       	rjmp	.+2      	; 0x4826 <GLCD_PrintInteger+0x160>
    4824:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    4826:	80 5a       	subi	r24, 0xA0	; 160
    4828:	96 48       	sbci	r25, 0x86	; 134
    482a:	a1 40       	sbci	r26, 0x01	; 1
    482c:	b1 09       	sbc	r27, r1
    482e:	32 2f       	mov	r19, r18
    4830:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    4832:	80 3a       	cpi	r24, 0xA0	; 160
    4834:	56 e8       	ldi	r21, 0x86	; 134
    4836:	95 07       	cpc	r25, r21
    4838:	51 e0       	ldi	r21, 0x01	; 1
    483a:	a5 07       	cpc	r26, r21
    483c:	b1 05       	cpc	r27, r1
    483e:	94 f7       	brge	.-28     	; 0x4824 <GLCD_PrintInteger+0x15e>
    4840:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    4842:	80 31       	cpi	r24, 0x10	; 16
    4844:	27 e2       	ldi	r18, 0x27	; 39
    4846:	92 07       	cpc	r25, r18
    4848:	a1 05       	cpc	r26, r1
    484a:	b1 05       	cpc	r27, r1
    484c:	8c f0       	brlt	.+34     	; 0x4870 <GLCD_PrintInteger+0x1aa>
    484e:	2f 81       	ldd	r18, Y+7	; 0x07
    4850:	2f 5f       	subi	r18, 0xFF	; 255
    4852:	01 c0       	rjmp	.+2      	; 0x4856 <GLCD_PrintInteger+0x190>
    4854:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    4856:	80 51       	subi	r24, 0x10	; 16
    4858:	97 42       	sbci	r25, 0x27	; 39
    485a:	a1 09       	sbc	r26, r1
    485c:	b1 09       	sbc	r27, r1
    485e:	32 2f       	mov	r19, r18
    4860:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    4862:	80 31       	cpi	r24, 0x10	; 16
    4864:	57 e2       	ldi	r21, 0x27	; 39
    4866:	95 07       	cpc	r25, r21
    4868:	a1 05       	cpc	r26, r1
    486a:	b1 05       	cpc	r27, r1
    486c:	9c f7       	brge	.-26     	; 0x4854 <GLCD_PrintInteger+0x18e>
    486e:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4870:	88 3e       	cpi	r24, 0xE8	; 232
    4872:	23 e0       	ldi	r18, 0x03	; 3
    4874:	92 07       	cpc	r25, r18
    4876:	a1 05       	cpc	r26, r1
    4878:	b1 05       	cpc	r27, r1
    487a:	8c f0       	brlt	.+34     	; 0x489e <GLCD_PrintInteger+0x1d8>
    487c:	28 85       	ldd	r18, Y+8	; 0x08
    487e:	2f 5f       	subi	r18, 0xFF	; 255
    4880:	01 c0       	rjmp	.+2      	; 0x4884 <GLCD_PrintInteger+0x1be>
    4882:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    4884:	88 5e       	subi	r24, 0xE8	; 232
    4886:	93 40       	sbci	r25, 0x03	; 3
    4888:	a1 09       	sbc	r26, r1
    488a:	b1 09       	sbc	r27, r1
    488c:	32 2f       	mov	r19, r18
    488e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4890:	88 3e       	cpi	r24, 0xE8	; 232
    4892:	53 e0       	ldi	r21, 0x03	; 3
    4894:	95 07       	cpc	r25, r21
    4896:	a1 05       	cpc	r26, r1
    4898:	b1 05       	cpc	r27, r1
    489a:	9c f7       	brge	.-26     	; 0x4882 <GLCD_PrintInteger+0x1bc>
    489c:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    489e:	84 36       	cpi	r24, 0x64	; 100
    48a0:	91 05       	cpc	r25, r1
    48a2:	a1 05       	cpc	r26, r1
    48a4:	b1 05       	cpc	r27, r1
    48a6:	84 f0       	brlt	.+32     	; 0x48c8 <GLCD_PrintInteger+0x202>
    48a8:	29 85       	ldd	r18, Y+9	; 0x09
    48aa:	2f 5f       	subi	r18, 0xFF	; 255
    48ac:	01 c0       	rjmp	.+2      	; 0x48b0 <GLCD_PrintInteger+0x1ea>
    48ae:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    48b0:	84 56       	subi	r24, 0x64	; 100
    48b2:	91 09       	sbc	r25, r1
    48b4:	a1 09       	sbc	r26, r1
    48b6:	b1 09       	sbc	r27, r1
    48b8:	32 2f       	mov	r19, r18
    48ba:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    48bc:	84 36       	cpi	r24, 0x64	; 100
    48be:	91 05       	cpc	r25, r1
    48c0:	a1 05       	cpc	r26, r1
    48c2:	b1 05       	cpc	r27, r1
    48c4:	a4 f7       	brge	.-24     	; 0x48ae <GLCD_PrintInteger+0x1e8>
    48c6:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    48c8:	8a 30       	cpi	r24, 0x0A	; 10
    48ca:	91 05       	cpc	r25, r1
    48cc:	a1 05       	cpc	r26, r1
    48ce:	b1 05       	cpc	r27, r1
    48d0:	7c f0       	brlt	.+30     	; 0x48f0 <GLCD_PrintInteger+0x22a>
    48d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    48d4:	2f 5f       	subi	r18, 0xFF	; 255
    48d6:	01 c0       	rjmp	.+2      	; 0x48da <GLCD_PrintInteger+0x214>
    48d8:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    48da:	0a 97       	sbiw	r24, 0x0a	; 10
    48dc:	a1 09       	sbc	r26, r1
    48de:	b1 09       	sbc	r27, r1
    48e0:	32 2f       	mov	r19, r18
    48e2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    48e4:	8a 30       	cpi	r24, 0x0A	; 10
    48e6:	91 05       	cpc	r25, r1
    48e8:	a1 05       	cpc	r26, r1
    48ea:	b1 05       	cpc	r27, r1
    48ec:	ac f7       	brge	.-22     	; 0x48d8 <GLCD_PrintInteger+0x212>
    48ee:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    48f0:	18 16       	cp	r1, r24
    48f2:	19 06       	cpc	r1, r25
    48f4:	1a 06       	cpc	r1, r26
    48f6:	1b 06       	cpc	r1, r27
    48f8:	5c f4       	brge	.+22     	; 0x4910 <GLCD_PrintInteger+0x24a>
    48fa:	5b 85       	ldd	r21, Y+11	; 0x0b
    48fc:	8c 01       	movw	r16, r24
    48fe:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    4900:	01 50       	subi	r16, 0x01	; 1
    4902:	11 09       	sbc	r17, r1
    4904:	21 09       	sbc	r18, r1
    4906:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    4908:	d9 f7       	brne	.-10     	; 0x4900 <GLCD_PrintInteger+0x23a>
    490a:	65 2f       	mov	r22, r21
    490c:	68 0f       	add	r22, r24
    490e:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    4910:	89 81       	ldd	r24, Y+1	; 0x01
    4912:	80 33       	cpi	r24, 0x30	; 48
    4914:	61 f4       	brne	.+24     	; 0x492e <GLCD_PrintInteger+0x268>
    4916:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    4918:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    491a:	e1 e0       	ldi	r30, 0x01	; 1
    491c:	f0 e0       	ldi	r31, 0x00	; 0
    491e:	ec 0f       	add	r30, r28
    4920:	fd 1f       	adc	r31, r29
    4922:	e8 0f       	add	r30, r24
    4924:	f1 1d       	adc	r31, r1
    4926:	90 81       	ld	r25, Z
    4928:	90 33       	cpi	r25, 0x30	; 48
    492a:	b1 f3       	breq	.-20     	; 0x4918 <GLCD_PrintInteger+0x252>
    492c:	01 c0       	rjmp	.+2      	; 0x4930 <GLCD_PrintInteger+0x26a>
    492e:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    4930:	44 23       	and	r20, r20
    4932:	31 f0       	breq	.+12     	; 0x4940 <GLCD_PrintInteger+0x27a>
	{
		i--;
    4934:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    4936:	fe 01       	movw	r30, r28
    4938:	e8 0f       	add	r30, r24
    493a:	f1 1d       	adc	r31, r1
    493c:	9d e2       	ldi	r25, 0x2D	; 45
    493e:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    4940:	4a e0       	ldi	r20, 0x0A	; 10
    4942:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    4944:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	e1 e0       	ldi	r30, 0x01	; 1
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	ec 0f       	add	r30, r28
    494e:	fd 1f       	adc	r31, r29
    4950:	e2 0f       	add	r30, r18
    4952:	f1 1d       	adc	r31, r1
    4954:	df 01       	movw	r26, r30
    4956:	a8 0f       	add	r26, r24
    4958:	b9 1f       	adc	r27, r25
    495a:	3c 91       	ld	r19, X
    495c:	30 83       	st	Z, r19
		i++;
    495e:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    4960:	42 17       	cp	r20, r18
    4962:	90 f7       	brcc	.-28     	; 0x4948 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    4964:	e1 e0       	ldi	r30, 0x01	; 1
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	ec 0f       	add	r30, r28
    496a:	fd 1f       	adc	r31, r29
    496c:	e2 0f       	add	r30, r18
    496e:	f1 1d       	adc	r31, r1
    4970:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    4972:	ce 01       	movw	r24, r28
    4974:	01 96       	adiw	r24, 0x01	; 1
    4976:	0e 94 2f 23 	call	0x465e	; 0x465e <GLCD_PrintString>
	}
}
    497a:	2c 96       	adiw	r28, 0x0c	; 12
    497c:	0f b6       	in	r0, 0x3f	; 63
    497e:	f8 94       	cli
    4980:	de bf       	out	0x3e, r29	; 62
    4982:	0f be       	out	0x3f, r0	; 63
    4984:	cd bf       	out	0x3d, r28	; 61
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	1f 91       	pop	r17
    498c:	0f 91       	pop	r16
    498e:	08 95       	ret

00004990 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    4990:	8f 92       	push	r8
    4992:	9f 92       	push	r9
    4994:	af 92       	push	r10
    4996:	bf 92       	push	r11
    4998:	cf 92       	push	r12
    499a:	df 92       	push	r13
    499c:	ef 92       	push	r14
    499e:	ff 92       	push	r15
    49a0:	6b 01       	movw	r12, r22
    49a2:	7c 01       	movw	r14, r24
    49a4:	49 01       	movw	r8, r18
    49a6:	5a 01       	movw	r10, r20
	if (Value == 0)
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	a9 01       	movw	r20, r18
    49ae:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    49b2:	81 11       	cpse	r24, r1
    49b4:	0a c0       	rjmp	.+20     	; 0x49ca <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    49b6:	80 e3       	ldi	r24, 0x30	; 48
    49b8:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    49bc:	8e e2       	ldi	r24, 0x2E	; 46
    49be:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    49c2:	80 e3       	ldi	r24, 0x30	; 48
    49c4:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
    49c8:	4a c0       	rjmp	.+148    	; 0x4a5e <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	40 e0       	ldi	r20, 0x00	; 0
    49d0:	5f ec       	ldi	r21, 0xCF	; 207
    49d2:	c7 01       	movw	r24, r14
    49d4:	b6 01       	movw	r22, r12
    49d6:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__gesf2>
    49da:	88 23       	and	r24, r24
    49dc:	0c f4       	brge	.+2      	; 0x49e0 <GLCD_PrintDouble+0x50>
    49de:	3f c0       	rjmp	.+126    	; 0x4a5e <GLCD_PrintDouble+0xce>
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	40 e0       	ldi	r20, 0x00	; 0
    49e6:	5f e4       	ldi	r21, 0x4F	; 79
    49e8:	c7 01       	movw	r24, r14
    49ea:	b6 01       	movw	r22, r12
    49ec:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    49f0:	88 23       	and	r24, r24
    49f2:	ac f5       	brge	.+106    	; 0x4a5e <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    49f4:	20 e0       	ldi	r18, 0x00	; 0
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	a9 01       	movw	r20, r18
    49fa:	c7 01       	movw	r24, r14
    49fc:	b6 01       	movw	r22, r12
    49fe:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__cmpsf2>
    4a02:	88 23       	and	r24, r24
    4a04:	3c f4       	brge	.+14     	; 0x4a14 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    4a06:	f7 fa       	bst	r15, 7
    4a08:	f0 94       	com	r15
    4a0a:	f7 f8       	bld	r15, 7
    4a0c:	f0 94       	com	r15
			GLCD_PrintChar('-');
    4a0e:	8d e2       	ldi	r24, 0x2D	; 45
    4a10:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    4a14:	c7 01       	movw	r24, r14
    4a16:	b6 01       	movw	r22, r12
    4a18:	0e 94 40 26 	call	0x4c80	; 0x4c80 <__fixsfsi>
    4a1c:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    4a20:	8e e2       	ldi	r24, 0x2E	; 46
    4a22:	0e 94 ba 21 	call	0x4374	; 0x4374 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    4a26:	c7 01       	movw	r24, r14
    4a28:	b6 01       	movw	r22, r12
    4a2a:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    4a2e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    4a32:	9b 01       	movw	r18, r22
    4a34:	ac 01       	movw	r20, r24
    4a36:	c7 01       	movw	r24, r14
    4a38:	b6 01       	movw	r22, r12
    4a3a:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <__subsf3>
    4a3e:	6b 01       	movw	r12, r22
    4a40:	7c 01       	movw	r14, r24
    4a42:	c5 01       	movw	r24, r10
    4a44:	b4 01       	movw	r22, r8
    4a46:	0e 94 76 26 	call	0x4cec	; 0x4cec <__floatunsisf>
    4a4a:	9b 01       	movw	r18, r22
    4a4c:	ac 01       	movw	r20, r24
    4a4e:	c7 01       	movw	r24, r14
    4a50:	b6 01       	movw	r22, r12
    4a52:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__mulsf3>
    4a56:	0e 94 40 26 	call	0x4c80	; 0x4c80 <__fixsfsi>
    4a5a:	0e 94 63 23 	call	0x46c6	; 0x46c6 <GLCD_PrintInteger>
	}
}
    4a5e:	ff 90       	pop	r15
    4a60:	ef 90       	pop	r14
    4a62:	df 90       	pop	r13
    4a64:	cf 90       	pop	r12
    4a66:	bf 90       	pop	r11
    4a68:	af 90       	pop	r10
    4a6a:	9f 90       	pop	r9
    4a6c:	8f 90       	pop	r8
    4a6e:	08 95       	ret

00004a70 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    4a70:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    4a72:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    4a74:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    4a76:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    4a78:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    4a7a:	8c e0       	ldi	r24, 0x0C	; 12
    4a7c:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    4a7e:	84 e0       	ldi	r24, 0x04	; 4
    4a80:	86 bf       	out	0x36, r24	; 54
    4a82:	08 95       	ret

00004a84 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    4a84:	81 b1       	in	r24, 0x01	; 1
}
    4a86:	88 7f       	andi	r24, 0xF8	; 248
    4a88:	08 95       	ret

00004a8a <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4a8a:	84 ea       	ldi	r24, 0xA4	; 164
    4a8c:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    4a8e:	06 b6       	in	r0, 0x36	; 54
    4a90:	07 fe       	sbrs	r0, 7
    4a92:	fd cf       	rjmp	.-6      	; 0x4a8e <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    4a94:	0e 94 42 25 	call	0x4a84	; 0x4a84 <TWI_Status>
}
    4a98:	08 95       	ret

00004a9a <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    4a9a:	85 ed       	ldi	r24, 0xD5	; 213
    4a9c:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    4a9e:	06 b6       	in	r0, 0x36	; 54
    4aa0:	04 fc       	sbrc	r0, 4
    4aa2:	fd cf       	rjmp	.-6      	; 0x4a9e <TWI_EndTransmission+0x4>
}
    4aa4:	08 95       	ret

00004aa6 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    4aa6:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    4aa8:	84 e8       	ldi	r24, 0x84	; 132
    4aaa:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    4aac:	06 b6       	in	r0, 0x36	; 54
    4aae:	07 fe       	sbrs	r0, 7
    4ab0:	fd cf       	rjmp	.-6      	; 0x4aac <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    4ab2:	0e 94 42 25 	call	0x4a84	; 0x4a84 <TWI_Status>
}
    4ab6:	08 95       	ret

00004ab8 <__subsf3>:
    4ab8:	50 58       	subi	r21, 0x80	; 128

00004aba <__addsf3>:
    4aba:	bb 27       	eor	r27, r27
    4abc:	aa 27       	eor	r26, r26
    4abe:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__addsf3x>
    4ac2:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <__fp_round>
    4ac6:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <__fp_pscA>
    4aca:	38 f0       	brcs	.+14     	; 0x4ada <__addsf3+0x20>
    4acc:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__fp_pscB>
    4ad0:	20 f0       	brcs	.+8      	; 0x4ada <__addsf3+0x20>
    4ad2:	39 f4       	brne	.+14     	; 0x4ae2 <__addsf3+0x28>
    4ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ad6:	19 f4       	brne	.+6      	; 0x4ade <__addsf3+0x24>
    4ad8:	26 f4       	brtc	.+8      	; 0x4ae2 <__addsf3+0x28>
    4ada:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_nan>
    4ade:	0e f4       	brtc	.+2      	; 0x4ae2 <__addsf3+0x28>
    4ae0:	e0 95       	com	r30
    4ae2:	e7 fb       	bst	r30, 7
    4ae4:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__fp_inf>

00004ae8 <__addsf3x>:
    4ae8:	e9 2f       	mov	r30, r25
    4aea:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__fp_split3>
    4aee:	58 f3       	brcs	.-42     	; 0x4ac6 <__addsf3+0xc>
    4af0:	ba 17       	cp	r27, r26
    4af2:	62 07       	cpc	r22, r18
    4af4:	73 07       	cpc	r23, r19
    4af6:	84 07       	cpc	r24, r20
    4af8:	95 07       	cpc	r25, r21
    4afa:	20 f0       	brcs	.+8      	; 0x4b04 <__addsf3x+0x1c>
    4afc:	79 f4       	brne	.+30     	; 0x4b1c <__addsf3x+0x34>
    4afe:	a6 f5       	brtc	.+104    	; 0x4b68 <__addsf3x+0x80>
    4b00:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__fp_zero>
    4b04:	0e f4       	brtc	.+2      	; 0x4b08 <__addsf3x+0x20>
    4b06:	e0 95       	com	r30
    4b08:	0b 2e       	mov	r0, r27
    4b0a:	ba 2f       	mov	r27, r26
    4b0c:	a0 2d       	mov	r26, r0
    4b0e:	0b 01       	movw	r0, r22
    4b10:	b9 01       	movw	r22, r18
    4b12:	90 01       	movw	r18, r0
    4b14:	0c 01       	movw	r0, r24
    4b16:	ca 01       	movw	r24, r20
    4b18:	a0 01       	movw	r20, r0
    4b1a:	11 24       	eor	r1, r1
    4b1c:	ff 27       	eor	r31, r31
    4b1e:	59 1b       	sub	r21, r25
    4b20:	99 f0       	breq	.+38     	; 0x4b48 <__addsf3x+0x60>
    4b22:	59 3f       	cpi	r21, 0xF9	; 249
    4b24:	50 f4       	brcc	.+20     	; 0x4b3a <__addsf3x+0x52>
    4b26:	50 3e       	cpi	r21, 0xE0	; 224
    4b28:	68 f1       	brcs	.+90     	; 0x4b84 <__addsf3x+0x9c>
    4b2a:	1a 16       	cp	r1, r26
    4b2c:	f0 40       	sbci	r31, 0x00	; 0
    4b2e:	a2 2f       	mov	r26, r18
    4b30:	23 2f       	mov	r18, r19
    4b32:	34 2f       	mov	r19, r20
    4b34:	44 27       	eor	r20, r20
    4b36:	58 5f       	subi	r21, 0xF8	; 248
    4b38:	f3 cf       	rjmp	.-26     	; 0x4b20 <__addsf3x+0x38>
    4b3a:	46 95       	lsr	r20
    4b3c:	37 95       	ror	r19
    4b3e:	27 95       	ror	r18
    4b40:	a7 95       	ror	r26
    4b42:	f0 40       	sbci	r31, 0x00	; 0
    4b44:	53 95       	inc	r21
    4b46:	c9 f7       	brne	.-14     	; 0x4b3a <__addsf3x+0x52>
    4b48:	7e f4       	brtc	.+30     	; 0x4b68 <__addsf3x+0x80>
    4b4a:	1f 16       	cp	r1, r31
    4b4c:	ba 0b       	sbc	r27, r26
    4b4e:	62 0b       	sbc	r22, r18
    4b50:	73 0b       	sbc	r23, r19
    4b52:	84 0b       	sbc	r24, r20
    4b54:	ba f0       	brmi	.+46     	; 0x4b84 <__addsf3x+0x9c>
    4b56:	91 50       	subi	r25, 0x01	; 1
    4b58:	a1 f0       	breq	.+40     	; 0x4b82 <__addsf3x+0x9a>
    4b5a:	ff 0f       	add	r31, r31
    4b5c:	bb 1f       	adc	r27, r27
    4b5e:	66 1f       	adc	r22, r22
    4b60:	77 1f       	adc	r23, r23
    4b62:	88 1f       	adc	r24, r24
    4b64:	c2 f7       	brpl	.-16     	; 0x4b56 <__addsf3x+0x6e>
    4b66:	0e c0       	rjmp	.+28     	; 0x4b84 <__addsf3x+0x9c>
    4b68:	ba 0f       	add	r27, r26
    4b6a:	62 1f       	adc	r22, r18
    4b6c:	73 1f       	adc	r23, r19
    4b6e:	84 1f       	adc	r24, r20
    4b70:	48 f4       	brcc	.+18     	; 0x4b84 <__addsf3x+0x9c>
    4b72:	87 95       	ror	r24
    4b74:	77 95       	ror	r23
    4b76:	67 95       	ror	r22
    4b78:	b7 95       	ror	r27
    4b7a:	f7 95       	ror	r31
    4b7c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b7e:	08 f0       	brcs	.+2      	; 0x4b82 <__addsf3x+0x9a>
    4b80:	b0 cf       	rjmp	.-160    	; 0x4ae2 <__addsf3+0x28>
    4b82:	93 95       	inc	r25
    4b84:	88 0f       	add	r24, r24
    4b86:	08 f0       	brcs	.+2      	; 0x4b8a <__addsf3x+0xa2>
    4b88:	99 27       	eor	r25, r25
    4b8a:	ee 0f       	add	r30, r30
    4b8c:	97 95       	ror	r25
    4b8e:	87 95       	ror	r24
    4b90:	08 95       	ret

00004b92 <__cmpsf2>:
    4b92:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__fp_cmp>
    4b96:	08 f4       	brcc	.+2      	; 0x4b9a <__cmpsf2+0x8>
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	08 95       	ret

00004b9c <__divsf3>:
    4b9c:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__divsf3x>
    4ba0:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <__fp_round>
    4ba4:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__fp_pscB>
    4ba8:	58 f0       	brcs	.+22     	; 0x4bc0 <__divsf3+0x24>
    4baa:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <__fp_pscA>
    4bae:	40 f0       	brcs	.+16     	; 0x4bc0 <__divsf3+0x24>
    4bb0:	29 f4       	brne	.+10     	; 0x4bbc <__divsf3+0x20>
    4bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    4bb4:	29 f0       	breq	.+10     	; 0x4bc0 <__divsf3+0x24>
    4bb6:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__fp_inf>
    4bba:	51 11       	cpse	r21, r1
    4bbc:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_szero>
    4bc0:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_nan>

00004bc4 <__divsf3x>:
    4bc4:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__fp_split3>
    4bc8:	68 f3       	brcs	.-38     	; 0x4ba4 <__divsf3+0x8>

00004bca <__divsf3_pse>:
    4bca:	99 23       	and	r25, r25
    4bcc:	b1 f3       	breq	.-20     	; 0x4bba <__divsf3+0x1e>
    4bce:	55 23       	and	r21, r21
    4bd0:	91 f3       	breq	.-28     	; 0x4bb6 <__divsf3+0x1a>
    4bd2:	95 1b       	sub	r25, r21
    4bd4:	55 0b       	sbc	r21, r21
    4bd6:	bb 27       	eor	r27, r27
    4bd8:	aa 27       	eor	r26, r26
    4bda:	62 17       	cp	r22, r18
    4bdc:	73 07       	cpc	r23, r19
    4bde:	84 07       	cpc	r24, r20
    4be0:	38 f0       	brcs	.+14     	; 0x4bf0 <__divsf3_pse+0x26>
    4be2:	9f 5f       	subi	r25, 0xFF	; 255
    4be4:	5f 4f       	sbci	r21, 0xFF	; 255
    4be6:	22 0f       	add	r18, r18
    4be8:	33 1f       	adc	r19, r19
    4bea:	44 1f       	adc	r20, r20
    4bec:	aa 1f       	adc	r26, r26
    4bee:	a9 f3       	breq	.-22     	; 0x4bda <__divsf3_pse+0x10>
    4bf0:	35 d0       	rcall	.+106    	; 0x4c5c <__divsf3_pse+0x92>
    4bf2:	0e 2e       	mov	r0, r30
    4bf4:	3a f0       	brmi	.+14     	; 0x4c04 <__divsf3_pse+0x3a>
    4bf6:	e0 e8       	ldi	r30, 0x80	; 128
    4bf8:	32 d0       	rcall	.+100    	; 0x4c5e <__divsf3_pse+0x94>
    4bfa:	91 50       	subi	r25, 0x01	; 1
    4bfc:	50 40       	sbci	r21, 0x00	; 0
    4bfe:	e6 95       	lsr	r30
    4c00:	00 1c       	adc	r0, r0
    4c02:	ca f7       	brpl	.-14     	; 0x4bf6 <__divsf3_pse+0x2c>
    4c04:	2b d0       	rcall	.+86     	; 0x4c5c <__divsf3_pse+0x92>
    4c06:	fe 2f       	mov	r31, r30
    4c08:	29 d0       	rcall	.+82     	; 0x4c5c <__divsf3_pse+0x92>
    4c0a:	66 0f       	add	r22, r22
    4c0c:	77 1f       	adc	r23, r23
    4c0e:	88 1f       	adc	r24, r24
    4c10:	bb 1f       	adc	r27, r27
    4c12:	26 17       	cp	r18, r22
    4c14:	37 07       	cpc	r19, r23
    4c16:	48 07       	cpc	r20, r24
    4c18:	ab 07       	cpc	r26, r27
    4c1a:	b0 e8       	ldi	r27, 0x80	; 128
    4c1c:	09 f0       	breq	.+2      	; 0x4c20 <__divsf3_pse+0x56>
    4c1e:	bb 0b       	sbc	r27, r27
    4c20:	80 2d       	mov	r24, r0
    4c22:	bf 01       	movw	r22, r30
    4c24:	ff 27       	eor	r31, r31
    4c26:	93 58       	subi	r25, 0x83	; 131
    4c28:	5f 4f       	sbci	r21, 0xFF	; 255
    4c2a:	3a f0       	brmi	.+14     	; 0x4c3a <__divsf3_pse+0x70>
    4c2c:	9e 3f       	cpi	r25, 0xFE	; 254
    4c2e:	51 05       	cpc	r21, r1
    4c30:	78 f0       	brcs	.+30     	; 0x4c50 <__divsf3_pse+0x86>
    4c32:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__fp_inf>
    4c36:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_szero>
    4c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    4c3c:	e4 f3       	brlt	.-8      	; 0x4c36 <__divsf3_pse+0x6c>
    4c3e:	98 3e       	cpi	r25, 0xE8	; 232
    4c40:	d4 f3       	brlt	.-12     	; 0x4c36 <__divsf3_pse+0x6c>
    4c42:	86 95       	lsr	r24
    4c44:	77 95       	ror	r23
    4c46:	67 95       	ror	r22
    4c48:	b7 95       	ror	r27
    4c4a:	f7 95       	ror	r31
    4c4c:	9f 5f       	subi	r25, 0xFF	; 255
    4c4e:	c9 f7       	brne	.-14     	; 0x4c42 <__divsf3_pse+0x78>
    4c50:	88 0f       	add	r24, r24
    4c52:	91 1d       	adc	r25, r1
    4c54:	96 95       	lsr	r25
    4c56:	87 95       	ror	r24
    4c58:	97 f9       	bld	r25, 7
    4c5a:	08 95       	ret
    4c5c:	e1 e0       	ldi	r30, 0x01	; 1
    4c5e:	66 0f       	add	r22, r22
    4c60:	77 1f       	adc	r23, r23
    4c62:	88 1f       	adc	r24, r24
    4c64:	bb 1f       	adc	r27, r27
    4c66:	62 17       	cp	r22, r18
    4c68:	73 07       	cpc	r23, r19
    4c6a:	84 07       	cpc	r24, r20
    4c6c:	ba 07       	cpc	r27, r26
    4c6e:	20 f0       	brcs	.+8      	; 0x4c78 <__divsf3_pse+0xae>
    4c70:	62 1b       	sub	r22, r18
    4c72:	73 0b       	sbc	r23, r19
    4c74:	84 0b       	sbc	r24, r20
    4c76:	ba 0b       	sbc	r27, r26
    4c78:	ee 1f       	adc	r30, r30
    4c7a:	88 f7       	brcc	.-30     	; 0x4c5e <__divsf3_pse+0x94>
    4c7c:	e0 95       	com	r30
    4c7e:	08 95       	ret

00004c80 <__fixsfsi>:
    4c80:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__fixunssfsi>
    4c84:	68 94       	set
    4c86:	b1 11       	cpse	r27, r1
    4c88:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_szero>
    4c8c:	08 95       	ret

00004c8e <__fixunssfsi>:
    4c8e:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__fp_splitA>
    4c92:	88 f0       	brcs	.+34     	; 0x4cb6 <__fixunssfsi+0x28>
    4c94:	9f 57       	subi	r25, 0x7F	; 127
    4c96:	98 f0       	brcs	.+38     	; 0x4cbe <__fixunssfsi+0x30>
    4c98:	b9 2f       	mov	r27, r25
    4c9a:	99 27       	eor	r25, r25
    4c9c:	b7 51       	subi	r27, 0x17	; 23
    4c9e:	b0 f0       	brcs	.+44     	; 0x4ccc <__fixunssfsi+0x3e>
    4ca0:	e1 f0       	breq	.+56     	; 0x4cda <__fixunssfsi+0x4c>
    4ca2:	66 0f       	add	r22, r22
    4ca4:	77 1f       	adc	r23, r23
    4ca6:	88 1f       	adc	r24, r24
    4ca8:	99 1f       	adc	r25, r25
    4caa:	1a f0       	brmi	.+6      	; 0x4cb2 <__fixunssfsi+0x24>
    4cac:	ba 95       	dec	r27
    4cae:	c9 f7       	brne	.-14     	; 0x4ca2 <__fixunssfsi+0x14>
    4cb0:	14 c0       	rjmp	.+40     	; 0x4cda <__fixunssfsi+0x4c>
    4cb2:	b1 30       	cpi	r27, 0x01	; 1
    4cb4:	91 f0       	breq	.+36     	; 0x4cda <__fixunssfsi+0x4c>
    4cb6:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__fp_zero>
    4cba:	b1 e0       	ldi	r27, 0x01	; 1
    4cbc:	08 95       	ret
    4cbe:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__fp_zero>
    4cc2:	67 2f       	mov	r22, r23
    4cc4:	78 2f       	mov	r23, r24
    4cc6:	88 27       	eor	r24, r24
    4cc8:	b8 5f       	subi	r27, 0xF8	; 248
    4cca:	39 f0       	breq	.+14     	; 0x4cda <__fixunssfsi+0x4c>
    4ccc:	b9 3f       	cpi	r27, 0xF9	; 249
    4cce:	cc f3       	brlt	.-14     	; 0x4cc2 <__fixunssfsi+0x34>
    4cd0:	86 95       	lsr	r24
    4cd2:	77 95       	ror	r23
    4cd4:	67 95       	ror	r22
    4cd6:	b3 95       	inc	r27
    4cd8:	d9 f7       	brne	.-10     	; 0x4cd0 <__fixunssfsi+0x42>
    4cda:	3e f4       	brtc	.+14     	; 0x4cea <__fixunssfsi+0x5c>
    4cdc:	90 95       	com	r25
    4cde:	80 95       	com	r24
    4ce0:	70 95       	com	r23
    4ce2:	61 95       	neg	r22
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	08 95       	ret

00004cec <__floatunsisf>:
    4cec:	e8 94       	clt
    4cee:	09 c0       	rjmp	.+18     	; 0x4d02 <__floatsisf+0x12>

00004cf0 <__floatsisf>:
    4cf0:	97 fb       	bst	r25, 7
    4cf2:	3e f4       	brtc	.+14     	; 0x4d02 <__floatsisf+0x12>
    4cf4:	90 95       	com	r25
    4cf6:	80 95       	com	r24
    4cf8:	70 95       	com	r23
    4cfa:	61 95       	neg	r22
    4cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    4d00:	9f 4f       	sbci	r25, 0xFF	; 255
    4d02:	99 23       	and	r25, r25
    4d04:	a9 f0       	breq	.+42     	; 0x4d30 <__floatsisf+0x40>
    4d06:	f9 2f       	mov	r31, r25
    4d08:	96 e9       	ldi	r25, 0x96	; 150
    4d0a:	bb 27       	eor	r27, r27
    4d0c:	93 95       	inc	r25
    4d0e:	f6 95       	lsr	r31
    4d10:	87 95       	ror	r24
    4d12:	77 95       	ror	r23
    4d14:	67 95       	ror	r22
    4d16:	b7 95       	ror	r27
    4d18:	f1 11       	cpse	r31, r1
    4d1a:	f8 cf       	rjmp	.-16     	; 0x4d0c <__floatsisf+0x1c>
    4d1c:	fa f4       	brpl	.+62     	; 0x4d5c <__floatsisf+0x6c>
    4d1e:	bb 0f       	add	r27, r27
    4d20:	11 f4       	brne	.+4      	; 0x4d26 <__floatsisf+0x36>
    4d22:	60 ff       	sbrs	r22, 0
    4d24:	1b c0       	rjmp	.+54     	; 0x4d5c <__floatsisf+0x6c>
    4d26:	6f 5f       	subi	r22, 0xFF	; 255
    4d28:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2e:	16 c0       	rjmp	.+44     	; 0x4d5c <__floatsisf+0x6c>
    4d30:	88 23       	and	r24, r24
    4d32:	11 f0       	breq	.+4      	; 0x4d38 <__floatsisf+0x48>
    4d34:	96 e9       	ldi	r25, 0x96	; 150
    4d36:	11 c0       	rjmp	.+34     	; 0x4d5a <__floatsisf+0x6a>
    4d38:	77 23       	and	r23, r23
    4d3a:	21 f0       	breq	.+8      	; 0x4d44 <__floatsisf+0x54>
    4d3c:	9e e8       	ldi	r25, 0x8E	; 142
    4d3e:	87 2f       	mov	r24, r23
    4d40:	76 2f       	mov	r23, r22
    4d42:	05 c0       	rjmp	.+10     	; 0x4d4e <__floatsisf+0x5e>
    4d44:	66 23       	and	r22, r22
    4d46:	71 f0       	breq	.+28     	; 0x4d64 <__floatsisf+0x74>
    4d48:	96 e8       	ldi	r25, 0x86	; 134
    4d4a:	86 2f       	mov	r24, r22
    4d4c:	70 e0       	ldi	r23, 0x00	; 0
    4d4e:	60 e0       	ldi	r22, 0x00	; 0
    4d50:	2a f0       	brmi	.+10     	; 0x4d5c <__floatsisf+0x6c>
    4d52:	9a 95       	dec	r25
    4d54:	66 0f       	add	r22, r22
    4d56:	77 1f       	adc	r23, r23
    4d58:	88 1f       	adc	r24, r24
    4d5a:	da f7       	brpl	.-10     	; 0x4d52 <__floatsisf+0x62>
    4d5c:	88 0f       	add	r24, r24
    4d5e:	96 95       	lsr	r25
    4d60:	87 95       	ror	r24
    4d62:	97 f9       	bld	r25, 7
    4d64:	08 95       	ret

00004d66 <__fp_cmp>:
    4d66:	99 0f       	add	r25, r25
    4d68:	00 08       	sbc	r0, r0
    4d6a:	55 0f       	add	r21, r21
    4d6c:	aa 0b       	sbc	r26, r26
    4d6e:	e0 e8       	ldi	r30, 0x80	; 128
    4d70:	fe ef       	ldi	r31, 0xFE	; 254
    4d72:	16 16       	cp	r1, r22
    4d74:	17 06       	cpc	r1, r23
    4d76:	e8 07       	cpc	r30, r24
    4d78:	f9 07       	cpc	r31, r25
    4d7a:	c0 f0       	brcs	.+48     	; 0x4dac <__fp_cmp+0x46>
    4d7c:	12 16       	cp	r1, r18
    4d7e:	13 06       	cpc	r1, r19
    4d80:	e4 07       	cpc	r30, r20
    4d82:	f5 07       	cpc	r31, r21
    4d84:	98 f0       	brcs	.+38     	; 0x4dac <__fp_cmp+0x46>
    4d86:	62 1b       	sub	r22, r18
    4d88:	73 0b       	sbc	r23, r19
    4d8a:	84 0b       	sbc	r24, r20
    4d8c:	95 0b       	sbc	r25, r21
    4d8e:	39 f4       	brne	.+14     	; 0x4d9e <__fp_cmp+0x38>
    4d90:	0a 26       	eor	r0, r26
    4d92:	61 f0       	breq	.+24     	; 0x4dac <__fp_cmp+0x46>
    4d94:	23 2b       	or	r18, r19
    4d96:	24 2b       	or	r18, r20
    4d98:	25 2b       	or	r18, r21
    4d9a:	21 f4       	brne	.+8      	; 0x4da4 <__fp_cmp+0x3e>
    4d9c:	08 95       	ret
    4d9e:	0a 26       	eor	r0, r26
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <__fp_cmp+0x3e>
    4da2:	a1 40       	sbci	r26, 0x01	; 1
    4da4:	a6 95       	lsr	r26
    4da6:	8f ef       	ldi	r24, 0xFF	; 255
    4da8:	81 1d       	adc	r24, r1
    4daa:	81 1d       	adc	r24, r1
    4dac:	08 95       	ret

00004dae <__fp_inf>:
    4dae:	97 f9       	bld	r25, 7
    4db0:	9f 67       	ori	r25, 0x7F	; 127
    4db2:	80 e8       	ldi	r24, 0x80	; 128
    4db4:	70 e0       	ldi	r23, 0x00	; 0
    4db6:	60 e0       	ldi	r22, 0x00	; 0
    4db8:	08 95       	ret

00004dba <__fp_nan>:
    4dba:	9f ef       	ldi	r25, 0xFF	; 255
    4dbc:	80 ec       	ldi	r24, 0xC0	; 192
    4dbe:	08 95       	ret

00004dc0 <__fp_pscA>:
    4dc0:	00 24       	eor	r0, r0
    4dc2:	0a 94       	dec	r0
    4dc4:	16 16       	cp	r1, r22
    4dc6:	17 06       	cpc	r1, r23
    4dc8:	18 06       	cpc	r1, r24
    4dca:	09 06       	cpc	r0, r25
    4dcc:	08 95       	ret

00004dce <__fp_pscB>:
    4dce:	00 24       	eor	r0, r0
    4dd0:	0a 94       	dec	r0
    4dd2:	12 16       	cp	r1, r18
    4dd4:	13 06       	cpc	r1, r19
    4dd6:	14 06       	cpc	r1, r20
    4dd8:	05 06       	cpc	r0, r21
    4dda:	08 95       	ret

00004ddc <__fp_round>:
    4ddc:	09 2e       	mov	r0, r25
    4dde:	03 94       	inc	r0
    4de0:	00 0c       	add	r0, r0
    4de2:	11 f4       	brne	.+4      	; 0x4de8 <__fp_round+0xc>
    4de4:	88 23       	and	r24, r24
    4de6:	52 f0       	brmi	.+20     	; 0x4dfc <__fp_round+0x20>
    4de8:	bb 0f       	add	r27, r27
    4dea:	40 f4       	brcc	.+16     	; 0x4dfc <__fp_round+0x20>
    4dec:	bf 2b       	or	r27, r31
    4dee:	11 f4       	brne	.+4      	; 0x4df4 <__fp_round+0x18>
    4df0:	60 ff       	sbrs	r22, 0
    4df2:	04 c0       	rjmp	.+8      	; 0x4dfc <__fp_round+0x20>
    4df4:	6f 5f       	subi	r22, 0xFF	; 255
    4df6:	7f 4f       	sbci	r23, 0xFF	; 255
    4df8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfc:	08 95       	ret

00004dfe <__fp_split3>:
    4dfe:	57 fd       	sbrc	r21, 7
    4e00:	90 58       	subi	r25, 0x80	; 128
    4e02:	44 0f       	add	r20, r20
    4e04:	55 1f       	adc	r21, r21
    4e06:	59 f0       	breq	.+22     	; 0x4e1e <__fp_splitA+0x10>
    4e08:	5f 3f       	cpi	r21, 0xFF	; 255
    4e0a:	71 f0       	breq	.+28     	; 0x4e28 <__fp_splitA+0x1a>
    4e0c:	47 95       	ror	r20

00004e0e <__fp_splitA>:
    4e0e:	88 0f       	add	r24, r24
    4e10:	97 fb       	bst	r25, 7
    4e12:	99 1f       	adc	r25, r25
    4e14:	61 f0       	breq	.+24     	; 0x4e2e <__fp_splitA+0x20>
    4e16:	9f 3f       	cpi	r25, 0xFF	; 255
    4e18:	79 f0       	breq	.+30     	; 0x4e38 <__fp_splitA+0x2a>
    4e1a:	87 95       	ror	r24
    4e1c:	08 95       	ret
    4e1e:	12 16       	cp	r1, r18
    4e20:	13 06       	cpc	r1, r19
    4e22:	14 06       	cpc	r1, r20
    4e24:	55 1f       	adc	r21, r21
    4e26:	f2 cf       	rjmp	.-28     	; 0x4e0c <__fp_split3+0xe>
    4e28:	46 95       	lsr	r20
    4e2a:	f1 df       	rcall	.-30     	; 0x4e0e <__fp_splitA>
    4e2c:	08 c0       	rjmp	.+16     	; 0x4e3e <__fp_splitA+0x30>
    4e2e:	16 16       	cp	r1, r22
    4e30:	17 06       	cpc	r1, r23
    4e32:	18 06       	cpc	r1, r24
    4e34:	99 1f       	adc	r25, r25
    4e36:	f1 cf       	rjmp	.-30     	; 0x4e1a <__fp_splitA+0xc>
    4e38:	86 95       	lsr	r24
    4e3a:	71 05       	cpc	r23, r1
    4e3c:	61 05       	cpc	r22, r1
    4e3e:	08 94       	sec
    4e40:	08 95       	ret

00004e42 <__fp_zero>:
    4e42:	e8 94       	clt

00004e44 <__fp_szero>:
    4e44:	bb 27       	eor	r27, r27
    4e46:	66 27       	eor	r22, r22
    4e48:	77 27       	eor	r23, r23
    4e4a:	cb 01       	movw	r24, r22
    4e4c:	97 f9       	bld	r25, 7
    4e4e:	08 95       	ret

00004e50 <__gesf2>:
    4e50:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__fp_cmp>
    4e54:	08 f4       	brcc	.+2      	; 0x4e58 <__gesf2+0x8>
    4e56:	8f ef       	ldi	r24, 0xFF	; 255
    4e58:	08 95       	ret

00004e5a <__mulsf3>:
    4e5a:	0e 94 40 27 	call	0x4e80	; 0x4e80 <__mulsf3x>
    4e5e:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <__fp_round>
    4e62:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <__fp_pscA>
    4e66:	38 f0       	brcs	.+14     	; 0x4e76 <__mulsf3+0x1c>
    4e68:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__fp_pscB>
    4e6c:	20 f0       	brcs	.+8      	; 0x4e76 <__mulsf3+0x1c>
    4e6e:	95 23       	and	r25, r21
    4e70:	11 f0       	breq	.+4      	; 0x4e76 <__mulsf3+0x1c>
    4e72:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__fp_inf>
    4e76:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_nan>
    4e7a:	11 24       	eor	r1, r1
    4e7c:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_szero>

00004e80 <__mulsf3x>:
    4e80:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__fp_split3>
    4e84:	70 f3       	brcs	.-36     	; 0x4e62 <__mulsf3+0x8>

00004e86 <__mulsf3_pse>:
    4e86:	95 9f       	mul	r25, r21
    4e88:	c1 f3       	breq	.-16     	; 0x4e7a <__mulsf3+0x20>
    4e8a:	95 0f       	add	r25, r21
    4e8c:	50 e0       	ldi	r21, 0x00	; 0
    4e8e:	55 1f       	adc	r21, r21
    4e90:	62 9f       	mul	r22, r18
    4e92:	f0 01       	movw	r30, r0
    4e94:	72 9f       	mul	r23, r18
    4e96:	bb 27       	eor	r27, r27
    4e98:	f0 0d       	add	r31, r0
    4e9a:	b1 1d       	adc	r27, r1
    4e9c:	63 9f       	mul	r22, r19
    4e9e:	aa 27       	eor	r26, r26
    4ea0:	f0 0d       	add	r31, r0
    4ea2:	b1 1d       	adc	r27, r1
    4ea4:	aa 1f       	adc	r26, r26
    4ea6:	64 9f       	mul	r22, r20
    4ea8:	66 27       	eor	r22, r22
    4eaa:	b0 0d       	add	r27, r0
    4eac:	a1 1d       	adc	r26, r1
    4eae:	66 1f       	adc	r22, r22
    4eb0:	82 9f       	mul	r24, r18
    4eb2:	22 27       	eor	r18, r18
    4eb4:	b0 0d       	add	r27, r0
    4eb6:	a1 1d       	adc	r26, r1
    4eb8:	62 1f       	adc	r22, r18
    4eba:	73 9f       	mul	r23, r19
    4ebc:	b0 0d       	add	r27, r0
    4ebe:	a1 1d       	adc	r26, r1
    4ec0:	62 1f       	adc	r22, r18
    4ec2:	83 9f       	mul	r24, r19
    4ec4:	a0 0d       	add	r26, r0
    4ec6:	61 1d       	adc	r22, r1
    4ec8:	22 1f       	adc	r18, r18
    4eca:	74 9f       	mul	r23, r20
    4ecc:	33 27       	eor	r19, r19
    4ece:	a0 0d       	add	r26, r0
    4ed0:	61 1d       	adc	r22, r1
    4ed2:	23 1f       	adc	r18, r19
    4ed4:	84 9f       	mul	r24, r20
    4ed6:	60 0d       	add	r22, r0
    4ed8:	21 1d       	adc	r18, r1
    4eda:	82 2f       	mov	r24, r18
    4edc:	76 2f       	mov	r23, r22
    4ede:	6a 2f       	mov	r22, r26
    4ee0:	11 24       	eor	r1, r1
    4ee2:	9f 57       	subi	r25, 0x7F	; 127
    4ee4:	50 40       	sbci	r21, 0x00	; 0
    4ee6:	9a f0       	brmi	.+38     	; 0x4f0e <__mulsf3_pse+0x88>
    4ee8:	f1 f0       	breq	.+60     	; 0x4f26 <__mulsf3_pse+0xa0>
    4eea:	88 23       	and	r24, r24
    4eec:	4a f0       	brmi	.+18     	; 0x4f00 <__mulsf3_pse+0x7a>
    4eee:	ee 0f       	add	r30, r30
    4ef0:	ff 1f       	adc	r31, r31
    4ef2:	bb 1f       	adc	r27, r27
    4ef4:	66 1f       	adc	r22, r22
    4ef6:	77 1f       	adc	r23, r23
    4ef8:	88 1f       	adc	r24, r24
    4efa:	91 50       	subi	r25, 0x01	; 1
    4efc:	50 40       	sbci	r21, 0x00	; 0
    4efe:	a9 f7       	brne	.-22     	; 0x4eea <__mulsf3_pse+0x64>
    4f00:	9e 3f       	cpi	r25, 0xFE	; 254
    4f02:	51 05       	cpc	r21, r1
    4f04:	80 f0       	brcs	.+32     	; 0x4f26 <__mulsf3_pse+0xa0>
    4f06:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__fp_inf>
    4f0a:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_szero>
    4f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    4f10:	e4 f3       	brlt	.-8      	; 0x4f0a <__mulsf3_pse+0x84>
    4f12:	98 3e       	cpi	r25, 0xE8	; 232
    4f14:	d4 f3       	brlt	.-12     	; 0x4f0a <__mulsf3_pse+0x84>
    4f16:	86 95       	lsr	r24
    4f18:	77 95       	ror	r23
    4f1a:	67 95       	ror	r22
    4f1c:	b7 95       	ror	r27
    4f1e:	f7 95       	ror	r31
    4f20:	e7 95       	ror	r30
    4f22:	9f 5f       	subi	r25, 0xFF	; 255
    4f24:	c1 f7       	brne	.-16     	; 0x4f16 <__mulsf3_pse+0x90>
    4f26:	fe 2b       	or	r31, r30
    4f28:	88 0f       	add	r24, r24
    4f2a:	91 1d       	adc	r25, r1
    4f2c:	96 95       	lsr	r25
    4f2e:	87 95       	ror	r24
    4f30:	97 f9       	bld	r25, 7
    4f32:	08 95       	ret

00004f34 <__udivmodhi4>:
    4f34:	aa 1b       	sub	r26, r26
    4f36:	bb 1b       	sub	r27, r27
    4f38:	51 e1       	ldi	r21, 0x11	; 17
    4f3a:	07 c0       	rjmp	.+14     	; 0x4f4a <__udivmodhi4_ep>

00004f3c <__udivmodhi4_loop>:
    4f3c:	aa 1f       	adc	r26, r26
    4f3e:	bb 1f       	adc	r27, r27
    4f40:	a6 17       	cp	r26, r22
    4f42:	b7 07       	cpc	r27, r23
    4f44:	10 f0       	brcs	.+4      	; 0x4f4a <__udivmodhi4_ep>
    4f46:	a6 1b       	sub	r26, r22
    4f48:	b7 0b       	sbc	r27, r23

00004f4a <__udivmodhi4_ep>:
    4f4a:	88 1f       	adc	r24, r24
    4f4c:	99 1f       	adc	r25, r25
    4f4e:	5a 95       	dec	r21
    4f50:	a9 f7       	brne	.-22     	; 0x4f3c <__udivmodhi4_loop>
    4f52:	80 95       	com	r24
    4f54:	90 95       	com	r25
    4f56:	bc 01       	movw	r22, r24
    4f58:	cd 01       	movw	r24, r26
    4f5a:	08 95       	ret

00004f5c <__divmodhi4>:
    4f5c:	97 fb       	bst	r25, 7
    4f5e:	07 2e       	mov	r0, r23
    4f60:	16 f4       	brtc	.+4      	; 0x4f66 <__divmodhi4+0xa>
    4f62:	00 94       	com	r0
    4f64:	07 d0       	rcall	.+14     	; 0x4f74 <__divmodhi4_neg1>
    4f66:	77 fd       	sbrc	r23, 7
    4f68:	09 d0       	rcall	.+18     	; 0x4f7c <__divmodhi4_neg2>
    4f6a:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__udivmodhi4>
    4f6e:	07 fc       	sbrc	r0, 7
    4f70:	05 d0       	rcall	.+10     	; 0x4f7c <__divmodhi4_neg2>
    4f72:	3e f4       	brtc	.+14     	; 0x4f82 <__divmodhi4_exit>

00004f74 <__divmodhi4_neg1>:
    4f74:	90 95       	com	r25
    4f76:	81 95       	neg	r24
    4f78:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7a:	08 95       	ret

00004f7c <__divmodhi4_neg2>:
    4f7c:	70 95       	com	r23
    4f7e:	61 95       	neg	r22
    4f80:	7f 4f       	sbci	r23, 0xFF	; 255

00004f82 <__divmodhi4_exit>:
    4f82:	08 95       	ret

00004f84 <__udivmodsi4>:
    4f84:	a1 e2       	ldi	r26, 0x21	; 33
    4f86:	1a 2e       	mov	r1, r26
    4f88:	aa 1b       	sub	r26, r26
    4f8a:	bb 1b       	sub	r27, r27
    4f8c:	fd 01       	movw	r30, r26
    4f8e:	0d c0       	rjmp	.+26     	; 0x4faa <__udivmodsi4_ep>

00004f90 <__udivmodsi4_loop>:
    4f90:	aa 1f       	adc	r26, r26
    4f92:	bb 1f       	adc	r27, r27
    4f94:	ee 1f       	adc	r30, r30
    4f96:	ff 1f       	adc	r31, r31
    4f98:	a2 17       	cp	r26, r18
    4f9a:	b3 07       	cpc	r27, r19
    4f9c:	e4 07       	cpc	r30, r20
    4f9e:	f5 07       	cpc	r31, r21
    4fa0:	20 f0       	brcs	.+8      	; 0x4faa <__udivmodsi4_ep>
    4fa2:	a2 1b       	sub	r26, r18
    4fa4:	b3 0b       	sbc	r27, r19
    4fa6:	e4 0b       	sbc	r30, r20
    4fa8:	f5 0b       	sbc	r31, r21

00004faa <__udivmodsi4_ep>:
    4faa:	66 1f       	adc	r22, r22
    4fac:	77 1f       	adc	r23, r23
    4fae:	88 1f       	adc	r24, r24
    4fb0:	99 1f       	adc	r25, r25
    4fb2:	1a 94       	dec	r1
    4fb4:	69 f7       	brne	.-38     	; 0x4f90 <__udivmodsi4_loop>
    4fb6:	60 95       	com	r22
    4fb8:	70 95       	com	r23
    4fba:	80 95       	com	r24
    4fbc:	90 95       	com	r25
    4fbe:	9b 01       	movw	r18, r22
    4fc0:	ac 01       	movw	r20, r24
    4fc2:	bd 01       	movw	r22, r26
    4fc4:	cf 01       	movw	r24, r30
    4fc6:	08 95       	ret

00004fc8 <__tablejump2__>:
    4fc8:	ee 0f       	add	r30, r30
    4fca:	ff 1f       	adc	r31, r31
    4fcc:	05 90       	lpm	r0, Z+
    4fce:	f4 91       	lpm	r31, Z
    4fd0:	e0 2d       	mov	r30, r0
    4fd2:	09 94       	ijmp

00004fd4 <__umulhisi3>:
    4fd4:	a2 9f       	mul	r26, r18
    4fd6:	b0 01       	movw	r22, r0
    4fd8:	b3 9f       	mul	r27, r19
    4fda:	c0 01       	movw	r24, r0
    4fdc:	a3 9f       	mul	r26, r19
    4fde:	70 0d       	add	r23, r0
    4fe0:	81 1d       	adc	r24, r1
    4fe2:	11 24       	eor	r1, r1
    4fe4:	91 1d       	adc	r25, r1
    4fe6:	b2 9f       	mul	r27, r18
    4fe8:	70 0d       	add	r23, r0
    4fea:	81 1d       	adc	r24, r1
    4fec:	11 24       	eor	r1, r1
    4fee:	91 1d       	adc	r25, r1
    4ff0:	08 95       	ret

00004ff2 <malloc>:
    4ff2:	0f 93       	push	r16
    4ff4:	1f 93       	push	r17
    4ff6:	cf 93       	push	r28
    4ff8:	df 93       	push	r29
    4ffa:	82 30       	cpi	r24, 0x02	; 2
    4ffc:	91 05       	cpc	r25, r1
    4ffe:	10 f4       	brcc	.+4      	; 0x5004 <malloc+0x12>
    5000:	82 e0       	ldi	r24, 0x02	; 2
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <__flp>
    5008:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <__flp+0x1>
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e0       	ldi	r19, 0x00	; 0
    5010:	a0 e0       	ldi	r26, 0x00	; 0
    5012:	b0 e0       	ldi	r27, 0x00	; 0
    5014:	30 97       	sbiw	r30, 0x00	; 0
    5016:	19 f1       	breq	.+70     	; 0x505e <malloc+0x6c>
    5018:	40 81       	ld	r20, Z
    501a:	51 81       	ldd	r21, Z+1	; 0x01
    501c:	02 81       	ldd	r16, Z+2	; 0x02
    501e:	13 81       	ldd	r17, Z+3	; 0x03
    5020:	48 17       	cp	r20, r24
    5022:	59 07       	cpc	r21, r25
    5024:	c8 f0       	brcs	.+50     	; 0x5058 <malloc+0x66>
    5026:	84 17       	cp	r24, r20
    5028:	95 07       	cpc	r25, r21
    502a:	69 f4       	brne	.+26     	; 0x5046 <malloc+0x54>
    502c:	10 97       	sbiw	r26, 0x00	; 0
    502e:	31 f0       	breq	.+12     	; 0x503c <malloc+0x4a>
    5030:	12 96       	adiw	r26, 0x02	; 2
    5032:	0c 93       	st	X, r16
    5034:	12 97       	sbiw	r26, 0x02	; 2
    5036:	13 96       	adiw	r26, 0x03	; 3
    5038:	1c 93       	st	X, r17
    503a:	27 c0       	rjmp	.+78     	; 0x508a <malloc+0x98>
    503c:	00 93 d0 06 	sts	0x06D0, r16	; 0x8006d0 <__flp>
    5040:	10 93 d1 06 	sts	0x06D1, r17	; 0x8006d1 <__flp+0x1>
    5044:	22 c0       	rjmp	.+68     	; 0x508a <malloc+0x98>
    5046:	21 15       	cp	r18, r1
    5048:	31 05       	cpc	r19, r1
    504a:	19 f0       	breq	.+6      	; 0x5052 <malloc+0x60>
    504c:	42 17       	cp	r20, r18
    504e:	53 07       	cpc	r21, r19
    5050:	18 f4       	brcc	.+6      	; 0x5058 <malloc+0x66>
    5052:	9a 01       	movw	r18, r20
    5054:	bd 01       	movw	r22, r26
    5056:	ef 01       	movw	r28, r30
    5058:	df 01       	movw	r26, r30
    505a:	f8 01       	movw	r30, r16
    505c:	db cf       	rjmp	.-74     	; 0x5014 <malloc+0x22>
    505e:	21 15       	cp	r18, r1
    5060:	31 05       	cpc	r19, r1
    5062:	f9 f0       	breq	.+62     	; 0x50a2 <malloc+0xb0>
    5064:	28 1b       	sub	r18, r24
    5066:	39 0b       	sbc	r19, r25
    5068:	24 30       	cpi	r18, 0x04	; 4
    506a:	31 05       	cpc	r19, r1
    506c:	80 f4       	brcc	.+32     	; 0x508e <malloc+0x9c>
    506e:	8a 81       	ldd	r24, Y+2	; 0x02
    5070:	9b 81       	ldd	r25, Y+3	; 0x03
    5072:	61 15       	cp	r22, r1
    5074:	71 05       	cpc	r23, r1
    5076:	21 f0       	breq	.+8      	; 0x5080 <malloc+0x8e>
    5078:	fb 01       	movw	r30, r22
    507a:	93 83       	std	Z+3, r25	; 0x03
    507c:	82 83       	std	Z+2, r24	; 0x02
    507e:	04 c0       	rjmp	.+8      	; 0x5088 <malloc+0x96>
    5080:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <__flp+0x1>
    5084:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <__flp>
    5088:	fe 01       	movw	r30, r28
    508a:	32 96       	adiw	r30, 0x02	; 2
    508c:	44 c0       	rjmp	.+136    	; 0x5116 <malloc+0x124>
    508e:	fe 01       	movw	r30, r28
    5090:	e2 0f       	add	r30, r18
    5092:	f3 1f       	adc	r31, r19
    5094:	81 93       	st	Z+, r24
    5096:	91 93       	st	Z+, r25
    5098:	22 50       	subi	r18, 0x02	; 2
    509a:	31 09       	sbc	r19, r1
    509c:	39 83       	std	Y+1, r19	; 0x01
    509e:	28 83       	st	Y, r18
    50a0:	3a c0       	rjmp	.+116    	; 0x5116 <malloc+0x124>
    50a2:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <__brkval>
    50a6:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <__brkval+0x1>
    50aa:	23 2b       	or	r18, r19
    50ac:	41 f4       	brne	.+16     	; 0x50be <malloc+0xcc>
    50ae:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    50b2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    50b6:	30 93 cf 06 	sts	0x06CF, r19	; 0x8006cf <__brkval+0x1>
    50ba:	20 93 ce 06 	sts	0x06CE, r18	; 0x8006ce <__brkval>
    50be:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    50c2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    50c6:	21 15       	cp	r18, r1
    50c8:	31 05       	cpc	r19, r1
    50ca:	41 f4       	brne	.+16     	; 0x50dc <malloc+0xea>
    50cc:	2d b7       	in	r18, 0x3d	; 61
    50ce:	3e b7       	in	r19, 0x3e	; 62
    50d0:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    50d4:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    50d8:	24 1b       	sub	r18, r20
    50da:	35 0b       	sbc	r19, r21
    50dc:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <__brkval>
    50e0:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <__brkval+0x1>
    50e4:	e2 17       	cp	r30, r18
    50e6:	f3 07       	cpc	r31, r19
    50e8:	a0 f4       	brcc	.+40     	; 0x5112 <malloc+0x120>
    50ea:	2e 1b       	sub	r18, r30
    50ec:	3f 0b       	sbc	r19, r31
    50ee:	28 17       	cp	r18, r24
    50f0:	39 07       	cpc	r19, r25
    50f2:	78 f0       	brcs	.+30     	; 0x5112 <malloc+0x120>
    50f4:	ac 01       	movw	r20, r24
    50f6:	4e 5f       	subi	r20, 0xFE	; 254
    50f8:	5f 4f       	sbci	r21, 0xFF	; 255
    50fa:	24 17       	cp	r18, r20
    50fc:	35 07       	cpc	r19, r21
    50fe:	48 f0       	brcs	.+18     	; 0x5112 <malloc+0x120>
    5100:	4e 0f       	add	r20, r30
    5102:	5f 1f       	adc	r21, r31
    5104:	50 93 cf 06 	sts	0x06CF, r21	; 0x8006cf <__brkval+0x1>
    5108:	40 93 ce 06 	sts	0x06CE, r20	; 0x8006ce <__brkval>
    510c:	81 93       	st	Z+, r24
    510e:	91 93       	st	Z+, r25
    5110:	02 c0       	rjmp	.+4      	; 0x5116 <malloc+0x124>
    5112:	e0 e0       	ldi	r30, 0x00	; 0
    5114:	f0 e0       	ldi	r31, 0x00	; 0
    5116:	cf 01       	movw	r24, r30
    5118:	df 91       	pop	r29
    511a:	cf 91       	pop	r28
    511c:	1f 91       	pop	r17
    511e:	0f 91       	pop	r16
    5120:	08 95       	ret

00005122 <free>:
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	00 97       	sbiw	r24, 0x00	; 0
    5128:	09 f4       	brne	.+2      	; 0x512c <free+0xa>
    512a:	81 c0       	rjmp	.+258    	; 0x522e <free+0x10c>
    512c:	fc 01       	movw	r30, r24
    512e:	32 97       	sbiw	r30, 0x02	; 2
    5130:	13 82       	std	Z+3, r1	; 0x03
    5132:	12 82       	std	Z+2, r1	; 0x02
    5134:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <__flp>
    5138:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <__flp+0x1>
    513c:	10 97       	sbiw	r26, 0x00	; 0
    513e:	81 f4       	brne	.+32     	; 0x5160 <free+0x3e>
    5140:	20 81       	ld	r18, Z
    5142:	31 81       	ldd	r19, Z+1	; 0x01
    5144:	82 0f       	add	r24, r18
    5146:	93 1f       	adc	r25, r19
    5148:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <__brkval>
    514c:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <__brkval+0x1>
    5150:	28 17       	cp	r18, r24
    5152:	39 07       	cpc	r19, r25
    5154:	51 f5       	brne	.+84     	; 0x51aa <free+0x88>
    5156:	f0 93 cf 06 	sts	0x06CF, r31	; 0x8006cf <__brkval+0x1>
    515a:	e0 93 ce 06 	sts	0x06CE, r30	; 0x8006ce <__brkval>
    515e:	67 c0       	rjmp	.+206    	; 0x522e <free+0x10c>
    5160:	ed 01       	movw	r28, r26
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	ce 17       	cp	r28, r30
    5168:	df 07       	cpc	r29, r31
    516a:	40 f4       	brcc	.+16     	; 0x517c <free+0x5a>
    516c:	4a 81       	ldd	r20, Y+2	; 0x02
    516e:	5b 81       	ldd	r21, Y+3	; 0x03
    5170:	9e 01       	movw	r18, r28
    5172:	41 15       	cp	r20, r1
    5174:	51 05       	cpc	r21, r1
    5176:	f1 f0       	breq	.+60     	; 0x51b4 <free+0x92>
    5178:	ea 01       	movw	r28, r20
    517a:	f5 cf       	rjmp	.-22     	; 0x5166 <free+0x44>
    517c:	d3 83       	std	Z+3, r29	; 0x03
    517e:	c2 83       	std	Z+2, r28	; 0x02
    5180:	40 81       	ld	r20, Z
    5182:	51 81       	ldd	r21, Z+1	; 0x01
    5184:	84 0f       	add	r24, r20
    5186:	95 1f       	adc	r25, r21
    5188:	c8 17       	cp	r28, r24
    518a:	d9 07       	cpc	r29, r25
    518c:	59 f4       	brne	.+22     	; 0x51a4 <free+0x82>
    518e:	88 81       	ld	r24, Y
    5190:	99 81       	ldd	r25, Y+1	; 0x01
    5192:	84 0f       	add	r24, r20
    5194:	95 1f       	adc	r25, r21
    5196:	02 96       	adiw	r24, 0x02	; 2
    5198:	91 83       	std	Z+1, r25	; 0x01
    519a:	80 83       	st	Z, r24
    519c:	8a 81       	ldd	r24, Y+2	; 0x02
    519e:	9b 81       	ldd	r25, Y+3	; 0x03
    51a0:	93 83       	std	Z+3, r25	; 0x03
    51a2:	82 83       	std	Z+2, r24	; 0x02
    51a4:	21 15       	cp	r18, r1
    51a6:	31 05       	cpc	r19, r1
    51a8:	29 f4       	brne	.+10     	; 0x51b4 <free+0x92>
    51aa:	f0 93 d1 06 	sts	0x06D1, r31	; 0x8006d1 <__flp+0x1>
    51ae:	e0 93 d0 06 	sts	0x06D0, r30	; 0x8006d0 <__flp>
    51b2:	3d c0       	rjmp	.+122    	; 0x522e <free+0x10c>
    51b4:	e9 01       	movw	r28, r18
    51b6:	fb 83       	std	Y+3, r31	; 0x03
    51b8:	ea 83       	std	Y+2, r30	; 0x02
    51ba:	49 91       	ld	r20, Y+
    51bc:	59 91       	ld	r21, Y+
    51be:	c4 0f       	add	r28, r20
    51c0:	d5 1f       	adc	r29, r21
    51c2:	ec 17       	cp	r30, r28
    51c4:	fd 07       	cpc	r31, r29
    51c6:	61 f4       	brne	.+24     	; 0x51e0 <free+0xbe>
    51c8:	80 81       	ld	r24, Z
    51ca:	91 81       	ldd	r25, Z+1	; 0x01
    51cc:	84 0f       	add	r24, r20
    51ce:	95 1f       	adc	r25, r21
    51d0:	02 96       	adiw	r24, 0x02	; 2
    51d2:	e9 01       	movw	r28, r18
    51d4:	99 83       	std	Y+1, r25	; 0x01
    51d6:	88 83       	st	Y, r24
    51d8:	82 81       	ldd	r24, Z+2	; 0x02
    51da:	93 81       	ldd	r25, Z+3	; 0x03
    51dc:	9b 83       	std	Y+3, r25	; 0x03
    51de:	8a 83       	std	Y+2, r24	; 0x02
    51e0:	e0 e0       	ldi	r30, 0x00	; 0
    51e2:	f0 e0       	ldi	r31, 0x00	; 0
    51e4:	12 96       	adiw	r26, 0x02	; 2
    51e6:	8d 91       	ld	r24, X+
    51e8:	9c 91       	ld	r25, X
    51ea:	13 97       	sbiw	r26, 0x03	; 3
    51ec:	00 97       	sbiw	r24, 0x00	; 0
    51ee:	19 f0       	breq	.+6      	; 0x51f6 <free+0xd4>
    51f0:	fd 01       	movw	r30, r26
    51f2:	dc 01       	movw	r26, r24
    51f4:	f7 cf       	rjmp	.-18     	; 0x51e4 <free+0xc2>
    51f6:	8d 91       	ld	r24, X+
    51f8:	9c 91       	ld	r25, X
    51fa:	11 97       	sbiw	r26, 0x01	; 1
    51fc:	9d 01       	movw	r18, r26
    51fe:	2e 5f       	subi	r18, 0xFE	; 254
    5200:	3f 4f       	sbci	r19, 0xFF	; 255
    5202:	82 0f       	add	r24, r18
    5204:	93 1f       	adc	r25, r19
    5206:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <__brkval>
    520a:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <__brkval+0x1>
    520e:	28 17       	cp	r18, r24
    5210:	39 07       	cpc	r19, r25
    5212:	69 f4       	brne	.+26     	; 0x522e <free+0x10c>
    5214:	30 97       	sbiw	r30, 0x00	; 0
    5216:	29 f4       	brne	.+10     	; 0x5222 <free+0x100>
    5218:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <__flp+0x1>
    521c:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <__flp>
    5220:	02 c0       	rjmp	.+4      	; 0x5226 <free+0x104>
    5222:	13 82       	std	Z+3, r1	; 0x03
    5224:	12 82       	std	Z+2, r1	; 0x02
    5226:	b0 93 cf 06 	sts	0x06CF, r27	; 0x8006cf <__brkval+0x1>
    522a:	a0 93 ce 06 	sts	0x06CE, r26	; 0x8006ce <__brkval>
    522e:	df 91       	pop	r29
    5230:	cf 91       	pop	r28
    5232:	08 95       	ret

00005234 <eeprom_read_byte>:
    5234:	e1 99       	sbic	0x1c, 1	; 28
    5236:	fe cf       	rjmp	.-4      	; 0x5234 <eeprom_read_byte>
    5238:	9f bb       	out	0x1f, r25	; 31
    523a:	8e bb       	out	0x1e, r24	; 30
    523c:	e0 9a       	sbi	0x1c, 0	; 28
    523e:	99 27       	eor	r25, r25
    5240:	8d b3       	in	r24, 0x1d	; 29
    5242:	08 95       	ret

00005244 <eeprom_read_dword>:
    5244:	a6 e1       	ldi	r26, 0x16	; 22
    5246:	b0 e0       	ldi	r27, 0x00	; 0
    5248:	44 e0       	ldi	r20, 0x04	; 4
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <eeprom_read_blraw>

00005250 <eeprom_read_word>:
    5250:	a8 e1       	ldi	r26, 0x18	; 24
    5252:	b0 e0       	ldi	r27, 0x00	; 0
    5254:	42 e0       	ldi	r20, 0x02	; 2
    5256:	50 e0       	ldi	r21, 0x00	; 0
    5258:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <eeprom_read_blraw>

0000525c <eeprom_update_byte>:
    525c:	26 2f       	mov	r18, r22

0000525e <eeprom_update_r18>:
    525e:	e1 99       	sbic	0x1c, 1	; 28
    5260:	fe cf       	rjmp	.-4      	; 0x525e <eeprom_update_r18>
    5262:	9f bb       	out	0x1f, r25	; 31
    5264:	8e bb       	out	0x1e, r24	; 30
    5266:	e0 9a       	sbi	0x1c, 0	; 28
    5268:	01 97       	sbiw	r24, 0x01	; 1
    526a:	0d b2       	in	r0, 0x1d	; 29
    526c:	02 16       	cp	r0, r18
    526e:	31 f0       	breq	.+12     	; 0x527c <eeprom_update_r18+0x1e>
    5270:	2d bb       	out	0x1d, r18	; 29
    5272:	0f b6       	in	r0, 0x3f	; 63
    5274:	f8 94       	cli
    5276:	e2 9a       	sbi	0x1c, 2	; 28
    5278:	e1 9a       	sbi	0x1c, 1	; 28
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	08 95       	ret

0000527e <eeprom_update_dword>:
    527e:	03 96       	adiw	r24, 0x03	; 3
    5280:	27 2f       	mov	r18, r23
    5282:	0e 94 2f 29 	call	0x525e	; 0x525e <eeprom_update_r18>
    5286:	0e 94 2e 29 	call	0x525c	; 0x525c <eeprom_update_byte>
    528a:	25 2f       	mov	r18, r21
    528c:	0e 94 2f 29 	call	0x525e	; 0x525e <eeprom_update_r18>
    5290:	24 2f       	mov	r18, r20
    5292:	0c 94 2f 29 	jmp	0x525e	; 0x525e <eeprom_update_r18>

00005296 <eeprom_update_word>:
    5296:	01 96       	adiw	r24, 0x01	; 1
    5298:	27 2f       	mov	r18, r23
    529a:	0e 94 2f 29 	call	0x525e	; 0x525e <eeprom_update_r18>
    529e:	0c 94 2e 29 	jmp	0x525c	; 0x525c <eeprom_update_byte>

000052a2 <eeprom_write_dword>:
    52a2:	24 2f       	mov	r18, r20
    52a4:	0e 94 6f 29 	call	0x52de	; 0x52de <eeprom_write_r18>
    52a8:	25 2f       	mov	r18, r21
    52aa:	0e 94 6f 29 	call	0x52de	; 0x52de <eeprom_write_r18>
    52ae:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <eeprom_write_word>

000052b2 <eeprom_write_word>:
    52b2:	0e 94 6e 29 	call	0x52dc	; 0x52dc <eeprom_write_byte>
    52b6:	27 2f       	mov	r18, r23
    52b8:	0c 94 6f 29 	jmp	0x52de	; 0x52de <eeprom_write_r18>

000052bc <eeprom_read_block>:
    52bc:	dc 01       	movw	r26, r24
    52be:	cb 01       	movw	r24, r22

000052c0 <eeprom_read_blraw>:
    52c0:	fc 01       	movw	r30, r24
    52c2:	e1 99       	sbic	0x1c, 1	; 28
    52c4:	fe cf       	rjmp	.-4      	; 0x52c2 <eeprom_read_blraw+0x2>
    52c6:	06 c0       	rjmp	.+12     	; 0x52d4 <eeprom_read_blraw+0x14>
    52c8:	ff bb       	out	0x1f, r31	; 31
    52ca:	ee bb       	out	0x1e, r30	; 30
    52cc:	e0 9a       	sbi	0x1c, 0	; 28
    52ce:	31 96       	adiw	r30, 0x01	; 1
    52d0:	0d b2       	in	r0, 0x1d	; 29
    52d2:	0d 92       	st	X+, r0
    52d4:	41 50       	subi	r20, 0x01	; 1
    52d6:	50 40       	sbci	r21, 0x00	; 0
    52d8:	b8 f7       	brcc	.-18     	; 0x52c8 <eeprom_read_blraw+0x8>
    52da:	08 95       	ret

000052dc <eeprom_write_byte>:
    52dc:	26 2f       	mov	r18, r22

000052de <eeprom_write_r18>:
    52de:	e1 99       	sbic	0x1c, 1	; 28
    52e0:	fe cf       	rjmp	.-4      	; 0x52de <eeprom_write_r18>
    52e2:	9f bb       	out	0x1f, r25	; 31
    52e4:	8e bb       	out	0x1e, r24	; 30
    52e6:	2d bb       	out	0x1d, r18	; 29
    52e8:	0f b6       	in	r0, 0x3f	; 63
    52ea:	f8 94       	cli
    52ec:	e2 9a       	sbi	0x1c, 2	; 28
    52ee:	e1 9a       	sbi	0x1c, 1	; 28
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	01 96       	adiw	r24, 0x01	; 1
    52f4:	08 95       	ret

000052f6 <_exit>:
    52f6:	f8 94       	cli

000052f8 <__stop_program>:
    52f8:	ff cf       	rjmp	.-2      	; 0x52f8 <__stop_program>
