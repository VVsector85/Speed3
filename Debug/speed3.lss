
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e0  00800060  00004e44  00004ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000444  00800240  00800240  000050b8  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00005158  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000653a  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4f  00000000  00000000  0000baa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002677  00000000  00000000  0000c8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c34  00000000  00000000  0000ef68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc2  00000000  00000000  0000fb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059e4  00000000  00000000  00010b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  00016542  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_9>
      28:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	21 17       	cp	r18, r17
      56:	41 17       	cp	r20, r17
      58:	61 17       	cp	r22, r17
      5a:	b0 17       	cp	r27, r16
      5c:	ff 17       	cp	r31, r31
      5e:	1b 18       	sub	r1, r11
      60:	37 18       	sub	r3, r7
      62:	53 18       	sub	r5, r3
      64:	a2 18       	sub	r10, r2
      66:	c2 18       	sub	r12, r2
      68:	de 18       	sub	r13, r14
      6a:	fc 18       	sub	r15, r12
      6c:	08 19       	sub	r16, r8
      6e:	0b 19       	sub	r16, r11
      70:	1d 19       	sub	r17, r13
      72:	a8 19       	sub	r26, r8

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	12 e0       	ldi	r17, 0x02	; 2
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e4 e4       	ldi	r30, 0x44	; 68
    1556:	fe e4       	ldi	r31, 0x4E	; 78
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a0 34       	cpi	r26, 0x40	; 64
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	a0 e4       	ldi	r26, 0x40	; 64
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	a4 38       	cpi	r26, 0x84	; 132
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 5e 15 	call	0x2abc	; 0x2abc <main>
    1578:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2917>:
	tempValue = currValue;
	valueLength = 0;


	uint16_t new_value (void)
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		//gathering digits back to the integer
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	17 96       	adiw	r26, 0x07	; 7
    1590:	8c 91       	ld	r24, X
    1592:	17 97       	sbiw	r26, 0x07	; 7
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	16 96       	adiw	r26, 0x06	; 6
    1598:	8c 93       	st	X, r24
    159a:	16 97       	sbiw	r26, 0x06	; 6
    159c:	88 23       	and	r24, r24
    159e:	84 f1       	brlt	.+96     	; 0x1600 <new_value.2917+0x80>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	14 96       	adiw	r26, 0x04	; 4
    15a2:	0d 91       	ld	r16, X+
    15a4:	1c 91       	ld	r17, X
    15a6:	15 97       	sbiw	r26, 0x05	; 5
    15a8:	e0 e0       	ldi	r30, 0x00	; 0
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	68 2f       	mov	r22, r24
    15ae:	08 2e       	mov	r0, r24
    15b0:	00 0c       	add	r0, r0
    15b2:	77 0b       	sbc	r23, r23
    15b4:	98 01       	movw	r18, r16
    15b6:	26 0f       	add	r18, r22
    15b8:	37 1f       	adc	r19, r23
    15ba:	e9 01       	movw	r28, r18
    15bc:	28 81       	ld	r18, Y
    15be:	02 2e       	mov	r0, r18
    15c0:	00 0c       	add	r0, r0
    15c2:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c4:	16 16       	cp	r1, r22
    15c6:	17 06       	cpc	r1, r23
    15c8:	94 f4       	brge	.+36     	; 0x15ee <new_value.2917+0x6e>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15cc:	a9 01       	movw	r20, r18
    15ce:	44 0f       	add	r20, r20
    15d0:	55 1f       	adc	r21, r21
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	22 0f       	add	r18, r18
    15d8:	33 1f       	adc	r19, r19
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	24 0f       	add	r18, r20
    15e0:	35 1f       	adc	r19, r21
	{
		uint16_t newValue = 0;
		//gathering digits back to the integer
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e2:	9f 5f       	subi	r25, 0xFF	; 255
    15e4:	49 2f       	mov	r20, r25
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	46 17       	cp	r20, r22
    15ea:	57 07       	cpc	r21, r23
    15ec:	7c f3       	brlt	.-34     	; 0x15cc <new_value.2917+0x4c>
				tenPower*=10;
			}
			newValue += tenPower;
    15ee:	e2 0f       	add	r30, r18
    15f0:	f3 1f       	adc	r31, r19
    15f2:	81 50       	subi	r24, 0x01	; 1

	uint16_t new_value (void)
	{
		uint16_t newValue = 0;
		//gathering digits back to the integer
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	8c 93       	st	X, r24
    15f8:	16 97       	sbiw	r26, 0x06	; 6
    15fa:	88 23       	and	r24, r24
    15fc:	bc f6       	brge	.-82     	; 0x15ac <new_value.2917+0x2c>
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <new_value.2917+0x84>
	valueLength = 0;


	uint16_t new_value (void)
	{
		uint16_t newValue = 0;
    1600:	e0 e0       	ldi	r30, 0x00	; 0
    1602:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1604:	cf 01       	movw	r24, r30
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	3f 90       	pop	r3
    1610:	2f 90       	pop	r2
    1612:	08 95       	ret

00001614 <default_values>:
	0b00000000,
	0b00001000,
	0b00000100			
};
void default_values(){
	 lcdContrast = 250;
    1614:	8a ef       	ldi	r24, 0xFA	; 250
    1616:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <lcdContrast>
	 magnetsOnWheel = 6;
    161a:	86 e0       	ldi	r24, 0x06	; 6
    161c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <magnetsOnWheel>
	 gearRatio = 1.0; //needed if magnets are not on the wheel
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 e8       	ldi	r26, 0x80	; 128
    1626:	bf e3       	ldi	r27, 0x3F	; 63
    1628:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gearRatio>
    162c:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <gearRatio+0x1>
    1630:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <gearRatio+0x2>
    1634:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <gearRatio+0x3>
	 wheelDiameter = 0.70;			//wheel diameter in meters
    1638:	83 e3       	ldi	r24, 0x33	; 51
    163a:	93 e3       	ldi	r25, 0x33	; 51
    163c:	a3 e3       	ldi	r26, 0x33	; 51
    163e:	bf e3       	ldi	r27, 0x3F	; 63
    1640:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <wheelDiameter>
    1644:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <wheelDiameter+0x1>
    1648:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <wheelDiameter+0x2>
    164c:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <wheelDiameter+0x3>
	 degreesPerKmh = 1.275;	//degrees per km/h
    1650:	83 e3       	ldi	r24, 0x33	; 51
    1652:	93 e3       	ldi	r25, 0x33	; 51
    1654:	a3 ea       	ldi	r26, 0xA3	; 163
    1656:	bf e3       	ldi	r27, 0x3F	; 63
    1658:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <degreesPerKmh>
    165c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <degreesPerKmh+0x1>
    1660:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <degreesPerKmh+0x2>
    1664:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <degreesPerKmh+0x3>
	 pwmArrow = 1024;// of 1024
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	94 e0       	ldi	r25, 0x04	; 4
    166c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pwmArrow+0x1>
    1670:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pwmArrow>
	 pwmDial = 1024;// of 1024
    1674:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <pwmDial+0x1>
    1678:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pwmDial>
	 scaleMax	= 190;		//speed max value
    167c:	8e eb       	ldi	r24, 0xBE	; 190
    167e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <scaleMax>
	 stepInterval = 150; //interval between steps (Affects Stepper Motor Rotation Speed)
    1682:	86 e9       	ldi	r24, 0x96	; 150
    1684:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepInterval>
	 smSteps =	96;		//stepper motor steps
    1688:	80 e6       	ldi	r24, 0x60	; 96
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <smSteps+0x1>
    1690:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <smSteps>
	 stepMode = HALF_STEP;
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <stepMode>
    169a:	08 95       	ret

0000169c <step>:
}


void step(uint8_t mode){
	uint8_t tempPort = 0;
	if (dir)
    169c:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <dir>
    16a0:	99 23       	and	r25, r25
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <step+0x28>
	{
		phase++;
    16a4:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <phase>
    16a8:	9f 5f       	subi	r25, 0xFF	; 255
    16aa:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <phase>
		steps++;
    16ae:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <steps>
    16b2:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <steps+0x1>
    16b6:	2f 5f       	subi	r18, 0xFF	; 255
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <steps+0x1>
    16be:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <steps>
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <step+0x46>
	}
	else
	{
		phase--;
    16c4:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <phase>
    16c8:	91 50       	subi	r25, 0x01	; 1
    16ca:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <phase>
		steps--;
    16ce:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <steps>
    16d2:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <steps+0x1>
    16d6:	21 50       	subi	r18, 0x01	; 1
    16d8:	31 09       	sbc	r19, r1
    16da:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <steps+0x1>
    16de:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <steps>
	}
				if (phase < 0) phase = 7;
    16e2:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <phase>
    16e6:	99 23       	and	r25, r25
    16e8:	24 f4       	brge	.+8      	; 0x16f2 <step+0x56>
    16ea:	97 e0       	ldi	r25, 0x07	; 7
    16ec:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <phase>
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <step+0x62>
	 	   else if (phase > 7) phase = 0;
    16f2:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <phase>
    16f6:	98 30       	cpi	r25, 0x08	; 8
    16f8:	14 f0       	brlt	.+4      	; 0x16fe <step+0x62>
    16fa:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <phase>


	tempPort = PORTA;
    16fe:	9b b3       	in	r25, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    1700:	90 7f       	andi	r25, 0xF0	; 240
	
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[phase];
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	51 f4       	brne	.+20     	; 0x171a <step+0x7e>
    1706:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <phase>
    170a:	0e 2e       	mov	r0, r30
    170c:	00 0c       	add	r0, r0
    170e:	ff 0b       	sbc	r31, r31
    1710:	e1 5d       	subi	r30, 0xD1	; 209
    1712:	fd 4f       	sbci	r31, 0xFD	; 253
    1714:	80 81       	ld	r24, Z
    1716:	98 2b       	or	r25, r24
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <step+0x94>
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	49 f4       	brne	.+18     	; 0x1730 <step+0x94>
    171e:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <phase>
    1722:	0e 2e       	mov	r0, r30
    1724:	00 0c       	add	r0, r0
    1726:	ff 0b       	sbc	r31, r31
    1728:	e9 5c       	subi	r30, 0xC9	; 201
    172a:	fd 4f       	sbci	r31, 0xFD	; 253
    172c:	80 81       	ld	r24, Z
    172e:	98 2b       	or	r25, r24
	PORTA = tempPort;
    1730:	9b bb       	out	0x1b, r25	; 27
    1732:	08 95       	ret

00001734 <__vector_10>:
if (!arrowCalibrated) arrow_calibration();
MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
GICR|=_BV(INT1); //External Interrupt Enable INT1
}

ISR( TIMER0_COMP_vect ){
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
	step(stepMode);
    1756:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    175a:	0e 94 4e 0b 	call	0x169c	; 0x169c <step>
	if (steps == newSteps){
    175e:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <steps>
    1762:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <steps+0x1>
    1766:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <newSteps>
    176a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <newSteps+0x1>
    176e:	28 17       	cp	r18, r24
    1770:	39 07       	cpc	r19, r25
    1772:	39 f4       	brne	.+14     	; 0x1782 <__vector_10+0x4e>
	arrowMoving = 0;
    1774:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <arrowMoving>
	TCCR0 = 0;
    1778:	13 be       	out	0x33, r1	; 51
	OCR0 = 0;
    177a:	1c be       	out	0x3c, r1	; 60
	TIMSK&=~_BV(OCIE0);
    177c:	89 b7       	in	r24, 0x39	; 57
    177e:	8d 7f       	andi	r24, 0xFD	; 253
    1780:	89 bf       	out	0x39, r24	; 57
	}
}
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_4>:
	PORTA = tempPort;

}


ISR( TIMER2_COMP_vect ){
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	8f 93       	push	r24
    17b0:	9f 93       	push	r25
	speedTimer++; //speedTimer increments each period timePerTic*TIC
    17b2:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <speedTimer>
    17b6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <speedTimer+0x1>
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <speedTimer+0x1>
    17c0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <speedTimer>
	}
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_9>:
ISR (TIMER1_OVF_vect){
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    17e0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <signalOn>
    17e4:	88 23       	and	r24, r24
    17e6:	49 f0       	breq	.+18     	; 0x17fa <__vector_9+0x28>
    17e8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <signalCounter>
    17ec:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <signalCounter+0x1>
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <signalCounter+0x1>
    17f6:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <signalCounter>
}
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	0f 90       	pop	r0
    1804:	1f 90       	pop	r1
    1806:	18 95       	reti

00001808 <__vector_2>:
ISR(INT1_vect){
    1808:	1f 92       	push	r1
    180a:	0f 92       	push	r0
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	0f 92       	push	r0
    1810:	11 24       	eor	r1, r1
    1812:	2f 93       	push	r18
    1814:	3f 93       	push	r19
    1816:	4f 93       	push	r20
    1818:	5f 93       	push	r21
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
//interrupt occurs when Hall sensor is triggered
if (firstMeasure)
    1822:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <firstMeasure>
    1826:	88 23       	and	r24, r24
    1828:	51 f1       	breq	.+84     	; 0x187e <__vector_2+0x76>
	{
		speedTimerRecent = (speedTimer*TIC) + TCNT2;
    182a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <speedTimer>
    182e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <speedTimer+0x1>
    1832:	24 b5       	in	r18, 0x24	; 36
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	34 9f       	mul	r19, r20
    1838:	c0 01       	movw	r24, r0
    183a:	35 9f       	mul	r19, r21
    183c:	90 0d       	add	r25, r0
    183e:	11 24       	eor	r1, r1
    1840:	82 0f       	add	r24, r18
    1842:	91 1d       	adc	r25, r1
    1844:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <speedTimerRecent+0x1>
    1848:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <speedTimerRecent>
		TCNT2 = 0;
    184c:	14 bc       	out	0x24, r1	; 36
		speedTimer = 0;
    184e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <speedTimer+0x1>
    1852:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <speedTimer>
		//speedRefresh = 1;
		totalRotations++;
    1856:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <totalRotations>
    185a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <totalRotations+0x1>
    185e:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <totalRotations+0x2>
    1862:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <totalRotations+0x3>
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	a1 1d       	adc	r26, r1
    186a:	b1 1d       	adc	r27, r1
    186c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <totalRotations>
    1870:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <totalRotations+0x1>
    1874:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <totalRotations+0x2>
    1878:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <totalRotations+0x3>
    187c:	07 c0       	rjmp	.+14     	; 0x188c <__vector_2+0x84>
	}
else
	{
		//first triggering of the sensor starts TIMER2
		TIMSK|=_BV(OCIE2);
    187e:	89 b7       	in	r24, 0x39	; 57
    1880:	80 68       	ori	r24, 0x80	; 128
    1882:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0;
    1884:	14 bc       	out	0x24, r1	; 36
		firstMeasure = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <firstMeasure>
	}
}
    188c:	bf 91       	pop	r27
    188e:	af 91       	pop	r26
    1890:	9f 91       	pop	r25
    1892:	8f 91       	pop	r24
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <main_screen>:
	}

}

void main_screen()
{
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
	if (!signalOn){
    18bc:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <signalOn>
    18c0:	81 11       	cpse	r24, r1
    18c2:	d8 c0       	rjmp	.+432    	; 0x1a74 <main_screen+0x1ce>

	uint8_t offsetX = 10;
	uint8_t offsetY = 11;
		GLCD_Clear();
    18c4:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    18c8:	0f ef       	ldi	r16, 0xFF	; 255
    18ca:	27 e1       	ldi	r18, 0x17	; 23
    18cc:	44 e2       	ldi	r20, 0x24	; 36
    18ce:	6b e0       	ldi	r22, 0x0B	; 11
    18d0:	8a e0       	ldi	r24, 0x0A	; 10
    18d2:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    18d6:	24 e1       	ldi	r18, 0x14	; 20
    18d8:	46 e2       	ldi	r20, 0x26	; 38
    18da:	6e e0       	ldi	r22, 0x0E	; 14
    18dc:	85 e2       	ldi	r24, 0x25	; 37
    18de:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>


		if (voltage>=105)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    18e2:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <voltage>
    18e6:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <voltage+0x1>
    18ea:	89 36       	cpi	r24, 0x69	; 105
    18ec:	91 05       	cpc	r25, r1
    18ee:	34 f0       	brlt	.+12     	; 0x18fc <main_screen+0x56>
    18f0:	25 e1       	ldi	r18, 0x15	; 21
    18f2:	40 e1       	ldi	r20, 0x10	; 16
    18f4:	6d e0       	ldi	r22, 0x0D	; 13
    18f6:	8c e0       	ldi	r24, 0x0C	; 12
    18f8:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <GLCD_FillRectangle>
		if (voltage>=110)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    18fc:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <voltage>
    1900:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <voltage+0x1>
    1904:	8e 36       	cpi	r24, 0x6E	; 110
    1906:	91 05       	cpc	r25, r1
    1908:	3c f0       	brlt	.+14     	; 0x1918 <main_screen+0x72>
    190a:	0f ef       	ldi	r16, 0xFF	; 255
    190c:	25 e1       	ldi	r18, 0x15	; 21
    190e:	46 e1       	ldi	r20, 0x16	; 22
    1910:	6d e0       	ldi	r22, 0x0D	; 13
    1912:	82 e1       	ldi	r24, 0x12	; 18
    1914:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <GLCD_FillRectangle>
		if (voltage>=115)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    1918:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <voltage>
    191c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <voltage+0x1>
    1920:	83 37       	cpi	r24, 0x73	; 115
    1922:	91 05       	cpc	r25, r1
    1924:	3c f0       	brlt	.+14     	; 0x1934 <main_screen+0x8e>
    1926:	0f ef       	ldi	r16, 0xFF	; 255
    1928:	25 e1       	ldi	r18, 0x15	; 21
    192a:	4c e1       	ldi	r20, 0x1C	; 28
    192c:	6d e0       	ldi	r22, 0x0D	; 13
    192e:	88 e1       	ldi	r24, 0x18	; 24
    1930:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <GLCD_FillRectangle>
		if (voltage>=120)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    1934:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <voltage>
    1938:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <voltage+0x1>
    193c:	88 37       	cpi	r24, 0x78	; 120
    193e:	91 05       	cpc	r25, r1
    1940:	3c f0       	brlt	.+14     	; 0x1950 <main_screen+0xaa>
    1942:	0f ef       	ldi	r16, 0xFF	; 255
    1944:	25 e1       	ldi	r18, 0x15	; 21
    1946:	42 e2       	ldi	r20, 0x22	; 34
    1948:	6d e0       	ldi	r22, 0x0D	; 13
    194a:	8e e1       	ldi	r24, 0x1E	; 30
    194c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <GLCD_FillRectangle>

		GLCD_GotoXY(33+offsetX, 4+offsetY);
    1950:	6f e0       	ldi	r22, 0x0F	; 15
    1952:	8b e2       	ldi	r24, 0x2B	; 43
    1954:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	48 e0       	ldi	r20, 0x08	; 8
    195c:	65 e0       	ldi	r22, 0x05	; 5
    195e:	80 ea       	ldi	r24, 0xA0	; 160
    1960:	9b e0       	ldi	r25, 0x0B	; 11
    1962:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    1966:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <voltage>
    196a:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <voltage+0x1>
    196e:	07 2e       	mov	r0, r23
    1970:	00 0c       	add	r0, r0
    1972:	88 0b       	sbc	r24, r24
    1974:	99 0b       	sbc	r25, r25
    1976:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__floatsisf>
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
		GLCD_PrintString("V");
    1992:	8f e7       	ldi	r24, 0x7F	; 127
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>


	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	62 e1       	ldi	r22, 0x12	; 18
    19a0:	86 e3       	ldi	r24, 0x36	; 54
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
	GLCD_GotoXY(4, 31);
    19a8:	6f e1       	ldi	r22, 0x1F	; 31
    19aa:	84 e0       	ldi	r24, 0x04	; 4
    19ac:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    19b0:	80 90 46 02 	lds	r8, 0x0246	; 0x800246 <distance>
    19b4:	90 90 47 02 	lds	r9, 0x0247	; 0x800247 <distance+0x1>
    19b8:	a0 90 48 02 	lds	r10, 0x0248	; 0x800248 <distance+0x2>
    19bc:	b0 90 49 02 	lds	r11, 0x0249	; 0x800249 <distance+0x3>
    19c0:	84 e6       	ldi	r24, 0x64	; 100
    19c2:	88 16       	cp	r8, r24
    19c4:	91 04       	cpc	r9, r1
    19c6:	a1 04       	cpc	r10, r1
    19c8:	b1 04       	cpc	r11, r1
    19ca:	70 f0       	brcs	.+28     	; 0x19e8 <main_screen+0x142>
    19cc:	c5 01       	movw	r24, r10
    19ce:	b4 01       	movw	r22, r8
    19d0:	2a e0       	ldi	r18, 0x0A	; 10
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <__udivmodsi4>
		uint8_t l = 0;

			while(tempDistance){
    19dc:	21 15       	cp	r18, r1
    19de:	31 05       	cpc	r19, r1
    19e0:	41 05       	cpc	r20, r1
    19e2:	51 05       	cpc	r21, r1
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <main_screen+0x14a>
    19e6:	40 c0       	rjmp	.+128    	; 0x1a68 <main_screen+0x1c2>

	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
	GLCD_GotoXY(4, 31);
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    19e8:	24 e6       	ldi	r18, 0x64	; 100
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t l = 0;

			while(tempDistance){
			tempDistance/=10;
    19f2:	0f 2e       	mov	r0, r31
    19f4:	fa e0       	ldi	r31, 0x0A	; 10
    19f6:	cf 2e       	mov	r12, r31
    19f8:	d1 2c       	mov	r13, r1
    19fa:	e1 2c       	mov	r14, r1
    19fc:	f1 2c       	mov	r15, r1
    19fe:	f0 2d       	mov	r31, r0
    1a00:	ca 01       	movw	r24, r20
    1a02:	b9 01       	movw	r22, r18
    1a04:	a7 01       	movw	r20, r14
    1a06:	96 01       	movw	r18, r12
    1a08:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <__udivmodsi4>
			l++;
    1a0c:	cf 5f       	subi	r28, 0xFF	; 255
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

			while(tempDistance){
    1a0e:	21 15       	cp	r18, r1
    1a10:	31 05       	cpc	r19, r1
    1a12:	41 05       	cpc	r20, r1
    1a14:	51 05       	cpc	r21, r1
    1a16:	a1 f7       	brne	.-24     	; 0x1a00 <main_screen+0x15a>
			tempDistance/=10;
			l++;
			}

	int8_t zeros = 6-l;
	if (distance < 100)zeros = 4;
    1a18:	84 e6       	ldi	r24, 0x64	; 100
    1a1a:	88 16       	cp	r8, r24
    1a1c:	91 04       	cpc	r9, r1
    1a1e:	a1 04       	cpc	r10, r1
    1a20:	b1 04       	cpc	r11, r1
    1a22:	18 f5       	brcc	.+70     	; 0x1a6a <main_screen+0x1c4>
    1a24:	d4 e0       	ldi	r29, 0x04	; 4
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
		if (zeros > 0){
			for (int8_t i=0;i<zeros;i++){

				GLCD_PrintString("0");
    1a28:	81 e8       	ldi	r24, 0x81	; 129
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
    1a30:	cf 5f       	subi	r28, 0xFF	; 255
			}

	int8_t zeros = 6-l;
	if (distance < 100)zeros = 4;
		if (zeros > 0){
			for (int8_t i=0;i<zeros;i++){
    1a32:	cd 17       	cp	r28, r29
    1a34:	cc f3       	brlt	.-14     	; 0x1a28 <main_screen+0x182>

				GLCD_PrintString("0");

			}
		}
	GLCD_PrintDouble((double)distance/100.0,10);
    1a36:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <distance>
    1a3a:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <distance+0x1>
    1a3e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <distance+0x2>
    1a42:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <distance+0x3>
    1a46:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	48 ec       	ldi	r20, 0xC8	; 200
    1a50:	52 e4       	ldi	r21, 0x42	; 66
    1a52:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    1a56:	2a e0       	ldi	r18, 0x0A	; 10
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>

	


		GLCD_Render();
    1a62:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
		}

}
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <main_screen+0x1ce>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

			while(tempDistance){
    1a68:	c0 e0       	ldi	r28, 0x00	; 0
			tempDistance/=10;
			l++;
			}

	int8_t zeros = 6-l;
    1a6a:	d6 e0       	ldi	r29, 0x06	; 6
    1a6c:	dc 1b       	sub	r29, r28
	if (distance < 100)zeros = 4;
		if (zeros > 0){
    1a6e:	1d 16       	cp	r1, r29
    1a70:	14 f7       	brge	.-60     	; 0x1a36 <main_screen+0x190>
    1a72:	d9 cf       	rjmp	.-78     	; 0x1a26 <main_screen+0x180>


		GLCD_Render();
		}

}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	8f 90       	pop	r8
    1a8a:	08 95       	ret

00001a8c <speed_arrow_update>:
	return 0;
}

void speed_arrow_update(){
				
				newSteps = speedKmh/kmhPerStep;
    1a8c:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <kmhPerStep>
    1a90:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <kmhPerStep+0x1>
    1a94:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <kmhPerStep+0x2>
    1a98:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <kmhPerStep+0x3>
    1a9c:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <speedKmh>
    1aa0:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <speedKmh+0x1>
    1aa4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <speedKmh+0x2>
    1aa8:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <speedKmh+0x3>
    1aac:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    1ab0:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    1ab4:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <newSteps+0x1>
    1ab8:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <newSteps>
				int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (how much the arrow should be shifted)
    1abc:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <steps>
    1ac0:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <steps+0x1>
    1ac4:	c9 01       	movw	r24, r18
    1ac6:	86 1b       	sub	r24, r22
    1ac8:	97 0b       	sbc	r25, r23
				
				if (shiftSteps!=0){
    1aca:	99 f0       	breq	.+38     	; 0x1af2 <speed_arrow_update+0x66>
					if (shiftSteps > 0){
    1acc:	1a f0       	brmi	.+6      	; 0x1ad4 <speed_arrow_update+0x48>
					dir = 0;}else
    1ace:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <dir>
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <speed_arrow_update+0x4e>
					{dir = 1;}
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <dir>
					arrowMoving = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <arrowMoving>
					TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
    1ae0:	83 b7       	in	r24, 0x33	; 51
    1ae2:	8d 60       	ori	r24, 0x0D	; 13
    1ae4:	83 bf       	out	0x33, r24	; 51
					OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1ae6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1aea:	8c bf       	out	0x3c, r24	; 60
					TIMSK|=_BV(OCIE0);
    1aec:	89 b7       	in	r24, 0x39	; 57
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	89 bf       	out	0x39, r24	; 57
    1af2:	08 95       	ret

00001af4 <button_monitor>:
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
    1af4:	b5 9b       	sbis	0x16, 5	; 22
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <button_monitor+0xc>
    1af8:	b6 9b       	sbis	0x16, 6	; 22
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <button_monitor+0xc>
    1afc:	b7 99       	sbic	0x16, 7	; 22
    1afe:	2a c0       	rjmp	.+84     	; 0x1b54 <button_monitor+0x60>
		btnPressed = 0;
		return 0;
	}
	else if((!(PINB&_BV(5)))&&(!btnPressed)){
    1b00:	b5 99       	sbic	0x16, 5	; 22
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <button_monitor+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b04:	8f e9       	ldi	r24, 0x9F	; 159
    1b06:	9f e0       	ldi	r25, 0x0F	; 15
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <button_monitor+0x14>
    1b0c:	00 c0       	rjmp	.+0      	; 0x1b0e <button_monitor+0x1a>
    1b0e:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
    1b10:	86 b3       	in	r24, 0x16	; 22

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b12:	85 fb       	bst	r24, 5
    1b14:	99 27       	eor	r25, r25
    1b16:	90 f9       	bld	r25, 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	89 27       	eor	r24, r25
    1b1c:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
			btnPressed = 1;
		}
	}
	else if((!(PINB&_BV(6)))&&(!btnPressed)){
    1b1e:	96 b3       	in	r25, 0x16	; 22
    1b20:	89 2f       	mov	r24, r25
    1b22:	80 74       	andi	r24, 0x40	; 64
    1b24:	96 fd       	sbrc	r25, 6
    1b26:	0a c0       	rjmp	.+20     	; 0x1b3c <button_monitor+0x48>
    1b28:	ef e9       	ldi	r30, 0x9F	; 159
    1b2a:	ff e0       	ldi	r31, 0x0F	; 15
    1b2c:	31 97       	sbiw	r30, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <button_monitor+0x38>
    1b30:	00 c0       	rjmp	.+0      	; 0x1b32 <button_monitor+0x3e>
    1b32:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(6))){
    1b34:	b6 99       	sbic	0x16, 6	; 22
    1b36:	13 c0       	rjmp	.+38     	; 0x1b5e <button_monitor+0x6a>
		btnPressed = 2;
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	08 95       	ret
		}
	}
	else if((!(PINB&_BV(7)))&&(!btnPressed)){
    1b3c:	b7 99       	sbic	0x16, 7	; 22
    1b3e:	0c c0       	rjmp	.+24     	; 0x1b58 <button_monitor+0x64>
    1b40:	8f e9       	ldi	r24, 0x9F	; 159
    1b42:	9f e0       	ldi	r25, 0x0F	; 15
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <button_monitor+0x50>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <button_monitor+0x56>
    1b4a:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(7))){
    1b4c:	b7 99       	sbic	0x16, 7	; 22
    1b4e:	06 c0       	rjmp	.+12     	; 0x1b5c <button_monitor+0x68>
		btnPressed = 3;
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	08 95       	ret

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	08 95       	ret
		if (!debugMode)main_screen();
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	08 95       	ret
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PINB&_BV(7))){
		btnPressed = 3;
		}
	}
	return btnPressed;
}
    1b5e:	08 95       	ret

00001b60 <arrow_calibration>:
void arrow_calibration(){
	int calibrationSteps = 0;
	if (stepMode==FULL_STEP){
    1b60:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	29 f4       	brne	.+10     	; 0x1b72 <arrow_calibration+0x12>
		calibrationSteps = smSteps;
    1b68:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <smSteps>
    1b6c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <smSteps+0x1>
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <arrow_calibration+0x1e>
	}else{
		calibrationSteps = smSteps*2;
    1b72:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <smSteps>
    1b76:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <smSteps+0x1>
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
	}


steps = 0;
    1b7e:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <steps+0x1>
    1b82:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <steps>
phase = 0;
    1b86:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <phase>

	newSteps = calibrationSteps/4;	//moving arrow 90 degrees clockwise
    1b8a:	c9 01       	movw	r24, r18
    1b8c:	33 23       	and	r19, r19
    1b8e:	0c f4       	brge	.+2      	; 0x1b92 <arrow_calibration+0x32>
    1b90:	03 96       	adiw	r24, 0x03	; 3
    1b92:	95 95       	asr	r25
    1b94:	87 95       	ror	r24
    1b96:	95 95       	asr	r25
    1b98:	87 95       	ror	r24
    1b9a:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <newSteps+0x1>
    1b9e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <newSteps>
		dir = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <dir>
		arrowMoving = 1;
    1ba8:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <arrowMoving>

		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1bac:	83 b7       	in	r24, 0x33	; 51
    1bae:	8d 60       	ori	r24, 0x0D	; 13
    1bb0:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;
    1bb2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1bb6:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1bb8:	89 b7       	in	r24, 0x39	; 57
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	89 bf       	out	0x39, r24	; 57


while (arrowMoving);
    1bbe:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <arrowMoving>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	fc cf       	rjmp	.-8      	; 0x1bbe <arrow_calibration+0x5e>
    1bc6:	4f ef       	ldi	r20, 0xFF	; 255
    1bc8:	82 e5       	ldi	r24, 0x52	; 82
    1bca:	97 e0       	ldi	r25, 0x07	; 7
    1bcc:	41 50       	subi	r20, 0x01	; 1
    1bce:	80 40       	sbci	r24, 0x00	; 0
    1bd0:	90 40       	sbci	r25, 0x00	; 0
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <arrow_calibration+0x6c>
    1bd4:	00 c0       	rjmp	.+0      	; 0x1bd6 <arrow_calibration+0x76>
    1bd6:	00 00       	nop

	_delay_ms(150);
	steps = calibrationSteps;
    1bd8:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <steps+0x1>
    1bdc:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1be0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <newSteps+0x1>
    1be4:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <newSteps>

	dir = 0;
    1be8:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <dir>
	arrowMoving = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <arrowMoving>


	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1bf2:	83 b7       	in	r24, 0x33	; 51
    1bf4:	8d 60       	ori	r24, 0x0D	; 13
    1bf6:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1bf8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1bfc:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1bfe:	89 b7       	in	r24, 0x39	; 57
    1c00:	82 60       	ori	r24, 0x02	; 2
    1c02:	89 bf       	out	0x39, r24	; 57

while (arrowMoving);
    1c04:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <arrowMoving>
    1c08:	81 11       	cpse	r24, r1
    1c0a:	fc cf       	rjmp	.-8      	; 0x1c04 <arrow_calibration+0xa4>
steps = 0;
    1c0c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <steps+0x1>
    1c10:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <steps>
newSteps = 0;
    1c14:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <newSteps+0x1>
    1c18:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <newSteps>
arrowCalibrated = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <arrowCalibrated>
    1c22:	08 95       	ret

00001c24 <draw_arrow>:
}

void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1c24:	88 23       	and	r24, r24
    1c26:	81 f0       	breq	.+32     	; 0x1c48 <draw_arrow+0x24>
		GLCD_Clear();
    1c28:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c2c:	67 e0       	ldi	r22, 0x07	; 7
    1c2e:	86 e1       	ldi	r24, 0x16	; 22
    1c30:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1c34:	2f ef       	ldi	r18, 0xFF	; 255
    1c36:	47 e3       	ldi	r20, 0x37	; 55
    1c38:	6c e5       	ldi	r22, 0x5C	; 92
    1c3a:	84 e6       	ldi	r24, 0x64	; 100
    1c3c:	90 e1       	ldi	r25, 0x10	; 16
    1c3e:	0e 94 33 1c 	call	0x3866	; 0x3866 <GLCD_DrawBitmap>
		GLCD_Render();
    1c42:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
    1c46:	08 95       	ret
		}else{
		GLCD_Clear();
    1c48:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c4c:	67 e0       	ldi	r22, 0x07	; 7
    1c4e:	86 e1       	ldi	r24, 0x16	; 22
    1c50:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1c54:	2f ef       	ldi	r18, 0xFF	; 255
    1c56:	47 e3       	ldi	r20, 0x37	; 55
    1c58:	6c e5       	ldi	r22, 0x5C	; 92
    1c5a:	80 ee       	ldi	r24, 0xE0	; 224
    1c5c:	9d e0       	ldi	r25, 0x0D	; 13
    1c5e:	0e 94 33 1c 	call	0x3866	; 0x3866 <GLCD_DrawBitmap>
		GLCD_Render();
    1c62:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
    1c66:	08 95       	ret

00001c68 <draw_skull>:
		}
}

void draw_skull (void)
{
GLCD_Clear();
    1c68:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
GLCD_GotoXY(21+6, 7);
    1c6c:	67 e0       	ldi	r22, 0x07	; 7
    1c6e:	8b e1       	ldi	r24, 0x1B	; 27
    1c70:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1c74:	2f ef       	ldi	r18, 0xFF	; 255
    1c76:	44 e3       	ldi	r20, 0x34	; 52
    1c78:	66 e5       	ldi	r22, 0x56	; 86
    1c7a:	88 ee       	ldi	r24, 0xE8	; 232
    1c7c:	92 e1       	ldi	r25, 0x12	; 18
    1c7e:	0e 94 33 1c 	call	0x3866	; 0x3866 <GLCD_DrawBitmap>
GLCD_Render();
    1c82:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
    1c86:	08 95       	ret

00001c88 <signal_monitor>:
		if (speedKmh>scaleMax)speedKmh = scaleMax;
		//speedRefresh = 0;
		}
void signal_monitor(){

		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1c88:	b4 99       	sbic	0x16, 4	; 22
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <signal_monitor+0x1e>
    1c8c:	b3 9b       	sbis	0x16, 3	; 22
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <signal_monitor+0x1e>
			draw_arrow(0);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <draw_arrow>
			signalOn = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <signalOn>
			signalCounter = 0;
    1c9c:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <signalCounter+0x1>
    1ca0:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <signalCounter>
    1ca4:	21 c0       	rjmp	.+66     	; 0x1ce8 <signal_monitor+0x60>
		}

		else if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1ca6:	b3 99       	sbic	0x16, 3	; 22
    1ca8:	0d c0       	rjmp	.+26     	; 0x1cc4 <signal_monitor+0x3c>
    1caa:	b4 9b       	sbis	0x16, 4	; 22
    1cac:	0b c0       	rjmp	.+22     	; 0x1cc4 <signal_monitor+0x3c>
			draw_arrow(1);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <draw_arrow>
			signalOn = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <signalOn>
			signalCounter = 0;
    1cba:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <signalCounter+0x1>
    1cbe:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <signalCounter>
    1cc2:	12 c0       	rjmp	.+36     	; 0x1ce8 <signal_monitor+0x60>
		}

		else if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1cc4:	b4 99       	sbic	0x16, 4	; 22
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <signal_monitor+0x58>
    1cc8:	b3 99       	sbic	0x16, 3	; 22
    1cca:	0a c0       	rjmp	.+20     	; 0x1ce0 <signal_monitor+0x58>
			draw_skull();
    1ccc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <draw_skull>
			signalOn = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <signalOn>
			signalCounter = 0;
    1cd6:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <signalCounter+0x1>
    1cda:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <signalCounter>
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <signal_monitor+0x60>
		}


		if (signalOn){
    1ce0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <signalOn>
    1ce4:	88 23       	and	r24, r24
    1ce6:	e9 f0       	breq	.+58     	; 0x1d22 <signal_monitor+0x9a>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1ce8:	b3 9b       	sbis	0x16, 3	; 22
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <signal_monitor+0x76>
    1cec:	b4 9b       	sbis	0x16, 4	; 22
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <signal_monitor+0x76>
				GLCD_Clear();
    1cf0:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
				GLCD_Render();
    1cf4:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
				TIMSK|=_BV(TOIE1);	// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1cf8:	89 b7       	in	r24, 0x39	; 57
    1cfa:	84 60       	ori	r24, 0x04	; 4
    1cfc:	89 bf       	out	0x39, r24	; 57
									//This is to see if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			
			}

			if (signalCounter > 300)	//if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1cfe:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <signalCounter>
    1d02:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <signalCounter+0x1>
    1d06:	8d 32       	cpi	r24, 0x2D	; 45
    1d08:	91 40       	sbci	r25, 0x01	; 1
    1d0a:	58 f0       	brcs	.+22     	; 0x1d22 <signal_monitor+0x9a>
			{
				signalOn = 0;
    1d0c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <signalOn>
				signalCounter = 0;
    1d10:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <signalCounter+0x1>
    1d14:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <signalCounter>
				TIMSK&=~_BV(TOIE1);
    1d18:	89 b7       	in	r24, 0x39	; 57
    1d1a:	8b 7f       	andi	r24, 0xFB	; 251
    1d1c:	89 bf       	out	0x39, r24	; 57
				main_screen();
    1d1e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <main_screen>
    1d22:	08 95       	ret

00001d24 <read_ADC>:
}


int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
    1d24:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	16 16       	cp	r1, r22
    1d2a:	17 06       	cpc	r1, r23
    1d2c:	8c f4       	brge	.+34     	; 0x1d50 <read_ADC+0x2c>
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1d36:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1d38:	36 99       	sbic	0x06, 6	; 6
    1d3a:	fe cf       	rjmp	.-4      	; 0x1d38 <read_ADC+0x14>
		tmp += ADCW;
    1d3c:	44 b1       	in	r20, 0x04	; 4
    1d3e:	55 b1       	in	r21, 0x05	; 5
    1d40:	84 0f       	add	r24, r20
    1d42:	95 1f       	adc	r25, r21

int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	26 17       	cp	r18, r22
    1d4a:	37 07       	cpc	r19, r23
    1d4c:	a1 f7       	brne	.-24     	; 0x1d36 <read_ADC+0x12>
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <read_ADC+0x30>


int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1d54:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <__divmodhi4>
    1d58:	cb 01       	movw	r24, r22
}
    1d5a:	08 95       	ret

00001d5c <data_monitor>:
				main_screen();
			}
		}

}
void data_monitor(){
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17

	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    1d60:	6a e0       	ldi	r22, 0x0A	; 10
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <read_ADC>
    1d68:	bc 01       	movw	r22, r24
    1d6a:	99 0f       	add	r25, r25
    1d6c:	88 0b       	sbc	r24, r24
    1d6e:	99 0b       	sbc	r25, r25
    1d70:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__floatsisf>
    1d74:	2a e9       	ldi	r18, 0x9A	; 154
    1d76:	39 e9       	ldi	r19, 0x99	; 153
    1d78:	4c ec       	ldi	r20, 0xCC	; 204
    1d7a:	52 e4       	ldi	r21, 0x42	; 66
    1d7c:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	50 e4       	ldi	r21, 0x40	; 64
    1d88:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 ec       	ldi	r20, 0xC0	; 192
    1d92:	50 e4       	ldi	r21, 0x40	; 64
    1d94:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    1d98:	0e 94 98 23 	call	0x4730	; 0x4730 <__fixsfsi>
    1d9c:	70 93 4f 02 	sts	0x024F, r23	; 0x80024f <newVoltage+0x1>
    1da0:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <newVoltage>



	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    1da4:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <voltage>
    1da8:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <voltage+0x1>
    1dac:	26 17       	cp	r18, r22
    1dae:	37 07       	cpc	r19, r23
    1db0:	51 f0       	breq	.+20     	; 0x1dc6 <data_monitor+0x6a>
	{
		voltage = newVoltage;
    1db2:	70 93 51 02 	sts	0x0251, r23	; 0x800251 <voltage+0x1>
    1db6:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <voltage>
		if (!debugMode)main_screen();
    1dba:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <debugMode>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <data_monitor+0x6a>
    1dc2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <main_screen>
	}

	newDistance=(round(totalRotations)*circLength)/10.0;
    1dc6:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <totalRotations>
    1dca:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <totalRotations+0x1>
    1dce:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <totalRotations+0x2>
    1dd2:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <totalRotations+0x3>
    1dd6:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    1dda:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <round>
    1dde:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <circLength>
    1de2:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <circLength+0x1>
    1de6:	40 91 60 02 	lds	r20, 0x0260	; 0x800260 <circLength+0x2>
    1dea:	50 91 61 02 	lds	r21, 0x0261	; 0x800261 <circLength+0x3>
    1dee:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    1dfe:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    1e02:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <newDistance>
    1e06:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <newDistance+0x1>
    1e0a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <newDistance+0x2>
    1e0e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <newDistance+0x3>
	if (newDistance!=distance)	//when the distance value changes by 100 meters - update the data on the screen
    1e12:	00 91 46 02 	lds	r16, 0x0246	; 0x800246 <distance>
    1e16:	10 91 47 02 	lds	r17, 0x0247	; 0x800247 <distance+0x1>
    1e1a:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <distance+0x2>
    1e1e:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <distance+0x3>
    1e22:	60 17       	cp	r22, r16
    1e24:	71 07       	cpc	r23, r17
    1e26:	82 07       	cpc	r24, r18
    1e28:	93 07       	cpc	r25, r19
    1e2a:	71 f0       	breq	.+28     	; 0x1e48 <data_monitor+0xec>
	{
		distance = newDistance;
    1e2c:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <distance>
    1e30:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <distance+0x1>
    1e34:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <distance+0x2>
    1e38:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <distance+0x3>
		if (!debugMode)main_screen();
    1e3c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <debugMode>
    1e40:	81 11       	cpse	r24, r1
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <data_monitor+0xec>
    1e44:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <main_screen>
	}
}
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <eep_operations>:
	}
	return tmp/cycles;
}


	void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1e4e:	8f 92       	push	r8
    1e50:	9f 92       	push	r9
    1e52:	af 92       	push	r10
    1e54:	bf 92       	push	r11
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	ec 01       	movw	r28, r24
    1e62:	e6 2e       	mov	r14, r22

		if (eepAction==EEP_WRITE){
    1e64:	41 30       	cpi	r20, 0x01	; 1
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <eep_operations+0x1c>
    1e68:	6a c0       	rjmp	.+212    	; 0x1f3e <eep_operations+0xf0>
			eeprom_update_byte((uint8_t*)eepStartAddress,0);
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
			eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1e70:	f1 2c       	mov	r15, r1
    1e72:	ce 0d       	add	r28, r14
    1e74:	df 1d       	adc	r29, r15
    1e76:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <pwmArrow>
    1e7a:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <pwmArrow+0x1>
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <eeprom_update_word>
			eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1e84:	ce 0d       	add	r28, r14
    1e86:	df 1d       	adc	r29, r15
    1e88:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <pwmDial>
    1e8c:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <pwmDial+0x1>
    1e90:	ce 01       	movw	r24, r28
    1e92:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <eeprom_update_word>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1e96:	ce 0d       	add	r28, r14
    1e98:	df 1d       	adc	r29, r15
    1e9a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <scaleMax>
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1ea4:	ce 0d       	add	r28, r14
    1ea6:	df 1d       	adc	r29, r15
    1ea8:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <stepInterval>
    1eac:	ce 01       	movw	r24, r28
    1eae:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
			eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1eb2:	ce 0d       	add	r28, r14
    1eb4:	df 1d       	adc	r29, r15
    1eb6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    1eba:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <eeprom_update_word>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1ec4:	ce 0d       	add	r28, r14
    1ec6:	df 1d       	adc	r29, r15
    1ec8:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <lcdContrast>
    1ecc:	ce 01       	movw	r24, r28
    1ece:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1ed2:	ce 0d       	add	r28, r14
    1ed4:	df 1d       	adc	r29, r15
    1ed6:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    1eda:	ce 01       	movw	r24, r28
    1edc:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1ee0:	ce 0d       	add	r28, r14
    1ee2:	df 1d       	adc	r29, r15
    1ee4:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <stepMode>
    1ee8:	ce 01       	movw	r24, r28
    1eea:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
			eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1eee:	ce 0d       	add	r28, r14
    1ef0:	df 1d       	adc	r29, r15
    1ef2:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <wheelDiameter>
    1ef6:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <wheelDiameter+0x1>
    1efa:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <wheelDiameter+0x2>
    1efe:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <wheelDiameter+0x3>
    1f02:	ce 01       	movw	r24, r28
    1f04:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <eeprom_update_dword>
			eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1f08:	ce 0d       	add	r28, r14
    1f0a:	df 1d       	adc	r29, r15
    1f0c:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <gearRatio>
    1f10:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <gearRatio+0x1>
    1f14:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <gearRatio+0x2>
    1f18:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <gearRatio+0x3>
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <eeprom_update_dword>
			eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1f22:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <degreesPerKmh>
    1f26:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    1f2a:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    1f2e:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    1f32:	c7 01       	movw	r24, r14
    1f34:	8c 0f       	add	r24, r28
    1f36:	9d 1f       	adc	r25, r29
    1f38:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <eeprom_update_dword>
    1f3c:	af c0       	rjmp	.+350    	; 0x209c <eep_operations+0x24e>
			}
			if(eepAction==EEP_READ){
    1f3e:	41 11       	cpse	r20, r1
    1f40:	a9 c0       	rjmp	.+338    	; 0x2094 <eep_operations+0x246>
			pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f42:	e6 2e       	mov	r14, r22
    1f44:	f1 2c       	mov	r15, r1
    1f46:	ce 0d       	add	r28, r14
    1f48:	df 1d       	adc	r29, r15
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <eeprom_read_word>
    1f50:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pwmArrow+0x1>
    1f54:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pwmArrow>
			pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f58:	ce 0d       	add	r28, r14
    1f5a:	df 1d       	adc	r29, r15
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <eeprom_read_word>
    1f62:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <pwmDial+0x1>
    1f66:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pwmDial>
			scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1f6a:	ce 0d       	add	r28, r14
    1f6c:	df 1d       	adc	r29, r15
    1f6e:	ce 01       	movw	r24, r28
    1f70:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <eeprom_read_byte>
    1f74:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <scaleMax>
			stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1f78:	ce 0d       	add	r28, r14
    1f7a:	df 1d       	adc	r29, r15
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <eeprom_read_byte>
    1f82:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepInterval>
			smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f86:	ce 0d       	add	r28, r14
    1f88:	df 1d       	adc	r29, r15
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <eeprom_read_word>
    1f90:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <smSteps+0x1>
    1f94:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <smSteps>
			lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1f98:	ce 0d       	add	r28, r14
    1f9a:	df 1d       	adc	r29, r15
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <eeprom_read_byte>
    1fa2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <lcdContrast>
			magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fa6:	ce 0d       	add	r28, r14
    1fa8:	df 1d       	adc	r29, r15
    1faa:	ce 01       	movw	r24, r28
    1fac:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <eeprom_read_byte>
    1fb0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <magnetsOnWheel>
			stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fb4:	ce 0d       	add	r28, r14
    1fb6:	df 1d       	adc	r29, r15
    1fb8:	ce 01       	movw	r24, r28
    1fba:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <eeprom_read_byte>
    1fbe:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <stepMode>
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1fc2:	ce 0d       	add	r28, r14
    1fc4:	df 1d       	adc	r29, r15
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <eeprom_read_dword>
    1fcc:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <wheelDiameter>
    1fd0:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <wheelDiameter+0x1>
    1fd4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <wheelDiameter+0x2>
    1fd8:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <wheelDiameter+0x3>
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1fdc:	ce 0d       	add	r28, r14
    1fde:	df 1d       	adc	r29, r15
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <eeprom_read_dword>
    1fe6:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <gearRatio>
    1fea:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <gearRatio+0x1>
    1fee:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gearRatio+0x2>
    1ff2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gearRatio+0x3>
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1ff6:	c7 01       	movw	r24, r14
    1ff8:	8c 0f       	add	r24, r28
    1ffa:	9d 1f       	adc	r25, r29
    1ffc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <eeprom_read_dword>
    2000:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <degreesPerKmh>
    2004:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <degreesPerKmh+0x1>
    2008:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <degreesPerKmh+0x2>
    200c:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <degreesPerKmh+0x3>
    2010:	45 c0       	rjmp	.+138    	; 0x209c <eep_operations+0x24e>
    2012:	f1 2c       	mov	r15, r1
			}
		if (eepAction==EEP_ODOMETER_READ){
    2014:	11 e0       	ldi	r17, 0x01	; 1
			uint32_t tempTotalRotations = 0;
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempTotalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    2016:	ce 01       	movw	r24, r28
    2018:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <eeprom_read_dword>
			if(tempTotalRotations>totalRotations){
    201c:	80 90 6e 02 	lds	r8, 0x026E	; 0x80026e <totalRotations>
    2020:	90 90 6f 02 	lds	r9, 0x026F	; 0x80026f <totalRotations+0x1>
    2024:	a0 90 70 02 	lds	r10, 0x0270	; 0x800270 <totalRotations+0x2>
    2028:	b0 90 71 02 	lds	r11, 0x0271	; 0x800271 <totalRotations+0x3>
    202c:	86 16       	cp	r8, r22
    202e:	97 06       	cpc	r9, r23
    2030:	a8 06       	cpc	r10, r24
    2032:	b9 06       	cpc	r11, r25
    2034:	50 f4       	brcc	.+20     	; 0x204a <eep_operations+0x1fc>
				totalRotations = tempTotalRotations;
    2036:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <totalRotations>
    203a:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <totalRotations+0x1>
    203e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <totalRotations+0x2>
    2042:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <totalRotations+0x3>
				odometerCurrentAddress = i + 1;
    2046:	10 93 4d 02 	sts	0x024D, r17	; 0x80024d <odometerCurrentAddress>
    204a:	1f 5f       	subi	r17, 0xFF	; 255
    204c:	ce 0d       	add	r28, r14
    204e:	df 1d       	adc	r29, r15
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			}
		if (eepAction==EEP_ODOMETER_READ){
			uint32_t tempTotalRotations = 0;
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2050:	14 33       	cpi	r17, 0x34	; 52
    2052:	09 f7       	brne	.-62     	; 0x2016 <eep_operations+0x1c8>
    2054:	23 c0       	rjmp	.+70     	; 0x209c <eep_operations+0x24e>
				totalRotations = tempTotalRotations;
				odometerCurrentAddress = i + 1;
				}
			}
		}
		if (eepAction==EEP_ODOMETER_WRITE){
    2056:	43 30       	cpi	r20, 0x03	; 3
    2058:	09 f5       	brne	.+66     	; 0x209c <eep_operations+0x24e>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
    205a:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <totalRotations>
    205e:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <totalRotations+0x1>
    2062:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <totalRotations+0x2>
    2066:	70 91 71 02 	lds	r23, 0x0271	; 0x800271 <totalRotations+0x3>
    206a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <odometerCurrentAddress>
    206e:	9e 01       	movw	r18, r28
    2070:	8e 9d       	mul	r24, r14
    2072:	20 0d       	add	r18, r0
    2074:	31 1d       	adc	r19, r1
    2076:	11 24       	eor	r1, r1
    2078:	c9 01       	movw	r24, r18
    207a:	0e 94 f6 26 	call	0x4dec	; 0x4dec <eeprom_write_dword>
			odometerCurrentAddress++;
    207e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <odometerCurrentAddress>
    2082:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2084:	83 33       	cpi	r24, 0x33	; 51
    2086:	18 f4       	brcc	.+6      	; 0x208e <eep_operations+0x240>
				}
			}
		}
		if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
    2088:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <odometerCurrentAddress>
    208c:	07 c0       	rjmp	.+14     	; 0x209c <eep_operations+0x24e>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    208e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <odometerCurrentAddress>
		}


	}
    2092:	04 c0       	rjmp	.+8      	; 0x209c <eep_operations+0x24e>
			stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			}
		if (eepAction==EEP_ODOMETER_READ){
    2094:	42 30       	cpi	r20, 0x02	; 2
    2096:	09 f4       	brne	.+2      	; 0x209a <eep_operations+0x24c>
    2098:	bc cf       	rjmp	.-136    	; 0x2012 <eep_operations+0x1c4>
    209a:	dd cf       	rjmp	.-70     	; 0x2056 <eep_operations+0x208>
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
		}


	}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	8f 90       	pop	r8
    20ae:	08 95       	ret

000020b0 <presets>:
	 scaleMax	= 190;		//speed max value
	 stepInterval = 150; //interval between steps (Affects Stepper Motor Rotation Speed)
	 smSteps =	96;		//stepper motor steps
	 stepMode = HALF_STEP;
}
void presets (void){
    20b0:	cf 92       	push	r12
    20b2:	df 92       	push	r13
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	cf 93       	push	r28


circLength = wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    20ba:	2b ed       	ldi	r18, 0xDB	; 219
    20bc:	3f e0       	ldi	r19, 0x0F	; 15
    20be:	49 e4       	ldi	r20, 0x49	; 73
    20c0:	50 e4       	ldi	r21, 0x40	; 64
    20c2:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    20c6:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    20ca:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    20ce:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    20d2:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    20d6:	6b 01       	movw	r12, r22
    20d8:	7c 01       	movw	r14, r24
    20da:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__floatsisf>
    20e8:	9b 01       	movw	r18, r22
    20ea:	ac 01       	movw	r20, r24
    20ec:	c7 01       	movw	r24, r14
    20ee:	b6 01       	movw	r22, r12
    20f0:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    20f4:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <circLength>
    20f8:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <circLength+0x1>
    20fc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <circLength+0x2>
    2100:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <circLength+0x3>
timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    2104:	8d eb       	ldi	r24, 0xBD	; 189
    2106:	97 e3       	ldi	r25, 0x37	; 55
    2108:	a6 e8       	ldi	r26, 0x86	; 134
    210a:	b7 e3       	ldi	r27, 0x37	; 55
    210c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <timePerTic>
    2110:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <timePerTic+0x1>
    2114:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <timePerTic+0x2>
    2118:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <timePerTic+0x3>


DDRA|=_BV(0); //ENABLE 2
    211c:	d0 9a       	sbi	0x1a, 0	; 26
DDRA|=_BV(1); //PHASE 2
    211e:	d1 9a       	sbi	0x1a, 1	; 26
DDRA|=_BV(2); //PHASE 1
    2120:	d2 9a       	sbi	0x1a, 2	; 26
DDRA|=_BV(3); //ENABLE 1
    2122:	d3 9a       	sbi	0x1a, 3	; 26
DDRD|=_BV(4);//PWM DIAL LIGHT
    2124:	8c 9a       	sbi	0x11, 4	; 17
DDRD|=_BV(5);//PWM ARROW LIGHT
    2126:	8d 9a       	sbi	0x11, 5	; 17


PORTA|=_BV(3);//ENABLE 1 high (disabled)
    2128:	db 9a       	sbi	0x1b, 3	; 27
PORTA|=_BV(0);//ENABLE 2 high (disabled)
    212a:	d8 9a       	sbi	0x1b, 0	; 27

PORTB|=_BV(5);//internal pull-up for external buttons
    212c:	c5 9a       	sbi	0x18, 5	; 24
PORTB|=_BV(6);
    212e:	c6 9a       	sbi	0x18, 6	; 24
PORTB|=_BV(7);
    2130:	c7 9a       	sbi	0x18, 7	; 24

		//=======================ADC
		ADCSRA |= _BV(ADEN);
    2132:	37 9a       	sbi	0x06, 7	; 6
		//=======================
		ADCSRA |= _BV(ADPS0);		//
    2134:	30 9a       	sbi	0x06, 0	; 6
		ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    2136:	31 9a       	sbi	0x06, 1	; 6
		ADCSRA |= _BV(ADPS2);		//
    2138:	32 9a       	sbi	0x06, 2	; 6

	//================= reading data from EEPROM

	uint8_t firstEepRead;

	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    213a:	88 e0       	ldi	r24, 0x08	; 8
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <eeprom_read_byte>
	if (firstEepRead){
    2142:	88 23       	and	r24, r24
    2144:	89 f0       	breq	.+34     	; 0x2168 <presets+0xb8>
		default_values();
    2146:	0e 94 0a 0b 	call	0x1614	; 0x1614 <default_values>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	64 e0       	ldi	r22, 0x04	; 4
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    2156:	c3 e3       	ldi	r28, 0x33	; 51
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    2158:	43 e0       	ldi	r20, 0x03	; 3
    215a:	64 e0       	ldi	r22, 0x04	; 4
    215c:	80 e8       	ldi	r24, 0x80	; 128
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    2164:	c1 50       	subi	r28, 0x01	; 1

	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		default_values();
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2166:	c1 f7       	brne	.-16     	; 0x2158 <presets+0xa8>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
			}
		}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	64 e0       	ldi	r22, 0x04	; 4
    216c:	88 e0       	ldi	r24, 0x08	; 8
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
	if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2174:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <odometerCurrentAddress>
    2178:	83 33       	cpi	r24, 0x33	; 51
    217a:	10 f0       	brcs	.+4      	; 0x2180 <presets+0xd0>
    217c:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <odometerCurrentAddress>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    2180:	42 e0       	ldi	r20, 0x02	; 2
    2182:	64 e0       	ldi	r22, 0x04	; 4
    2184:	80 e8       	ldi	r24, 0x80	; 128
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>



TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    218c:	85 b5       	in	r24, 0x25	; 37
    218e:	8e 60       	ori	r24, 0x0E	; 14
    2190:	85 bd       	out	0x25, r24	; 37
OCR2 = TIC-1; //upper limit of Timer2
    2192:	8e ef       	ldi	r24, 0xFE	; 254
    2194:	83 bd       	out	0x23, r24	; 35

	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    2196:	83 ea       	ldi	r24, 0xA3	; 163
    2198:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    219a:	8b e0       	ldi	r24, 0x0B	; 11
    219c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    219e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <pwmArrow>
    21a2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <pwmArrow+0x1>
    21a6:	9b bd       	out	0x2b, r25	; 43
    21a8:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    21aa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <pwmDial>
    21ae:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <pwmDial+0x1>
    21b2:	99 bd       	out	0x29, r25	; 41
    21b4:	88 bd       	out	0x28, r24	; 40
	//============================
	
		kmhPerStep = (360.0/(smSteps*stepMode))/degreesPerKmh;
    21b6:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <stepMode>
    21ba:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <smSteps>
    21be:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <smSteps+0x1>
    21c2:	28 9f       	mul	r18, r24
    21c4:	b0 01       	movw	r22, r0
    21c6:	29 9f       	mul	r18, r25
    21c8:	70 0d       	add	r23, r0
    21ca:	11 24       	eor	r1, r1
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    21d4:	9b 01       	movw	r18, r22
    21d6:	ac 01       	movw	r20, r24
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	84 eb       	ldi	r24, 0xB4	; 180
    21de:	93 e4       	ldi	r25, 0x43	; 67
    21e0:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    21e4:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <degreesPerKmh>
    21e8:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    21ec:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    21f0:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    21f4:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    21f8:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <kmhPerStep>
    21fc:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <kmhPerStep+0x1>
    2200:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <kmhPerStep+0x2>
    2204:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <kmhPerStep+0x3>
	

//display initialization
GLCD_Setup();
    2208:	0e 94 89 1a 	call	0x3512	; 0x3512 <GLCD_Setup>
GLCD_Clear();
    220c:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
GLCD_SetContrast(lcdContrast);
    2210:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <lcdContrast>
    2214:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <GLCD_SetContrast>
GLCD_Render();
    2218:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
sei();
    221c:	78 94       	sei
if (!arrowCalibrated) arrow_calibration();
    221e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <arrowCalibrated>
    2222:	81 11       	cpse	r24, r1
    2224:	02 c0       	rjmp	.+4      	; 0x222a <presets+0x17a>
    2226:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <arrow_calibration>
MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
    222a:	85 b7       	in	r24, 0x35	; 53
    222c:	88 60       	ori	r24, 0x08	; 8
    222e:	85 bf       	out	0x35, r24	; 53
GICR|=_BV(INT1); //External Interrupt Enable INT1
    2230:	8b b7       	in	r24, 0x3b	; 59
    2232:	80 68       	ori	r24, 0x80	; 128
    2234:	8b bf       	out	0x3b, r24	; 59
}
    2236:	cf 91       	pop	r28
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	08 95       	ret

00002242 <calculate_speed>:

				}

}

void calculate_speed(){
    2242:	cf 93       	push	r28

			if(speedTimer>MAX_PERIOD){//if Hall sensor was not triggered for too long (MIN_INTERVAL*TIC*0.16us) it means that vehicle does not move
    2244:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <speedTimer>
    2248:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <speedTimer+0x1>
    224c:	85 3b       	cpi	r24, 0xB5	; 181
    224e:	91 05       	cpc	r25, r1
    2250:	30 f1       	brcs	.+76     	; 0x229e <calculate_speed+0x5c>
						
						TIMSK&=~_BV(OCIE2);	
    2252:	89 b7       	in	r24, 0x39	; 57
    2254:	8f 77       	andi	r24, 0x7F	; 127
    2256:	89 bf       	out	0x39, r24	; 57
						TCNT2 = 0;
    2258:	14 bc       	out	0x24, r1	; 36
						speedTimer = 0;
    225a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <speedTimer+0x1>
    225e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <speedTimer>
						speedTimerRecent = 0;	//speedTimer;//?
    2262:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <speedTimerRecent+0x1>
    2266:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <speedTimerRecent>
						speedKmh = 0;
    226a:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <speedKmh>
    226e:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <speedKmh+0x1>
    2272:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <speedKmh+0x2>
    2276:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <speedKmh+0x3>
						firstMeasure = 0;
    227a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <firstMeasure>
						frequency = 0;
    227e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <frequency>
    2282:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <frequency+0x1>
    2286:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <frequency+0x2>
    228a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <frequency+0x3>
						cli();
    228e:	f8 94       	cli
						eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    2290:	43 e0       	ldi	r20, 0x03	; 3
    2292:	64 e0       	ldi	r22, 0x04	; 4
    2294:	80 e8       	ldi	r24, 0x80	; 128
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
						sei();
    229c:	78 94       	sei
						}
			//if((speedRefresh)&&(speedTimerRecent)){
				if(speedTimerRecent){
    229e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <speedTimerRecent>
    22a2:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <speedTimerRecent+0x1>
    22a6:	89 2b       	or	r24, r25
    22a8:	e1 f1       	breq	.+120    	; 0x2322 <calculate_speed+0xe0>
						//speedKmh = 1.0/(timePerTic*speedTimerRecent)*3.6*circLength;
						frequency = 1.0/(timePerTic*speedTimerRecent);
    22aa:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <speedTimerRecent>
    22ae:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <speedTimerRecent+0x1>
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    22ba:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <timePerTic>
    22be:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <timePerTic+0x1>
    22c2:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <timePerTic+0x2>
    22c6:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <timePerTic+0x3>
    22ca:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    22ce:	9b 01       	movw	r18, r22
    22d0:	ac 01       	movw	r20, r24
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	80 e8       	ldi	r24, 0x80	; 128
    22d8:	9f e3       	ldi	r25, 0x3F	; 63
    22da:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    22de:	60 93 66 02 	sts	0x0266, r22	; 0x800266 <frequency>
    22e2:	70 93 67 02 	sts	0x0267, r23	; 0x800267 <frequency+0x1>
    22e6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <frequency+0x2>
    22ea:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <frequency+0x3>
						speedKmh = frequency*3.6*circLength;
    22ee:	26 e6       	ldi	r18, 0x66	; 102
    22f0:	36 e6       	ldi	r19, 0x66	; 102
    22f2:	46 e6       	ldi	r20, 0x66	; 102
    22f4:	50 e4       	ldi	r21, 0x40	; 64
    22f6:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    22fa:	9b 01       	movw	r18, r22
    22fc:	ac 01       	movw	r20, r24
    22fe:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <circLength>
    2302:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <circLength+0x1>
    2306:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <circLength+0x2>
    230a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <circLength+0x3>
    230e:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    2312:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <speedKmh>
    2316:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <speedKmh+0x1>
    231a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <speedKmh+0x2>
    231e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <speedKmh+0x3>
						}

		if (speedKmh>scaleMax)speedKmh = scaleMax;
    2322:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <scaleMax>
    2326:	6c 2f       	mov	r22, r28
    2328:	70 e0       	ldi	r23, 0x00	; 0
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__floatsisf>
    2332:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <speedKmh>
    2336:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <speedKmh+0x1>
    233a:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <speedKmh+0x2>
    233e:	50 91 5d 02 	lds	r21, 0x025D	; 0x80025d <speedKmh+0x3>
    2342:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    2346:	88 23       	and	r24, r24
    2348:	74 f4       	brge	.+28     	; 0x2366 <calculate_speed+0x124>
    234a:	6c 2f       	mov	r22, r28
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    2356:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <speedKmh>
    235a:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <speedKmh+0x1>
    235e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <speedKmh+0x2>
    2362:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <speedKmh+0x3>
		//speedRefresh = 0;
		}
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <set_value>:
		}


	}

	uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    236a:	2f 92       	push	r2
    236c:	3f 92       	push	r3
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	2c 97       	sbiw	r28, 0x0c	; 12
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	5a 01       	movw	r10, r20
    23a0:	d2 2e       	mov	r13, r18
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	7a 83       	std	Y+2, r23	; 0x02
    23a8:	69 83       	std	Y+1, r22	; 0x01

		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	48 e0       	ldi	r20, 0x08	; 8
    23ae:	65 e0       	ldi	r22, 0x05	; 5
    23b0:	80 ea       	ldi	r24, 0xA0	; 160
    23b2:	9b e0       	ldi	r25, 0x0B	; 11
    23b4:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
		GLCD_Clear();
    23b8:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
		GLCD_GotoLine(1);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(10);
    23c2:	8a e0       	ldi	r24, 0x0A	; 10
    23c4:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString(text);
    23c8:	c8 01       	movw	r24, r16
    23ca:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoY(8+16);
    23ce:	88 e1       	ldi	r24, 0x18	; 24
    23d0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
		GLCD_GotoX(90);
    23d4:	8a e5       	ldi	r24, 0x5A	; 90
    23d6:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Edit");
    23da:	83 e8       	ldi	r24, 0x83	; 131
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoY(20+16);
    23e2:	84 e2       	ldi	r24, 0x24	; 36
    23e4:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
		GLCD_GotoX(90);
    23e8:	8a e5       	ldi	r24, 0x5A	; 90
    23ea:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Back");
    23ee:	88 e8       	ldi	r24, 0x88	; 136
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoY(32+16);
    23f6:	80 e3       	ldi	r24, 0x30	; 48
    23f8:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
		GLCD_GotoX(90);
    23fc:	8a e5       	ldi	r24, 0x5A	; 90
    23fe:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Save");
    2402:	8d e8       	ldi	r24, 0x8D	; 141
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>

		if (tens){
    240a:	dd 20       	and	r13, r13
    240c:	09 f4       	brne	.+2      	; 0x2410 <set_value+0xa6>
    240e:	67 c0       	rjmp	.+206    	; 0x24de <set_value+0x174>
			uint16_t devider = 1;
			for (int8_t i = 0;i<tens;i++){devider*=10;}
    2410:	2d 2d       	mov	r18, r13
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	12 16       	cp	r1, r18
    2416:	13 06       	cpc	r1, r19
    2418:	cc f4       	brge	.+50     	; 0x244c <set_value+0xe2>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	01 e0       	ldi	r16, 0x01	; 1
    241e:	10 e0       	ldi	r17, 0x00	; 0
    2420:	a8 01       	movw	r20, r16
    2422:	44 0f       	add	r20, r20
    2424:	55 1f       	adc	r21, r21
    2426:	38 01       	movw	r6, r16
    2428:	66 0c       	add	r6, r6
    242a:	77 1c       	adc	r7, r7
    242c:	66 0c       	add	r6, r6
    242e:	77 1c       	adc	r7, r7
    2430:	66 0c       	add	r6, r6
    2432:	77 1c       	adc	r7, r7
    2434:	8a 01       	movw	r16, r20
    2436:	06 0d       	add	r16, r6
    2438:	17 1d       	adc	r17, r7
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	48 2f       	mov	r20, r24
    243e:	08 2e       	mov	r0, r24
    2440:	00 0c       	add	r0, r0
    2442:	55 0b       	sbc	r21, r21
    2444:	42 17       	cp	r20, r18
    2446:	53 07       	cpc	r21, r19
    2448:	5c f3       	brlt	.-42     	; 0x2420 <set_value+0xb6>
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <set_value+0xe6>
    244c:	01 e0       	ldi	r16, 0x01	; 1
    244e:	10 e0       	ldi	r17, 0x00	; 0
			GLCD_SetFont(Font5x8,5,8,GLCD_Overwrite);
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	48 e0       	ldi	r20, 0x08	; 8
    2454:	65 e0       	ldi	r22, 0x05	; 5
    2456:	80 ea       	ldi	r24, 0xA0	; 160
    2458:	9b e0       	ldi	r25, 0x0B	; 11
    245a:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
			GLCD_GotoY(40);
    245e:	88 e2       	ldi	r24, 0x28	; 40
    2460:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
			GLCD_GotoX(6);
    2464:	86 e0       	ldi	r24, 0x06	; 6
    2466:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
			GLCD_PrintString("min:");
    246a:	82 e9       	ldi	r24, 0x92	; 146
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
			
			GLCD_PrintDouble(minValue/(double)devider,devider);
    2472:	28 01       	movw	r4, r16
    2474:	61 2c       	mov	r6, r1
    2476:	71 2c       	mov	r7, r1
    2478:	c3 01       	movw	r24, r6
    247a:	b2 01       	movw	r22, r4
    247c:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    2480:	69 87       	std	Y+9, r22	; 0x09
    2482:	7a 87       	std	Y+10, r23	; 0x0a
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	69 81       	ldd	r22, Y+1	; 0x01
    248a:	7a 81       	ldd	r23, Y+2	; 0x02
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    2494:	29 85       	ldd	r18, Y+9	; 0x09
    2496:	3a 85       	ldd	r19, Y+10	; 0x0a
    2498:	4b 85       	ldd	r20, Y+11	; 0x0b
    249a:	5c 85       	ldd	r21, Y+12	; 0x0c
    249c:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    24a0:	a3 01       	movw	r20, r6
    24a2:	92 01       	movw	r18, r4
    24a4:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
			GLCD_GotoY(50);
    24a8:	82 e3       	ldi	r24, 0x32	; 50
    24aa:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
			GLCD_GotoX(6);
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
			GLCD_PrintString("max:");
    24b4:	87 e9       	ldi	r24, 0x97	; 151
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
			GLCD_PrintDouble(maxValue/(double)devider,devider);
    24bc:	6b 81       	ldd	r22, Y+3	; 0x03
    24be:	7c 81       	ldd	r23, Y+4	; 0x04
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    24c8:	29 85       	ldd	r18, Y+9	; 0x09
    24ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    24cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    24ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    24d0:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    24d4:	a3 01       	movw	r20, r6
    24d6:	92 01       	movw	r18, r4
    24d8:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
    24dc:	20 c0       	rjmp	.+64     	; 0x251e <set_value+0x1b4>
			}else{
			GLCD_GotoY(40);
    24de:	88 e2       	ldi	r24, 0x28	; 40
    24e0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
			GLCD_GotoX(6);
    24e4:	86 e0       	ldi	r24, 0x06	; 6
    24e6:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
			GLCD_PrintString("min:");
    24ea:	82 e9       	ldi	r24, 0x92	; 146
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
			GLCD_PrintInteger(minValue);
    24f2:	69 81       	ldd	r22, Y+1	; 0x01
    24f4:	7a 81       	ldd	r23, Y+2	; 0x02
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
			GLCD_GotoY(50);
    24fe:	82 e3       	ldi	r24, 0x32	; 50
    2500:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
			GLCD_GotoX(6);
    2504:	86 e0       	ldi	r24, 0x06	; 6
    2506:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
			GLCD_PrintString("max:");
    250a:	87 e9       	ldi	r24, 0x97	; 151
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
			GLCD_PrintInteger(maxValue);
    2512:	6b 81       	ldd	r22, Y+3	; 0x03
    2514:	7c 81       	ldd	r23, Y+4	; 0x04
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
		}
		
		
		GLCD_GotoY(24-4);
    251e:	84 e1       	ldi	r24, 0x14	; 20
    2520:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
		GLCD_GotoX(5);
    2524:	85 e0       	ldi	r24, 0x05	; 5
    2526:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	41 e1       	ldi	r20, 0x11	; 17
    252e:	6c e0       	ldi	r22, 0x0C	; 12
    2530:	84 e7       	ldi	r24, 0x74	; 116
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
	}

	while(tempValue)       //finding the number of digits for current value
    2538:	a1 14       	cp	r10, r1
    253a:	b1 04       	cpc	r11, r1
    253c:	91 f0       	breq	.+36     	; 0x2562 <set_value+0x1f8>
    253e:	95 01       	movw	r18, r10
    2540:	00 e0       	ldi	r16, 0x00	; 0
	   {
		   tempValue = tempValue / 10;
    2542:	ad ec       	ldi	r26, 0xCD	; 205
    2544:	bc ec       	ldi	r27, 0xCC	; 204
    2546:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__umulhisi3>
    254a:	9c 01       	movw	r18, r24
    254c:	36 95       	lsr	r19
    254e:	27 95       	ror	r18
    2550:	36 95       	lsr	r19
    2552:	27 95       	ror	r18
    2554:	36 95       	lsr	r19
    2556:	27 95       	ror	r18
		   valueLength++;
    2558:	0f 5f       	subi	r16, 0xFF	; 255
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
	}

	while(tempValue)       //finding the number of digits for current value
    255a:	21 15       	cp	r18, r1
    255c:	31 05       	cpc	r19, r1
    255e:	89 f7       	brne	.-30     	; 0x2542 <set_value+0x1d8>
    2560:	01 c0       	rjmp	.+2      	; 0x2564 <set_value+0x1fa>
	uint8_t valueLength;
	uint8_t maxValueLength;
	int8_t *digitsArr;
	int8_t currentItem = 0;
	tempValue = currValue;
	valueLength = 0;
    2562:	00 e0       	ldi	r16, 0x00	; 0
	while(tempValue)       //finding the number of digits for current value
	   {
		   tempValue = tempValue / 10;
		   valueLength++;
		        }
	tempValue = maxValue;
    2564:	2b 81       	ldd	r18, Y+3	; 0x03
    2566:	3c 81       	ldd	r19, Y+4	; 0x04
	maxValueLength = 0;
    2568:	18 86       	std	Y+8, r1	; 0x08
	while(tempValue)       //finding the number of digits for maximum value allowed
    256a:	21 15       	cp	r18, r1
    256c:	31 05       	cpc	r19, r1
    256e:	09 f4       	brne	.+2      	; 0x2572 <set_value+0x208>
    2570:	db c1       	rjmp	.+950    	; 0x2928 <set_value+0x5be>
    2572:	11 e0       	ldi	r17, 0x01	; 1
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <set_value+0x20e>
    2576:	18 2f       	mov	r17, r24
		{
			tempValue = tempValue / 10;
    2578:	ad ec       	ldi	r26, 0xCD	; 205
    257a:	bc ec       	ldi	r27, 0xCC	; 204
    257c:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__umulhisi3>
    2580:	9c 01       	movw	r18, r24
    2582:	36 95       	lsr	r19
    2584:	27 95       	ror	r18
    2586:	36 95       	lsr	r19
    2588:	27 95       	ror	r18
    258a:	36 95       	lsr	r19
    258c:	27 95       	ror	r18
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	81 0f       	add	r24, r17
		   tempValue = tempValue / 10;
		   valueLength++;
		        }
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2592:	21 15       	cp	r18, r1
    2594:	31 05       	cpc	r19, r1
    2596:	79 f7       	brne	.-34     	; 0x2576 <set_value+0x20c>
    2598:	18 87       	std	Y+8, r17	; 0x08
		{
			tempValue = tempValue / 10;
			maxValueLength++;
				}

		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    259a:	e1 2e       	mov	r14, r17
    259c:	f1 2c       	mov	r15, r1
    259e:	c7 01       	movw	r24, r14
    25a0:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <malloc>
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
		tempValue = currValue;
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    25a8:	1f 82       	std	Y+7, r1	; 0x07
    25aa:	97 01       	movw	r18, r14
    25ac:	12 16       	cp	r1, r18
    25ae:	13 06       	cpc	r1, r19
    25b0:	0c f0       	brlt	.+2      	; 0x25b4 <set_value+0x24a>
    25b2:	4c c0       	rjmp	.+152    	; 0x264c <set_value+0x2e2>
    25b4:	f5 01       	movw	r30, r10
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	80 e0       	ldi	r24, 0x00	; 0
			if (digitIndex<valueLength){
    25bc:	40 2f       	mov	r20, r16
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	64 17       	cp	r22, r20
    25c2:	75 07       	cpc	r23, r21
    25c4:	74 f5       	brge	.+92     	; 0x2622 <set_value+0x2b8>
				digitsArr[digitIndex] = tempValue % 10;
    25c6:	0d 81       	ldd	r16, Y+5	; 0x05
    25c8:	1e 81       	ldd	r17, Y+6	; 0x06
    25ca:	08 0f       	add	r16, r24
    25cc:	11 1d       	adc	r17, r1
    25ce:	87 fd       	sbrc	r24, 7
    25d0:	1a 95       	dec	r17
    25d2:	9f 01       	movw	r18, r30
    25d4:	ad ec       	ldi	r26, 0xCD	; 205
    25d6:	bc ec       	ldi	r27, 0xCC	; 204
    25d8:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__umulhisi3>
    25dc:	96 95       	lsr	r25
    25de:	87 95       	ror	r24
    25e0:	96 95       	lsr	r25
    25e2:	87 95       	ror	r24
    25e4:	96 95       	lsr	r25
    25e6:	87 95       	ror	r24
    25e8:	9c 01       	movw	r18, r24
    25ea:	22 0f       	add	r18, r18
    25ec:	33 1f       	adc	r19, r19
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	9f 01       	movw	r18, r30
    2600:	28 1b       	sub	r18, r24
    2602:	39 0b       	sbc	r19, r25
    2604:	d8 01       	movw	r26, r16
    2606:	2c 93       	st	X, r18
				tempValue = tempValue / 10;
    2608:	9f 01       	movw	r18, r30
    260a:	ad ec       	ldi	r26, 0xCD	; 205
    260c:	bc ec       	ldi	r27, 0xCC	; 204
    260e:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <__umulhisi3>
    2612:	fc 01       	movw	r30, r24
    2614:	f6 95       	lsr	r31
    2616:	e7 95       	ror	r30
    2618:	f6 95       	lsr	r31
    261a:	e7 95       	ror	r30
    261c:	f6 95       	lsr	r31
    261e:	e7 95       	ror	r30
    2620:	07 c0       	rjmp	.+14     	; 0x2630 <set_value+0x2c6>
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    2622:	ad 81       	ldd	r26, Y+5	; 0x05
    2624:	be 81       	ldd	r27, Y+6	; 0x06
    2626:	a8 0f       	add	r26, r24
    2628:	b1 1d       	adc	r27, r1
    262a:	87 fd       	sbrc	r24, 7
    262c:	ba 95       	dec	r27
    262e:	1c 92       	st	X, r1
			maxValueLength++;
				}

		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
		tempValue = currValue;
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2630:	8f 81       	ldd	r24, Y+7	; 0x07
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	8f 83       	std	Y+7, r24	; 0x07
    2636:	68 2f       	mov	r22, r24
    2638:	08 2e       	mov	r0, r24
    263a:	00 0c       	add	r0, r0
    263c:	77 0b       	sbc	r23, r23
    263e:	18 85       	ldd	r17, Y+8	; 0x08
    2640:	21 2f       	mov	r18, r17
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	62 17       	cp	r22, r18
    2646:	73 07       	cpc	r23, r19
    2648:	0c f4       	brge	.+2      	; 0x264c <set_value+0x2e2>
    264a:	ba cf       	rjmp	.-140    	; 0x25c0 <set_value+0x256>
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    264c:	21 50       	subi	r18, 0x01	; 1
    264e:	31 09       	sbc	r19, r1
    2650:	0d e0       	ldi	r16, 0x0D	; 13
    2652:	20 9f       	mul	r18, r16
    2654:	20 2d       	mov	r18, r0
    2656:	11 24       	eor	r1, r1
    2658:	05 e0       	ldi	r16, 0x05	; 5
    265a:	02 0f       	add	r16, r18
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    265c:	11 50       	subi	r17, 0x01	; 1
    265e:	1f 83       	std	Y+7, r17	; 0x07
    2660:	11 23       	and	r17, r17
    2662:	1c f1       	brlt	.+70     	; 0x26aa <set_value+0x340>
				GLCD_PrintInteger(digitsArr[digitIndex]);
					if ((digitIndex==tens)&&(tens)){
    2664:	ed 2c       	mov	r14, r13
    2666:	f1 2c       	mov	r15, r1
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2668:	ed 81       	ldd	r30, Y+5	; 0x05
    266a:	fe 81       	ldd	r31, Y+6	; 0x06
    266c:	e1 0f       	add	r30, r17
    266e:	f1 1d       	adc	r31, r1
    2670:	17 fd       	sbrc	r17, 7
    2672:	fa 95       	dec	r31
    2674:	60 81       	ld	r22, Z
    2676:	06 2e       	mov	r0, r22
    2678:	00 0c       	add	r0, r0
    267a:	77 0b       	sbc	r23, r23
    267c:	88 0b       	sbc	r24, r24
    267e:	99 0b       	sbc	r25, r25
    2680:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
					if ((digitIndex==tens)&&(tens)){
    2684:	8f 81       	ldd	r24, Y+7	; 0x07
    2686:	08 2e       	mov	r0, r24
    2688:	00 0c       	add	r0, r0
    268a:	99 0b       	sbc	r25, r25
    268c:	8e 15       	cp	r24, r14
    268e:	9f 05       	cpc	r25, r15
    2690:	39 f4       	brne	.+14     	; 0x26a0 <set_value+0x336>
    2692:	dd 20       	and	r13, r13
    2694:	29 f0       	breq	.+10     	; 0x26a0 <set_value+0x336>
						GLCD_PrintString(".");
    2696:	87 e2       	ldi	r24, 0x27	; 39
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
					rectShift+=5;
    269e:	0b 5f       	subi	r16, 0xFB	; 251
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    26a0:	1f 81       	ldd	r17, Y+7	; 0x07
    26a2:	11 50       	subi	r17, 0x01	; 1
    26a4:	1f 83       	std	Y+7, r17	; 0x07
    26a6:	11 23       	and	r17, r17
    26a8:	fc f6       	brge	.-66     	; 0x2668 <set_value+0x2fe>
					}
				}



		GLCD_InvertRect(rectShift,24-4,rectShift+12,40-4);
    26aa:	4c e0       	ldi	r20, 0x0C	; 12
    26ac:	40 0f       	add	r20, r16
    26ae:	24 e2       	ldi	r18, 0x24	; 36
    26b0:	64 e1       	ldi	r22, 0x14	; 20
    26b2:	80 2f       	mov	r24, r16
    26b4:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <GLCD_InvertRect>
		GLCD_Render();
    26b8:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>



		while (button_monitor());
    26bc:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    26c0:	81 11       	cpse	r24, r1
    26c2:	fc cf       	rjmp	.-8      	; 0x26bc <set_value+0x352>
    26c4:	00 e0       	ldi	r16, 0x00	; 0
					}
			GLCD_GotoY(24-4);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    26c6:	ed 2c       	mov	r14, r13
    26c8:	f1 2c       	mov	r15, r1
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    26ca:	0f 2e       	mov	r0, r31
    26cc:	fd e0       	ldi	r31, 0x0D	; 13
    26ce:	cf 2e       	mov	r12, r31
    26d0:	f0 2d       	mov	r31, r0
    26d2:	0f 2e       	mov	r0, r31
    26d4:	f3 ef       	ldi	r31, 0xF3	; 243
    26d6:	5f 2e       	mov	r5, r31
    26d8:	f0 2d       	mov	r31, r0
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
					else if (currentButton == 2) {
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    26da:	0f 2e       	mov	r0, r31
    26dc:	f9 e0       	ldi	r31, 0x09	; 9
    26de:	6f 2e       	mov	r6, r31
    26e0:	f0 2d       	mov	r31, r0


		while (button_monitor());
		uint8_t currentButton = 0;
			while(1){
				currentButton = button_monitor();
    26e2:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
				if(currentButton){
    26e6:	88 23       	and	r24, r24
    26e8:	09 f4       	brne	.+2      	; 0x26ec <set_value+0x382>
    26ea:	12 c1       	rjmp	.+548    	; 0x2910 <set_value+0x5a6>
					rectShift = 0;
						if (currentButton == 1) {
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <set_value+0x388>
    26f0:	78 c0       	rjmp	.+240    	; 0x27e2 <set_value+0x478>
							currentItem++;
    26f2:	0f 5f       	subi	r16, 0xFF	; 255
							if (currentItem==maxValueLength){
    26f4:	20 2f       	mov	r18, r16
    26f6:	00 2e       	mov	r0, r16
    26f8:	00 0c       	add	r0, r0
    26fa:	33 0b       	sbc	r19, r19
    26fc:	88 85       	ldd	r24, Y+8	; 0x08
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	28 17       	cp	r18, r24
    2702:	39 07       	cpc	r19, r25
    2704:	09 f0       	breq	.+2      	; 0x2708 <set_value+0x39e>
    2706:	bc c0       	rjmp	.+376    	; 0x2880 <set_value+0x516>
								currentItem = 0;

								//=====
									while(button_monitor());
    2708:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    270c:	81 11       	cpse	r24, r1
    270e:	fc cf       	rjmp	.-8      	; 0x2708 <set_value+0x39e>
									int8_t menuItem = 0;
									GLCD_InvertRect(rectShift+5,24-4,rectShift+5+12,40-4);
    2710:	24 e2       	ldi	r18, 0x24	; 36
    2712:	41 e1       	ldi	r20, 0x11	; 17
    2714:	64 e1       	ldi	r22, 0x14	; 20
    2716:	85 e0       	ldi	r24, 0x05	; 5
    2718:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <GLCD_InvertRect>
							if (currentItem==maxValueLength){
								currentItem = 0;

								//=====
									while(button_monitor());
									int8_t menuItem = 0;
    271c:	10 e0       	ldi	r17, 0x00	; 0
									GLCD_InvertRect(rectShift+5,24-4,rectShift+5+12,40-4);
									while(1){
									currentButton = button_monitor();
    271e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>

										if(currentButton){
    2722:	88 23       	and	r24, r24
    2724:	99 f1       	breq	.+102    	; 0x278c <set_value+0x422>
											if (currentButton == 3) {
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	21 f4       	brne	.+8      	; 0x2732 <set_value+0x3c8>
												menuItem--;
    272a:	11 50       	subi	r17, 0x01	; 1
												if (menuItem<0)menuItem = 2;
    272c:	7a f5       	brpl	.+94     	; 0x278c <set_value+0x422>
    272e:	12 e0       	ldi	r17, 0x02	; 2
    2730:	2d c0       	rjmp	.+90     	; 0x278c <set_value+0x422>
											}
											else if (currentButton == 2) {
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	29 f4       	brne	.+10     	; 0x2740 <set_value+0x3d6>
												menuItem++;
    2736:	1f 5f       	subi	r17, 0xFF	; 255
												if (menuItem>2)menuItem=0;
    2738:	13 30       	cpi	r17, 0x03	; 3
    273a:	44 f1       	brlt	.+80     	; 0x278c <set_value+0x422>
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	26 c0       	rjmp	.+76     	; 0x278c <set_value+0x422>
											}
											else if (currentButton == 1) {
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	21 f5       	brne	.+72     	; 0x278c <set_value+0x422>
													if (!menuItem){	//getting back to value edit
    2744:	11 11       	cpse	r17, r1
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <set_value+0x40a>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,5+16+i*12,116,17+16+i*12,GLCD_White);}
    2748:	00 e0       	ldi	r16, 0x00	; 0
    274a:	21 e2       	ldi	r18, 0x21	; 33
    274c:	44 e7       	ldi	r20, 0x74	; 116
    274e:	65 e1       	ldi	r22, 0x15	; 21
    2750:	86 e5       	ldi	r24, 0x56	; 86
    2752:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
    2756:	2d e2       	ldi	r18, 0x2D	; 45
    2758:	44 e7       	ldi	r20, 0x74	; 116
    275a:	61 e2       	ldi	r22, 0x21	; 33
    275c:	86 e5       	ldi	r24, 0x56	; 86
    275e:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
    2762:	29 e3       	ldi	r18, 0x39	; 57
    2764:	44 e7       	ldi	r20, 0x74	; 116
    2766:	6d e2       	ldi	r22, 0x2D	; 45
    2768:	86 e5       	ldi	r24, 0x56	; 86
    276a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
														GLCD_Render();
    276e:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
														break;
    2772:	86 c0       	rjmp	.+268    	; 0x2880 <set_value+0x516>
													}
													else if (menuItem == 1){
    2774:	11 30       	cpi	r17, 0x01	; 1
    2776:	09 f4       	brne	.+2      	; 0x277a <set_value+0x410>
    2778:	d4 c0       	rjmp	.+424    	; 0x2922 <set_value+0x5b8>
														return currValue; //if changes are discarded - return initial value
													}
													else if (menuItem == 2){
    277a:	12 30       	cpi	r17, 0x02	; 2
    277c:	39 f4       	brne	.+14     	; 0x278c <set_value+0x422>
														return new_value();
    277e:	9e 01       	movw	r18, r28
    2780:	2f 5f       	subi	r18, 0xFF	; 255
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	19 01       	movw	r2, r18
    2786:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2917>
    278a:	e4 c0       	rjmp	.+456    	; 0x2954 <set_value+0x5ea>
													}
											}

									}
							for (int8_t i=0;i<3;i++){GLCD_DrawRectangle(86,5+16+i*12,116,17+16+i*12,GLCD_White);}
    278c:	00 e0       	ldi	r16, 0x00	; 0
    278e:	21 e2       	ldi	r18, 0x21	; 33
    2790:	44 e7       	ldi	r20, 0x74	; 116
    2792:	65 e1       	ldi	r22, 0x15	; 21
    2794:	86 e5       	ldi	r24, 0x56	; 86
    2796:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
    279a:	2d e2       	ldi	r18, 0x2D	; 45
    279c:	44 e7       	ldi	r20, 0x74	; 116
    279e:	61 e2       	ldi	r22, 0x21	; 33
    27a0:	86 e5       	ldi	r24, 0x56	; 86
    27a2:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
    27a6:	29 e3       	ldi	r18, 0x39	; 57
    27a8:	44 e7       	ldi	r20, 0x74	; 116
    27aa:	6d e2       	ldi	r22, 0x2D	; 45
    27ac:	86 e5       	ldi	r24, 0x56	; 86
    27ae:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>

									GLCD_DrawRectangle(86,5+16+menuItem*12,116,17+16+menuItem*12,GLCD_Black);
    27b2:	61 2f       	mov	r22, r17
    27b4:	66 0f       	add	r22, r22
    27b6:	61 0f       	add	r22, r17
    27b8:	66 0f       	add	r22, r22
    27ba:	66 0f       	add	r22, r22
    27bc:	21 e2       	ldi	r18, 0x21	; 33
    27be:	26 0f       	add	r18, r22
    27c0:	6b 5e       	subi	r22, 0xEB	; 235
    27c2:	0f ef       	ldi	r16, 0xFF	; 255
    27c4:	44 e7       	ldi	r20, 0x74	; 116
    27c6:	86 e5       	ldi	r24, 0x56	; 86
    27c8:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
									GLCD_Render();
    27cc:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
							while(button_monitor());
    27d0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    27d4:	81 11       	cpse	r24, r1
    27d6:	fc cf       	rjmp	.-8      	; 0x27d0 <set_value+0x466>
							while(!button_monitor());
    27d8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    27dc:	88 23       	and	r24, r24
    27de:	e1 f3       	breq	.-8      	; 0x27d8 <set_value+0x46e>
    27e0:	9e cf       	rjmp	.-196    	; 0x271e <set_value+0x3b4>
							//=============
						}

					}

					if (currentButton == 3) {
    27e2:	83 30       	cpi	r24, 0x03	; 3
    27e4:	31 f5       	brne	.+76     	; 0x2832 <set_value+0x4c8>
						int8_t prevValue = digitsArr[currentItem];
    27e6:	80 2e       	mov	r8, r16
    27e8:	00 2e       	mov	r0, r16
    27ea:	00 0c       	add	r0, r0
    27ec:	99 08       	sbc	r9, r9
    27ee:	ed 81       	ldd	r30, Y+5	; 0x05
    27f0:	fe 81       	ldd	r31, Y+6	; 0x06
    27f2:	e8 0d       	add	r30, r8
    27f4:	f9 1d       	adc	r31, r9
    27f6:	70 80       	ld	r7, Z
						digitsArr[currentItem]++;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	87 0d       	add	r24, r7
    27fc:	80 83       	st	Z, r24
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    27fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2800:	fe 81       	ldd	r31, Y+6	; 0x06
    2802:	e8 0d       	add	r30, r8
    2804:	f9 1d       	adc	r31, r9
    2806:	80 81       	ld	r24, Z
    2808:	8a 30       	cpi	r24, 0x0A	; 10
    280a:	0c f0       	brlt	.+2      	; 0x280e <set_value+0x4a4>
    280c:	10 82       	st	Z, r1
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	1c 01       	movw	r2, r24
    2814:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2917>
			newValue += tenPower;
		}
		return newValue;
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
    2818:	2b 81       	ldd	r18, Y+3	; 0x03
    281a:	3c 81       	ldd	r19, Y+4	; 0x04
    281c:	28 17       	cp	r18, r24
    281e:	39 07       	cpc	r19, r25
    2820:	08 f4       	brcc	.+2      	; 0x2824 <set_value+0x4ba>
    2822:	8c c0       	rjmp	.+280    	; 0x293c <set_value+0x5d2>
    2824:	29 81       	ldd	r18, Y+1	; 0x01
    2826:	3a 81       	ldd	r19, Y+2	; 0x02
    2828:	82 17       	cp	r24, r18
    282a:	93 07       	cpc	r25, r19
    282c:	08 f4       	brcc	.+2      	; 0x2830 <set_value+0x4c6>
    282e:	86 c0       	rjmp	.+268    	; 0x293c <set_value+0x5d2>
    2830:	27 c0       	rjmp	.+78     	; 0x2880 <set_value+0x516>
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
					else if (currentButton == 2) {
    2832:	82 30       	cpi	r24, 0x02	; 2
    2834:	29 f5       	brne	.+74     	; 0x2880 <set_value+0x516>
						int8_t prevValue = digitsArr[currentItem];
    2836:	80 2e       	mov	r8, r16
    2838:	00 2e       	mov	r0, r16
    283a:	00 0c       	add	r0, r0
    283c:	99 08       	sbc	r9, r9
    283e:	ed 81       	ldd	r30, Y+5	; 0x05
    2840:	fe 81       	ldd	r31, Y+6	; 0x06
    2842:	e8 0d       	add	r30, r8
    2844:	f9 1d       	adc	r31, r9
    2846:	70 80       	ld	r7, Z
						digitsArr[currentItem]--;
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	87 0d       	add	r24, r7
    284c:	80 83       	st	Z, r24
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    284e:	ed 81       	ldd	r30, Y+5	; 0x05
    2850:	fe 81       	ldd	r31, Y+6	; 0x06
    2852:	e8 0d       	add	r30, r8
    2854:	f9 1d       	adc	r31, r9
    2856:	80 81       	ld	r24, Z
    2858:	88 23       	and	r24, r24
    285a:	0c f4       	brge	.+2      	; 0x285e <set_value+0x4f4>
    285c:	60 82       	st	Z, r6
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    285e:	de 01       	movw	r26, r28
    2860:	11 96       	adiw	r26, 0x01	; 1
    2862:	1d 01       	movw	r2, r26
    2864:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2917>
			newValue += tenPower;
		}
		return newValue;
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
    2868:	2b 81       	ldd	r18, Y+3	; 0x03
    286a:	3c 81       	ldd	r19, Y+4	; 0x04
    286c:	28 17       	cp	r18, r24
    286e:	39 07       	cpc	r19, r25
    2870:	08 f4       	brcc	.+2      	; 0x2874 <set_value+0x50a>
    2872:	6a c0       	rjmp	.+212    	; 0x2948 <set_value+0x5de>
    2874:	29 81       	ldd	r18, Y+1	; 0x01
    2876:	3a 81       	ldd	r19, Y+2	; 0x02
    2878:	82 17       	cp	r24, r18
    287a:	93 07       	cpc	r25, r19
    287c:	08 f4       	brcc	.+2      	; 0x2880 <set_value+0x516>
    287e:	64 c0       	rjmp	.+200    	; 0x2948 <set_value+0x5de>
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
			GLCD_GotoY(24-4);
    2880:	84 e1       	ldi	r24, 0x14	; 20
    2882:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
			GLCD_GotoX(5);
    2886:	85 e0       	ldi	r24, 0x05	; 5
    2888:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    288c:	88 85       	ldd	r24, Y+8	; 0x08
    288e:	81 50       	subi	r24, 0x01	; 1
    2890:	8f 83       	std	Y+7, r24	; 0x07
    2892:	88 23       	and	r24, r24
    2894:	04 f1       	brlt	.+64     	; 0x28d6 <set_value+0x56c>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2896:	ed 81       	ldd	r30, Y+5	; 0x05
    2898:	fe 81       	ldd	r31, Y+6	; 0x06
    289a:	e8 0f       	add	r30, r24
    289c:	f1 1d       	adc	r31, r1
    289e:	87 fd       	sbrc	r24, 7
    28a0:	fa 95       	dec	r31
    28a2:	60 81       	ld	r22, Z
    28a4:	06 2e       	mov	r0, r22
    28a6:	00 0c       	add	r0, r0
    28a8:	77 0b       	sbc	r23, r23
    28aa:	88 0b       	sbc	r24, r24
    28ac:	99 0b       	sbc	r25, r25
    28ae:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    28b2:	8f 81       	ldd	r24, Y+7	; 0x07
    28b4:	08 2e       	mov	r0, r24
    28b6:	00 0c       	add	r0, r0
    28b8:	99 0b       	sbc	r25, r25
    28ba:	8e 15       	cp	r24, r14
    28bc:	9f 05       	cpc	r25, r15
    28be:	31 f4       	brne	.+12     	; 0x28cc <set_value+0x562>
    28c0:	dd 20       	and	r13, r13
    28c2:	21 f0       	breq	.+8      	; 0x28cc <set_value+0x562>
    28c4:	87 e2       	ldi	r24, 0x27	; 39
    28c6:	92 e0       	ldi	r25, 0x02	; 2
    28c8:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
			GLCD_GotoY(24-4);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    28cc:	8f 81       	ldd	r24, Y+7	; 0x07
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	8f 83       	std	Y+7, r24	; 0x07
    28d2:	88 23       	and	r24, r24
    28d4:	04 f7       	brge	.-64     	; 0x2896 <set_value+0x52c>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    28d6:	88 85       	ldd	r24, Y+8	; 0x08
    28d8:	81 50       	subi	r24, 0x01	; 1
    28da:	05 9d       	mul	r16, r5
    28dc:	90 2d       	mov	r25, r0
    28de:	11 24       	eor	r1, r1
    28e0:	8c 9d       	mul	r24, r12
    28e2:	90 0d       	add	r25, r0
    28e4:	11 24       	eor	r1, r1
    28e6:	85 e0       	ldi	r24, 0x05	; 5
    28e8:	89 0f       	add	r24, r25
			if (tens){
    28ea:	dd 20       	and	r13, r13
    28ec:	49 f0       	breq	.+18     	; 0x2900 <set_value+0x596>
					if(currentItem<tens){
    28ee:	20 2f       	mov	r18, r16
    28f0:	00 2e       	mov	r0, r16
    28f2:	00 0c       	add	r0, r0
    28f4:	33 0b       	sbc	r19, r19
    28f6:	2e 15       	cp	r18, r14
    28f8:	3f 05       	cpc	r19, r15
    28fa:	14 f4       	brge	.+4      	; 0x2900 <set_value+0x596>
						rectShift+=5;
    28fc:	8a e0       	ldi	r24, 0x0A	; 10
    28fe:	89 0f       	add	r24, r25
					}
				}
			GLCD_InvertRect(rectShift,24-4,rectShift+12,40-4);
    2900:	4c e0       	ldi	r20, 0x0C	; 12
    2902:	48 0f       	add	r20, r24
    2904:	24 e2       	ldi	r18, 0x24	; 36
    2906:	64 e1       	ldi	r22, 0x14	; 20
    2908:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <GLCD_InvertRect>
			GLCD_Render();
    290c:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
			}
		while(button_monitor());
    2910:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    2914:	81 11       	cpse	r24, r1
    2916:	fc cf       	rjmp	.-8      	; 0x2910 <set_value+0x5a6>
		while(!button_monitor());
    2918:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    291c:	88 23       	and	r24, r24
    291e:	e1 f3       	breq	.-8      	; 0x2918 <set_value+0x5ae>
    2920:	e0 ce       	rjmp	.-576    	; 0x26e2 <set_value+0x378>
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,5+16+i*12,116,17+16+i*12,GLCD_White);}
														GLCD_Render();
														break;
													}
													else if (menuItem == 1){
														return currValue; //if changes are discarded - return initial value
    2922:	8a 2d       	mov	r24, r10
    2924:	9b 2d       	mov	r25, r11
    2926:	16 c0       	rjmp	.+44     	; 0x2954 <set_value+0x5ea>
		{
			tempValue = tempValue / 10;
			maxValueLength++;
				}

		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <malloc>
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	8f 83       	std	Y+7, r24	; 0x07
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2938:	08 ef       	ldi	r16, 0xF8	; 248
    293a:	b7 ce       	rjmp	.-658    	; 0x26aa <set_value+0x340>

					if (currentButton == 3) {
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    293c:	ed 81       	ldd	r30, Y+5	; 0x05
    293e:	fe 81       	ldd	r31, Y+6	; 0x06
    2940:	e8 0d       	add	r30, r8
    2942:	f9 1d       	adc	r31, r9
    2944:	70 82       	st	Z, r7
    2946:	9c cf       	rjmp	.-200    	; 0x2880 <set_value+0x516>
					}
					else if (currentButton == 2) {
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    2948:	ed 81       	ldd	r30, Y+5	; 0x05
    294a:	fe 81       	ldd	r31, Y+6	; 0x06
    294c:	e8 0d       	add	r30, r8
    294e:	f9 1d       	adc	r31, r9
    2950:	70 82       	st	Z, r7
    2952:	96 cf       	rjmp	.-212    	; 0x2880 <set_value+0x516>
			GLCD_Render();
			}
		while(button_monitor());
		while(!button_monitor());
		}
	}
    2954:	2c 96       	adiw	r28, 0x0c	; 12
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	7f 90       	pop	r7
    297a:	6f 90       	pop	r6
    297c:	5f 90       	pop	r5
    297e:	4f 90       	pop	r4
    2980:	3f 90       	pop	r3
    2982:	2f 90       	pop	r2
    2984:	08 95       	ret

00002986 <debug_screen>:
	
	void debug_screen(){
		uint8_t xOfset1 = 4;
		uint8_t xOfset2 = 26;
		GLCD_Clear();
    2986:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	48 e0       	ldi	r20, 0x08	; 8
    298e:	65 e0       	ldi	r22, 0x05	; 5
    2990:	80 ea       	ldi	r24, 0xA0	; 160
    2992:	9b e0       	ldi	r25, 0x0B	; 11
    2994:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
		GLCD_GotoLine(1);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(xOfset1);
    299e:	84 e0       	ldi	r24, 0x04	; 4
    29a0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Spd");
    29a4:	8c e9       	ldi	r24, 0x9C	; 156
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoX(xOfset2);
    29ac:	8a e1       	ldi	r24, 0x1A	; 26
    29ae:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintDouble(speedKmh,10);
    29b2:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <speedKmh>
    29b6:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <speedKmh+0x1>
    29ba:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <speedKmh+0x2>
    29be:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <speedKmh+0x3>
    29c2:	2a e0       	ldi	r18, 0x0A	; 10
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
		
		GLCD_GotoLine(2);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(xOfset1);
    29d4:	84 e0       	ldi	r24, 0x04	; 4
    29d6:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Frq");
    29da:	80 ea       	ldi	r24, 0xA0	; 160
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoX(xOfset2);
    29e2:	8a e1       	ldi	r24, 0x1A	; 26
    29e4:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintDouble(frequency,10);
    29e8:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <frequency>
    29ec:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <frequency+0x1>
    29f0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <frequency+0x2>
    29f4:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <frequency+0x3>
    29f8:	2a e0       	ldi	r18, 0x0A	; 10
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
		
		GLCD_GotoLine(3);
    2a04:	83 e0       	ldi	r24, 0x03	; 3
    2a06:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(xOfset1);
    2a0a:	84 e0       	ldi	r24, 0x04	; 4
    2a0c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Stp");
    2a10:	84 ea       	ldi	r24, 0xA4	; 164
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoX(xOfset2);
    2a18:	8a e1       	ldi	r24, 0x1A	; 26
    2a1a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintInteger(steps);
    2a1e:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <steps>
    2a22:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <steps+0x1>
    2a26:	07 2e       	mov	r0, r23
    2a28:	00 0c       	add	r0, r0
    2a2a:	88 0b       	sbc	r24, r24
    2a2c:	99 0b       	sbc	r25, r25
    2a2e:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
		
		GLCD_GotoLine(4);
    2a32:	84 e0       	ldi	r24, 0x04	; 4
    2a34:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(xOfset1);
    2a38:	84 e0       	ldi	r24, 0x04	; 4
    2a3a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("nSt");
    2a3e:	88 ea       	ldi	r24, 0xA8	; 168
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoX(xOfset2);
    2a46:	8a e1       	ldi	r24, 0x1A	; 26
    2a48:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintInteger(newSteps);
    2a4c:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <newSteps>
    2a50:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <newSteps+0x1>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
		
		GLCD_GotoLine(5);
    2a5c:	85 e0       	ldi	r24, 0x05	; 5
    2a5e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(xOfset1);
    2a62:	84 e0       	ldi	r24, 0x04	; 4
    2a64:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("Phs");
    2a68:	8c ea       	ldi	r24, 0xAC	; 172
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoX(xOfset2);
    2a70:	8a e1       	ldi	r24, 0x1A	; 26
    2a72:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintInteger(phase);
    2a76:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <phase>
    2a7a:	06 2e       	mov	r0, r22
    2a7c:	00 0c       	add	r0, r0
    2a7e:	77 0b       	sbc	r23, r23
    2a80:	88 0b       	sbc	r24, r24
    2a82:	99 0b       	sbc	r25, r25
    2a84:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
		
		GLCD_GotoLine(6);
    2a88:	86 e0       	ldi	r24, 0x06	; 6
    2a8a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
		GLCD_GotoX(xOfset1);
    2a8e:	84 e0       	ldi	r24, 0x04	; 4
    2a90:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintString("TRt");
    2a94:	80 eb       	ldi	r24, 0xB0	; 176
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
		GLCD_GotoX(xOfset2);
    2a9c:	8a e1       	ldi	r24, 0x1A	; 26
    2a9e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
		GLCD_PrintInteger(totalRotations);
    2aa2:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <totalRotations>
    2aa6:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <totalRotations+0x1>
    2aaa:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <totalRotations+0x2>
    2aae:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <totalRotations+0x3>
    2ab2:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
		
		GLCD_Render();
    2ab6:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
    2aba:	08 95       	ret

00002abc <main>:
}


int main(void)
{
	presets();
    2abc:	0e 94 58 10 	call	0x20b0	; 0x20b0 <presets>
	if (!debugMode)main_screen();
    2ac0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <debugMode>
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <main+0x10>
    2ac8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <main_screen>
	while(1){

		data_monitor();
    2acc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <data_monitor>
		calculate_speed();
    2ad0:	0e 94 21 11 	call	0x2242	; 0x2242 <calculate_speed>
		speed_arrow_update();
    2ad4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <speed_arrow_update>
		if(!debugMode)signal_monitor();else debug_screen();
    2ad8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <debugMode>
    2adc:	81 11       	cpse	r24, r1
    2ade:	03 c0       	rjmp	.+6      	; 0x2ae6 <main+0x2a>
    2ae0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <signal_monitor>
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <main+0x2e>
    2ae6:	0e 94 c3 14 	call	0x2986	; 0x2986 <debug_screen>
		if(button_monitor()) menu_screen();
    2aea:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    2aee:	88 23       	and	r24, r24
    2af0:	69 f3       	breq	.-38     	; 0x2acc <main+0x10>
    2af2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <menu_screen>
    2af6:	ea cf       	rjmp	.-44     	; 0x2acc <main+0x10>

00002af8 <menu_screen>:
uint8_t offset = 85;
static int8_t menuItem;
static int8_t page;


if (menuItem > 5){page++;menuItem = 0;}
    2af8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <menuItem.2776>
    2afc:	86 30       	cpi	r24, 0x06	; 6
    2afe:	54 f0       	brlt	.+20     	; 0x2b14 <menu_screen+0x1c>
    2b00:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
    2b0a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <menuItem.2776>
if (menuItem < 0){page--;menuItem= 5;}
if ((page == 2)&&(menuItem > 3)){
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	d9 f4       	brne	.+54     	; 0x2b48 <menu_screen+0x50>
    2b12:	24 c0       	rjmp	.+72     	; 0x2b5c <menu_screen+0x64>
static int8_t menuItem;
static int8_t page;


if (menuItem > 5){page++;menuItem = 0;}
if (menuItem < 0){page--;menuItem= 5;}
    2b14:	88 23       	and	r24, r24
    2b16:	5c f4       	brge	.+22     	; 0x2b2e <menu_screen+0x36>
    2b18:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    2b1c:	81 50       	subi	r24, 0x01	; 1
    2b1e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
    2b22:	95 e0       	ldi	r25, 0x05	; 5
    2b24:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <menuItem.2776>
if ((page == 2)&&(menuItem > 3)){
    2b28:	82 30       	cpi	r24, 0x02	; 2
    2b2a:	71 f4       	brne	.+28     	; 0x2b48 <menu_screen+0x50>
    2b2c:	08 c0       	rjmp	.+16     	; 0x2b3e <menu_screen+0x46>
    2b2e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    2b32:	82 30       	cpi	r24, 0x02	; 2
    2b34:	49 f4       	brne	.+18     	; 0x2b48 <menu_screen+0x50>
    2b36:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <menuItem.2776>
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	7c f0       	brlt	.+30     	; 0x2b5c <menu_screen+0x64>
	page = 0;
    2b3e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
	menuItem = 0;
    2b42:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <menuItem.2776>
    2b46:	0a c0       	rjmp	.+20     	; 0x2b5c <menu_screen+0x64>
}
if (page<0){page = 2;menuItem = 3;}
    2b48:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    2b4c:	88 23       	and	r24, r24
    2b4e:	34 f4       	brge	.+12     	; 0x2b5c <menu_screen+0x64>
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <menuItem.2776>
GLCD_Clear();
    2b5c:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Merge);
    2b60:	21 e0       	ldi	r18, 0x01	; 1
    2b62:	48 e0       	ldi	r20, 0x08	; 8
    2b64:	65 e0       	ldi	r22, 0x05	; 5
    2b66:	80 ea       	ldi	r24, 0xA0	; 160
    2b68:	9b e0       	ldi	r25, 0x0B	; 11
    2b6a:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <GLCD_SetFont>
if(page==0){
    2b6e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    2b72:	81 11       	cpse	r24, r1
    2b74:	89 c0       	rjmp	.+274    	; 0x2c88 <menu_screen+0x190>
//item 0
GLCD_GotoX(10);
    2b76:	8a e0       	ldi	r24, 0x0A	; 10
    2b78:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_GotoLine(1);
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
GLCD_PrintString("Dial PWM");
    2b82:	84 eb       	ldi	r24, 0xB4	; 180
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
GLCD_GotoX(offset);
    2b8a:	85 e5       	ldi	r24, 0x55	; 85
    2b8c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_PrintInteger(pwmDial);
    2b90:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <pwmDial>
    2b94:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <pwmDial+0x1>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 1
GLCD_GotoX(10);
    2ba0:	8a e0       	ldi	r24, 0x0A	; 10
    2ba2:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_GotoLine(2);
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
GLCD_PrintString("Arrow PWM");
    2bac:	8d eb       	ldi	r24, 0xBD	; 189
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
GLCD_GotoX(offset);
    2bb4:	85 e5       	ldi	r24, 0x55	; 85
    2bb6:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_PrintInteger(pwmArrow);
    2bba:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <pwmArrow>
    2bbe:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <pwmArrow+0x1>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 2
GLCD_GotoX(10);
    2bca:	8a e0       	ldi	r24, 0x0A	; 10
    2bcc:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_GotoLine(3);
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
GLCD_PrintString("Wheel D");
    2bd6:	87 ec       	ldi	r24, 0xC7	; 199
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
GLCD_GotoX(offset);
    2bde:	85 e5       	ldi	r24, 0x55	; 85
    2be0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_PrintDouble(wheelDiameter,1000);
    2be4:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    2be8:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    2bec:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2bf0:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2bf4:	28 ee       	ldi	r18, 0xE8	; 232
    2bf6:	33 e0       	ldi	r19, 0x03	; 3
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
//item 3
GLCD_GotoX(10);
    2c00:	8a e0       	ldi	r24, 0x0A	; 10
    2c02:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_GotoLine(4);
    2c06:	84 e0       	ldi	r24, 0x04	; 4
    2c08:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
GLCD_PrintString("Ratio");
    2c0c:	8f ec       	ldi	r24, 0xCF	; 207
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
GLCD_GotoX(offset);
    2c14:	85 e5       	ldi	r24, 0x55	; 85
    2c16:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_PrintDouble(gearRatio,1000);
    2c1a:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2c1e:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2c22:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2c26:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    2c2a:	28 ee       	ldi	r18, 0xE8	; 232
    2c2c:	33 e0       	ldi	r19, 0x03	; 3
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	50 e0       	ldi	r21, 0x00	; 0
    2c32:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
//item 4
GLCD_GotoX(10);
    2c36:	8a e0       	ldi	r24, 0x0A	; 10
    2c38:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_GotoLine(5);
    2c3c:	85 e0       	ldi	r24, 0x05	; 5
    2c3e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
GLCD_PrintString("Magnets");
    2c42:	85 ed       	ldi	r24, 0xD5	; 213
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
GLCD_GotoX(offset);
    2c4a:	85 e5       	ldi	r24, 0x55	; 85
    2c4c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_PrintInteger(magnetsOnWheel);
    2c50:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 5
GLCD_GotoX(10);
    2c5e:	8a e0       	ldi	r24, 0x0A	; 10
    2c60:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_GotoLine(6);
    2c64:	86 e0       	ldi	r24, 0x06	; 6
    2c66:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
GLCD_PrintString("Step mode");
    2c6a:	8d ed       	ldi	r24, 0xDD	; 221
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
GLCD_GotoX(offset);
    2c72:	85 e5       	ldi	r24, 0x55	; 85
    2c74:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
GLCD_PrintInteger(stepMode);
    2c78:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <stepMode>
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
    2c86:	aa c0       	rjmp	.+340    	; 0x2ddc <menu_screen+0x2e4>

}

else if (page==1){
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <menu_screen+0x196>
    2c8c:	7a c0       	rjmp	.+244    	; 0x2d82 <menu_screen+0x28a>
//item 6
	GLCD_GotoX(10);
    2c8e:	8a e0       	ldi	r24, 0x0A	; 10
    2c90:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(1);
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Max speed");
    2c9a:	87 ee       	ldi	r24, 0xE7	; 231
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2ca2:	85 e5       	ldi	r24, 0x55	; 85
    2ca4:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_PrintInteger(scaleMax);
    2ca8:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <scaleMax>
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 7
	GLCD_GotoX(10);
    2cb6:	8a e0       	ldi	r24, 0x0A	; 10
    2cb8:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(2);
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Deg/kmh");
    2cc2:	81 ef       	ldi	r24, 0xF1	; 241
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2cca:	85 e5       	ldi	r24, 0x55	; 85
    2ccc:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_PrintDouble(degreesPerKmh,1000);
    2cd0:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    2cd4:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    2cd8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    2cdc:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2ce0:	28 ee       	ldi	r18, 0xE8	; 232
    2ce2:	33 e0       	ldi	r19, 0x03	; 3
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	0e 94 20 22 	call	0x4440	; 0x4440 <GLCD_PrintDouble>
//item 8
	GLCD_GotoX(10);
    2cec:	8a e0       	ldi	r24, 0x0A	; 10
    2cee:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(3);
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("SM steps");
    2cf8:	89 ef       	ldi	r24, 0xF9	; 249
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2d00:	85 e5       	ldi	r24, 0x55	; 85
    2d02:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_PrintInteger(smSteps);
    2d06:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    2d0a:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 9
	GLCD_GotoX(10);
    2d16:	8a e0       	ldi	r24, 0x0A	; 10
    2d18:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(4);
    2d1c:	84 e0       	ldi	r24, 0x04	; 4
    2d1e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Step inter.");
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	91 e0       	ldi	r25, 0x01	; 1
    2d26:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2d2a:	85 e5       	ldi	r24, 0x55	; 85
    2d2c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_PrintInteger(stepInterval);
    2d30:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <stepInterval>
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 10
	GLCD_GotoX(10);
    2d3e:	8a e0       	ldi	r24, 0x0A	; 10
    2d40:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(5);
    2d44:	85 e0       	ldi	r24, 0x05	; 5
    2d46:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("LCD contrast");
    2d4a:	8e e0       	ldi	r24, 0x0E	; 14
    2d4c:	91 e0       	ldi	r25, 0x01	; 1
    2d4e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2d52:	85 e5       	ldi	r24, 0x55	; 85
    2d54:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_PrintInteger(lcdContrast);
    2d58:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <lcdContrast>
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
//item 11
	GLCD_GotoX(10);
    2d66:	8a e0       	ldi	r24, 0x0A	; 10
    2d68:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(6);
    2d6c:	86 e0       	ldi	r24, 0x06	; 6
    2d6e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Debug mode");
    2d72:	8b e1       	ldi	r24, 0x1B	; 27
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2d7a:	85 e5       	ldi	r24, 0x55	; 85
    2d7c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
    2d80:	2d c0       	rjmp	.+90     	; 0x2ddc <menu_screen+0x2e4>
	


}
else if (page==2){
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	59 f5       	brne	.+86     	; 0x2ddc <menu_screen+0x2e4>
//item 12
	GLCD_GotoX(10);
    2d86:	8a e0       	ldi	r24, 0x0A	; 10
    2d88:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(1);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Calibrate arrow");
    2d92:	86 e2       	ldi	r24, 0x26	; 38
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	GLCD_GotoX(offset);
    2d9a:	85 e5       	ldi	r24, 0x55	; 85
    2d9c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
//item 13
	GLCD_GotoX(10);
    2da0:	8a e0       	ldi	r24, 0x0A	; 10
    2da2:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(2);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Odometer reset");
    2dac:	86 e3       	ldi	r24, 0x36	; 54
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
//item 14
	GLCD_GotoX(10);
    2db4:	8a e0       	ldi	r24, 0x0A	; 10
    2db6:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(3);
    2dba:	83 e0       	ldi	r24, 0x03	; 3
    2dbc:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Load defaults");
    2dc0:	85 e4       	ldi	r24, 0x45	; 69
    2dc2:	91 e0       	ldi	r25, 0x01	; 1
    2dc4:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
//item 15
	GLCD_GotoX(10);
    2dc8:	8a e0       	ldi	r24, 0x0A	; 10
    2dca:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoLine(4);
    2dce:	84 e0       	ldi	r24, 0x04	; 4
    2dd0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
	GLCD_PrintString("Exit");
    2dd4:	83 e5       	ldi	r24, 0x53	; 83
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
}

GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    2ddc:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <menuItem.2776>
    2de0:	66 0f       	add	r22, r22
    2de2:	66 0f       	add	r22, r22
    2de4:	66 0f       	add	r22, r22
    2de6:	2f e0       	ldi	r18, 0x0F	; 15
    2de8:	26 0f       	add	r18, r22
    2dea:	69 5f       	subi	r22, 0xF9	; 249
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <GLCD_InvertRect>
GLCD_Render();
    2df4:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
while (button_monitor());
    2df8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	fc cf       	rjmp	.-8      	; 0x2df8 <menu_screen+0x300>
uint8_t currentButton = 0;
uint16_t newValue = 0;
while(1){
		 currentButton = button_monitor();
    2e00:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
		if(currentButton){
    2e04:	88 23       	and	r24, r24
    2e06:	e1 f3       	breq	.-8      	; 0x2e00 <menu_screen+0x308>
			if (currentButton == 1){
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <menu_screen+0x316>
    2e0c:	a7 c2       	rjmp	.+1358   	; 0x335c <menu_screen+0x864>
								switch(menuItem+6*page)		{
    2e0e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    2e12:	08 2e       	mov	r0, r24
    2e14:	00 0c       	add	r0, r0
    2e16:	99 0b       	sbc	r25, r25
    2e18:	fc 01       	movw	r30, r24
    2e1a:	ee 0f       	add	r30, r30
    2e1c:	ff 1f       	adc	r31, r31
    2e1e:	e8 0f       	add	r30, r24
    2e20:	f9 1f       	adc	r31, r25
    2e22:	ee 0f       	add	r30, r30
    2e24:	ff 1f       	adc	r31, r31
    2e26:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <menuItem.2776>
    2e2a:	e8 0f       	add	r30, r24
    2e2c:	f1 1d       	adc	r31, r1
    2e2e:	87 fd       	sbrc	r24, 7
    2e30:	fa 95       	dec	r31
    2e32:	e0 31       	cpi	r30, 0x10	; 16
    2e34:	f1 05       	cpc	r31, r1
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <menu_screen+0x342>
    2e38:	a0 c2       	rjmp	.+1344   	; 0x337a <menu_screen+0x882>
    2e3a:	e6 5d       	subi	r30, 0xD6	; 214
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__tablejump2__>
											case 0:
											{
												newValue = set_value(1024,0,pwmDial,0,"Dial light PWM");
    2e42:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <pwmDial>
    2e46:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <pwmDial+0x1>
    2e4a:	08 e5       	ldi	r16, 0x58	; 88
    2e4c:	11 e0       	ldi	r17, 0x01	; 1
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	94 e0       	ldi	r25, 0x04	; 4
    2e58:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=pwmDial){
    2e5c:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <pwmDial>
    2e60:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <pwmDial+0x1>
    2e64:	82 17       	cp	r24, r18
    2e66:	93 07       	cpc	r25, r19
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <menu_screen+0x374>
    2e6a:	87 c2       	rjmp	.+1294   	; 0x337a <menu_screen+0x882>
													pwmDial = newValue;
    2e6c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <pwmDial+0x1>
    2e70:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pwmDial>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	64 e0       	ldi	r22, 0x04	; 4
    2e78:	88 e0       	ldi	r24, 0x08	; 8
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    2e80:	7c c2       	rjmp	.+1272   	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 1:
											{
												newValue = set_value(1024,0,pwmArrow,0,"Arrow light PWM");
    2e82:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <pwmArrow>
    2e86:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <pwmArrow+0x1>
    2e8a:	07 e6       	ldi	r16, 0x67	; 103
    2e8c:	11 e0       	ldi	r17, 0x01	; 1
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	60 e0       	ldi	r22, 0x00	; 0
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	94 e0       	ldi	r25, 0x04	; 4
    2e98:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=pwmArrow){
    2e9c:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <pwmArrow>
    2ea0:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <pwmArrow+0x1>
    2ea4:	82 17       	cp	r24, r18
    2ea6:	93 07       	cpc	r25, r19
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <menu_screen+0x3b4>
    2eaa:	67 c2       	rjmp	.+1230   	; 0x337a <menu_screen+0x882>
													pwmArrow = newValue;
    2eac:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pwmArrow+0x1>
    2eb0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pwmArrow>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	64 e0       	ldi	r22, 0x04	; 4
    2eb8:	88 e0       	ldi	r24, 0x08	; 8
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    2ec0:	5c c2       	rjmp	.+1208   	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 2:
											{
												newValue = set_value(1500,150,wheelDiameter*1000,3,"Wheel Diameter (m)");
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a e7       	ldi	r20, 0x7A	; 122
    2ec8:	54 e4       	ldi	r21, 0x44	; 68
    2eca:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    2ece:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    2ed2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2ed6:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2eda:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    2ede:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    2ee2:	07 e7       	ldi	r16, 0x77	; 119
    2ee4:	11 e0       	ldi	r17, 0x01	; 1
    2ee6:	23 e0       	ldi	r18, 0x03	; 3
    2ee8:	ab 01       	movw	r20, r22
    2eea:	66 e9       	ldi	r22, 0x96	; 150
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	8c ed       	ldi	r24, 0xDC	; 220
    2ef0:	95 e0       	ldi	r25, 0x05	; 5
    2ef2:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=wheelDiameter*1000){
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    2f00:	6b 01       	movw	r12, r22
    2f02:	7c 01       	movw	r14, r24
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a e7       	ldi	r20, 0x7A	; 122
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    2f10:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    2f14:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2f18:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2f1c:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    2f20:	9b 01       	movw	r18, r22
    2f22:	ac 01       	movw	r20, r24
    2f24:	c7 01       	movw	r24, r14
    2f26:	b6 01       	movw	r22, r12
    2f28:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <menu_screen+0x43a>
    2f30:	24 c2       	rjmp	.+1096   	; 0x337a <menu_screen+0x882>
													wheelDiameter = newValue/1000.0;
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a e7       	ldi	r20, 0x7A	; 122
    2f38:	54 e4       	ldi	r21, 0x44	; 68
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	b6 01       	movw	r22, r12
    2f3e:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    2f42:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <wheelDiameter>
    2f46:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <wheelDiameter+0x1>
    2f4a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <wheelDiameter+0x2>
    2f4e:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <wheelDiameter+0x3>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	64 e0       	ldi	r22, 0x04	; 4
    2f56:	88 e0       	ldi	r24, 0x08	; 8
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    2f5e:	0d c2       	rjmp	.+1050   	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 3:
											{
												newValue = set_value(1000,150,gearRatio*1000,3,"Gear ratio");
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	54 e4       	ldi	r21, 0x44	; 68
    2f68:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2f6c:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2f70:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2f74:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    2f78:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    2f7c:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    2f80:	0a e8       	ldi	r16, 0x8A	; 138
    2f82:	11 e0       	ldi	r17, 0x01	; 1
    2f84:	23 e0       	ldi	r18, 0x03	; 3
    2f86:	ab 01       	movw	r20, r22
    2f88:	66 e9       	ldi	r22, 0x96	; 150
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	88 ee       	ldi	r24, 0xE8	; 232
    2f8e:	93 e0       	ldi	r25, 0x03	; 3
    2f90:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=gearRatio*1000){
    2f94:	bc 01       	movw	r22, r24
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    2f9e:	6b 01       	movw	r12, r22
    2fa0:	7c 01       	movw	r14, r24
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	4a e7       	ldi	r20, 0x7A	; 122
    2fa8:	54 e4       	ldi	r21, 0x44	; 68
    2faa:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2fae:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2fb2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2fb6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    2fba:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    2fbe:	9b 01       	movw	r18, r22
    2fc0:	ac 01       	movw	r20, r24
    2fc2:	c7 01       	movw	r24, r14
    2fc4:	b6 01       	movw	r22, r12
    2fc6:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    2fca:	88 23       	and	r24, r24
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <menu_screen+0x4d8>
    2fce:	d5 c1       	rjmp	.+938    	; 0x337a <menu_screen+0x882>
													gearRatio = newValue/1000.0;
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a e7       	ldi	r20, 0x7A	; 122
    2fd6:	54 e4       	ldi	r21, 0x44	; 68
    2fd8:	c7 01       	movw	r24, r14
    2fda:	b6 01       	movw	r22, r12
    2fdc:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    2fe0:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <gearRatio>
    2fe4:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <gearRatio+0x1>
    2fe8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gearRatio+0x2>
    2fec:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gearRatio+0x3>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	64 e0       	ldi	r22, 0x04	; 4
    2ff4:	88 e0       	ldi	r24, 0x08	; 8
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    2ffc:	be c1       	rjmp	.+892    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 4:
											{
												newValue = set_value(16,1,magnetsOnWheel,0,"Magnets on wheel");
    2ffe:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <magnetsOnWheel>
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	05 e9       	ldi	r16, 0x95	; 149
    3006:	11 e0       	ldi	r17, 0x01	; 1
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	61 e0       	ldi	r22, 0x01	; 1
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	80 e1       	ldi	r24, 0x10	; 16
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=magnetsOnWheel){
    3016:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <magnetsOnWheel>
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	82 17       	cp	r24, r18
    301e:	93 07       	cpc	r25, r19
    3020:	09 f4       	brne	.+2      	; 0x3024 <menu_screen+0x52c>
    3022:	ab c1       	rjmp	.+854    	; 0x337a <menu_screen+0x882>
													magnetsOnWheel = newValue;
    3024:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <magnetsOnWheel>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3028:	41 e0       	ldi	r20, 0x01	; 1
    302a:	64 e0       	ldi	r22, 0x04	; 4
    302c:	88 e0       	ldi	r24, 0x08	; 8
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    3034:	a2 c1       	rjmp	.+836    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 5:
											{
												newValue = set_value(2,1,stepMode,0,"1-full, 2-half");
    3036:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <stepMode>
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	06 ea       	ldi	r16, 0xA6	; 166
    303e:	11 e0       	ldi	r17, 0x01	; 1
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=stepMode){
    304e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <stepMode>
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	82 17       	cp	r24, r18
    3056:	93 07       	cpc	r25, r19
    3058:	09 f4       	brne	.+2      	; 0x305c <menu_screen+0x564>
    305a:	8f c1       	rjmp	.+798    	; 0x337a <menu_screen+0x882>
													stepMode = newValue;
    305c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <stepMode>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	64 e0       	ldi	r22, 0x04	; 4
    3064:	88 e0       	ldi	r24, 0x08	; 8
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    306c:	86 c1       	rjmp	.+780    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 6:
											{
												newValue = set_value(400,40,scaleMax,0,"Maximum speed");
    306e:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <scaleMax>
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	05 eb       	ldi	r16, 0xB5	; 181
    3076:	11 e0       	ldi	r17, 0x01	; 1
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	68 e2       	ldi	r22, 0x28	; 40
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	80 e9       	ldi	r24, 0x90	; 144
    3080:	91 e0       	ldi	r25, 0x01	; 1
    3082:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=scaleMax){
    3086:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <scaleMax>
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	82 17       	cp	r24, r18
    308e:	93 07       	cpc	r25, r19
    3090:	09 f4       	brne	.+2      	; 0x3094 <menu_screen+0x59c>
    3092:	73 c1       	rjmp	.+742    	; 0x337a <menu_screen+0x882>
													scaleMax = newValue;
    3094:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <scaleMax>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	64 e0       	ldi	r22, 0x04	; 4
    309c:	88 e0       	ldi	r24, 0x08	; 8
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    30a4:	6a c1       	rjmp	.+724    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 7:
											{
												newValue = set_value(4000,100,degreesPerKmh*1000,3,"Degrees per km/h");
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	4a e7       	ldi	r20, 0x7A	; 122
    30ac:	54 e4       	ldi	r21, 0x44	; 68
    30ae:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    30b2:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    30b6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    30ba:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    30be:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    30c2:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    30c6:	03 ec       	ldi	r16, 0xC3	; 195
    30c8:	11 e0       	ldi	r17, 0x01	; 1
    30ca:	23 e0       	ldi	r18, 0x03	; 3
    30cc:	ab 01       	movw	r20, r22
    30ce:	64 e6       	ldi	r22, 0x64	; 100
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	80 ea       	ldi	r24, 0xA0	; 160
    30d4:	9f e0       	ldi	r25, 0x0F	; 15
    30d6:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=degreesPerKmh*1000){
    30da:	bc 01       	movw	r22, r24
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    30e4:	6b 01       	movw	r12, r22
    30e6:	7c 01       	movw	r14, r24
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	54 e4       	ldi	r21, 0x44	; 68
    30f0:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    30f4:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    30f8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    30fc:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    3100:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    3104:	9b 01       	movw	r18, r22
    3106:	ac 01       	movw	r20, r24
    3108:	c7 01       	movw	r24, r14
    310a:	b6 01       	movw	r22, r12
    310c:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    3110:	88 23       	and	r24, r24
    3112:	09 f4       	brne	.+2      	; 0x3116 <menu_screen+0x61e>
    3114:	32 c1       	rjmp	.+612    	; 0x337a <menu_screen+0x882>
													degreesPerKmh = newValue/1000.0;
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a e7       	ldi	r20, 0x7A	; 122
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	c7 01       	movw	r24, r14
    3120:	b6 01       	movw	r22, r12
    3122:	0e 94 26 23 	call	0x464c	; 0x464c <__divsf3>
    3126:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <degreesPerKmh>
    312a:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <degreesPerKmh+0x1>
    312e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <degreesPerKmh+0x2>
    3132:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <degreesPerKmh+0x3>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3136:	41 e0       	ldi	r20, 0x01	; 1
    3138:	64 e0       	ldi	r22, 0x04	; 4
    313a:	88 e0       	ldi	r24, 0x08	; 8
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    3142:	1b c1       	rjmp	.+566    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 8:
											{
												newValue = set_value(400,16,smSteps,0,"Stepper motor steps");
    3144:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <smSteps>
    3148:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <smSteps+0x1>
    314c:	04 ed       	ldi	r16, 0xD4	; 212
    314e:	11 e0       	ldi	r17, 0x01	; 1
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	60 e1       	ldi	r22, 0x10	; 16
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	80 e9       	ldi	r24, 0x90	; 144
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=smSteps){
    315e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <smSteps>
    3162:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <smSteps+0x1>
    3166:	82 17       	cp	r24, r18
    3168:	93 07       	cpc	r25, r19
    316a:	09 f4       	brne	.+2      	; 0x316e <menu_screen+0x676>
    316c:	06 c1       	rjmp	.+524    	; 0x337a <menu_screen+0x882>
													smSteps = newValue;
    316e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <smSteps+0x1>
    3172:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <smSteps>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3176:	41 e0       	ldi	r20, 0x01	; 1
    3178:	64 e0       	ldi	r22, 0x04	; 4
    317a:	88 e0       	ldi	r24, 0x08	; 8
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    3182:	fb c0       	rjmp	.+502    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 9:
											{
												newValue = set_value(255,50,stepInterval,0,"Step interval");
    3184:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <stepInterval>
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	08 ee       	ldi	r16, 0xE8	; 232
    318c:	11 e0       	ldi	r17, 0x01	; 1
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	62 e3       	ldi	r22, 0x32	; 50
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	8f ef       	ldi	r24, 0xFF	; 255
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=stepInterval){
    319c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <stepInterval>
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	82 17       	cp	r24, r18
    31a4:	93 07       	cpc	r25, r19
    31a6:	09 f4       	brne	.+2      	; 0x31aa <menu_screen+0x6b2>
    31a8:	e8 c0       	rjmp	.+464    	; 0x337a <menu_screen+0x882>
													stepInterval = newValue;
    31aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepInterval>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	64 e0       	ldi	r22, 0x04	; 4
    31b2:	88 e0       	ldi	r24, 0x08	; 8
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    31ba:	df c0       	rjmp	.+446    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 10:
											{
												newValue = set_value(255,10,lcdContrast,0,"LCD contrast");
    31bc:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <lcdContrast>
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	0e e0       	ldi	r16, 0x0E	; 14
    31c4:	11 e0       	ldi	r17, 0x01	; 1
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	6a e0       	ldi	r22, 0x0A	; 10
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	8f ef       	ldi	r24, 0xFF	; 255
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 b5 11 	call	0x236a	; 0x236a <set_value>
												if (newValue!=lcdContrast){
    31d4:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <lcdContrast>
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	82 17       	cp	r24, r18
    31dc:	93 07       	cpc	r25, r19
    31de:	09 f4       	brne	.+2      	; 0x31e2 <menu_screen+0x6ea>
    31e0:	cc c0       	rjmp	.+408    	; 0x337a <menu_screen+0x882>
													lcdContrast = newValue;
    31e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <lcdContrast>
													GLCD_SetContrast(lcdContrast);
    31e6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <GLCD_SetContrast>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	64 e0       	ldi	r22, 0x04	; 4
    31ee:	88 e0       	ldi	r24, 0x08	; 8
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    31f6:	c1 c0       	rjmp	.+386    	; 0x337a <menu_screen+0x882>
												}
												break;
											}
											case 11:
											{
												debugMode = debugMode^_BV(0);
    31f8:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <debugMode>
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	89 27       	eor	r24, r25
    3200:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <debugMode>
												while (button_monitor());
    3204:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    3208:	81 11       	cpse	r24, r1
    320a:	fc cf       	rjmp	.-8      	; 0x3204 <menu_screen+0x70c>
												main();
    320c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <main>
												break;
											}
											case 12:
											{
												arrow_calibration();
    3210:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <arrow_calibration>
												break;
    3214:	b2 c0       	rjmp	.+356    	; 0x337a <menu_screen+0x882>
											}
											case 13:
											{
											//odometer reset
												totalRotations = 0;
    3216:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <totalRotations>
    321a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <totalRotations+0x1>
    321e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <totalRotations+0x2>
    3222:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <totalRotations+0x3>
    3226:	c3 e3       	ldi	r28, 0x33	; 51
												for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
													eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    3228:	43 e0       	ldi	r20, 0x03	; 3
    322a:	64 e0       	ldi	r22, 0x04	; 4
    322c:	80 e8       	ldi	r24, 0x80	; 128
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
    3234:	c1 50       	subi	r28, 0x01	; 1
											}
											case 13:
											{
											//odometer reset
												totalRotations = 0;
												for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    3236:	c1 f7       	brne	.-16     	; 0x3228 <menu_screen+0x730>
    3238:	a0 c0       	rjmp	.+320    	; 0x337a <menu_screen+0x882>
											{
											//load defaults
									uint8_t yesOrNo = 0;
											
											//GLCD_SetFont(Font5x8, 5, 8, GLCD_Merge);
											GLCD_Clear();
    323a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
											GLCD_GotoLine(2);
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
											GLCD_GotoX(40);
    3244:	88 e2       	ldi	r24, 0x28	; 40
    3246:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
											GLCD_PrintString("RESTORE");
    324a:	86 ef       	ldi	r24, 0xF6	; 246
    324c:	91 e0       	ldi	r25, 0x01	; 1
    324e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
											GLCD_GotoLine(4);
    3252:	84 e0       	ldi	r24, 0x04	; 4
    3254:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
											GLCD_GotoX(20);
    3258:	84 e1       	ldi	r24, 0x14	; 20
    325a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
											GLCD_PrintString("DEFAULT values?");
    325e:	8e ef       	ldi	r24, 0xFE	; 254
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
											
											
											GLCD_GotoLine(6);
    3266:	86 e0       	ldi	r24, 0x06	; 6
    3268:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
											GLCD_GotoX(28);
    326c:	8c e1       	ldi	r24, 0x1C	; 28
    326e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
											GLCD_PrintString("NO");
    3272:	8e e0       	ldi	r24, 0x0E	; 14
    3274:	92 e0       	ldi	r25, 0x02	; 2
    3276:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
											GLCD_GotoX(84);
    327a:	84 e5       	ldi	r24, 0x54	; 84
    327c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
											GLCD_PrintString("YES");
    3280:	81 e1       	ldi	r24, 0x11	; 17
    3282:	92 e0       	ldi	r25, 0x02	; 2
    3284:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
												break;
											}
											case 14:
											{
											//load defaults
									uint8_t yesOrNo = 0;
    3288:	c0 e0       	ldi	r28, 0x00	; 0
											GLCD_PrintString("NO");
											GLCD_GotoX(84);
											GLCD_PrintString("YES");
											
											restore_defaults:
											GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    328a:	db e3       	ldi	r29, 0x3B	; 59
											GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    328c:	0f 2e       	mov	r0, r31
    328e:	f9 e6       	ldi	r31, 0x69	; 105
    3290:	ef 2e       	mov	r14, r31
    3292:	f0 2d       	mov	r31, r0
    3294:	0f 2e       	mov	r0, r31
    3296:	f4 e1       	ldi	r31, 0x14	; 20
    3298:	ff 2e       	mov	r15, r31
    329a:	f0 2d       	mov	r31, r0
											while(button_monitor());
											
											while(1){
												uint8_t button = button_monitor();
												if ((button==2)||(button==3)){
													yesOrNo = yesOrNo^_BV(0);
    329c:	11 e0       	ldi	r17, 0x01	; 1
											GLCD_PrintString("NO");
											GLCD_GotoX(84);
											GLCD_PrintString("YES");
											
											restore_defaults:
											GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    329e:	cd 9f       	mul	r28, r29
    32a0:	80 2d       	mov	r24, r0
    32a2:	11 24       	eor	r1, r1
    32a4:	4e e2       	ldi	r20, 0x2E	; 46
    32a6:	48 0f       	add	r20, r24
    32a8:	0f ef       	ldi	r16, 0xFF	; 255
    32aa:	29 e3       	ldi	r18, 0x39	; 57
    32ac:	6d e2       	ldi	r22, 0x2D	; 45
    32ae:	8c 5e       	subi	r24, 0xEC	; 236
    32b0:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
											GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    32b4:	cc 23       	and	r28, r28
    32b6:	19 f0       	breq	.+6      	; 0x32be <menu_screen+0x7c6>
    32b8:	4e e2       	ldi	r20, 0x2E	; 46
    32ba:	8f 2d       	mov	r24, r15
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <menu_screen+0x7ca>
    32be:	4e 2d       	mov	r20, r14
    32c0:	8f e4       	ldi	r24, 0x4F	; 79
    32c2:	00 e0       	ldi	r16, 0x00	; 0
    32c4:	29 e3       	ldi	r18, 0x39	; 57
    32c6:	6d e2       	ldi	r22, 0x2D	; 45
    32c8:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <GLCD_DrawRectangle>
											GLCD_Render();
    32cc:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
											
											
											while(button_monitor());
    32d0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    32d4:	81 11       	cpse	r24, r1
    32d6:	fc cf       	rjmp	.-8      	; 0x32d0 <menu_screen+0x7d8>
											
											while(1){
												uint8_t button = button_monitor();
    32d8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
												if ((button==2)||(button==3)){
    32dc:	9e ef       	ldi	r25, 0xFE	; 254
    32de:	98 0f       	add	r25, r24
    32e0:	92 30       	cpi	r25, 0x02	; 2
    32e2:	30 f4       	brcc	.+12     	; 0x32f0 <menu_screen+0x7f8>
													yesOrNo = yesOrNo^_BV(0);
    32e4:	c1 27       	eor	r28, r17
													while(button_monitor());
    32e6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    32ea:	81 11       	cpse	r24, r1
    32ec:	fc cf       	rjmp	.-8      	; 0x32e6 <menu_screen+0x7ee>
    32ee:	d7 cf       	rjmp	.-82     	; 0x329e <menu_screen+0x7a6>
													goto restore_defaults;
												}
												else if(button==1){
    32f0:	81 30       	cpi	r24, 0x01	; 1
    32f2:	91 f7       	brne	.-28     	; 0x32d8 <menu_screen+0x7e0>
													if (yesOrNo){
    32f4:	cc 23       	and	r28, r28
    32f6:	09 f4       	brne	.+2      	; 0x32fa <menu_screen+0x802>
    32f8:	40 c0       	rjmp	.+128    	; 0x337a <menu_screen+0x882>
														GLCD_Clear();
    32fa:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <GLCD_Clear>
														GLCD_GotoLine(3);
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
														GLCD_GotoX(8);
    3304:	88 e0       	ldi	r24, 0x08	; 8
    3306:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
														GLCD_PrintString("LOADING DEFAULTS...");
    330a:	85 e1       	ldi	r24, 0x15	; 21
    330c:	92 e0       	ldi	r25, 0x02	; 2
    330e:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
														GLCD_Render();
    3312:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
														default_values();
    3316:	0e 94 0a 0b 	call	0x1614	; 0x1614 <default_values>
														eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	64 e0       	ldi	r22, 0x04	; 4
    331e:	88 e0       	ldi	r24, 0x08	; 8
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <eep_operations>
														GLCD_GotoLine(5);
    3326:	85 e0       	ldi	r24, 0x05	; 5
    3328:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <GLCD_GotoLine>
														GLCD_GotoX(45);
    332c:	8d e2       	ldi	r24, 0x2D	; 45
    332e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
														GLCD_PrintString("DONE!");
    3332:	89 e2       	ldi	r24, 0x29	; 41
    3334:	92 e0       	ldi	r25, 0x02	; 2
    3336:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
														GLCD_Render();
    333a:	0e 94 40 1a 	call	0x3480	; 0x3480 <GLCD_Render>
														while(button_monitor());
    333e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    3342:	81 11       	cpse	r24, r1
    3344:	fc cf       	rjmp	.-8      	; 0x333e <menu_screen+0x846>
														while(!button_monitor());
    3346:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    334a:	88 23       	and	r24, r24
    334c:	e1 f3       	breq	.-8      	; 0x3346 <menu_screen+0x84e>
    334e:	15 c0       	rjmp	.+42     	; 0x337a <menu_screen+0x882>
											break;
											}
											case 15:
											{
												//exit menu
												while (button_monitor());
    3350:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    3354:	81 11       	cpse	r24, r1
    3356:	fc cf       	rjmp	.-8      	; 0x3350 <menu_screen+0x858>
												main();
    3358:	0e 94 5e 15 	call	0x2abc	; 0x2abc <main>
											}
										}
//
			}

			else if(currentButton == 2)	menuItem++;
    335c:	82 30       	cpi	r24, 0x02	; 2
    335e:	31 f4       	brne	.+12     	; 0x336c <menu_screen+0x874>
    3360:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <menuItem.2776>
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <menuItem.2776>
    336a:	07 c0       	rjmp	.+14     	; 0x337a <menu_screen+0x882>

			else if(currentButton == 3)	menuItem--;
    336c:	83 30       	cpi	r24, 0x03	; 3
    336e:	29 f4       	brne	.+10     	; 0x337a <menu_screen+0x882>
    3370:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <menuItem.2776>
    3374:	81 50       	subi	r24, 0x01	; 1
    3376:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <menuItem.2776>

		while (!button_monitor());
    337a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <button_monitor>
    337e:	88 23       	and	r24, r24
    3380:	e1 f3       	breq	.-8      	; 0x337a <menu_screen+0x882>
		menu_screen();
    3382:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <menu_screen>

00003386 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    3386:	66 95       	lsr	r22
    3388:	66 95       	lsr	r22
    338a:	66 95       	lsr	r22
    338c:	90 e8       	ldi	r25, 0x80	; 128
    338e:	69 9f       	mul	r22, r25
    3390:	b0 01       	movw	r22, r0
    3392:	11 24       	eor	r1, r1
    3394:	68 0f       	add	r22, r24
    3396:	71 1d       	adc	r23, r1
    3398:	fb 01       	movw	r30, r22
    339a:	e0 58       	subi	r30, 0x80	; 128
    339c:	fd 4f       	sbci	r31, 0xFD	; 253
    339e:	40 83       	st	Z, r20
    33a0:	08 95       	ret

000033a2 <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    33a2:	66 95       	lsr	r22
    33a4:	66 95       	lsr	r22
    33a6:	66 95       	lsr	r22
    33a8:	90 e8       	ldi	r25, 0x80	; 128
    33aa:	69 9f       	mul	r22, r25
    33ac:	b0 01       	movw	r22, r0
    33ae:	11 24       	eor	r1, r1
    33b0:	68 0f       	add	r22, r24
    33b2:	71 1d       	adc	r23, r1
    33b4:	fb 01       	movw	r30, r22
    33b6:	e0 58       	subi	r30, 0x80	; 128
    33b8:	fd 4f       	sbci	r31, 0xFD	; 253
}
    33ba:	80 81       	ld	r24, Z
    33bc:	08 95       	ret

000033be <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    33be:	ff 92       	push	r15
    33c0:	0f 93       	push	r16
    33c2:	1f 93       	push	r17
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	c8 2f       	mov	r28, r24
    33ca:	06 2f       	mov	r16, r22
    33cc:	17 2f       	mov	r17, r23
    33ce:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    33d0:	0e 94 9d 22 	call	0x453a	; 0x453a <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    33d4:	0e 94 9a 22 	call	0x4534	; 0x4534 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    33d8:	88 30       	cpi	r24, 0x08	; 8
    33da:	31 f0       	breq	.+12     	; 0x33e8 <GLCD_Send+0x2a>
    33dc:	80 31       	cpi	r24, 0x10	; 16
    33de:	21 f0       	breq	.+8      	; 0x33e8 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__GLCD>
				break;
    33e6:	33 c0       	rjmp	.+102    	; 0x344e <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    33e8:	88 e7       	ldi	r24, 0x78	; 120
    33ea:	0e 94 ab 22 	call	0x4556	; 0x4556 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    33ee:	0e 94 9a 22 	call	0x4534	; 0x4534 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    33f2:	88 31       	cpi	r24, 0x18	; 24
    33f4:	31 f0       	breq	.+12     	; 0x3402 <GLCD_Send+0x44>
    33f6:	80 32       	cpi	r24, 0x20	; 32
    33f8:	21 f0       	breq	.+8      	; 0x3402 <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__GLCD>
				break;
    3400:	26 c0       	rjmp	.+76     	; 0x344e <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    3402:	8c 2f       	mov	r24, r28
    3404:	0e 94 ab 22 	call	0x4556	; 0x4556 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3408:	0e 94 9a 22 	call	0x4534	; 0x4534 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    340c:	88 32       	cpi	r24, 0x28	; 40
    340e:	19 f4       	brne	.+6      	; 0x3416 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3410:	f1 10       	cpse	r15, r1
    3412:	07 c0       	rjmp	.+14     	; 0x3422 <GLCD_Send+0x64>
    3414:	1a c0       	rjmp	.+52     	; 0x344a <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3416:	80 33       	cpi	r24, 0x30	; 48
    3418:	d9 f3       	breq	.-10     	; 0x3410 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__GLCD>
				break;
    3420:	16 c0       	rjmp	.+44     	; 0x344e <GLCD_Send+0x90>
    3422:	c0 2f       	mov	r28, r16
    3424:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    3426:	8e 01       	movw	r16, r28
    3428:	0f 5f       	subi	r16, 0xFF	; 255
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fa 94       	dec	r15
    342e:	0f 0d       	add	r16, r15
    3430:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    3432:	89 91       	ld	r24, Y+
    3434:	0e 94 ab 22 	call	0x4556	; 0x4556 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    3438:	0e 94 9a 22 	call	0x4534	; 0x4534 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    343c:	88 32       	cpi	r24, 0x28	; 40
    343e:	11 f0       	breq	.+4      	; 0x3444 <GLCD_Send+0x86>
    3440:	80 33       	cpi	r24, 0x30	; 48
    3442:	19 f4       	brne	.+6      	; 0x344a <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3444:	c0 17       	cp	r28, r16
    3446:	d1 07       	cpc	r29, r17
    3448:	a1 f7       	brne	.-24     	; 0x3432 <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    344a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    344e:	0e 94 a5 22 	call	0x454a	; 0x454a <TWI_EndTransmission>
}
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	ff 90       	pop	r15
    345c:	08 95       	ret

0000345e <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	1f 92       	push	r1
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	be 01       	movw	r22, r28
    346e:	6f 5f       	subi	r22, 0xFF	; 255
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	0e 94 df 19 	call	0x33be	; 0x33be <GLCD_Send>
}
    3478:	0f 90       	pop	r0
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	08 95       	ret

00003480 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    3484:	81 e2       	ldi	r24, 0x21	; 33
    3486:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    3490:	8f e7       	ldi	r24, 0x7F	; 127
    3492:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    3496:	82 e2       	ldi	r24, 0x22	; 34
    3498:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    34a2:	87 e0       	ldi	r24, 0x07	; 7
    34a4:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
    34a8:	c0 e0       	ldi	r28, 0x00	; 0
    34aa:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    34ac:	be 01       	movw	r22, r28
    34ae:	62 95       	swap	r22
    34b0:	72 95       	swap	r23
    34b2:	70 7f       	andi	r23, 0xF0	; 240
    34b4:	76 27       	eor	r23, r22
    34b6:	60 7f       	andi	r22, 0xF0	; 240
    34b8:	76 27       	eor	r23, r22
    34ba:	60 58       	subi	r22, 0x80	; 128
    34bc:	7d 4f       	sbci	r23, 0xFD	; 253
    34be:	40 e1       	ldi	r20, 0x10	; 16
    34c0:	80 e4       	ldi	r24, 0x40	; 64
    34c2:	0e 94 df 19 	call	0x33be	; 0x33be <GLCD_Send>
    34c6:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    34c8:	c0 34       	cpi	r28, 0x40	; 64
    34ca:	d1 05       	cpc	r29, r1
    34cc:	79 f7       	brne	.-34     	; 0x34ac <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    34d4:	cf 93       	push	r28
    34d6:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    34d8:	81 e8       	ldi	r24, 0x81	; 129
    34da:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    34de:	8c 2f       	mov	r24, r28
    34e0:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
}
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    34e8:	88 23       	and	r24, r24
    34ea:	14 f0       	brlt	.+4      	; 0x34f0 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    34ec:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <__GLCD+0x1>
    34f0:	08 95       	ret

000034f2 <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    34f2:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <__GLCD+0x2>
    34f6:	90 34       	cpi	r25, 0x40	; 64
    34f8:	10 f4       	brcc	.+4      	; 0x34fe <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    34fa:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__GLCD+0x2>
    34fe:	08 95       	ret

00003500 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    3500:	cf 93       	push	r28
    3502:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    3504:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GLCD_GotoX>
	GLCD_GotoY(Y);
    3508:	8c 2f       	mov	r24, r28
    350a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <GLCD_GotoY>
}
    350e:	cf 91       	pop	r28
    3510:	08 95       	ret

00003512 <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    3512:	0e 94 90 22 	call	0x4520	; 0x4520 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    3516:	8e ea       	ldi	r24, 0xAE	; 174
    3518:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    351c:	85 ed       	ldi	r24, 0xD5	; 213
    351e:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    3522:	80 ef       	ldi	r24, 0xF0	; 240
    3524:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    3528:	88 ea       	ldi	r24, 0xA8	; 168
    352a:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    352e:	8f e3       	ldi	r24, 0x3F	; 63
    3530:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    3534:	83 ed       	ldi	r24, 0xD3	; 211
    3536:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    3540:	8d e8       	ldi	r24, 0x8D	; 141
    3542:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    3546:	84 e1       	ldi	r24, 0x14	; 20
    3548:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    354c:	80 e4       	ldi	r24, 0x40	; 64
    354e:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    3552:	80 e2       	ldi	r24, 0x20	; 32
    3554:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    355e:	81 ea       	ldi	r24, 0xA1	; 161
    3560:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    3564:	88 ec       	ldi	r24, 0xC8	; 200
    3566:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    356a:	8a ed       	ldi	r24, 0xDA	; 218
    356c:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    3570:	82 e1       	ldi	r24, 0x12	; 18
    3572:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    3576:	81 e8       	ldi	r24, 0x81	; 129
    3578:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    357c:	8f ef       	ldi	r24, 0xFF	; 255
    357e:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    3582:	89 ed       	ldi	r24, 0xD9	; 217
    3584:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    3588:	81 ef       	ldi	r24, 0xF1	; 241
    358a:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    358e:	8b ed       	ldi	r24, 0xDB	; 219
    3590:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    3594:	80 e2       	ldi	r24, 0x20	; 32
    3596:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    359a:	84 ea       	ldi	r24, 0xA4	; 164
    359c:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    35a0:	86 ea       	ldi	r24, 0xA6	; 166
    35a2:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    35a6:	8e e2       	ldi	r24, 0x2E	; 46
    35a8:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    35ac:	8f ea       	ldi	r24, 0xAF	; 175
    35ae:	0e 94 2f 1a 	call	0x345e	; 0x345e <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    35ba:	86 ea       	ldi	r24, 0xA6	; 166
    35bc:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    35c0:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <__GLCD+0x8>
    35c4:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <__GLCD+0x7>
    35c8:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__GLCD+0x6>
    35cc:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__GLCD+0x2>
    35d0:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__GLCD+0x1>
    35d4:	08 95       	ret

000035d6 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    35d6:	88 30       	cpi	r24, 0x08	; 8
    35d8:	28 f4       	brcc	.+10     	; 0x35e4 <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    35da:	88 0f       	add	r24, r24
    35dc:	88 0f       	add	r24, r24
    35de:	88 0f       	add	r24, r24
    35e0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__GLCD+0x2>
    35e4:	08 95       	ret

000035e6 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    35e6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__GLCD+0x1>
    35ea:	08 95       	ret

000035ec <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    35ec:	8f 92       	push	r8
    35ee:	9f 92       	push	r9
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	06 2f       	mov	r16, r22
    3606:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    3608:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    360c:	d0 91 78 02 	lds	r29, 0x0278	; 0x800278 <__GLCD+0x2>
    3610:	c0 91 77 02 	lds	r28, 0x0277	; 0x800277 <__GLCD+0x1>
    3614:	6d 2f       	mov	r22, r29
    3616:	8c 2f       	mov	r24, r28
    3618:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    361c:	1f 3f       	cpi	r17, 0xFF	; 255
    361e:	91 f4       	brne	.+36     	; 0x3644 <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    3620:	90 2f       	mov	r25, r16
    3622:	97 70       	andi	r25, 0x07	; 7
    3624:	81 2c       	mov	r8, r1
    3626:	91 2c       	mov	r9, r1
    3628:	54 01       	movw	r10, r8
    362a:	83 94       	inc	r8
    362c:	75 01       	movw	r14, r10
    362e:	64 01       	movw	r12, r8
    3630:	04 c0       	rjmp	.+8      	; 0x363a <GLCD_SetPixel+0x4e>
    3632:	cc 0c       	add	r12, r12
    3634:	dd 1c       	adc	r13, r13
    3636:	ee 1c       	adc	r14, r14
    3638:	ff 1c       	adc	r15, r15
    363a:	9a 95       	dec	r25
    363c:	d2 f7       	brpl	.-12     	; 0x3632 <GLCD_SetPixel+0x46>
    363e:	48 2f       	mov	r20, r24
    3640:	4c 29       	or	r20, r12
    3642:	13 c0       	rjmp	.+38     	; 0x366a <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    3644:	07 70       	andi	r16, 0x07	; 7
    3646:	c1 2c       	mov	r12, r1
    3648:	d1 2c       	mov	r13, r1
    364a:	76 01       	movw	r14, r12
    364c:	c3 94       	inc	r12
    364e:	b7 01       	movw	r22, r14
    3650:	a6 01       	movw	r20, r12
    3652:	04 c0       	rjmp	.+8      	; 0x365c <GLCD_SetPixel+0x70>
    3654:	44 0f       	add	r20, r20
    3656:	55 1f       	adc	r21, r21
    3658:	66 1f       	adc	r22, r22
    365a:	77 1f       	adc	r23, r23
    365c:	0a 95       	dec	r16
    365e:	d2 f7       	brpl	.-12     	; 0x3654 <GLCD_SetPixel+0x68>
    3660:	8a 01       	movw	r16, r20
    3662:	9b 01       	movw	r18, r22
    3664:	00 95       	com	r16
    3666:	48 2f       	mov	r20, r24
    3668:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    366a:	6d 2f       	mov	r22, r29
    366c:	8c 2f       	mov	r24, r28
    366e:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
}
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	cf 90       	pop	r12
    3682:	bf 90       	pop	r11
    3684:	af 90       	pop	r10
    3686:	9f 90       	pop	r9
    3688:	8f 90       	pop	r8
    368a:	08 95       	ret

0000368c <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    368c:	3f 92       	push	r3
    368e:	4f 92       	push	r4
    3690:	5f 92       	push	r5
    3692:	6f 92       	push	r6
    3694:	7f 92       	push	r7
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    36b0:	88 23       	and	r24, r24
    36b2:	0c f4       	brge	.+2      	; 0x36b6 <GLCD_SetPixels+0x2a>
    36b4:	c6 c0       	rjmp	.+396    	; 0x3842 <GLCD_SetPixels+0x1b6>
    36b6:	44 23       	and	r20, r20
    36b8:	0c f4       	brge	.+2      	; 0x36bc <GLCD_SetPixels+0x30>
    36ba:	c3 c0       	rjmp	.+390    	; 0x3842 <GLCD_SetPixels+0x1b6>
    36bc:	60 34       	cpi	r22, 0x40	; 64
    36be:	08 f0       	brcs	.+2      	; 0x36c2 <GLCD_SetPixels+0x36>
    36c0:	c0 c0       	rjmp	.+384    	; 0x3842 <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    36c2:	20 34       	cpi	r18, 0x40	; 64
    36c4:	08 f0       	brcs	.+2      	; 0x36c8 <GLCD_SetPixels+0x3c>
    36c6:	bd c0       	rjmp	.+378    	; 0x3842 <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    36c8:	11 e0       	ldi	r17, 0x01	; 1
    36ca:	81 2e       	mov	r8, r17
    36cc:	86 1a       	sub	r8, r22
    36ce:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    36d0:	18 1b       	sub	r17, r24
    36d2:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    36d4:	46 2f       	mov	r20, r22
    36d6:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    36d8:	76 2e       	mov	r7, r22
    36da:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    36dc:	e8 2c       	mov	r14, r8
    36de:	f1 2c       	mov	r15, r1
    36e0:	88 e0       	ldi	r24, 0x08	; 8
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	84 1b       	sub	r24, r20
    36e6:	91 09       	sbc	r25, r1
    36e8:	e8 16       	cp	r14, r24
    36ea:	f9 06       	cpc	r15, r25
    36ec:	7c f4       	brge	.+30     	; 0x370c <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    36ee:	88 e0       	ldi	r24, 0x08	; 8
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	8e 19       	sub	r24, r14
    36f4:	9f 09       	sbc	r25, r15
    36f6:	2f ef       	ldi	r18, 0xFF	; 255
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	59 01       	movw	r10, r18
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <GLCD_SetPixels+0x76>
    36fe:	b5 94       	asr	r11
    3700:	a7 94       	ror	r10
    3702:	8a 95       	dec	r24
    3704:	e2 f7       	brpl	.-8      	; 0x36fe <GLCD_SetPixels+0x72>
    3706:	8a 2d       	mov	r24, r10
			h = height;
    3708:	68 2c       	mov	r6, r8
    370a:	04 c0       	rjmp	.+8      	; 0x3714 <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    370c:	88 e0       	ldi	r24, 0x08	; 8
    370e:	68 2e       	mov	r6, r24
    3710:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    3712:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    3714:	a8 2e       	mov	r10, r24
    3716:	b1 2c       	mov	r11, r1
    3718:	02 c0       	rjmp	.+4      	; 0x371e <GLCD_SetPixels+0x92>
    371a:	aa 0c       	add	r10, r10
    371c:	bb 1c       	adc	r11, r11
    371e:	4a 95       	dec	r20
    3720:	e2 f7       	brpl	.-8      	; 0x371a <GLCD_SetPixels+0x8e>
    3722:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    3724:	67 2d       	mov	r22, r7
    3726:	89 2d       	mov	r24, r9
    3728:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    372c:	11 23       	and	r17, r17
    372e:	c9 f1       	breq	.+114    	; 0x37a2 <GLCD_SetPixels+0x116>
    3730:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3732:	0f 2e       	mov	r0, r31
    3734:	f8 e7       	ldi	r31, 0x78	; 120
    3736:	cf 2e       	mov	r12, r31
    3738:	f2 e0       	ldi	r31, 0x02	; 2
    373a:	df 2e       	mov	r13, r31
    373c:	f0 2d       	mov	r31, r0
    373e:	c7 e7       	ldi	r28, 0x77	; 119
    3740:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3742:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3744:	f6 01       	movw	r30, r12
    3746:	40 80       	ld	r4, Z
    3748:	b8 80       	ld	r11, Y
    374a:	64 2d       	mov	r22, r4
    374c:	8b 2d       	mov	r24, r11
    374e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3752:	0f 3f       	cpi	r16, 0xFF	; 255
    3754:	19 f4       	brne	.+6      	; 0x375c <GLCD_SetPixels+0xd0>
    3756:	48 2f       	mov	r20, r24
    3758:	43 29       	or	r20, r3
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <GLCD_SetPixels+0xd4>
    375c:	48 2f       	mov	r20, r24
    375e:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3760:	9b 2d       	mov	r25, r11
    3762:	9f 5f       	subi	r25, 0xFF	; 255
    3764:	98 83       	st	Y, r25
    3766:	64 2d       	mov	r22, r4
    3768:	8b 2d       	mov	r24, r11
    376a:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    376e:	53 94       	inc	r5
    3770:	51 12       	cpse	r5, r17
    3772:	e8 cf       	rjmp	.-48     	; 0x3744 <GLCD_SetPixels+0xb8>
    3774:	16 c0       	rjmp	.+44     	; 0x37a2 <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3776:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3778:	6c 2f       	mov	r22, r28
    377a:	89 2d       	mov	r24, r9
    377c:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3780:	11 23       	and	r17, r17
    3782:	f1 f0       	breq	.+60     	; 0x37c0 <GLCD_SetPixels+0x134>
    3784:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3786:	f6 01       	movw	r30, r12
    3788:	60 81       	ld	r22, Z
    378a:	f2 01       	movw	r30, r4
    378c:	80 81       	ld	r24, Z
    378e:	98 2f       	mov	r25, r24
    3790:	9f 5f       	subi	r25, 0xFF	; 255
    3792:	90 83       	st	Z, r25
    3794:	40 2f       	mov	r20, r16
    3796:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    379a:	73 94       	inc	r7
    379c:	71 16       	cp	r7, r17
    379e:	81 f0       	breq	.+32     	; 0x37c0 <GLCD_SetPixels+0x134>
    37a0:	f2 cf       	rjmp	.-28     	; 0x3786 <GLCD_SetPixels+0xfa>
    37a2:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    37a4:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    37a6:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    37a8:	0f 2e       	mov	r0, r31
    37aa:	f8 e7       	ldi	r31, 0x78	; 120
    37ac:	cf 2e       	mov	r12, r31
    37ae:	f2 e0       	ldi	r31, 0x02	; 2
    37b0:	df 2e       	mov	r13, r31
    37b2:	f0 2d       	mov	r31, r0
    37b4:	0f 2e       	mov	r0, r31
    37b6:	f7 e7       	ldi	r31, 0x77	; 119
    37b8:	4f 2e       	mov	r4, r31
    37ba:	f2 e0       	ldi	r31, 0x02	; 2
    37bc:	5f 2e       	mov	r5, r31
    37be:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    37c0:	26 2d       	mov	r18, r6
    37c2:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    37c4:	e2 2f       	mov	r30, r18
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	cf 01       	movw	r24, r30
    37ca:	08 96       	adiw	r24, 0x08	; 8
    37cc:	e8 16       	cp	r14, r24
    37ce:	f9 06       	cpc	r15, r25
    37d0:	94 f6       	brge	.-92     	; 0x3776 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    37d2:	28 15       	cp	r18, r8
    37d4:	b0 f5       	brcc	.+108    	; 0x3842 <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    37d6:	ee 1a       	sub	r14, r30
    37d8:	ff 0a       	sbc	r15, r31
    37da:	8f ef       	ldi	r24, 0xFF	; 255
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	9c 01       	movw	r18, r24
    37e0:	02 c0       	rjmp	.+4      	; 0x37e6 <GLCD_SetPixels+0x15a>
    37e2:	22 0f       	add	r18, r18
    37e4:	33 1f       	adc	r19, r19
    37e6:	ea 94       	dec	r14
    37e8:	e2 f7       	brpl	.-8      	; 0x37e2 <GLCD_SetPixels+0x156>
    37ea:	79 01       	movw	r14, r18
    37ec:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    37ee:	6c 2f       	mov	r22, r28
    37f0:	68 5f       	subi	r22, 0xF8	; 248
    37f2:	89 2d       	mov	r24, r9
    37f4:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    37f8:	11 23       	and	r17, r17
    37fa:	19 f1       	breq	.+70     	; 0x3842 <GLCD_SetPixels+0x1b6>
    37fc:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    37fe:	0f 2e       	mov	r0, r31
    3800:	f8 e7       	ldi	r31, 0x78	; 120
    3802:	cf 2e       	mov	r12, r31
    3804:	f2 e0       	ldi	r31, 0x02	; 2
    3806:	df 2e       	mov	r13, r31
    3808:	f0 2d       	mov	r31, r0
    380a:	c7 e7       	ldi	r28, 0x77	; 119
    380c:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    380e:	9e 2c       	mov	r9, r14
    3810:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3812:	f6 01       	movw	r30, r12
    3814:	a0 80       	ld	r10, Z
    3816:	f8 80       	ld	r15, Y
    3818:	6a 2d       	mov	r22, r10
    381a:	8f 2d       	mov	r24, r15
    381c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3820:	0f 3f       	cpi	r16, 0xFF	; 255
    3822:	19 f4       	brne	.+6      	; 0x382a <GLCD_SetPixels+0x19e>
    3824:	48 2f       	mov	r20, r24
    3826:	4e 29       	or	r20, r14
    3828:	02 c0       	rjmp	.+4      	; 0x382e <GLCD_SetPixels+0x1a2>
    382a:	48 2f       	mov	r20, r24
    382c:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    382e:	9f 2d       	mov	r25, r15
    3830:	9f 5f       	subi	r25, 0xFF	; 255
    3832:	98 83       	st	Y, r25
    3834:	6a 2d       	mov	r22, r10
    3836:	8f 2d       	mov	r24, r15
    3838:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    383c:	b3 94       	inc	r11
    383e:	b1 12       	cpse	r11, r17
    3840:	e8 cf       	rjmp	.-48     	; 0x3812 <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	df 90       	pop	r13
    3850:	cf 90       	pop	r12
    3852:	bf 90       	pop	r11
    3854:	af 90       	pop	r10
    3856:	9f 90       	pop	r9
    3858:	8f 90       	pop	r8
    385a:	7f 90       	pop	r7
    385c:	6f 90       	pop	r6
    385e:	5f 90       	pop	r5
    3860:	4f 90       	pop	r4
    3862:	3f 90       	pop	r3
    3864:	08 95       	ret

00003866 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3866:	2f 92       	push	r2
    3868:	3f 92       	push	r3
    386a:	4f 92       	push	r4
    386c:	5f 92       	push	r5
    386e:	6f 92       	push	r6
    3870:	7f 92       	push	r7
    3872:	8f 92       	push	r8
    3874:	9f 92       	push	r9
    3876:	af 92       	push	r10
    3878:	bf 92       	push	r11
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	2c 97       	sbiw	r28, 0x0c	; 12
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	de bf       	out	0x3e, r29	; 62
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	cd bf       	out	0x3d, r28	; 61
    389a:	5c 01       	movw	r10, r24
    389c:	66 2e       	mov	r6, r22
    389e:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    38a0:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__GLCD+0x1>
    38a4:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    38a6:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__GLCD+0x2>
    38aa:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    38ac:	82 2f       	mov	r24, r18
    38ae:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    38b0:	1a f4       	brpl	.+6      	; 0x38b8 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    38b2:	80 e8       	ldi	r24, 0x80	; 128
    38b4:	68 2e       	mov	r6, r24
    38b6:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    38b8:	84 2f       	mov	r24, r20
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	07 96       	adiw	r24, 0x07	; 7
    38be:	95 95       	asr	r25
    38c0:	87 95       	ror	r24
    38c2:	95 95       	asr	r25
    38c4:	87 95       	ror	r24
    38c6:	95 95       	asr	r25
    38c8:	87 95       	ror	r24
    38ca:	8d 83       	std	Y+5, r24	; 0x05
    38cc:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    38ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d0:	96 95       	lsr	r25
    38d2:	96 95       	lsr	r25
    38d4:	96 95       	lsr	r25
    38d6:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    38d8:	89 30       	cpi	r24, 0x09	; 9
    38da:	48 f0       	brcs	.+18     	; 0x38ee <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    38dc:	2d 81       	ldd	r18, Y+5	; 0x05
    38de:	3e 81       	ldd	r19, Y+6	; 0x06
    38e0:	28 5f       	subi	r18, 0xF8	; 248
    38e2:	3f 4f       	sbci	r19, 0xFF	; 255
    38e4:	a9 01       	movw	r20, r18
    38e6:	48 1b       	sub	r20, r24
    38e8:	51 09       	sbc	r21, r1
    38ea:	5e 83       	std	Y+6, r21	; 0x06
    38ec:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    38ee:	4a 84       	ldd	r4, Y+10	; 0x0a
    38f0:	57 e0       	ldi	r21, 0x07	; 7
    38f2:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    38f4:	8d 81       	ldd	r24, Y+5	; 0x05
    38f6:	9e 81       	ldd	r25, Y+6	; 0x06
    38f8:	89 2b       	or	r24, r25
    38fa:	09 f4       	brne	.+2      	; 0x38fe <GLCD_DrawBitmap+0x98>
    38fc:	fa c0       	rjmp	.+500    	; 0x3af2 <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    38fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3900:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3902:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3904:	26 2c       	mov	r2, r6
    3906:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3908:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    390a:	88 e0       	ldi	r24, 0x08	; 8
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	fc 01       	movw	r30, r24
    3910:	e4 19       	sub	r30, r4
    3912:	f1 09       	sbc	r31, r1
    3914:	fb 83       	std	Y+3, r31	; 0x03
    3916:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3918:	0f 2e       	mov	r0, r31
    391a:	f8 e7       	ldi	r31, 0x78	; 120
    391c:	cf 2e       	mov	r12, r31
    391e:	f2 e0       	ldi	r31, 0x02	; 2
    3920:	df 2e       	mov	r13, r31
    3922:	f0 2d       	mov	r31, r0
    3924:	07 e7       	ldi	r16, 0x77	; 119
    3926:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3928:	6c 81       	ldd	r22, Y+4	; 0x04
    392a:	8f 81       	ldd	r24, Y+7	; 0x07
    392c:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3930:	39 86       	std	Y+9, r3	; 0x09
    3932:	28 86       	std	Y+8, r2	; 0x08
    3934:	72 9c       	mul	r7, r2
    3936:	c0 01       	movw	r24, r0
    3938:	73 9c       	mul	r7, r3
    393a:	90 0d       	add	r25, r0
    393c:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    393e:	7c 01       	movw	r14, r24
    3940:	e2 18       	sub	r14, r2
    3942:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3944:	66 20       	and	r6, r6
    3946:	09 f4       	brne	.+2      	; 0x394a <GLCD_DrawBitmap+0xe4>
    3948:	3c c0       	rjmp	.+120    	; 0x39c2 <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    394a:	9c 01       	movw	r18, r24
    394c:	2a 0d       	add	r18, r10
    394e:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3950:	85 2c       	mov	r8, r5
    3952:	3c 87       	std	Y+12, r19	; 0x0c
    3954:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3956:	eb 85       	ldd	r30, Y+11	; 0x0b
    3958:	fc 85       	ldd	r31, Y+12	; 0x0c
    395a:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    395c:	04 2c       	mov	r0, r4
    395e:	01 c0       	rjmp	.+2      	; 0x3962 <GLCD_DrawBitmap+0xfc>
    3960:	99 0c       	add	r9, r9
    3962:	0a 94       	dec	r0
    3964:	ea f7       	brpl	.-6      	; 0x3960 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3966:	77 20       	and	r7, r7
    3968:	79 f0       	breq	.+30     	; 0x3988 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    396a:	f5 01       	movw	r30, r10
    396c:	ee 0d       	add	r30, r14
    396e:	ff 1d       	adc	r31, r15
    3970:	2f ef       	ldi	r18, 0xFF	; 255
    3972:	e2 1a       	sub	r14, r18
    3974:	f2 0a       	sbc	r15, r18
    3976:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0a 80       	ldd	r0, Y+2	; 0x02
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <GLCD_DrawBitmap+0x11c>
    397e:	95 95       	asr	r25
    3980:	87 95       	ror	r24
    3982:	0a 94       	dec	r0
    3984:	e2 f7       	brpl	.-8      	; 0x397e <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3986:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3988:	39 81       	ldd	r19, Y+1	; 0x01
    398a:	31 30       	cpi	r19, 0x01	; 1
    398c:	39 f4       	brne	.+14     	; 0x399c <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    398e:	f6 01       	movw	r30, r12
    3990:	60 81       	ld	r22, Z
    3992:	f8 01       	movw	r30, r16
    3994:	80 81       	ld	r24, Z
    3996:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
    399a:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    399c:	f6 01       	movw	r30, r12
    399e:	60 81       	ld	r22, Z
    39a0:	f8 01       	movw	r30, r16
    39a2:	80 81       	ld	r24, Z
    39a4:	98 2f       	mov	r25, r24
    39a6:	9f 5f       	subi	r25, 0xFF	; 255
    39a8:	90 83       	st	Z, r25
    39aa:	49 2d       	mov	r20, r9
    39ac:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    39b0:	83 94       	inc	r8
    39b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    39b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    39b6:	2f 5f       	subi	r18, 0xFF	; 255
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	3c 87       	std	Y+12, r19	; 0x0c
    39bc:	2b 87       	std	Y+11, r18	; 0x0b
    39be:	86 10       	cpse	r8, r6
    39c0:	ca cf       	rjmp	.-108    	; 0x3956 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    39c2:	ef e7       	ldi	r30, 0x7F	; 127
    39c4:	f2 e0       	ldi	r31, 0x02	; 2
    39c6:	80 81       	ld	r24, Z
    39c8:	88 23       	and	r24, r24
    39ca:	41 f0       	breq	.+16     	; 0x39dc <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    39cc:	f6 01       	movw	r30, r12
    39ce:	60 81       	ld	r22, Z
    39d0:	f8 01       	movw	r30, r16
    39d2:	80 81       	ld	r24, Z
    39d4:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
    39d8:	48 2f       	mov	r20, r24
    39da:	01 c0       	rjmp	.+2      	; 0x39de <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    39dc:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    39de:	f6 01       	movw	r30, r12
    39e0:	60 81       	ld	r22, Z
    39e2:	f8 01       	movw	r30, r16
    39e4:	80 81       	ld	r24, Z
    39e6:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    39ea:	fc 81       	ldd	r31, Y+4	; 0x04
    39ec:	f8 5f       	subi	r31, 0xF8	; 248
    39ee:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    39f0:	73 94       	inc	r7
    39f2:	87 2d       	mov	r24, r7
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	2d 81       	ldd	r18, Y+5	; 0x05
    39f8:	3e 81       	ldd	r19, Y+6	; 0x06
    39fa:	82 17       	cp	r24, r18
    39fc:	93 07       	cpc	r25, r19
    39fe:	08 f4       	brcc	.+2      	; 0x3a02 <GLCD_DrawBitmap+0x19c>
    3a00:	93 cf       	rjmp	.-218    	; 0x3928 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    3a02:	22 30       	cpi	r18, 0x02	; 2
    3a04:	31 05       	cpc	r19, r1
    3a06:	08 f4       	brcc	.+2      	; 0x3a0a <GLCD_DrawBitmap+0x1a4>
    3a08:	74 c0       	rjmp	.+232    	; 0x3af2 <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3a0a:	6f 2f       	mov	r22, r31
    3a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3a0e:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    3a12:	27 2d       	mov	r18, r7
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	21 50       	subi	r18, 0x01	; 1
    3a18:	31 09       	sbc	r19, r1
    3a1a:	48 85       	ldd	r20, Y+8	; 0x08
    3a1c:	59 85       	ldd	r21, Y+9	; 0x09
    3a1e:	24 9f       	mul	r18, r20
    3a20:	c0 01       	movw	r24, r0
    3a22:	25 9f       	mul	r18, r21
    3a24:	90 0d       	add	r25, r0
    3a26:	34 9f       	mul	r19, r20
    3a28:	90 0d       	add	r25, r0
    3a2a:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3a2c:	66 20       	and	r6, r6
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <GLCD_DrawBitmap+0x1cc>
    3a30:	3e c0       	rjmp	.+124    	; 0x3aae <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3a32:	45 01       	movw	r8, r10
    3a34:	88 0e       	add	r8, r24
    3a36:	99 1e       	adc	r9, r25
    3a38:	65 01       	movw	r12, r10
    3a3a:	5f ef       	ldi	r21, 0xFF	; 255
    3a3c:	c5 1a       	sub	r12, r21
    3a3e:	d5 0a       	sbc	r13, r21
    3a40:	6a 94       	dec	r6
    3a42:	c6 0c       	add	r12, r6
    3a44:	d1 1c       	adc	r13, r1
    3a46:	c8 0e       	add	r12, r24
    3a48:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a4a:	0f 2e       	mov	r0, r31
    3a4c:	f8 e7       	ldi	r31, 0x78	; 120
    3a4e:	ef 2e       	mov	r14, r31
    3a50:	f2 e0       	ldi	r31, 0x02	; 2
    3a52:	ff 2e       	mov	r15, r31
    3a54:	f0 2d       	mov	r31, r0
    3a56:	07 e7       	ldi	r16, 0x77	; 119
    3a58:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3a5a:	88 e0       	ldi	r24, 0x08	; 8
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	5c 01       	movw	r10, r24
    3a60:	a4 18       	sub	r10, r4
    3a62:	b1 08       	sbc	r11, r1
    3a64:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a66:	f7 01       	movw	r30, r14
    3a68:	80 80       	ld	r8, Z
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	90 80       	ld	r9, Z
    3a6e:	68 2d       	mov	r22, r8
    3a70:	89 2d       	mov	r24, r9
    3a72:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3a76:	f3 01       	movw	r30, r6
    3a78:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	0a 2c       	mov	r0, r10
    3a7e:	02 c0       	rjmp	.+4      	; 0x3a84 <GLCD_DrawBitmap+0x21e>
    3a80:	55 95       	asr	r21
    3a82:	47 95       	ror	r20
    3a84:	0a 94       	dec	r0
    3a86:	e2 f7       	brpl	.-8      	; 0x3a80 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3a88:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a8c:	f1 30       	cpi	r31, 0x01	; 1
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a90:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3a92:	89 2d       	mov	r24, r9
    3a94:	8f 5f       	subi	r24, 0xFF	; 255
    3a96:	f8 01       	movw	r30, r16
    3a98:	80 83       	st	Z, r24
    3a9a:	68 2d       	mov	r22, r8
    3a9c:	89 2d       	mov	r24, r9
    3a9e:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
    3aa2:	ff ef       	ldi	r31, 0xFF	; 255
    3aa4:	6f 1a       	sub	r6, r31
    3aa6:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3aa8:	6c 14       	cp	r6, r12
    3aaa:	7d 04       	cpc	r7, r13
    3aac:	e1 f6       	brne	.-72     	; 0x3a66 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3aae:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <__GLCD+0x9>
    3ab2:	88 23       	and	r24, r24
    3ab4:	99 f0       	breq	.+38     	; 0x3adc <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	41 f4       	brne	.+16     	; 0x3aca <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3aba:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <__GLCD+0x2>
    3abe:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__GLCD+0x1>
    3ac2:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
    3ac6:	48 2f       	mov	r20, r24
    3ac8:	0a c0       	rjmp	.+20     	; 0x3ade <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3aca:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <__GLCD+0x2>
    3ace:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__GLCD+0x1>
    3ad2:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
    3ad6:	48 2f       	mov	r20, r24
    3ad8:	40 95       	com	r20
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3adc:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    3ade:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <__GLCD+0x2>
    3ae2:	e7 e7       	ldi	r30, 0x77	; 119
    3ae4:	f2 e0       	ldi	r31, 0x02	; 2
    3ae6:	80 81       	ld	r24, Z
    3ae8:	98 2f       	mov	r25, r24
    3aea:	9f 5f       	subi	r25, 0xFF	; 255
    3aec:	90 83       	st	Z, r25
    3aee:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    3af2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <GLCD_GetX>
    3af6:	6a 85       	ldd	r22, Y+10	; 0x0a
    3af8:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
}
    3afc:	2c 96       	adiw	r28, 0x0c	; 12
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	df 90       	pop	r13
    3b16:	cf 90       	pop	r12
    3b18:	bf 90       	pop	r11
    3b1a:	af 90       	pop	r10
    3b1c:	9f 90       	pop	r9
    3b1e:	8f 90       	pop	r8
    3b20:	7f 90       	pop	r7
    3b22:	6f 90       	pop	r6
    3b24:	5f 90       	pop	r5
    3b26:	4f 90       	pop	r4
    3b28:	3f 90       	pop	r3
    3b2a:	2f 90       	pop	r2
    3b2c:	08 95       	ret

00003b2e <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3b2e:	df 92       	push	r13
    3b30:	ef 92       	push	r14
    3b32:	ff 92       	push	r15
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	e8 2e       	mov	r14, r24
    3b3e:	16 2f       	mov	r17, r22
    3b40:	d4 2e       	mov	r13, r20
    3b42:	f2 2e       	mov	r15, r18
    3b44:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3b46:	88 23       	and	r24, r24
    3b48:	0c f4       	brge	.+2      	; 0x3b4c <GLCD_DrawRectangle+0x1e>
    3b4a:	49 c0       	rjmp	.+146    	; 0x3bde <GLCD_DrawRectangle+0xb0>
    3b4c:	44 23       	and	r20, r20
    3b4e:	0c f4       	brge	.+2      	; 0x3b52 <GLCD_DrawRectangle+0x24>
    3b50:	46 c0       	rjmp	.+140    	; 0x3bde <GLCD_DrawRectangle+0xb0>
    3b52:	60 34       	cpi	r22, 0x40	; 64
    3b54:	08 f0       	brcs	.+2      	; 0x3b58 <GLCD_DrawRectangle+0x2a>
    3b56:	43 c0       	rjmp	.+134    	; 0x3bde <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3b58:	8f e3       	ldi	r24, 0x3F	; 63
    3b5a:	82 17       	cp	r24, r18
    3b5c:	08 f4       	brcc	.+2      	; 0x3b60 <GLCD_DrawRectangle+0x32>
    3b5e:	3f c0       	rjmp	.+126    	; 0x3bde <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3b60:	4e 15       	cp	r20, r14
    3b62:	00 f1       	brcs	.+64     	; 0x3ba4 <GLCD_DrawRectangle+0x76>
    3b64:	1c c0       	rjmp	.+56     	; 0x3b9e <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3b66:	4d 2f       	mov	r20, r29
    3b68:	61 2f       	mov	r22, r17
    3b6a:	8c 2f       	mov	r24, r28
    3b6c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <GLCD_SetPixel>
		X1++;
    3b70:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3b72:	0c 17       	cp	r16, r28
    3b74:	c0 f7       	brcc	.-16     	; 0x3b66 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3b76:	de 14       	cp	r13, r14
    3b78:	d8 f0       	brcs	.+54     	; 0x3bb0 <GLCD_DrawRectangle+0x82>
    3b7a:	17 c0       	rjmp	.+46     	; 0x3baa <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3b7c:	4d 2f       	mov	r20, r29
    3b7e:	6f 2d       	mov	r22, r15
    3b80:	8c 2f       	mov	r24, r28
    3b82:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <GLCD_SetPixel>
		X1++;
    3b86:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3b88:	0c 17       	cp	r16, r28
    3b8a:	c0 f7       	brcc	.-16     	; 0x3b7c <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    3b8c:	f1 16       	cp	r15, r17
    3b8e:	98 f0       	brcs	.+38     	; 0x3bb6 <GLCD_DrawRectangle+0x88>
    3b90:	1c c0       	rjmp	.+56     	; 0x3bca <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3b92:	0d 2f       	mov	r16, r29
    3b94:	4d 2d       	mov	r20, r13
    3b96:	8d 2d       	mov	r24, r13
    3b98:	0e 94 46 1b 	call	0x368c	; 0x368c <GLCD_SetPixels>
    3b9c:	20 c0       	rjmp	.+64     	; 0x3bde <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3b9e:	04 2f       	mov	r16, r20
    3ba0:	ce 2d       	mov	r28, r14
    3ba2:	e1 cf       	rjmp	.-62     	; 0x3b66 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    3ba4:	0e 2d       	mov	r16, r14
    3ba6:	c4 2f       	mov	r28, r20
    3ba8:	de cf       	rjmp	.-68     	; 0x3b66 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3baa:	0d 2d       	mov	r16, r13
    3bac:	ce 2d       	mov	r28, r14
    3bae:	e6 cf       	rjmp	.-52     	; 0x3b7c <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    3bb0:	0e 2d       	mov	r16, r14
    3bb2:	cd 2d       	mov	r28, r13
    3bb4:	e3 cf       	rjmp	.-58     	; 0x3b7c <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3bb6:	0d 2f       	mov	r16, r29
    3bb8:	21 2f       	mov	r18, r17
    3bba:	4e 2d       	mov	r20, r14
    3bbc:	6f 2d       	mov	r22, r15
    3bbe:	8e 2d       	mov	r24, r14
    3bc0:	0e 94 46 1b 	call	0x368c	; 0x368c <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    3bc4:	21 2f       	mov	r18, r17
    3bc6:	6f 2d       	mov	r22, r15
    3bc8:	e4 cf       	rjmp	.-56     	; 0x3b92 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3bca:	0d 2f       	mov	r16, r29
    3bcc:	2f 2d       	mov	r18, r15
    3bce:	4e 2d       	mov	r20, r14
    3bd0:	61 2f       	mov	r22, r17
    3bd2:	8e 2d       	mov	r24, r14
    3bd4:	0e 94 46 1b 	call	0x368c	; 0x368c <GLCD_SetPixels>
    3bd8:	2f 2d       	mov	r18, r15
    3bda:	61 2f       	mov	r22, r17
    3bdc:	da cf       	rjmp	.-76     	; 0x3b92 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	ff 90       	pop	r15
    3be8:	ef 90       	pop	r14
    3bea:	df 90       	pop	r13
    3bec:	08 95       	ret

00003bee <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    3bee:	0f 93       	push	r16
    3bf0:	1f 93       	push	r17
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
    3bf6:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    3bf8:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    3bfa:	00 e0       	ldi	r16, 0x00	; 0
    3bfc:	0b c0       	rjmp	.+22     	; 0x3c14 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    3bfe:	41 2f       	mov	r20, r17
    3c00:	6d 2f       	mov	r22, r29
    3c02:	8c 2f       	mov	r24, r28
    3c04:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    3c08:	cf 5f       	subi	r28, 0xFF	; 255
    3c0a:	c0 38       	cpi	r28, 0x80	; 128
    3c0c:	c1 f7       	brne	.-16     	; 0x3bfe <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    3c0e:	d8 5f       	subi	r29, 0xF8	; 248
    3c10:	d0 34       	cpi	r29, 0x40	; 64
    3c12:	11 f0       	breq	.+4      	; 0x3c18 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    3c14:	c0 2f       	mov	r28, r16
    3c16:	f3 cf       	rjmp	.-26     	; 0x3bfe <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	0f 91       	pop	r16
    3c20:	08 95       	ret

00003c22 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <GLCD_FillScreen>
    3c28:	08 95       	ret

00003c2a <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3c2a:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    3c2c:	0e 94 46 1b 	call	0x368c	; 0x368c <GLCD_SetPixels>
}
    3c30:	0f 91       	pop	r16
    3c32:	08 95       	ret

00003c34 <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    3c34:	2f 92       	push	r2
    3c36:	3f 92       	push	r3
    3c38:	5f 92       	push	r5
    3c3a:	6f 92       	push	r6
    3c3c:	7f 92       	push	r7
    3c3e:	8f 92       	push	r8
    3c40:	9f 92       	push	r9
    3c42:	af 92       	push	r10
    3c44:	bf 92       	push	r11
    3c46:	cf 92       	push	r12
    3c48:	df 92       	push	r13
    3c4a:	ef 92       	push	r14
    3c4c:	ff 92       	push	r15
    3c4e:	0f 93       	push	r16
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	d8 2e       	mov	r13, r24
    3c5c:	dc 18       	sub	r13, r12
    3c5e:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    3c60:	b8 2e       	mov	r11, r24
    3c62:	b6 1a       	sub	r11, r22
    3c64:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    3c66:	46 2f       	mov	r20, r22
    3c68:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    3c6a:	a6 2e       	mov	r10, r22
    3c6c:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    3c6e:	0b 2d       	mov	r16, r11
    3c70:	10 e0       	ldi	r17, 0x00	; 0
    3c72:	88 e0       	ldi	r24, 0x08	; 8
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	84 1b       	sub	r24, r20
    3c78:	91 09       	sbc	r25, r1
    3c7a:	08 17       	cp	r16, r24
    3c7c:	19 07       	cpc	r17, r25
    3c7e:	7c f4       	brge	.+30     	; 0x3c9e <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    3c80:	88 e0       	ldi	r24, 0x08	; 8
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	80 1b       	sub	r24, r16
    3c86:	91 0b       	sbc	r25, r17
    3c88:	2f ef       	ldi	r18, 0xFF	; 255
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	b9 01       	movw	r22, r18
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <GLCD_InvertRect+0x60>
    3c90:	75 95       	asr	r23
    3c92:	67 95       	ror	r22
    3c94:	8a 95       	dec	r24
    3c96:	e2 f7       	brpl	.-8      	; 0x3c90 <GLCD_InvertRect+0x5c>
    3c98:	cb 01       	movw	r24, r22
		h = height;
    3c9a:	5b 2c       	mov	r5, r11
    3c9c:	04 c0       	rjmp	.+8      	; 0x3ca6 <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    3c9e:	88 e0       	ldi	r24, 0x08	; 8
    3ca0:	58 2e       	mov	r5, r24
    3ca2:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    3ca4:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    3ca6:	68 2e       	mov	r6, r24
    3ca8:	01 c0       	rjmp	.+2      	; 0x3cac <GLCD_InvertRect+0x78>
    3caa:	66 0c       	add	r6, r6
    3cac:	4a 95       	dec	r20
    3cae:	ea f7       	brpl	.-6      	; 0x3caa <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    3cb0:	6a 2d       	mov	r22, r10
    3cb2:	8c 2d       	mov	r24, r12
    3cb4:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    3cb8:	dd 20       	and	r13, r13
    3cba:	d9 f1       	breq	.+118    	; 0x3d32 <GLCD_InvertRect+0xfe>
    3cbc:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3cbe:	0f 2e       	mov	r0, r31
    3cc0:	f8 e7       	ldi	r31, 0x78	; 120
    3cc2:	ef 2e       	mov	r14, r31
    3cc4:	f2 e0       	ldi	r31, 0x02	; 2
    3cc6:	ff 2e       	mov	r15, r31
    3cc8:	f0 2d       	mov	r31, r0
    3cca:	c7 e7       	ldi	r28, 0x77	; 119
    3ccc:	d2 e0       	ldi	r29, 0x02	; 2
    3cce:	f7 01       	movw	r30, r14
    3cd0:	70 80       	ld	r7, Z
    3cd2:	98 80       	ld	r9, Y
    3cd4:	67 2d       	mov	r22, r7
    3cd6:	89 2d       	mov	r24, r9
    3cd8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3cdc:	99 2d       	mov	r25, r9
    3cde:	9f 5f       	subi	r25, 0xFF	; 255
    3ce0:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    3ce2:	48 2f       	mov	r20, r24
    3ce4:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3ce6:	67 2d       	mov	r22, r7
    3ce8:	89 2d       	mov	r24, r9
    3cea:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    3cee:	83 94       	inc	r8
    3cf0:	8d 10       	cpse	r8, r13
    3cf2:	ed cf       	rjmp	.-38     	; 0x3cce <GLCD_InvertRect+0x9a>
    3cf4:	1e c0       	rjmp	.+60     	; 0x3d32 <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    3cf6:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    3cf8:	6c 2f       	mov	r22, r28
    3cfa:	8c 2d       	mov	r24, r12
    3cfc:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    3d00:	dd 20       	and	r13, r13
    3d02:	39 f1       	breq	.+78     	; 0x3d52 <GLCD_InvertRect+0x11e>
    3d04:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d06:	f7 01       	movw	r30, r14
    3d08:	50 80       	ld	r5, Z
    3d0a:	f1 01       	movw	r30, r2
    3d0c:	80 80       	ld	r8, Z
    3d0e:	65 2d       	mov	r22, r5
    3d10:	88 2d       	mov	r24, r8
    3d12:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3d16:	98 2d       	mov	r25, r8
    3d18:	9f 5f       	subi	r25, 0xFF	; 255
    3d1a:	f1 01       	movw	r30, r2
    3d1c:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d1e:	48 2f       	mov	r20, r24
    3d20:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3d22:	65 2d       	mov	r22, r5
    3d24:	88 2d       	mov	r24, r8
    3d26:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    3d2a:	63 94       	inc	r6
    3d2c:	6d 14       	cp	r6, r13
    3d2e:	89 f0       	breq	.+34     	; 0x3d52 <GLCD_InvertRect+0x11e>
    3d30:	ea cf       	rjmp	.-44     	; 0x3d06 <GLCD_InvertRect+0xd2>
    3d32:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    3d34:	5a 18       	sub	r5, r10
    3d36:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    3d38:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d3a:	0f 2e       	mov	r0, r31
    3d3c:	f8 e7       	ldi	r31, 0x78	; 120
    3d3e:	ef 2e       	mov	r14, r31
    3d40:	f2 e0       	ldi	r31, 0x02	; 2
    3d42:	ff 2e       	mov	r15, r31
    3d44:	f0 2d       	mov	r31, r0
    3d46:	0f 2e       	mov	r0, r31
    3d48:	f7 e7       	ldi	r31, 0x77	; 119
    3d4a:	2f 2e       	mov	r2, r31
    3d4c:	f2 e0       	ldi	r31, 0x02	; 2
    3d4e:	3f 2e       	mov	r3, r31
    3d50:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    3d52:	8a 2d       	mov	r24, r10
    3d54:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    3d56:	e8 2f       	mov	r30, r24
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	df 01       	movw	r26, r30
    3d5c:	18 96       	adiw	r26, 0x08	; 8
    3d5e:	0a 17       	cp	r16, r26
    3d60:	1b 07       	cpc	r17, r27
    3d62:	4c f6       	brge	.-110    	; 0x3cf6 <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    3d64:	8b 15       	cp	r24, r11
    3d66:	58 f5       	brcc	.+86     	; 0x3dbe <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    3d68:	0e 1b       	sub	r16, r30
    3d6a:	1f 0b       	sbc	r17, r31
    3d6c:	8f ef       	ldi	r24, 0xFF	; 255
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	9c 01       	movw	r18, r24
    3d72:	02 c0       	rjmp	.+4      	; 0x3d78 <GLCD_InvertRect+0x144>
    3d74:	22 0f       	add	r18, r18
    3d76:	33 1f       	adc	r19, r19
    3d78:	0a 95       	dec	r16
    3d7a:	e2 f7       	brpl	.-8      	; 0x3d74 <GLCD_InvertRect+0x140>
    3d7c:	b2 2e       	mov	r11, r18
    3d7e:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    3d80:	6c 2f       	mov	r22, r28
    3d82:	68 5f       	subi	r22, 0xF8	; 248
    3d84:	8c 2d       	mov	r24, r12
    3d86:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    3d8a:	dd 20       	and	r13, r13
    3d8c:	c1 f0       	breq	.+48     	; 0x3dbe <GLCD_InvertRect+0x18a>
    3d8e:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d90:	08 e7       	ldi	r16, 0x78	; 120
    3d92:	12 e0       	ldi	r17, 0x02	; 2
    3d94:	c7 e7       	ldi	r28, 0x77	; 119
    3d96:	d2 e0       	ldi	r29, 0x02	; 2
    3d98:	f8 01       	movw	r30, r16
    3d9a:	c0 80       	ld	r12, Z
    3d9c:	f8 80       	ld	r15, Y
    3d9e:	6c 2d       	mov	r22, r12
    3da0:	8f 2d       	mov	r24, r15
    3da2:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3da6:	9f 2d       	mov	r25, r15
    3da8:	9f 5f       	subi	r25, 0xFF	; 255
    3daa:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    3dac:	48 2f       	mov	r20, r24
    3dae:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3db0:	6c 2d       	mov	r22, r12
    3db2:	8f 2d       	mov	r24, r15
    3db4:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    3db8:	e3 94       	inc	r14
    3dba:	ed 10       	cpse	r14, r13
    3dbc:	ed cf       	rjmp	.-38     	; 0x3d98 <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	bf 90       	pop	r11
    3dd0:	af 90       	pop	r10
    3dd2:	9f 90       	pop	r9
    3dd4:	8f 90       	pop	r8
    3dd6:	7f 90       	pop	r7
    3dd8:	6f 90       	pop	r6
    3dda:	5f 90       	pop	r5
    3ddc:	3f 90       	pop	r3
    3dde:	2f 90       	pop	r2
    3de0:	08 95       	ret

00003de2 <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    3de2:	66 23       	and	r22, r22
    3de4:	f4 f0       	brlt	.+60     	; 0x3e22 <GLCD_SetFont+0x40>
    3de6:	40 34       	cpi	r20, 0x40	; 64
    3de8:	e0 f4       	brcc	.+56     	; 0x3e22 <GLCD_SetFont+0x40>
    3dea:	22 30       	cpi	r18, 0x02	; 2
    3dec:	d0 f4       	brcc	.+52     	; 0x3e22 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    3dee:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__GLCD+0x5>
    3df2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    3df6:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    3dfa:	40 93 7d 02 	sts	0x027D, r20	; 0x80027d <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    3dfe:	50 e0       	ldi	r21, 0x00	; 0
    3e00:	41 50       	subi	r20, 0x01	; 1
    3e02:	51 09       	sbc	r21, r1
    3e04:	ca 01       	movw	r24, r20
    3e06:	99 23       	and	r25, r25
    3e08:	0c f4       	brge	.+2      	; 0x3e0c <GLCD_SetFont+0x2a>
    3e0a:	07 96       	adiw	r24, 0x07	; 7
    3e0c:	95 95       	asr	r25
    3e0e:	87 95       	ror	r24
    3e10:	95 95       	asr	r25
    3e12:	87 95       	ror	r24
    3e14:	95 95       	asr	r25
    3e16:	87 95       	ror	r24
    3e18:	8f 5f       	subi	r24, 0xFF	; 255
    3e1a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    3e1e:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <__GLCD+0x9>
    3e22:	08 95       	ret

00003e24 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    3e24:	2f 92       	push	r2
    3e26:	3f 92       	push	r3
    3e28:	4f 92       	push	r4
    3e2a:	5f 92       	push	r5
    3e2c:	6f 92       	push	r6
    3e2e:	7f 92       	push	r7
    3e30:	8f 92       	push	r8
    3e32:	9f 92       	push	r9
    3e34:	af 92       	push	r10
    3e36:	bf 92       	push	r11
    3e38:	cf 92       	push	r12
    3e3a:	df 92       	push	r13
    3e3c:	ef 92       	push	r14
    3e3e:	ff 92       	push	r15
    3e40:	0f 93       	push	r16
    3e42:	1f 93       	push	r17
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
    3e4c:	2b 97       	sbiw	r28, 0x0b	; 11
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3e58:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__GLCD+0x1>
    3e5c:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    3e5e:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__GLCD+0x2>
    3e62:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    3e64:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    3e68:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    3e6a:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <__GLCD+0x6>
    3e6e:	29 9f       	mul	r18, r25
    3e70:	90 01       	movw	r18, r0
    3e72:	11 24       	eor	r1, r1
    3e74:	2f 5f       	subi	r18, 0xFF	; 255
    3e76:	3f 4f       	sbci	r19, 0xFF	; 255
    3e78:	82 9f       	mul	r24, r18
    3e7a:	a0 01       	movw	r20, r0
    3e7c:	83 9f       	mul	r24, r19
    3e7e:	50 0d       	add	r21, r0
    3e80:	11 24       	eor	r1, r1
    3e82:	59 87       	std	Y+9, r21	; 0x09
    3e84:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    3e86:	4f 5f       	subi	r20, 0xFF	; 255
    3e88:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8a:	5e 83       	std	Y+6, r21	; 0x06
    3e8c:	4d 83       	std	Y+5, r20	; 0x05
    3e8e:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <__GLCD+0x4>
    3e92:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <__GLCD+0x5>
    3e96:	a8 85       	ldd	r26, Y+8	; 0x08
    3e98:	b9 85       	ldd	r27, Y+9	; 0x09
    3e9a:	ea 0f       	add	r30, r26
    3e9c:	fb 1f       	adc	r31, r27
    3e9e:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3ea0:	7f 80       	ldd	r7, Y+7	; 0x07
    3ea2:	b7 e0       	ldi	r27, 0x07	; 7
    3ea4:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3ea6:	99 23       	and	r25, r25
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <GLCD_PrintChar+0x88>
    3eaa:	92 c0       	rjmp	.+292    	; 0x3fd0 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3eac:	ef 81       	ldd	r30, Y+7	; 0x07
    3eae:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3eb0:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3eb2:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3eb4:	88 e0       	ldi	r24, 0x08	; 8
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	9c 01       	movw	r18, r24
    3eba:	27 19       	sub	r18, r7
    3ebc:	31 09       	sbc	r19, r1
    3ebe:	3a 83       	std	Y+2, r19	; 0x02
    3ec0:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3ec2:	0f 2e       	mov	r0, r31
    3ec4:	ff e7       	ldi	r31, 0x7F	; 127
    3ec6:	8f 2e       	mov	r8, r31
    3ec8:	f2 e0       	ldi	r31, 0x02	; 2
    3eca:	9f 2e       	mov	r9, r31
    3ecc:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ece:	0f 2e       	mov	r0, r31
    3ed0:	f8 e7       	ldi	r31, 0x78	; 120
    3ed2:	af 2e       	mov	r10, r31
    3ed4:	f2 e0       	ldi	r31, 0x02	; 2
    3ed6:	bf 2e       	mov	r11, r31
    3ed8:	f0 2d       	mov	r31, r0
    3eda:	07 e7       	ldi	r16, 0x77	; 119
    3edc:	12 e0       	ldi	r17, 0x02	; 2
    3ede:	67 2c       	mov	r6, r7
    3ee0:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3ee2:	6b 81       	ldd	r22, Y+3	; 0x03
    3ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee6:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    3eea:	4d 81       	ldd	r20, Y+5	; 0x05
    3eec:	5e 81       	ldd	r21, Y+6	; 0x06
    3eee:	43 0d       	add	r20, r3
    3ef0:	51 1d       	adc	r21, r1
    3ef2:	5b 87       	std	Y+11, r21	; 0x0b
    3ef4:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    3ef6:	7a 01       	movw	r14, r20
    3ef8:	51 e0       	ldi	r21, 0x01	; 1
    3efa:	e5 1a       	sub	r14, r21
    3efc:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3efe:	77 20       	and	r7, r7
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <GLCD_PrintChar+0xe0>
    3f02:	4f c0       	rjmp	.+158    	; 0x3fa2 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    3f04:	0f 2e       	mov	r0, r31
    3f06:	fe e7       	ldi	r31, 0x7E	; 126
    3f08:	cf 2e       	mov	r12, r31
    3f0a:	f2 e0       	ldi	r31, 0x02	; 2
    3f0c:	df 2e       	mov	r13, r31
    3f0e:	f0 2d       	mov	r31, r0
    3f10:	83 2d       	mov	r24, r3
    3f12:	36 2c       	mov	r3, r6
    3f14:	67 2c       	mov	r6, r7
    3f16:	72 2c       	mov	r7, r2
    3f18:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    3f1a:	aa e7       	ldi	r26, 0x7A	; 122
    3f1c:	b2 e0       	ldi	r27, 0x02	; 2
    3f1e:	2d 91       	ld	r18, X+
    3f20:	3c 91       	ld	r19, X
    3f22:	ea 85       	ldd	r30, Y+10	; 0x0a
    3f24:	fb 85       	ldd	r31, Y+11	; 0x0b
    3f26:	e2 0f       	add	r30, r18
    3f28:	f3 1f       	adc	r31, r19
    3f2a:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    3f2c:	4e 2e       	mov	r4, r30
    3f2e:	03 2c       	mov	r0, r3
    3f30:	01 c0       	rjmp	.+2      	; 0x3f34 <GLCD_PrintChar+0x110>
    3f32:	44 0c       	add	r4, r4
    3f34:	0a 94       	dec	r0
    3f36:	ea f7       	brpl	.-6      	; 0x3f32 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    3f38:	55 20       	and	r5, r5
    3f3a:	81 f0       	breq	.+32     	; 0x3f5c <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3f3c:	f9 01       	movw	r30, r18
    3f3e:	ee 0d       	add	r30, r14
    3f40:	ff 1d       	adc	r31, r15
    3f42:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	09 80       	ldd	r0, Y+1	; 0x01
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <GLCD_PrintChar+0x12a>
    3f4a:	35 95       	asr	r19
    3f4c:	27 95       	ror	r18
    3f4e:	0a 94       	dec	r0
    3f50:	e2 f7       	brpl	.-8      	; 0x3f4a <GLCD_PrintChar+0x126>
				data |= dataPrev;
    3f52:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    3f54:	f6 01       	movw	r30, r12
    3f56:	80 81       	ld	r24, Z
    3f58:	e8 0e       	add	r14, r24
    3f5a:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3f5c:	d4 01       	movw	r26, r8
    3f5e:	8c 91       	ld	r24, X
    3f60:	81 30       	cpi	r24, 0x01	; 1
    3f62:	39 f4       	brne	.+14     	; 0x3f72 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3f64:	f5 01       	movw	r30, r10
    3f66:	60 81       	ld	r22, Z
    3f68:	d8 01       	movw	r26, r16
    3f6a:	8c 91       	ld	r24, X
    3f6c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
    3f70:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3f72:	f5 01       	movw	r30, r10
    3f74:	60 81       	ld	r22, Z
    3f76:	d8 01       	movw	r26, r16
    3f78:	8c 91       	ld	r24, X
    3f7a:	98 2f       	mov	r25, r24
    3f7c:	9f 5f       	subi	r25, 0xFF	; 255
    3f7e:	9c 93       	st	X, r25
    3f80:	44 2d       	mov	r20, r4
    3f82:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    3f86:	f6 01       	movw	r30, r12
    3f88:	80 81       	ld	r24, Z
    3f8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f8c:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f8e:	28 0f       	add	r18, r24
    3f90:	31 1d       	adc	r19, r1
    3f92:	3b 87       	std	Y+11, r19	; 0x0b
    3f94:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3f96:	73 94       	inc	r7
    3f98:	76 10       	cpse	r7, r6
    3f9a:	bf cf       	rjmp	.-130    	; 0x3f1a <GLCD_PrintChar+0xf6>
    3f9c:	76 2c       	mov	r7, r6
    3f9e:	63 2c       	mov	r6, r3
    3fa0:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3fa2:	d4 01       	movw	r26, r8
    3fa4:	8c 91       	ld	r24, X
    3fa6:	81 11       	cpse	r24, r1
    3fa8:	07 c0       	rjmp	.+14     	; 0x3fb8 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    3faa:	42 2d       	mov	r20, r2
    3fac:	f5 01       	movw	r30, r10
    3fae:	60 81       	ld	r22, Z
    3fb0:	d8 01       	movw	r26, r16
    3fb2:	8c 91       	ld	r24, X
    3fb4:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3fb8:	bb 81       	ldd	r27, Y+3	; 0x03
    3fba:	b8 5f       	subi	r27, 0xF8	; 248
    3fbc:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3fbe:	33 94       	inc	r3
    3fc0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <__GLCD+0x8>
    3fc4:	38 16       	cp	r3, r24
    3fc6:	08 f4       	brcc	.+2      	; 0x3fca <GLCD_PrintChar+0x1a6>
    3fc8:	8c cf       	rjmp	.-232    	; 0x3ee2 <GLCD_PrintChar+0xbe>
    3fca:	57 2c       	mov	r5, r7
    3fcc:	76 2c       	mov	r7, r6
    3fce:	03 c0       	rjmp	.+6      	; 0x3fd6 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3fd0:	ef 81       	ldd	r30, Y+7	; 0x07
    3fd2:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3fd4:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    3fd6:	2f 81       	ldd	r18, Y+7	; 0x07
    3fd8:	22 95       	swap	r18
    3fda:	26 95       	lsr	r18
    3fdc:	26 95       	lsr	r18
    3fde:	23 70       	andi	r18, 0x03	; 3
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <__GLCD+0x7>
    3fe6:	82 95       	swap	r24
    3fe8:	86 95       	lsr	r24
    3fea:	86 95       	lsr	r24
    3fec:	83 70       	andi	r24, 0x03	; 3
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	ff 81       	ldd	r31, Y+7	; 0x07
    3ff2:	8f 0f       	add	r24, r31
    3ff4:	91 1d       	adc	r25, r1
    3ff6:	28 17       	cp	r18, r24
    3ff8:	39 07       	cpc	r19, r25
    3ffa:	09 f4       	brne	.+2      	; 0x3ffe <GLCD_PrintChar+0x1da>
    3ffc:	69 c0       	rjmp	.+210    	; 0x40d0 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    4000:	8c 81       	ldd	r24, Y+4	; 0x04
    4002:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    4006:	28 85       	ldd	r18, Y+8	; 0x08
    4008:	39 85       	ldd	r19, Y+9	; 0x09
    400a:	23 0d       	add	r18, r3
    400c:	31 1d       	adc	r19, r1
    400e:	3a 83       	std	Y+2, r19	; 0x02
    4010:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4012:	55 20       	and	r5, r5
    4014:	09 f4       	brne	.+2      	; 0x4018 <GLCD_PrintChar+0x1f4>
    4016:	51 c0       	rjmp	.+162    	; 0x40ba <GLCD_PrintChar+0x296>
    4018:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    401a:	0f 2e       	mov	r0, r31
    401c:	f8 e7       	ldi	r31, 0x78	; 120
    401e:	af 2e       	mov	r10, r31
    4020:	f2 e0       	ldi	r31, 0x02	; 2
    4022:	bf 2e       	mov	r11, r31
    4024:	f0 2d       	mov	r31, r0
    4026:	07 e7       	ldi	r16, 0x77	; 119
    4028:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    402a:	0f 2e       	mov	r0, r31
    402c:	fa e7       	ldi	r31, 0x7A	; 122
    402e:	cf 2e       	mov	r12, r31
    4030:	f2 e0       	ldi	r31, 0x02	; 2
    4032:	df 2e       	mov	r13, r31
    4034:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    4036:	88 e0       	ldi	r24, 0x08	; 8
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	ac 01       	movw	r20, r24
    403c:	47 19       	sub	r20, r7
    403e:	51 09       	sbc	r21, r1
    4040:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4042:	0f 2e       	mov	r0, r31
    4044:	ff e7       	ldi	r31, 0x7F	; 127
    4046:	ef 2e       	mov	r14, r31
    4048:	f2 e0       	ldi	r31, 0x02	; 2
    404a:	ff 2e       	mov	r15, r31
    404c:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    404e:	0f 2e       	mov	r0, r31
    4050:	fe e7       	ldi	r31, 0x7E	; 126
    4052:	8f 2e       	mov	r8, r31
    4054:	f2 e0       	ldi	r31, 0x02	; 2
    4056:	9f 2e       	mov	r9, r31
    4058:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    405a:	d5 01       	movw	r26, r10
    405c:	2c 90       	ld	r2, X
    405e:	f8 01       	movw	r30, r16
    4060:	40 80       	ld	r4, Z
    4062:	62 2d       	mov	r22, r2
    4064:	84 2d       	mov	r24, r4
    4066:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    406a:	d6 01       	movw	r26, r12
    406c:	ed 91       	ld	r30, X+
    406e:	fc 91       	ld	r31, X
    4070:	29 81       	ldd	r18, Y+1	; 0x01
    4072:	3a 81       	ldd	r19, Y+2	; 0x02
    4074:	e2 0f       	add	r30, r18
    4076:	f3 1f       	adc	r31, r19
    4078:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	06 2c       	mov	r0, r6
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <GLCD_PrintChar+0x260>
    4080:	55 95       	asr	r21
    4082:	47 95       	ror	r20
    4084:	0a 94       	dec	r0
    4086:	e2 f7       	brpl	.-8      	; 0x4080 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    4088:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    408a:	d7 01       	movw	r26, r14
    408c:	9c 91       	ld	r25, X
    408e:	91 30       	cpi	r25, 0x01	; 1
    4090:	09 f4       	brne	.+2      	; 0x4094 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4092:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4094:	84 2d       	mov	r24, r4
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	f8 01       	movw	r30, r16
    409a:	80 83       	st	Z, r24
    409c:	62 2d       	mov	r22, r2
    409e:	84 2d       	mov	r24, r4
    40a0:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    40a4:	d4 01       	movw	r26, r8
    40a6:	8c 91       	ld	r24, X
    40a8:	e9 81       	ldd	r30, Y+1	; 0x01
    40aa:	fa 81       	ldd	r31, Y+2	; 0x02
    40ac:	e8 0f       	add	r30, r24
    40ae:	f1 1d       	adc	r31, r1
    40b0:	fa 83       	std	Y+2, r31	; 0x02
    40b2:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    40b4:	33 94       	inc	r3
    40b6:	35 10       	cpse	r3, r5
    40b8:	d0 cf       	rjmp	.-96     	; 0x405a <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    40ba:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <__GLCD+0x9>
    40be:	81 11       	cpse	r24, r1
    40c0:	07 c0       	rjmp	.+14     	; 0x40d0 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <__GLCD+0x2>
    40c8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__GLCD+0x1>
    40cc:	0e 94 c3 19 	call	0x3386	; 0x3386 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    40d0:	8c 81       	ldd	r24, Y+4	; 0x04
    40d2:	8f 5f       	subi	r24, 0xFF	; 255
    40d4:	6f 81       	ldd	r22, Y+7	; 0x07
    40d6:	85 0d       	add	r24, r5
    40d8:	0e 94 80 1a 	call	0x3500	; 0x3500 <GLCD_GotoXY>
}
    40dc:	2b 96       	adiw	r28, 0x0b	; 11
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	ff 90       	pop	r15
    40f2:	ef 90       	pop	r14
    40f4:	df 90       	pop	r13
    40f6:	cf 90       	pop	r12
    40f8:	bf 90       	pop	r11
    40fa:	af 90       	pop	r10
    40fc:	9f 90       	pop	r9
    40fe:	8f 90       	pop	r8
    4100:	7f 90       	pop	r7
    4102:	6f 90       	pop	r6
    4104:	5f 90       	pop	r5
    4106:	4f 90       	pop	r4
    4108:	3f 90       	pop	r3
    410a:	2f 90       	pop	r2
    410c:	08 95       	ret

0000410e <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    410e:	ef 92       	push	r14
    4110:	ff 92       	push	r15
    4112:	0f 93       	push	r16
    4114:	1f 93       	push	r17
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	ec 01       	movw	r28, r24
	while(*Text)
    411c:	88 81       	ld	r24, Y
    411e:	88 23       	and	r24, r24
    4120:	19 f1       	breq	.+70     	; 0x4168 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4122:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <__GLCD+0x1>
    4126:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <__GLCD+0x6>
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	29 0f       	add	r18, r25
    412e:	31 1d       	adc	r19, r1
    4130:	20 38       	cpi	r18, 0x80	; 128
    4132:	31 05       	cpc	r19, r1
    4134:	cc f4       	brge	.+50     	; 0x4168 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    4136:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4138:	0f 2e       	mov	r0, r31
    413a:	f7 e7       	ldi	r31, 0x77	; 119
    413c:	ef 2e       	mov	r14, r31
    413e:	f2 e0       	ldi	r31, 0x02	; 2
    4140:	ff 2e       	mov	r15, r31
    4142:	f0 2d       	mov	r31, r0
    4144:	0c e7       	ldi	r16, 0x7C	; 124
    4146:	12 e0       	ldi	r17, 0x02	; 2
    4148:	0a c0       	rjmp	.+20     	; 0x415e <GLCD_PrintString+0x50>
    414a:	f7 01       	movw	r30, r14
    414c:	90 81       	ld	r25, Z
    414e:	f8 01       	movw	r30, r16
    4150:	20 81       	ld	r18, Z
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	29 0f       	add	r18, r25
    4156:	31 1d       	adc	r19, r1
    4158:	20 38       	cpi	r18, 0x80	; 128
    415a:	31 05       	cpc	r19, r1
    415c:	2c f4       	brge	.+10     	; 0x4168 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    415e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    4162:	89 91       	ld	r24, Y+
    4164:	81 11       	cpse	r24, r1
    4166:	f1 cf       	rjmp	.-30     	; 0x414a <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	ff 90       	pop	r15
    4172:	ef 90       	pop	r14
    4174:	08 95       	ret

00004176 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    4182:	2c 97       	sbiw	r28, 0x0c	; 12
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    418e:	61 15       	cp	r22, r1
    4190:	71 05       	cpc	r23, r1
    4192:	81 05       	cpc	r24, r1
    4194:	91 05       	cpc	r25, r1
    4196:	21 f4       	brne	.+8      	; 0x41a0 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    4198:	80 e3       	ldi	r24, 0x30	; 48
    419a:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
    419e:	45 c1       	rjmp	.+650    	; 0x442a <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    41a0:	61 15       	cp	r22, r1
    41a2:	71 05       	cpc	r23, r1
    41a4:	81 05       	cpc	r24, r1
    41a6:	20 e8       	ldi	r18, 0x80	; 128
    41a8:	92 07       	cpc	r25, r18
    41aa:	09 f4       	brne	.+2      	; 0x41ae <GLCD_PrintInteger+0x38>
    41ac:	3e c1       	rjmp	.+636    	; 0x442a <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    41ae:	fe 01       	movw	r30, r28
    41b0:	31 96       	adiw	r30, 0x01	; 1
    41b2:	2c e0       	ldi	r18, 0x0C	; 12
    41b4:	df 01       	movw	r26, r30
    41b6:	1d 92       	st	X+, r1
    41b8:	2a 95       	dec	r18
    41ba:	e9 f7       	brne	.-6      	; 0x41b6 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    41bc:	20 e3       	ldi	r18, 0x30	; 48
    41be:	2b 87       	std	Y+11, r18	; 0x0b
    41c0:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    41c2:	29 87       	std	Y+9, r18	; 0x09
    41c4:	28 87       	std	Y+8, r18	; 0x08
    41c6:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    41c8:	2e 83       	std	Y+6, r18	; 0x06
    41ca:	2d 83       	std	Y+5, r18	; 0x05
    41cc:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    41ce:	2b 83       	std	Y+3, r18	; 0x03
    41d0:	2a 83       	std	Y+2, r18	; 0x02
    41d2:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    41d4:	99 23       	and	r25, r25
    41d6:	5c f4       	brge	.+22     	; 0x41ee <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    41d8:	9b 01       	movw	r18, r22
    41da:	ac 01       	movw	r20, r24
    41dc:	88 27       	eor	r24, r24
    41de:	99 27       	eor	r25, r25
    41e0:	dc 01       	movw	r26, r24
    41e2:	82 1b       	sub	r24, r18
    41e4:	93 0b       	sbc	r25, r19
    41e6:	a4 0b       	sbc	r26, r20
    41e8:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    41ea:	41 e0       	ldi	r20, 0x01	; 1
    41ec:	03 c0       	rjmp	.+6      	; 0x41f4 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    41f2:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    41f4:	81 30       	cpi	r24, 0x01	; 1
    41f6:	3a ec       	ldi	r19, 0xCA	; 202
    41f8:	93 07       	cpc	r25, r19
    41fa:	3a e9       	ldi	r19, 0x9A	; 154
    41fc:	a3 07       	cpc	r26, r19
    41fe:	3b e3       	ldi	r19, 0x3B	; 59
    4200:	b3 07       	cpc	r27, r19
    4202:	94 f0       	brlt	.+36     	; 0x4228 <GLCD_PrintInteger+0xb2>
    4204:	2a 81       	ldd	r18, Y+2	; 0x02
    4206:	2f 5f       	subi	r18, 0xFF	; 255
    4208:	01 c0       	rjmp	.+2      	; 0x420c <GLCD_PrintInteger+0x96>
    420a:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    420c:	9a 5c       	subi	r25, 0xCA	; 202
    420e:	aa 49       	sbci	r26, 0x9A	; 154
    4210:	bb 43       	sbci	r27, 0x3B	; 59
    4212:	32 2f       	mov	r19, r18
    4214:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    4216:	81 30       	cpi	r24, 0x01	; 1
    4218:	5a ec       	ldi	r21, 0xCA	; 202
    421a:	95 07       	cpc	r25, r21
    421c:	5a e9       	ldi	r21, 0x9A	; 154
    421e:	a5 07       	cpc	r26, r21
    4220:	5b e3       	ldi	r21, 0x3B	; 59
    4222:	b5 07       	cpc	r27, r21
    4224:	94 f7       	brge	.-28     	; 0x420a <GLCD_PrintInteger+0x94>
    4226:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4228:	81 15       	cp	r24, r1
    422a:	21 ee       	ldi	r18, 0xE1	; 225
    422c:	92 07       	cpc	r25, r18
    422e:	25 ef       	ldi	r18, 0xF5	; 245
    4230:	a2 07       	cpc	r26, r18
    4232:	25 e0       	ldi	r18, 0x05	; 5
    4234:	b2 07       	cpc	r27, r18
    4236:	94 f0       	brlt	.+36     	; 0x425c <GLCD_PrintInteger+0xe6>
    4238:	2b 81       	ldd	r18, Y+3	; 0x03
    423a:	2f 5f       	subi	r18, 0xFF	; 255
    423c:	01 c0       	rjmp	.+2      	; 0x4240 <GLCD_PrintInteger+0xca>
    423e:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    4240:	91 5e       	subi	r25, 0xE1	; 225
    4242:	a5 4f       	sbci	r26, 0xF5	; 245
    4244:	b5 40       	sbci	r27, 0x05	; 5
    4246:	32 2f       	mov	r19, r18
    4248:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    424a:	81 15       	cp	r24, r1
    424c:	51 ee       	ldi	r21, 0xE1	; 225
    424e:	95 07       	cpc	r25, r21
    4250:	55 ef       	ldi	r21, 0xF5	; 245
    4252:	a5 07       	cpc	r26, r21
    4254:	55 e0       	ldi	r21, 0x05	; 5
    4256:	b5 07       	cpc	r27, r21
    4258:	94 f7       	brge	.-28     	; 0x423e <GLCD_PrintInteger+0xc8>
    425a:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    425c:	80 38       	cpi	r24, 0x80	; 128
    425e:	26 e9       	ldi	r18, 0x96	; 150
    4260:	92 07       	cpc	r25, r18
    4262:	28 e9       	ldi	r18, 0x98	; 152
    4264:	a2 07       	cpc	r26, r18
    4266:	b1 05       	cpc	r27, r1
    4268:	94 f0       	brlt	.+36     	; 0x428e <GLCD_PrintInteger+0x118>
    426a:	2c 81       	ldd	r18, Y+4	; 0x04
    426c:	2f 5f       	subi	r18, 0xFF	; 255
    426e:	01 c0       	rjmp	.+2      	; 0x4272 <GLCD_PrintInteger+0xfc>
    4270:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    4272:	80 58       	subi	r24, 0x80	; 128
    4274:	96 49       	sbci	r25, 0x96	; 150
    4276:	a8 49       	sbci	r26, 0x98	; 152
    4278:	b1 09       	sbc	r27, r1
    427a:	32 2f       	mov	r19, r18
    427c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    427e:	80 38       	cpi	r24, 0x80	; 128
    4280:	56 e9       	ldi	r21, 0x96	; 150
    4282:	95 07       	cpc	r25, r21
    4284:	58 e9       	ldi	r21, 0x98	; 152
    4286:	a5 07       	cpc	r26, r21
    4288:	b1 05       	cpc	r27, r1
    428a:	94 f7       	brge	.-28     	; 0x4270 <GLCD_PrintInteger+0xfa>
    428c:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    428e:	80 34       	cpi	r24, 0x40	; 64
    4290:	22 e4       	ldi	r18, 0x42	; 66
    4292:	92 07       	cpc	r25, r18
    4294:	2f e0       	ldi	r18, 0x0F	; 15
    4296:	a2 07       	cpc	r26, r18
    4298:	b1 05       	cpc	r27, r1
    429a:	94 f0       	brlt	.+36     	; 0x42c0 <GLCD_PrintInteger+0x14a>
    429c:	2d 81       	ldd	r18, Y+5	; 0x05
    429e:	2f 5f       	subi	r18, 0xFF	; 255
    42a0:	01 c0       	rjmp	.+2      	; 0x42a4 <GLCD_PrintInteger+0x12e>
    42a2:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    42a4:	80 54       	subi	r24, 0x40	; 64
    42a6:	92 44       	sbci	r25, 0x42	; 66
    42a8:	af 40       	sbci	r26, 0x0F	; 15
    42aa:	b1 09       	sbc	r27, r1
    42ac:	32 2f       	mov	r19, r18
    42ae:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    42b0:	80 34       	cpi	r24, 0x40	; 64
    42b2:	52 e4       	ldi	r21, 0x42	; 66
    42b4:	95 07       	cpc	r25, r21
    42b6:	5f e0       	ldi	r21, 0x0F	; 15
    42b8:	a5 07       	cpc	r26, r21
    42ba:	b1 05       	cpc	r27, r1
    42bc:	94 f7       	brge	.-28     	; 0x42a2 <GLCD_PrintInteger+0x12c>
    42be:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    42c0:	80 3a       	cpi	r24, 0xA0	; 160
    42c2:	26 e8       	ldi	r18, 0x86	; 134
    42c4:	92 07       	cpc	r25, r18
    42c6:	21 e0       	ldi	r18, 0x01	; 1
    42c8:	a2 07       	cpc	r26, r18
    42ca:	b1 05       	cpc	r27, r1
    42cc:	94 f0       	brlt	.+36     	; 0x42f2 <GLCD_PrintInteger+0x17c>
    42ce:	2e 81       	ldd	r18, Y+6	; 0x06
    42d0:	2f 5f       	subi	r18, 0xFF	; 255
    42d2:	01 c0       	rjmp	.+2      	; 0x42d6 <GLCD_PrintInteger+0x160>
    42d4:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    42d6:	80 5a       	subi	r24, 0xA0	; 160
    42d8:	96 48       	sbci	r25, 0x86	; 134
    42da:	a1 40       	sbci	r26, 0x01	; 1
    42dc:	b1 09       	sbc	r27, r1
    42de:	32 2f       	mov	r19, r18
    42e0:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    42e2:	80 3a       	cpi	r24, 0xA0	; 160
    42e4:	56 e8       	ldi	r21, 0x86	; 134
    42e6:	95 07       	cpc	r25, r21
    42e8:	51 e0       	ldi	r21, 0x01	; 1
    42ea:	a5 07       	cpc	r26, r21
    42ec:	b1 05       	cpc	r27, r1
    42ee:	94 f7       	brge	.-28     	; 0x42d4 <GLCD_PrintInteger+0x15e>
    42f0:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    42f2:	80 31       	cpi	r24, 0x10	; 16
    42f4:	27 e2       	ldi	r18, 0x27	; 39
    42f6:	92 07       	cpc	r25, r18
    42f8:	a1 05       	cpc	r26, r1
    42fa:	b1 05       	cpc	r27, r1
    42fc:	8c f0       	brlt	.+34     	; 0x4320 <GLCD_PrintInteger+0x1aa>
    42fe:	2f 81       	ldd	r18, Y+7	; 0x07
    4300:	2f 5f       	subi	r18, 0xFF	; 255
    4302:	01 c0       	rjmp	.+2      	; 0x4306 <GLCD_PrintInteger+0x190>
    4304:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    4306:	80 51       	subi	r24, 0x10	; 16
    4308:	97 42       	sbci	r25, 0x27	; 39
    430a:	a1 09       	sbc	r26, r1
    430c:	b1 09       	sbc	r27, r1
    430e:	32 2f       	mov	r19, r18
    4310:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    4312:	80 31       	cpi	r24, 0x10	; 16
    4314:	57 e2       	ldi	r21, 0x27	; 39
    4316:	95 07       	cpc	r25, r21
    4318:	a1 05       	cpc	r26, r1
    431a:	b1 05       	cpc	r27, r1
    431c:	9c f7       	brge	.-26     	; 0x4304 <GLCD_PrintInteger+0x18e>
    431e:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4320:	88 3e       	cpi	r24, 0xE8	; 232
    4322:	23 e0       	ldi	r18, 0x03	; 3
    4324:	92 07       	cpc	r25, r18
    4326:	a1 05       	cpc	r26, r1
    4328:	b1 05       	cpc	r27, r1
    432a:	8c f0       	brlt	.+34     	; 0x434e <GLCD_PrintInteger+0x1d8>
    432c:	28 85       	ldd	r18, Y+8	; 0x08
    432e:	2f 5f       	subi	r18, 0xFF	; 255
    4330:	01 c0       	rjmp	.+2      	; 0x4334 <GLCD_PrintInteger+0x1be>
    4332:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    4334:	88 5e       	subi	r24, 0xE8	; 232
    4336:	93 40       	sbci	r25, 0x03	; 3
    4338:	a1 09       	sbc	r26, r1
    433a:	b1 09       	sbc	r27, r1
    433c:	32 2f       	mov	r19, r18
    433e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4340:	88 3e       	cpi	r24, 0xE8	; 232
    4342:	53 e0       	ldi	r21, 0x03	; 3
    4344:	95 07       	cpc	r25, r21
    4346:	a1 05       	cpc	r26, r1
    4348:	b1 05       	cpc	r27, r1
    434a:	9c f7       	brge	.-26     	; 0x4332 <GLCD_PrintInteger+0x1bc>
    434c:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    434e:	84 36       	cpi	r24, 0x64	; 100
    4350:	91 05       	cpc	r25, r1
    4352:	a1 05       	cpc	r26, r1
    4354:	b1 05       	cpc	r27, r1
    4356:	84 f0       	brlt	.+32     	; 0x4378 <GLCD_PrintInteger+0x202>
    4358:	29 85       	ldd	r18, Y+9	; 0x09
    435a:	2f 5f       	subi	r18, 0xFF	; 255
    435c:	01 c0       	rjmp	.+2      	; 0x4360 <GLCD_PrintInteger+0x1ea>
    435e:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    4360:	84 56       	subi	r24, 0x64	; 100
    4362:	91 09       	sbc	r25, r1
    4364:	a1 09       	sbc	r26, r1
    4366:	b1 09       	sbc	r27, r1
    4368:	32 2f       	mov	r19, r18
    436a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    436c:	84 36       	cpi	r24, 0x64	; 100
    436e:	91 05       	cpc	r25, r1
    4370:	a1 05       	cpc	r26, r1
    4372:	b1 05       	cpc	r27, r1
    4374:	a4 f7       	brge	.-24     	; 0x435e <GLCD_PrintInteger+0x1e8>
    4376:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    4378:	8a 30       	cpi	r24, 0x0A	; 10
    437a:	91 05       	cpc	r25, r1
    437c:	a1 05       	cpc	r26, r1
    437e:	b1 05       	cpc	r27, r1
    4380:	7c f0       	brlt	.+30     	; 0x43a0 <GLCD_PrintInteger+0x22a>
    4382:	2a 85       	ldd	r18, Y+10	; 0x0a
    4384:	2f 5f       	subi	r18, 0xFF	; 255
    4386:	01 c0       	rjmp	.+2      	; 0x438a <GLCD_PrintInteger+0x214>
    4388:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    438a:	0a 97       	sbiw	r24, 0x0a	; 10
    438c:	a1 09       	sbc	r26, r1
    438e:	b1 09       	sbc	r27, r1
    4390:	32 2f       	mov	r19, r18
    4392:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    4394:	8a 30       	cpi	r24, 0x0A	; 10
    4396:	91 05       	cpc	r25, r1
    4398:	a1 05       	cpc	r26, r1
    439a:	b1 05       	cpc	r27, r1
    439c:	ac f7       	brge	.-22     	; 0x4388 <GLCD_PrintInteger+0x212>
    439e:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    43a0:	18 16       	cp	r1, r24
    43a2:	19 06       	cpc	r1, r25
    43a4:	1a 06       	cpc	r1, r26
    43a6:	1b 06       	cpc	r1, r27
    43a8:	5c f4       	brge	.+22     	; 0x43c0 <GLCD_PrintInteger+0x24a>
    43aa:	5b 85       	ldd	r21, Y+11	; 0x0b
    43ac:	8c 01       	movw	r16, r24
    43ae:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    43b0:	01 50       	subi	r16, 0x01	; 1
    43b2:	11 09       	sbc	r17, r1
    43b4:	21 09       	sbc	r18, r1
    43b6:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    43b8:	d9 f7       	brne	.-10     	; 0x43b0 <GLCD_PrintInteger+0x23a>
    43ba:	65 2f       	mov	r22, r21
    43bc:	68 0f       	add	r22, r24
    43be:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	80 33       	cpi	r24, 0x30	; 48
    43c4:	61 f4       	brne	.+24     	; 0x43de <GLCD_PrintInteger+0x268>
    43c6:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    43c8:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    43ca:	e1 e0       	ldi	r30, 0x01	; 1
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	ec 0f       	add	r30, r28
    43d0:	fd 1f       	adc	r31, r29
    43d2:	e8 0f       	add	r30, r24
    43d4:	f1 1d       	adc	r31, r1
    43d6:	90 81       	ld	r25, Z
    43d8:	90 33       	cpi	r25, 0x30	; 48
    43da:	b1 f3       	breq	.-20     	; 0x43c8 <GLCD_PrintInteger+0x252>
    43dc:	01 c0       	rjmp	.+2      	; 0x43e0 <GLCD_PrintInteger+0x26a>
    43de:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    43e0:	44 23       	and	r20, r20
    43e2:	31 f0       	breq	.+12     	; 0x43f0 <GLCD_PrintInteger+0x27a>
	{
		i--;
    43e4:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    43e6:	fe 01       	movw	r30, r28
    43e8:	e8 0f       	add	r30, r24
    43ea:	f1 1d       	adc	r31, r1
    43ec:	9d e2       	ldi	r25, 0x2D	; 45
    43ee:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    43f0:	4a e0       	ldi	r20, 0x0A	; 10
    43f2:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    43f4:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	e1 e0       	ldi	r30, 0x01	; 1
    43fa:	f0 e0       	ldi	r31, 0x00	; 0
    43fc:	ec 0f       	add	r30, r28
    43fe:	fd 1f       	adc	r31, r29
    4400:	e2 0f       	add	r30, r18
    4402:	f1 1d       	adc	r31, r1
    4404:	df 01       	movw	r26, r30
    4406:	a8 0f       	add	r26, r24
    4408:	b9 1f       	adc	r27, r25
    440a:	3c 91       	ld	r19, X
    440c:	30 83       	st	Z, r19
		i++;
    440e:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    4410:	42 17       	cp	r20, r18
    4412:	90 f7       	brcc	.-28     	; 0x43f8 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    4414:	e1 e0       	ldi	r30, 0x01	; 1
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	ec 0f       	add	r30, r28
    441a:	fd 1f       	adc	r31, r29
    441c:	e2 0f       	add	r30, r18
    441e:	f1 1d       	adc	r31, r1
    4420:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    4422:	ce 01       	movw	r24, r28
    4424:	01 96       	adiw	r24, 0x01	; 1
    4426:	0e 94 87 20 	call	0x410e	; 0x410e <GLCD_PrintString>
	}
}
    442a:	2c 96       	adiw	r28, 0x0c	; 12
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	f8 94       	cli
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	cd bf       	out	0x3d, r28	; 61
    4436:	df 91       	pop	r29
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	08 95       	ret

00004440 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    4440:	8f 92       	push	r8
    4442:	9f 92       	push	r9
    4444:	af 92       	push	r10
    4446:	bf 92       	push	r11
    4448:	cf 92       	push	r12
    444a:	df 92       	push	r13
    444c:	ef 92       	push	r14
    444e:	ff 92       	push	r15
    4450:	6b 01       	movw	r12, r22
    4452:	7c 01       	movw	r14, r24
    4454:	49 01       	movw	r8, r18
    4456:	5a 01       	movw	r10, r20
	if (Value == 0)
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	a9 01       	movw	r20, r18
    445e:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    4462:	81 11       	cpse	r24, r1
    4464:	0a c0       	rjmp	.+20     	; 0x447a <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    4466:	80 e3       	ldi	r24, 0x30	; 48
    4468:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    446c:	8e e2       	ldi	r24, 0x2E	; 46
    446e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    4472:	80 e3       	ldi	r24, 0x30	; 48
    4474:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
    4478:	4a c0       	rjmp	.+148    	; 0x450e <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	40 e0       	ldi	r20, 0x00	; 0
    4480:	5f ec       	ldi	r21, 0xCF	; 207
    4482:	c7 01       	movw	r24, r14
    4484:	b6 01       	movw	r22, r12
    4486:	0e 94 80 24 	call	0x4900	; 0x4900 <__gesf2>
    448a:	88 23       	and	r24, r24
    448c:	0c f4       	brge	.+2      	; 0x4490 <GLCD_PrintDouble+0x50>
    448e:	3f c0       	rjmp	.+126    	; 0x450e <GLCD_PrintDouble+0xce>
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	5f e4       	ldi	r21, 0x4F	; 79
    4498:	c7 01       	movw	r24, r14
    449a:	b6 01       	movw	r22, r12
    449c:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    44a0:	88 23       	and	r24, r24
    44a2:	ac f5       	brge	.+106    	; 0x450e <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	a9 01       	movw	r20, r18
    44aa:	c7 01       	movw	r24, r14
    44ac:	b6 01       	movw	r22, r12
    44ae:	0e 94 21 23 	call	0x4642	; 0x4642 <__cmpsf2>
    44b2:	88 23       	and	r24, r24
    44b4:	3c f4       	brge	.+14     	; 0x44c4 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    44b6:	f7 fa       	bst	r15, 7
    44b8:	f0 94       	com	r15
    44ba:	f7 f8       	bld	r15, 7
    44bc:	f0 94       	com	r15
			GLCD_PrintChar('-');
    44be:	8d e2       	ldi	r24, 0x2D	; 45
    44c0:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    44c4:	c7 01       	movw	r24, r14
    44c6:	b6 01       	movw	r22, r12
    44c8:	0e 94 98 23 	call	0x4730	; 0x4730 <__fixsfsi>
    44cc:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    44d0:	8e e2       	ldi	r24, 0x2E	; 46
    44d2:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    44d6:	c7 01       	movw	r24, r14
    44d8:	b6 01       	movw	r22, r12
    44da:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    44de:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    44e2:	9b 01       	movw	r18, r22
    44e4:	ac 01       	movw	r20, r24
    44e6:	c7 01       	movw	r24, r14
    44e8:	b6 01       	movw	r22, r12
    44ea:	0e 94 b4 22 	call	0x4568	; 0x4568 <__subsf3>
    44ee:	6b 01       	movw	r12, r22
    44f0:	7c 01       	movw	r14, r24
    44f2:	c5 01       	movw	r24, r10
    44f4:	b4 01       	movw	r22, r8
    44f6:	0e 94 ce 23 	call	0x479c	; 0x479c <__floatunsisf>
    44fa:	9b 01       	movw	r18, r22
    44fc:	ac 01       	movw	r20, r24
    44fe:	c7 01       	movw	r24, r14
    4500:	b6 01       	movw	r22, r12
    4502:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsf3>
    4506:	0e 94 98 23 	call	0x4730	; 0x4730 <__fixsfsi>
    450a:	0e 94 bb 20 	call	0x4176	; 0x4176 <GLCD_PrintInteger>
	}
}
    450e:	ff 90       	pop	r15
    4510:	ef 90       	pop	r14
    4512:	df 90       	pop	r13
    4514:	cf 90       	pop	r12
    4516:	bf 90       	pop	r11
    4518:	af 90       	pop	r10
    451a:	9f 90       	pop	r9
    451c:	8f 90       	pop	r8
    451e:	08 95       	ret

00004520 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    4520:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    4522:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    4524:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    4526:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    4528:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    452a:	8c e0       	ldi	r24, 0x0C	; 12
    452c:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    452e:	84 e0       	ldi	r24, 0x04	; 4
    4530:	86 bf       	out	0x36, r24	; 54
    4532:	08 95       	ret

00004534 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    4534:	81 b1       	in	r24, 0x01	; 1
}
    4536:	88 7f       	andi	r24, 0xF8	; 248
    4538:	08 95       	ret

0000453a <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    453a:	84 ea       	ldi	r24, 0xA4	; 164
    453c:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    453e:	06 b6       	in	r0, 0x36	; 54
    4540:	07 fe       	sbrs	r0, 7
    4542:	fd cf       	rjmp	.-6      	; 0x453e <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    4544:	0e 94 9a 22 	call	0x4534	; 0x4534 <TWI_Status>
}
    4548:	08 95       	ret

0000454a <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    454a:	85 ed       	ldi	r24, 0xD5	; 213
    454c:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    454e:	06 b6       	in	r0, 0x36	; 54
    4550:	04 fc       	sbrc	r0, 4
    4552:	fd cf       	rjmp	.-6      	; 0x454e <TWI_EndTransmission+0x4>
}
    4554:	08 95       	ret

00004556 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    4556:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    4558:	84 e8       	ldi	r24, 0x84	; 132
    455a:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    455c:	06 b6       	in	r0, 0x36	; 54
    455e:	07 fe       	sbrs	r0, 7
    4560:	fd cf       	rjmp	.-6      	; 0x455c <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    4562:	0e 94 9a 22 	call	0x4534	; 0x4534 <TWI_Status>
}
    4566:	08 95       	ret

00004568 <__subsf3>:
    4568:	50 58       	subi	r21, 0x80	; 128

0000456a <__addsf3>:
    456a:	bb 27       	eor	r27, r27
    456c:	aa 27       	eor	r26, r26
    456e:	0e 94 cc 22 	call	0x4598	; 0x4598 <__addsf3x>
    4572:	0c 94 46 24 	jmp	0x488c	; 0x488c <__fp_round>
    4576:	0e 94 38 24 	call	0x4870	; 0x4870 <__fp_pscA>
    457a:	38 f0       	brcs	.+14     	; 0x458a <__addsf3+0x20>
    457c:	0e 94 3f 24 	call	0x487e	; 0x487e <__fp_pscB>
    4580:	20 f0       	brcs	.+8      	; 0x458a <__addsf3+0x20>
    4582:	39 f4       	brne	.+14     	; 0x4592 <__addsf3+0x28>
    4584:	9f 3f       	cpi	r25, 0xFF	; 255
    4586:	19 f4       	brne	.+6      	; 0x458e <__addsf3+0x24>
    4588:	26 f4       	brtc	.+8      	; 0x4592 <__addsf3+0x28>
    458a:	0c 94 35 24 	jmp	0x486a	; 0x486a <__fp_nan>
    458e:	0e f4       	brtc	.+2      	; 0x4592 <__addsf3+0x28>
    4590:	e0 95       	com	r30
    4592:	e7 fb       	bst	r30, 7
    4594:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__fp_inf>

00004598 <__addsf3x>:
    4598:	e9 2f       	mov	r30, r25
    459a:	0e 94 57 24 	call	0x48ae	; 0x48ae <__fp_split3>
    459e:	58 f3       	brcs	.-42     	; 0x4576 <__addsf3+0xc>
    45a0:	ba 17       	cp	r27, r26
    45a2:	62 07       	cpc	r22, r18
    45a4:	73 07       	cpc	r23, r19
    45a6:	84 07       	cpc	r24, r20
    45a8:	95 07       	cpc	r25, r21
    45aa:	20 f0       	brcs	.+8      	; 0x45b4 <__addsf3x+0x1c>
    45ac:	79 f4       	brne	.+30     	; 0x45cc <__addsf3x+0x34>
    45ae:	a6 f5       	brtc	.+104    	; 0x4618 <__addsf3x+0x80>
    45b0:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__fp_zero>
    45b4:	0e f4       	brtc	.+2      	; 0x45b8 <__addsf3x+0x20>
    45b6:	e0 95       	com	r30
    45b8:	0b 2e       	mov	r0, r27
    45ba:	ba 2f       	mov	r27, r26
    45bc:	a0 2d       	mov	r26, r0
    45be:	0b 01       	movw	r0, r22
    45c0:	b9 01       	movw	r22, r18
    45c2:	90 01       	movw	r18, r0
    45c4:	0c 01       	movw	r0, r24
    45c6:	ca 01       	movw	r24, r20
    45c8:	a0 01       	movw	r20, r0
    45ca:	11 24       	eor	r1, r1
    45cc:	ff 27       	eor	r31, r31
    45ce:	59 1b       	sub	r21, r25
    45d0:	99 f0       	breq	.+38     	; 0x45f8 <__addsf3x+0x60>
    45d2:	59 3f       	cpi	r21, 0xF9	; 249
    45d4:	50 f4       	brcc	.+20     	; 0x45ea <__addsf3x+0x52>
    45d6:	50 3e       	cpi	r21, 0xE0	; 224
    45d8:	68 f1       	brcs	.+90     	; 0x4634 <__addsf3x+0x9c>
    45da:	1a 16       	cp	r1, r26
    45dc:	f0 40       	sbci	r31, 0x00	; 0
    45de:	a2 2f       	mov	r26, r18
    45e0:	23 2f       	mov	r18, r19
    45e2:	34 2f       	mov	r19, r20
    45e4:	44 27       	eor	r20, r20
    45e6:	58 5f       	subi	r21, 0xF8	; 248
    45e8:	f3 cf       	rjmp	.-26     	; 0x45d0 <__addsf3x+0x38>
    45ea:	46 95       	lsr	r20
    45ec:	37 95       	ror	r19
    45ee:	27 95       	ror	r18
    45f0:	a7 95       	ror	r26
    45f2:	f0 40       	sbci	r31, 0x00	; 0
    45f4:	53 95       	inc	r21
    45f6:	c9 f7       	brne	.-14     	; 0x45ea <__addsf3x+0x52>
    45f8:	7e f4       	brtc	.+30     	; 0x4618 <__addsf3x+0x80>
    45fa:	1f 16       	cp	r1, r31
    45fc:	ba 0b       	sbc	r27, r26
    45fe:	62 0b       	sbc	r22, r18
    4600:	73 0b       	sbc	r23, r19
    4602:	84 0b       	sbc	r24, r20
    4604:	ba f0       	brmi	.+46     	; 0x4634 <__addsf3x+0x9c>
    4606:	91 50       	subi	r25, 0x01	; 1
    4608:	a1 f0       	breq	.+40     	; 0x4632 <__addsf3x+0x9a>
    460a:	ff 0f       	add	r31, r31
    460c:	bb 1f       	adc	r27, r27
    460e:	66 1f       	adc	r22, r22
    4610:	77 1f       	adc	r23, r23
    4612:	88 1f       	adc	r24, r24
    4614:	c2 f7       	brpl	.-16     	; 0x4606 <__addsf3x+0x6e>
    4616:	0e c0       	rjmp	.+28     	; 0x4634 <__addsf3x+0x9c>
    4618:	ba 0f       	add	r27, r26
    461a:	62 1f       	adc	r22, r18
    461c:	73 1f       	adc	r23, r19
    461e:	84 1f       	adc	r24, r20
    4620:	48 f4       	brcc	.+18     	; 0x4634 <__addsf3x+0x9c>
    4622:	87 95       	ror	r24
    4624:	77 95       	ror	r23
    4626:	67 95       	ror	r22
    4628:	b7 95       	ror	r27
    462a:	f7 95       	ror	r31
    462c:	9e 3f       	cpi	r25, 0xFE	; 254
    462e:	08 f0       	brcs	.+2      	; 0x4632 <__addsf3x+0x9a>
    4630:	b0 cf       	rjmp	.-160    	; 0x4592 <__addsf3+0x28>
    4632:	93 95       	inc	r25
    4634:	88 0f       	add	r24, r24
    4636:	08 f0       	brcs	.+2      	; 0x463a <__addsf3x+0xa2>
    4638:	99 27       	eor	r25, r25
    463a:	ee 0f       	add	r30, r30
    463c:	97 95       	ror	r25
    463e:	87 95       	ror	r24
    4640:	08 95       	ret

00004642 <__cmpsf2>:
    4642:	0e 94 0b 24 	call	0x4816	; 0x4816 <__fp_cmp>
    4646:	08 f4       	brcc	.+2      	; 0x464a <__cmpsf2+0x8>
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	08 95       	ret

0000464c <__divsf3>:
    464c:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3x>
    4650:	0c 94 46 24 	jmp	0x488c	; 0x488c <__fp_round>
    4654:	0e 94 3f 24 	call	0x487e	; 0x487e <__fp_pscB>
    4658:	58 f0       	brcs	.+22     	; 0x4670 <__divsf3+0x24>
    465a:	0e 94 38 24 	call	0x4870	; 0x4870 <__fp_pscA>
    465e:	40 f0       	brcs	.+16     	; 0x4670 <__divsf3+0x24>
    4660:	29 f4       	brne	.+10     	; 0x466c <__divsf3+0x20>
    4662:	5f 3f       	cpi	r21, 0xFF	; 255
    4664:	29 f0       	breq	.+10     	; 0x4670 <__divsf3+0x24>
    4666:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__fp_inf>
    466a:	51 11       	cpse	r21, r1
    466c:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__fp_szero>
    4670:	0c 94 35 24 	jmp	0x486a	; 0x486a <__fp_nan>

00004674 <__divsf3x>:
    4674:	0e 94 57 24 	call	0x48ae	; 0x48ae <__fp_split3>
    4678:	68 f3       	brcs	.-38     	; 0x4654 <__divsf3+0x8>

0000467a <__divsf3_pse>:
    467a:	99 23       	and	r25, r25
    467c:	b1 f3       	breq	.-20     	; 0x466a <__divsf3+0x1e>
    467e:	55 23       	and	r21, r21
    4680:	91 f3       	breq	.-28     	; 0x4666 <__divsf3+0x1a>
    4682:	95 1b       	sub	r25, r21
    4684:	55 0b       	sbc	r21, r21
    4686:	bb 27       	eor	r27, r27
    4688:	aa 27       	eor	r26, r26
    468a:	62 17       	cp	r22, r18
    468c:	73 07       	cpc	r23, r19
    468e:	84 07       	cpc	r24, r20
    4690:	38 f0       	brcs	.+14     	; 0x46a0 <__divsf3_pse+0x26>
    4692:	9f 5f       	subi	r25, 0xFF	; 255
    4694:	5f 4f       	sbci	r21, 0xFF	; 255
    4696:	22 0f       	add	r18, r18
    4698:	33 1f       	adc	r19, r19
    469a:	44 1f       	adc	r20, r20
    469c:	aa 1f       	adc	r26, r26
    469e:	a9 f3       	breq	.-22     	; 0x468a <__divsf3_pse+0x10>
    46a0:	35 d0       	rcall	.+106    	; 0x470c <__divsf3_pse+0x92>
    46a2:	0e 2e       	mov	r0, r30
    46a4:	3a f0       	brmi	.+14     	; 0x46b4 <__divsf3_pse+0x3a>
    46a6:	e0 e8       	ldi	r30, 0x80	; 128
    46a8:	32 d0       	rcall	.+100    	; 0x470e <__divsf3_pse+0x94>
    46aa:	91 50       	subi	r25, 0x01	; 1
    46ac:	50 40       	sbci	r21, 0x00	; 0
    46ae:	e6 95       	lsr	r30
    46b0:	00 1c       	adc	r0, r0
    46b2:	ca f7       	brpl	.-14     	; 0x46a6 <__divsf3_pse+0x2c>
    46b4:	2b d0       	rcall	.+86     	; 0x470c <__divsf3_pse+0x92>
    46b6:	fe 2f       	mov	r31, r30
    46b8:	29 d0       	rcall	.+82     	; 0x470c <__divsf3_pse+0x92>
    46ba:	66 0f       	add	r22, r22
    46bc:	77 1f       	adc	r23, r23
    46be:	88 1f       	adc	r24, r24
    46c0:	bb 1f       	adc	r27, r27
    46c2:	26 17       	cp	r18, r22
    46c4:	37 07       	cpc	r19, r23
    46c6:	48 07       	cpc	r20, r24
    46c8:	ab 07       	cpc	r26, r27
    46ca:	b0 e8       	ldi	r27, 0x80	; 128
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <__divsf3_pse+0x56>
    46ce:	bb 0b       	sbc	r27, r27
    46d0:	80 2d       	mov	r24, r0
    46d2:	bf 01       	movw	r22, r30
    46d4:	ff 27       	eor	r31, r31
    46d6:	93 58       	subi	r25, 0x83	; 131
    46d8:	5f 4f       	sbci	r21, 0xFF	; 255
    46da:	3a f0       	brmi	.+14     	; 0x46ea <__divsf3_pse+0x70>
    46dc:	9e 3f       	cpi	r25, 0xFE	; 254
    46de:	51 05       	cpc	r21, r1
    46e0:	78 f0       	brcs	.+30     	; 0x4700 <__divsf3_pse+0x86>
    46e2:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__fp_inf>
    46e6:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__fp_szero>
    46ea:	5f 3f       	cpi	r21, 0xFF	; 255
    46ec:	e4 f3       	brlt	.-8      	; 0x46e6 <__divsf3_pse+0x6c>
    46ee:	98 3e       	cpi	r25, 0xE8	; 232
    46f0:	d4 f3       	brlt	.-12     	; 0x46e6 <__divsf3_pse+0x6c>
    46f2:	86 95       	lsr	r24
    46f4:	77 95       	ror	r23
    46f6:	67 95       	ror	r22
    46f8:	b7 95       	ror	r27
    46fa:	f7 95       	ror	r31
    46fc:	9f 5f       	subi	r25, 0xFF	; 255
    46fe:	c9 f7       	brne	.-14     	; 0x46f2 <__divsf3_pse+0x78>
    4700:	88 0f       	add	r24, r24
    4702:	91 1d       	adc	r25, r1
    4704:	96 95       	lsr	r25
    4706:	87 95       	ror	r24
    4708:	97 f9       	bld	r25, 7
    470a:	08 95       	ret
    470c:	e1 e0       	ldi	r30, 0x01	; 1
    470e:	66 0f       	add	r22, r22
    4710:	77 1f       	adc	r23, r23
    4712:	88 1f       	adc	r24, r24
    4714:	bb 1f       	adc	r27, r27
    4716:	62 17       	cp	r22, r18
    4718:	73 07       	cpc	r23, r19
    471a:	84 07       	cpc	r24, r20
    471c:	ba 07       	cpc	r27, r26
    471e:	20 f0       	brcs	.+8      	; 0x4728 <__divsf3_pse+0xae>
    4720:	62 1b       	sub	r22, r18
    4722:	73 0b       	sbc	r23, r19
    4724:	84 0b       	sbc	r24, r20
    4726:	ba 0b       	sbc	r27, r26
    4728:	ee 1f       	adc	r30, r30
    472a:	88 f7       	brcc	.-30     	; 0x470e <__divsf3_pse+0x94>
    472c:	e0 95       	com	r30
    472e:	08 95       	ret

00004730 <__fixsfsi>:
    4730:	0e 94 9f 23 	call	0x473e	; 0x473e <__fixunssfsi>
    4734:	68 94       	set
    4736:	b1 11       	cpse	r27, r1
    4738:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__fp_szero>
    473c:	08 95       	ret

0000473e <__fixunssfsi>:
    473e:	0e 94 5f 24 	call	0x48be	; 0x48be <__fp_splitA>
    4742:	88 f0       	brcs	.+34     	; 0x4766 <__fixunssfsi+0x28>
    4744:	9f 57       	subi	r25, 0x7F	; 127
    4746:	98 f0       	brcs	.+38     	; 0x476e <__fixunssfsi+0x30>
    4748:	b9 2f       	mov	r27, r25
    474a:	99 27       	eor	r25, r25
    474c:	b7 51       	subi	r27, 0x17	; 23
    474e:	b0 f0       	brcs	.+44     	; 0x477c <__fixunssfsi+0x3e>
    4750:	e1 f0       	breq	.+56     	; 0x478a <__fixunssfsi+0x4c>
    4752:	66 0f       	add	r22, r22
    4754:	77 1f       	adc	r23, r23
    4756:	88 1f       	adc	r24, r24
    4758:	99 1f       	adc	r25, r25
    475a:	1a f0       	brmi	.+6      	; 0x4762 <__fixunssfsi+0x24>
    475c:	ba 95       	dec	r27
    475e:	c9 f7       	brne	.-14     	; 0x4752 <__fixunssfsi+0x14>
    4760:	14 c0       	rjmp	.+40     	; 0x478a <__fixunssfsi+0x4c>
    4762:	b1 30       	cpi	r27, 0x01	; 1
    4764:	91 f0       	breq	.+36     	; 0x478a <__fixunssfsi+0x4c>
    4766:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__fp_zero>
    476a:	b1 e0       	ldi	r27, 0x01	; 1
    476c:	08 95       	ret
    476e:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__fp_zero>
    4772:	67 2f       	mov	r22, r23
    4774:	78 2f       	mov	r23, r24
    4776:	88 27       	eor	r24, r24
    4778:	b8 5f       	subi	r27, 0xF8	; 248
    477a:	39 f0       	breq	.+14     	; 0x478a <__fixunssfsi+0x4c>
    477c:	b9 3f       	cpi	r27, 0xF9	; 249
    477e:	cc f3       	brlt	.-14     	; 0x4772 <__fixunssfsi+0x34>
    4780:	86 95       	lsr	r24
    4782:	77 95       	ror	r23
    4784:	67 95       	ror	r22
    4786:	b3 95       	inc	r27
    4788:	d9 f7       	brne	.-10     	; 0x4780 <__fixunssfsi+0x42>
    478a:	3e f4       	brtc	.+14     	; 0x479a <__fixunssfsi+0x5c>
    478c:	90 95       	com	r25
    478e:	80 95       	com	r24
    4790:	70 95       	com	r23
    4792:	61 95       	neg	r22
    4794:	7f 4f       	sbci	r23, 0xFF	; 255
    4796:	8f 4f       	sbci	r24, 0xFF	; 255
    4798:	9f 4f       	sbci	r25, 0xFF	; 255
    479a:	08 95       	ret

0000479c <__floatunsisf>:
    479c:	e8 94       	clt
    479e:	09 c0       	rjmp	.+18     	; 0x47b2 <__floatsisf+0x12>

000047a0 <__floatsisf>:
    47a0:	97 fb       	bst	r25, 7
    47a2:	3e f4       	brtc	.+14     	; 0x47b2 <__floatsisf+0x12>
    47a4:	90 95       	com	r25
    47a6:	80 95       	com	r24
    47a8:	70 95       	com	r23
    47aa:	61 95       	neg	r22
    47ac:	7f 4f       	sbci	r23, 0xFF	; 255
    47ae:	8f 4f       	sbci	r24, 0xFF	; 255
    47b0:	9f 4f       	sbci	r25, 0xFF	; 255
    47b2:	99 23       	and	r25, r25
    47b4:	a9 f0       	breq	.+42     	; 0x47e0 <__floatsisf+0x40>
    47b6:	f9 2f       	mov	r31, r25
    47b8:	96 e9       	ldi	r25, 0x96	; 150
    47ba:	bb 27       	eor	r27, r27
    47bc:	93 95       	inc	r25
    47be:	f6 95       	lsr	r31
    47c0:	87 95       	ror	r24
    47c2:	77 95       	ror	r23
    47c4:	67 95       	ror	r22
    47c6:	b7 95       	ror	r27
    47c8:	f1 11       	cpse	r31, r1
    47ca:	f8 cf       	rjmp	.-16     	; 0x47bc <__floatsisf+0x1c>
    47cc:	fa f4       	brpl	.+62     	; 0x480c <__floatsisf+0x6c>
    47ce:	bb 0f       	add	r27, r27
    47d0:	11 f4       	brne	.+4      	; 0x47d6 <__floatsisf+0x36>
    47d2:	60 ff       	sbrs	r22, 0
    47d4:	1b c0       	rjmp	.+54     	; 0x480c <__floatsisf+0x6c>
    47d6:	6f 5f       	subi	r22, 0xFF	; 255
    47d8:	7f 4f       	sbci	r23, 0xFF	; 255
    47da:	8f 4f       	sbci	r24, 0xFF	; 255
    47dc:	9f 4f       	sbci	r25, 0xFF	; 255
    47de:	16 c0       	rjmp	.+44     	; 0x480c <__floatsisf+0x6c>
    47e0:	88 23       	and	r24, r24
    47e2:	11 f0       	breq	.+4      	; 0x47e8 <__floatsisf+0x48>
    47e4:	96 e9       	ldi	r25, 0x96	; 150
    47e6:	11 c0       	rjmp	.+34     	; 0x480a <__floatsisf+0x6a>
    47e8:	77 23       	and	r23, r23
    47ea:	21 f0       	breq	.+8      	; 0x47f4 <__floatsisf+0x54>
    47ec:	9e e8       	ldi	r25, 0x8E	; 142
    47ee:	87 2f       	mov	r24, r23
    47f0:	76 2f       	mov	r23, r22
    47f2:	05 c0       	rjmp	.+10     	; 0x47fe <__floatsisf+0x5e>
    47f4:	66 23       	and	r22, r22
    47f6:	71 f0       	breq	.+28     	; 0x4814 <__floatsisf+0x74>
    47f8:	96 e8       	ldi	r25, 0x86	; 134
    47fa:	86 2f       	mov	r24, r22
    47fc:	70 e0       	ldi	r23, 0x00	; 0
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	2a f0       	brmi	.+10     	; 0x480c <__floatsisf+0x6c>
    4802:	9a 95       	dec	r25
    4804:	66 0f       	add	r22, r22
    4806:	77 1f       	adc	r23, r23
    4808:	88 1f       	adc	r24, r24
    480a:	da f7       	brpl	.-10     	; 0x4802 <__floatsisf+0x62>
    480c:	88 0f       	add	r24, r24
    480e:	96 95       	lsr	r25
    4810:	87 95       	ror	r24
    4812:	97 f9       	bld	r25, 7
    4814:	08 95       	ret

00004816 <__fp_cmp>:
    4816:	99 0f       	add	r25, r25
    4818:	00 08       	sbc	r0, r0
    481a:	55 0f       	add	r21, r21
    481c:	aa 0b       	sbc	r26, r26
    481e:	e0 e8       	ldi	r30, 0x80	; 128
    4820:	fe ef       	ldi	r31, 0xFE	; 254
    4822:	16 16       	cp	r1, r22
    4824:	17 06       	cpc	r1, r23
    4826:	e8 07       	cpc	r30, r24
    4828:	f9 07       	cpc	r31, r25
    482a:	c0 f0       	brcs	.+48     	; 0x485c <__fp_cmp+0x46>
    482c:	12 16       	cp	r1, r18
    482e:	13 06       	cpc	r1, r19
    4830:	e4 07       	cpc	r30, r20
    4832:	f5 07       	cpc	r31, r21
    4834:	98 f0       	brcs	.+38     	; 0x485c <__fp_cmp+0x46>
    4836:	62 1b       	sub	r22, r18
    4838:	73 0b       	sbc	r23, r19
    483a:	84 0b       	sbc	r24, r20
    483c:	95 0b       	sbc	r25, r21
    483e:	39 f4       	brne	.+14     	; 0x484e <__fp_cmp+0x38>
    4840:	0a 26       	eor	r0, r26
    4842:	61 f0       	breq	.+24     	; 0x485c <__fp_cmp+0x46>
    4844:	23 2b       	or	r18, r19
    4846:	24 2b       	or	r18, r20
    4848:	25 2b       	or	r18, r21
    484a:	21 f4       	brne	.+8      	; 0x4854 <__fp_cmp+0x3e>
    484c:	08 95       	ret
    484e:	0a 26       	eor	r0, r26
    4850:	09 f4       	brne	.+2      	; 0x4854 <__fp_cmp+0x3e>
    4852:	a1 40       	sbci	r26, 0x01	; 1
    4854:	a6 95       	lsr	r26
    4856:	8f ef       	ldi	r24, 0xFF	; 255
    4858:	81 1d       	adc	r24, r1
    485a:	81 1d       	adc	r24, r1
    485c:	08 95       	ret

0000485e <__fp_inf>:
    485e:	97 f9       	bld	r25, 7
    4860:	9f 67       	ori	r25, 0x7F	; 127
    4862:	80 e8       	ldi	r24, 0x80	; 128
    4864:	70 e0       	ldi	r23, 0x00	; 0
    4866:	60 e0       	ldi	r22, 0x00	; 0
    4868:	08 95       	ret

0000486a <__fp_nan>:
    486a:	9f ef       	ldi	r25, 0xFF	; 255
    486c:	80 ec       	ldi	r24, 0xC0	; 192
    486e:	08 95       	ret

00004870 <__fp_pscA>:
    4870:	00 24       	eor	r0, r0
    4872:	0a 94       	dec	r0
    4874:	16 16       	cp	r1, r22
    4876:	17 06       	cpc	r1, r23
    4878:	18 06       	cpc	r1, r24
    487a:	09 06       	cpc	r0, r25
    487c:	08 95       	ret

0000487e <__fp_pscB>:
    487e:	00 24       	eor	r0, r0
    4880:	0a 94       	dec	r0
    4882:	12 16       	cp	r1, r18
    4884:	13 06       	cpc	r1, r19
    4886:	14 06       	cpc	r1, r20
    4888:	05 06       	cpc	r0, r21
    488a:	08 95       	ret

0000488c <__fp_round>:
    488c:	09 2e       	mov	r0, r25
    488e:	03 94       	inc	r0
    4890:	00 0c       	add	r0, r0
    4892:	11 f4       	brne	.+4      	; 0x4898 <__fp_round+0xc>
    4894:	88 23       	and	r24, r24
    4896:	52 f0       	brmi	.+20     	; 0x48ac <__fp_round+0x20>
    4898:	bb 0f       	add	r27, r27
    489a:	40 f4       	brcc	.+16     	; 0x48ac <__fp_round+0x20>
    489c:	bf 2b       	or	r27, r31
    489e:	11 f4       	brne	.+4      	; 0x48a4 <__fp_round+0x18>
    48a0:	60 ff       	sbrs	r22, 0
    48a2:	04 c0       	rjmp	.+8      	; 0x48ac <__fp_round+0x20>
    48a4:	6f 5f       	subi	r22, 0xFF	; 255
    48a6:	7f 4f       	sbci	r23, 0xFF	; 255
    48a8:	8f 4f       	sbci	r24, 0xFF	; 255
    48aa:	9f 4f       	sbci	r25, 0xFF	; 255
    48ac:	08 95       	ret

000048ae <__fp_split3>:
    48ae:	57 fd       	sbrc	r21, 7
    48b0:	90 58       	subi	r25, 0x80	; 128
    48b2:	44 0f       	add	r20, r20
    48b4:	55 1f       	adc	r21, r21
    48b6:	59 f0       	breq	.+22     	; 0x48ce <__fp_splitA+0x10>
    48b8:	5f 3f       	cpi	r21, 0xFF	; 255
    48ba:	71 f0       	breq	.+28     	; 0x48d8 <__fp_splitA+0x1a>
    48bc:	47 95       	ror	r20

000048be <__fp_splitA>:
    48be:	88 0f       	add	r24, r24
    48c0:	97 fb       	bst	r25, 7
    48c2:	99 1f       	adc	r25, r25
    48c4:	61 f0       	breq	.+24     	; 0x48de <__fp_splitA+0x20>
    48c6:	9f 3f       	cpi	r25, 0xFF	; 255
    48c8:	79 f0       	breq	.+30     	; 0x48e8 <__fp_splitA+0x2a>
    48ca:	87 95       	ror	r24
    48cc:	08 95       	ret
    48ce:	12 16       	cp	r1, r18
    48d0:	13 06       	cpc	r1, r19
    48d2:	14 06       	cpc	r1, r20
    48d4:	55 1f       	adc	r21, r21
    48d6:	f2 cf       	rjmp	.-28     	; 0x48bc <__fp_split3+0xe>
    48d8:	46 95       	lsr	r20
    48da:	f1 df       	rcall	.-30     	; 0x48be <__fp_splitA>
    48dc:	08 c0       	rjmp	.+16     	; 0x48ee <__fp_splitA+0x30>
    48de:	16 16       	cp	r1, r22
    48e0:	17 06       	cpc	r1, r23
    48e2:	18 06       	cpc	r1, r24
    48e4:	99 1f       	adc	r25, r25
    48e6:	f1 cf       	rjmp	.-30     	; 0x48ca <__fp_splitA+0xc>
    48e8:	86 95       	lsr	r24
    48ea:	71 05       	cpc	r23, r1
    48ec:	61 05       	cpc	r22, r1
    48ee:	08 94       	sec
    48f0:	08 95       	ret

000048f2 <__fp_zero>:
    48f2:	e8 94       	clt

000048f4 <__fp_szero>:
    48f4:	bb 27       	eor	r27, r27
    48f6:	66 27       	eor	r22, r22
    48f8:	77 27       	eor	r23, r23
    48fa:	cb 01       	movw	r24, r22
    48fc:	97 f9       	bld	r25, 7
    48fe:	08 95       	ret

00004900 <__gesf2>:
    4900:	0e 94 0b 24 	call	0x4816	; 0x4816 <__fp_cmp>
    4904:	08 f4       	brcc	.+2      	; 0x4908 <__gesf2+0x8>
    4906:	8f ef       	ldi	r24, 0xFF	; 255
    4908:	08 95       	ret

0000490a <__mulsf3>:
    490a:	0e 94 98 24 	call	0x4930	; 0x4930 <__mulsf3x>
    490e:	0c 94 46 24 	jmp	0x488c	; 0x488c <__fp_round>
    4912:	0e 94 38 24 	call	0x4870	; 0x4870 <__fp_pscA>
    4916:	38 f0       	brcs	.+14     	; 0x4926 <__mulsf3+0x1c>
    4918:	0e 94 3f 24 	call	0x487e	; 0x487e <__fp_pscB>
    491c:	20 f0       	brcs	.+8      	; 0x4926 <__mulsf3+0x1c>
    491e:	95 23       	and	r25, r21
    4920:	11 f0       	breq	.+4      	; 0x4926 <__mulsf3+0x1c>
    4922:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__fp_inf>
    4926:	0c 94 35 24 	jmp	0x486a	; 0x486a <__fp_nan>
    492a:	11 24       	eor	r1, r1
    492c:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__fp_szero>

00004930 <__mulsf3x>:
    4930:	0e 94 57 24 	call	0x48ae	; 0x48ae <__fp_split3>
    4934:	70 f3       	brcs	.-36     	; 0x4912 <__mulsf3+0x8>

00004936 <__mulsf3_pse>:
    4936:	95 9f       	mul	r25, r21
    4938:	c1 f3       	breq	.-16     	; 0x492a <__mulsf3+0x20>
    493a:	95 0f       	add	r25, r21
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	55 1f       	adc	r21, r21
    4940:	62 9f       	mul	r22, r18
    4942:	f0 01       	movw	r30, r0
    4944:	72 9f       	mul	r23, r18
    4946:	bb 27       	eor	r27, r27
    4948:	f0 0d       	add	r31, r0
    494a:	b1 1d       	adc	r27, r1
    494c:	63 9f       	mul	r22, r19
    494e:	aa 27       	eor	r26, r26
    4950:	f0 0d       	add	r31, r0
    4952:	b1 1d       	adc	r27, r1
    4954:	aa 1f       	adc	r26, r26
    4956:	64 9f       	mul	r22, r20
    4958:	66 27       	eor	r22, r22
    495a:	b0 0d       	add	r27, r0
    495c:	a1 1d       	adc	r26, r1
    495e:	66 1f       	adc	r22, r22
    4960:	82 9f       	mul	r24, r18
    4962:	22 27       	eor	r18, r18
    4964:	b0 0d       	add	r27, r0
    4966:	a1 1d       	adc	r26, r1
    4968:	62 1f       	adc	r22, r18
    496a:	73 9f       	mul	r23, r19
    496c:	b0 0d       	add	r27, r0
    496e:	a1 1d       	adc	r26, r1
    4970:	62 1f       	adc	r22, r18
    4972:	83 9f       	mul	r24, r19
    4974:	a0 0d       	add	r26, r0
    4976:	61 1d       	adc	r22, r1
    4978:	22 1f       	adc	r18, r18
    497a:	74 9f       	mul	r23, r20
    497c:	33 27       	eor	r19, r19
    497e:	a0 0d       	add	r26, r0
    4980:	61 1d       	adc	r22, r1
    4982:	23 1f       	adc	r18, r19
    4984:	84 9f       	mul	r24, r20
    4986:	60 0d       	add	r22, r0
    4988:	21 1d       	adc	r18, r1
    498a:	82 2f       	mov	r24, r18
    498c:	76 2f       	mov	r23, r22
    498e:	6a 2f       	mov	r22, r26
    4990:	11 24       	eor	r1, r1
    4992:	9f 57       	subi	r25, 0x7F	; 127
    4994:	50 40       	sbci	r21, 0x00	; 0
    4996:	9a f0       	brmi	.+38     	; 0x49be <__mulsf3_pse+0x88>
    4998:	f1 f0       	breq	.+60     	; 0x49d6 <__mulsf3_pse+0xa0>
    499a:	88 23       	and	r24, r24
    499c:	4a f0       	brmi	.+18     	; 0x49b0 <__mulsf3_pse+0x7a>
    499e:	ee 0f       	add	r30, r30
    49a0:	ff 1f       	adc	r31, r31
    49a2:	bb 1f       	adc	r27, r27
    49a4:	66 1f       	adc	r22, r22
    49a6:	77 1f       	adc	r23, r23
    49a8:	88 1f       	adc	r24, r24
    49aa:	91 50       	subi	r25, 0x01	; 1
    49ac:	50 40       	sbci	r21, 0x00	; 0
    49ae:	a9 f7       	brne	.-22     	; 0x499a <__mulsf3_pse+0x64>
    49b0:	9e 3f       	cpi	r25, 0xFE	; 254
    49b2:	51 05       	cpc	r21, r1
    49b4:	80 f0       	brcs	.+32     	; 0x49d6 <__mulsf3_pse+0xa0>
    49b6:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__fp_inf>
    49ba:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__fp_szero>
    49be:	5f 3f       	cpi	r21, 0xFF	; 255
    49c0:	e4 f3       	brlt	.-8      	; 0x49ba <__mulsf3_pse+0x84>
    49c2:	98 3e       	cpi	r25, 0xE8	; 232
    49c4:	d4 f3       	brlt	.-12     	; 0x49ba <__mulsf3_pse+0x84>
    49c6:	86 95       	lsr	r24
    49c8:	77 95       	ror	r23
    49ca:	67 95       	ror	r22
    49cc:	b7 95       	ror	r27
    49ce:	f7 95       	ror	r31
    49d0:	e7 95       	ror	r30
    49d2:	9f 5f       	subi	r25, 0xFF	; 255
    49d4:	c1 f7       	brne	.-16     	; 0x49c6 <__mulsf3_pse+0x90>
    49d6:	fe 2b       	or	r31, r30
    49d8:	88 0f       	add	r24, r24
    49da:	91 1d       	adc	r25, r1
    49dc:	96 95       	lsr	r25
    49de:	87 95       	ror	r24
    49e0:	97 f9       	bld	r25, 7
    49e2:	08 95       	ret

000049e4 <round>:
    49e4:	0e 94 5f 24 	call	0x48be	; 0x48be <__fp_splitA>
    49e8:	e8 f0       	brcs	.+58     	; 0x4a24 <round+0x40>
    49ea:	9e 37       	cpi	r25, 0x7E	; 126
    49ec:	e8 f0       	brcs	.+58     	; 0x4a28 <round+0x44>
    49ee:	96 39       	cpi	r25, 0x96	; 150
    49f0:	b8 f4       	brcc	.+46     	; 0x4a20 <round+0x3c>
    49f2:	9e 38       	cpi	r25, 0x8E	; 142
    49f4:	48 f4       	brcc	.+18     	; 0x4a08 <round+0x24>
    49f6:	67 2f       	mov	r22, r23
    49f8:	78 2f       	mov	r23, r24
    49fa:	88 27       	eor	r24, r24
    49fc:	98 5f       	subi	r25, 0xF8	; 248
    49fe:	f9 cf       	rjmp	.-14     	; 0x49f2 <round+0xe>
    4a00:	86 95       	lsr	r24
    4a02:	77 95       	ror	r23
    4a04:	67 95       	ror	r22
    4a06:	93 95       	inc	r25
    4a08:	95 39       	cpi	r25, 0x95	; 149
    4a0a:	d0 f3       	brcs	.-12     	; 0x4a00 <round+0x1c>
    4a0c:	b6 2f       	mov	r27, r22
    4a0e:	b1 70       	andi	r27, 0x01	; 1
    4a10:	6b 0f       	add	r22, r27
    4a12:	71 1d       	adc	r23, r1
    4a14:	81 1d       	adc	r24, r1
    4a16:	20 f4       	brcc	.+8      	; 0x4a20 <round+0x3c>
    4a18:	87 95       	ror	r24
    4a1a:	77 95       	ror	r23
    4a1c:	67 95       	ror	r22
    4a1e:	93 95       	inc	r25
    4a20:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__fp_mintl>
    4a24:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__fp_mpack>
    4a28:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__fp_szero>

00004a2c <__fp_mintl>:
    4a2c:	88 23       	and	r24, r24
    4a2e:	71 f4       	brne	.+28     	; 0x4a4c <__fp_mintl+0x20>
    4a30:	77 23       	and	r23, r23
    4a32:	21 f0       	breq	.+8      	; 0x4a3c <__fp_mintl+0x10>
    4a34:	98 50       	subi	r25, 0x08	; 8
    4a36:	87 2b       	or	r24, r23
    4a38:	76 2f       	mov	r23, r22
    4a3a:	07 c0       	rjmp	.+14     	; 0x4a4a <__fp_mintl+0x1e>
    4a3c:	66 23       	and	r22, r22
    4a3e:	11 f4       	brne	.+4      	; 0x4a44 <__fp_mintl+0x18>
    4a40:	99 27       	eor	r25, r25
    4a42:	0d c0       	rjmp	.+26     	; 0x4a5e <__fp_mintl+0x32>
    4a44:	90 51       	subi	r25, 0x10	; 16
    4a46:	86 2b       	or	r24, r22
    4a48:	70 e0       	ldi	r23, 0x00	; 0
    4a4a:	60 e0       	ldi	r22, 0x00	; 0
    4a4c:	2a f0       	brmi	.+10     	; 0x4a58 <__fp_mintl+0x2c>
    4a4e:	9a 95       	dec	r25
    4a50:	66 0f       	add	r22, r22
    4a52:	77 1f       	adc	r23, r23
    4a54:	88 1f       	adc	r24, r24
    4a56:	da f7       	brpl	.-10     	; 0x4a4e <__fp_mintl+0x22>
    4a58:	88 0f       	add	r24, r24
    4a5a:	96 95       	lsr	r25
    4a5c:	87 95       	ror	r24
    4a5e:	97 f9       	bld	r25, 7
    4a60:	08 95       	ret

00004a62 <__fp_mpack>:
    4a62:	9f 3f       	cpi	r25, 0xFF	; 255
    4a64:	31 f0       	breq	.+12     	; 0x4a72 <__fp_mpack_finite+0xc>

00004a66 <__fp_mpack_finite>:
    4a66:	91 50       	subi	r25, 0x01	; 1
    4a68:	20 f4       	brcc	.+8      	; 0x4a72 <__fp_mpack_finite+0xc>
    4a6a:	87 95       	ror	r24
    4a6c:	77 95       	ror	r23
    4a6e:	67 95       	ror	r22
    4a70:	b7 95       	ror	r27
    4a72:	88 0f       	add	r24, r24
    4a74:	91 1d       	adc	r25, r1
    4a76:	96 95       	lsr	r25
    4a78:	87 95       	ror	r24
    4a7a:	97 f9       	bld	r25, 7
    4a7c:	08 95       	ret

00004a7e <__divmodhi4>:
    4a7e:	97 fb       	bst	r25, 7
    4a80:	07 2e       	mov	r0, r23
    4a82:	16 f4       	brtc	.+4      	; 0x4a88 <__divmodhi4+0xa>
    4a84:	00 94       	com	r0
    4a86:	07 d0       	rcall	.+14     	; 0x4a96 <__divmodhi4_neg1>
    4a88:	77 fd       	sbrc	r23, 7
    4a8a:	09 d0       	rcall	.+18     	; 0x4a9e <__divmodhi4_neg2>
    4a8c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__udivmodhi4>
    4a90:	07 fc       	sbrc	r0, 7
    4a92:	05 d0       	rcall	.+10     	; 0x4a9e <__divmodhi4_neg2>
    4a94:	3e f4       	brtc	.+14     	; 0x4aa4 <__divmodhi4_exit>

00004a96 <__divmodhi4_neg1>:
    4a96:	90 95       	com	r25
    4a98:	81 95       	neg	r24
    4a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a9c:	08 95       	ret

00004a9e <__divmodhi4_neg2>:
    4a9e:	70 95       	com	r23
    4aa0:	61 95       	neg	r22
    4aa2:	7f 4f       	sbci	r23, 0xFF	; 255

00004aa4 <__divmodhi4_exit>:
    4aa4:	08 95       	ret

00004aa6 <__udivmodsi4>:
    4aa6:	a1 e2       	ldi	r26, 0x21	; 33
    4aa8:	1a 2e       	mov	r1, r26
    4aaa:	aa 1b       	sub	r26, r26
    4aac:	bb 1b       	sub	r27, r27
    4aae:	fd 01       	movw	r30, r26
    4ab0:	0d c0       	rjmp	.+26     	; 0x4acc <__udivmodsi4_ep>

00004ab2 <__udivmodsi4_loop>:
    4ab2:	aa 1f       	adc	r26, r26
    4ab4:	bb 1f       	adc	r27, r27
    4ab6:	ee 1f       	adc	r30, r30
    4ab8:	ff 1f       	adc	r31, r31
    4aba:	a2 17       	cp	r26, r18
    4abc:	b3 07       	cpc	r27, r19
    4abe:	e4 07       	cpc	r30, r20
    4ac0:	f5 07       	cpc	r31, r21
    4ac2:	20 f0       	brcs	.+8      	; 0x4acc <__udivmodsi4_ep>
    4ac4:	a2 1b       	sub	r26, r18
    4ac6:	b3 0b       	sbc	r27, r19
    4ac8:	e4 0b       	sbc	r30, r20
    4aca:	f5 0b       	sbc	r31, r21

00004acc <__udivmodsi4_ep>:
    4acc:	66 1f       	adc	r22, r22
    4ace:	77 1f       	adc	r23, r23
    4ad0:	88 1f       	adc	r24, r24
    4ad2:	99 1f       	adc	r25, r25
    4ad4:	1a 94       	dec	r1
    4ad6:	69 f7       	brne	.-38     	; 0x4ab2 <__udivmodsi4_loop>
    4ad8:	60 95       	com	r22
    4ada:	70 95       	com	r23
    4adc:	80 95       	com	r24
    4ade:	90 95       	com	r25
    4ae0:	9b 01       	movw	r18, r22
    4ae2:	ac 01       	movw	r20, r24
    4ae4:	bd 01       	movw	r22, r26
    4ae6:	cf 01       	movw	r24, r30
    4ae8:	08 95       	ret

00004aea <__tablejump2__>:
    4aea:	ee 0f       	add	r30, r30
    4aec:	ff 1f       	adc	r31, r31
    4aee:	05 90       	lpm	r0, Z+
    4af0:	f4 91       	lpm	r31, Z
    4af2:	e0 2d       	mov	r30, r0
    4af4:	09 94       	ijmp

00004af6 <__umulhisi3>:
    4af6:	a2 9f       	mul	r26, r18
    4af8:	b0 01       	movw	r22, r0
    4afa:	b3 9f       	mul	r27, r19
    4afc:	c0 01       	movw	r24, r0
    4afe:	a3 9f       	mul	r26, r19
    4b00:	70 0d       	add	r23, r0
    4b02:	81 1d       	adc	r24, r1
    4b04:	11 24       	eor	r1, r1
    4b06:	91 1d       	adc	r25, r1
    4b08:	b2 9f       	mul	r27, r18
    4b0a:	70 0d       	add	r23, r0
    4b0c:	81 1d       	adc	r24, r1
    4b0e:	11 24       	eor	r1, r1
    4b10:	91 1d       	adc	r25, r1
    4b12:	08 95       	ret

00004b14 <__udivmodhi4>:
    4b14:	aa 1b       	sub	r26, r26
    4b16:	bb 1b       	sub	r27, r27
    4b18:	51 e1       	ldi	r21, 0x11	; 17
    4b1a:	07 c0       	rjmp	.+14     	; 0x4b2a <__udivmodhi4_ep>

00004b1c <__udivmodhi4_loop>:
    4b1c:	aa 1f       	adc	r26, r26
    4b1e:	bb 1f       	adc	r27, r27
    4b20:	a6 17       	cp	r26, r22
    4b22:	b7 07       	cpc	r27, r23
    4b24:	10 f0       	brcs	.+4      	; 0x4b2a <__udivmodhi4_ep>
    4b26:	a6 1b       	sub	r26, r22
    4b28:	b7 0b       	sbc	r27, r23

00004b2a <__udivmodhi4_ep>:
    4b2a:	88 1f       	adc	r24, r24
    4b2c:	99 1f       	adc	r25, r25
    4b2e:	5a 95       	dec	r21
    4b30:	a9 f7       	brne	.-22     	; 0x4b1c <__udivmodhi4_loop>
    4b32:	80 95       	com	r24
    4b34:	90 95       	com	r25
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	08 95       	ret

00004b3c <malloc>:
    4b3c:	0f 93       	push	r16
    4b3e:	1f 93       	push	r17
    4b40:	cf 93       	push	r28
    4b42:	df 93       	push	r29
    4b44:	82 30       	cpi	r24, 0x02	; 2
    4b46:	91 05       	cpc	r25, r1
    4b48:	10 f4       	brcc	.+4      	; 0x4b4e <malloc+0x12>
    4b4a:	82 e0       	ldi	r24, 0x02	; 2
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <__flp>
    4b52:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <__flp+0x1>
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	a0 e0       	ldi	r26, 0x00	; 0
    4b5c:	b0 e0       	ldi	r27, 0x00	; 0
    4b5e:	30 97       	sbiw	r30, 0x00	; 0
    4b60:	19 f1       	breq	.+70     	; 0x4ba8 <malloc+0x6c>
    4b62:	40 81       	ld	r20, Z
    4b64:	51 81       	ldd	r21, Z+1	; 0x01
    4b66:	02 81       	ldd	r16, Z+2	; 0x02
    4b68:	13 81       	ldd	r17, Z+3	; 0x03
    4b6a:	48 17       	cp	r20, r24
    4b6c:	59 07       	cpc	r21, r25
    4b6e:	c8 f0       	brcs	.+50     	; 0x4ba2 <malloc+0x66>
    4b70:	84 17       	cp	r24, r20
    4b72:	95 07       	cpc	r25, r21
    4b74:	69 f4       	brne	.+26     	; 0x4b90 <malloc+0x54>
    4b76:	10 97       	sbiw	r26, 0x00	; 0
    4b78:	31 f0       	breq	.+12     	; 0x4b86 <malloc+0x4a>
    4b7a:	12 96       	adiw	r26, 0x02	; 2
    4b7c:	0c 93       	st	X, r16
    4b7e:	12 97       	sbiw	r26, 0x02	; 2
    4b80:	13 96       	adiw	r26, 0x03	; 3
    4b82:	1c 93       	st	X, r17
    4b84:	27 c0       	rjmp	.+78     	; 0x4bd4 <malloc+0x98>
    4b86:	00 93 82 06 	sts	0x0682, r16	; 0x800682 <__flp>
    4b8a:	10 93 83 06 	sts	0x0683, r17	; 0x800683 <__flp+0x1>
    4b8e:	22 c0       	rjmp	.+68     	; 0x4bd4 <malloc+0x98>
    4b90:	21 15       	cp	r18, r1
    4b92:	31 05       	cpc	r19, r1
    4b94:	19 f0       	breq	.+6      	; 0x4b9c <malloc+0x60>
    4b96:	42 17       	cp	r20, r18
    4b98:	53 07       	cpc	r21, r19
    4b9a:	18 f4       	brcc	.+6      	; 0x4ba2 <malloc+0x66>
    4b9c:	9a 01       	movw	r18, r20
    4b9e:	bd 01       	movw	r22, r26
    4ba0:	ef 01       	movw	r28, r30
    4ba2:	df 01       	movw	r26, r30
    4ba4:	f8 01       	movw	r30, r16
    4ba6:	db cf       	rjmp	.-74     	; 0x4b5e <malloc+0x22>
    4ba8:	21 15       	cp	r18, r1
    4baa:	31 05       	cpc	r19, r1
    4bac:	f9 f0       	breq	.+62     	; 0x4bec <malloc+0xb0>
    4bae:	28 1b       	sub	r18, r24
    4bb0:	39 0b       	sbc	r19, r25
    4bb2:	24 30       	cpi	r18, 0x04	; 4
    4bb4:	31 05       	cpc	r19, r1
    4bb6:	80 f4       	brcc	.+32     	; 0x4bd8 <malloc+0x9c>
    4bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bba:	9b 81       	ldd	r25, Y+3	; 0x03
    4bbc:	61 15       	cp	r22, r1
    4bbe:	71 05       	cpc	r23, r1
    4bc0:	21 f0       	breq	.+8      	; 0x4bca <malloc+0x8e>
    4bc2:	fb 01       	movw	r30, r22
    4bc4:	93 83       	std	Z+3, r25	; 0x03
    4bc6:	82 83       	std	Z+2, r24	; 0x02
    4bc8:	04 c0       	rjmp	.+8      	; 0x4bd2 <malloc+0x96>
    4bca:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <__flp+0x1>
    4bce:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__flp>
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	32 96       	adiw	r30, 0x02	; 2
    4bd6:	44 c0       	rjmp	.+136    	; 0x4c60 <malloc+0x124>
    4bd8:	fe 01       	movw	r30, r28
    4bda:	e2 0f       	add	r30, r18
    4bdc:	f3 1f       	adc	r31, r19
    4bde:	81 93       	st	Z+, r24
    4be0:	91 93       	st	Z+, r25
    4be2:	22 50       	subi	r18, 0x02	; 2
    4be4:	31 09       	sbc	r19, r1
    4be6:	39 83       	std	Y+1, r19	; 0x01
    4be8:	28 83       	st	Y, r18
    4bea:	3a c0       	rjmp	.+116    	; 0x4c60 <malloc+0x124>
    4bec:	20 91 80 06 	lds	r18, 0x0680	; 0x800680 <__brkval>
    4bf0:	30 91 81 06 	lds	r19, 0x0681	; 0x800681 <__brkval+0x1>
    4bf4:	23 2b       	or	r18, r19
    4bf6:	41 f4       	brne	.+16     	; 0x4c08 <malloc+0xcc>
    4bf8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    4bfc:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    4c00:	30 93 81 06 	sts	0x0681, r19	; 0x800681 <__brkval+0x1>
    4c04:	20 93 80 06 	sts	0x0680, r18	; 0x800680 <__brkval>
    4c08:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    4c0c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    4c10:	21 15       	cp	r18, r1
    4c12:	31 05       	cpc	r19, r1
    4c14:	41 f4       	brne	.+16     	; 0x4c26 <malloc+0xea>
    4c16:	2d b7       	in	r18, 0x3d	; 61
    4c18:	3e b7       	in	r19, 0x3e	; 62
    4c1a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    4c1e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    4c22:	24 1b       	sub	r18, r20
    4c24:	35 0b       	sbc	r19, r21
    4c26:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <__brkval>
    4c2a:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <__brkval+0x1>
    4c2e:	e2 17       	cp	r30, r18
    4c30:	f3 07       	cpc	r31, r19
    4c32:	a0 f4       	brcc	.+40     	; 0x4c5c <malloc+0x120>
    4c34:	2e 1b       	sub	r18, r30
    4c36:	3f 0b       	sbc	r19, r31
    4c38:	28 17       	cp	r18, r24
    4c3a:	39 07       	cpc	r19, r25
    4c3c:	78 f0       	brcs	.+30     	; 0x4c5c <malloc+0x120>
    4c3e:	ac 01       	movw	r20, r24
    4c40:	4e 5f       	subi	r20, 0xFE	; 254
    4c42:	5f 4f       	sbci	r21, 0xFF	; 255
    4c44:	24 17       	cp	r18, r20
    4c46:	35 07       	cpc	r19, r21
    4c48:	48 f0       	brcs	.+18     	; 0x4c5c <malloc+0x120>
    4c4a:	4e 0f       	add	r20, r30
    4c4c:	5f 1f       	adc	r21, r31
    4c4e:	50 93 81 06 	sts	0x0681, r21	; 0x800681 <__brkval+0x1>
    4c52:	40 93 80 06 	sts	0x0680, r20	; 0x800680 <__brkval>
    4c56:	81 93       	st	Z+, r24
    4c58:	91 93       	st	Z+, r25
    4c5a:	02 c0       	rjmp	.+4      	; 0x4c60 <malloc+0x124>
    4c5c:	e0 e0       	ldi	r30, 0x00	; 0
    4c5e:	f0 e0       	ldi	r31, 0x00	; 0
    4c60:	cf 01       	movw	r24, r30
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	1f 91       	pop	r17
    4c68:	0f 91       	pop	r16
    4c6a:	08 95       	ret

00004c6c <free>:
    4c6c:	cf 93       	push	r28
    4c6e:	df 93       	push	r29
    4c70:	00 97       	sbiw	r24, 0x00	; 0
    4c72:	09 f4       	brne	.+2      	; 0x4c76 <free+0xa>
    4c74:	81 c0       	rjmp	.+258    	; 0x4d78 <free+0x10c>
    4c76:	fc 01       	movw	r30, r24
    4c78:	32 97       	sbiw	r30, 0x02	; 2
    4c7a:	13 82       	std	Z+3, r1	; 0x03
    4c7c:	12 82       	std	Z+2, r1	; 0x02
    4c7e:	a0 91 82 06 	lds	r26, 0x0682	; 0x800682 <__flp>
    4c82:	b0 91 83 06 	lds	r27, 0x0683	; 0x800683 <__flp+0x1>
    4c86:	10 97       	sbiw	r26, 0x00	; 0
    4c88:	81 f4       	brne	.+32     	; 0x4caa <free+0x3e>
    4c8a:	20 81       	ld	r18, Z
    4c8c:	31 81       	ldd	r19, Z+1	; 0x01
    4c8e:	82 0f       	add	r24, r18
    4c90:	93 1f       	adc	r25, r19
    4c92:	20 91 80 06 	lds	r18, 0x0680	; 0x800680 <__brkval>
    4c96:	30 91 81 06 	lds	r19, 0x0681	; 0x800681 <__brkval+0x1>
    4c9a:	28 17       	cp	r18, r24
    4c9c:	39 07       	cpc	r19, r25
    4c9e:	51 f5       	brne	.+84     	; 0x4cf4 <free+0x88>
    4ca0:	f0 93 81 06 	sts	0x0681, r31	; 0x800681 <__brkval+0x1>
    4ca4:	e0 93 80 06 	sts	0x0680, r30	; 0x800680 <__brkval>
    4ca8:	67 c0       	rjmp	.+206    	; 0x4d78 <free+0x10c>
    4caa:	ed 01       	movw	r28, r26
    4cac:	20 e0       	ldi	r18, 0x00	; 0
    4cae:	30 e0       	ldi	r19, 0x00	; 0
    4cb0:	ce 17       	cp	r28, r30
    4cb2:	df 07       	cpc	r29, r31
    4cb4:	40 f4       	brcc	.+16     	; 0x4cc6 <free+0x5a>
    4cb6:	4a 81       	ldd	r20, Y+2	; 0x02
    4cb8:	5b 81       	ldd	r21, Y+3	; 0x03
    4cba:	9e 01       	movw	r18, r28
    4cbc:	41 15       	cp	r20, r1
    4cbe:	51 05       	cpc	r21, r1
    4cc0:	f1 f0       	breq	.+60     	; 0x4cfe <free+0x92>
    4cc2:	ea 01       	movw	r28, r20
    4cc4:	f5 cf       	rjmp	.-22     	; 0x4cb0 <free+0x44>
    4cc6:	d3 83       	std	Z+3, r29	; 0x03
    4cc8:	c2 83       	std	Z+2, r28	; 0x02
    4cca:	40 81       	ld	r20, Z
    4ccc:	51 81       	ldd	r21, Z+1	; 0x01
    4cce:	84 0f       	add	r24, r20
    4cd0:	95 1f       	adc	r25, r21
    4cd2:	c8 17       	cp	r28, r24
    4cd4:	d9 07       	cpc	r29, r25
    4cd6:	59 f4       	brne	.+22     	; 0x4cee <free+0x82>
    4cd8:	88 81       	ld	r24, Y
    4cda:	99 81       	ldd	r25, Y+1	; 0x01
    4cdc:	84 0f       	add	r24, r20
    4cde:	95 1f       	adc	r25, r21
    4ce0:	02 96       	adiw	r24, 0x02	; 2
    4ce2:	91 83       	std	Z+1, r25	; 0x01
    4ce4:	80 83       	st	Z, r24
    4ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cea:	93 83       	std	Z+3, r25	; 0x03
    4cec:	82 83       	std	Z+2, r24	; 0x02
    4cee:	21 15       	cp	r18, r1
    4cf0:	31 05       	cpc	r19, r1
    4cf2:	29 f4       	brne	.+10     	; 0x4cfe <free+0x92>
    4cf4:	f0 93 83 06 	sts	0x0683, r31	; 0x800683 <__flp+0x1>
    4cf8:	e0 93 82 06 	sts	0x0682, r30	; 0x800682 <__flp>
    4cfc:	3d c0       	rjmp	.+122    	; 0x4d78 <free+0x10c>
    4cfe:	e9 01       	movw	r28, r18
    4d00:	fb 83       	std	Y+3, r31	; 0x03
    4d02:	ea 83       	std	Y+2, r30	; 0x02
    4d04:	49 91       	ld	r20, Y+
    4d06:	59 91       	ld	r21, Y+
    4d08:	c4 0f       	add	r28, r20
    4d0a:	d5 1f       	adc	r29, r21
    4d0c:	ec 17       	cp	r30, r28
    4d0e:	fd 07       	cpc	r31, r29
    4d10:	61 f4       	brne	.+24     	; 0x4d2a <free+0xbe>
    4d12:	80 81       	ld	r24, Z
    4d14:	91 81       	ldd	r25, Z+1	; 0x01
    4d16:	84 0f       	add	r24, r20
    4d18:	95 1f       	adc	r25, r21
    4d1a:	02 96       	adiw	r24, 0x02	; 2
    4d1c:	e9 01       	movw	r28, r18
    4d1e:	99 83       	std	Y+1, r25	; 0x01
    4d20:	88 83       	st	Y, r24
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	9b 83       	std	Y+3, r25	; 0x03
    4d28:	8a 83       	std	Y+2, r24	; 0x02
    4d2a:	e0 e0       	ldi	r30, 0x00	; 0
    4d2c:	f0 e0       	ldi	r31, 0x00	; 0
    4d2e:	12 96       	adiw	r26, 0x02	; 2
    4d30:	8d 91       	ld	r24, X+
    4d32:	9c 91       	ld	r25, X
    4d34:	13 97       	sbiw	r26, 0x03	; 3
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	19 f0       	breq	.+6      	; 0x4d40 <free+0xd4>
    4d3a:	fd 01       	movw	r30, r26
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	f7 cf       	rjmp	.-18     	; 0x4d2e <free+0xc2>
    4d40:	8d 91       	ld	r24, X+
    4d42:	9c 91       	ld	r25, X
    4d44:	11 97       	sbiw	r26, 0x01	; 1
    4d46:	9d 01       	movw	r18, r26
    4d48:	2e 5f       	subi	r18, 0xFE	; 254
    4d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4c:	82 0f       	add	r24, r18
    4d4e:	93 1f       	adc	r25, r19
    4d50:	20 91 80 06 	lds	r18, 0x0680	; 0x800680 <__brkval>
    4d54:	30 91 81 06 	lds	r19, 0x0681	; 0x800681 <__brkval+0x1>
    4d58:	28 17       	cp	r18, r24
    4d5a:	39 07       	cpc	r19, r25
    4d5c:	69 f4       	brne	.+26     	; 0x4d78 <free+0x10c>
    4d5e:	30 97       	sbiw	r30, 0x00	; 0
    4d60:	29 f4       	brne	.+10     	; 0x4d6c <free+0x100>
    4d62:	10 92 83 06 	sts	0x0683, r1	; 0x800683 <__flp+0x1>
    4d66:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <__flp>
    4d6a:	02 c0       	rjmp	.+4      	; 0x4d70 <free+0x104>
    4d6c:	13 82       	std	Z+3, r1	; 0x03
    4d6e:	12 82       	std	Z+2, r1	; 0x02
    4d70:	b0 93 81 06 	sts	0x0681, r27	; 0x800681 <__brkval+0x1>
    4d74:	a0 93 80 06 	sts	0x0680, r26	; 0x800680 <__brkval>
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	08 95       	ret

00004d7e <eeprom_read_byte>:
    4d7e:	e1 99       	sbic	0x1c, 1	; 28
    4d80:	fe cf       	rjmp	.-4      	; 0x4d7e <eeprom_read_byte>
    4d82:	9f bb       	out	0x1f, r25	; 31
    4d84:	8e bb       	out	0x1e, r24	; 30
    4d86:	e0 9a       	sbi	0x1c, 0	; 28
    4d88:	99 27       	eor	r25, r25
    4d8a:	8d b3       	in	r24, 0x1d	; 29
    4d8c:	08 95       	ret

00004d8e <eeprom_read_dword>:
    4d8e:	a6 e1       	ldi	r26, 0x16	; 22
    4d90:	b0 e0       	ldi	r27, 0x00	; 0
    4d92:	44 e0       	ldi	r20, 0x04	; 4
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <eeprom_read_blraw>

00004d9a <eeprom_read_word>:
    4d9a:	a8 e1       	ldi	r26, 0x18	; 24
    4d9c:	b0 e0       	ldi	r27, 0x00	; 0
    4d9e:	42 e0       	ldi	r20, 0x02	; 2
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <eeprom_read_blraw>

00004da6 <eeprom_update_byte>:
    4da6:	26 2f       	mov	r18, r22

00004da8 <eeprom_update_r18>:
    4da8:	e1 99       	sbic	0x1c, 1	; 28
    4daa:	fe cf       	rjmp	.-4      	; 0x4da8 <eeprom_update_r18>
    4dac:	9f bb       	out	0x1f, r25	; 31
    4dae:	8e bb       	out	0x1e, r24	; 30
    4db0:	e0 9a       	sbi	0x1c, 0	; 28
    4db2:	01 97       	sbiw	r24, 0x01	; 1
    4db4:	0d b2       	in	r0, 0x1d	; 29
    4db6:	02 16       	cp	r0, r18
    4db8:	31 f0       	breq	.+12     	; 0x4dc6 <eeprom_update_r18+0x1e>
    4dba:	2d bb       	out	0x1d, r18	; 29
    4dbc:	0f b6       	in	r0, 0x3f	; 63
    4dbe:	f8 94       	cli
    4dc0:	e2 9a       	sbi	0x1c, 2	; 28
    4dc2:	e1 9a       	sbi	0x1c, 1	; 28
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	08 95       	ret

00004dc8 <eeprom_update_dword>:
    4dc8:	03 96       	adiw	r24, 0x03	; 3
    4dca:	27 2f       	mov	r18, r23
    4dcc:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <eeprom_update_r18>
    4dd0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <eeprom_update_byte>
    4dd4:	25 2f       	mov	r18, r21
    4dd6:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <eeprom_update_r18>
    4dda:	24 2f       	mov	r18, r20
    4ddc:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <eeprom_update_r18>

00004de0 <eeprom_update_word>:
    4de0:	01 96       	adiw	r24, 0x01	; 1
    4de2:	27 2f       	mov	r18, r23
    4de4:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <eeprom_update_r18>
    4de8:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <eeprom_update_byte>

00004dec <eeprom_write_dword>:
    4dec:	24 2f       	mov	r18, r20
    4dee:	0e 94 14 27 	call	0x4e28	; 0x4e28 <eeprom_write_r18>
    4df2:	25 2f       	mov	r18, r21
    4df4:	0e 94 14 27 	call	0x4e28	; 0x4e28 <eeprom_write_r18>
    4df8:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <eeprom_write_word>

00004dfc <eeprom_write_word>:
    4dfc:	0e 94 13 27 	call	0x4e26	; 0x4e26 <eeprom_write_byte>
    4e00:	27 2f       	mov	r18, r23
    4e02:	0c 94 14 27 	jmp	0x4e28	; 0x4e28 <eeprom_write_r18>

00004e06 <eeprom_read_block>:
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22

00004e0a <eeprom_read_blraw>:
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	e1 99       	sbic	0x1c, 1	; 28
    4e0e:	fe cf       	rjmp	.-4      	; 0x4e0c <eeprom_read_blraw+0x2>
    4e10:	06 c0       	rjmp	.+12     	; 0x4e1e <eeprom_read_blraw+0x14>
    4e12:	ff bb       	out	0x1f, r31	; 31
    4e14:	ee bb       	out	0x1e, r30	; 30
    4e16:	e0 9a       	sbi	0x1c, 0	; 28
    4e18:	31 96       	adiw	r30, 0x01	; 1
    4e1a:	0d b2       	in	r0, 0x1d	; 29
    4e1c:	0d 92       	st	X+, r0
    4e1e:	41 50       	subi	r20, 0x01	; 1
    4e20:	50 40       	sbci	r21, 0x00	; 0
    4e22:	b8 f7       	brcc	.-18     	; 0x4e12 <eeprom_read_blraw+0x8>
    4e24:	08 95       	ret

00004e26 <eeprom_write_byte>:
    4e26:	26 2f       	mov	r18, r22

00004e28 <eeprom_write_r18>:
    4e28:	e1 99       	sbic	0x1c, 1	; 28
    4e2a:	fe cf       	rjmp	.-4      	; 0x4e28 <eeprom_write_r18>
    4e2c:	9f bb       	out	0x1f, r25	; 31
    4e2e:	8e bb       	out	0x1e, r24	; 30
    4e30:	2d bb       	out	0x1d, r18	; 29
    4e32:	0f b6       	in	r0, 0x3f	; 63
    4e34:	f8 94       	cli
    4e36:	e2 9a       	sbi	0x1c, 2	; 28
    4e38:	e1 9a       	sbi	0x1c, 1	; 28
    4e3a:	0f be       	out	0x3f, r0	; 63
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	08 95       	ret

00004e40 <_exit>:
    4e40:	f8 94       	cli

00004e42 <__stop_program>:
    4e42:	ff cf       	rjmp	.-2      	; 0x4e42 <__stop_program>
