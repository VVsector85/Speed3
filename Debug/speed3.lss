
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000517c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000206  00800060  0000517c  00005210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045b  00800266  00800266  00005416  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00005416  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000054b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068ab  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3e  00000000  00000000  0000c173  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002906  00000000  00000000  0000cfb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c34  00000000  00000000  0000f8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fd6  00000000  00000000  000104ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059ee  00000000  00000000  000114c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00016eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_9>
      28:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	18 18       	sub	r1, r8
      56:	38 18       	sub	r3, r8
      58:	58 18       	sub	r5, r8
      5a:	a7 18       	sub	r10, r7
      5c:	f6 18       	sub	r15, r6
      5e:	12 19       	sub	r17, r2
      60:	2e 19       	sub	r18, r14
      62:	4a 19       	sub	r20, r10
      64:	99 19       	sub	r25, r9
      66:	b9 19       	sub	r27, r9
      68:	d5 19       	sub	r29, r5
      6a:	f3 19       	sub	r31, r3
      6c:	ff 19       	sub	r31, r15
      6e:	02 1a       	sub	r0, r18
      70:	bc 1a       	sub	r11, r28
      72:	44 1b       	sub	r20, r20

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	12 e0       	ldi	r17, 0x02	; 2
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ec e7       	ldi	r30, 0x7C	; 124
    1556:	f1 e5       	ldi	r31, 0x51	; 81
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a6 36       	cpi	r26, 0x66	; 102
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	a6 e6       	ldi	r26, 0x66	; 102
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	a1 3c       	cpi	r26, 0xC1	; 193
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 55 16 	call	0x2caa	; 0x2caa <main>
    1578:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2934>:
	tempValue = currValue;
	valueLength = 0;


	uint16_t new_value (void)	//gathering digits back to the integer
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	8c 91       	ld	r24, X
    1592:	13 97       	sbiw	r26, 0x03	; 3
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	8c 93       	st	X, r24
    159a:	12 97       	sbiw	r26, 0x02	; 2
    159c:	88 23       	and	r24, r24
    159e:	7c f1       	brlt	.+94     	; 0x15fe <new_value.2934+0x7e>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	0d 91       	ld	r16, X+
    15a2:	1c 91       	ld	r17, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	e0 e0       	ldi	r30, 0x00	; 0
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	68 2f       	mov	r22, r24
    15ac:	08 2e       	mov	r0, r24
    15ae:	00 0c       	add	r0, r0
    15b0:	77 0b       	sbc	r23, r23
    15b2:	98 01       	movw	r18, r16
    15b4:	26 0f       	add	r18, r22
    15b6:	37 1f       	adc	r19, r23
    15b8:	e9 01       	movw	r28, r18
    15ba:	28 81       	ld	r18, Y
    15bc:	02 2e       	mov	r0, r18
    15be:	00 0c       	add	r0, r0
    15c0:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	94 f4       	brge	.+36     	; 0x15ec <new_value.2934+0x6c>
    15c8:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15ca:	a9 01       	movw	r20, r18
    15cc:	44 0f       	add	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	24 0f       	add	r18, r20
    15de:	35 1f       	adc	r19, r21
	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	49 2f       	mov	r20, r25
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	46 17       	cp	r20, r22
    15e8:	57 07       	cpc	r21, r23
    15ea:	7c f3       	brlt	.-34     	; 0x15ca <new_value.2934+0x4a>
				tenPower*=10;
			}
			newValue += tenPower;
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	81 50       	subi	r24, 0x01	; 1


	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f2:	12 96       	adiw	r26, 0x02	; 2
    15f4:	8c 93       	st	X, r24
    15f6:	12 97       	sbiw	r26, 0x02	; 2
    15f8:	88 23       	and	r24, r24
    15fa:	bc f6       	brge	.-82     	; 0x15aa <new_value.2934+0x2a>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <new_value.2934+0x82>
	valueLength = 0;


	uint16_t new_value (void)	//gathering digits back to the integer
	{
		uint16_t newValue = 0;
    15fe:	e0 e0       	ldi	r30, 0x00	; 0
    1600:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1602:	cf 01       	movw	r24, r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	3f 90       	pop	r3
    160e:	2f 90       	pop	r2
    1610:	08 95       	ret

00001612 <default_values>:
	0b00000000,
	0b00001000,
	0b00000100			
};
void default_values(){
	 lcdContrast = LCD_CONTRAST_DEFAULT;
    1612:	8a ef       	ldi	r24, 0xFA	; 250
    1614:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <lcdContrast>
	 magnetsOnWheel = MAGNETS_ON_WHEEL_DEFAULT;
    1618:	86 e0       	ldi	r24, 0x06	; 6
    161a:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <magnetsOnWheel>
	 gearRatio = GEAR_RATIO_DEFAULT;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <gearRatio>
    162a:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <gearRatio+0x1>
    162e:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <gearRatio+0x2>
    1632:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <gearRatio+0x3>
	 wheelDiameter = WHEEL_DIAMETER_DEFAULT;	
    1636:	83 e3       	ldi	r24, 0x33	; 51
    1638:	93 e3       	ldi	r25, 0x33	; 51
    163a:	a3 e3       	ldi	r26, 0x33	; 51
    163c:	bf e3       	ldi	r27, 0x3F	; 63
    163e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <wheelDiameter>
    1642:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <wheelDiameter+0x1>
    1646:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <wheelDiameter+0x2>
    164a:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <wheelDiameter+0x3>
	 degreesPerKmh = DEGREES_PER_KMH_DEFAULT;
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	93 e3       	ldi	r25, 0x33	; 51
    1652:	a3 ea       	ldi	r26, 0xA3	; 163
    1654:	bf e3       	ldi	r27, 0x3F	; 63
    1656:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <degreesPerKmh>
    165a:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <degreesPerKmh+0x1>
    165e:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <degreesPerKmh+0x2>
    1662:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <degreesPerKmh+0x3>
	 pwmArrow = PWM_ARROW_DEFAULT;
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	94 e0       	ldi	r25, 0x04	; 4
    166a:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <pwmArrow+0x1>
    166e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pwmArrow>
	 pwmDial = PWM_DIAL_DEFAULT;
    1672:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <pwmDial+0x1>
    1676:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <pwmDial>
	 scaleMax	= SCALE_MAX_DEFAULT;
    167a:	8e eb       	ldi	r24, 0xBE	; 190
    167c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <scaleMax>
	 stepInterval = STEP_INTERVAL_DEFAULT;
    1680:	86 e9       	ldi	r24, 0x96	; 150
    1682:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <stepInterval>
	 smSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
    1686:	80 e6       	ldi	r24, 0x60	; 96
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <smSteps+0x1>
    168e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <smSteps>
	 stepMode = STEP_MODE_DEFAULT;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <stepMode>
    1698:	08 95       	ret

0000169a <step>:
	}
}

void step(uint8_t mode){
	uint8_t tempPort = 0;
	if (dir)
    169a:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <dir>
    169e:	99 23       	and	r25, r25
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <step+0x28>
	{
		phase++;
    16a2:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <phase>
    16a6:	9f 5f       	subi	r25, 0xFF	; 255
    16a8:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <phase>
		steps++;
    16ac:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <steps>
    16b0:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <steps+0x1>
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	30 93 91 02 	sts	0x0291, r19	; 0x800291 <steps+0x1>
    16bc:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <steps>
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <step+0x46>
	}
	else
	{
		phase--;
    16c2:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <phase>
    16c6:	91 50       	subi	r25, 0x01	; 1
    16c8:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <phase>
		steps--;
    16cc:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <steps>
    16d0:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <steps+0x1>
    16d4:	21 50       	subi	r18, 0x01	; 1
    16d6:	31 09       	sbc	r19, r1
    16d8:	30 93 91 02 	sts	0x0291, r19	; 0x800291 <steps+0x1>
    16dc:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <steps>
	}
		 if (phase < 0) phase = 7;
    16e0:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <phase>
    16e4:	99 23       	and	r25, r25
    16e6:	24 f4       	brge	.+8      	; 0x16f0 <step+0x56>
    16e8:	97 e0       	ldi	r25, 0x07	; 7
    16ea:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <phase>
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <step+0x62>
	else if (phase > 7) phase = 0;
    16f0:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <phase>
    16f4:	98 30       	cpi	r25, 0x08	; 8
    16f6:	14 f0       	brlt	.+4      	; 0x16fc <step+0x62>
    16f8:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <phase>

	tempPort = PORTA;
    16fc:	9b b3       	in	r25, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    16fe:	90 7f       	andi	r25, 0xF0	; 240
	
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[phase];
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	51 f4       	brne	.+20     	; 0x1718 <step+0x7e>
    1704:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <phase>
    1708:	0e 2e       	mov	r0, r30
    170a:	00 0c       	add	r0, r0
    170c:	ff 0b       	sbc	r31, r31
    170e:	ea 5a       	subi	r30, 0xAA	; 170
    1710:	fd 4f       	sbci	r31, 0xFD	; 253
    1712:	80 81       	ld	r24, Z
    1714:	98 2b       	or	r25, r24
    1716:	0b c0       	rjmp	.+22     	; 0x172e <step+0x94>
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	49 f4       	brne	.+18     	; 0x172e <step+0x94>
    171c:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <phase>
    1720:	0e 2e       	mov	r0, r30
    1722:	00 0c       	add	r0, r0
    1724:	ff 0b       	sbc	r31, r31
    1726:	e2 5a       	subi	r30, 0xA2	; 162
    1728:	fd 4f       	sbci	r31, 0xFD	; 253
    172a:	80 81       	ld	r24, Z
    172c:	98 2b       	or	r25, r24
	PORTA = tempPort;
    172e:	9b bb       	out	0x1b, r25	; 27
    1730:	08 95       	ret

00001732 <__vector_10>:
	if (!arrowCalibrated) arrow_calibration();
	MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
	GICR|=_BV(INT1); //External Interrupt Enable INT1
}

ISR( TIMER0_COMP_vect ){
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	step(stepMode);
    1754:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <stepMode>
    1758:	0e 94 4d 0b 	call	0x169a	; 0x169a <step>
	if (steps == newSteps){
    175c:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <steps>
    1760:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <steps+0x1>
    1764:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <newSteps>
    1768:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <newSteps+0x1>
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	39 f4       	brne	.+14     	; 0x1780 <__vector_10+0x4e>
		arrowMoving = 0;
    1772:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <arrowMoving>
		TCCR0 = 0;
    1776:	13 be       	out	0x33, r1	; 51
		OCR0 = 0;
    1778:	1c be       	out	0x3c, r1	; 60
		TIMSK&=~_BV(OCIE0);
    177a:	89 b7       	in	r24, 0x39	; 57
    177c:	8d 7f       	andi	r24, 0xFD	; 253
    177e:	89 bf       	out	0x39, r24	; 57
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_4>:
	else if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[phase];
	PORTA = tempPort;
}


ISR( TIMER2_COMP_vect ){
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
	speedTimerRough++; //speedTimer increments each period timePerTic*TIC
    17b0:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <speedTimerRough>
    17b4:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <speedTimerRough+0x1>
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <speedTimerRough+0x1>
    17be:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <speedTimerRough>
}
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_9>:
ISR (TIMER1_OVF_vect){
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    17de:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <signalOn>
    17e2:	88 23       	and	r24, r24
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <__vector_9+0x28>
    17e6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <signalCounter>
    17ea:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <signalCounter+0x1>
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <signalCounter+0x1>
    17f4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <signalCounter>
}
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_2>:
ISR(INT1_vect){
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
//interrupt occurs when Hall sensor is triggered
if (firstMeasure)
    1820:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <firstMeasure>
    1824:	88 23       	and	r24, r24
    1826:	51 f1       	breq	.+84     	; 0x187c <__vector_2+0x76>
	{
		speedTimerPrecise = (speedTimerRough*TIC) + TCNT2;
    1828:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <speedTimerRough>
    182c:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <speedTimerRough+0x1>
    1830:	24 b5       	in	r18, 0x24	; 36
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	34 9f       	mul	r19, r20
    1836:	c0 01       	movw	r24, r0
    1838:	35 9f       	mul	r19, r21
    183a:	90 0d       	add	r25, r0
    183c:	11 24       	eor	r1, r1
    183e:	82 0f       	add	r24, r18
    1840:	91 1d       	adc	r25, r1
    1842:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <speedTimerPrecise+0x1>
    1846:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <speedTimerPrecise>
		TCNT2 = 0;
    184a:	14 bc       	out	0x24, r1	; 36
		speedTimerRough = 0;
    184c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <speedTimerRough+0x1>
    1850:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <speedTimerRough>
		//speedRefresh = 1;
		totalRotations++;
    1854:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <totalRotations>
    1858:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <totalRotations+0x1>
    185c:	a0 91 96 02 	lds	r26, 0x0296	; 0x800296 <totalRotations+0x2>
    1860:	b0 91 97 02 	lds	r27, 0x0297	; 0x800297 <totalRotations+0x3>
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	a1 1d       	adc	r26, r1
    1868:	b1 1d       	adc	r27, r1
    186a:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <totalRotations>
    186e:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <totalRotations+0x1>
    1872:	a0 93 96 02 	sts	0x0296, r26	; 0x800296 <totalRotations+0x2>
    1876:	b0 93 97 02 	sts	0x0297, r27	; 0x800297 <totalRotations+0x3>
    187a:	07 c0       	rjmp	.+14     	; 0x188a <__vector_2+0x84>
	}
else
	{
		//first triggering of the sensor starts TIMER2
		TIMSK|=_BV(OCIE2);
    187c:	89 b7       	in	r24, 0x39	; 57
    187e:	80 68       	ori	r24, 0x80	; 128
    1880:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0;
    1882:	14 bc       	out	0x24, r1	; 36
		firstMeasure = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <firstMeasure>
	}
}
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	5f 91       	pop	r21
    1894:	4f 91       	pop	r20
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <main_screen>:
		}
	}
}

void main_screen()
{
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
	if (!signalOn){
    18ba:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <signalOn>
    18be:	81 11       	cpse	r24, r1
    18c0:	d8 c0       	rjmp	.+432    	; 0x1a72 <main_screen+0x1ce>

		uint8_t offsetX = 10;
		uint8_t offsetY = 11;
		GLCD_Clear();
    18c2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    18c6:	0f ef       	ldi	r16, 0xFF	; 255
    18c8:	27 e1       	ldi	r18, 0x17	; 23
    18ca:	44 e2       	ldi	r20, 0x24	; 36
    18cc:	6b e0       	ldi	r22, 0x0B	; 11
    18ce:	8a e0       	ldi	r24, 0x0A	; 10
    18d0:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    18d4:	24 e1       	ldi	r18, 0x14	; 20
    18d6:	46 e2       	ldi	r20, 0x26	; 38
    18d8:	6e e0       	ldi	r22, 0x0E	; 14
    18da:	85 e2       	ldi	r24, 0x25	; 37
    18dc:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>

		if (voltage>=BRICK_1)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    18e0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <voltage>
    18e4:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <voltage+0x1>
    18e8:	89 36       	cpi	r24, 0x69	; 105
    18ea:	91 05       	cpc	r25, r1
    18ec:	34 f0       	brlt	.+12     	; 0x18fa <main_screen+0x56>
    18ee:	25 e1       	ldi	r18, 0x15	; 21
    18f0:	40 e1       	ldi	r20, 0x10	; 16
    18f2:	6d e0       	ldi	r22, 0x0D	; 13
    18f4:	8c e0       	ldi	r24, 0x0C	; 12
    18f6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <GLCD_FillRectangle>
		if (voltage>=BRICK_2)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    18fa:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <voltage>
    18fe:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <voltage+0x1>
    1902:	8e 36       	cpi	r24, 0x6E	; 110
    1904:	91 05       	cpc	r25, r1
    1906:	3c f0       	brlt	.+14     	; 0x1916 <main_screen+0x72>
    1908:	0f ef       	ldi	r16, 0xFF	; 255
    190a:	25 e1       	ldi	r18, 0x15	; 21
    190c:	46 e1       	ldi	r20, 0x16	; 22
    190e:	6d e0       	ldi	r22, 0x0D	; 13
    1910:	82 e1       	ldi	r24, 0x12	; 18
    1912:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <GLCD_FillRectangle>
		if (voltage>=BRICK_3)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    1916:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <voltage>
    191a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <voltage+0x1>
    191e:	83 37       	cpi	r24, 0x73	; 115
    1920:	91 05       	cpc	r25, r1
    1922:	3c f0       	brlt	.+14     	; 0x1932 <main_screen+0x8e>
    1924:	0f ef       	ldi	r16, 0xFF	; 255
    1926:	25 e1       	ldi	r18, 0x15	; 21
    1928:	4c e1       	ldi	r20, 0x1C	; 28
    192a:	6d e0       	ldi	r22, 0x0D	; 13
    192c:	88 e1       	ldi	r24, 0x18	; 24
    192e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <GLCD_FillRectangle>
		if (voltage>=BRICK_4)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    1932:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <voltage>
    1936:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <voltage+0x1>
    193a:	88 37       	cpi	r24, 0x78	; 120
    193c:	91 05       	cpc	r25, r1
    193e:	3c f0       	brlt	.+14     	; 0x194e <main_screen+0xaa>
    1940:	0f ef       	ldi	r16, 0xFF	; 255
    1942:	25 e1       	ldi	r18, 0x15	; 21
    1944:	42 e2       	ldi	r20, 0x22	; 34
    1946:	6d e0       	ldi	r22, 0x0D	; 13
    1948:	8e e1       	ldi	r24, 0x1E	; 30
    194a:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <GLCD_FillRectangle>

		GLCD_GotoXY(33+offsetX, 4+offsetY);
    194e:	6f e0       	ldi	r22, 0x0F	; 15
    1950:	8b e2       	ldi	r24, 0x2B	; 43
    1952:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	48 e0       	ldi	r20, 0x08	; 8
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	80 ea       	ldi	r24, 0xA0	; 160
    195e:	9b e0       	ldi	r25, 0x0B	; 11
    1960:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    1964:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <voltage>
    1968:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <voltage+0x1>
    196c:	07 2e       	mov	r0, r23
    196e:	00 0c       	add	r0, r0
    1970:	88 0b       	sbc	r24, r24
    1972:	99 0b       	sbc	r25, r25
    1974:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__floatsisf>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    1984:	2a e0       	ldi	r18, 0x0A	; 10
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
		GLCD_PrintString("V");
    1990:	88 e6       	ldi	r24, 0x68	; 104
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>

		GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	62 e1       	ldi	r22, 0x12	; 18
    199e:	86 e3       	ldi	r24, 0x36	; 54
    19a0:	94 e0       	ldi	r25, 0x04	; 4
    19a2:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
		GLCD_GotoXY(4, 31);
    19a6:	6f e1       	ldi	r22, 0x1F	; 31
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    19ae:	80 90 6c 02 	lds	r8, 0x026C	; 0x80026c <distance>
    19b2:	90 90 6d 02 	lds	r9, 0x026D	; 0x80026d <distance+0x1>
    19b6:	a0 90 6e 02 	lds	r10, 0x026E	; 0x80026e <distance+0x2>
    19ba:	b0 90 6f 02 	lds	r11, 0x026F	; 0x80026f <distance+0x3>
    19be:	84 e6       	ldi	r24, 0x64	; 100
    19c0:	88 16       	cp	r8, r24
    19c2:	91 04       	cpc	r9, r1
    19c4:	a1 04       	cpc	r10, r1
    19c6:	b1 04       	cpc	r11, r1
    19c8:	70 f0       	brcs	.+28     	; 0x19e6 <main_screen+0x142>
    19ca:	c5 01       	movw	r24, r10
    19cc:	b4 01       	movw	r22, r8
    19ce:	2a e0       	ldi	r18, 0x0A	; 10
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__udivmodsi4>
		uint8_t l = 0;

		while(tempDistance){
    19da:	21 15       	cp	r18, r1
    19dc:	31 05       	cpc	r19, r1
    19de:	41 05       	cpc	r20, r1
    19e0:	51 05       	cpc	r21, r1
    19e2:	29 f4       	brne	.+10     	; 0x19ee <main_screen+0x14a>
    19e4:	40 c0       	rjmp	.+128    	; 0x1a66 <main_screen+0x1c2>

		GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
		GLCD_GotoXY(4, 31);
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    19e6:	24 e6       	ldi	r18, 0x64	; 100
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t l = 0;

		while(tempDistance){
			tempDistance/=10;
    19f0:	0f 2e       	mov	r0, r31
    19f2:	fa e0       	ldi	r31, 0x0A	; 10
    19f4:	cf 2e       	mov	r12, r31
    19f6:	d1 2c       	mov	r13, r1
    19f8:	e1 2c       	mov	r14, r1
    19fa:	f1 2c       	mov	r15, r1
    19fc:	f0 2d       	mov	r31, r0
    19fe:	ca 01       	movw	r24, r20
    1a00:	b9 01       	movw	r22, r18
    1a02:	a7 01       	movw	r20, r14
    1a04:	96 01       	movw	r18, r12
    1a06:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__udivmodsi4>
			l++;
    1a0a:	cf 5f       	subi	r28, 0xFF	; 255
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

		while(tempDistance){
    1a0c:	21 15       	cp	r18, r1
    1a0e:	31 05       	cpc	r19, r1
    1a10:	41 05       	cpc	r20, r1
    1a12:	51 05       	cpc	r21, r1
    1a14:	a1 f7       	brne	.-24     	; 0x19fe <main_screen+0x15a>
			tempDistance/=10;
			l++;
		}

		int8_t zeros = 6-l;
		if (distance < 100)zeros = 4;
    1a16:	84 e6       	ldi	r24, 0x64	; 100
    1a18:	88 16       	cp	r8, r24
    1a1a:	91 04       	cpc	r9, r1
    1a1c:	a1 04       	cpc	r10, r1
    1a1e:	b1 04       	cpc	r11, r1
    1a20:	18 f5       	brcc	.+70     	; 0x1a68 <main_screen+0x1c4>
    1a22:	d4 e0       	ldi	r29, 0x04	; 4
    1a24:	c0 e0       	ldi	r28, 0x00	; 0
			if (zeros > 0){
				for (int8_t i = 0;i<zeros;i++){
					GLCD_PrintString("0");
    1a26:	8a e6       	ldi	r24, 0x6A	; 106
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
    1a2e:	cf 5f       	subi	r28, 0xFF	; 255
		}

		int8_t zeros = 6-l;
		if (distance < 100)zeros = 4;
			if (zeros > 0){
				for (int8_t i = 0;i<zeros;i++){
    1a30:	cd 17       	cp	r28, r29
    1a32:	cc f3       	brlt	.-14     	; 0x1a26 <main_screen+0x182>
					GLCD_PrintString("0");
				}
			}
		GLCD_PrintDouble((double)distance/100.0,10);
    1a34:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <distance>
    1a38:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <distance+0x1>
    1a3c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <distance+0x2>
    1a40:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <distance+0x3>
    1a44:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	48 ec       	ldi	r20, 0xC8	; 200
    1a4e:	52 e4       	ldi	r21, 0x42	; 66
    1a50:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    1a54:	2a e0       	ldi	r18, 0x0A	; 10
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
		GLCD_Render();
    1a60:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
		}
}
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <main_screen+0x1ce>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

		while(tempDistance){
    1a66:	c0 e0       	ldi	r28, 0x00	; 0
			tempDistance/=10;
			l++;
		}

		int8_t zeros = 6-l;
    1a68:	d6 e0       	ldi	r29, 0x06	; 6
    1a6a:	dc 1b       	sub	r29, r28
		if (distance < 100)zeros = 4;
			if (zeros > 0){
    1a6c:	1d 16       	cp	r1, r29
    1a6e:	14 f7       	brge	.-60     	; 0x1a34 <main_screen+0x190>
    1a70:	d9 cf       	rjmp	.-78     	; 0x1a24 <main_screen+0x180>
				}
			}
		GLCD_PrintDouble((double)distance/100.0,10);
		GLCD_Render();
		}
}
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	bf 90       	pop	r11
    1a82:	af 90       	pop	r10
    1a84:	9f 90       	pop	r9
    1a86:	8f 90       	pop	r8
    1a88:	08 95       	ret

00001a8a <speed_arrow_update>:
			}
	return 0;
}

void speed_arrow_update(){
	newSteps = speedKmh/kmhPerStep;
    1a8a:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <kmhPerStep>
    1a8e:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <kmhPerStep+0x1>
    1a92:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <kmhPerStep+0x2>
    1a96:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <kmhPerStep+0x3>
    1a9a:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <speedKmh>
    1a9e:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <speedKmh+0x1>
    1aa2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <speedKmh+0x2>
    1aa6:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <speedKmh+0x3>
    1aaa:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    1aae:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    1ab2:	70 93 7b 02 	sts	0x027B, r23	; 0x80027b <newSteps+0x1>
    1ab6:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <newSteps>
	int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (how much the arrow should be shifted)
    1aba:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <steps>
    1abe:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <steps+0x1>
    1ac2:	c9 01       	movw	r24, r18
    1ac4:	86 1b       	sub	r24, r22
    1ac6:	97 0b       	sbc	r25, r23
	if (shiftSteps!=0){
    1ac8:	99 f0       	breq	.+38     	; 0x1af0 <speed_arrow_update+0x66>
		if (shiftSteps > 0) dir = 0; else dir = 1;
    1aca:	1a f0       	brmi	.+6      	; 0x1ad2 <speed_arrow_update+0x48>
    1acc:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <dir>
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <speed_arrow_update+0x4e>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <dir>
		arrowMoving = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <arrowMoving>
		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01); //prescaler 1024 (1 tic = 64us)
    1ade:	83 b7       	in	r24, 0x33	; 51
    1ae0:	8d 60       	ori	r24, 0x0D	; 13
    1ae2:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1ae4:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <stepInterval>
    1ae8:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1aea:	89 b7       	in	r24, 0x39	; 57
    1aec:	82 60       	ori	r24, 0x02	; 2
    1aee:	89 bf       	out	0x39, r24	; 57
    1af0:	08 95       	ret

00001af2 <button_monitor>:
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
    1af2:	b5 9b       	sbis	0x16, 5	; 22
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <button_monitor+0xc>
    1af6:	b6 9b       	sbis	0x16, 6	; 22
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <button_monitor+0xc>
    1afa:	b7 99       	sbic	0x16, 7	; 22
    1afc:	2a c0       	rjmp	.+84     	; 0x1b52 <button_monitor+0x60>
		btnPressed = 0;
		return 0;
	}
	else if((!(PINB&_BV(5)))&&(!btnPressed)){
    1afe:	b5 99       	sbic	0x16, 5	; 22
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <button_monitor+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b02:	8f e9       	ldi	r24, 0x9F	; 159
    1b04:	9f e0       	ldi	r25, 0x0F	; 15
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <button_monitor+0x14>
    1b0a:	00 c0       	rjmp	.+0      	; 0x1b0c <button_monitor+0x1a>
    1b0c:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
    1b0e:	86 b3       	in	r24, 0x16	; 22

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b10:	85 fb       	bst	r24, 5
    1b12:	99 27       	eor	r25, r25
    1b14:	90 f9       	bld	r25, 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 27       	eor	r24, r25
    1b1a:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
			btnPressed = 1;
		}
	}
	else if((!(PINB&_BV(6)))&&(!btnPressed)){
    1b1c:	96 b3       	in	r25, 0x16	; 22
    1b1e:	89 2f       	mov	r24, r25
    1b20:	80 74       	andi	r24, 0x40	; 64
    1b22:	96 fd       	sbrc	r25, 6
    1b24:	0a c0       	rjmp	.+20     	; 0x1b3a <button_monitor+0x48>
    1b26:	ef e9       	ldi	r30, 0x9F	; 159
    1b28:	ff e0       	ldi	r31, 0x0F	; 15
    1b2a:	31 97       	sbiw	r30, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <button_monitor+0x38>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <button_monitor+0x3e>
    1b30:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(6))){
    1b32:	b6 99       	sbic	0x16, 6	; 22
    1b34:	13 c0       	rjmp	.+38     	; 0x1b5c <button_monitor+0x6a>
		btnPressed = 2;
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	08 95       	ret
		}
	}
	else if((!(PINB&_BV(7)))&&(!btnPressed)){
    1b3a:	b7 99       	sbic	0x16, 7	; 22
    1b3c:	0c c0       	rjmp	.+24     	; 0x1b56 <button_monitor+0x64>
    1b3e:	8f e9       	ldi	r24, 0x9F	; 159
    1b40:	9f e0       	ldi	r25, 0x0F	; 15
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <button_monitor+0x50>
    1b46:	00 c0       	rjmp	.+0      	; 0x1b48 <button_monitor+0x56>
    1b48:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(7))){
    1b4a:	b7 99       	sbic	0x16, 7	; 22
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <button_monitor+0x68>
		btnPressed = 3;
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	08 95       	ret

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	08 95       	ret
		if (!debugMode)main_screen();
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PINB&_BV(7))){
		btnPressed = 3;
		}
	}
	return btnPressed;
}
    1b5c:	08 95       	ret

00001b5e <arrow_calibration>:
void arrow_calibration(){
	steps = 0;
    1b5e:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <steps+0x1>
    1b62:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <steps>
	phase = 0;
    1b66:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <phase>
	newSteps = smSteps*stepMode/4;	//moving arrow 90 degrees clockwise
    1b6a:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <stepMode>
    1b6e:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <smSteps>
    1b72:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <smSteps+0x1>
    1b76:	42 9f       	mul	r20, r18
    1b78:	c0 01       	movw	r24, r0
    1b7a:	43 9f       	mul	r20, r19
    1b7c:	90 0d       	add	r25, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	96 95       	lsr	r25
    1b82:	87 95       	ror	r24
    1b84:	96 95       	lsr	r25
    1b86:	87 95       	ror	r24
    1b88:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <newSteps+0x1>
    1b8c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <newSteps>
	dir = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <dir>
	arrowMoving = 1;
    1b96:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1b9a:	83 b7       	in	r24, 0x33	; 51
    1b9c:	8d 60       	ori	r24, 0x0D	; 13
    1b9e:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1ba0:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <stepInterval>
    1ba4:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1ba6:	89 b7       	in	r24, 0x39	; 57
    1ba8:	82 60       	ori	r24, 0x02	; 2
    1baa:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1bac:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <arrowMoving>
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	fc cf       	rjmp	.-8      	; 0x1bac <arrow_calibration+0x4e>
    1bb4:	2f ef       	ldi	r18, 0xFF	; 255
    1bb6:	82 e5       	ldi	r24, 0x52	; 82
    1bb8:	97 e0       	ldi	r25, 0x07	; 7
    1bba:	21 50       	subi	r18, 0x01	; 1
    1bbc:	80 40       	sbci	r24, 0x00	; 0
    1bbe:	90 40       	sbci	r25, 0x00	; 0
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <arrow_calibration+0x5c>
    1bc2:	00 c0       	rjmp	.+0      	; 0x1bc4 <arrow_calibration+0x66>
    1bc4:	00 00       	nop
	_delay_ms(150);
	steps = smSteps*stepMode;
    1bc6:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <stepMode>
    1bca:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <smSteps>
    1bce:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <smSteps+0x1>
    1bd2:	42 9f       	mul	r20, r18
    1bd4:	c0 01       	movw	r24, r0
    1bd6:	43 9f       	mul	r20, r19
    1bd8:	90 0d       	add	r25, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <steps+0x1>
    1be0:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1be4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <newSteps+0x1>
    1be8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <newSteps>
	dir = 0;
    1bec:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <dir>
	arrowMoving = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <arrowMoving>
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1bf6:	83 b7       	in	r24, 0x33	; 51
    1bf8:	8d 60       	ori	r24, 0x0D	; 13
    1bfa:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1bfc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <stepInterval>
    1c00:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1c02:	89 b7       	in	r24, 0x39	; 57
    1c04:	82 60       	ori	r24, 0x02	; 2
    1c06:	89 bf       	out	0x39, r24	; 57
	while (arrowMoving);
    1c08:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <arrowMoving>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	fc cf       	rjmp	.-8      	; 0x1c08 <arrow_calibration+0xaa>
	steps = 0;
    1c10:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <steps+0x1>
    1c14:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <steps>
	newSteps = 0;
    1c18:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <newSteps+0x1>
    1c1c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <newSteps>
	arrowCalibrated = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <arrowCalibrated>
    1c26:	08 95       	ret

00001c28 <draw_arrow>:
}

void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1c28:	88 23       	and	r24, r24
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <draw_arrow+0x24>
		GLCD_Clear();
    1c2c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c30:	67 e0       	ldi	r22, 0x07	; 7
    1c32:	86 e1       	ldi	r24, 0x16	; 22
    1c34:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1c38:	2f ef       	ldi	r18, 0xFF	; 255
    1c3a:	47 e3       	ldi	r20, 0x37	; 55
    1c3c:	6c e5       	ldi	r22, 0x5C	; 92
    1c3e:	84 e6       	ldi	r24, 0x64	; 100
    1c40:	90 e1       	ldi	r25, 0x10	; 16
    1c42:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <GLCD_DrawBitmap>
		GLCD_Render();
    1c46:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
    1c4a:	08 95       	ret
		}else{
		GLCD_Clear();
    1c4c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c50:	67 e0       	ldi	r22, 0x07	; 7
    1c52:	86 e1       	ldi	r24, 0x16	; 22
    1c54:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1c58:	2f ef       	ldi	r18, 0xFF	; 255
    1c5a:	47 e3       	ldi	r20, 0x37	; 55
    1c5c:	6c e5       	ldi	r22, 0x5C	; 92
    1c5e:	80 ee       	ldi	r24, 0xE0	; 224
    1c60:	9d e0       	ldi	r25, 0x0D	; 13
    1c62:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <GLCD_DrawBitmap>
		GLCD_Render();
    1c66:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
    1c6a:	08 95       	ret

00001c6c <draw_skull>:
	}
}

void draw_skull (void)
{
	GLCD_Clear();
    1c6c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
	GLCD_GotoXY(27, 7);
    1c70:	67 e0       	ldi	r22, 0x07	; 7
    1c72:	8b e1       	ldi	r24, 0x1B	; 27
    1c74:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
	GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	44 e3       	ldi	r20, 0x34	; 52
    1c7c:	66 e5       	ldi	r22, 0x56	; 86
    1c7e:	88 ee       	ldi	r24, 0xE8	; 232
    1c80:	92 e1       	ldi	r25, 0x12	; 18
    1c82:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <GLCD_DrawBitmap>
	GLCD_Render();
    1c86:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
    1c8a:	08 95       	ret

00001c8c <signal_monitor>:
	if (speedKmh>scaleMax)speedKmh = scaleMax;
}

void signal_monitor(){

		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1c8c:	b4 99       	sbic	0x16, 4	; 22
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <signal_monitor+0x1e>
    1c90:	b3 9b       	sbis	0x16, 3	; 22
    1c92:	0b c0       	rjmp	.+22     	; 0x1caa <signal_monitor+0x1e>
			draw_arrow(0);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <draw_arrow>
			signalOn = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <signalOn>
			signalCounter = 0;
    1ca0:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <signalCounter+0x1>
    1ca4:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <signalCounter>
    1ca8:	21 c0       	rjmp	.+66     	; 0x1cec <signal_monitor+0x60>
		}
		else if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1caa:	b3 99       	sbic	0x16, 3	; 22
    1cac:	0d c0       	rjmp	.+26     	; 0x1cc8 <signal_monitor+0x3c>
    1cae:	b4 9b       	sbis	0x16, 4	; 22
    1cb0:	0b c0       	rjmp	.+22     	; 0x1cc8 <signal_monitor+0x3c>
			draw_arrow(1);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <draw_arrow>
			signalOn = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <signalOn>
			signalCounter = 0;
    1cbe:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <signalCounter+0x1>
    1cc2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <signalCounter>
    1cc6:	12 c0       	rjmp	.+36     	; 0x1cec <signal_monitor+0x60>
		}
		else if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1cc8:	b4 99       	sbic	0x16, 4	; 22
    1cca:	0c c0       	rjmp	.+24     	; 0x1ce4 <signal_monitor+0x58>
    1ccc:	b3 99       	sbic	0x16, 3	; 22
    1cce:	0a c0       	rjmp	.+20     	; 0x1ce4 <signal_monitor+0x58>
			draw_skull();
    1cd0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <draw_skull>
			signalOn = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <signalOn>
			signalCounter = 0;
    1cda:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <signalCounter+0x1>
    1cde:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <signalCounter>
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <signal_monitor+0x60>
		}
		if (signalOn){
    1ce4:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <signalOn>
    1ce8:	88 23       	and	r24, r24
    1cea:	e9 f0       	breq	.+58     	; 0x1d26 <signal_monitor+0x9a>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1cec:	b3 9b       	sbis	0x16, 3	; 22
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <signal_monitor+0x76>
    1cf0:	b4 9b       	sbis	0x16, 4	; 22
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <signal_monitor+0x76>
				GLCD_Clear();
    1cf4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
				GLCD_Render();
    1cf8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
				TIMSK|=_BV(TOIE1);		// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1cfc:	89 b7       	in	r24, 0x39	; 57
    1cfe:	84 60       	ori	r24, 0x04	; 4
    1d00:	89 bf       	out	0x39, r24	; 57
			}							// This is to define if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			if (signalCounter > 300)	// if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1d02:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <signalCounter>
    1d06:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <signalCounter+0x1>
    1d0a:	8d 32       	cpi	r24, 0x2D	; 45
    1d0c:	91 40       	sbci	r25, 0x01	; 1
    1d0e:	58 f0       	brcs	.+22     	; 0x1d26 <signal_monitor+0x9a>
			{
				signalOn = 0;
    1d10:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <signalOn>
				signalCounter = 0;
    1d14:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <signalCounter+0x1>
    1d18:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <signalCounter>
				TIMSK&=~_BV(TOIE1);
    1d1c:	89 b7       	in	r24, 0x39	; 57
    1d1e:	8b 7f       	andi	r24, 0xFB	; 251
    1d20:	89 bf       	out	0x39, r24	; 57
				main_screen();
    1d22:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <main_screen>
    1d26:	08 95       	ret

00001d28 <read_ADC>:
	GLCD_Render();
}

int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
    1d28:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	16 16       	cp	r1, r22
    1d2e:	17 06       	cpc	r1, r23
    1d30:	8c f4       	brge	.+34     	; 0x1d54 <read_ADC+0x2c>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1d3a:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1d3c:	36 99       	sbic	0x06, 6	; 6
    1d3e:	fe cf       	rjmp	.-4      	; 0x1d3c <read_ADC+0x14>
		tmp += ADCW;
    1d40:	44 b1       	in	r20, 0x04	; 4
    1d42:	55 b1       	in	r21, 0x05	; 5
    1d44:	84 0f       	add	r24, r20
    1d46:	95 1f       	adc	r25, r21

int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d48:	2f 5f       	subi	r18, 0xFF	; 255
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	26 17       	cp	r18, r22
    1d4e:	37 07       	cpc	r19, r23
    1d50:	a1 f7       	brne	.-24     	; 0x1d3a <read_ADC+0x12>
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <read_ADC+0x30>
}

int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1d58:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__divmodhi4>
    1d5c:	cb 01       	movw	r24, r22
}
    1d5e:	08 95       	ret

00001d60 <data_monitor>:
				main_screen();
			}
		}

}
void data_monitor(){
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    1d64:	6a e0       	ldi	r22, 0x0A	; 10
    1d66:	84 e0       	ldi	r24, 0x04	; 4
    1d68:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <read_ADC>
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	99 0f       	add	r25, r25
    1d70:	88 0b       	sbc	r24, r24
    1d72:	99 0b       	sbc	r25, r25
    1d74:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__floatsisf>
    1d78:	2a e9       	ldi	r18, 0x9A	; 154
    1d7a:	39 e9       	ldi	r19, 0x99	; 153
    1d7c:	4c ec       	ldi	r20, 0xCC	; 204
    1d7e:	52 e4       	ldi	r21, 0x42	; 66
    1d80:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	50 e4       	ldi	r21, 0x40	; 64
    1d8c:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 ec       	ldi	r20, 0xC0	; 192
    1d96:	50 e4       	ldi	r21, 0x40	; 64
    1d98:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    1d9c:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__fixsfsi>
    1da0:	70 93 75 02 	sts	0x0275, r23	; 0x800275 <newVoltage+0x1>
    1da4:	60 93 74 02 	sts	0x0274, r22	; 0x800274 <newVoltage>
	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    1da8:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <voltage>
    1dac:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <voltage+0x1>
    1db0:	26 17       	cp	r18, r22
    1db2:	37 07       	cpc	r19, r23
    1db4:	51 f0       	breq	.+20     	; 0x1dca <data_monitor+0x6a>
	{
		voltage = newVoltage;
    1db6:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <voltage+0x1>
    1dba:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <voltage>
		if (!debugMode)main_screen();
    1dbe:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <data_monitor+0x6a>
    1dc6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <main_screen>
	}
	newDistance=(round(totalRotations)*circLength)/10.0;
    1dca:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <totalRotations>
    1dce:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <totalRotations+0x1>
    1dd2:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <totalRotations+0x2>
    1dd6:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <totalRotations+0x3>
    1dda:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    1dde:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <round>
    1de2:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <circLength>
    1de6:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <circLength+0x1>
    1dea:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <circLength+0x2>
    1dee:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <circLength+0x3>
    1df2:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    1e02:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    1e06:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <newDistance>
    1e0a:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <newDistance+0x1>
    1e0e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <newDistance+0x2>
    1e12:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <newDistance+0x3>
	if (newDistance!=distance)	//when the distance value changes by 100 meters - update the data on the screen
    1e16:	00 91 6c 02 	lds	r16, 0x026C	; 0x80026c <distance>
    1e1a:	10 91 6d 02 	lds	r17, 0x026D	; 0x80026d <distance+0x1>
    1e1e:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <distance+0x2>
    1e22:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <distance+0x3>
    1e26:	60 17       	cp	r22, r16
    1e28:	71 07       	cpc	r23, r17
    1e2a:	82 07       	cpc	r24, r18
    1e2c:	93 07       	cpc	r25, r19
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <data_monitor+0xec>
	{
		distance = newDistance;
    1e30:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <distance>
    1e34:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <distance+0x1>
    1e38:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <distance+0x2>
    1e3c:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <distance+0x3>
		if (!debugMode)main_screen();
    1e40:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    1e44:	81 11       	cpse	r24, r1
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <data_monitor+0xec>
    1e48:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <main_screen>
	}
}
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	08 95       	ret

00001e52 <eep_operations>:
		tmp += ADCW;
	}
	return tmp/cycles;
}

void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1e52:	8f 92       	push	r8
    1e54:	9f 92       	push	r9
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	ec 01       	movw	r28, r24
    1e66:	e6 2e       	mov	r14, r22

	if (eepAction==EEP_WRITE){
    1e68:	41 30       	cpi	r20, 0x01	; 1
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <eep_operations+0x1c>
    1e6c:	6a c0       	rjmp	.+212    	; 0x1f42 <eep_operations+0xf0>
		eeprom_update_byte((uint8_t*)eepStartAddress,0);
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1e74:	f1 2c       	mov	r15, r1
    1e76:	ce 0d       	add	r28, r14
    1e78:	df 1d       	adc	r29, r15
    1e7a:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <pwmArrow>
    1e7e:	70 91 9e 02 	lds	r23, 0x029E	; 0x80029e <pwmArrow+0x1>
    1e82:	ce 01       	movw	r24, r28
    1e84:	0e 94 8c 28 	call	0x5118	; 0x5118 <eeprom_update_word>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1e88:	ce 0d       	add	r28, r14
    1e8a:	df 1d       	adc	r29, r15
    1e8c:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <pwmDial>
    1e90:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <pwmDial+0x1>
    1e94:	ce 01       	movw	r24, r28
    1e96:	0e 94 8c 28 	call	0x5118	; 0x5118 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1e9a:	ce 0d       	add	r28, r14
    1e9c:	df 1d       	adc	r29, r15
    1e9e:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <scaleMax>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1ea8:	ce 0d       	add	r28, r14
    1eaa:	df 1d       	adc	r29, r15
    1eac:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <stepInterval>
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
		eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1eb6:	ce 0d       	add	r28, r14
    1eb8:	df 1d       	adc	r29, r15
    1eba:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <smSteps>
    1ebe:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <smSteps+0x1>
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	0e 94 8c 28 	call	0x5118	; 0x5118 <eeprom_update_word>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1ec8:	ce 0d       	add	r28, r14
    1eca:	df 1d       	adc	r29, r15
    1ecc:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <lcdContrast>
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1ed6:	ce 0d       	add	r28, r14
    1ed8:	df 1d       	adc	r29, r15
    1eda:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <magnetsOnWheel>
    1ede:	ce 01       	movw	r24, r28
    1ee0:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1ee4:	ce 0d       	add	r28, r14
    1ee6:	df 1d       	adc	r29, r15
    1ee8:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <stepMode>
    1eec:	ce 01       	movw	r24, r28
    1eee:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1ef2:	ce 0d       	add	r28, r14
    1ef4:	df 1d       	adc	r29, r15
    1ef6:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <wheelDiameter>
    1efa:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <wheelDiameter+0x1>
    1efe:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <wheelDiameter+0x2>
    1f02:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <wheelDiameter+0x3>
    1f06:	ce 01       	movw	r24, r28
    1f08:	0e 94 80 28 	call	0x5100	; 0x5100 <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1f0c:	ce 0d       	add	r28, r14
    1f0e:	df 1d       	adc	r29, r15
    1f10:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <gearRatio>
    1f14:	50 91 a5 02 	lds	r21, 0x02A5	; 0x8002a5 <gearRatio+0x1>
    1f18:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <gearRatio+0x2>
    1f1c:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <gearRatio+0x3>
    1f20:	ce 01       	movw	r24, r28
    1f22:	0e 94 80 28 	call	0x5100	; 0x5100 <eeprom_update_dword>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1f26:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <degreesPerKmh>
    1f2a:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <degreesPerKmh+0x1>
    1f2e:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <degreesPerKmh+0x2>
    1f32:	70 91 a2 02 	lds	r23, 0x02A2	; 0x8002a2 <degreesPerKmh+0x3>
    1f36:	c7 01       	movw	r24, r14
    1f38:	8c 0f       	add	r24, r28
    1f3a:	9d 1f       	adc	r25, r29
    1f3c:	0e 94 80 28 	call	0x5100	; 0x5100 <eeprom_update_dword>
    1f40:	58 c1       	rjmp	.+688    	; 0x21f2 <eep_operations+0x3a0>
		}
		if(eepAction==EEP_READ){
    1f42:	41 11       	cpse	r20, r1
    1f44:	52 c1       	rjmp	.+676    	; 0x21ea <eep_operations+0x398>
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f46:	e6 2e       	mov	r14, r22
    1f48:	f1 2c       	mov	r15, r1
    1f4a:	ce 0d       	add	r28, r14
    1f4c:	df 1d       	adc	r29, r15
    1f4e:	ce 01       	movw	r24, r28
    1f50:	0e 94 69 28 	call	0x50d2	; 0x50d2 <eeprom_read_word>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	24 e0       	ldi	r18, 0x04	; 4
    1f58:	92 07       	cpc	r25, r18
    1f5a:	28 f4       	brcc	.+10     	; 0x1f66 <eep_operations+0x114>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
		}
		if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f5c:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <pwmArrow+0x1>
    1f60:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pwmArrow>
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <eep_operations+0x120>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	94 e0       	ldi	r25, 0x04	; 4
    1f6a:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <pwmArrow+0x1>
    1f6e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pwmArrow>
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f72:	ce 0d       	add	r28, r14
    1f74:	df 1d       	adc	r29, r15
    1f76:	ce 01       	movw	r24, r28
    1f78:	0e 94 69 28 	call	0x50d2	; 0x50d2 <eeprom_read_word>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	34 e0       	ldi	r19, 0x04	; 4
    1f80:	93 07       	cpc	r25, r19
    1f82:	28 f4       	brcc	.+10     	; 0x1f8e <eep_operations+0x13c>
		eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
		}
		if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f84:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <pwmDial+0x1>
    1f88:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <pwmDial>
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <eep_operations+0x148>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	94 e0       	ldi	r25, 0x04	; 4
    1f92:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <pwmDial+0x1>
    1f96:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <pwmDial>
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1f9a:	ce 0d       	add	r28, r14
    1f9c:	df 1d       	adc	r29, r15
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <eeprom_read_byte>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
    1fa4:	84 31       	cpi	r24, 0x14	; 20
    1fa6:	18 f0       	brcs	.+6      	; 0x1fae <eep_operations+0x15c>
		if(eepAction==EEP_READ){
		pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fa8:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <scaleMax>
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <eep_operations+0x162>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
    1fae:	8e eb       	ldi	r24, 0xBE	; 190
    1fb0:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <scaleMax>
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fb4:	ce 0d       	add	r28, r14
    1fb6:	df 1d       	adc	r29, r15
    1fb8:	ce 01       	movw	r24, r28
    1fba:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <eeprom_read_byte>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    1fbe:	82 33       	cpi	r24, 0x32	; 50
    1fc0:	18 f0       	brcs	.+6      	; 0x1fc8 <eep_operations+0x176>
		if ((pwmArrow>PWM_ARROW_MAX)||(pwmArrow<PWM_ARROW_MIN))pwmArrow=PWM_ARROW_DEFAULT;
		pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fc2:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <stepInterval>
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <eep_operations+0x17c>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
    1fc8:	86 e9       	ldi	r24, 0x96	; 150
    1fca:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <stepInterval>
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fce:	ce 0d       	add	r28, r14
    1fd0:	df 1d       	adc	r29, r15
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	0e 94 69 28 	call	0x50d2	; 0x50d2 <eeprom_read_word>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    1fd8:	9c 01       	movw	r18, r24
    1fda:	20 51       	subi	r18, 0x10	; 16
    1fdc:	31 09       	sbc	r19, r1
    1fde:	21 38       	cpi	r18, 0x81	; 129
    1fe0:	31 40       	sbci	r19, 0x01	; 1
    1fe2:	28 f4       	brcc	.+10     	; 0x1fee <eep_operations+0x19c>
		if ((pwmDial>PWM_DIAL_MAX)||(pwmDial<PWM_DIAL_MIN))pwmDial=PWM_ARROW_DEFAULT;
		scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1fe4:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <smSteps+0x1>
    1fe8:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <smSteps>
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <eep_operations+0x1a8>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
    1fee:	80 e6       	ldi	r24, 0x60	; 96
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <smSteps+0x1>
    1ff6:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <smSteps>
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1ffa:	ce 0d       	add	r28, r14
    1ffc:	df 1d       	adc	r29, r15
    1ffe:	ce 01       	movw	r24, r28
    2000:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <eeprom_read_byte>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    2004:	82 33       	cpi	r24, 0x32	; 50
    2006:	18 f0       	brcs	.+6      	; 0x200e <eep_operations+0x1bc>
		if ((scaleMax>SCALE_MAX_MAX)||(scaleMax<SCALE_MAX_MIN))scaleMax=SCALE_MAX_DEFAULT;
		stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2008:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <lcdContrast>
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <eep_operations+0x1c2>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
    200e:	86 e9       	ldi	r24, 0x96	; 150
    2010:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <lcdContrast>
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2014:	ce 0d       	add	r28, r14
    2016:	df 1d       	adc	r29, r15
    2018:	ce 01       	movw	r24, r28
    201a:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <eeprom_read_byte>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    201e:	9f ef       	ldi	r25, 0xFF	; 255
    2020:	98 0f       	add	r25, r24
    2022:	90 31       	cpi	r25, 0x10	; 16
    2024:	18 f4       	brcc	.+6      	; 0x202c <eep_operations+0x1da>
		if ((stepInterval>STEP_INTERVAL_MAX)||(stepInterval<STEP_INTERVAL_MIN))stepInterval=STEP_INTERVAL_DEFAULT;
		smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2026:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <magnetsOnWheel>
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <eep_operations+0x1e0>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
    202c:	86 e0       	ldi	r24, 0x06	; 6
    202e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <magnetsOnWheel>
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2032:	ce 0d       	add	r28, r14
    2034:	df 1d       	adc	r29, r15
    2036:	ce 01       	movw	r24, r28
    2038:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <eeprom_read_byte>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    203c:	9f ef       	ldi	r25, 0xFF	; 255
    203e:	98 0f       	add	r25, r24
    2040:	92 30       	cpi	r25, 0x02	; 2
    2042:	18 f4       	brcc	.+6      	; 0x204a <eep_operations+0x1f8>
		if ((smSteps>STEPPER_MOTOR_STEPS_MAX)||(smSteps<STEPPER_MOTOR_STEPS_MIN))smSteps=STEPPER_MOTOR_STEPS_DEFAULT;
		lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    2044:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <stepMode>
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <eep_operations+0x1fe>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <stepMode>
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2050:	ce 0d       	add	r28, r14
    2052:	df 1d       	adc	r29, r15
    2054:	ce 01       	movw	r24, r28
    2056:	0e 94 63 28 	call	0x50c6	; 0x50c6 <eeprom_read_dword>
    205a:	4b 01       	movw	r8, r22
    205c:	5c 01       	movw	r10, r24
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	50 e4       	ldi	r21, 0x40	; 64
    2066:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__gesf2>
    206a:	18 16       	cp	r1, r24
    206c:	9c f0       	brlt	.+38     	; 0x2094 <eep_operations+0x242>
    206e:	2a e9       	ldi	r18, 0x9A	; 154
    2070:	39 e9       	ldi	r19, 0x99	; 153
    2072:	49 e9       	ldi	r20, 0x99	; 153
    2074:	5e e3       	ldi	r21, 0x3E	; 62
    2076:	c5 01       	movw	r24, r10
    2078:	b4 01       	movw	r22, r8
    207a:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    207e:	88 23       	and	r24, r24
    2080:	4c f0       	brlt	.+18     	; 0x2094 <eep_operations+0x242>
		if ((lcdContrast>LCD_CONTRAST_MAX)||(lcdContrast<LCD_CONTRAST_MIN))lcdContrast=STEP_INTERVAL_DEFAULT;
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2082:	80 92 af 02 	sts	0x02AF, r8	; 0x8002af <wheelDiameter>
    2086:	90 92 b0 02 	sts	0x02B0, r9	; 0x8002b0 <wheelDiameter+0x1>
    208a:	a0 92 b1 02 	sts	0x02B1, r10	; 0x8002b1 <wheelDiameter+0x2>
    208e:	b0 92 b2 02 	sts	0x02B2, r11	; 0x8002b2 <wheelDiameter+0x3>
    2092:	0c c0       	rjmp	.+24     	; 0x20ac <eep_operations+0x25a>
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
    2094:	83 e3       	ldi	r24, 0x33	; 51
    2096:	93 e3       	ldi	r25, 0x33	; 51
    2098:	a3 e3       	ldi	r26, 0x33	; 51
    209a:	bf e3       	ldi	r27, 0x3F	; 63
    209c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <wheelDiameter>
    20a0:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <wheelDiameter+0x1>
    20a4:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <wheelDiameter+0x2>
    20a8:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <wheelDiameter+0x3>
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    20ac:	ce 0d       	add	r28, r14
    20ae:	df 1d       	adc	r29, r15
    20b0:	ce 01       	movw	r24, r28
    20b2:	0e 94 63 28 	call	0x50c6	; 0x50c6 <eeprom_read_dword>
    20b6:	4b 01       	movw	r8, r22
    20b8:	5c 01       	movw	r10, r24
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__gesf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	9c f0       	brlt	.+38     	; 0x20f0 <eep_operations+0x29e>
    20ca:	2d ec       	ldi	r18, 0xCD	; 205
    20cc:	3c ec       	ldi	r19, 0xCC	; 204
    20ce:	4c ec       	ldi	r20, 0xCC	; 204
    20d0:	5d e3       	ldi	r21, 0x3D	; 61
    20d2:	c5 01       	movw	r24, r10
    20d4:	b4 01       	movw	r22, r8
    20d6:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    20da:	88 23       	and	r24, r24
    20dc:	4c f0       	brlt	.+18     	; 0x20f0 <eep_operations+0x29e>
		if ((magnetsOnWheel>MAGNETS_ON_WHEEL_MAX)||(magnetsOnWheel<MAGNETS_ON_WHEEL_MIN))magnetsOnWheel=MAGNETS_ON_WHEEL_DEFAULT;
		stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    20de:	80 92 a4 02 	sts	0x02A4, r8	; 0x8002a4 <gearRatio>
    20e2:	90 92 a5 02 	sts	0x02A5, r9	; 0x8002a5 <gearRatio+0x1>
    20e6:	a0 92 a6 02 	sts	0x02A6, r10	; 0x8002a6 <gearRatio+0x2>
    20ea:	b0 92 a7 02 	sts	0x02A7, r11	; 0x8002a7 <gearRatio+0x3>
    20ee:	0c c0       	rjmp	.+24     	; 0x2108 <eep_operations+0x2b6>
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e8       	ldi	r26, 0x80	; 128
    20f6:	bf e3       	ldi	r27, 0x3F	; 63
    20f8:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <gearRatio>
    20fc:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <gearRatio+0x1>
    2100:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <gearRatio+0x2>
    2104:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <gearRatio+0x3>
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    2108:	c7 01       	movw	r24, r14
    210a:	8c 0f       	add	r24, r28
    210c:	9d 1f       	adc	r25, r29
    210e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <eeprom_read_dword>
    2112:	4b 01       	movw	r8, r22
    2114:	5c 01       	movw	r10, r24
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 ea       	ldi	r20, 0xA0	; 160
    211c:	50 e4       	ldi	r21, 0x40	; 64
    211e:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__gesf2>
    2122:	18 16       	cp	r1, r24
    2124:	5c f0       	brlt	.+22     	; 0x213c <eep_operations+0x2ea>
    2126:	2d ec       	ldi	r18, 0xCD	; 205
    2128:	3c ec       	ldi	r19, 0xCC	; 204
    212a:	4c ec       	ldi	r20, 0xCC	; 204
    212c:	5d e3       	ldi	r21, 0x3D	; 61
    212e:	c5 01       	movw	r24, r10
    2130:	b4 01       	movw	r22, r8
    2132:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    2136:	88 23       	and	r24, r24
    2138:	0c f0       	brlt	.+2      	; 0x213c <eep_operations+0x2ea>
    213a:	4e c0       	rjmp	.+156    	; 0x21d8 <eep_operations+0x386>
    213c:	83 e3       	ldi	r24, 0x33	; 51
    213e:	93 e3       	ldi	r25, 0x33	; 51
    2140:	a3 ea       	ldi	r26, 0xA3	; 163
    2142:	bf e3       	ldi	r27, 0x3F	; 63
    2144:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <degreesPerKmh>
    2148:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <degreesPerKmh+0x1>
    214c:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <degreesPerKmh+0x2>
    2150:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <degreesPerKmh+0x3>
    2154:	4e c0       	rjmp	.+156    	; 0x21f2 <eep_operations+0x3a0>
    2156:	f1 2c       	mov	r15, r1
	}
	if (eepAction==EEP_ODOMETER_READ){
    2158:	11 e0       	ldi	r17, 0x01	; 1
		uint32_t tempTotalRotations = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempTotalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    215a:	ce 01       	movw	r24, r28
    215c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <eeprom_read_dword>
			if(tempTotalRotations>totalRotations){
    2160:	80 90 94 02 	lds	r8, 0x0294	; 0x800294 <totalRotations>
    2164:	90 90 95 02 	lds	r9, 0x0295	; 0x800295 <totalRotations+0x1>
    2168:	a0 90 96 02 	lds	r10, 0x0296	; 0x800296 <totalRotations+0x2>
    216c:	b0 90 97 02 	lds	r11, 0x0297	; 0x800297 <totalRotations+0x3>
    2170:	86 16       	cp	r8, r22
    2172:	97 06       	cpc	r9, r23
    2174:	a8 06       	cpc	r10, r24
    2176:	b9 06       	cpc	r11, r25
    2178:	50 f4       	brcc	.+20     	; 0x218e <eep_operations+0x33c>
				totalRotations = tempTotalRotations;
    217a:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <totalRotations>
    217e:	70 93 95 02 	sts	0x0295, r23	; 0x800295 <totalRotations+0x1>
    2182:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <totalRotations+0x2>
    2186:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <totalRotations+0x3>
				odometerCurrentAddress = i + 1;
    218a:	10 93 73 02 	sts	0x0273, r17	; 0x800273 <odometerCurrentAddress>
    218e:	1f 5f       	subi	r17, 0xFF	; 255
    2190:	ce 0d       	add	r28, r14
    2192:	df 1d       	adc	r29, r15
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
		uint32_t tempTotalRotations = 0;
		for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2194:	15 31       	cpi	r17, 0x15	; 21
    2196:	09 f7       	brne	.-62     	; 0x215a <eep_operations+0x308>
    2198:	2c c0       	rjmp	.+88     	; 0x21f2 <eep_operations+0x3a0>
				totalRotations = tempTotalRotations;
				odometerCurrentAddress = i + 1;
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
    219a:	43 30       	cpi	r20, 0x03	; 3
    219c:	51 f5       	brne	.+84     	; 0x21f2 <eep_operations+0x3a0>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
    219e:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <totalRotations>
    21a2:	50 91 95 02 	lds	r21, 0x0295	; 0x800295 <totalRotations+0x1>
    21a6:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <totalRotations+0x2>
    21aa:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <totalRotations+0x3>
    21ae:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <odometerCurrentAddress>
    21b2:	9e 01       	movw	r18, r28
    21b4:	8e 9d       	mul	r24, r14
    21b6:	20 0d       	add	r18, r0
    21b8:	31 1d       	adc	r19, r1
    21ba:	11 24       	eor	r1, r1
    21bc:	c9 01       	movw	r24, r18
    21be:	0e 94 92 28 	call	0x5124	; 0x5124 <eeprom_write_dword>
			odometerCurrentAddress++;
    21c2:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <odometerCurrentAddress>
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    21c8:	84 31       	cpi	r24, 0x14	; 20
    21ca:	18 f4       	brcc	.+6      	; 0x21d2 <eep_operations+0x380>
			}
		}
	}
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
    21cc:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <odometerCurrentAddress>
    21d0:	10 c0       	rjmp	.+32     	; 0x21f2 <eep_operations+0x3a0>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    21d2:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <odometerCurrentAddress>
	}
}
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <eep_operations+0x3a0>
		if ((stepMode>STEP_MODE_MAX)||(stepMode<STEP_MODE_MIN))stepMode=STEP_MODE_DEFAULT;
		wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((wheelDiameter>WHEEL_DIAMETER_MAX)||(wheelDiameter<WHEEL_DIAMETER_MIN))wheelDiameter=WHEEL_DIAMETER_DEFAULT;
		gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
		if ((gearRatio>GEAR_RATIO_MAX)||(gearRatio<GEAR_RATIO_MIN))gearRatio=GEAR_RATIO_DEFAULT;
		degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    21d8:	80 92 9f 02 	sts	0x029F, r8	; 0x80029f <degreesPerKmh>
    21dc:	90 92 a0 02 	sts	0x02A0, r9	; 0x8002a0 <degreesPerKmh+0x1>
    21e0:	a0 92 a1 02 	sts	0x02A1, r10	; 0x8002a1 <degreesPerKmh+0x2>
    21e4:	b0 92 a2 02 	sts	0x02A2, r11	; 0x8002a2 <degreesPerKmh+0x3>
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <eep_operations+0x3a0>
		if ((degreesPerKmh>DEGREES_PER_KMH_MAX)||(degreesPerKmh<DEGREES_PER_KMH_MIN))degreesPerKmh=DEGREES_PER_KMH_DEFAULT;
	}
	if (eepAction==EEP_ODOMETER_READ){
    21ea:	42 30       	cpi	r20, 0x02	; 2
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <eep_operations+0x39e>
    21ee:	b3 cf       	rjmp	.-154    	; 0x2156 <eep_operations+0x304>
    21f0:	d4 cf       	rjmp	.-88     	; 0x219a <eep_operations+0x348>
	if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	bf 90       	pop	r11
    21fe:	af 90       	pop	r10
    2200:	9f 90       	pop	r9
    2202:	8f 90       	pop	r8
    2204:	08 95       	ret

00002206 <presets>:
	 scaleMax	= SCALE_MAX_DEFAULT;
	 stepInterval = STEP_INTERVAL_DEFAULT;
	 smSteps =	STEPPER_MOTOR_STEPS_DEFAULT;
	 stepMode = STEP_MODE_DEFAULT;
}
void presets (void){
    2206:	cf 92       	push	r12
    2208:	df 92       	push	r13
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	cf 93       	push	r28
	DDRA|=_BV(0); //ENABLE 2
    2210:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA|=_BV(1); //PHASE 2
    2212:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA|=_BV(2); //PHASE 1
    2214:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA|=_BV(3); //ENABLE 1
    2216:	d3 9a       	sbi	0x1a, 3	; 26
	DDRD|=_BV(4);//PWM DIAL LIGHT
    2218:	8c 9a       	sbi	0x11, 4	; 17
	DDRD|=_BV(5);//PWM ARROW LIGHT
    221a:	8d 9a       	sbi	0x11, 5	; 17

	PORTA|=_BV(3);//ENABLE 1 high (disabled)
    221c:	db 9a       	sbi	0x1b, 3	; 27
	PORTA|=_BV(0);//ENABLE 2 high (disabled)
    221e:	d8 9a       	sbi	0x1b, 0	; 27

	PORTB|=_BV(5);//internal pull-up for external buttons
    2220:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=_BV(6);
    2222:	c6 9a       	sbi	0x18, 6	; 24
	PORTB|=_BV(7);
    2224:	c7 9a       	sbi	0x18, 7	; 24
	//=======================ADC
	ADCSRA |= _BV(ADEN);
    2226:	37 9a       	sbi	0x06, 7	; 6
	//=======================
	ADCSRA |= _BV(ADPS0);		//
    2228:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    222a:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |= _BV(ADPS2);		//
    222c:	32 9a       	sbi	0x06, 2	; 6
	//=======================
	// reading data from EEPROM
	uint8_t firstEepRead;
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    222e:	88 e0       	ldi	r24, 0x08	; 8
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <eeprom_read_byte>
	if (firstEepRead){
    2236:	88 23       	and	r24, r24
    2238:	89 f0       	breq	.+34     	; 0x225c <presets+0x56>
		default_values();
    223a:	0e 94 09 0b 	call	0x1612	; 0x1612 <default_values>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	64 e0       	ldi	r22, 0x04	; 4
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    224a:	c4 e1       	ldi	r28, 0x14	; 20
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    224c:	43 e0       	ldi	r20, 0x03	; 3
    224e:	64 e0       	ldi	r22, 0x04	; 4
    2250:	80 e8       	ldi	r24, 0x80	; 128
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    2258:	c1 50       	subi	r28, 0x01	; 1
	uint8_t firstEepRead;
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		default_values();
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    225a:	c1 f7       	brne	.-16     	; 0x224c <presets+0x46>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
			}
	}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	64 e0       	ldi	r22, 0x04	; 4
    2260:	88 e0       	ldi	r24, 0x08	; 8
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
	if (odometerCurrentAddress>ODOMETER_EEP_CELLS) odometerCurrentAddress = 0;
    2268:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <odometerCurrentAddress>
    226c:	84 31       	cpi	r24, 0x14	; 20
    226e:	10 f0       	brcs	.+4      	; 0x2274 <presets+0x6e>
    2270:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <odometerCurrentAddress>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    2274:	42 e0       	ldi	r20, 0x02	; 2
    2276:	64 e0       	ldi	r22, 0x04	; 4
    2278:	80 e8       	ldi	r24, 0x80	; 128
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>

	circLength = gearRatio * wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    2280:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <wheelDiameter>
    2284:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <wheelDiameter+0x1>
    2288:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <wheelDiameter+0x2>
    228c:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <wheelDiameter+0x3>
    2290:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <gearRatio>
    2294:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <gearRatio+0x1>
    2298:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <gearRatio+0x2>
    229c:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <gearRatio+0x3>
    22a0:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    22a4:	2b ed       	ldi	r18, 0xDB	; 219
    22a6:	3f e0       	ldi	r19, 0x0F	; 15
    22a8:	49 e4       	ldi	r20, 0x49	; 73
    22aa:	50 e4       	ldi	r21, 0x40	; 64
    22ac:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    22b0:	6b 01       	movw	r12, r22
    22b2:	7c 01       	movw	r14, r24
    22b4:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <magnetsOnWheel>
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__floatsisf>
    22c2:	9b 01       	movw	r18, r22
    22c4:	ac 01       	movw	r20, r24
    22c6:	c7 01       	movw	r24, r14
    22c8:	b6 01       	movw	r22, r12
    22ca:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    22ce:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <circLength>
    22d2:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <circLength+0x1>
    22d6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <circLength+0x2>
    22da:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <circLength+0x3>
	timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    22de:	8d eb       	ldi	r24, 0xBD	; 189
    22e0:	97 e3       	ldi	r25, 0x37	; 55
    22e2:	a6 e8       	ldi	r26, 0x86	; 134
    22e4:	b7 e3       	ldi	r27, 0x37	; 55
    22e6:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <timePerTic>
    22ea:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <timePerTic+0x1>
    22ee:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <timePerTic+0x2>
    22f2:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <timePerTic+0x3>

	TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    22f6:	85 b5       	in	r24, 0x25	; 37
    22f8:	8e 60       	ori	r24, 0x0E	; 14
    22fa:	85 bd       	out	0x25, r24	; 37
	OCR2 = TIC-1; //upper limit of Timer2
    22fc:	8e ef       	ldi	r24, 0xFE	; 254
    22fe:	83 bd       	out	0x23, r24	; 35

	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    2300:	83 ea       	ldi	r24, 0xA3	; 163
    2302:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    2304:	8b e0       	ldi	r24, 0x0B	; 11
    2306:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    2308:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <pwmArrow>
    230c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <pwmArrow+0x1>
    2310:	9b bd       	out	0x2b, r25	; 43
    2312:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    2314:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <pwmDial>
    2318:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <pwmDial+0x1>
    231c:	99 bd       	out	0x29, r25	; 41
    231e:	88 bd       	out	0x28, r24	; 40
	//============================
	kmhPerStep = (360.0/(smSteps*stepMode))/degreesPerKmh;
    2320:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <stepMode>
    2324:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <smSteps>
    2328:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <smSteps+0x1>
    232c:	28 9f       	mul	r18, r24
    232e:	b0 01       	movw	r22, r0
    2330:	29 9f       	mul	r18, r25
    2332:	70 0d       	add	r23, r0
    2334:	11 24       	eor	r1, r1
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    233e:	9b 01       	movw	r18, r22
    2340:	ac 01       	movw	r20, r24
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	84 eb       	ldi	r24, 0xB4	; 180
    2348:	93 e4       	ldi	r25, 0x43	; 67
    234a:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    234e:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <degreesPerKmh>
    2352:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <degreesPerKmh+0x1>
    2356:	40 91 a1 02 	lds	r20, 0x02A1	; 0x8002a1 <degreesPerKmh+0x2>
    235a:	50 91 a2 02 	lds	r21, 0x02A2	; 0x8002a2 <degreesPerKmh+0x3>
    235e:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    2362:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <kmhPerStep>
    2366:	70 93 7d 02 	sts	0x027D, r23	; 0x80027d <kmhPerStep+0x1>
    236a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <kmhPerStep+0x2>
    236e:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <kmhPerStep+0x3>
	//display initialization
	GLCD_Setup();
    2372:	0e 94 25 1c 	call	0x384a	; 0x384a <GLCD_Setup>
	GLCD_Clear();
    2376:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
	GLCD_SetContrast(lcdContrast);
    237a:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <lcdContrast>
    237e:	0e 94 06 1c 	call	0x380c	; 0x380c <GLCD_SetContrast>
	GLCD_Render();
    2382:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
	sei();
    2386:	78 94       	sei
	if (!arrowCalibrated) arrow_calibration();
    2388:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <arrowCalibrated>
    238c:	81 11       	cpse	r24, r1
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <presets+0x18e>
    2390:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <arrow_calibration>
	MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
    2394:	85 b7       	in	r24, 0x35	; 53
    2396:	88 60       	ori	r24, 0x08	; 8
    2398:	85 bf       	out	0x35, r24	; 53
	GICR|=_BV(INT1); //External Interrupt Enable INT1
    239a:	8b b7       	in	r24, 0x3b	; 59
    239c:	80 68       	ori	r24, 0x80	; 128
    239e:	8b bf       	out	0x3b, r24	; 59
}
    23a0:	cf 91       	pop	r28
    23a2:	ff 90       	pop	r15
    23a4:	ef 90       	pop	r14
    23a6:	df 90       	pop	r13
    23a8:	cf 90       	pop	r12
    23aa:	08 95       	ret

000023ac <calculate_speed>:
		OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
		TIMSK|=_BV(OCIE0);
	}
}

void calculate_speed(){
    23ac:	cf 93       	push	r28
	if (speedTimerRough>100)speedTimerPrecise=speedTimerRough*TIC;
    23ae:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <speedTimerRough>
    23b2:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <speedTimerRough+0x1>
    23b6:	85 36       	cpi	r24, 0x65	; 101
    23b8:	91 05       	cpc	r25, r1
    23ba:	70 f0       	brcs	.+28     	; 0x23d8 <calculate_speed+0x2c>
    23bc:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <speedTimerRough>
    23c0:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <speedTimerRough+0x1>
    23c4:	4f ef       	ldi	r20, 0xFF	; 255
    23c6:	42 9f       	mul	r20, r18
    23c8:	c0 01       	movw	r24, r0
    23ca:	43 9f       	mul	r20, r19
    23cc:	90 0d       	add	r25, r0
    23ce:	11 24       	eor	r1, r1
    23d0:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <speedTimerPrecise+0x1>
    23d4:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <speedTimerPrecise>
	if (speedTimerPrecise){
    23d8:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <speedTimerPrecise>
    23dc:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <speedTimerPrecise+0x1>
    23e0:	89 2b       	or	r24, r25
    23e2:	e1 f1       	breq	.+120    	; 0x245c <calculate_speed+0xb0>
				frequency = 1.0/(timePerTic*speedTimerPrecise);
    23e4:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <speedTimerPrecise>
    23e8:	70 91 99 02 	lds	r23, 0x0299	; 0x800299 <speedTimerPrecise+0x1>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    23f4:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <timePerTic>
    23f8:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <timePerTic+0x1>
    23fc:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <timePerTic+0x2>
    2400:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <timePerTic+0x3>
    2404:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    2408:	9b 01       	movw	r18, r22
    240a:	ac 01       	movw	r20, r24
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	80 e8       	ldi	r24, 0x80	; 128
    2412:	9f e3       	ldi	r25, 0x3F	; 63
    2414:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    2418:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <frequency>
    241c:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <frequency+0x1>
    2420:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <frequency+0x2>
    2424:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <frequency+0x3>
				speedKmh = frequency*3.6*circLength;
    2428:	26 e6       	ldi	r18, 0x66	; 102
    242a:	36 e6       	ldi	r19, 0x66	; 102
    242c:	46 e6       	ldi	r20, 0x66	; 102
    242e:	50 e4       	ldi	r21, 0x40	; 64
    2430:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    2434:	9b 01       	movw	r18, r22
    2436:	ac 01       	movw	r20, r24
    2438:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <circLength>
    243c:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <circLength+0x1>
    2440:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <circLength+0x2>
    2444:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <circLength+0x3>
    2448:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    244c:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <speedKmh>
    2450:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <speedKmh+0x1>
    2454:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <speedKmh+0x2>
    2458:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <speedKmh+0x3>
				}
	if(speedTimerRough>MAX_PERIOD){//if Hall sensor was not triggered for too long (MIN_INTERVAL*TIC*0.16us) it means that vehicle does not move
    245c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <speedTimerRough>
    2460:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <speedTimerRough+0x1>
    2464:	8b 3f       	cpi	r24, 0xFB	; 251
    2466:	91 05       	cpc	r25, r1
    2468:	30 f1       	brcs	.+76     	; 0x24b6 <calculate_speed+0x10a>
				TIMSK&=~_BV(OCIE2);
    246a:	89 b7       	in	r24, 0x39	; 57
    246c:	8f 77       	andi	r24, 0x7F	; 127
    246e:	89 bf       	out	0x39, r24	; 57
				TCNT2 = 0;
    2470:	14 bc       	out	0x24, r1	; 36
				speedTimerRough = 0;
    2472:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <speedTimerRough+0x1>
    2476:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <speedTimerRough>
				speedTimerPrecise = 0;
    247a:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <speedTimerPrecise+0x1>
    247e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <speedTimerPrecise>
				speedKmh = 0;
    2482:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <speedKmh>
    2486:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <speedKmh+0x1>
    248a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <speedKmh+0x2>
    248e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <speedKmh+0x3>
				firstMeasure = 0;
    2492:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <firstMeasure>
				frequency = 0;
    2496:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <frequency>
    249a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <frequency+0x1>
    249e:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <frequency+0x2>
    24a2:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <frequency+0x3>
				cli();
    24a6:	f8 94       	cli
				eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    24a8:	43 e0       	ldi	r20, 0x03	; 3
    24aa:	64 e0       	ldi	r22, 0x04	; 4
    24ac:	80 e8       	ldi	r24, 0x80	; 128
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
				sei();
    24b4:	78 94       	sei
	}
	if (speedKmh>scaleMax)speedKmh = scaleMax;
    24b6:	c0 91 9c 02 	lds	r28, 0x029C	; 0x80029c <scaleMax>
    24ba:	6c 2f       	mov	r22, r28
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__floatsisf>
    24c6:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <speedKmh>
    24ca:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <speedKmh+0x1>
    24ce:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <speedKmh+0x2>
    24d2:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <speedKmh+0x3>
    24d6:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    24da:	88 23       	and	r24, r24
    24dc:	74 f4       	brge	.+28     	; 0x24fa <calculate_speed+0x14e>
    24de:	6c 2f       	mov	r22, r28
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    24ea:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <speedKmh>
    24ee:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <speedKmh+0x1>
    24f2:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <speedKmh+0x2>
    24f6:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <speedKmh+0x3>
}
    24fa:	cf 91       	pop	r28
    24fc:	08 95       	ret

000024fe <set_value>:
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
	}
}

uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    24fe:	2f 92       	push	r2
    2500:	3f 92       	push	r3
    2502:	4f 92       	push	r4
    2504:	5f 92       	push	r5
    2506:	6f 92       	push	r6
    2508:	7f 92       	push	r7
    250a:	8f 92       	push	r8
    250c:	9f 92       	push	r9
    250e:	af 92       	push	r10
    2510:	bf 92       	push	r11
    2512:	cf 92       	push	r12
    2514:	df 92       	push	r13
    2516:	ef 92       	push	r14
    2518:	ff 92       	push	r15
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	2e 97       	sbiw	r28, 0x0e	; 14
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	5c 01       	movw	r10, r24
    2534:	4b 01       	movw	r8, r22
    2536:	5a 87       	std	Y+10, r21	; 0x0a
    2538:	49 87       	std	Y+9, r20	; 0x09
    253a:	d2 2e       	mov	r13, r18

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	48 e0       	ldi	r20, 0x08	; 8
    2540:	65 e0       	ldi	r22, 0x05	; 5
    2542:	80 ea       	ldi	r24, 0xA0	; 160
    2544:	9b e0       	ldi	r25, 0x0B	; 11
    2546:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
	GLCD_Clear();
    254a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
	GLCD_GotoLine(1);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(10);
    2554:	8a e0       	ldi	r24, 0x0A	; 10
    2556:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString(text);
    255a:	c8 01       	movw	r24, r16
    255c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoY(24);
    2560:	88 e1       	ldi	r24, 0x18	; 24
    2562:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
	GLCD_GotoX(90);
    2566:	8a e5       	ldi	r24, 0x5A	; 90
    2568:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Edit");
    256c:	8c e6       	ldi	r24, 0x6C	; 108
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoY(36);
    2574:	84 e2       	ldi	r24, 0x24	; 36
    2576:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
	GLCD_GotoX(90);
    257a:	8a e5       	ldi	r24, 0x5A	; 90
    257c:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Back");
    2580:	81 e7       	ldi	r24, 0x71	; 113
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoY(48);
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
	GLCD_GotoX(90);
    258e:	8a e5       	ldi	r24, 0x5A	; 90
    2590:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Save");
    2594:	86 e7       	ldi	r24, 0x76	; 118
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>

	if (tens){
    259c:	dd 20       	and	r13, r13
    259e:	09 f4       	brne	.+2      	; 0x25a2 <set_value+0xa4>
    25a0:	65 c0       	rjmp	.+202    	; 0x266c <set_value+0x16e>
		uint16_t devider = 1;
		for (int8_t i = 0;i<tens;i++){devider*=10;}
    25a2:	2d 2d       	mov	r18, r13
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	12 16       	cp	r1, r18
    25a8:	13 06       	cpc	r1, r19
    25aa:	cc f4       	brge	.+50     	; 0x25de <set_value+0xe0>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	01 e0       	ldi	r16, 0x01	; 1
    25b0:	10 e0       	ldi	r17, 0x00	; 0
    25b2:	a8 01       	movw	r20, r16
    25b4:	44 0f       	add	r20, r20
    25b6:	55 1f       	adc	r21, r21
    25b8:	28 01       	movw	r4, r16
    25ba:	44 0c       	add	r4, r4
    25bc:	55 1c       	adc	r5, r5
    25be:	44 0c       	add	r4, r4
    25c0:	55 1c       	adc	r5, r5
    25c2:	44 0c       	add	r4, r4
    25c4:	55 1c       	adc	r5, r5
    25c6:	8a 01       	movw	r16, r20
    25c8:	04 0d       	add	r16, r4
    25ca:	15 1d       	adc	r17, r5
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	48 2f       	mov	r20, r24
    25d0:	08 2e       	mov	r0, r24
    25d2:	00 0c       	add	r0, r0
    25d4:	55 0b       	sbc	r21, r21
    25d6:	42 17       	cp	r20, r18
    25d8:	53 07       	cpc	r21, r19
    25da:	5c f3       	brlt	.-42     	; 0x25b2 <set_value+0xb4>
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <set_value+0xe4>
    25de:	01 e0       	ldi	r16, 0x01	; 1
    25e0:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_SetFont(Font5x8,5,8,GLCD_Overwrite);
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	48 e0       	ldi	r20, 0x08	; 8
    25e6:	65 e0       	ldi	r22, 0x05	; 5
    25e8:	80 ea       	ldi	r24, 0xA0	; 160
    25ea:	9b e0       	ldi	r25, 0x0B	; 11
    25ec:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
		GLCD_GotoY(40);
    25f0:	88 e2       	ldi	r24, 0x28	; 40
    25f2:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
		GLCD_GotoX(6);
    25f6:	86 e0       	ldi	r24, 0x06	; 6
    25f8:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintString("min:");
    25fc:	8b e7       	ldi	r24, 0x7B	; 123
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		
		GLCD_PrintDouble(minValue/(double)devider,devider);
    2604:	28 01       	movw	r4, r16
    2606:	61 2c       	mov	r6, r1
    2608:	71 2c       	mov	r7, r1
    260a:	c3 01       	movw	r24, r6
    260c:	b2 01       	movw	r22, r4
    260e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    2612:	6d 83       	std	Y+5, r22	; 0x05
    2614:	7e 83       	std	Y+6, r23	; 0x06
    2616:	8f 83       	std	Y+7, r24	; 0x07
    2618:	98 87       	std	Y+8, r25	; 0x08
    261a:	b4 01       	movw	r22, r8
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    2624:	2d 81       	ldd	r18, Y+5	; 0x05
    2626:	3e 81       	ldd	r19, Y+6	; 0x06
    2628:	4f 81       	ldd	r20, Y+7	; 0x07
    262a:	58 85       	ldd	r21, Y+8	; 0x08
    262c:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    2630:	a3 01       	movw	r20, r6
    2632:	92 01       	movw	r18, r4
    2634:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
		GLCD_GotoY(50);
    2638:	82 e3       	ldi	r24, 0x32	; 50
    263a:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
		GLCD_GotoX(6);
    263e:	86 e0       	ldi	r24, 0x06	; 6
    2640:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintString("max:");
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_PrintDouble(maxValue/(double)devider,devider);
    264c:	b5 01       	movw	r22, r10
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    2656:	2d 81       	ldd	r18, Y+5	; 0x05
    2658:	3e 81       	ldd	r19, Y+6	; 0x06
    265a:	4f 81       	ldd	r20, Y+7	; 0x07
    265c:	58 85       	ldd	r21, Y+8	; 0x08
    265e:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    2662:	a3 01       	movw	r20, r6
    2664:	92 01       	movw	r18, r4
    2666:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
    266a:	1e c0       	rjmp	.+60     	; 0x26a8 <set_value+0x1aa>
		}else{
		GLCD_GotoY(40);
    266c:	88 e2       	ldi	r24, 0x28	; 40
    266e:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
		GLCD_GotoX(6);
    2672:	86 e0       	ldi	r24, 0x06	; 6
    2674:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintString("min:");
    2678:	8b e7       	ldi	r24, 0x7B	; 123
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_PrintInteger(minValue);
    2680:	b4 01       	movw	r22, r8
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		GLCD_GotoY(50);
    268a:	82 e3       	ldi	r24, 0x32	; 50
    268c:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
		GLCD_GotoX(6);
    2690:	86 e0       	ldi	r24, 0x06	; 6
    2692:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintString("max:");
    2696:	80 e8       	ldi	r24, 0x80	; 128
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_PrintInteger(maxValue);
    269e:	b5 01       	movw	r22, r10
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    26a8:	29 85       	ldd	r18, Y+9	; 0x09
    26aa:	2b 87       	std	Y+11, r18	; 0x0b
    26ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ae:	3c 87       	std	Y+12, r19	; 0x0c
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}

	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    26b0:	1f ef       	ldi	r17, 0xFF	; 255
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    26b2:	ad 86       	std	Y+13, r10	; 0x0d
    26b4:	be 86       	std	Y+14, r11	; 0x0e
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}

	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    26b6:	0f 2e       	mov	r0, r31
    26b8:	fd e0       	ldi	r31, 0x0D	; 13
    26ba:	cf 2e       	mov	r12, r31
    26bc:	f0 2d       	mov	r31, r0
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
	GLCD_PrintInteger(digitsArr[digitIndex]);
		if ((digitIndex==tens)&&(tens)){
    26be:	ed 2c       	mov	r14, r13
    26c0:	f1 2c       	mov	r15, r1
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    26c2:	0f 2e       	mov	r0, r31
    26c4:	f3 ef       	ldi	r31, 0xF3	; 243
    26c6:	5f 2e       	mov	r5, r31
    26c8:	f0 2d       	mov	r31, r0
		GLCD_PrintString("max:");
		GLCD_PrintInteger(maxValue);
	}
		
restore_initial_value:
	GLCD_GotoY(20);
    26ca:	84 e1       	ldi	r24, 0x14	; 20
    26cc:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
	GLCD_GotoX(5);
    26d0:	85 e0       	ldi	r24, 0x05	; 5
    26d2:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	41 e1       	ldi	r20, 0x11	; 17
    26da:	6c e0       	ldi	r22, 0x0C	; 12
    26dc:	84 e7       	ldi	r24, 0x74	; 116
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	89 2b       	or	r24, r25
    26ea:	99 f0       	breq	.+38     	; 0x2712 <set_value+0x214>
    26ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    26ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    26f0:	41 2c       	mov	r4, r1
		{
		   tempValue = tempValue / 10;
    26f2:	ad ec       	ldi	r26, 0xCD	; 205
    26f4:	bc ec       	ldi	r27, 0xCC	; 204
    26f6:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__umulhisi3>
    26fa:	9c 01       	movw	r18, r24
    26fc:	36 95       	lsr	r19
    26fe:	27 95       	ror	r18
    2700:	36 95       	lsr	r19
    2702:	27 95       	ror	r18
    2704:	36 95       	lsr	r19
    2706:	27 95       	ror	r18
		   valueLength++;
    2708:	43 94       	inc	r4
			newValue += tenPower;
		}
		return newValue;
	}
	
	while(tempValue)       //finding the number of digits for current value
    270a:	21 15       	cp	r18, r1
    270c:	31 05       	cpc	r19, r1
    270e:	89 f7       	brne	.-30     	; 0x26f2 <set_value+0x1f4>
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <set_value+0x216>
	uint8_t valueLength;
	uint8_t maxValueLength;
	int8_t *digitsArr;
	int8_t currentItem = 0;
	tempValue = currValue;
	valueLength = 0;
    2712:	41 2c       	mov	r4, r1
		{
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
    2714:	1c 82       	std	Y+4, r1	; 0x04
	while(tempValue)       //finding the number of digits for maximum value allowed
    2716:	a1 14       	cp	r10, r1
    2718:	b1 04       	cpc	r11, r1
    271a:	09 f4       	brne	.+2      	; 0x271e <set_value+0x220>
    271c:	c2 c1       	rjmp	.+900    	; 0x2aa2 <set_value+0x5a4>
    271e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2720:	3e 85       	ldd	r19, Y+14	; 0x0e
    2722:	01 e0       	ldi	r16, 0x01	; 1
    2724:	01 c0       	rjmp	.+2      	; 0x2728 <set_value+0x22a>
    2726:	08 2f       	mov	r16, r24
		{
			tempValue = tempValue / 10;
    2728:	ad ec       	ldi	r26, 0xCD	; 205
    272a:	bc ec       	ldi	r27, 0xCC	; 204
    272c:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__umulhisi3>
    2730:	9c 01       	movw	r18, r24
    2732:	36 95       	lsr	r19
    2734:	27 95       	ror	r18
    2736:	36 95       	lsr	r19
    2738:	27 95       	ror	r18
    273a:	36 95       	lsr	r19
    273c:	27 95       	ror	r18
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 0f       	add	r24, r16
		   tempValue = tempValue / 10;
		   valueLength++;
		}
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2742:	21 15       	cp	r18, r1
    2744:	31 05       	cpc	r19, r1
    2746:	79 f7       	brne	.-34     	; 0x2726 <set_value+0x228>
    2748:	0c 83       	std	Y+4, r16	; 0x04
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}

	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    274a:	60 2e       	mov	r6, r16
    274c:	71 2c       	mov	r7, r1
    274e:	c3 01       	movw	r24, r6
    2750:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <malloc>
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2758:	1b 82       	std	Y+3, r1	; 0x03
    275a:	16 14       	cp	r1, r6
    275c:	17 04       	cpc	r1, r7
    275e:	0c f0       	brlt	.+2      	; 0x2762 <set_value+0x264>
    2760:	4e c0       	rjmp	.+156    	; 0x27fe <set_value+0x300>
    2762:	eb 85       	ldd	r30, Y+11	; 0x0b
    2764:	fc 85       	ldd	r31, Y+12	; 0x0c
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	20 e0       	ldi	r18, 0x00	; 0
		if (digitIndex<valueLength){
    276c:	44 2d       	mov	r20, r4
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	84 17       	cp	r24, r20
    2772:	95 07       	cpc	r25, r21
    2774:	7c f5       	brge	.+94     	; 0x27d4 <set_value+0x2d6>
			digitsArr[digitIndex] = tempValue % 10;
    2776:	69 80       	ldd	r6, Y+1	; 0x01
    2778:	7a 80       	ldd	r7, Y+2	; 0x02
    277a:	62 0e       	add	r6, r18
    277c:	71 1c       	adc	r7, r1
    277e:	27 fd       	sbrc	r18, 7
    2780:	7a 94       	dec	r7
    2782:	9f 01       	movw	r18, r30
    2784:	ad ec       	ldi	r26, 0xCD	; 205
    2786:	bc ec       	ldi	r27, 0xCC	; 204
    2788:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__umulhisi3>
    278c:	96 95       	lsr	r25
    278e:	87 95       	ror	r24
    2790:	96 95       	lsr	r25
    2792:	87 95       	ror	r24
    2794:	96 95       	lsr	r25
    2796:	87 95       	ror	r24
    2798:	9c 01       	movw	r18, r24
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	82 0f       	add	r24, r18
    27ac:	93 1f       	adc	r25, r19
    27ae:	df 01       	movw	r26, r30
    27b0:	a8 1b       	sub	r26, r24
    27b2:	b9 0b       	sbc	r27, r25
    27b4:	cd 01       	movw	r24, r26
    27b6:	d3 01       	movw	r26, r6
    27b8:	8c 93       	st	X, r24
			tempValue = tempValue / 10;
    27ba:	9f 01       	movw	r18, r30
    27bc:	ad ec       	ldi	r26, 0xCD	; 205
    27be:	bc ec       	ldi	r27, 0xCC	; 204
    27c0:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__umulhisi3>
    27c4:	fc 01       	movw	r30, r24
    27c6:	f6 95       	lsr	r31
    27c8:	e7 95       	ror	r30
    27ca:	f6 95       	lsr	r31
    27cc:	e7 95       	ror	r30
    27ce:	f6 95       	lsr	r31
    27d0:	e7 95       	ror	r30
    27d2:	07 c0       	rjmp	.+14     	; 0x27e2 <set_value+0x2e4>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    27d4:	a9 81       	ldd	r26, Y+1	; 0x01
    27d6:	ba 81       	ldd	r27, Y+2	; 0x02
    27d8:	a2 0f       	add	r26, r18
    27da:	b1 1d       	adc	r27, r1
    27dc:	27 fd       	sbrc	r18, 7
    27de:	ba 95       	dec	r27
    27e0:	1c 92       	st	X, r1
			maxValueLength++;
		}

	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
	tempValue = currValue;
	for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    27e2:	2b 81       	ldd	r18, Y+3	; 0x03
    27e4:	2f 5f       	subi	r18, 0xFF	; 255
    27e6:	2b 83       	std	Y+3, r18	; 0x03
    27e8:	82 2f       	mov	r24, r18
    27ea:	02 2e       	mov	r0, r18
    27ec:	00 0c       	add	r0, r0
    27ee:	99 0b       	sbc	r25, r25
    27f0:	0c 81       	ldd	r16, Y+4	; 0x04
    27f2:	60 2e       	mov	r6, r16
    27f4:	71 2c       	mov	r7, r1
    27f6:	86 15       	cp	r24, r6
    27f8:	97 05       	cpc	r25, r7
    27fa:	0c f4       	brge	.+2      	; 0x27fe <set_value+0x300>
    27fc:	b9 cf       	rjmp	.-142    	; 0x2770 <set_value+0x272>
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}

	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    27fe:	b1 e0       	ldi	r27, 0x01	; 1
    2800:	6b 1a       	sub	r6, r27
    2802:	71 08       	sbc	r7, r1
    2804:	6c 9c       	mul	r6, r12
    2806:	80 2d       	mov	r24, r0
    2808:	11 24       	eor	r1, r1
    280a:	0f 2e       	mov	r0, r31
    280c:	f5 e0       	ldi	r31, 0x05	; 5
    280e:	7f 2e       	mov	r7, r31
    2810:	f0 2d       	mov	r31, r0
    2812:	78 0e       	add	r7, r24
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2814:	01 50       	subi	r16, 0x01	; 1
    2816:	0b 83       	std	Y+3, r16	; 0x03
    2818:	00 23       	and	r16, r16
    281a:	14 f1       	brlt	.+68     	; 0x2860 <set_value+0x362>
	GLCD_PrintInteger(digitsArr[digitIndex]);
    281c:	e9 81       	ldd	r30, Y+1	; 0x01
    281e:	fa 81       	ldd	r31, Y+2	; 0x02
    2820:	e0 0f       	add	r30, r16
    2822:	f1 1d       	adc	r31, r1
    2824:	07 fd       	sbrc	r16, 7
    2826:	fa 95       	dec	r31
    2828:	60 81       	ld	r22, Z
    282a:	06 2e       	mov	r0, r22
    282c:	00 0c       	add	r0, r0
    282e:	77 0b       	sbc	r23, r23
    2830:	88 0b       	sbc	r24, r24
    2832:	99 0b       	sbc	r25, r25
    2834:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		if ((digitIndex==tens)&&(tens)){
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	08 2e       	mov	r0, r24
    283c:	00 0c       	add	r0, r0
    283e:	99 0b       	sbc	r25, r25
    2840:	8e 15       	cp	r24, r14
    2842:	9f 05       	cpc	r25, r15
    2844:	41 f4       	brne	.+16     	; 0x2856 <set_value+0x358>
    2846:	dd 20       	and	r13, r13
    2848:	31 f0       	breq	.+12     	; 0x2856 <set_value+0x358>
			GLCD_PrintString(".");
    284a:	84 e5       	ldi	r24, 0x54	; 84
    284c:	92 e0       	ldi	r25, 0x02	; 2
    284e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
			rectShift+=5;
    2852:	25 e0       	ldi	r18, 0x05	; 5
    2854:	72 0e       	add	r7, r18
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}

	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2856:	0b 81       	ldd	r16, Y+3	; 0x03
    2858:	01 50       	subi	r16, 0x01	; 1
    285a:	0b 83       	std	Y+3, r16	; 0x03
    285c:	00 23       	and	r16, r16
    285e:	f4 f6       	brge	.-68     	; 0x281c <set_value+0x31e>
		if ((digitIndex==tens)&&(tens)){
			GLCD_PrintString(".");
			rectShift+=5;
		}
	}
	GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2860:	4c e0       	ldi	r20, 0x0C	; 12
    2862:	47 0d       	add	r20, r7
    2864:	24 e2       	ldi	r18, 0x24	; 36
    2866:	64 e1       	ldi	r22, 0x14	; 20
    2868:	87 2d       	mov	r24, r7
    286a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <GLCD_InvertRect>
	GLCD_Render();
    286e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
	while (button_monitor());
    2872:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    2876:	81 11       	cpse	r24, r1
    2878:	fc cf       	rjmp	.-8      	; 0x2872 <set_value+0x374>
    287a:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t currentButton = 0;
		while(1){
			currentButton = button_monitor();
    287c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
			if(currentButton){
    2880:	88 23       	and	r24, r24
    2882:	09 f4       	brne	.+2      	; 0x2886 <set_value+0x388>
    2884:	02 c1       	rjmp	.+516    	; 0x2a8a <set_value+0x58c>
				rectShift = 0;
				if (currentButton == 1) {
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	09 f0       	breq	.+2      	; 0x288c <set_value+0x38e>
    288a:	8b c0       	rjmp	.+278    	; 0x29a2 <set_value+0x4a4>
							currentItem++;
    288c:	0f 5f       	subi	r16, 0xFF	; 255
							if (currentItem==maxValueLength){
    288e:	20 2f       	mov	r18, r16
    2890:	00 2e       	mov	r0, r16
    2892:	00 0c       	add	r0, r0
    2894:	33 0b       	sbc	r19, r19
    2896:	8c 81       	ldd	r24, Y+4	; 0x04
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	28 17       	cp	r18, r24
    289c:	39 07       	cpc	r19, r25
    289e:	09 f0       	breq	.+2      	; 0x28a2 <set_value+0x3a4>
    28a0:	ac c0       	rjmp	.+344    	; 0x29fa <set_value+0x4fc>
								currentItem = 0;
								uint16_t checkValue = new_value();
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	1c 01       	movw	r2, r24
    28a8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2934>
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
    28ac:	a8 16       	cp	r10, r24
    28ae:	b9 06       	cpc	r11, r25
    28b0:	08 f4       	brcc	.+2      	; 0x28b4 <set_value+0x3b6>
    28b2:	0b cf       	rjmp	.-490    	; 0x26ca <set_value+0x1cc>
    28b4:	88 15       	cp	r24, r8
    28b6:	99 05       	cpc	r25, r9
    28b8:	08 f4       	brcc	.+2      	; 0x28bc <set_value+0x3be>
    28ba:	07 cf       	rjmp	.-498    	; 0x26ca <set_value+0x1cc>
								//=====
								while(button_monitor());
    28bc:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    28c0:	81 11       	cpse	r24, r1
    28c2:	fc cf       	rjmp	.-8      	; 0x28bc <set_value+0x3be>
								int8_t menuItem = 0;
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
    28c4:	24 e2       	ldi	r18, 0x24	; 36
    28c6:	41 e1       	ldi	r20, 0x11	; 17
    28c8:	64 e1       	ldi	r22, 0x14	; 20
    28ca:	85 e0       	ldi	r24, 0x05	; 5
    28cc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <GLCD_InvertRect>
								currentItem = 0;
								uint16_t checkValue = new_value();
								if((checkValue>maxValue)||(checkValue<minValue))goto restore_initial_value;
								//=====
								while(button_monitor());
								int8_t menuItem = 0;
    28d0:	71 2c       	mov	r7, r1
								GLCD_InvertRect(rectShift+5,20,rectShift+5+12,36);
								while(1){
										currentButton = button_monitor();
    28d2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
										if(currentButton){
    28d6:	88 23       	and	r24, r24
    28d8:	c9 f1       	breq	.+114    	; 0x294c <set_value+0x44e>
											if (currentButton == 3) {
    28da:	83 30       	cpi	r24, 0x03	; 3
    28dc:	39 f4       	brne	.+14     	; 0x28ec <set_value+0x3ee>
												menuItem--;
    28de:	7a 94       	dec	r7
												if (menuItem<0)menuItem = 2;
    28e0:	77 20       	and	r7, r7
    28e2:	a4 f5       	brge	.+104    	; 0x294c <set_value+0x44e>
    28e4:	68 94       	set
    28e6:	77 24       	eor	r7, r7
    28e8:	71 f8       	bld	r7, 1
    28ea:	30 c0       	rjmp	.+96     	; 0x294c <set_value+0x44e>
											}
											else if (currentButton == 2) {
    28ec:	82 30       	cpi	r24, 0x02	; 2
    28ee:	31 f4       	brne	.+12     	; 0x28fc <set_value+0x3fe>
												menuItem++;
    28f0:	73 94       	inc	r7
												if (menuItem>2)menuItem=0;
    28f2:	92 e0       	ldi	r25, 0x02	; 2
    28f4:	97 15       	cp	r25, r7
    28f6:	54 f5       	brge	.+84     	; 0x294c <set_value+0x44e>
    28f8:	71 2c       	mov	r7, r1
    28fa:	28 c0       	rjmp	.+80     	; 0x294c <set_value+0x44e>
											}
											else if (currentButton == 1) {
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	31 f5       	brne	.+76     	; 0x294c <set_value+0x44e>
													if (!menuItem){	//getting back to value edit
    2900:	71 10       	cpse	r7, r1
    2902:	16 c0       	rjmp	.+44     	; 0x2930 <set_value+0x432>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
    2904:	00 e0       	ldi	r16, 0x00	; 0
    2906:	21 e2       	ldi	r18, 0x21	; 33
    2908:	44 e7       	ldi	r20, 0x74	; 116
    290a:	65 e1       	ldi	r22, 0x15	; 21
    290c:	86 e5       	ldi	r24, 0x56	; 86
    290e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
    2912:	2d e2       	ldi	r18, 0x2D	; 45
    2914:	44 e7       	ldi	r20, 0x74	; 116
    2916:	61 e2       	ldi	r22, 0x21	; 33
    2918:	86 e5       	ldi	r24, 0x56	; 86
    291a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
    291e:	29 e3       	ldi	r18, 0x39	; 57
    2920:	44 e7       	ldi	r20, 0x74	; 116
    2922:	6d e2       	ldi	r22, 0x2D	; 45
    2924:	86 e5       	ldi	r24, 0x56	; 86
    2926:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
														GLCD_Render();
    292a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
														break;
    292e:	65 c0       	rjmp	.+202    	; 0x29fa <set_value+0x4fc>
													}
													else if (menuItem == 1){
    2930:	a1 e0       	ldi	r26, 0x01	; 1
    2932:	7a 16       	cp	r7, r26
    2934:	09 f4       	brne	.+2      	; 0x2938 <set_value+0x43a>
    2936:	b2 c0       	rjmp	.+356    	; 0x2a9c <set_value+0x59e>
														return currValue; //if changes discarded - return initial value
													}
													else if (menuItem == 2){
    2938:	b2 e0       	ldi	r27, 0x02	; 2
    293a:	7b 12       	cpse	r7, r27
    293c:	07 c0       	rjmp	.+14     	; 0x294c <set_value+0x44e>
														return new_value();
    293e:	9e 01       	movw	r18, r28
    2940:	2f 5f       	subi	r18, 0xFF	; 255
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	19 01       	movw	r2, r18
    2946:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2934>
    294a:	b7 c0       	rjmp	.+366    	; 0x2aba <set_value+0x5bc>
													}
											}
										}
							for (int8_t i=0;i<3;i++)GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);
    294c:	00 e0       	ldi	r16, 0x00	; 0
    294e:	21 e2       	ldi	r18, 0x21	; 33
    2950:	44 e7       	ldi	r20, 0x74	; 116
    2952:	65 e1       	ldi	r22, 0x15	; 21
    2954:	86 e5       	ldi	r24, 0x56	; 86
    2956:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
    295a:	2d e2       	ldi	r18, 0x2D	; 45
    295c:	44 e7       	ldi	r20, 0x74	; 116
    295e:	61 e2       	ldi	r22, 0x21	; 33
    2960:	86 e5       	ldi	r24, 0x56	; 86
    2962:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
    2966:	29 e3       	ldi	r18, 0x39	; 57
    2968:	44 e7       	ldi	r20, 0x74	; 116
    296a:	6d e2       	ldi	r22, 0x2D	; 45
    296c:	86 e5       	ldi	r24, 0x56	; 86
    296e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
							GLCD_DrawRectangle(86,21+menuItem*12,116,33+menuItem*12,GLCD_Black);
    2972:	67 2d       	mov	r22, r7
    2974:	66 0f       	add	r22, r22
    2976:	67 0d       	add	r22, r7
    2978:	66 0f       	add	r22, r22
    297a:	66 0f       	add	r22, r22
    297c:	21 e2       	ldi	r18, 0x21	; 33
    297e:	26 0f       	add	r18, r22
    2980:	6b 5e       	subi	r22, 0xEB	; 235
    2982:	01 2f       	mov	r16, r17
    2984:	44 e7       	ldi	r20, 0x74	; 116
    2986:	86 e5       	ldi	r24, 0x56	; 86
    2988:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
							GLCD_Render();
    298c:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
							while(button_monitor());
    2990:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    2994:	81 11       	cpse	r24, r1
    2996:	fc cf       	rjmp	.-8      	; 0x2990 <set_value+0x492>
							while(!button_monitor());
    2998:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    299c:	88 23       	and	r24, r24
    299e:	e1 f3       	breq	.-8      	; 0x2998 <set_value+0x49a>
    29a0:	98 cf       	rjmp	.-208    	; 0x28d2 <set_value+0x3d4>
							}//
						}
					}

					if (currentButton == 3) {
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	a1 f4       	brne	.+40     	; 0x29ce <set_value+0x4d0>
						digitsArr[currentItem]++;
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	80 2f       	mov	r24, r16
    29ac:	00 2e       	mov	r0, r16
    29ae:	00 0c       	add	r0, r0
    29b0:	99 0b       	sbc	r25, r25
    29b2:	e8 0f       	add	r30, r24
    29b4:	f9 1f       	adc	r31, r25
    29b6:	20 81       	ld	r18, Z
    29b8:	2f 5f       	subi	r18, 0xFF	; 255
    29ba:	20 83       	st	Z, r18
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	e8 0f       	add	r30, r24
    29c2:	f9 1f       	adc	r31, r25
    29c4:	80 81       	ld	r24, Z
    29c6:	8a 30       	cpi	r24, 0x0A	; 10
    29c8:	c4 f0       	brlt	.+48     	; 0x29fa <set_value+0x4fc>
    29ca:	10 82       	st	Z, r1
    29cc:	16 c0       	rjmp	.+44     	; 0x29fa <set_value+0x4fc>
					}
					else if (currentButton == 2) {
    29ce:	82 30       	cpi	r24, 0x02	; 2
    29d0:	a1 f4       	brne	.+40     	; 0x29fa <set_value+0x4fc>
						digitsArr[currentItem]--;
    29d2:	e9 81       	ldd	r30, Y+1	; 0x01
    29d4:	fa 81       	ldd	r31, Y+2	; 0x02
    29d6:	80 2f       	mov	r24, r16
    29d8:	00 2e       	mov	r0, r16
    29da:	00 0c       	add	r0, r0
    29dc:	99 0b       	sbc	r25, r25
    29de:	e8 0f       	add	r30, r24
    29e0:	f9 1f       	adc	r31, r25
    29e2:	20 81       	ld	r18, Z
    29e4:	21 50       	subi	r18, 0x01	; 1
    29e6:	20 83       	st	Z, r18
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    29e8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ea:	fa 81       	ldd	r31, Y+2	; 0x02
    29ec:	e8 0f       	add	r30, r24
    29ee:	f9 1f       	adc	r31, r25
    29f0:	80 81       	ld	r24, Z
    29f2:	88 23       	and	r24, r24
    29f4:	14 f4       	brge	.+4      	; 0x29fa <set_value+0x4fc>
    29f6:	39 e0       	ldi	r19, 0x09	; 9
    29f8:	30 83       	st	Z, r19
					}
			GLCD_GotoY(20);
    29fa:	84 e1       	ldi	r24, 0x14	; 20
    29fc:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
			GLCD_GotoX(5);
    2a00:	85 e0       	ldi	r24, 0x05	; 5
    2a02:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2a06:	8c 81       	ldd	r24, Y+4	; 0x04
    2a08:	81 50       	subi	r24, 0x01	; 1
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	88 23       	and	r24, r24
    2a0e:	04 f1       	brlt	.+64     	; 0x2a50 <set_value+0x552>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	e8 0f       	add	r30, r24
    2a16:	f1 1d       	adc	r31, r1
    2a18:	87 fd       	sbrc	r24, 7
    2a1a:	fa 95       	dec	r31
    2a1c:	60 81       	ld	r22, Z
    2a1e:	06 2e       	mov	r0, r22
    2a20:	00 0c       	add	r0, r0
    2a22:	77 0b       	sbc	r23, r23
    2a24:	88 0b       	sbc	r24, r24
    2a26:	99 0b       	sbc	r25, r25
    2a28:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	08 2e       	mov	r0, r24
    2a30:	00 0c       	add	r0, r0
    2a32:	99 0b       	sbc	r25, r25
    2a34:	8e 15       	cp	r24, r14
    2a36:	9f 05       	cpc	r25, r15
    2a38:	31 f4       	brne	.+12     	; 0x2a46 <set_value+0x548>
    2a3a:	dd 20       	and	r13, r13
    2a3c:	21 f0       	breq	.+8      	; 0x2a46 <set_value+0x548>
    2a3e:	84 e5       	ldi	r24, 0x54	; 84
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
					}
			GLCD_GotoY(20);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	81 50       	subi	r24, 0x01	; 1
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
    2a4c:	88 23       	and	r24, r24
    2a4e:	04 f7       	brge	.-64     	; 0x2a10 <set_value+0x512>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2a50:	8c 81       	ldd	r24, Y+4	; 0x04
    2a52:	81 50       	subi	r24, 0x01	; 1
    2a54:	05 9d       	mul	r16, r5
    2a56:	90 2d       	mov	r25, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	8c 9d       	mul	r24, r12
    2a5c:	90 0d       	add	r25, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	85 e0       	ldi	r24, 0x05	; 5
    2a62:	89 0f       	add	r24, r25
			if (tens){
    2a64:	dd 20       	and	r13, r13
    2a66:	49 f0       	breq	.+18     	; 0x2a7a <set_value+0x57c>
					if(currentItem<tens){
    2a68:	20 2f       	mov	r18, r16
    2a6a:	00 2e       	mov	r0, r16
    2a6c:	00 0c       	add	r0, r0
    2a6e:	33 0b       	sbc	r19, r19
    2a70:	2e 15       	cp	r18, r14
    2a72:	3f 05       	cpc	r19, r15
    2a74:	14 f4       	brge	.+4      	; 0x2a7a <set_value+0x57c>
						rectShift+=5;
    2a76:	8a e0       	ldi	r24, 0x0A	; 10
    2a78:	89 0f       	add	r24, r25
					}
			}
			GLCD_InvertRect(rectShift,20,rectShift+12,36);
    2a7a:	4c e0       	ldi	r20, 0x0C	; 12
    2a7c:	48 0f       	add	r20, r24
    2a7e:	24 e2       	ldi	r18, 0x24	; 36
    2a80:	64 e1       	ldi	r22, 0x14	; 20
    2a82:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <GLCD_InvertRect>
			GLCD_Render();
    2a86:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
		}
		while(button_monitor());
    2a8a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    2a8e:	81 11       	cpse	r24, r1
    2a90:	fc cf       	rjmp	.-8      	; 0x2a8a <set_value+0x58c>
		while(!button_monitor());
    2a92:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    2a96:	88 23       	and	r24, r24
    2a98:	e1 f3       	breq	.-8      	; 0x2a92 <set_value+0x594>
    2a9a:	f0 ce       	rjmp	.-544    	; 0x287c <set_value+0x37e>
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,21+i*12,116,33+i*12,GLCD_White);}
														GLCD_Render();
														break;
													}
													else if (menuItem == 1){
														return currValue; //if changes discarded - return initial value
    2a9c:	89 85       	ldd	r24, Y+9	; 0x09
    2a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa0:	0c c0       	rjmp	.+24     	; 0x2aba <set_value+0x5bc>
		{
			tempValue = tempValue / 10;
			maxValueLength++;
		}

	digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <malloc>
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}

	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
	for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2aae:	1b 83       	std	Y+3, r17	; 0x03
		}else{
			digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
		}
	}

	int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2ab0:	0f 2e       	mov	r0, r31
    2ab2:	f8 ef       	ldi	r31, 0xF8	; 248
    2ab4:	7f 2e       	mov	r7, r31
    2ab6:	f0 2d       	mov	r31, r0
    2ab8:	d3 ce       	rjmp	.-602    	; 0x2860 <set_value+0x362>
			GLCD_Render();
		}
		while(button_monitor());
		while(!button_monitor());
	}
}
    2aba:	2e 96       	adiw	r28, 0x0e	; 14
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	9f 90       	pop	r9
    2adc:	8f 90       	pop	r8
    2ade:	7f 90       	pop	r7
    2ae0:	6f 90       	pop	r6
    2ae2:	5f 90       	pop	r5
    2ae4:	4f 90       	pop	r4
    2ae6:	3f 90       	pop	r3
    2ae8:	2f 90       	pop	r2
    2aea:	08 95       	ret

00002aec <debug_screen>:
void debug_screen(){
	uint8_t xOfset1 = 4;
	uint8_t xOfset2 = 26;
	uint8_t xOfset3 = 64;
	uint8_t xOfset4 = 90;
	GLCD_Clear();
    2aec:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	48 e0       	ldi	r20, 0x08	; 8
    2af4:	65 e0       	ldi	r22, 0x05	; 5
    2af6:	80 ea       	ldi	r24, 0xA0	; 160
    2af8:	9b e0       	ldi	r25, 0x0B	; 11
    2afa:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
	GLCD_GotoLine(1);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2b04:	84 e0       	ldi	r24, 0x04	; 4
    2b06:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Spd");
    2b0a:	85 e8       	ldi	r24, 0x85	; 133
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2b12:	8a e1       	ldi	r24, 0x1A	; 26
    2b14:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintDouble(speedKmh,10);
    2b18:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <speedKmh>
    2b1c:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <speedKmh+0x1>
    2b20:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <speedKmh+0x2>
    2b24:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <speedKmh+0x3>
    2b28:	2a e0       	ldi	r18, 0x0A	; 10
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2b34:	80 e4       	ldi	r24, 0x40	; 64
    2b36:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Ubt");
    2b3a:	89 e8       	ldi	r24, 0x89	; 137
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2b42:	8a e5       	ldi	r24, 0x5A	; 90
    2b44:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintDouble(newVoltage/10.0,100);
    2b48:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <newVoltage>
    2b4c:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <newVoltage+0x1>
    2b50:	07 2e       	mov	r0, r23
    2b52:	00 0c       	add	r0, r0
    2b54:	88 0b       	sbc	r24, r24
    2b56:	99 0b       	sbc	r25, r25
    2b58:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__floatsisf>
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e2       	ldi	r20, 0x20	; 32
    2b62:	51 e4       	ldi	r21, 0x41	; 65
    2b64:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    2b68:	24 e6       	ldi	r18, 0x64	; 100
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
	
	GLCD_GotoLine(2);
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2b7a:	84 e0       	ldi	r24, 0x04	; 4
    2b7c:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Frq");
    2b80:	8d e8       	ldi	r24, 0x8D	; 141
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2b88:	8a e1       	ldi	r24, 0x1A	; 26
    2b8a:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintDouble(frequency,10);
    2b8e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <frequency>
    2b92:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <frequency+0x1>
    2b96:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <frequency+0x2>
    2b9a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <frequency+0x3>
    2b9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
	
	GLCD_GotoX(xOfset3);
    2baa:	80 e4       	ldi	r24, 0x40	; 64
    2bac:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("StP");
    2bb0:	81 e9       	ldi	r24, 0x91	; 145
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2bb8:	8a e5       	ldi	r24, 0x5A	; 90
    2bba:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerPrecise);
    2bbe:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <speedTimerPrecise>
    2bc2:	70 91 99 02 	lds	r23, 0x0299	; 0x800299 <speedTimerPrecise+0x1>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	
	GLCD_GotoLine(3);
    2bce:	83 e0       	ldi	r24, 0x03	; 3
    2bd0:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Stp");
    2bda:	85 e9       	ldi	r24, 0x95	; 149
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2be2:	8a e1       	ldi	r24, 0x1A	; 26
    2be4:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintInteger(steps);
    2be8:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <steps>
    2bec:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <steps+0x1>
    2bf0:	07 2e       	mov	r0, r23
    2bf2:	00 0c       	add	r0, r0
    2bf4:	88 0b       	sbc	r24, r24
    2bf6:	99 0b       	sbc	r25, r25
    2bf8:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	
	GLCD_GotoX(xOfset3);
    2bfc:	80 e4       	ldi	r24, 0x40	; 64
    2bfe:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("StR");
    2c02:	89 e9       	ldi	r24, 0x99	; 153
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset4);
    2c0a:	8a e5       	ldi	r24, 0x5A	; 90
    2c0c:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintInteger(speedTimerRough);
    2c10:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <speedTimerRough>
    2c14:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <speedTimerRough+0x1>
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	
	GLCD_GotoLine(4);
    2c20:	84 e0       	ldi	r24, 0x04	; 4
    2c22:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c26:	84 e0       	ldi	r24, 0x04	; 4
    2c28:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("nSt");
    2c2c:	8d e9       	ldi	r24, 0x9D	; 157
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c34:	8a e1       	ldi	r24, 0x1A	; 26
    2c36:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintInteger(newSteps);
    2c3a:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <newSteps>
    2c3e:	70 91 7b 02 	lds	r23, 0x027B	; 0x80027b <newSteps+0x1>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	
	GLCD_GotoLine(5);
    2c4a:	85 e0       	ldi	r24, 0x05	; 5
    2c4c:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c50:	84 e0       	ldi	r24, 0x04	; 4
    2c52:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("Phs");
    2c56:	81 ea       	ldi	r24, 0xA1	; 161
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c5e:	8a e1       	ldi	r24, 0x1A	; 26
    2c60:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintInteger(phase);
    2c64:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <phase>
    2c68:	06 2e       	mov	r0, r22
    2c6a:	00 0c       	add	r0, r0
    2c6c:	77 0b       	sbc	r23, r23
    2c6e:	88 0b       	sbc	r24, r24
    2c70:	99 0b       	sbc	r25, r25
    2c72:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	
	GLCD_GotoLine(6);
    2c76:	86 e0       	ldi	r24, 0x06	; 6
    2c78:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
	GLCD_GotoX(xOfset1);
    2c7c:	84 e0       	ldi	r24, 0x04	; 4
    2c7e:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintString("TRt");
    2c82:	85 ea       	ldi	r24, 0xA5	; 165
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	GLCD_GotoX(xOfset2);
    2c8a:	8a e1       	ldi	r24, 0x1A	; 26
    2c8c:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_PrintInteger(totalRotations);
    2c90:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <totalRotations>
    2c94:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <totalRotations+0x1>
    2c98:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <totalRotations+0x2>
    2c9c:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <totalRotations+0x3>
    2ca0:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	
	GLCD_Render();
    2ca4:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
    2ca8:	08 95       	ret

00002caa <main>:
}


int main(void)
{
	presets();
    2caa:	0e 94 03 11 	call	0x2206	; 0x2206 <presets>
	if (!debugMode)main_screen();
    2cae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <main+0x10>
    2cb6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <main_screen>
	while(1){
				data_monitor();
    2cba:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <data_monitor>
				calculate_speed();
    2cbe:	0e 94 d6 11 	call	0x23ac	; 0x23ac <calculate_speed>
				speed_arrow_update();
    2cc2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <speed_arrow_update>
				if(!debugMode)signal_monitor();else debug_screen();
    2cc6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <debugMode>
    2cca:	81 11       	cpse	r24, r1
    2ccc:	03 c0       	rjmp	.+6      	; 0x2cd4 <main+0x2a>
    2cce:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <signal_monitor>
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <main+0x2e>
    2cd4:	0e 94 76 15 	call	0x2aec	; 0x2aec <debug_screen>
				if(button_monitor()) menu_screen();
    2cd8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    2cdc:	88 23       	and	r24, r24
    2cde:	69 f3       	breq	.-38     	; 0x2cba <main+0x10>
    2ce0:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <menu_screen>
    2ce4:	ea cf       	rjmp	.-44     	; 0x2cba <main+0x10>

00002ce6 <menu_screen>:

void menu_screen(){
	uint8_t offset = 85;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
    2ce6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <menuItem.2776>
    2cea:	86 30       	cpi	r24, 0x06	; 6
    2cec:	54 f0       	brlt	.+20     	; 0x2d02 <menu_screen+0x1c>
    2cee:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <__data_end>
    2cf8:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <menuItem.2776>
	if (menuItem < 0){page--;menuItem= 5;}
	if ((page == 2)&&(menuItem > 3)){
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	d9 f4       	brne	.+54     	; 0x2d36 <menu_screen+0x50>
    2d00:	24 c0       	rjmp	.+72     	; 0x2d4a <menu_screen+0x64>
void menu_screen(){
	uint8_t offset = 85;
	static int8_t menuItem;
	static int8_t page;
	if (menuItem > 5){page++;menuItem = 0;}
	if (menuItem < 0){page--;menuItem= 5;}
    2d02:	88 23       	and	r24, r24
    2d04:	5c f4       	brge	.+22     	; 0x2d1c <menu_screen+0x36>
    2d06:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
    2d0a:	81 50       	subi	r24, 0x01	; 1
    2d0c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <__data_end>
    2d10:	95 e0       	ldi	r25, 0x05	; 5
    2d12:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <menuItem.2776>
	if ((page == 2)&&(menuItem > 3)){
    2d16:	82 30       	cpi	r24, 0x02	; 2
    2d18:	71 f4       	brne	.+28     	; 0x2d36 <menu_screen+0x50>
    2d1a:	08 c0       	rjmp	.+16     	; 0x2d2c <menu_screen+0x46>
    2d1c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	49 f4       	brne	.+18     	; 0x2d36 <menu_screen+0x50>
    2d24:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <menuItem.2776>
    2d28:	84 30       	cpi	r24, 0x04	; 4
    2d2a:	7c f0       	brlt	.+30     	; 0x2d4a <menu_screen+0x64>
		page = 0;
    2d2c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__data_end>
		menuItem = 0;
    2d30:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <menuItem.2776>
    2d34:	0a c0       	rjmp	.+20     	; 0x2d4a <menu_screen+0x64>
	}
	if (page<0){page = 2;menuItem = 3;}
    2d36:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
    2d3a:	88 23       	and	r24, r24
    2d3c:	34 f4       	brge	.+12     	; 0x2d4a <menu_screen+0x64>
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <__data_end>
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <menuItem.2776>
	GLCD_Clear();
    2d4a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	48 e0       	ldi	r20, 0x08	; 8
    2d52:	65 e0       	ldi	r22, 0x05	; 5
    2d54:	80 ea       	ldi	r24, 0xA0	; 160
    2d56:	9b e0       	ldi	r25, 0x0B	; 11
    2d58:	0e 94 8d 20 	call	0x411a	; 0x411a <GLCD_SetFont>
	if(page==0){
    2d5c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
    2d60:	81 11       	cpse	r24, r1
    2d62:	89 c0       	rjmp	.+274    	; 0x2e76 <menu_screen+0x190>
		//item 0
		GLCD_GotoX(10);
    2d64:	8a e0       	ldi	r24, 0x0A	; 10
    2d66:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(1);
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Dial PWM");
    2d70:	89 ea       	ldi	r24, 0xA9	; 169
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2d78:	85 e5       	ldi	r24, 0x55	; 85
    2d7a:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(pwmDial);
    2d7e:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <pwmDial>
    2d82:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <pwmDial+0x1>
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 1
		GLCD_GotoX(10);
    2d8e:	8a e0       	ldi	r24, 0x0A	; 10
    2d90:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(2);
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Arrow PWM");
    2d9a:	82 eb       	ldi	r24, 0xB2	; 178
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2da2:	85 e5       	ldi	r24, 0x55	; 85
    2da4:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(pwmArrow);
    2da8:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <pwmArrow>
    2dac:	70 91 9e 02 	lds	r23, 0x029E	; 0x80029e <pwmArrow+0x1>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 2
		GLCD_GotoX(10);
    2db8:	8a e0       	ldi	r24, 0x0A	; 10
    2dba:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(3);
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Wheel D");
    2dc4:	8c eb       	ldi	r24, 0xBC	; 188
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2dcc:	85 e5       	ldi	r24, 0x55	; 85
    2dce:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintDouble(wheelDiameter,1000);
    2dd2:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <wheelDiameter>
    2dd6:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <wheelDiameter+0x1>
    2dda:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <wheelDiameter+0x2>
    2dde:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <wheelDiameter+0x3>
    2de2:	28 ee       	ldi	r18, 0xE8	; 232
    2de4:	33 e0       	ldi	r19, 0x03	; 3
    2de6:	40 e0       	ldi	r20, 0x00	; 0
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
		//item 3
		GLCD_GotoX(10);
    2dee:	8a e0       	ldi	r24, 0x0A	; 10
    2df0:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(4);
    2df4:	84 e0       	ldi	r24, 0x04	; 4
    2df6:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Ratio");
    2dfa:	84 ec       	ldi	r24, 0xC4	; 196
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e02:	85 e5       	ldi	r24, 0x55	; 85
    2e04:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintDouble(gearRatio,1000);
    2e08:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <gearRatio>
    2e0c:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <gearRatio+0x1>
    2e10:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <gearRatio+0x2>
    2e14:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <gearRatio+0x3>
    2e18:	28 ee       	ldi	r18, 0xE8	; 232
    2e1a:	33 e0       	ldi	r19, 0x03	; 3
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
		//item 4
		GLCD_GotoX(10);
    2e24:	8a e0       	ldi	r24, 0x0A	; 10
    2e26:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(5);
    2e2a:	85 e0       	ldi	r24, 0x05	; 5
    2e2c:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Magnets");
    2e30:	8a ec       	ldi	r24, 0xCA	; 202
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e38:	85 e5       	ldi	r24, 0x55	; 85
    2e3a:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(magnetsOnWheel);
    2e3e:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <magnetsOnWheel>
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 5
		GLCD_GotoX(10);
    2e4c:	8a e0       	ldi	r24, 0x0A	; 10
    2e4e:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(6);
    2e52:	86 e0       	ldi	r24, 0x06	; 6
    2e54:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Step mode");
    2e58:	82 ed       	ldi	r24, 0xD2	; 210
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e60:	85 e5       	ldi	r24, 0x55	; 85
    2e62:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(stepMode);
    2e66:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <stepMode>
    2e6a:	70 e0       	ldi	r23, 0x00	; 0
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
    2e74:	aa c0       	rjmp	.+340    	; 0x2fca <menu_screen+0x2e4>
	}

	else if (page==1){
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <menu_screen+0x196>
    2e7a:	7a c0       	rjmp	.+244    	; 0x2f70 <menu_screen+0x28a>
		//item 6
		GLCD_GotoX(10);
    2e7c:	8a e0       	ldi	r24, 0x0A	; 10
    2e7e:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(1);
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Max speed");
    2e88:	8c ed       	ldi	r24, 0xDC	; 220
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2e90:	85 e5       	ldi	r24, 0x55	; 85
    2e92:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(scaleMax);
    2e96:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <scaleMax>
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 7
		GLCD_GotoX(10);
    2ea4:	8a e0       	ldi	r24, 0x0A	; 10
    2ea6:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(2);
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Deg/kmh");
    2eb0:	86 ee       	ldi	r24, 0xE6	; 230
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2eb8:	85 e5       	ldi	r24, 0x55	; 85
    2eba:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintDouble(degreesPerKmh,1000);
    2ebe:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <degreesPerKmh>
    2ec2:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <degreesPerKmh+0x1>
    2ec6:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <degreesPerKmh+0x2>
    2eca:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <degreesPerKmh+0x3>
    2ece:	28 ee       	ldi	r18, 0xE8	; 232
    2ed0:	33 e0       	ldi	r19, 0x03	; 3
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	0e 94 bc 23 	call	0x4778	; 0x4778 <GLCD_PrintDouble>
		//item 8
		GLCD_GotoX(10);
    2eda:	8a e0       	ldi	r24, 0x0A	; 10
    2edc:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(3);
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("SM steps");
    2ee6:	8e ee       	ldi	r24, 0xEE	; 238
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2eee:	85 e5       	ldi	r24, 0x55	; 85
    2ef0:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(smSteps);
    2ef4:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <smSteps>
    2ef8:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <smSteps+0x1>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 9
		GLCD_GotoX(10);
    2f04:	8a e0       	ldi	r24, 0x0A	; 10
    2f06:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(4);
    2f0a:	84 e0       	ldi	r24, 0x04	; 4
    2f0c:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Step inter.");
    2f10:	87 ef       	ldi	r24, 0xF7	; 247
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f18:	85 e5       	ldi	r24, 0x55	; 85
    2f1a:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(stepInterval);
    2f1e:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <stepInterval>
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 10
		GLCD_GotoX(10);
    2f2c:	8a e0       	ldi	r24, 0x0A	; 10
    2f2e:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(5);
    2f32:	85 e0       	ldi	r24, 0x05	; 5
    2f34:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("LCD contrast");
    2f38:	83 e0       	ldi	r24, 0x03	; 3
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f40:	85 e5       	ldi	r24, 0x55	; 85
    2f42:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_PrintInteger(lcdContrast);
    2f46:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <lcdContrast>
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		//item 11
		GLCD_GotoX(10);
    2f54:	8a e0       	ldi	r24, 0x0A	; 10
    2f56:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(6);
    2f5a:	86 e0       	ldi	r24, 0x06	; 6
    2f5c:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Debug mode");
    2f60:	80 e1       	ldi	r24, 0x10	; 16
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f68:	85 e5       	ldi	r24, 0x55	; 85
    2f6a:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
    2f6e:	2d c0       	rjmp	.+90     	; 0x2fca <menu_screen+0x2e4>
	}
	else if (page==2){
    2f70:	82 30       	cpi	r24, 0x02	; 2
    2f72:	59 f5       	brne	.+86     	; 0x2fca <menu_screen+0x2e4>
		//item 12
		GLCD_GotoX(10);
    2f74:	8a e0       	ldi	r24, 0x0A	; 10
    2f76:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(1);
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Calibrate arrow");
    2f80:	8b e1       	ldi	r24, 0x1B	; 27
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		GLCD_GotoX(offset);
    2f88:	85 e5       	ldi	r24, 0x55	; 85
    2f8a:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		//item 13
		GLCD_GotoX(10);
    2f8e:	8a e0       	ldi	r24, 0x0A	; 10
    2f90:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(2);
    2f94:	82 e0       	ldi	r24, 0x02	; 2
    2f96:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Odometer reset");
    2f9a:	8b e2       	ldi	r24, 0x2B	; 43
    2f9c:	91 e0       	ldi	r25, 0x01	; 1
    2f9e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		//item 14
		GLCD_GotoX(10);
    2fa2:	8a e0       	ldi	r24, 0x0A	; 10
    2fa4:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(3);
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Load defaults");
    2fae:	8a e3       	ldi	r24, 0x3A	; 58
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
		//item 15
		GLCD_GotoX(10);
    2fb6:	8a e0       	ldi	r24, 0x0A	; 10
    2fb8:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
		GLCD_GotoLine(4);
    2fbc:	84 e0       	ldi	r24, 0x04	; 4
    2fbe:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
		GLCD_PrintString("Exit");
    2fc2:	88 e4       	ldi	r24, 0x48	; 72
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	}

	GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    2fca:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <menuItem.2776>
    2fce:	66 0f       	add	r22, r22
    2fd0:	66 0f       	add	r22, r22
    2fd2:	66 0f       	add	r22, r22
    2fd4:	2f e0       	ldi	r18, 0x0F	; 15
    2fd6:	26 0f       	add	r18, r22
    2fd8:	69 5f       	subi	r22, 0xF9	; 249
    2fda:	4f e7       	ldi	r20, 0x7F	; 127
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <GLCD_InvertRect>
	GLCD_Render();
    2fe2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
	while (button_monitor());
    2fe6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    2fea:	81 11       	cpse	r24, r1
    2fec:	fc cf       	rjmp	.-8      	; 0x2fe6 <menu_screen+0x300>
	uint8_t currentButton = 0;
	uint16_t newValue = 0;
	while(1){
		currentButton = button_monitor();
    2fee:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
		if(currentButton){
    2ff2:	88 23       	and	r24, r24
    2ff4:	e1 f3       	breq	.-8      	; 0x2fee <menu_screen+0x308>
			if (currentButton == 1){
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	09 f0       	breq	.+2      	; 0x2ffc <menu_screen+0x316>
    2ffa:	4c c3       	rjmp	.+1688   	; 0x3694 <menu_screen+0x9ae>
				switch(menuItem+6*page)		{
    2ffc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
    3000:	08 2e       	mov	r0, r24
    3002:	00 0c       	add	r0, r0
    3004:	99 0b       	sbc	r25, r25
    3006:	fc 01       	movw	r30, r24
    3008:	ee 0f       	add	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	e8 0f       	add	r30, r24
    300e:	f9 1f       	adc	r31, r25
    3010:	ee 0f       	add	r30, r30
    3012:	ff 1f       	adc	r31, r31
    3014:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <menuItem.2776>
    3018:	e8 0f       	add	r30, r24
    301a:	f1 1d       	adc	r31, r1
    301c:	87 fd       	sbrc	r24, 7
    301e:	fa 95       	dec	r31
    3020:	e0 31       	cpi	r30, 0x10	; 16
    3022:	f1 05       	cpc	r31, r1
    3024:	08 f0       	brcs	.+2      	; 0x3028 <menu_screen+0x342>
    3026:	45 c3       	rjmp	.+1674   	; 0x36b2 <menu_screen+0x9cc>
    3028:	e6 5d       	subi	r30, 0xD6	; 214
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__tablejump2__>
					case 0:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_DIAL_MIN,pwmDial,0,"Dial light PWM");
    3030:	40 91 a8 02 	lds	r20, 0x02A8	; 0x8002a8 <pwmDial>
    3034:	50 91 a9 02 	lds	r21, 0x02A9	; 0x8002a9 <pwmDial+0x1>
    3038:	0d e4       	ldi	r16, 0x4D	; 77
    303a:	11 e0       	ldi	r17, 0x01	; 1
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	94 e0       	ldi	r25, 0x04	; 4
    3046:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=pwmDial){
    304a:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <pwmDial>
    304e:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <pwmDial+0x1>
    3052:	82 17       	cp	r24, r18
    3054:	93 07       	cpc	r25, r19
    3056:	09 f4       	brne	.+2      	; 0x305a <menu_screen+0x374>
    3058:	2c c3       	rjmp	.+1624   	; 0x36b2 <menu_screen+0x9cc>
							pwmDial = newValue;
    305a:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <pwmDial+0x1>
    305e:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <pwmDial>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3062:	41 e0       	ldi	r20, 0x01	; 1
    3064:	64 e0       	ldi	r22, 0x04	; 4
    3066:	88 e0       	ldi	r24, 0x08	; 8
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    306e:	21 c3       	rjmp	.+1602   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 1:
					{
						newValue = set_value(PWM_DIAL_MAX,PWM_ARROW_MIN,pwmArrow,0,"Arrow light PWM");
    3070:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <pwmArrow>
    3074:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <pwmArrow+0x1>
    3078:	0c e5       	ldi	r16, 0x5C	; 92
    307a:	11 e0       	ldi	r17, 0x01	; 1
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	94 e0       	ldi	r25, 0x04	; 4
    3086:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=pwmArrow){
    308a:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <pwmArrow>
    308e:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <pwmArrow+0x1>
    3092:	82 17       	cp	r24, r18
    3094:	93 07       	cpc	r25, r19
    3096:	09 f4       	brne	.+2      	; 0x309a <menu_screen+0x3b4>
    3098:	0c c3       	rjmp	.+1560   	; 0x36b2 <menu_screen+0x9cc>
							pwmArrow = newValue;
    309a:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <pwmArrow+0x1>
    309e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <pwmArrow>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	64 e0       	ldi	r22, 0x04	; 4
    30a6:	88 e0       	ldi	r24, 0x08	; 8
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    30ae:	01 c3       	rjmp	.+1538   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 2:
					{
						newValue = set_value(WHEEL_DIAMETER_MAX*1000,WHEEL_DIAMETER_MIN*1000,wheelDiameter*1000,3,"Wheel Diameter (m)");
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a e7       	ldi	r20, 0x7A	; 122
    30b6:	54 e4       	ldi	r21, 0x44	; 68
    30b8:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <wheelDiameter>
    30bc:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <wheelDiameter+0x1>
    30c0:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <wheelDiameter+0x2>
    30c4:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <wheelDiameter+0x3>
    30c8:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    30cc:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    30d0:	0c e6       	ldi	r16, 0x6C	; 108
    30d2:	11 e0       	ldi	r17, 0x01	; 1
    30d4:	23 e0       	ldi	r18, 0x03	; 3
    30d6:	ab 01       	movw	r20, r22
    30d8:	6c e2       	ldi	r22, 0x2C	; 44
    30da:	71 e0       	ldi	r23, 0x01	; 1
    30dc:	80 ed       	ldi	r24, 0xD0	; 208
    30de:	97 e0       	ldi	r25, 0x07	; 7
    30e0:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=wheelDiameter*1000){
    30e4:	bc 01       	movw	r22, r24
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    30ee:	6b 01       	movw	r12, r22
    30f0:	7c 01       	movw	r14, r24
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4a e7       	ldi	r20, 0x7A	; 122
    30f8:	54 e4       	ldi	r21, 0x44	; 68
    30fa:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <wheelDiameter>
    30fe:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <wheelDiameter+0x1>
    3102:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <wheelDiameter+0x2>
    3106:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <wheelDiameter+0x3>
    310a:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    310e:	9b 01       	movw	r18, r22
    3110:	ac 01       	movw	r20, r24
    3112:	c7 01       	movw	r24, r14
    3114:	b6 01       	movw	r22, r12
    3116:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    311a:	88 23       	and	r24, r24
    311c:	09 f4       	brne	.+2      	; 0x3120 <menu_screen+0x43a>
    311e:	c9 c2       	rjmp	.+1426   	; 0x36b2 <menu_screen+0x9cc>
							wheelDiameter = newValue/1000.0;
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	4a e7       	ldi	r20, 0x7A	; 122
    3126:	54 e4       	ldi	r21, 0x44	; 68
    3128:	c7 01       	movw	r24, r14
    312a:	b6 01       	movw	r22, r12
    312c:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    3130:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <wheelDiameter>
    3134:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <wheelDiameter+0x1>
    3138:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <wheelDiameter+0x2>
    313c:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <wheelDiameter+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3140:	41 e0       	ldi	r20, 0x01	; 1
    3142:	64 e0       	ldi	r22, 0x04	; 4
    3144:	88 e0       	ldi	r24, 0x08	; 8
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    314c:	b2 c2       	rjmp	.+1380   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 3:
					{
						newValue = set_value(GEAR_RATIO_MAX*1000,GEAR_RATIO_MIN*1000,gearRatio*1000,3,"Gear ratio");
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a e7       	ldi	r20, 0x7A	; 122
    3154:	54 e4       	ldi	r21, 0x44	; 68
    3156:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <gearRatio>
    315a:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <gearRatio+0x1>
    315e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <gearRatio+0x2>
    3162:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <gearRatio+0x3>
    3166:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    316a:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    316e:	0f e7       	ldi	r16, 0x7F	; 127
    3170:	11 e0       	ldi	r17, 0x01	; 1
    3172:	23 e0       	ldi	r18, 0x03	; 3
    3174:	ab 01       	movw	r20, r22
    3176:	64 e6       	ldi	r22, 0x64	; 100
    3178:	70 e0       	ldi	r23, 0x00	; 0
    317a:	88 ee       	ldi	r24, 0xE8	; 232
    317c:	93 e0       	ldi	r25, 0x03	; 3
    317e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=gearRatio*1000){
    3182:	bc 01       	movw	r22, r24
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    318c:	6b 01       	movw	r12, r22
    318e:	7c 01       	movw	r14, r24
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	4a e7       	ldi	r20, 0x7A	; 122
    3196:	54 e4       	ldi	r21, 0x44	; 68
    3198:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <gearRatio>
    319c:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <gearRatio+0x1>
    31a0:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <gearRatio+0x2>
    31a4:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <gearRatio+0x3>
    31a8:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    31ac:	9b 01       	movw	r18, r22
    31ae:	ac 01       	movw	r20, r24
    31b0:	c7 01       	movw	r24, r14
    31b2:	b6 01       	movw	r22, r12
    31b4:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	09 f4       	brne	.+2      	; 0x31be <menu_screen+0x4d8>
    31bc:	7a c2       	rjmp	.+1268   	; 0x36b2 <menu_screen+0x9cc>
							gearRatio = newValue/1000.0;
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a e7       	ldi	r20, 0x7A	; 122
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	c7 01       	movw	r24, r14
    31c8:	b6 01       	movw	r22, r12
    31ca:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    31ce:	60 93 a4 02 	sts	0x02A4, r22	; 0x8002a4 <gearRatio>
    31d2:	70 93 a5 02 	sts	0x02A5, r23	; 0x8002a5 <gearRatio+0x1>
    31d6:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <gearRatio+0x2>
    31da:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <gearRatio+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	64 e0       	ldi	r22, 0x04	; 4
    31e2:	88 e0       	ldi	r24, 0x08	; 8
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    31ea:	63 c2       	rjmp	.+1222   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 4:
					{
						newValue = set_value(MAGNETS_ON_WHEEL_MAX,MAGNETS_ON_WHEEL_MIN,magnetsOnWheel,0,"Magnets on wheel");
    31ec:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <magnetsOnWheel>
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	0a e8       	ldi	r16, 0x8A	; 138
    31f4:	11 e0       	ldi	r17, 0x01	; 1
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	61 e0       	ldi	r22, 0x01	; 1
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	80 e1       	ldi	r24, 0x10	; 16
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=magnetsOnWheel){
    3204:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <magnetsOnWheel>
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	82 17       	cp	r24, r18
    320c:	93 07       	cpc	r25, r19
    320e:	09 f4       	brne	.+2      	; 0x3212 <menu_screen+0x52c>
    3210:	50 c2       	rjmp	.+1184   	; 0x36b2 <menu_screen+0x9cc>
							magnetsOnWheel = newValue;
    3212:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <magnetsOnWheel>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	64 e0       	ldi	r22, 0x04	; 4
    321a:	88 e0       	ldi	r24, 0x08	; 8
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    3222:	47 c2       	rjmp	.+1166   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 5:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_MODE_MIN,stepMode,0,"1-full, 2-half");
    3224:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <stepMode>
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	0b e9       	ldi	r16, 0x9B	; 155
    322c:	11 e0       	ldi	r17, 0x01	; 1
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	8f ef       	ldi	r24, 0xFF	; 255
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=stepMode){
    323c:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <stepMode>
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	82 17       	cp	r24, r18
    3244:	93 07       	cpc	r25, r19
    3246:	09 f4       	brne	.+2      	; 0x324a <menu_screen+0x564>
    3248:	34 c2       	rjmp	.+1128   	; 0x36b2 <menu_screen+0x9cc>
							stepMode = newValue;
    324a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <stepMode>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	64 e0       	ldi	r22, 0x04	; 4
    3252:	88 e0       	ldi	r24, 0x08	; 8
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    325a:	2b c2       	rjmp	.+1110   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 6:
					{
						newValue = set_value(SCALE_MAX_MAX,SCALE_MAX_MIN,scaleMax,0,"Maximum speed");
    325c:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <scaleMax>
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	0a ea       	ldi	r16, 0xAA	; 170
    3264:	11 e0       	ldi	r17, 0x01	; 1
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	64 e1       	ldi	r22, 0x14	; 20
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	80 e9       	ldi	r24, 0x90	; 144
    326e:	91 e0       	ldi	r25, 0x01	; 1
    3270:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=scaleMax){
    3274:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <scaleMax>
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	82 17       	cp	r24, r18
    327c:	93 07       	cpc	r25, r19
    327e:	09 f4       	brne	.+2      	; 0x3282 <menu_screen+0x59c>
    3280:	18 c2       	rjmp	.+1072   	; 0x36b2 <menu_screen+0x9cc>
							scaleMax = newValue;
    3282:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <scaleMax>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3286:	41 e0       	ldi	r20, 0x01	; 1
    3288:	64 e0       	ldi	r22, 0x04	; 4
    328a:	88 e0       	ldi	r24, 0x08	; 8
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    3292:	0f c2       	rjmp	.+1054   	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 7:
					{
						newValue = set_value(DEGREES_PER_KMH_MAX*1000,DEGREES_PER_KMH_MIN*1000,degreesPerKmh*1000,3,"Degrees per km/h");
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	4a e7       	ldi	r20, 0x7A	; 122
    329a:	54 e4       	ldi	r21, 0x44	; 68
    329c:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <degreesPerKmh>
    32a0:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <degreesPerKmh+0x1>
    32a4:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <degreesPerKmh+0x2>
    32a8:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <degreesPerKmh+0x3>
    32ac:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    32b0:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    32b4:	08 eb       	ldi	r16, 0xB8	; 184
    32b6:	11 e0       	ldi	r17, 0x01	; 1
    32b8:	23 e0       	ldi	r18, 0x03	; 3
    32ba:	ab 01       	movw	r20, r22
    32bc:	64 e6       	ldi	r22, 0x64	; 100
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	88 e8       	ldi	r24, 0x88	; 136
    32c2:	93 e1       	ldi	r25, 0x13	; 19
    32c4:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=degreesPerKmh*1000){
    32c8:	bc 01       	movw	r22, r24
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    32d2:	6b 01       	movw	r12, r22
    32d4:	7c 01       	movw	r14, r24
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4a e7       	ldi	r20, 0x7A	; 122
    32dc:	54 e4       	ldi	r21, 0x44	; 68
    32de:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <degreesPerKmh>
    32e2:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <degreesPerKmh+0x1>
    32e6:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <degreesPerKmh+0x2>
    32ea:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <degreesPerKmh+0x3>
    32ee:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    32f2:	9b 01       	movw	r18, r22
    32f4:	ac 01       	movw	r20, r24
    32f6:	c7 01       	movw	r24, r14
    32f8:	b6 01       	movw	r22, r12
    32fa:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    32fe:	88 23       	and	r24, r24
    3300:	09 f4       	brne	.+2      	; 0x3304 <menu_screen+0x61e>
    3302:	d7 c1       	rjmp	.+942    	; 0x36b2 <menu_screen+0x9cc>
							degreesPerKmh = newValue/1000.0;
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a e7       	ldi	r20, 0x7A	; 122
    330a:	54 e4       	ldi	r21, 0x44	; 68
    330c:	c7 01       	movw	r24, r14
    330e:	b6 01       	movw	r22, r12
    3310:	0e 94 c2 24 	call	0x4984	; 0x4984 <__divsf3>
    3314:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <degreesPerKmh>
    3318:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <degreesPerKmh+0x1>
    331c:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <degreesPerKmh+0x2>
    3320:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <degreesPerKmh+0x3>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	64 e0       	ldi	r22, 0x04	; 4
    3328:	88 e0       	ldi	r24, 0x08	; 8
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    3330:	c0 c1       	rjmp	.+896    	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 8:
					{
						newValue = set_value(STEPPER_MOTOR_STEPS_MAX,STEPPER_MOTOR_STEPS_MIN,smSteps,0,"Stepper motor steps");
    3332:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <smSteps>
    3336:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <smSteps+0x1>
    333a:	09 ec       	ldi	r16, 0xC9	; 201
    333c:	11 e0       	ldi	r17, 0x01	; 1
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	60 e1       	ldi	r22, 0x10	; 16
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	80 e9       	ldi	r24, 0x90	; 144
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=smSteps){
    334c:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <smSteps>
    3350:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <smSteps+0x1>
    3354:	82 17       	cp	r24, r18
    3356:	93 07       	cpc	r25, r19
    3358:	09 f4       	brne	.+2      	; 0x335c <menu_screen+0x676>
    335a:	ab c1       	rjmp	.+854    	; 0x36b2 <menu_screen+0x9cc>
							smSteps = newValue;
    335c:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <smSteps+0x1>
    3360:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <smSteps>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3364:	41 e0       	ldi	r20, 0x01	; 1
    3366:	64 e0       	ldi	r22, 0x04	; 4
    3368:	88 e0       	ldi	r24, 0x08	; 8
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    3370:	a0 c1       	rjmp	.+832    	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 9:
					{
						newValue = set_value(STEP_INTERVAL_MAX,STEP_INTERVAL_MIN,stepInterval,0,"Step interval");
    3372:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <stepInterval>
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	0d ed       	ldi	r16, 0xDD	; 221
    337a:	11 e0       	ldi	r17, 0x01	; 1
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	62 e3       	ldi	r22, 0x32	; 50
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	8f ef       	ldi	r24, 0xFF	; 255
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=stepInterval){
    338a:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <stepInterval>
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	82 17       	cp	r24, r18
    3392:	93 07       	cpc	r25, r19
    3394:	09 f4       	brne	.+2      	; 0x3398 <menu_screen+0x6b2>
    3396:	8d c1       	rjmp	.+794    	; 0x36b2 <menu_screen+0x9cc>
							stepInterval = newValue;
    3398:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <stepInterval>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    339c:	41 e0       	ldi	r20, 0x01	; 1
    339e:	64 e0       	ldi	r22, 0x04	; 4
    33a0:	88 e0       	ldi	r24, 0x08	; 8
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    33a8:	84 c1       	rjmp	.+776    	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 10:
					{
						newValue = set_value(LCD_CONTRAST_MAX,LCD_CONTRAST_MIN,lcdContrast,0,"LCD contrast");
    33aa:	40 91 a3 02 	lds	r20, 0x02A3	; 0x8002a3 <lcdContrast>
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	03 e0       	ldi	r16, 0x03	; 3
    33b2:	11 e0       	ldi	r17, 0x01	; 1
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	62 e3       	ldi	r22, 0x32	; 50
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	8f ef       	ldi	r24, 0xFF	; 255
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 7f 12 	call	0x24fe	; 0x24fe <set_value>
						if (newValue!=lcdContrast){
    33c2:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <lcdContrast>
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	82 17       	cp	r24, r18
    33ca:	93 07       	cpc	r25, r19
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <menu_screen+0x6ea>
    33ce:	71 c1       	rjmp	.+738    	; 0x36b2 <menu_screen+0x9cc>
							lcdContrast = newValue;
    33d0:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <lcdContrast>
							GLCD_SetContrast(lcdContrast);
    33d4:	0e 94 06 1c 	call	0x380c	; 0x380c <GLCD_SetContrast>
							eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	64 e0       	ldi	r22, 0x04	; 4
    33dc:	88 e0       	ldi	r24, 0x08	; 8
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
    33e4:	66 c1       	rjmp	.+716    	; 0x36b2 <menu_screen+0x9cc>
						}
						break;
					}
					case 11:
					{
						debugMode = debugMode^_BV(0);
    33e6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <debugMode>
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	89 27       	eor	r24, r25
    33ee:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <debugMode>
						while (button_monitor());
    33f2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    33f6:	81 11       	cpse	r24, r1
    33f8:	fc cf       	rjmp	.-8      	; 0x33f2 <menu_screen+0x70c>
						main();
    33fa:	0e 94 55 16 	call	0x2caa	; 0x2caa <main>
						break;
					}
					case 12:
					{
						arrow_calibration();
    33fe:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <arrow_calibration>
						break;
    3402:	57 c1       	rjmp	.+686    	; 0x36b2 <menu_screen+0x9cc>
					}
					case 13:
					{
						uint8_t yesOrNo = 0;
												
						GLCD_Clear();
    3404:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
						GLCD_GotoLine(2);
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
						GLCD_GotoX(45);
    340e:	8d e2       	ldi	r24, 0x2D	; 45
    3410:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
						GLCD_PrintString("RESET");
    3414:	8b ee       	ldi	r24, 0xEB	; 235
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
						GLCD_GotoLine(4);
    341c:	84 e0       	ldi	r24, 0x04	; 4
    341e:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
						GLCD_GotoX(34);
    3422:	82 e2       	ldi	r24, 0x22	; 34
    3424:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
						GLCD_PrintString("ODOMETER?");
    3428:	81 ef       	ldi	r24, 0xF1	; 241
    342a:	91 e0       	ldi	r25, 0x01	; 1
    342c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
												
												
						GLCD_GotoLine(6);
    3430:	86 e0       	ldi	r24, 0x06	; 6
    3432:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
						GLCD_GotoX(28);
    3436:	8c e1       	ldi	r24, 0x1C	; 28
    3438:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
						GLCD_PrintString("NO");
    343c:	8b ef       	ldi	r24, 0xFB	; 251
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
						GLCD_GotoX(84);
    3444:	84 e5       	ldi	r24, 0x54	; 84
    3446:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
						GLCD_PrintString("YES");
    344a:	8e ef       	ldi	r24, 0xFE	; 254
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
						arrow_calibration();
						break;
					}
					case 13:
					{
						uint8_t yesOrNo = 0;
    3452:	f1 2c       	mov	r15, r1
						GLCD_PrintString("NO");
						GLCD_GotoX(84);
						GLCD_PrintString("YES");
												
						reset_odometer:
						GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    3454:	0f 2e       	mov	r0, r31
    3456:	fb e3       	ldi	r31, 0x3B	; 59
    3458:	ef 2e       	mov	r14, r31
    345a:	f0 2d       	mov	r31, r0
						GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    345c:	14 e1       	ldi	r17, 0x14	; 20
    345e:	d9 e6       	ldi	r29, 0x69	; 105
						while(button_monitor());
												
						while(1){
							uint8_t button = button_monitor();
							if ((button==2)||(button==3)){
								yesOrNo = yesOrNo^_BV(0);
    3460:	c1 e0       	ldi	r28, 0x01	; 1
						GLCD_PrintString("NO");
						GLCD_GotoX(84);
						GLCD_PrintString("YES");
												
						reset_odometer:
						GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    3462:	fe 9c       	mul	r15, r14
    3464:	80 2d       	mov	r24, r0
    3466:	11 24       	eor	r1, r1
    3468:	4e e2       	ldi	r20, 0x2E	; 46
    346a:	48 0f       	add	r20, r24
    346c:	0f ef       	ldi	r16, 0xFF	; 255
    346e:	29 e3       	ldi	r18, 0x39	; 57
    3470:	6d e2       	ldi	r22, 0x2D	; 45
    3472:	8c 5e       	subi	r24, 0xEC	; 236
    3474:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
						GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    3478:	f1 10       	cpse	r15, r1
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <menu_screen+0x79c>
    347c:	4d 2f       	mov	r20, r29
    347e:	8f e4       	ldi	r24, 0x4F	; 79
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <menu_screen+0x7a0>
    3482:	4e e2       	ldi	r20, 0x2E	; 46
    3484:	81 2f       	mov	r24, r17
    3486:	00 e0       	ldi	r16, 0x00	; 0
    3488:	29 e3       	ldi	r18, 0x39	; 57
    348a:	6d e2       	ldi	r22, 0x2D	; 45
    348c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
						GLCD_Render();
    3490:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
												
												
						while(button_monitor());
    3494:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    3498:	81 11       	cpse	r24, r1
    349a:	fc cf       	rjmp	.-8      	; 0x3494 <menu_screen+0x7ae>
												
						while(1){
							uint8_t button = button_monitor();
    349c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
							if ((button==2)||(button==3)){
    34a0:	9e ef       	ldi	r25, 0xFE	; 254
    34a2:	98 0f       	add	r25, r24
    34a4:	92 30       	cpi	r25, 0x02	; 2
    34a6:	30 f4       	brcc	.+12     	; 0x34b4 <menu_screen+0x7ce>
								yesOrNo = yesOrNo^_BV(0);
    34a8:	fc 26       	eor	r15, r28
								while(button_monitor());
    34aa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    34ae:	81 11       	cpse	r24, r1
    34b0:	fc cf       	rjmp	.-8      	; 0x34aa <menu_screen+0x7c4>
    34b2:	d7 cf       	rjmp	.-82     	; 0x3462 <menu_screen+0x77c>
								goto reset_odometer;
							}
							else if(button==1){
    34b4:	81 30       	cpi	r24, 0x01	; 1
    34b6:	91 f7       	brne	.-28     	; 0x349c <menu_screen+0x7b6>
								if (yesOrNo){
    34b8:	ff 20       	and	r15, r15
    34ba:	09 f4       	brne	.+2      	; 0x34be <menu_screen+0x7d8>
    34bc:	fa c0       	rjmp	.+500    	; 0x36b2 <menu_screen+0x9cc>
									GLCD_Clear();
    34be:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
									GLCD_GotoLine(1);
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
									GLCD_GotoX(8);
    34c8:	88 e0       	ldi	r24, 0x08	; 8
    34ca:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
									GLCD_PrintString("RESETING ODOMETER");
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	92 e0       	ldi	r25, 0x02	; 2
    34d2:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
															
									GLCD_GotoLine(3);
    34d6:	83 e0       	ldi	r24, 0x03	; 3
    34d8:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
									GLCD_GotoX(2);
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
									GLCD_PrintString("Cells cleared");
    34e2:	84 e1       	ldi	r24, 0x14	; 20
    34e4:	92 e0       	ldi	r25, 0x02	; 2
    34e6:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
															
									GLCD_Render();
    34ea:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
									//GLCD_GotoLine(4);
															
									//odometer reset
									totalRotations = 0;
    34ee:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <totalRotations>
    34f2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <totalRotations+0x1>
    34f6:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <totalRotations+0x2>
    34fa:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <totalRotations+0x3>
    34fe:	c1 2c       	mov	r12, r1
    3500:	d1 2c       	mov	r13, r1
    3502:	76 01       	movw	r14, r12
    3504:	c3 94       	inc	r12
									for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
										eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    3506:	43 e0       	ldi	r20, 0x03	; 3
    3508:	64 e0       	ldi	r22, 0x04	; 4
    350a:	80 e8       	ldi	r24, 0x80	; 128
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
									GLCD_GotoX(83);
    3512:	83 e5       	ldi	r24, 0x53	; 83
    3514:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
									GLCD_PrintInteger(i+1);
    3518:	c7 01       	movw	r24, r14
    351a:	b6 01       	movw	r22, r12
    351c:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
									GLCD_PrintString("/");
    3520:	82 e2       	ldi	r24, 0x22	; 34
    3522:	92 e0       	ldi	r25, 0x02	; 2
    3524:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
									GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
    3528:	64 e1       	ldi	r22, 0x14	; 20
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
									GLCD_Render();
    3534:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
    3538:	8f ef       	ldi	r24, 0xFF	; 255
    353a:	c8 1a       	sub	r12, r24
    353c:	d8 0a       	sbc	r13, r24
    353e:	e8 0a       	sbc	r14, r24
    3540:	f8 0a       	sbc	r15, r24
									GLCD_Render();
									//GLCD_GotoLine(4);
															
									//odometer reset
									totalRotations = 0;
									for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    3542:	85 e1       	ldi	r24, 0x15	; 21
    3544:	c8 16       	cp	r12, r24
    3546:	d1 04       	cpc	r13, r1
    3548:	e1 04       	cpc	r14, r1
    354a:	f1 04       	cpc	r15, r1
    354c:	e1 f6       	brne	.-72     	; 0x3506 <menu_screen+0x820>
									GLCD_PrintString("/");
									GLCD_PrintInteger(ODOMETER_EEP_CELLS+1);
									GLCD_Render();
									}
															
									GLCD_GotoLine(6);
    354e:	86 e0       	ldi	r24, 0x06	; 6
    3550:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
									GLCD_GotoX(45);
    3554:	8d e2       	ldi	r24, 0x2D	; 45
    3556:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
									GLCD_PrintString("DONE!");
    355a:	84 e2       	ldi	r24, 0x24	; 36
    355c:	92 e0       	ldi	r25, 0x02	; 2
    355e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
									GLCD_Render();
    3562:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
									while(button_monitor());
    3566:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    356a:	81 11       	cpse	r24, r1
    356c:	fc cf       	rjmp	.-8      	; 0x3566 <menu_screen+0x880>
									while(!button_monitor());
    356e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    3572:	88 23       	and	r24, r24
    3574:	e1 f3       	breq	.-8      	; 0x356e <menu_screen+0x888>
    3576:	9d c0       	rjmp	.+314    	; 0x36b2 <menu_screen+0x9cc>
					case 14:
					{
					//load defaults
					uint8_t yesOrNo = 0;
											
					GLCD_Clear();
    3578:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
					GLCD_GotoLine(2);
    357c:	82 e0       	ldi	r24, 0x02	; 2
    357e:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
					GLCD_GotoX(40);
    3582:	88 e2       	ldi	r24, 0x28	; 40
    3584:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
					GLCD_PrintString("RESTORE");
    3588:	8a e2       	ldi	r24, 0x2A	; 42
    358a:	92 e0       	ldi	r25, 0x02	; 2
    358c:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
					GLCD_GotoLine(4);
    3590:	84 e0       	ldi	r24, 0x04	; 4
    3592:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
					GLCD_GotoX(20);
    3596:	84 e1       	ldi	r24, 0x14	; 20
    3598:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
					GLCD_PrintString("DEFAULT values?");
    359c:	82 e3       	ldi	r24, 0x32	; 50
    359e:	92 e0       	ldi	r25, 0x02	; 2
    35a0:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
											
											
					GLCD_GotoLine(6);
    35a4:	86 e0       	ldi	r24, 0x06	; 6
    35a6:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
					GLCD_GotoX(28);
    35aa:	8c e1       	ldi	r24, 0x1C	; 28
    35ac:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
					GLCD_PrintString("NO");
    35b0:	8b ef       	ldi	r24, 0xFB	; 251
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
					GLCD_GotoX(84);
    35b8:	84 e5       	ldi	r24, 0x54	; 84
    35ba:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
					GLCD_PrintString("YES");
    35be:	8e ef       	ldi	r24, 0xFE	; 254
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
						break;
					}
					case 14:
					{
					//load defaults
					uint8_t yesOrNo = 0;
    35c6:	f1 2c       	mov	r15, r1
					GLCD_PrintString("NO");
					GLCD_GotoX(84);
					GLCD_PrintString("YES");
											
	restore_defaults:
					GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    35c8:	0f 2e       	mov	r0, r31
    35ca:	fb e3       	ldi	r31, 0x3B	; 59
    35cc:	ef 2e       	mov	r14, r31
    35ce:	f0 2d       	mov	r31, r0
					GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    35d0:	c4 e1       	ldi	r28, 0x14	; 20
    35d2:	19 e6       	ldi	r17, 0x69	; 105
					while(button_monitor());
											
					while(1){
						uint8_t button = button_monitor();
						if ((button==2)||(button==3)){
							yesOrNo = yesOrNo^_BV(0);
    35d4:	d1 e0       	ldi	r29, 0x01	; 1
					GLCD_PrintString("NO");
					GLCD_GotoX(84);
					GLCD_PrintString("YES");
											
	restore_defaults:
					GLCD_DrawRectangle(20+59*yesOrNo,45,46+59*yesOrNo, 57,GLCD_Black);
    35d6:	fe 9c       	mul	r15, r14
    35d8:	80 2d       	mov	r24, r0
    35da:	11 24       	eor	r1, r1
    35dc:	4e e2       	ldi	r20, 0x2E	; 46
    35de:	48 0f       	add	r20, r24
    35e0:	0f ef       	ldi	r16, 0xFF	; 255
    35e2:	29 e3       	ldi	r18, 0x39	; 57
    35e4:	6d e2       	ldi	r22, 0x2D	; 45
    35e6:	8c 5e       	subi	r24, 0xEC	; 236
    35e8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
					GLCD_DrawRectangle(20+59*!yesOrNo,45,46+59*!yesOrNo, 57,GLCD_White);
    35ec:	f1 10       	cpse	r15, r1
    35ee:	03 c0       	rjmp	.+6      	; 0x35f6 <menu_screen+0x910>
    35f0:	41 2f       	mov	r20, r17
    35f2:	8f e4       	ldi	r24, 0x4F	; 79
    35f4:	02 c0       	rjmp	.+4      	; 0x35fa <menu_screen+0x914>
    35f6:	4e e2       	ldi	r20, 0x2E	; 46
    35f8:	8c 2f       	mov	r24, r28
    35fa:	00 e0       	ldi	r16, 0x00	; 0
    35fc:	29 e3       	ldi	r18, 0x39	; 57
    35fe:	6d e2       	ldi	r22, 0x2D	; 45
    3600:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GLCD_DrawRectangle>
					GLCD_Render();
    3604:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
											
											
					while(button_monitor());
    3608:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    360c:	81 11       	cpse	r24, r1
    360e:	fc cf       	rjmp	.-8      	; 0x3608 <menu_screen+0x922>
											
					while(1){
						uint8_t button = button_monitor();
    3610:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
						if ((button==2)||(button==3)){
    3614:	9e ef       	ldi	r25, 0xFE	; 254
    3616:	98 0f       	add	r25, r24
    3618:	92 30       	cpi	r25, 0x02	; 2
    361a:	30 f4       	brcc	.+12     	; 0x3628 <menu_screen+0x942>
							yesOrNo = yesOrNo^_BV(0);
    361c:	fd 26       	eor	r15, r29
							while(button_monitor());
    361e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    3622:	81 11       	cpse	r24, r1
    3624:	fc cf       	rjmp	.-8      	; 0x361e <menu_screen+0x938>
    3626:	d7 cf       	rjmp	.-82     	; 0x35d6 <menu_screen+0x8f0>
							goto restore_defaults;
						}
						else if(button==1){
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	91 f7       	brne	.-28     	; 0x3610 <menu_screen+0x92a>
							if (yesOrNo){
    362c:	ff 20       	and	r15, r15
    362e:	09 f4       	brne	.+2      	; 0x3632 <menu_screen+0x94c>
    3630:	40 c0       	rjmp	.+128    	; 0x36b2 <menu_screen+0x9cc>
								GLCD_Clear();
    3632:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <GLCD_Clear>
								GLCD_GotoLine(3);
    3636:	83 e0       	ldi	r24, 0x03	; 3
    3638:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
								GLCD_GotoX(8);
    363c:	88 e0       	ldi	r24, 0x08	; 8
    363e:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
								GLCD_PrintString("LOADING DEFAULTS...");
    3642:	82 e4       	ldi	r24, 0x42	; 66
    3644:	92 e0       	ldi	r25, 0x02	; 2
    3646:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
								GLCD_Render();
    364a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
								default_values();
    364e:	0e 94 09 0b 	call	0x1612	; 0x1612 <default_values>
								eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3652:	41 e0       	ldi	r20, 0x01	; 1
    3654:	64 e0       	ldi	r22, 0x04	; 4
    3656:	88 e0       	ldi	r24, 0x08	; 8
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <eep_operations>
								GLCD_GotoLine(5);
    365e:	85 e0       	ldi	r24, 0x05	; 5
    3660:	0e 94 87 1c 	call	0x390e	; 0x390e <GLCD_GotoLine>
								GLCD_GotoX(45);
    3664:	8d e2       	ldi	r24, 0x2D	; 45
    3666:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
								GLCD_PrintString("DONE!");
    366a:	84 e2       	ldi	r24, 0x24	; 36
    366c:	92 e0       	ldi	r25, 0x02	; 2
    366e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
								GLCD_Render();
    3672:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <GLCD_Render>
								while(button_monitor());
    3676:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    367a:	81 11       	cpse	r24, r1
    367c:	fc cf       	rjmp	.-8      	; 0x3676 <menu_screen+0x990>
								while(!button_monitor());
    367e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    3682:	88 23       	and	r24, r24
    3684:	e1 f3       	breq	.-8      	; 0x367e <menu_screen+0x998>
    3686:	15 c0       	rjmp	.+42     	; 0x36b2 <menu_screen+0x9cc>
					break;
					}
					case 15:
					{
						//exit menu
						while (button_monitor());
    3688:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    368c:	81 11       	cpse	r24, r1
    368e:	fc cf       	rjmp	.-8      	; 0x3688 <menu_screen+0x9a2>
						main();
    3690:	0e 94 55 16 	call	0x2caa	; 0x2caa <main>
					}
				}//
			}
		else if(currentButton == 2)	menuItem++;
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	31 f4       	brne	.+12     	; 0x36a4 <menu_screen+0x9be>
    3698:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <menuItem.2776>
    369c:	8f 5f       	subi	r24, 0xFF	; 255
    369e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <menuItem.2776>
    36a2:	07 c0       	rjmp	.+14     	; 0x36b2 <menu_screen+0x9cc>
		else if(currentButton == 3)	menuItem--;
    36a4:	83 30       	cpi	r24, 0x03	; 3
    36a6:	29 f4       	brne	.+10     	; 0x36b2 <menu_screen+0x9cc>
    36a8:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <menuItem.2776>
    36ac:	81 50       	subi	r24, 0x01	; 1
    36ae:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <menuItem.2776>
		while (!button_monitor());
    36b2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <button_monitor>
    36b6:	88 23       	and	r24, r24
    36b8:	e1 f3       	breq	.-8      	; 0x36b2 <menu_screen+0x9cc>
		menu_screen();
    36ba:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <menu_screen>

000036be <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    36be:	66 95       	lsr	r22
    36c0:	66 95       	lsr	r22
    36c2:	66 95       	lsr	r22
    36c4:	90 e8       	ldi	r25, 0x80	; 128
    36c6:	69 9f       	mul	r22, r25
    36c8:	b0 01       	movw	r22, r0
    36ca:	11 24       	eor	r1, r1
    36cc:	68 0f       	add	r22, r24
    36ce:	71 1d       	adc	r23, r1
    36d0:	fb 01       	movw	r30, r22
    36d2:	e3 54       	subi	r30, 0x43	; 67
    36d4:	fd 4f       	sbci	r31, 0xFD	; 253
    36d6:	40 83       	st	Z, r20
    36d8:	08 95       	ret

000036da <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    36da:	66 95       	lsr	r22
    36dc:	66 95       	lsr	r22
    36de:	66 95       	lsr	r22
    36e0:	90 e8       	ldi	r25, 0x80	; 128
    36e2:	69 9f       	mul	r22, r25
    36e4:	b0 01       	movw	r22, r0
    36e6:	11 24       	eor	r1, r1
    36e8:	68 0f       	add	r22, r24
    36ea:	71 1d       	adc	r23, r1
    36ec:	fb 01       	movw	r30, r22
    36ee:	e3 54       	subi	r30, 0x43	; 67
    36f0:	fd 4f       	sbci	r31, 0xFD	; 253
}
    36f2:	80 81       	ld	r24, Z
    36f4:	08 95       	ret

000036f6 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    36f6:	ff 92       	push	r15
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	c8 2f       	mov	r28, r24
    3702:	06 2f       	mov	r16, r22
    3704:	17 2f       	mov	r17, r23
    3706:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    3708:	0e 94 39 24 	call	0x4872	; 0x4872 <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    370c:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    3710:	88 30       	cpi	r24, 0x08	; 8
    3712:	31 f0       	breq	.+12     	; 0x3720 <GLCD_Send+0x2a>
    3714:	80 31       	cpi	r24, 0x10	; 16
    3716:	21 f0       	breq	.+8      	; 0x3720 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <__GLCD>
				break;
    371e:	33 c0       	rjmp	.+102    	; 0x3786 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    3720:	88 e7       	ldi	r24, 0x78	; 120
    3722:	0e 94 47 24 	call	0x488e	; 0x488e <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3726:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    372a:	88 31       	cpi	r24, 0x18	; 24
    372c:	31 f0       	breq	.+12     	; 0x373a <GLCD_Send+0x44>
    372e:	80 32       	cpi	r24, 0x20	; 32
    3730:	21 f0       	breq	.+8      	; 0x373a <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <__GLCD>
				break;
    3738:	26 c0       	rjmp	.+76     	; 0x3786 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    373a:	8c 2f       	mov	r24, r28
    373c:	0e 94 47 24 	call	0x488e	; 0x488e <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    3740:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3744:	88 32       	cpi	r24, 0x28	; 40
    3746:	19 f4       	brne	.+6      	; 0x374e <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3748:	f1 10       	cpse	r15, r1
    374a:	07 c0       	rjmp	.+14     	; 0x375a <GLCD_Send+0x64>
    374c:	1a c0       	rjmp	.+52     	; 0x3782 <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    374e:	80 33       	cpi	r24, 0x30	; 48
    3750:	d9 f3       	breq	.-10     	; 0x3748 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <__GLCD>
				break;
    3758:	16 c0       	rjmp	.+44     	; 0x3786 <GLCD_Send+0x90>
    375a:	c0 2f       	mov	r28, r16
    375c:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    375e:	8e 01       	movw	r16, r28
    3760:	0f 5f       	subi	r16, 0xFF	; 255
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	fa 94       	dec	r15
    3766:	0f 0d       	add	r16, r15
    3768:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    376a:	89 91       	ld	r24, Y+
    376c:	0e 94 47 24 	call	0x488e	; 0x488e <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    3770:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    3774:	88 32       	cpi	r24, 0x28	; 40
    3776:	11 f0       	breq	.+4      	; 0x377c <GLCD_Send+0x86>
    3778:	80 33       	cpi	r24, 0x30	; 48
    377a:	19 f4       	brne	.+6      	; 0x3782 <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    377c:	c0 17       	cp	r28, r16
    377e:	d1 07       	cpc	r29, r17
    3780:	a1 f7       	brne	.-24     	; 0x376a <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    3782:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    3786:	0e 94 41 24 	call	0x4882	; 0x4882 <TWI_EndTransmission>
}
    378a:	df 91       	pop	r29
    378c:	cf 91       	pop	r28
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	ff 90       	pop	r15
    3794:	08 95       	ret

00003796 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	1f 92       	push	r1
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	be 01       	movw	r22, r28
    37a6:	6f 5f       	subi	r22, 0xFF	; 255
    37a8:	7f 4f       	sbci	r23, 0xFF	; 255
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_Send>
}
    37b0:	0f 90       	pop	r0
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	08 95       	ret

000037b8 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    37bc:	81 e2       	ldi	r24, 0x21	; 33
    37be:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    37c8:	8f e7       	ldi	r24, 0x7F	; 127
    37ca:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    37ce:	82 e2       	ldi	r24, 0x22	; 34
    37d0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    37da:	87 e0       	ldi	r24, 0x07	; 7
    37dc:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
    37e0:	c0 e0       	ldi	r28, 0x00	; 0
    37e2:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    37e4:	be 01       	movw	r22, r28
    37e6:	62 95       	swap	r22
    37e8:	72 95       	swap	r23
    37ea:	70 7f       	andi	r23, 0xF0	; 240
    37ec:	76 27       	eor	r23, r22
    37ee:	60 7f       	andi	r22, 0xF0	; 240
    37f0:	76 27       	eor	r23, r22
    37f2:	63 54       	subi	r22, 0x43	; 67
    37f4:	7d 4f       	sbci	r23, 0xFD	; 253
    37f6:	40 e1       	ldi	r20, 0x10	; 16
    37f8:	80 e4       	ldi	r24, 0x40	; 64
    37fa:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_Send>
    37fe:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    3800:	c0 34       	cpi	r28, 0x40	; 64
    3802:	d1 05       	cpc	r29, r1
    3804:	79 f7       	brne	.-34     	; 0x37e4 <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	08 95       	ret

0000380c <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    380c:	cf 93       	push	r28
    380e:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    3810:	81 e8       	ldi	r24, 0x81	; 129
    3812:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    3816:	8c 2f       	mov	r24, r28
    3818:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
}
    381c:	cf 91       	pop	r28
    381e:	08 95       	ret

00003820 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    3820:	88 23       	and	r24, r24
    3822:	14 f0       	brlt	.+4      	; 0x3828 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    3824:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <__GLCD+0x1>
    3828:	08 95       	ret

0000382a <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    382a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    382e:	90 34       	cpi	r25, 0x40	; 64
    3830:	10 f4       	brcc	.+4      	; 0x3836 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    3832:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <__GLCD+0x2>
    3836:	08 95       	ret

00003838 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    3838:	cf 93       	push	r28
    383a:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    383c:	0e 94 10 1c 	call	0x3820	; 0x3820 <GLCD_GotoX>
	GLCD_GotoY(Y);
    3840:	8c 2f       	mov	r24, r28
    3842:	0e 94 15 1c 	call	0x382a	; 0x382a <GLCD_GotoY>
}
    3846:	cf 91       	pop	r28
    3848:	08 95       	ret

0000384a <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    384a:	0e 94 2c 24 	call	0x4858	; 0x4858 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    384e:	8e ea       	ldi	r24, 0xAE	; 174
    3850:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    3854:	85 ed       	ldi	r24, 0xD5	; 213
    3856:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    385a:	80 ef       	ldi	r24, 0xF0	; 240
    385c:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    3860:	88 ea       	ldi	r24, 0xA8	; 168
    3862:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    3866:	8f e3       	ldi	r24, 0x3F	; 63
    3868:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    386c:	83 ed       	ldi	r24, 0xD3	; 211
    386e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    3878:	8d e8       	ldi	r24, 0x8D	; 141
    387a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    387e:	84 e1       	ldi	r24, 0x14	; 20
    3880:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    3884:	80 e4       	ldi	r24, 0x40	; 64
    3886:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    388a:	80 e2       	ldi	r24, 0x20	; 32
    388c:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    3896:	81 ea       	ldi	r24, 0xA1	; 161
    3898:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    389c:	88 ec       	ldi	r24, 0xC8	; 200
    389e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    38a2:	8a ed       	ldi	r24, 0xDA	; 218
    38a4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    38a8:	82 e1       	ldi	r24, 0x12	; 18
    38aa:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    38ae:	81 e8       	ldi	r24, 0x81	; 129
    38b0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
    38b6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    38ba:	89 ed       	ldi	r24, 0xD9	; 217
    38bc:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    38c0:	81 ef       	ldi	r24, 0xF1	; 241
    38c2:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    38c6:	8b ed       	ldi	r24, 0xDB	; 219
    38c8:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    38cc:	80 e2       	ldi	r24, 0x20	; 32
    38ce:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    38d2:	84 ea       	ldi	r24, 0xA4	; 164
    38d4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    38d8:	86 ea       	ldi	r24, 0xA6	; 166
    38da:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    38de:	8e e2       	ldi	r24, 0x2E	; 46
    38e0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    38e4:	8f ea       	ldi	r24, 0xAF	; 175
    38e6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    38f2:	86 ea       	ldi	r24, 0xA6	; 166
    38f4:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    38f8:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <__GLCD+0x8>
    38fc:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <__GLCD+0x7>
    3900:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <__GLCD+0x6>
    3904:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <__GLCD+0x2>
    3908:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <__GLCD+0x1>
    390c:	08 95       	ret

0000390e <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    390e:	88 30       	cpi	r24, 0x08	; 8
    3910:	28 f4       	brcc	.+10     	; 0x391c <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    3912:	88 0f       	add	r24, r24
    3914:	88 0f       	add	r24, r24
    3916:	88 0f       	add	r24, r24
    3918:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <__GLCD+0x2>
    391c:	08 95       	ret

0000391e <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    391e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    3922:	08 95       	ret

00003924 <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    3924:	8f 92       	push	r8
    3926:	9f 92       	push	r9
    3928:	af 92       	push	r10
    392a:	bf 92       	push	r11
    392c:	cf 92       	push	r12
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	06 2f       	mov	r16, r22
    393e:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    3940:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3944:	d0 91 b5 02 	lds	r29, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    3948:	c0 91 b4 02 	lds	r28, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    394c:	6d 2f       	mov	r22, r29
    394e:	8c 2f       	mov	r24, r28
    3950:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    3954:	1f 3f       	cpi	r17, 0xFF	; 255
    3956:	91 f4       	brne	.+36     	; 0x397c <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    3958:	90 2f       	mov	r25, r16
    395a:	97 70       	andi	r25, 0x07	; 7
    395c:	81 2c       	mov	r8, r1
    395e:	91 2c       	mov	r9, r1
    3960:	54 01       	movw	r10, r8
    3962:	83 94       	inc	r8
    3964:	75 01       	movw	r14, r10
    3966:	64 01       	movw	r12, r8
    3968:	04 c0       	rjmp	.+8      	; 0x3972 <GLCD_SetPixel+0x4e>
    396a:	cc 0c       	add	r12, r12
    396c:	dd 1c       	adc	r13, r13
    396e:	ee 1c       	adc	r14, r14
    3970:	ff 1c       	adc	r15, r15
    3972:	9a 95       	dec	r25
    3974:	d2 f7       	brpl	.-12     	; 0x396a <GLCD_SetPixel+0x46>
    3976:	48 2f       	mov	r20, r24
    3978:	4c 29       	or	r20, r12
    397a:	13 c0       	rjmp	.+38     	; 0x39a2 <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    397c:	07 70       	andi	r16, 0x07	; 7
    397e:	c1 2c       	mov	r12, r1
    3980:	d1 2c       	mov	r13, r1
    3982:	76 01       	movw	r14, r12
    3984:	c3 94       	inc	r12
    3986:	b7 01       	movw	r22, r14
    3988:	a6 01       	movw	r20, r12
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <GLCD_SetPixel+0x70>
    398c:	44 0f       	add	r20, r20
    398e:	55 1f       	adc	r21, r21
    3990:	66 1f       	adc	r22, r22
    3992:	77 1f       	adc	r23, r23
    3994:	0a 95       	dec	r16
    3996:	d2 f7       	brpl	.-12     	; 0x398c <GLCD_SetPixel+0x68>
    3998:	8a 01       	movw	r16, r20
    399a:	9b 01       	movw	r18, r22
    399c:	00 95       	com	r16
    399e:	48 2f       	mov	r20, r24
    39a0:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    39a2:	6d 2f       	mov	r22, r29
    39a4:	8c 2f       	mov	r24, r28
    39a6:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
}
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	df 90       	pop	r13
    39b8:	cf 90       	pop	r12
    39ba:	bf 90       	pop	r11
    39bc:	af 90       	pop	r10
    39be:	9f 90       	pop	r9
    39c0:	8f 90       	pop	r8
    39c2:	08 95       	ret

000039c4 <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    39c4:	3f 92       	push	r3
    39c6:	4f 92       	push	r4
    39c8:	5f 92       	push	r5
    39ca:	6f 92       	push	r6
    39cc:	7f 92       	push	r7
    39ce:	8f 92       	push	r8
    39d0:	9f 92       	push	r9
    39d2:	af 92       	push	r10
    39d4:	bf 92       	push	r11
    39d6:	cf 92       	push	r12
    39d8:	df 92       	push	r13
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    39e8:	88 23       	and	r24, r24
    39ea:	0c f4       	brge	.+2      	; 0x39ee <GLCD_SetPixels+0x2a>
    39ec:	c6 c0       	rjmp	.+396    	; 0x3b7a <GLCD_SetPixels+0x1b6>
    39ee:	44 23       	and	r20, r20
    39f0:	0c f4       	brge	.+2      	; 0x39f4 <GLCD_SetPixels+0x30>
    39f2:	c3 c0       	rjmp	.+390    	; 0x3b7a <GLCD_SetPixels+0x1b6>
    39f4:	60 34       	cpi	r22, 0x40	; 64
    39f6:	08 f0       	brcs	.+2      	; 0x39fa <GLCD_SetPixels+0x36>
    39f8:	c0 c0       	rjmp	.+384    	; 0x3b7a <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    39fa:	20 34       	cpi	r18, 0x40	; 64
    39fc:	08 f0       	brcs	.+2      	; 0x3a00 <GLCD_SetPixels+0x3c>
    39fe:	bd c0       	rjmp	.+378    	; 0x3b7a <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    3a00:	11 e0       	ldi	r17, 0x01	; 1
    3a02:	81 2e       	mov	r8, r17
    3a04:	86 1a       	sub	r8, r22
    3a06:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    3a08:	18 1b       	sub	r17, r24
    3a0a:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    3a0c:	46 2f       	mov	r20, r22
    3a0e:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    3a10:	76 2e       	mov	r7, r22
    3a12:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    3a14:	e8 2c       	mov	r14, r8
    3a16:	f1 2c       	mov	r15, r1
    3a18:	88 e0       	ldi	r24, 0x08	; 8
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	84 1b       	sub	r24, r20
    3a1e:	91 09       	sbc	r25, r1
    3a20:	e8 16       	cp	r14, r24
    3a22:	f9 06       	cpc	r15, r25
    3a24:	7c f4       	brge	.+30     	; 0x3a44 <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    3a26:	88 e0       	ldi	r24, 0x08	; 8
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	8e 19       	sub	r24, r14
    3a2c:	9f 09       	sbc	r25, r15
    3a2e:	2f ef       	ldi	r18, 0xFF	; 255
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	59 01       	movw	r10, r18
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <GLCD_SetPixels+0x76>
    3a36:	b5 94       	asr	r11
    3a38:	a7 94       	ror	r10
    3a3a:	8a 95       	dec	r24
    3a3c:	e2 f7       	brpl	.-8      	; 0x3a36 <GLCD_SetPixels+0x72>
    3a3e:	8a 2d       	mov	r24, r10
			h = height;
    3a40:	68 2c       	mov	r6, r8
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    3a44:	88 e0       	ldi	r24, 0x08	; 8
    3a46:	68 2e       	mov	r6, r24
    3a48:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    3a4a:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    3a4c:	a8 2e       	mov	r10, r24
    3a4e:	b1 2c       	mov	r11, r1
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <GLCD_SetPixels+0x92>
    3a52:	aa 0c       	add	r10, r10
    3a54:	bb 1c       	adc	r11, r11
    3a56:	4a 95       	dec	r20
    3a58:	e2 f7       	brpl	.-8      	; 0x3a52 <GLCD_SetPixels+0x8e>
    3a5a:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    3a5c:	67 2d       	mov	r22, r7
    3a5e:	89 2d       	mov	r24, r9
    3a60:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    3a64:	11 23       	and	r17, r17
    3a66:	c9 f1       	breq	.+114    	; 0x3ada <GLCD_SetPixels+0x116>
    3a68:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a6a:	0f 2e       	mov	r0, r31
    3a6c:	f5 eb       	ldi	r31, 0xB5	; 181
    3a6e:	cf 2e       	mov	r12, r31
    3a70:	f2 e0       	ldi	r31, 0x02	; 2
    3a72:	df 2e       	mov	r13, r31
    3a74:	f0 2d       	mov	r31, r0
    3a76:	c4 eb       	ldi	r28, 0xB4	; 180
    3a78:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3a7a:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a7c:	f6 01       	movw	r30, r12
    3a7e:	40 80       	ld	r4, Z
    3a80:	b8 80       	ld	r11, Y
    3a82:	64 2d       	mov	r22, r4
    3a84:	8b 2d       	mov	r24, r11
    3a86:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3a8a:	0f 3f       	cpi	r16, 0xFF	; 255
    3a8c:	19 f4       	brne	.+6      	; 0x3a94 <GLCD_SetPixels+0xd0>
    3a8e:	48 2f       	mov	r20, r24
    3a90:	43 29       	or	r20, r3
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <GLCD_SetPixels+0xd4>
    3a94:	48 2f       	mov	r20, r24
    3a96:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3a98:	9b 2d       	mov	r25, r11
    3a9a:	9f 5f       	subi	r25, 0xFF	; 255
    3a9c:	98 83       	st	Y, r25
    3a9e:	64 2d       	mov	r22, r4
    3aa0:	8b 2d       	mov	r24, r11
    3aa2:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    3aa6:	53 94       	inc	r5
    3aa8:	51 12       	cpse	r5, r17
    3aaa:	e8 cf       	rjmp	.-48     	; 0x3a7c <GLCD_SetPixels+0xb8>
    3aac:	16 c0       	rjmp	.+44     	; 0x3ada <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3aae:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3ab0:	6c 2f       	mov	r22, r28
    3ab2:	89 2d       	mov	r24, r9
    3ab4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3ab8:	11 23       	and	r17, r17
    3aba:	f1 f0       	breq	.+60     	; 0x3af8 <GLCD_SetPixels+0x134>
    3abc:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3abe:	f6 01       	movw	r30, r12
    3ac0:	60 81       	ld	r22, Z
    3ac2:	f2 01       	movw	r30, r4
    3ac4:	80 81       	ld	r24, Z
    3ac6:	98 2f       	mov	r25, r24
    3ac8:	9f 5f       	subi	r25, 0xFF	; 255
    3aca:	90 83       	st	Z, r25
    3acc:	40 2f       	mov	r20, r16
    3ace:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3ad2:	73 94       	inc	r7
    3ad4:	71 16       	cp	r7, r17
    3ad6:	81 f0       	breq	.+32     	; 0x3af8 <GLCD_SetPixels+0x134>
    3ad8:	f2 cf       	rjmp	.-28     	; 0x3abe <GLCD_SetPixels+0xfa>
    3ada:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3adc:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3ade:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3ae0:	0f 2e       	mov	r0, r31
    3ae2:	f5 eb       	ldi	r31, 0xB5	; 181
    3ae4:	cf 2e       	mov	r12, r31
    3ae6:	f2 e0       	ldi	r31, 0x02	; 2
    3ae8:	df 2e       	mov	r13, r31
    3aea:	f0 2d       	mov	r31, r0
    3aec:	0f 2e       	mov	r0, r31
    3aee:	f4 eb       	ldi	r31, 0xB4	; 180
    3af0:	4f 2e       	mov	r4, r31
    3af2:	f2 e0       	ldi	r31, 0x02	; 2
    3af4:	5f 2e       	mov	r5, r31
    3af6:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3af8:	26 2d       	mov	r18, r6
    3afa:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    3afc:	e2 2f       	mov	r30, r18
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	cf 01       	movw	r24, r30
    3b02:	08 96       	adiw	r24, 0x08	; 8
    3b04:	e8 16       	cp	r14, r24
    3b06:	f9 06       	cpc	r15, r25
    3b08:	94 f6       	brge	.-92     	; 0x3aae <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    3b0a:	28 15       	cp	r18, r8
    3b0c:	b0 f5       	brcc	.+108    	; 0x3b7a <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    3b0e:	ee 1a       	sub	r14, r30
    3b10:	ff 0a       	sbc	r15, r31
    3b12:	8f ef       	ldi	r24, 0xFF	; 255
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	9c 01       	movw	r18, r24
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <GLCD_SetPixels+0x15a>
    3b1a:	22 0f       	add	r18, r18
    3b1c:	33 1f       	adc	r19, r19
    3b1e:	ea 94       	dec	r14
    3b20:	e2 f7       	brpl	.-8      	; 0x3b1a <GLCD_SetPixels+0x156>
    3b22:	79 01       	movw	r14, r18
    3b24:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    3b26:	6c 2f       	mov	r22, r28
    3b28:	68 5f       	subi	r22, 0xF8	; 248
    3b2a:	89 2d       	mov	r24, r9
    3b2c:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    3b30:	11 23       	and	r17, r17
    3b32:	19 f1       	breq	.+70     	; 0x3b7a <GLCD_SetPixels+0x1b6>
    3b34:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b36:	0f 2e       	mov	r0, r31
    3b38:	f5 eb       	ldi	r31, 0xB5	; 181
    3b3a:	cf 2e       	mov	r12, r31
    3b3c:	f2 e0       	ldi	r31, 0x02	; 2
    3b3e:	df 2e       	mov	r13, r31
    3b40:	f0 2d       	mov	r31, r0
    3b42:	c4 eb       	ldi	r28, 0xB4	; 180
    3b44:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3b46:	9e 2c       	mov	r9, r14
    3b48:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b4a:	f6 01       	movw	r30, r12
    3b4c:	a0 80       	ld	r10, Z
    3b4e:	f8 80       	ld	r15, Y
    3b50:	6a 2d       	mov	r22, r10
    3b52:	8f 2d       	mov	r24, r15
    3b54:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3b58:	0f 3f       	cpi	r16, 0xFF	; 255
    3b5a:	19 f4       	brne	.+6      	; 0x3b62 <GLCD_SetPixels+0x19e>
    3b5c:	48 2f       	mov	r20, r24
    3b5e:	4e 29       	or	r20, r14
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <GLCD_SetPixels+0x1a2>
    3b62:	48 2f       	mov	r20, r24
    3b64:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3b66:	9f 2d       	mov	r25, r15
    3b68:	9f 5f       	subi	r25, 0xFF	; 255
    3b6a:	98 83       	st	Y, r25
    3b6c:	6a 2d       	mov	r22, r10
    3b6e:	8f 2d       	mov	r24, r15
    3b70:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    3b74:	b3 94       	inc	r11
    3b76:	b1 12       	cpse	r11, r17
    3b78:	e8 cf       	rjmp	.-48     	; 0x3b4a <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	ff 90       	pop	r15
    3b84:	ef 90       	pop	r14
    3b86:	df 90       	pop	r13
    3b88:	cf 90       	pop	r12
    3b8a:	bf 90       	pop	r11
    3b8c:	af 90       	pop	r10
    3b8e:	9f 90       	pop	r9
    3b90:	8f 90       	pop	r8
    3b92:	7f 90       	pop	r7
    3b94:	6f 90       	pop	r6
    3b96:	5f 90       	pop	r5
    3b98:	4f 90       	pop	r4
    3b9a:	3f 90       	pop	r3
    3b9c:	08 95       	ret

00003b9e <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3b9e:	2f 92       	push	r2
    3ba0:	3f 92       	push	r3
    3ba2:	4f 92       	push	r4
    3ba4:	5f 92       	push	r5
    3ba6:	6f 92       	push	r6
    3ba8:	7f 92       	push	r7
    3baa:	8f 92       	push	r8
    3bac:	9f 92       	push	r9
    3bae:	af 92       	push	r10
    3bb0:	bf 92       	push	r11
    3bb2:	cf 92       	push	r12
    3bb4:	df 92       	push	r13
    3bb6:	ef 92       	push	r14
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	2c 97       	sbiw	r28, 0x0c	; 12
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	5c 01       	movw	r10, r24
    3bd4:	66 2e       	mov	r6, r22
    3bd6:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3bd8:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    3bdc:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    3bde:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    3be2:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    3be4:	82 2f       	mov	r24, r18
    3be6:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    3be8:	1a f4       	brpl	.+6      	; 0x3bf0 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    3bea:	80 e8       	ldi	r24, 0x80	; 128
    3bec:	68 2e       	mov	r6, r24
    3bee:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    3bf0:	84 2f       	mov	r24, r20
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	07 96       	adiw	r24, 0x07	; 7
    3bf6:	95 95       	asr	r25
    3bf8:	87 95       	ror	r24
    3bfa:	95 95       	asr	r25
    3bfc:	87 95       	ror	r24
    3bfe:	95 95       	asr	r25
    3c00:	87 95       	ror	r24
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	96 95       	lsr	r25
    3c0a:	96 95       	lsr	r25
    3c0c:	96 95       	lsr	r25
    3c0e:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    3c10:	89 30       	cpi	r24, 0x09	; 9
    3c12:	48 f0       	brcs	.+18     	; 0x3c26 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    3c14:	2d 81       	ldd	r18, Y+5	; 0x05
    3c16:	3e 81       	ldd	r19, Y+6	; 0x06
    3c18:	28 5f       	subi	r18, 0xF8	; 248
    3c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1c:	a9 01       	movw	r20, r18
    3c1e:	48 1b       	sub	r20, r24
    3c20:	51 09       	sbc	r21, r1
    3c22:	5e 83       	std	Y+6, r21	; 0x06
    3c24:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3c26:	4a 84       	ldd	r4, Y+10	; 0x0a
    3c28:	57 e0       	ldi	r21, 0x07	; 7
    3c2a:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	89 2b       	or	r24, r25
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <GLCD_DrawBitmap+0x98>
    3c34:	fa c0       	rjmp	.+500    	; 0x3e2a <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c38:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3c3a:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3c3c:	26 2c       	mov	r2, r6
    3c3e:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3c40:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3c42:	88 e0       	ldi	r24, 0x08	; 8
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	fc 01       	movw	r30, r24
    3c48:	e4 19       	sub	r30, r4
    3c4a:	f1 09       	sbc	r31, r1
    3c4c:	fb 83       	std	Y+3, r31	; 0x03
    3c4e:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c50:	0f 2e       	mov	r0, r31
    3c52:	f5 eb       	ldi	r31, 0xB5	; 181
    3c54:	cf 2e       	mov	r12, r31
    3c56:	f2 e0       	ldi	r31, 0x02	; 2
    3c58:	df 2e       	mov	r13, r31
    3c5a:	f0 2d       	mov	r31, r0
    3c5c:	04 eb       	ldi	r16, 0xB4	; 180
    3c5e:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3c60:	6c 81       	ldd	r22, Y+4	; 0x04
    3c62:	8f 81       	ldd	r24, Y+7	; 0x07
    3c64:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    3c68:	39 86       	std	Y+9, r3	; 0x09
    3c6a:	28 86       	std	Y+8, r2	; 0x08
    3c6c:	72 9c       	mul	r7, r2
    3c6e:	c0 01       	movw	r24, r0
    3c70:	73 9c       	mul	r7, r3
    3c72:	90 0d       	add	r25, r0
    3c74:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    3c76:	7c 01       	movw	r14, r24
    3c78:	e2 18       	sub	r14, r2
    3c7a:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3c7c:	66 20       	and	r6, r6
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <GLCD_DrawBitmap+0xe4>
    3c80:	3c c0       	rjmp	.+120    	; 0x3cfa <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3c82:	9c 01       	movw	r18, r24
    3c84:	2a 0d       	add	r18, r10
    3c86:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3c88:	85 2c       	mov	r8, r5
    3c8a:	3c 87       	std	Y+12, r19	; 0x0c
    3c8c:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3c8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3c90:	fc 85       	ldd	r31, Y+12	; 0x0c
    3c92:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    3c94:	04 2c       	mov	r0, r4
    3c96:	01 c0       	rjmp	.+2      	; 0x3c9a <GLCD_DrawBitmap+0xfc>
    3c98:	99 0c       	add	r9, r9
    3c9a:	0a 94       	dec	r0
    3c9c:	ea f7       	brpl	.-6      	; 0x3c98 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3c9e:	77 20       	and	r7, r7
    3ca0:	79 f0       	breq	.+30     	; 0x3cc0 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3ca2:	f5 01       	movw	r30, r10
    3ca4:	ee 0d       	add	r30, r14
    3ca6:	ff 1d       	adc	r31, r15
    3ca8:	2f ef       	ldi	r18, 0xFF	; 255
    3caa:	e2 1a       	sub	r14, r18
    3cac:	f2 0a       	sbc	r15, r18
    3cae:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	0a 80       	ldd	r0, Y+2	; 0x02
    3cb4:	02 c0       	rjmp	.+4      	; 0x3cba <GLCD_DrawBitmap+0x11c>
    3cb6:	95 95       	asr	r25
    3cb8:	87 95       	ror	r24
    3cba:	0a 94       	dec	r0
    3cbc:	e2 f7       	brpl	.-8      	; 0x3cb6 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3cbe:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3cc0:	39 81       	ldd	r19, Y+1	; 0x01
    3cc2:	31 30       	cpi	r19, 0x01	; 1
    3cc4:	39 f4       	brne	.+14     	; 0x3cd4 <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3cc6:	f6 01       	movw	r30, r12
    3cc8:	60 81       	ld	r22, Z
    3cca:	f8 01       	movw	r30, r16
    3ccc:	80 81       	ld	r24, Z
    3cce:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
    3cd2:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3cd4:	f6 01       	movw	r30, r12
    3cd6:	60 81       	ld	r22, Z
    3cd8:	f8 01       	movw	r30, r16
    3cda:	80 81       	ld	r24, Z
    3cdc:	98 2f       	mov	r25, r24
    3cde:	9f 5f       	subi	r25, 0xFF	; 255
    3ce0:	90 83       	st	Z, r25
    3ce2:	49 2d       	mov	r20, r9
    3ce4:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3ce8:	83 94       	inc	r8
    3cea:	2b 85       	ldd	r18, Y+11	; 0x0b
    3cec:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cee:	2f 5f       	subi	r18, 0xFF	; 255
    3cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf2:	3c 87       	std	Y+12, r19	; 0x0c
    3cf4:	2b 87       	std	Y+11, r18	; 0x0b
    3cf6:	86 10       	cpse	r8, r6
    3cf8:	ca cf       	rjmp	.-108    	; 0x3c8e <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3cfa:	ec eb       	ldi	r30, 0xBC	; 188
    3cfc:	f2 e0       	ldi	r31, 0x02	; 2
    3cfe:	80 81       	ld	r24, Z
    3d00:	88 23       	and	r24, r24
    3d02:	41 f0       	breq	.+16     	; 0x3d14 <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d04:	f6 01       	movw	r30, r12
    3d06:	60 81       	ld	r22, Z
    3d08:	f8 01       	movw	r30, r16
    3d0a:	80 81       	ld	r24, Z
    3d0c:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
    3d10:	48 2f       	mov	r20, r24
    3d12:	01 c0       	rjmp	.+2      	; 0x3d16 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3d14:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3d16:	f6 01       	movw	r30, r12
    3d18:	60 81       	ld	r22, Z
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	80 81       	ld	r24, Z
    3d1e:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3d22:	fc 81       	ldd	r31, Y+4	; 0x04
    3d24:	f8 5f       	subi	r31, 0xF8	; 248
    3d26:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    3d28:	73 94       	inc	r7
    3d2a:	87 2d       	mov	r24, r7
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	2d 81       	ldd	r18, Y+5	; 0x05
    3d30:	3e 81       	ldd	r19, Y+6	; 0x06
    3d32:	82 17       	cp	r24, r18
    3d34:	93 07       	cpc	r25, r19
    3d36:	08 f4       	brcc	.+2      	; 0x3d3a <GLCD_DrawBitmap+0x19c>
    3d38:	93 cf       	rjmp	.-218    	; 0x3c60 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    3d3a:	22 30       	cpi	r18, 0x02	; 2
    3d3c:	31 05       	cpc	r19, r1
    3d3e:	08 f4       	brcc	.+2      	; 0x3d42 <GLCD_DrawBitmap+0x1a4>
    3d40:	74 c0       	rjmp	.+232    	; 0x3e2a <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3d42:	6f 2f       	mov	r22, r31
    3d44:	8f 81       	ldd	r24, Y+7	; 0x07
    3d46:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    3d4a:	27 2d       	mov	r18, r7
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	21 50       	subi	r18, 0x01	; 1
    3d50:	31 09       	sbc	r19, r1
    3d52:	48 85       	ldd	r20, Y+8	; 0x08
    3d54:	59 85       	ldd	r21, Y+9	; 0x09
    3d56:	24 9f       	mul	r18, r20
    3d58:	c0 01       	movw	r24, r0
    3d5a:	25 9f       	mul	r18, r21
    3d5c:	90 0d       	add	r25, r0
    3d5e:	34 9f       	mul	r19, r20
    3d60:	90 0d       	add	r25, r0
    3d62:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3d64:	66 20       	and	r6, r6
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <GLCD_DrawBitmap+0x1cc>
    3d68:	3e c0       	rjmp	.+124    	; 0x3de6 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3d6a:	45 01       	movw	r8, r10
    3d6c:	88 0e       	add	r8, r24
    3d6e:	99 1e       	adc	r9, r25
    3d70:	65 01       	movw	r12, r10
    3d72:	5f ef       	ldi	r21, 0xFF	; 255
    3d74:	c5 1a       	sub	r12, r21
    3d76:	d5 0a       	sbc	r13, r21
    3d78:	6a 94       	dec	r6
    3d7a:	c6 0c       	add	r12, r6
    3d7c:	d1 1c       	adc	r13, r1
    3d7e:	c8 0e       	add	r12, r24
    3d80:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f5 eb       	ldi	r31, 0xB5	; 181
    3d86:	ef 2e       	mov	r14, r31
    3d88:	f2 e0       	ldi	r31, 0x02	; 2
    3d8a:	ff 2e       	mov	r15, r31
    3d8c:	f0 2d       	mov	r31, r0
    3d8e:	04 eb       	ldi	r16, 0xB4	; 180
    3d90:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3d92:	88 e0       	ldi	r24, 0x08	; 8
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	5c 01       	movw	r10, r24
    3d98:	a4 18       	sub	r10, r4
    3d9a:	b1 08       	sbc	r11, r1
    3d9c:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d9e:	f7 01       	movw	r30, r14
    3da0:	80 80       	ld	r8, Z
    3da2:	f8 01       	movw	r30, r16
    3da4:	90 80       	ld	r9, Z
    3da6:	68 2d       	mov	r22, r8
    3da8:	89 2d       	mov	r24, r9
    3daa:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3dae:	f3 01       	movw	r30, r6
    3db0:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	0a 2c       	mov	r0, r10
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <GLCD_DrawBitmap+0x21e>
    3db8:	55 95       	asr	r21
    3dba:	47 95       	ror	r20
    3dbc:	0a 94       	dec	r0
    3dbe:	e2 f7       	brpl	.-8      	; 0x3db8 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3dc0:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3dc2:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc4:	f1 30       	cpi	r31, 0x01	; 1
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3dc8:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3dca:	89 2d       	mov	r24, r9
    3dcc:	8f 5f       	subi	r24, 0xFF	; 255
    3dce:	f8 01       	movw	r30, r16
    3dd0:	80 83       	st	Z, r24
    3dd2:	68 2d       	mov	r22, r8
    3dd4:	89 2d       	mov	r24, r9
    3dd6:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
    3dda:	ff ef       	ldi	r31, 0xFF	; 255
    3ddc:	6f 1a       	sub	r6, r31
    3dde:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3de0:	6c 14       	cp	r6, r12
    3de2:	7d 04       	cpc	r7, r13
    3de4:	e1 f6       	brne	.-72     	; 0x3d9e <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3de6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__GLCD+0x9>
    3dea:	88 23       	and	r24, r24
    3dec:	99 f0       	breq	.+38     	; 0x3e14 <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    3dee:	81 30       	cpi	r24, 0x01	; 1
    3df0:	41 f4       	brne	.+16     	; 0x3e02 <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3df2:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    3df6:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    3dfa:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
    3dfe:	48 2f       	mov	r20, r24
    3e00:	0a c0       	rjmp	.+20     	; 0x3e16 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e02:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    3e06:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    3e0a:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
    3e0e:	48 2f       	mov	r20, r24
    3e10:	40 95       	com	r20
    3e12:	01 c0       	rjmp	.+2      	; 0x3e16 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    3e14:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    3e16:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    3e1a:	e4 eb       	ldi	r30, 0xB4	; 180
    3e1c:	f2 e0       	ldi	r31, 0x02	; 2
    3e1e:	80 81       	ld	r24, Z
    3e20:	98 2f       	mov	r25, r24
    3e22:	9f 5f       	subi	r25, 0xFF	; 255
    3e24:	90 83       	st	Z, r25
    3e26:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    3e2a:	0e 94 8f 1c 	call	0x391e	; 0x391e <GLCD_GetX>
    3e2e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3e30:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
}
    3e34:	2c 96       	adiw	r28, 0x0c	; 12
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	ff 90       	pop	r15
    3e4a:	ef 90       	pop	r14
    3e4c:	df 90       	pop	r13
    3e4e:	cf 90       	pop	r12
    3e50:	bf 90       	pop	r11
    3e52:	af 90       	pop	r10
    3e54:	9f 90       	pop	r9
    3e56:	8f 90       	pop	r8
    3e58:	7f 90       	pop	r7
    3e5a:	6f 90       	pop	r6
    3e5c:	5f 90       	pop	r5
    3e5e:	4f 90       	pop	r4
    3e60:	3f 90       	pop	r3
    3e62:	2f 90       	pop	r2
    3e64:	08 95       	ret

00003e66 <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3e66:	df 92       	push	r13
    3e68:	ef 92       	push	r14
    3e6a:	ff 92       	push	r15
    3e6c:	0f 93       	push	r16
    3e6e:	1f 93       	push	r17
    3e70:	cf 93       	push	r28
    3e72:	df 93       	push	r29
    3e74:	e8 2e       	mov	r14, r24
    3e76:	16 2f       	mov	r17, r22
    3e78:	d4 2e       	mov	r13, r20
    3e7a:	f2 2e       	mov	r15, r18
    3e7c:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3e7e:	88 23       	and	r24, r24
    3e80:	0c f4       	brge	.+2      	; 0x3e84 <GLCD_DrawRectangle+0x1e>
    3e82:	49 c0       	rjmp	.+146    	; 0x3f16 <GLCD_DrawRectangle+0xb0>
    3e84:	44 23       	and	r20, r20
    3e86:	0c f4       	brge	.+2      	; 0x3e8a <GLCD_DrawRectangle+0x24>
    3e88:	46 c0       	rjmp	.+140    	; 0x3f16 <GLCD_DrawRectangle+0xb0>
    3e8a:	60 34       	cpi	r22, 0x40	; 64
    3e8c:	08 f0       	brcs	.+2      	; 0x3e90 <GLCD_DrawRectangle+0x2a>
    3e8e:	43 c0       	rjmp	.+134    	; 0x3f16 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3e90:	8f e3       	ldi	r24, 0x3F	; 63
    3e92:	82 17       	cp	r24, r18
    3e94:	08 f4       	brcc	.+2      	; 0x3e98 <GLCD_DrawRectangle+0x32>
    3e96:	3f c0       	rjmp	.+126    	; 0x3f16 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3e98:	4e 15       	cp	r20, r14
    3e9a:	00 f1       	brcs	.+64     	; 0x3edc <GLCD_DrawRectangle+0x76>
    3e9c:	1c c0       	rjmp	.+56     	; 0x3ed6 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3e9e:	4d 2f       	mov	r20, r29
    3ea0:	61 2f       	mov	r22, r17
    3ea2:	8c 2f       	mov	r24, r28
    3ea4:	0e 94 92 1c 	call	0x3924	; 0x3924 <GLCD_SetPixel>
		X1++;
    3ea8:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3eaa:	0c 17       	cp	r16, r28
    3eac:	c0 f7       	brcc	.-16     	; 0x3e9e <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3eae:	de 14       	cp	r13, r14
    3eb0:	d8 f0       	brcs	.+54     	; 0x3ee8 <GLCD_DrawRectangle+0x82>
    3eb2:	17 c0       	rjmp	.+46     	; 0x3ee2 <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3eb4:	4d 2f       	mov	r20, r29
    3eb6:	6f 2d       	mov	r22, r15
    3eb8:	8c 2f       	mov	r24, r28
    3eba:	0e 94 92 1c 	call	0x3924	; 0x3924 <GLCD_SetPixel>
		X1++;
    3ebe:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3ec0:	0c 17       	cp	r16, r28
    3ec2:	c0 f7       	brcc	.-16     	; 0x3eb4 <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    3ec4:	f1 16       	cp	r15, r17
    3ec6:	98 f0       	brcs	.+38     	; 0x3eee <GLCD_DrawRectangle+0x88>
    3ec8:	1c c0       	rjmp	.+56     	; 0x3f02 <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3eca:	0d 2f       	mov	r16, r29
    3ecc:	4d 2d       	mov	r20, r13
    3ece:	8d 2d       	mov	r24, r13
    3ed0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <GLCD_SetPixels>
    3ed4:	20 c0       	rjmp	.+64     	; 0x3f16 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3ed6:	04 2f       	mov	r16, r20
    3ed8:	ce 2d       	mov	r28, r14
    3eda:	e1 cf       	rjmp	.-62     	; 0x3e9e <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    3edc:	0e 2d       	mov	r16, r14
    3ede:	c4 2f       	mov	r28, r20
    3ee0:	de cf       	rjmp	.-68     	; 0x3e9e <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3ee2:	0d 2d       	mov	r16, r13
    3ee4:	ce 2d       	mov	r28, r14
    3ee6:	e6 cf       	rjmp	.-52     	; 0x3eb4 <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    3ee8:	0e 2d       	mov	r16, r14
    3eea:	cd 2d       	mov	r28, r13
    3eec:	e3 cf       	rjmp	.-58     	; 0x3eb4 <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3eee:	0d 2f       	mov	r16, r29
    3ef0:	21 2f       	mov	r18, r17
    3ef2:	4e 2d       	mov	r20, r14
    3ef4:	6f 2d       	mov	r22, r15
    3ef6:	8e 2d       	mov	r24, r14
    3ef8:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    3efc:	21 2f       	mov	r18, r17
    3efe:	6f 2d       	mov	r22, r15
    3f00:	e4 cf       	rjmp	.-56     	; 0x3eca <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3f02:	0d 2f       	mov	r16, r29
    3f04:	2f 2d       	mov	r18, r15
    3f06:	4e 2d       	mov	r20, r14
    3f08:	61 2f       	mov	r22, r17
    3f0a:	8e 2d       	mov	r24, r14
    3f0c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <GLCD_SetPixels>
    3f10:	2f 2d       	mov	r18, r15
    3f12:	61 2f       	mov	r22, r17
    3f14:	da cf       	rjmp	.-76     	; 0x3eca <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	0f 91       	pop	r16
    3f1e:	ff 90       	pop	r15
    3f20:	ef 90       	pop	r14
    3f22:	df 90       	pop	r13
    3f24:	08 95       	ret

00003f26 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    3f30:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    3f32:	00 e0       	ldi	r16, 0x00	; 0
    3f34:	0b c0       	rjmp	.+22     	; 0x3f4c <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    3f36:	41 2f       	mov	r20, r17
    3f38:	6d 2f       	mov	r22, r29
    3f3a:	8c 2f       	mov	r24, r28
    3f3c:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    3f40:	cf 5f       	subi	r28, 0xFF	; 255
    3f42:	c0 38       	cpi	r28, 0x80	; 128
    3f44:	c1 f7       	brne	.-16     	; 0x3f36 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    3f46:	d8 5f       	subi	r29, 0xF8	; 248
    3f48:	d0 34       	cpi	r29, 0x40	; 64
    3f4a:	11 f0       	breq	.+4      	; 0x3f50 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    3f4c:	c0 2f       	mov	r28, r16
    3f4e:	f3 cf       	rjmp	.-26     	; 0x3f36 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	08 95       	ret

00003f5a <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <GLCD_FillScreen>
    3f60:	08 95       	ret

00003f62 <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3f62:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    3f64:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <GLCD_SetPixels>
}
    3f68:	0f 91       	pop	r16
    3f6a:	08 95       	ret

00003f6c <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    3f6c:	2f 92       	push	r2
    3f6e:	3f 92       	push	r3
    3f70:	5f 92       	push	r5
    3f72:	6f 92       	push	r6
    3f74:	7f 92       	push	r7
    3f76:	8f 92       	push	r8
    3f78:	9f 92       	push	r9
    3f7a:	af 92       	push	r10
    3f7c:	bf 92       	push	r11
    3f7e:	cf 92       	push	r12
    3f80:	df 92       	push	r13
    3f82:	ef 92       	push	r14
    3f84:	ff 92       	push	r15
    3f86:	0f 93       	push	r16
    3f88:	1f 93       	push	r17
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	d8 2e       	mov	r13, r24
    3f94:	dc 18       	sub	r13, r12
    3f96:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    3f98:	b8 2e       	mov	r11, r24
    3f9a:	b6 1a       	sub	r11, r22
    3f9c:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    3f9e:	46 2f       	mov	r20, r22
    3fa0:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    3fa2:	a6 2e       	mov	r10, r22
    3fa4:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    3fa6:	0b 2d       	mov	r16, r11
    3fa8:	10 e0       	ldi	r17, 0x00	; 0
    3faa:	88 e0       	ldi	r24, 0x08	; 8
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	84 1b       	sub	r24, r20
    3fb0:	91 09       	sbc	r25, r1
    3fb2:	08 17       	cp	r16, r24
    3fb4:	19 07       	cpc	r17, r25
    3fb6:	7c f4       	brge	.+30     	; 0x3fd6 <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    3fb8:	88 e0       	ldi	r24, 0x08	; 8
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	80 1b       	sub	r24, r16
    3fbe:	91 0b       	sbc	r25, r17
    3fc0:	2f ef       	ldi	r18, 0xFF	; 255
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	b9 01       	movw	r22, r18
    3fc6:	02 c0       	rjmp	.+4      	; 0x3fcc <GLCD_InvertRect+0x60>
    3fc8:	75 95       	asr	r23
    3fca:	67 95       	ror	r22
    3fcc:	8a 95       	dec	r24
    3fce:	e2 f7       	brpl	.-8      	; 0x3fc8 <GLCD_InvertRect+0x5c>
    3fd0:	cb 01       	movw	r24, r22
		h = height;
    3fd2:	5b 2c       	mov	r5, r11
    3fd4:	04 c0       	rjmp	.+8      	; 0x3fde <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    3fd6:	88 e0       	ldi	r24, 0x08	; 8
    3fd8:	58 2e       	mov	r5, r24
    3fda:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    3fdc:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    3fde:	68 2e       	mov	r6, r24
    3fe0:	01 c0       	rjmp	.+2      	; 0x3fe4 <GLCD_InvertRect+0x78>
    3fe2:	66 0c       	add	r6, r6
    3fe4:	4a 95       	dec	r20
    3fe6:	ea f7       	brpl	.-6      	; 0x3fe2 <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    3fe8:	6a 2d       	mov	r22, r10
    3fea:	8c 2d       	mov	r24, r12
    3fec:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    3ff0:	dd 20       	and	r13, r13
    3ff2:	d9 f1       	breq	.+118    	; 0x406a <GLCD_InvertRect+0xfe>
    3ff4:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ff6:	0f 2e       	mov	r0, r31
    3ff8:	f5 eb       	ldi	r31, 0xB5	; 181
    3ffa:	ef 2e       	mov	r14, r31
    3ffc:	f2 e0       	ldi	r31, 0x02	; 2
    3ffe:	ff 2e       	mov	r15, r31
    4000:	f0 2d       	mov	r31, r0
    4002:	c4 eb       	ldi	r28, 0xB4	; 180
    4004:	d2 e0       	ldi	r29, 0x02	; 2
    4006:	f7 01       	movw	r30, r14
    4008:	70 80       	ld	r7, Z
    400a:	98 80       	ld	r9, Y
    400c:	67 2d       	mov	r22, r7
    400e:	89 2d       	mov	r24, r9
    4010:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    4014:	99 2d       	mov	r25, r9
    4016:	9f 5f       	subi	r25, 0xFF	; 255
    4018:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    401a:	48 2f       	mov	r20, r24
    401c:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    401e:	67 2d       	mov	r22, r7
    4020:	89 2d       	mov	r24, r9
    4022:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    4026:	83 94       	inc	r8
    4028:	8d 10       	cpse	r8, r13
    402a:	ed cf       	rjmp	.-38     	; 0x4006 <GLCD_InvertRect+0x9a>
    402c:	1e c0       	rjmp	.+60     	; 0x406a <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    402e:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    4030:	6c 2f       	mov	r22, r28
    4032:	8c 2d       	mov	r24, r12
    4034:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    4038:	dd 20       	and	r13, r13
    403a:	39 f1       	breq	.+78     	; 0x408a <GLCD_InvertRect+0x11e>
    403c:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    403e:	f7 01       	movw	r30, r14
    4040:	50 80       	ld	r5, Z
    4042:	f1 01       	movw	r30, r2
    4044:	80 80       	ld	r8, Z
    4046:	65 2d       	mov	r22, r5
    4048:	88 2d       	mov	r24, r8
    404a:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    404e:	98 2d       	mov	r25, r8
    4050:	9f 5f       	subi	r25, 0xFF	; 255
    4052:	f1 01       	movw	r30, r2
    4054:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4056:	48 2f       	mov	r20, r24
    4058:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    405a:	65 2d       	mov	r22, r5
    405c:	88 2d       	mov	r24, r8
    405e:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    4062:	63 94       	inc	r6
    4064:	6d 14       	cp	r6, r13
    4066:	89 f0       	breq	.+34     	; 0x408a <GLCD_InvertRect+0x11e>
    4068:	ea cf       	rjmp	.-44     	; 0x403e <GLCD_InvertRect+0xd2>
    406a:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    406c:	5a 18       	sub	r5, r10
    406e:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    4070:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4072:	0f 2e       	mov	r0, r31
    4074:	f5 eb       	ldi	r31, 0xB5	; 181
    4076:	ef 2e       	mov	r14, r31
    4078:	f2 e0       	ldi	r31, 0x02	; 2
    407a:	ff 2e       	mov	r15, r31
    407c:	f0 2d       	mov	r31, r0
    407e:	0f 2e       	mov	r0, r31
    4080:	f4 eb       	ldi	r31, 0xB4	; 180
    4082:	2f 2e       	mov	r2, r31
    4084:	f2 e0       	ldi	r31, 0x02	; 2
    4086:	3f 2e       	mov	r3, r31
    4088:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    408a:	8a 2d       	mov	r24, r10
    408c:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    408e:	e8 2f       	mov	r30, r24
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	df 01       	movw	r26, r30
    4094:	18 96       	adiw	r26, 0x08	; 8
    4096:	0a 17       	cp	r16, r26
    4098:	1b 07       	cpc	r17, r27
    409a:	4c f6       	brge	.-110    	; 0x402e <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    409c:	8b 15       	cp	r24, r11
    409e:	58 f5       	brcc	.+86     	; 0x40f6 <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    40a0:	0e 1b       	sub	r16, r30
    40a2:	1f 0b       	sbc	r17, r31
    40a4:	8f ef       	ldi	r24, 0xFF	; 255
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	9c 01       	movw	r18, r24
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <GLCD_InvertRect+0x144>
    40ac:	22 0f       	add	r18, r18
    40ae:	33 1f       	adc	r19, r19
    40b0:	0a 95       	dec	r16
    40b2:	e2 f7       	brpl	.-8      	; 0x40ac <GLCD_InvertRect+0x140>
    40b4:	b2 2e       	mov	r11, r18
    40b6:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    40b8:	6c 2f       	mov	r22, r28
    40ba:	68 5f       	subi	r22, 0xF8	; 248
    40bc:	8c 2d       	mov	r24, r12
    40be:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    40c2:	dd 20       	and	r13, r13
    40c4:	c1 f0       	breq	.+48     	; 0x40f6 <GLCD_InvertRect+0x18a>
    40c6:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    40c8:	05 eb       	ldi	r16, 0xB5	; 181
    40ca:	12 e0       	ldi	r17, 0x02	; 2
    40cc:	c4 eb       	ldi	r28, 0xB4	; 180
    40ce:	d2 e0       	ldi	r29, 0x02	; 2
    40d0:	f8 01       	movw	r30, r16
    40d2:	c0 80       	ld	r12, Z
    40d4:	f8 80       	ld	r15, Y
    40d6:	6c 2d       	mov	r22, r12
    40d8:	8f 2d       	mov	r24, r15
    40da:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    40de:	9f 2d       	mov	r25, r15
    40e0:	9f 5f       	subi	r25, 0xFF	; 255
    40e2:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    40e4:	48 2f       	mov	r20, r24
    40e6:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    40e8:	6c 2d       	mov	r22, r12
    40ea:	8f 2d       	mov	r24, r15
    40ec:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    40f0:	e3 94       	inc	r14
    40f2:	ed 10       	cpse	r14, r13
    40f4:	ed cf       	rjmp	.-38     	; 0x40d0 <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	0f 91       	pop	r16
    40fe:	ff 90       	pop	r15
    4100:	ef 90       	pop	r14
    4102:	df 90       	pop	r13
    4104:	cf 90       	pop	r12
    4106:	bf 90       	pop	r11
    4108:	af 90       	pop	r10
    410a:	9f 90       	pop	r9
    410c:	8f 90       	pop	r8
    410e:	7f 90       	pop	r7
    4110:	6f 90       	pop	r6
    4112:	5f 90       	pop	r5
    4114:	3f 90       	pop	r3
    4116:	2f 90       	pop	r2
    4118:	08 95       	ret

0000411a <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    411a:	66 23       	and	r22, r22
    411c:	f4 f0       	brlt	.+60     	; 0x415a <GLCD_SetFont+0x40>
    411e:	40 34       	cpi	r20, 0x40	; 64
    4120:	e0 f4       	brcc	.+56     	; 0x415a <GLCD_SetFont+0x40>
    4122:	22 30       	cpi	r18, 0x02	; 2
    4124:	d0 f4       	brcc	.+52     	; 0x415a <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    4126:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <__GLCD+0x5>
    412a:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    412e:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    4132:	40 93 ba 02 	sts	0x02BA, r20	; 0x8002ba <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    4136:	50 e0       	ldi	r21, 0x00	; 0
    4138:	41 50       	subi	r20, 0x01	; 1
    413a:	51 09       	sbc	r21, r1
    413c:	ca 01       	movw	r24, r20
    413e:	99 23       	and	r25, r25
    4140:	0c f4       	brge	.+2      	; 0x4144 <GLCD_SetFont+0x2a>
    4142:	07 96       	adiw	r24, 0x07	; 7
    4144:	95 95       	asr	r25
    4146:	87 95       	ror	r24
    4148:	95 95       	asr	r25
    414a:	87 95       	ror	r24
    414c:	95 95       	asr	r25
    414e:	87 95       	ror	r24
    4150:	8f 5f       	subi	r24, 0xFF	; 255
    4152:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    4156:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <__GLCD+0x9>
    415a:	08 95       	ret

0000415c <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    415c:	2f 92       	push	r2
    415e:	3f 92       	push	r3
    4160:	4f 92       	push	r4
    4162:	5f 92       	push	r5
    4164:	6f 92       	push	r6
    4166:	7f 92       	push	r7
    4168:	8f 92       	push	r8
    416a:	9f 92       	push	r9
    416c:	af 92       	push	r10
    416e:	bf 92       	push	r11
    4170:	cf 92       	push	r12
    4172:	df 92       	push	r13
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	cd b7       	in	r28, 0x3d	; 61
    4182:	de b7       	in	r29, 0x3e	; 62
    4184:	2b 97       	sbiw	r28, 0x0b	; 11
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	de bf       	out	0x3e, r29	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    4190:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    4194:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    4196:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    419a:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    419c:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    41a0:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    41a2:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <__GLCD+0x6>
    41a6:	29 9f       	mul	r18, r25
    41a8:	90 01       	movw	r18, r0
    41aa:	11 24       	eor	r1, r1
    41ac:	2f 5f       	subi	r18, 0xFF	; 255
    41ae:	3f 4f       	sbci	r19, 0xFF	; 255
    41b0:	82 9f       	mul	r24, r18
    41b2:	a0 01       	movw	r20, r0
    41b4:	83 9f       	mul	r24, r19
    41b6:	50 0d       	add	r21, r0
    41b8:	11 24       	eor	r1, r1
    41ba:	59 87       	std	Y+9, r21	; 0x09
    41bc:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    41be:	4f 5f       	subi	r20, 0xFF	; 255
    41c0:	5f 4f       	sbci	r21, 0xFF	; 255
    41c2:	5e 83       	std	Y+6, r21	; 0x06
    41c4:	4d 83       	std	Y+5, r20	; 0x05
    41c6:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <__GLCD+0x4>
    41ca:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <__GLCD+0x5>
    41ce:	a8 85       	ldd	r26, Y+8	; 0x08
    41d0:	b9 85       	ldd	r27, Y+9	; 0x09
    41d2:	ea 0f       	add	r30, r26
    41d4:	fb 1f       	adc	r31, r27
    41d6:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    41d8:	7f 80       	ldd	r7, Y+7	; 0x07
    41da:	b7 e0       	ldi	r27, 0x07	; 7
    41dc:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    41de:	99 23       	and	r25, r25
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <GLCD_PrintChar+0x88>
    41e2:	92 c0       	rjmp	.+292    	; 0x4308 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    41e4:	ef 81       	ldd	r30, Y+7	; 0x07
    41e6:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    41e8:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    41ea:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    41ec:	88 e0       	ldi	r24, 0x08	; 8
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	9c 01       	movw	r18, r24
    41f2:	27 19       	sub	r18, r7
    41f4:	31 09       	sbc	r19, r1
    41f6:	3a 83       	std	Y+2, r19	; 0x02
    41f8:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    41fa:	0f 2e       	mov	r0, r31
    41fc:	fc eb       	ldi	r31, 0xBC	; 188
    41fe:	8f 2e       	mov	r8, r31
    4200:	f2 e0       	ldi	r31, 0x02	; 2
    4202:	9f 2e       	mov	r9, r31
    4204:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4206:	0f 2e       	mov	r0, r31
    4208:	f5 eb       	ldi	r31, 0xB5	; 181
    420a:	af 2e       	mov	r10, r31
    420c:	f2 e0       	ldi	r31, 0x02	; 2
    420e:	bf 2e       	mov	r11, r31
    4210:	f0 2d       	mov	r31, r0
    4212:	04 eb       	ldi	r16, 0xB4	; 180
    4214:	12 e0       	ldi	r17, 0x02	; 2
    4216:	67 2c       	mov	r6, r7
    4218:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    421a:	6b 81       	ldd	r22, Y+3	; 0x03
    421c:	8c 81       	ldd	r24, Y+4	; 0x04
    421e:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    4222:	4d 81       	ldd	r20, Y+5	; 0x05
    4224:	5e 81       	ldd	r21, Y+6	; 0x06
    4226:	43 0d       	add	r20, r3
    4228:	51 1d       	adc	r21, r1
    422a:	5b 87       	std	Y+11, r21	; 0x0b
    422c:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    422e:	7a 01       	movw	r14, r20
    4230:	51 e0       	ldi	r21, 0x01	; 1
    4232:	e5 1a       	sub	r14, r21
    4234:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    4236:	77 20       	and	r7, r7
    4238:	09 f4       	brne	.+2      	; 0x423c <GLCD_PrintChar+0xe0>
    423a:	4f c0       	rjmp	.+158    	; 0x42da <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    423c:	0f 2e       	mov	r0, r31
    423e:	fb eb       	ldi	r31, 0xBB	; 187
    4240:	cf 2e       	mov	r12, r31
    4242:	f2 e0       	ldi	r31, 0x02	; 2
    4244:	df 2e       	mov	r13, r31
    4246:	f0 2d       	mov	r31, r0
    4248:	83 2d       	mov	r24, r3
    424a:	36 2c       	mov	r3, r6
    424c:	67 2c       	mov	r6, r7
    424e:	72 2c       	mov	r7, r2
    4250:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    4252:	a7 eb       	ldi	r26, 0xB7	; 183
    4254:	b2 e0       	ldi	r27, 0x02	; 2
    4256:	2d 91       	ld	r18, X+
    4258:	3c 91       	ld	r19, X
    425a:	ea 85       	ldd	r30, Y+10	; 0x0a
    425c:	fb 85       	ldd	r31, Y+11	; 0x0b
    425e:	e2 0f       	add	r30, r18
    4260:	f3 1f       	adc	r31, r19
    4262:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    4264:	4e 2e       	mov	r4, r30
    4266:	03 2c       	mov	r0, r3
    4268:	01 c0       	rjmp	.+2      	; 0x426c <GLCD_PrintChar+0x110>
    426a:	44 0c       	add	r4, r4
    426c:	0a 94       	dec	r0
    426e:	ea f7       	brpl	.-6      	; 0x426a <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    4270:	55 20       	and	r5, r5
    4272:	81 f0       	breq	.+32     	; 0x4294 <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    4274:	f9 01       	movw	r30, r18
    4276:	ee 0d       	add	r30, r14
    4278:	ff 1d       	adc	r31, r15
    427a:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	09 80       	ldd	r0, Y+1	; 0x01
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <GLCD_PrintChar+0x12a>
    4282:	35 95       	asr	r19
    4284:	27 95       	ror	r18
    4286:	0a 94       	dec	r0
    4288:	e2 f7       	brpl	.-8      	; 0x4282 <GLCD_PrintChar+0x126>
				data |= dataPrev;
    428a:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    428c:	f6 01       	movw	r30, r12
    428e:	80 81       	ld	r24, Z
    4290:	e8 0e       	add	r14, r24
    4292:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    4294:	d4 01       	movw	r26, r8
    4296:	8c 91       	ld	r24, X
    4298:	81 30       	cpi	r24, 0x01	; 1
    429a:	39 f4       	brne	.+14     	; 0x42aa <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    429c:	f5 01       	movw	r30, r10
    429e:	60 81       	ld	r22, Z
    42a0:	d8 01       	movw	r26, r16
    42a2:	8c 91       	ld	r24, X
    42a4:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
    42a8:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    42aa:	f5 01       	movw	r30, r10
    42ac:	60 81       	ld	r22, Z
    42ae:	d8 01       	movw	r26, r16
    42b0:	8c 91       	ld	r24, X
    42b2:	98 2f       	mov	r25, r24
    42b4:	9f 5f       	subi	r25, 0xFF	; 255
    42b6:	9c 93       	st	X, r25
    42b8:	44 2d       	mov	r20, r4
    42ba:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    42be:	f6 01       	movw	r30, r12
    42c0:	80 81       	ld	r24, Z
    42c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    42c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    42c6:	28 0f       	add	r18, r24
    42c8:	31 1d       	adc	r19, r1
    42ca:	3b 87       	std	Y+11, r19	; 0x0b
    42cc:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    42ce:	73 94       	inc	r7
    42d0:	76 10       	cpse	r7, r6
    42d2:	bf cf       	rjmp	.-130    	; 0x4252 <GLCD_PrintChar+0xf6>
    42d4:	76 2c       	mov	r7, r6
    42d6:	63 2c       	mov	r6, r3
    42d8:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    42da:	d4 01       	movw	r26, r8
    42dc:	8c 91       	ld	r24, X
    42de:	81 11       	cpse	r24, r1
    42e0:	07 c0       	rjmp	.+14     	; 0x42f0 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    42e2:	42 2d       	mov	r20, r2
    42e4:	f5 01       	movw	r30, r10
    42e6:	60 81       	ld	r22, Z
    42e8:	d8 01       	movw	r26, r16
    42ea:	8c 91       	ld	r24, X
    42ec:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    42f0:	bb 81       	ldd	r27, Y+3	; 0x03
    42f2:	b8 5f       	subi	r27, 0xF8	; 248
    42f4:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    42f6:	33 94       	inc	r3
    42f8:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <__GLCD+0x8>
    42fc:	38 16       	cp	r3, r24
    42fe:	08 f4       	brcc	.+2      	; 0x4302 <GLCD_PrintChar+0x1a6>
    4300:	8c cf       	rjmp	.-232    	; 0x421a <GLCD_PrintChar+0xbe>
    4302:	57 2c       	mov	r5, r7
    4304:	76 2c       	mov	r7, r6
    4306:	03 c0       	rjmp	.+6      	; 0x430e <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    4308:	ef 81       	ldd	r30, Y+7	; 0x07
    430a:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    430c:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    430e:	2f 81       	ldd	r18, Y+7	; 0x07
    4310:	22 95       	swap	r18
    4312:	26 95       	lsr	r18
    4314:	26 95       	lsr	r18
    4316:	23 70       	andi	r18, 0x03	; 3
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <__GLCD+0x7>
    431e:	82 95       	swap	r24
    4320:	86 95       	lsr	r24
    4322:	86 95       	lsr	r24
    4324:	83 70       	andi	r24, 0x03	; 3
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	ff 81       	ldd	r31, Y+7	; 0x07
    432a:	8f 0f       	add	r24, r31
    432c:	91 1d       	adc	r25, r1
    432e:	28 17       	cp	r18, r24
    4330:	39 07       	cpc	r19, r25
    4332:	09 f4       	brne	.+2      	; 0x4336 <GLCD_PrintChar+0x1da>
    4334:	69 c0       	rjmp	.+210    	; 0x4408 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    4336:	6b 81       	ldd	r22, Y+3	; 0x03
    4338:	8c 81       	ldd	r24, Y+4	; 0x04
    433a:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    433e:	28 85       	ldd	r18, Y+8	; 0x08
    4340:	39 85       	ldd	r19, Y+9	; 0x09
    4342:	23 0d       	add	r18, r3
    4344:	31 1d       	adc	r19, r1
    4346:	3a 83       	std	Y+2, r19	; 0x02
    4348:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    434a:	55 20       	and	r5, r5
    434c:	09 f4       	brne	.+2      	; 0x4350 <GLCD_PrintChar+0x1f4>
    434e:	51 c0       	rjmp	.+162    	; 0x43f2 <GLCD_PrintChar+0x296>
    4350:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4352:	0f 2e       	mov	r0, r31
    4354:	f5 eb       	ldi	r31, 0xB5	; 181
    4356:	af 2e       	mov	r10, r31
    4358:	f2 e0       	ldi	r31, 0x02	; 2
    435a:	bf 2e       	mov	r11, r31
    435c:	f0 2d       	mov	r31, r0
    435e:	04 eb       	ldi	r16, 0xB4	; 180
    4360:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    4362:	0f 2e       	mov	r0, r31
    4364:	f7 eb       	ldi	r31, 0xB7	; 183
    4366:	cf 2e       	mov	r12, r31
    4368:	f2 e0       	ldi	r31, 0x02	; 2
    436a:	df 2e       	mov	r13, r31
    436c:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    436e:	88 e0       	ldi	r24, 0x08	; 8
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	ac 01       	movw	r20, r24
    4374:	47 19       	sub	r20, r7
    4376:	51 09       	sbc	r21, r1
    4378:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    437a:	0f 2e       	mov	r0, r31
    437c:	fc eb       	ldi	r31, 0xBC	; 188
    437e:	ef 2e       	mov	r14, r31
    4380:	f2 e0       	ldi	r31, 0x02	; 2
    4382:	ff 2e       	mov	r15, r31
    4384:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    4386:	0f 2e       	mov	r0, r31
    4388:	fb eb       	ldi	r31, 0xBB	; 187
    438a:	8f 2e       	mov	r8, r31
    438c:	f2 e0       	ldi	r31, 0x02	; 2
    438e:	9f 2e       	mov	r9, r31
    4390:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    4392:	d5 01       	movw	r26, r10
    4394:	2c 90       	ld	r2, X
    4396:	f8 01       	movw	r30, r16
    4398:	40 80       	ld	r4, Z
    439a:	62 2d       	mov	r22, r2
    439c:	84 2d       	mov	r24, r4
    439e:	0e 94 6d 1b 	call	0x36da	; 0x36da <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    43a2:	d6 01       	movw	r26, r12
    43a4:	ed 91       	ld	r30, X+
    43a6:	fc 91       	ld	r31, X
    43a8:	29 81       	ldd	r18, Y+1	; 0x01
    43aa:	3a 81       	ldd	r19, Y+2	; 0x02
    43ac:	e2 0f       	add	r30, r18
    43ae:	f3 1f       	adc	r31, r19
    43b0:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    43b2:	50 e0       	ldi	r21, 0x00	; 0
    43b4:	06 2c       	mov	r0, r6
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <GLCD_PrintChar+0x260>
    43b8:	55 95       	asr	r21
    43ba:	47 95       	ror	r20
    43bc:	0a 94       	dec	r0
    43be:	e2 f7       	brpl	.-8      	; 0x43b8 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    43c0:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    43c2:	d7 01       	movw	r26, r14
    43c4:	9c 91       	ld	r25, X
    43c6:	91 30       	cpi	r25, 0x01	; 1
    43c8:	09 f4       	brne	.+2      	; 0x43cc <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    43ca:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    43cc:	84 2d       	mov	r24, r4
    43ce:	8f 5f       	subi	r24, 0xFF	; 255
    43d0:	f8 01       	movw	r30, r16
    43d2:	80 83       	st	Z, r24
    43d4:	62 2d       	mov	r22, r2
    43d6:	84 2d       	mov	r24, r4
    43d8:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    43dc:	d4 01       	movw	r26, r8
    43de:	8c 91       	ld	r24, X
    43e0:	e9 81       	ldd	r30, Y+1	; 0x01
    43e2:	fa 81       	ldd	r31, Y+2	; 0x02
    43e4:	e8 0f       	add	r30, r24
    43e6:	f1 1d       	adc	r31, r1
    43e8:	fa 83       	std	Y+2, r31	; 0x02
    43ea:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    43ec:	33 94       	inc	r3
    43ee:	35 10       	cpse	r3, r5
    43f0:	d0 cf       	rjmp	.-96     	; 0x4392 <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    43f2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__GLCD+0x9>
    43f6:	81 11       	cpse	r24, r1
    43f8:	07 c0       	rjmp	.+14     	; 0x4408 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    43fa:	40 e0       	ldi	r20, 0x00	; 0
    43fc:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <__GLCD+0x2>
    4400:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    4404:	0e 94 5f 1b 	call	0x36be	; 0x36be <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    4408:	8c 81       	ldd	r24, Y+4	; 0x04
    440a:	8f 5f       	subi	r24, 0xFF	; 255
    440c:	6f 81       	ldd	r22, Y+7	; 0x07
    440e:	85 0d       	add	r24, r5
    4410:	0e 94 1c 1c 	call	0x3838	; 0x3838 <GLCD_GotoXY>
}
    4414:	2b 96       	adiw	r28, 0x0b	; 11
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	f8 94       	cli
    441a:	de bf       	out	0x3e, r29	; 62
    441c:	0f be       	out	0x3f, r0	; 63
    441e:	cd bf       	out	0x3d, r28	; 61
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	ff 90       	pop	r15
    442a:	ef 90       	pop	r14
    442c:	df 90       	pop	r13
    442e:	cf 90       	pop	r12
    4430:	bf 90       	pop	r11
    4432:	af 90       	pop	r10
    4434:	9f 90       	pop	r9
    4436:	8f 90       	pop	r8
    4438:	7f 90       	pop	r7
    443a:	6f 90       	pop	r6
    443c:	5f 90       	pop	r5
    443e:	4f 90       	pop	r4
    4440:	3f 90       	pop	r3
    4442:	2f 90       	pop	r2
    4444:	08 95       	ret

00004446 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    4446:	ef 92       	push	r14
    4448:	ff 92       	push	r15
    444a:	0f 93       	push	r16
    444c:	1f 93       	push	r17
    444e:	cf 93       	push	r28
    4450:	df 93       	push	r29
    4452:	ec 01       	movw	r28, r24
	while(*Text)
    4454:	88 81       	ld	r24, Y
    4456:	88 23       	and	r24, r24
    4458:	19 f1       	breq	.+70     	; 0x44a0 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    445a:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <__GLCD+0x1>
    445e:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <__GLCD+0x6>
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	29 0f       	add	r18, r25
    4466:	31 1d       	adc	r19, r1
    4468:	20 38       	cpi	r18, 0x80	; 128
    446a:	31 05       	cpc	r19, r1
    446c:	cc f4       	brge	.+50     	; 0x44a0 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    446e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    4470:	0f 2e       	mov	r0, r31
    4472:	f4 eb       	ldi	r31, 0xB4	; 180
    4474:	ef 2e       	mov	r14, r31
    4476:	f2 e0       	ldi	r31, 0x02	; 2
    4478:	ff 2e       	mov	r15, r31
    447a:	f0 2d       	mov	r31, r0
    447c:	09 eb       	ldi	r16, 0xB9	; 185
    447e:	12 e0       	ldi	r17, 0x02	; 2
    4480:	0a c0       	rjmp	.+20     	; 0x4496 <GLCD_PrintString+0x50>
    4482:	f7 01       	movw	r30, r14
    4484:	90 81       	ld	r25, Z
    4486:	f8 01       	movw	r30, r16
    4488:	20 81       	ld	r18, Z
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	29 0f       	add	r18, r25
    448e:	31 1d       	adc	r19, r1
    4490:	20 38       	cpi	r18, 0x80	; 128
    4492:	31 05       	cpc	r19, r1
    4494:	2c f4       	brge	.+10     	; 0x44a0 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    4496:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    449a:	89 91       	ld	r24, Y+
    449c:	81 11       	cpse	r24, r1
    449e:	f1 cf       	rjmp	.-30     	; 0x4482 <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	1f 91       	pop	r17
    44a6:	0f 91       	pop	r16
    44a8:	ff 90       	pop	r15
    44aa:	ef 90       	pop	r14
    44ac:	08 95       	ret

000044ae <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    44ae:	0f 93       	push	r16
    44b0:	1f 93       	push	r17
    44b2:	cf 93       	push	r28
    44b4:	df 93       	push	r29
    44b6:	cd b7       	in	r28, 0x3d	; 61
    44b8:	de b7       	in	r29, 0x3e	; 62
    44ba:	2c 97       	sbiw	r28, 0x0c	; 12
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	f8 94       	cli
    44c0:	de bf       	out	0x3e, r29	; 62
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    44c6:	61 15       	cp	r22, r1
    44c8:	71 05       	cpc	r23, r1
    44ca:	81 05       	cpc	r24, r1
    44cc:	91 05       	cpc	r25, r1
    44ce:	21 f4       	brne	.+8      	; 0x44d8 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    44d0:	80 e3       	ldi	r24, 0x30	; 48
    44d2:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
    44d6:	45 c1       	rjmp	.+650    	; 0x4762 <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    44d8:	61 15       	cp	r22, r1
    44da:	71 05       	cpc	r23, r1
    44dc:	81 05       	cpc	r24, r1
    44de:	20 e8       	ldi	r18, 0x80	; 128
    44e0:	92 07       	cpc	r25, r18
    44e2:	09 f4       	brne	.+2      	; 0x44e6 <GLCD_PrintInteger+0x38>
    44e4:	3e c1       	rjmp	.+636    	; 0x4762 <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    44e6:	fe 01       	movw	r30, r28
    44e8:	31 96       	adiw	r30, 0x01	; 1
    44ea:	2c e0       	ldi	r18, 0x0C	; 12
    44ec:	df 01       	movw	r26, r30
    44ee:	1d 92       	st	X+, r1
    44f0:	2a 95       	dec	r18
    44f2:	e9 f7       	brne	.-6      	; 0x44ee <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    44f4:	20 e3       	ldi	r18, 0x30	; 48
    44f6:	2b 87       	std	Y+11, r18	; 0x0b
    44f8:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    44fa:	29 87       	std	Y+9, r18	; 0x09
    44fc:	28 87       	std	Y+8, r18	; 0x08
    44fe:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    4500:	2e 83       	std	Y+6, r18	; 0x06
    4502:	2d 83       	std	Y+5, r18	; 0x05
    4504:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    4506:	2b 83       	std	Y+3, r18	; 0x03
    4508:	2a 83       	std	Y+2, r18	; 0x02
    450a:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    450c:	99 23       	and	r25, r25
    450e:	5c f4       	brge	.+22     	; 0x4526 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    4510:	9b 01       	movw	r18, r22
    4512:	ac 01       	movw	r20, r24
    4514:	88 27       	eor	r24, r24
    4516:	99 27       	eor	r25, r25
    4518:	dc 01       	movw	r26, r24
    451a:	82 1b       	sub	r24, r18
    451c:	93 0b       	sbc	r25, r19
    451e:	a4 0b       	sbc	r26, r20
    4520:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	03 c0       	rjmp	.+6      	; 0x452c <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    452a:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    452c:	81 30       	cpi	r24, 0x01	; 1
    452e:	3a ec       	ldi	r19, 0xCA	; 202
    4530:	93 07       	cpc	r25, r19
    4532:	3a e9       	ldi	r19, 0x9A	; 154
    4534:	a3 07       	cpc	r26, r19
    4536:	3b e3       	ldi	r19, 0x3B	; 59
    4538:	b3 07       	cpc	r27, r19
    453a:	94 f0       	brlt	.+36     	; 0x4560 <GLCD_PrintInteger+0xb2>
    453c:	2a 81       	ldd	r18, Y+2	; 0x02
    453e:	2f 5f       	subi	r18, 0xFF	; 255
    4540:	01 c0       	rjmp	.+2      	; 0x4544 <GLCD_PrintInteger+0x96>
    4542:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    4544:	9a 5c       	subi	r25, 0xCA	; 202
    4546:	aa 49       	sbci	r26, 0x9A	; 154
    4548:	bb 43       	sbci	r27, 0x3B	; 59
    454a:	32 2f       	mov	r19, r18
    454c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    454e:	81 30       	cpi	r24, 0x01	; 1
    4550:	5a ec       	ldi	r21, 0xCA	; 202
    4552:	95 07       	cpc	r25, r21
    4554:	5a e9       	ldi	r21, 0x9A	; 154
    4556:	a5 07       	cpc	r26, r21
    4558:	5b e3       	ldi	r21, 0x3B	; 59
    455a:	b5 07       	cpc	r27, r21
    455c:	94 f7       	brge	.-28     	; 0x4542 <GLCD_PrintInteger+0x94>
    455e:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4560:	81 15       	cp	r24, r1
    4562:	21 ee       	ldi	r18, 0xE1	; 225
    4564:	92 07       	cpc	r25, r18
    4566:	25 ef       	ldi	r18, 0xF5	; 245
    4568:	a2 07       	cpc	r26, r18
    456a:	25 e0       	ldi	r18, 0x05	; 5
    456c:	b2 07       	cpc	r27, r18
    456e:	94 f0       	brlt	.+36     	; 0x4594 <GLCD_PrintInteger+0xe6>
    4570:	2b 81       	ldd	r18, Y+3	; 0x03
    4572:	2f 5f       	subi	r18, 0xFF	; 255
    4574:	01 c0       	rjmp	.+2      	; 0x4578 <GLCD_PrintInteger+0xca>
    4576:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    4578:	91 5e       	subi	r25, 0xE1	; 225
    457a:	a5 4f       	sbci	r26, 0xF5	; 245
    457c:	b5 40       	sbci	r27, 0x05	; 5
    457e:	32 2f       	mov	r19, r18
    4580:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4582:	81 15       	cp	r24, r1
    4584:	51 ee       	ldi	r21, 0xE1	; 225
    4586:	95 07       	cpc	r25, r21
    4588:	55 ef       	ldi	r21, 0xF5	; 245
    458a:	a5 07       	cpc	r26, r21
    458c:	55 e0       	ldi	r21, 0x05	; 5
    458e:	b5 07       	cpc	r27, r21
    4590:	94 f7       	brge	.-28     	; 0x4576 <GLCD_PrintInteger+0xc8>
    4592:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    4594:	80 38       	cpi	r24, 0x80	; 128
    4596:	26 e9       	ldi	r18, 0x96	; 150
    4598:	92 07       	cpc	r25, r18
    459a:	28 e9       	ldi	r18, 0x98	; 152
    459c:	a2 07       	cpc	r26, r18
    459e:	b1 05       	cpc	r27, r1
    45a0:	94 f0       	brlt	.+36     	; 0x45c6 <GLCD_PrintInteger+0x118>
    45a2:	2c 81       	ldd	r18, Y+4	; 0x04
    45a4:	2f 5f       	subi	r18, 0xFF	; 255
    45a6:	01 c0       	rjmp	.+2      	; 0x45aa <GLCD_PrintInteger+0xfc>
    45a8:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    45aa:	80 58       	subi	r24, 0x80	; 128
    45ac:	96 49       	sbci	r25, 0x96	; 150
    45ae:	a8 49       	sbci	r26, 0x98	; 152
    45b0:	b1 09       	sbc	r27, r1
    45b2:	32 2f       	mov	r19, r18
    45b4:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    45b6:	80 38       	cpi	r24, 0x80	; 128
    45b8:	56 e9       	ldi	r21, 0x96	; 150
    45ba:	95 07       	cpc	r25, r21
    45bc:	58 e9       	ldi	r21, 0x98	; 152
    45be:	a5 07       	cpc	r26, r21
    45c0:	b1 05       	cpc	r27, r1
    45c2:	94 f7       	brge	.-28     	; 0x45a8 <GLCD_PrintInteger+0xfa>
    45c4:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    45c6:	80 34       	cpi	r24, 0x40	; 64
    45c8:	22 e4       	ldi	r18, 0x42	; 66
    45ca:	92 07       	cpc	r25, r18
    45cc:	2f e0       	ldi	r18, 0x0F	; 15
    45ce:	a2 07       	cpc	r26, r18
    45d0:	b1 05       	cpc	r27, r1
    45d2:	94 f0       	brlt	.+36     	; 0x45f8 <GLCD_PrintInteger+0x14a>
    45d4:	2d 81       	ldd	r18, Y+5	; 0x05
    45d6:	2f 5f       	subi	r18, 0xFF	; 255
    45d8:	01 c0       	rjmp	.+2      	; 0x45dc <GLCD_PrintInteger+0x12e>
    45da:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    45dc:	80 54       	subi	r24, 0x40	; 64
    45de:	92 44       	sbci	r25, 0x42	; 66
    45e0:	af 40       	sbci	r26, 0x0F	; 15
    45e2:	b1 09       	sbc	r27, r1
    45e4:	32 2f       	mov	r19, r18
    45e6:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    45e8:	80 34       	cpi	r24, 0x40	; 64
    45ea:	52 e4       	ldi	r21, 0x42	; 66
    45ec:	95 07       	cpc	r25, r21
    45ee:	5f e0       	ldi	r21, 0x0F	; 15
    45f0:	a5 07       	cpc	r26, r21
    45f2:	b1 05       	cpc	r27, r1
    45f4:	94 f7       	brge	.-28     	; 0x45da <GLCD_PrintInteger+0x12c>
    45f6:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    45f8:	80 3a       	cpi	r24, 0xA0	; 160
    45fa:	26 e8       	ldi	r18, 0x86	; 134
    45fc:	92 07       	cpc	r25, r18
    45fe:	21 e0       	ldi	r18, 0x01	; 1
    4600:	a2 07       	cpc	r26, r18
    4602:	b1 05       	cpc	r27, r1
    4604:	94 f0       	brlt	.+36     	; 0x462a <GLCD_PrintInteger+0x17c>
    4606:	2e 81       	ldd	r18, Y+6	; 0x06
    4608:	2f 5f       	subi	r18, 0xFF	; 255
    460a:	01 c0       	rjmp	.+2      	; 0x460e <GLCD_PrintInteger+0x160>
    460c:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    460e:	80 5a       	subi	r24, 0xA0	; 160
    4610:	96 48       	sbci	r25, 0x86	; 134
    4612:	a1 40       	sbci	r26, 0x01	; 1
    4614:	b1 09       	sbc	r27, r1
    4616:	32 2f       	mov	r19, r18
    4618:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    461a:	80 3a       	cpi	r24, 0xA0	; 160
    461c:	56 e8       	ldi	r21, 0x86	; 134
    461e:	95 07       	cpc	r25, r21
    4620:	51 e0       	ldi	r21, 0x01	; 1
    4622:	a5 07       	cpc	r26, r21
    4624:	b1 05       	cpc	r27, r1
    4626:	94 f7       	brge	.-28     	; 0x460c <GLCD_PrintInteger+0x15e>
    4628:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    462a:	80 31       	cpi	r24, 0x10	; 16
    462c:	27 e2       	ldi	r18, 0x27	; 39
    462e:	92 07       	cpc	r25, r18
    4630:	a1 05       	cpc	r26, r1
    4632:	b1 05       	cpc	r27, r1
    4634:	8c f0       	brlt	.+34     	; 0x4658 <GLCD_PrintInteger+0x1aa>
    4636:	2f 81       	ldd	r18, Y+7	; 0x07
    4638:	2f 5f       	subi	r18, 0xFF	; 255
    463a:	01 c0       	rjmp	.+2      	; 0x463e <GLCD_PrintInteger+0x190>
    463c:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    463e:	80 51       	subi	r24, 0x10	; 16
    4640:	97 42       	sbci	r25, 0x27	; 39
    4642:	a1 09       	sbc	r26, r1
    4644:	b1 09       	sbc	r27, r1
    4646:	32 2f       	mov	r19, r18
    4648:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    464a:	80 31       	cpi	r24, 0x10	; 16
    464c:	57 e2       	ldi	r21, 0x27	; 39
    464e:	95 07       	cpc	r25, r21
    4650:	a1 05       	cpc	r26, r1
    4652:	b1 05       	cpc	r27, r1
    4654:	9c f7       	brge	.-26     	; 0x463c <GLCD_PrintInteger+0x18e>
    4656:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4658:	88 3e       	cpi	r24, 0xE8	; 232
    465a:	23 e0       	ldi	r18, 0x03	; 3
    465c:	92 07       	cpc	r25, r18
    465e:	a1 05       	cpc	r26, r1
    4660:	b1 05       	cpc	r27, r1
    4662:	8c f0       	brlt	.+34     	; 0x4686 <GLCD_PrintInteger+0x1d8>
    4664:	28 85       	ldd	r18, Y+8	; 0x08
    4666:	2f 5f       	subi	r18, 0xFF	; 255
    4668:	01 c0       	rjmp	.+2      	; 0x466c <GLCD_PrintInteger+0x1be>
    466a:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    466c:	88 5e       	subi	r24, 0xE8	; 232
    466e:	93 40       	sbci	r25, 0x03	; 3
    4670:	a1 09       	sbc	r26, r1
    4672:	b1 09       	sbc	r27, r1
    4674:	32 2f       	mov	r19, r18
    4676:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    4678:	88 3e       	cpi	r24, 0xE8	; 232
    467a:	53 e0       	ldi	r21, 0x03	; 3
    467c:	95 07       	cpc	r25, r21
    467e:	a1 05       	cpc	r26, r1
    4680:	b1 05       	cpc	r27, r1
    4682:	9c f7       	brge	.-26     	; 0x466a <GLCD_PrintInteger+0x1bc>
    4684:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    4686:	84 36       	cpi	r24, 0x64	; 100
    4688:	91 05       	cpc	r25, r1
    468a:	a1 05       	cpc	r26, r1
    468c:	b1 05       	cpc	r27, r1
    468e:	84 f0       	brlt	.+32     	; 0x46b0 <GLCD_PrintInteger+0x202>
    4690:	29 85       	ldd	r18, Y+9	; 0x09
    4692:	2f 5f       	subi	r18, 0xFF	; 255
    4694:	01 c0       	rjmp	.+2      	; 0x4698 <GLCD_PrintInteger+0x1ea>
    4696:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    4698:	84 56       	subi	r24, 0x64	; 100
    469a:	91 09       	sbc	r25, r1
    469c:	a1 09       	sbc	r26, r1
    469e:	b1 09       	sbc	r27, r1
    46a0:	32 2f       	mov	r19, r18
    46a2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    46a4:	84 36       	cpi	r24, 0x64	; 100
    46a6:	91 05       	cpc	r25, r1
    46a8:	a1 05       	cpc	r26, r1
    46aa:	b1 05       	cpc	r27, r1
    46ac:	a4 f7       	brge	.-24     	; 0x4696 <GLCD_PrintInteger+0x1e8>
    46ae:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    46b0:	8a 30       	cpi	r24, 0x0A	; 10
    46b2:	91 05       	cpc	r25, r1
    46b4:	a1 05       	cpc	r26, r1
    46b6:	b1 05       	cpc	r27, r1
    46b8:	7c f0       	brlt	.+30     	; 0x46d8 <GLCD_PrintInteger+0x22a>
    46ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    46bc:	2f 5f       	subi	r18, 0xFF	; 255
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <GLCD_PrintInteger+0x214>
    46c0:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    46c2:	0a 97       	sbiw	r24, 0x0a	; 10
    46c4:	a1 09       	sbc	r26, r1
    46c6:	b1 09       	sbc	r27, r1
    46c8:	32 2f       	mov	r19, r18
    46ca:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    46cc:	8a 30       	cpi	r24, 0x0A	; 10
    46ce:	91 05       	cpc	r25, r1
    46d0:	a1 05       	cpc	r26, r1
    46d2:	b1 05       	cpc	r27, r1
    46d4:	ac f7       	brge	.-22     	; 0x46c0 <GLCD_PrintInteger+0x212>
    46d6:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    46d8:	18 16       	cp	r1, r24
    46da:	19 06       	cpc	r1, r25
    46dc:	1a 06       	cpc	r1, r26
    46de:	1b 06       	cpc	r1, r27
    46e0:	5c f4       	brge	.+22     	; 0x46f8 <GLCD_PrintInteger+0x24a>
    46e2:	5b 85       	ldd	r21, Y+11	; 0x0b
    46e4:	8c 01       	movw	r16, r24
    46e6:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    46e8:	01 50       	subi	r16, 0x01	; 1
    46ea:	11 09       	sbc	r17, r1
    46ec:	21 09       	sbc	r18, r1
    46ee:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    46f0:	d9 f7       	brne	.-10     	; 0x46e8 <GLCD_PrintInteger+0x23a>
    46f2:	65 2f       	mov	r22, r21
    46f4:	68 0f       	add	r22, r24
    46f6:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	80 33       	cpi	r24, 0x30	; 48
    46fc:	61 f4       	brne	.+24     	; 0x4716 <GLCD_PrintInteger+0x268>
    46fe:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    4700:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    4702:	e1 e0       	ldi	r30, 0x01	; 1
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	ec 0f       	add	r30, r28
    4708:	fd 1f       	adc	r31, r29
    470a:	e8 0f       	add	r30, r24
    470c:	f1 1d       	adc	r31, r1
    470e:	90 81       	ld	r25, Z
    4710:	90 33       	cpi	r25, 0x30	; 48
    4712:	b1 f3       	breq	.-20     	; 0x4700 <GLCD_PrintInteger+0x252>
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <GLCD_PrintInteger+0x26a>
    4716:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    4718:	44 23       	and	r20, r20
    471a:	31 f0       	breq	.+12     	; 0x4728 <GLCD_PrintInteger+0x27a>
	{
		i--;
    471c:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    471e:	fe 01       	movw	r30, r28
    4720:	e8 0f       	add	r30, r24
    4722:	f1 1d       	adc	r31, r1
    4724:	9d e2       	ldi	r25, 0x2D	; 45
    4726:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    4728:	4a e0       	ldi	r20, 0x0A	; 10
    472a:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    472c:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	e1 e0       	ldi	r30, 0x01	; 1
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	ec 0f       	add	r30, r28
    4736:	fd 1f       	adc	r31, r29
    4738:	e2 0f       	add	r30, r18
    473a:	f1 1d       	adc	r31, r1
    473c:	df 01       	movw	r26, r30
    473e:	a8 0f       	add	r26, r24
    4740:	b9 1f       	adc	r27, r25
    4742:	3c 91       	ld	r19, X
    4744:	30 83       	st	Z, r19
		i++;
    4746:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    4748:	42 17       	cp	r20, r18
    474a:	90 f7       	brcc	.-28     	; 0x4730 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    474c:	e1 e0       	ldi	r30, 0x01	; 1
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	ec 0f       	add	r30, r28
    4752:	fd 1f       	adc	r31, r29
    4754:	e2 0f       	add	r30, r18
    4756:	f1 1d       	adc	r31, r1
    4758:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    475a:	ce 01       	movw	r24, r28
    475c:	01 96       	adiw	r24, 0x01	; 1
    475e:	0e 94 23 22 	call	0x4446	; 0x4446 <GLCD_PrintString>
	}
}
    4762:	2c 96       	adiw	r28, 0x0c	; 12
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	f8 94       	cli
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	0f be       	out	0x3f, r0	; 63
    476c:	cd bf       	out	0x3d, r28	; 61
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	1f 91       	pop	r17
    4774:	0f 91       	pop	r16
    4776:	08 95       	ret

00004778 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    4778:	8f 92       	push	r8
    477a:	9f 92       	push	r9
    477c:	af 92       	push	r10
    477e:	bf 92       	push	r11
    4780:	cf 92       	push	r12
    4782:	df 92       	push	r13
    4784:	ef 92       	push	r14
    4786:	ff 92       	push	r15
    4788:	6b 01       	movw	r12, r22
    478a:	7c 01       	movw	r14, r24
    478c:	49 01       	movw	r8, r18
    478e:	5a 01       	movw	r10, r20
	if (Value == 0)
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	a9 01       	movw	r20, r18
    4796:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    479a:	81 11       	cpse	r24, r1
    479c:	0a c0       	rjmp	.+20     	; 0x47b2 <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    479e:	80 e3       	ldi	r24, 0x30	; 48
    47a0:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
		GLCD_PrintChar('.');
    47a4:	8e e2       	ldi	r24, 0x2E	; 46
    47a6:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
		GLCD_PrintChar('0');
    47aa:	80 e3       	ldi	r24, 0x30	; 48
    47ac:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
    47b0:	4a c0       	rjmp	.+148    	; 0x4846 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	40 e0       	ldi	r20, 0x00	; 0
    47b8:	5f ec       	ldi	r21, 0xCF	; 207
    47ba:	c7 01       	movw	r24, r14
    47bc:	b6 01       	movw	r22, r12
    47be:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__gesf2>
    47c2:	88 23       	and	r24, r24
    47c4:	0c f4       	brge	.+2      	; 0x47c8 <GLCD_PrintDouble+0x50>
    47c6:	3f c0       	rjmp	.+126    	; 0x4846 <GLCD_PrintDouble+0xce>
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	40 e0       	ldi	r20, 0x00	; 0
    47ce:	5f e4       	ldi	r21, 0x4F	; 79
    47d0:	c7 01       	movw	r24, r14
    47d2:	b6 01       	movw	r22, r12
    47d4:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    47d8:	88 23       	and	r24, r24
    47da:	ac f5       	brge	.+106    	; 0x4846 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	a9 01       	movw	r20, r18
    47e2:	c7 01       	movw	r24, r14
    47e4:	b6 01       	movw	r22, r12
    47e6:	0e 94 bd 24 	call	0x497a	; 0x497a <__cmpsf2>
    47ea:	88 23       	and	r24, r24
    47ec:	3c f4       	brge	.+14     	; 0x47fc <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    47ee:	f7 fa       	bst	r15, 7
    47f0:	f0 94       	com	r15
    47f2:	f7 f8       	bld	r15, 7
    47f4:	f0 94       	com	r15
			GLCD_PrintChar('-');
    47f6:	8d e2       	ldi	r24, 0x2D	; 45
    47f8:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    47fc:	c7 01       	movw	r24, r14
    47fe:	b6 01       	movw	r22, r12
    4800:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__fixsfsi>
    4804:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    4808:	8e e2       	ldi	r24, 0x2E	; 46
    480a:	0e 94 ae 20 	call	0x415c	; 0x415c <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    480e:	c7 01       	movw	r24, r14
    4810:	b6 01       	movw	r22, r12
    4812:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    4816:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    481a:	9b 01       	movw	r18, r22
    481c:	ac 01       	movw	r20, r24
    481e:	c7 01       	movw	r24, r14
    4820:	b6 01       	movw	r22, r12
    4822:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__subsf3>
    4826:	6b 01       	movw	r12, r22
    4828:	7c 01       	movw	r14, r24
    482a:	c5 01       	movw	r24, r10
    482c:	b4 01       	movw	r22, r8
    482e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__floatunsisf>
    4832:	9b 01       	movw	r18, r22
    4834:	ac 01       	movw	r20, r24
    4836:	c7 01       	movw	r24, r14
    4838:	b6 01       	movw	r22, r12
    483a:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__mulsf3>
    483e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__fixsfsi>
    4842:	0e 94 57 22 	call	0x44ae	; 0x44ae <GLCD_PrintInteger>
	}
}
    4846:	ff 90       	pop	r15
    4848:	ef 90       	pop	r14
    484a:	df 90       	pop	r13
    484c:	cf 90       	pop	r12
    484e:	bf 90       	pop	r11
    4850:	af 90       	pop	r10
    4852:	9f 90       	pop	r9
    4854:	8f 90       	pop	r8
    4856:	08 95       	ret

00004858 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    4858:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    485a:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    485c:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    485e:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    4860:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    4862:	8c e0       	ldi	r24, 0x0C	; 12
    4864:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    4866:	84 e0       	ldi	r24, 0x04	; 4
    4868:	86 bf       	out	0x36, r24	; 54
    486a:	08 95       	ret

0000486c <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    486c:	81 b1       	in	r24, 0x01	; 1
}
    486e:	88 7f       	andi	r24, 0xF8	; 248
    4870:	08 95       	ret

00004872 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4872:	84 ea       	ldi	r24, 0xA4	; 164
    4874:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    4876:	06 b6       	in	r0, 0x36	; 54
    4878:	07 fe       	sbrs	r0, 7
    487a:	fd cf       	rjmp	.-6      	; 0x4876 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    487c:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_Status>
}
    4880:	08 95       	ret

00004882 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    4882:	85 ed       	ldi	r24, 0xD5	; 213
    4884:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    4886:	06 b6       	in	r0, 0x36	; 54
    4888:	04 fc       	sbrc	r0, 4
    488a:	fd cf       	rjmp	.-6      	; 0x4886 <TWI_EndTransmission+0x4>
}
    488c:	08 95       	ret

0000488e <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    488e:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    4890:	84 e8       	ldi	r24, 0x84	; 132
    4892:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    4894:	06 b6       	in	r0, 0x36	; 54
    4896:	07 fe       	sbrs	r0, 7
    4898:	fd cf       	rjmp	.-6      	; 0x4894 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    489a:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_Status>
}
    489e:	08 95       	ret

000048a0 <__subsf3>:
    48a0:	50 58       	subi	r21, 0x80	; 128

000048a2 <__addsf3>:
    48a2:	bb 27       	eor	r27, r27
    48a4:	aa 27       	eor	r26, r26
    48a6:	0e 94 68 24 	call	0x48d0	; 0x48d0 <__addsf3x>
    48aa:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <__fp_round>
    48ae:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <__fp_pscA>
    48b2:	38 f0       	brcs	.+14     	; 0x48c2 <__addsf3+0x20>
    48b4:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__fp_pscB>
    48b8:	20 f0       	brcs	.+8      	; 0x48c2 <__addsf3+0x20>
    48ba:	39 f4       	brne	.+14     	; 0x48ca <__addsf3+0x28>
    48bc:	9f 3f       	cpi	r25, 0xFF	; 255
    48be:	19 f4       	brne	.+6      	; 0x48c6 <__addsf3+0x24>
    48c0:	26 f4       	brtc	.+8      	; 0x48ca <__addsf3+0x28>
    48c2:	0c 94 d1 25 	jmp	0x4ba2	; 0x4ba2 <__fp_nan>
    48c6:	0e f4       	brtc	.+2      	; 0x48ca <__addsf3+0x28>
    48c8:	e0 95       	com	r30
    48ca:	e7 fb       	bst	r30, 7
    48cc:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__fp_inf>

000048d0 <__addsf3x>:
    48d0:	e9 2f       	mov	r30, r25
    48d2:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__fp_split3>
    48d6:	58 f3       	brcs	.-42     	; 0x48ae <__addsf3+0xc>
    48d8:	ba 17       	cp	r27, r26
    48da:	62 07       	cpc	r22, r18
    48dc:	73 07       	cpc	r23, r19
    48de:	84 07       	cpc	r24, r20
    48e0:	95 07       	cpc	r25, r21
    48e2:	20 f0       	brcs	.+8      	; 0x48ec <__addsf3x+0x1c>
    48e4:	79 f4       	brne	.+30     	; 0x4904 <__addsf3x+0x34>
    48e6:	a6 f5       	brtc	.+104    	; 0x4950 <__addsf3x+0x80>
    48e8:	0c 94 15 26 	jmp	0x4c2a	; 0x4c2a <__fp_zero>
    48ec:	0e f4       	brtc	.+2      	; 0x48f0 <__addsf3x+0x20>
    48ee:	e0 95       	com	r30
    48f0:	0b 2e       	mov	r0, r27
    48f2:	ba 2f       	mov	r27, r26
    48f4:	a0 2d       	mov	r26, r0
    48f6:	0b 01       	movw	r0, r22
    48f8:	b9 01       	movw	r22, r18
    48fa:	90 01       	movw	r18, r0
    48fc:	0c 01       	movw	r0, r24
    48fe:	ca 01       	movw	r24, r20
    4900:	a0 01       	movw	r20, r0
    4902:	11 24       	eor	r1, r1
    4904:	ff 27       	eor	r31, r31
    4906:	59 1b       	sub	r21, r25
    4908:	99 f0       	breq	.+38     	; 0x4930 <__addsf3x+0x60>
    490a:	59 3f       	cpi	r21, 0xF9	; 249
    490c:	50 f4       	brcc	.+20     	; 0x4922 <__addsf3x+0x52>
    490e:	50 3e       	cpi	r21, 0xE0	; 224
    4910:	68 f1       	brcs	.+90     	; 0x496c <__addsf3x+0x9c>
    4912:	1a 16       	cp	r1, r26
    4914:	f0 40       	sbci	r31, 0x00	; 0
    4916:	a2 2f       	mov	r26, r18
    4918:	23 2f       	mov	r18, r19
    491a:	34 2f       	mov	r19, r20
    491c:	44 27       	eor	r20, r20
    491e:	58 5f       	subi	r21, 0xF8	; 248
    4920:	f3 cf       	rjmp	.-26     	; 0x4908 <__addsf3x+0x38>
    4922:	46 95       	lsr	r20
    4924:	37 95       	ror	r19
    4926:	27 95       	ror	r18
    4928:	a7 95       	ror	r26
    492a:	f0 40       	sbci	r31, 0x00	; 0
    492c:	53 95       	inc	r21
    492e:	c9 f7       	brne	.-14     	; 0x4922 <__addsf3x+0x52>
    4930:	7e f4       	brtc	.+30     	; 0x4950 <__addsf3x+0x80>
    4932:	1f 16       	cp	r1, r31
    4934:	ba 0b       	sbc	r27, r26
    4936:	62 0b       	sbc	r22, r18
    4938:	73 0b       	sbc	r23, r19
    493a:	84 0b       	sbc	r24, r20
    493c:	ba f0       	brmi	.+46     	; 0x496c <__addsf3x+0x9c>
    493e:	91 50       	subi	r25, 0x01	; 1
    4940:	a1 f0       	breq	.+40     	; 0x496a <__addsf3x+0x9a>
    4942:	ff 0f       	add	r31, r31
    4944:	bb 1f       	adc	r27, r27
    4946:	66 1f       	adc	r22, r22
    4948:	77 1f       	adc	r23, r23
    494a:	88 1f       	adc	r24, r24
    494c:	c2 f7       	brpl	.-16     	; 0x493e <__addsf3x+0x6e>
    494e:	0e c0       	rjmp	.+28     	; 0x496c <__addsf3x+0x9c>
    4950:	ba 0f       	add	r27, r26
    4952:	62 1f       	adc	r22, r18
    4954:	73 1f       	adc	r23, r19
    4956:	84 1f       	adc	r24, r20
    4958:	48 f4       	brcc	.+18     	; 0x496c <__addsf3x+0x9c>
    495a:	87 95       	ror	r24
    495c:	77 95       	ror	r23
    495e:	67 95       	ror	r22
    4960:	b7 95       	ror	r27
    4962:	f7 95       	ror	r31
    4964:	9e 3f       	cpi	r25, 0xFE	; 254
    4966:	08 f0       	brcs	.+2      	; 0x496a <__addsf3x+0x9a>
    4968:	b0 cf       	rjmp	.-160    	; 0x48ca <__addsf3+0x28>
    496a:	93 95       	inc	r25
    496c:	88 0f       	add	r24, r24
    496e:	08 f0       	brcs	.+2      	; 0x4972 <__addsf3x+0xa2>
    4970:	99 27       	eor	r25, r25
    4972:	ee 0f       	add	r30, r30
    4974:	97 95       	ror	r25
    4976:	87 95       	ror	r24
    4978:	08 95       	ret

0000497a <__cmpsf2>:
    497a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__fp_cmp>
    497e:	08 f4       	brcc	.+2      	; 0x4982 <__cmpsf2+0x8>
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	08 95       	ret

00004984 <__divsf3>:
    4984:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__divsf3x>
    4988:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <__fp_round>
    498c:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__fp_pscB>
    4990:	58 f0       	brcs	.+22     	; 0x49a8 <__divsf3+0x24>
    4992:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <__fp_pscA>
    4996:	40 f0       	brcs	.+16     	; 0x49a8 <__divsf3+0x24>
    4998:	29 f4       	brne	.+10     	; 0x49a4 <__divsf3+0x20>
    499a:	5f 3f       	cpi	r21, 0xFF	; 255
    499c:	29 f0       	breq	.+10     	; 0x49a8 <__divsf3+0x24>
    499e:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__fp_inf>
    49a2:	51 11       	cpse	r21, r1
    49a4:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__fp_szero>
    49a8:	0c 94 d1 25 	jmp	0x4ba2	; 0x4ba2 <__fp_nan>

000049ac <__divsf3x>:
    49ac:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__fp_split3>
    49b0:	68 f3       	brcs	.-38     	; 0x498c <__divsf3+0x8>

000049b2 <__divsf3_pse>:
    49b2:	99 23       	and	r25, r25
    49b4:	b1 f3       	breq	.-20     	; 0x49a2 <__divsf3+0x1e>
    49b6:	55 23       	and	r21, r21
    49b8:	91 f3       	breq	.-28     	; 0x499e <__divsf3+0x1a>
    49ba:	95 1b       	sub	r25, r21
    49bc:	55 0b       	sbc	r21, r21
    49be:	bb 27       	eor	r27, r27
    49c0:	aa 27       	eor	r26, r26
    49c2:	62 17       	cp	r22, r18
    49c4:	73 07       	cpc	r23, r19
    49c6:	84 07       	cpc	r24, r20
    49c8:	38 f0       	brcs	.+14     	; 0x49d8 <__divsf3_pse+0x26>
    49ca:	9f 5f       	subi	r25, 0xFF	; 255
    49cc:	5f 4f       	sbci	r21, 0xFF	; 255
    49ce:	22 0f       	add	r18, r18
    49d0:	33 1f       	adc	r19, r19
    49d2:	44 1f       	adc	r20, r20
    49d4:	aa 1f       	adc	r26, r26
    49d6:	a9 f3       	breq	.-22     	; 0x49c2 <__divsf3_pse+0x10>
    49d8:	35 d0       	rcall	.+106    	; 0x4a44 <__divsf3_pse+0x92>
    49da:	0e 2e       	mov	r0, r30
    49dc:	3a f0       	brmi	.+14     	; 0x49ec <__divsf3_pse+0x3a>
    49de:	e0 e8       	ldi	r30, 0x80	; 128
    49e0:	32 d0       	rcall	.+100    	; 0x4a46 <__divsf3_pse+0x94>
    49e2:	91 50       	subi	r25, 0x01	; 1
    49e4:	50 40       	sbci	r21, 0x00	; 0
    49e6:	e6 95       	lsr	r30
    49e8:	00 1c       	adc	r0, r0
    49ea:	ca f7       	brpl	.-14     	; 0x49de <__divsf3_pse+0x2c>
    49ec:	2b d0       	rcall	.+86     	; 0x4a44 <__divsf3_pse+0x92>
    49ee:	fe 2f       	mov	r31, r30
    49f0:	29 d0       	rcall	.+82     	; 0x4a44 <__divsf3_pse+0x92>
    49f2:	66 0f       	add	r22, r22
    49f4:	77 1f       	adc	r23, r23
    49f6:	88 1f       	adc	r24, r24
    49f8:	bb 1f       	adc	r27, r27
    49fa:	26 17       	cp	r18, r22
    49fc:	37 07       	cpc	r19, r23
    49fe:	48 07       	cpc	r20, r24
    4a00:	ab 07       	cpc	r26, r27
    4a02:	b0 e8       	ldi	r27, 0x80	; 128
    4a04:	09 f0       	breq	.+2      	; 0x4a08 <__divsf3_pse+0x56>
    4a06:	bb 0b       	sbc	r27, r27
    4a08:	80 2d       	mov	r24, r0
    4a0a:	bf 01       	movw	r22, r30
    4a0c:	ff 27       	eor	r31, r31
    4a0e:	93 58       	subi	r25, 0x83	; 131
    4a10:	5f 4f       	sbci	r21, 0xFF	; 255
    4a12:	3a f0       	brmi	.+14     	; 0x4a22 <__divsf3_pse+0x70>
    4a14:	9e 3f       	cpi	r25, 0xFE	; 254
    4a16:	51 05       	cpc	r21, r1
    4a18:	78 f0       	brcs	.+30     	; 0x4a38 <__divsf3_pse+0x86>
    4a1a:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__fp_inf>
    4a1e:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__fp_szero>
    4a22:	5f 3f       	cpi	r21, 0xFF	; 255
    4a24:	e4 f3       	brlt	.-8      	; 0x4a1e <__divsf3_pse+0x6c>
    4a26:	98 3e       	cpi	r25, 0xE8	; 232
    4a28:	d4 f3       	brlt	.-12     	; 0x4a1e <__divsf3_pse+0x6c>
    4a2a:	86 95       	lsr	r24
    4a2c:	77 95       	ror	r23
    4a2e:	67 95       	ror	r22
    4a30:	b7 95       	ror	r27
    4a32:	f7 95       	ror	r31
    4a34:	9f 5f       	subi	r25, 0xFF	; 255
    4a36:	c9 f7       	brne	.-14     	; 0x4a2a <__divsf3_pse+0x78>
    4a38:	88 0f       	add	r24, r24
    4a3a:	91 1d       	adc	r25, r1
    4a3c:	96 95       	lsr	r25
    4a3e:	87 95       	ror	r24
    4a40:	97 f9       	bld	r25, 7
    4a42:	08 95       	ret
    4a44:	e1 e0       	ldi	r30, 0x01	; 1
    4a46:	66 0f       	add	r22, r22
    4a48:	77 1f       	adc	r23, r23
    4a4a:	88 1f       	adc	r24, r24
    4a4c:	bb 1f       	adc	r27, r27
    4a4e:	62 17       	cp	r22, r18
    4a50:	73 07       	cpc	r23, r19
    4a52:	84 07       	cpc	r24, r20
    4a54:	ba 07       	cpc	r27, r26
    4a56:	20 f0       	brcs	.+8      	; 0x4a60 <__divsf3_pse+0xae>
    4a58:	62 1b       	sub	r22, r18
    4a5a:	73 0b       	sbc	r23, r19
    4a5c:	84 0b       	sbc	r24, r20
    4a5e:	ba 0b       	sbc	r27, r26
    4a60:	ee 1f       	adc	r30, r30
    4a62:	88 f7       	brcc	.-30     	; 0x4a46 <__divsf3_pse+0x94>
    4a64:	e0 95       	com	r30
    4a66:	08 95       	ret

00004a68 <__fixsfsi>:
    4a68:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <__fixunssfsi>
    4a6c:	68 94       	set
    4a6e:	b1 11       	cpse	r27, r1
    4a70:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__fp_szero>
    4a74:	08 95       	ret

00004a76 <__fixunssfsi>:
    4a76:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__fp_splitA>
    4a7a:	88 f0       	brcs	.+34     	; 0x4a9e <__fixunssfsi+0x28>
    4a7c:	9f 57       	subi	r25, 0x7F	; 127
    4a7e:	98 f0       	brcs	.+38     	; 0x4aa6 <__fixunssfsi+0x30>
    4a80:	b9 2f       	mov	r27, r25
    4a82:	99 27       	eor	r25, r25
    4a84:	b7 51       	subi	r27, 0x17	; 23
    4a86:	b0 f0       	brcs	.+44     	; 0x4ab4 <__fixunssfsi+0x3e>
    4a88:	e1 f0       	breq	.+56     	; 0x4ac2 <__fixunssfsi+0x4c>
    4a8a:	66 0f       	add	r22, r22
    4a8c:	77 1f       	adc	r23, r23
    4a8e:	88 1f       	adc	r24, r24
    4a90:	99 1f       	adc	r25, r25
    4a92:	1a f0       	brmi	.+6      	; 0x4a9a <__fixunssfsi+0x24>
    4a94:	ba 95       	dec	r27
    4a96:	c9 f7       	brne	.-14     	; 0x4a8a <__fixunssfsi+0x14>
    4a98:	14 c0       	rjmp	.+40     	; 0x4ac2 <__fixunssfsi+0x4c>
    4a9a:	b1 30       	cpi	r27, 0x01	; 1
    4a9c:	91 f0       	breq	.+36     	; 0x4ac2 <__fixunssfsi+0x4c>
    4a9e:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__fp_zero>
    4aa2:	b1 e0       	ldi	r27, 0x01	; 1
    4aa4:	08 95       	ret
    4aa6:	0c 94 15 26 	jmp	0x4c2a	; 0x4c2a <__fp_zero>
    4aaa:	67 2f       	mov	r22, r23
    4aac:	78 2f       	mov	r23, r24
    4aae:	88 27       	eor	r24, r24
    4ab0:	b8 5f       	subi	r27, 0xF8	; 248
    4ab2:	39 f0       	breq	.+14     	; 0x4ac2 <__fixunssfsi+0x4c>
    4ab4:	b9 3f       	cpi	r27, 0xF9	; 249
    4ab6:	cc f3       	brlt	.-14     	; 0x4aaa <__fixunssfsi+0x34>
    4ab8:	86 95       	lsr	r24
    4aba:	77 95       	ror	r23
    4abc:	67 95       	ror	r22
    4abe:	b3 95       	inc	r27
    4ac0:	d9 f7       	brne	.-10     	; 0x4ab8 <__fixunssfsi+0x42>
    4ac2:	3e f4       	brtc	.+14     	; 0x4ad2 <__fixunssfsi+0x5c>
    4ac4:	90 95       	com	r25
    4ac6:	80 95       	com	r24
    4ac8:	70 95       	com	r23
    4aca:	61 95       	neg	r22
    4acc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ace:	8f 4f       	sbci	r24, 0xFF	; 255
    4ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad2:	08 95       	ret

00004ad4 <__floatunsisf>:
    4ad4:	e8 94       	clt
    4ad6:	09 c0       	rjmp	.+18     	; 0x4aea <__floatsisf+0x12>

00004ad8 <__floatsisf>:
    4ad8:	97 fb       	bst	r25, 7
    4ada:	3e f4       	brtc	.+14     	; 0x4aea <__floatsisf+0x12>
    4adc:	90 95       	com	r25
    4ade:	80 95       	com	r24
    4ae0:	70 95       	com	r23
    4ae2:	61 95       	neg	r22
    4ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aea:	99 23       	and	r25, r25
    4aec:	a9 f0       	breq	.+42     	; 0x4b18 <__floatsisf+0x40>
    4aee:	f9 2f       	mov	r31, r25
    4af0:	96 e9       	ldi	r25, 0x96	; 150
    4af2:	bb 27       	eor	r27, r27
    4af4:	93 95       	inc	r25
    4af6:	f6 95       	lsr	r31
    4af8:	87 95       	ror	r24
    4afa:	77 95       	ror	r23
    4afc:	67 95       	ror	r22
    4afe:	b7 95       	ror	r27
    4b00:	f1 11       	cpse	r31, r1
    4b02:	f8 cf       	rjmp	.-16     	; 0x4af4 <__floatsisf+0x1c>
    4b04:	fa f4       	brpl	.+62     	; 0x4b44 <__floatsisf+0x6c>
    4b06:	bb 0f       	add	r27, r27
    4b08:	11 f4       	brne	.+4      	; 0x4b0e <__floatsisf+0x36>
    4b0a:	60 ff       	sbrs	r22, 0
    4b0c:	1b c0       	rjmp	.+54     	; 0x4b44 <__floatsisf+0x6c>
    4b0e:	6f 5f       	subi	r22, 0xFF	; 255
    4b10:	7f 4f       	sbci	r23, 0xFF	; 255
    4b12:	8f 4f       	sbci	r24, 0xFF	; 255
    4b14:	9f 4f       	sbci	r25, 0xFF	; 255
    4b16:	16 c0       	rjmp	.+44     	; 0x4b44 <__floatsisf+0x6c>
    4b18:	88 23       	and	r24, r24
    4b1a:	11 f0       	breq	.+4      	; 0x4b20 <__floatsisf+0x48>
    4b1c:	96 e9       	ldi	r25, 0x96	; 150
    4b1e:	11 c0       	rjmp	.+34     	; 0x4b42 <__floatsisf+0x6a>
    4b20:	77 23       	and	r23, r23
    4b22:	21 f0       	breq	.+8      	; 0x4b2c <__floatsisf+0x54>
    4b24:	9e e8       	ldi	r25, 0x8E	; 142
    4b26:	87 2f       	mov	r24, r23
    4b28:	76 2f       	mov	r23, r22
    4b2a:	05 c0       	rjmp	.+10     	; 0x4b36 <__floatsisf+0x5e>
    4b2c:	66 23       	and	r22, r22
    4b2e:	71 f0       	breq	.+28     	; 0x4b4c <__floatsisf+0x74>
    4b30:	96 e8       	ldi	r25, 0x86	; 134
    4b32:	86 2f       	mov	r24, r22
    4b34:	70 e0       	ldi	r23, 0x00	; 0
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	2a f0       	brmi	.+10     	; 0x4b44 <__floatsisf+0x6c>
    4b3a:	9a 95       	dec	r25
    4b3c:	66 0f       	add	r22, r22
    4b3e:	77 1f       	adc	r23, r23
    4b40:	88 1f       	adc	r24, r24
    4b42:	da f7       	brpl	.-10     	; 0x4b3a <__floatsisf+0x62>
    4b44:	88 0f       	add	r24, r24
    4b46:	96 95       	lsr	r25
    4b48:	87 95       	ror	r24
    4b4a:	97 f9       	bld	r25, 7
    4b4c:	08 95       	ret

00004b4e <__fp_cmp>:
    4b4e:	99 0f       	add	r25, r25
    4b50:	00 08       	sbc	r0, r0
    4b52:	55 0f       	add	r21, r21
    4b54:	aa 0b       	sbc	r26, r26
    4b56:	e0 e8       	ldi	r30, 0x80	; 128
    4b58:	fe ef       	ldi	r31, 0xFE	; 254
    4b5a:	16 16       	cp	r1, r22
    4b5c:	17 06       	cpc	r1, r23
    4b5e:	e8 07       	cpc	r30, r24
    4b60:	f9 07       	cpc	r31, r25
    4b62:	c0 f0       	brcs	.+48     	; 0x4b94 <__fp_cmp+0x46>
    4b64:	12 16       	cp	r1, r18
    4b66:	13 06       	cpc	r1, r19
    4b68:	e4 07       	cpc	r30, r20
    4b6a:	f5 07       	cpc	r31, r21
    4b6c:	98 f0       	brcs	.+38     	; 0x4b94 <__fp_cmp+0x46>
    4b6e:	62 1b       	sub	r22, r18
    4b70:	73 0b       	sbc	r23, r19
    4b72:	84 0b       	sbc	r24, r20
    4b74:	95 0b       	sbc	r25, r21
    4b76:	39 f4       	brne	.+14     	; 0x4b86 <__fp_cmp+0x38>
    4b78:	0a 26       	eor	r0, r26
    4b7a:	61 f0       	breq	.+24     	; 0x4b94 <__fp_cmp+0x46>
    4b7c:	23 2b       	or	r18, r19
    4b7e:	24 2b       	or	r18, r20
    4b80:	25 2b       	or	r18, r21
    4b82:	21 f4       	brne	.+8      	; 0x4b8c <__fp_cmp+0x3e>
    4b84:	08 95       	ret
    4b86:	0a 26       	eor	r0, r26
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <__fp_cmp+0x3e>
    4b8a:	a1 40       	sbci	r26, 0x01	; 1
    4b8c:	a6 95       	lsr	r26
    4b8e:	8f ef       	ldi	r24, 0xFF	; 255
    4b90:	81 1d       	adc	r24, r1
    4b92:	81 1d       	adc	r24, r1
    4b94:	08 95       	ret

00004b96 <__fp_inf>:
    4b96:	97 f9       	bld	r25, 7
    4b98:	9f 67       	ori	r25, 0x7F	; 127
    4b9a:	80 e8       	ldi	r24, 0x80	; 128
    4b9c:	70 e0       	ldi	r23, 0x00	; 0
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	08 95       	ret

00004ba2 <__fp_nan>:
    4ba2:	9f ef       	ldi	r25, 0xFF	; 255
    4ba4:	80 ec       	ldi	r24, 0xC0	; 192
    4ba6:	08 95       	ret

00004ba8 <__fp_pscA>:
    4ba8:	00 24       	eor	r0, r0
    4baa:	0a 94       	dec	r0
    4bac:	16 16       	cp	r1, r22
    4bae:	17 06       	cpc	r1, r23
    4bb0:	18 06       	cpc	r1, r24
    4bb2:	09 06       	cpc	r0, r25
    4bb4:	08 95       	ret

00004bb6 <__fp_pscB>:
    4bb6:	00 24       	eor	r0, r0
    4bb8:	0a 94       	dec	r0
    4bba:	12 16       	cp	r1, r18
    4bbc:	13 06       	cpc	r1, r19
    4bbe:	14 06       	cpc	r1, r20
    4bc0:	05 06       	cpc	r0, r21
    4bc2:	08 95       	ret

00004bc4 <__fp_round>:
    4bc4:	09 2e       	mov	r0, r25
    4bc6:	03 94       	inc	r0
    4bc8:	00 0c       	add	r0, r0
    4bca:	11 f4       	brne	.+4      	; 0x4bd0 <__fp_round+0xc>
    4bcc:	88 23       	and	r24, r24
    4bce:	52 f0       	brmi	.+20     	; 0x4be4 <__fp_round+0x20>
    4bd0:	bb 0f       	add	r27, r27
    4bd2:	40 f4       	brcc	.+16     	; 0x4be4 <__fp_round+0x20>
    4bd4:	bf 2b       	or	r27, r31
    4bd6:	11 f4       	brne	.+4      	; 0x4bdc <__fp_round+0x18>
    4bd8:	60 ff       	sbrs	r22, 0
    4bda:	04 c0       	rjmp	.+8      	; 0x4be4 <__fp_round+0x20>
    4bdc:	6f 5f       	subi	r22, 0xFF	; 255
    4bde:	7f 4f       	sbci	r23, 0xFF	; 255
    4be0:	8f 4f       	sbci	r24, 0xFF	; 255
    4be2:	9f 4f       	sbci	r25, 0xFF	; 255
    4be4:	08 95       	ret

00004be6 <__fp_split3>:
    4be6:	57 fd       	sbrc	r21, 7
    4be8:	90 58       	subi	r25, 0x80	; 128
    4bea:	44 0f       	add	r20, r20
    4bec:	55 1f       	adc	r21, r21
    4bee:	59 f0       	breq	.+22     	; 0x4c06 <__fp_splitA+0x10>
    4bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    4bf2:	71 f0       	breq	.+28     	; 0x4c10 <__fp_splitA+0x1a>
    4bf4:	47 95       	ror	r20

00004bf6 <__fp_splitA>:
    4bf6:	88 0f       	add	r24, r24
    4bf8:	97 fb       	bst	r25, 7
    4bfa:	99 1f       	adc	r25, r25
    4bfc:	61 f0       	breq	.+24     	; 0x4c16 <__fp_splitA+0x20>
    4bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    4c00:	79 f0       	breq	.+30     	; 0x4c20 <__fp_splitA+0x2a>
    4c02:	87 95       	ror	r24
    4c04:	08 95       	ret
    4c06:	12 16       	cp	r1, r18
    4c08:	13 06       	cpc	r1, r19
    4c0a:	14 06       	cpc	r1, r20
    4c0c:	55 1f       	adc	r21, r21
    4c0e:	f2 cf       	rjmp	.-28     	; 0x4bf4 <__fp_split3+0xe>
    4c10:	46 95       	lsr	r20
    4c12:	f1 df       	rcall	.-30     	; 0x4bf6 <__fp_splitA>
    4c14:	08 c0       	rjmp	.+16     	; 0x4c26 <__fp_splitA+0x30>
    4c16:	16 16       	cp	r1, r22
    4c18:	17 06       	cpc	r1, r23
    4c1a:	18 06       	cpc	r1, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	f1 cf       	rjmp	.-30     	; 0x4c02 <__fp_splitA+0xc>
    4c20:	86 95       	lsr	r24
    4c22:	71 05       	cpc	r23, r1
    4c24:	61 05       	cpc	r22, r1
    4c26:	08 94       	sec
    4c28:	08 95       	ret

00004c2a <__fp_zero>:
    4c2a:	e8 94       	clt

00004c2c <__fp_szero>:
    4c2c:	bb 27       	eor	r27, r27
    4c2e:	66 27       	eor	r22, r22
    4c30:	77 27       	eor	r23, r23
    4c32:	cb 01       	movw	r24, r22
    4c34:	97 f9       	bld	r25, 7
    4c36:	08 95       	ret

00004c38 <__gesf2>:
    4c38:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__fp_cmp>
    4c3c:	08 f4       	brcc	.+2      	; 0x4c40 <__gesf2+0x8>
    4c3e:	8f ef       	ldi	r24, 0xFF	; 255
    4c40:	08 95       	ret

00004c42 <__mulsf3>:
    4c42:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__mulsf3x>
    4c46:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <__fp_round>
    4c4a:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <__fp_pscA>
    4c4e:	38 f0       	brcs	.+14     	; 0x4c5e <__mulsf3+0x1c>
    4c50:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__fp_pscB>
    4c54:	20 f0       	brcs	.+8      	; 0x4c5e <__mulsf3+0x1c>
    4c56:	95 23       	and	r25, r21
    4c58:	11 f0       	breq	.+4      	; 0x4c5e <__mulsf3+0x1c>
    4c5a:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__fp_inf>
    4c5e:	0c 94 d1 25 	jmp	0x4ba2	; 0x4ba2 <__fp_nan>
    4c62:	11 24       	eor	r1, r1
    4c64:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__fp_szero>

00004c68 <__mulsf3x>:
    4c68:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__fp_split3>
    4c6c:	70 f3       	brcs	.-36     	; 0x4c4a <__mulsf3+0x8>

00004c6e <__mulsf3_pse>:
    4c6e:	95 9f       	mul	r25, r21
    4c70:	c1 f3       	breq	.-16     	; 0x4c62 <__mulsf3+0x20>
    4c72:	95 0f       	add	r25, r21
    4c74:	50 e0       	ldi	r21, 0x00	; 0
    4c76:	55 1f       	adc	r21, r21
    4c78:	62 9f       	mul	r22, r18
    4c7a:	f0 01       	movw	r30, r0
    4c7c:	72 9f       	mul	r23, r18
    4c7e:	bb 27       	eor	r27, r27
    4c80:	f0 0d       	add	r31, r0
    4c82:	b1 1d       	adc	r27, r1
    4c84:	63 9f       	mul	r22, r19
    4c86:	aa 27       	eor	r26, r26
    4c88:	f0 0d       	add	r31, r0
    4c8a:	b1 1d       	adc	r27, r1
    4c8c:	aa 1f       	adc	r26, r26
    4c8e:	64 9f       	mul	r22, r20
    4c90:	66 27       	eor	r22, r22
    4c92:	b0 0d       	add	r27, r0
    4c94:	a1 1d       	adc	r26, r1
    4c96:	66 1f       	adc	r22, r22
    4c98:	82 9f       	mul	r24, r18
    4c9a:	22 27       	eor	r18, r18
    4c9c:	b0 0d       	add	r27, r0
    4c9e:	a1 1d       	adc	r26, r1
    4ca0:	62 1f       	adc	r22, r18
    4ca2:	73 9f       	mul	r23, r19
    4ca4:	b0 0d       	add	r27, r0
    4ca6:	a1 1d       	adc	r26, r1
    4ca8:	62 1f       	adc	r22, r18
    4caa:	83 9f       	mul	r24, r19
    4cac:	a0 0d       	add	r26, r0
    4cae:	61 1d       	adc	r22, r1
    4cb0:	22 1f       	adc	r18, r18
    4cb2:	74 9f       	mul	r23, r20
    4cb4:	33 27       	eor	r19, r19
    4cb6:	a0 0d       	add	r26, r0
    4cb8:	61 1d       	adc	r22, r1
    4cba:	23 1f       	adc	r18, r19
    4cbc:	84 9f       	mul	r24, r20
    4cbe:	60 0d       	add	r22, r0
    4cc0:	21 1d       	adc	r18, r1
    4cc2:	82 2f       	mov	r24, r18
    4cc4:	76 2f       	mov	r23, r22
    4cc6:	6a 2f       	mov	r22, r26
    4cc8:	11 24       	eor	r1, r1
    4cca:	9f 57       	subi	r25, 0x7F	; 127
    4ccc:	50 40       	sbci	r21, 0x00	; 0
    4cce:	9a f0       	brmi	.+38     	; 0x4cf6 <__mulsf3_pse+0x88>
    4cd0:	f1 f0       	breq	.+60     	; 0x4d0e <__mulsf3_pse+0xa0>
    4cd2:	88 23       	and	r24, r24
    4cd4:	4a f0       	brmi	.+18     	; 0x4ce8 <__mulsf3_pse+0x7a>
    4cd6:	ee 0f       	add	r30, r30
    4cd8:	ff 1f       	adc	r31, r31
    4cda:	bb 1f       	adc	r27, r27
    4cdc:	66 1f       	adc	r22, r22
    4cde:	77 1f       	adc	r23, r23
    4ce0:	88 1f       	adc	r24, r24
    4ce2:	91 50       	subi	r25, 0x01	; 1
    4ce4:	50 40       	sbci	r21, 0x00	; 0
    4ce6:	a9 f7       	brne	.-22     	; 0x4cd2 <__mulsf3_pse+0x64>
    4ce8:	9e 3f       	cpi	r25, 0xFE	; 254
    4cea:	51 05       	cpc	r21, r1
    4cec:	80 f0       	brcs	.+32     	; 0x4d0e <__mulsf3_pse+0xa0>
    4cee:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__fp_inf>
    4cf2:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__fp_szero>
    4cf6:	5f 3f       	cpi	r21, 0xFF	; 255
    4cf8:	e4 f3       	brlt	.-8      	; 0x4cf2 <__mulsf3_pse+0x84>
    4cfa:	98 3e       	cpi	r25, 0xE8	; 232
    4cfc:	d4 f3       	brlt	.-12     	; 0x4cf2 <__mulsf3_pse+0x84>
    4cfe:	86 95       	lsr	r24
    4d00:	77 95       	ror	r23
    4d02:	67 95       	ror	r22
    4d04:	b7 95       	ror	r27
    4d06:	f7 95       	ror	r31
    4d08:	e7 95       	ror	r30
    4d0a:	9f 5f       	subi	r25, 0xFF	; 255
    4d0c:	c1 f7       	brne	.-16     	; 0x4cfe <__mulsf3_pse+0x90>
    4d0e:	fe 2b       	or	r31, r30
    4d10:	88 0f       	add	r24, r24
    4d12:	91 1d       	adc	r25, r1
    4d14:	96 95       	lsr	r25
    4d16:	87 95       	ror	r24
    4d18:	97 f9       	bld	r25, 7
    4d1a:	08 95       	ret

00004d1c <round>:
    4d1c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__fp_splitA>
    4d20:	e8 f0       	brcs	.+58     	; 0x4d5c <round+0x40>
    4d22:	9e 37       	cpi	r25, 0x7E	; 126
    4d24:	e8 f0       	brcs	.+58     	; 0x4d60 <round+0x44>
    4d26:	96 39       	cpi	r25, 0x96	; 150
    4d28:	b8 f4       	brcc	.+46     	; 0x4d58 <round+0x3c>
    4d2a:	9e 38       	cpi	r25, 0x8E	; 142
    4d2c:	48 f4       	brcc	.+18     	; 0x4d40 <round+0x24>
    4d2e:	67 2f       	mov	r22, r23
    4d30:	78 2f       	mov	r23, r24
    4d32:	88 27       	eor	r24, r24
    4d34:	98 5f       	subi	r25, 0xF8	; 248
    4d36:	f9 cf       	rjmp	.-14     	; 0x4d2a <round+0xe>
    4d38:	86 95       	lsr	r24
    4d3a:	77 95       	ror	r23
    4d3c:	67 95       	ror	r22
    4d3e:	93 95       	inc	r25
    4d40:	95 39       	cpi	r25, 0x95	; 149
    4d42:	d0 f3       	brcs	.-12     	; 0x4d38 <round+0x1c>
    4d44:	b6 2f       	mov	r27, r22
    4d46:	b1 70       	andi	r27, 0x01	; 1
    4d48:	6b 0f       	add	r22, r27
    4d4a:	71 1d       	adc	r23, r1
    4d4c:	81 1d       	adc	r24, r1
    4d4e:	20 f4       	brcc	.+8      	; 0x4d58 <round+0x3c>
    4d50:	87 95       	ror	r24
    4d52:	77 95       	ror	r23
    4d54:	67 95       	ror	r22
    4d56:	93 95       	inc	r25
    4d58:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__fp_mintl>
    4d5c:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__fp_mpack>
    4d60:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__fp_szero>

00004d64 <__fp_mintl>:
    4d64:	88 23       	and	r24, r24
    4d66:	71 f4       	brne	.+28     	; 0x4d84 <__fp_mintl+0x20>
    4d68:	77 23       	and	r23, r23
    4d6a:	21 f0       	breq	.+8      	; 0x4d74 <__fp_mintl+0x10>
    4d6c:	98 50       	subi	r25, 0x08	; 8
    4d6e:	87 2b       	or	r24, r23
    4d70:	76 2f       	mov	r23, r22
    4d72:	07 c0       	rjmp	.+14     	; 0x4d82 <__fp_mintl+0x1e>
    4d74:	66 23       	and	r22, r22
    4d76:	11 f4       	brne	.+4      	; 0x4d7c <__fp_mintl+0x18>
    4d78:	99 27       	eor	r25, r25
    4d7a:	0d c0       	rjmp	.+26     	; 0x4d96 <__fp_mintl+0x32>
    4d7c:	90 51       	subi	r25, 0x10	; 16
    4d7e:	86 2b       	or	r24, r22
    4d80:	70 e0       	ldi	r23, 0x00	; 0
    4d82:	60 e0       	ldi	r22, 0x00	; 0
    4d84:	2a f0       	brmi	.+10     	; 0x4d90 <__fp_mintl+0x2c>
    4d86:	9a 95       	dec	r25
    4d88:	66 0f       	add	r22, r22
    4d8a:	77 1f       	adc	r23, r23
    4d8c:	88 1f       	adc	r24, r24
    4d8e:	da f7       	brpl	.-10     	; 0x4d86 <__fp_mintl+0x22>
    4d90:	88 0f       	add	r24, r24
    4d92:	96 95       	lsr	r25
    4d94:	87 95       	ror	r24
    4d96:	97 f9       	bld	r25, 7
    4d98:	08 95       	ret

00004d9a <__fp_mpack>:
    4d9a:	9f 3f       	cpi	r25, 0xFF	; 255
    4d9c:	31 f0       	breq	.+12     	; 0x4daa <__fp_mpack_finite+0xc>

00004d9e <__fp_mpack_finite>:
    4d9e:	91 50       	subi	r25, 0x01	; 1
    4da0:	20 f4       	brcc	.+8      	; 0x4daa <__fp_mpack_finite+0xc>
    4da2:	87 95       	ror	r24
    4da4:	77 95       	ror	r23
    4da6:	67 95       	ror	r22
    4da8:	b7 95       	ror	r27
    4daa:	88 0f       	add	r24, r24
    4dac:	91 1d       	adc	r25, r1
    4dae:	96 95       	lsr	r25
    4db0:	87 95       	ror	r24
    4db2:	97 f9       	bld	r25, 7
    4db4:	08 95       	ret

00004db6 <__divmodhi4>:
    4db6:	97 fb       	bst	r25, 7
    4db8:	07 2e       	mov	r0, r23
    4dba:	16 f4       	brtc	.+4      	; 0x4dc0 <__divmodhi4+0xa>
    4dbc:	00 94       	com	r0
    4dbe:	07 d0       	rcall	.+14     	; 0x4dce <__divmodhi4_neg1>
    4dc0:	77 fd       	sbrc	r23, 7
    4dc2:	09 d0       	rcall	.+18     	; 0x4dd6 <__divmodhi4_neg2>
    4dc4:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <__udivmodhi4>
    4dc8:	07 fc       	sbrc	r0, 7
    4dca:	05 d0       	rcall	.+10     	; 0x4dd6 <__divmodhi4_neg2>
    4dcc:	3e f4       	brtc	.+14     	; 0x4ddc <__divmodhi4_exit>

00004dce <__divmodhi4_neg1>:
    4dce:	90 95       	com	r25
    4dd0:	81 95       	neg	r24
    4dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dd4:	08 95       	ret

00004dd6 <__divmodhi4_neg2>:
    4dd6:	70 95       	com	r23
    4dd8:	61 95       	neg	r22
    4dda:	7f 4f       	sbci	r23, 0xFF	; 255

00004ddc <__divmodhi4_exit>:
    4ddc:	08 95       	ret

00004dde <__udivmodsi4>:
    4dde:	a1 e2       	ldi	r26, 0x21	; 33
    4de0:	1a 2e       	mov	r1, r26
    4de2:	aa 1b       	sub	r26, r26
    4de4:	bb 1b       	sub	r27, r27
    4de6:	fd 01       	movw	r30, r26
    4de8:	0d c0       	rjmp	.+26     	; 0x4e04 <__udivmodsi4_ep>

00004dea <__udivmodsi4_loop>:
    4dea:	aa 1f       	adc	r26, r26
    4dec:	bb 1f       	adc	r27, r27
    4dee:	ee 1f       	adc	r30, r30
    4df0:	ff 1f       	adc	r31, r31
    4df2:	a2 17       	cp	r26, r18
    4df4:	b3 07       	cpc	r27, r19
    4df6:	e4 07       	cpc	r30, r20
    4df8:	f5 07       	cpc	r31, r21
    4dfa:	20 f0       	brcs	.+8      	; 0x4e04 <__udivmodsi4_ep>
    4dfc:	a2 1b       	sub	r26, r18
    4dfe:	b3 0b       	sbc	r27, r19
    4e00:	e4 0b       	sbc	r30, r20
    4e02:	f5 0b       	sbc	r31, r21

00004e04 <__udivmodsi4_ep>:
    4e04:	66 1f       	adc	r22, r22
    4e06:	77 1f       	adc	r23, r23
    4e08:	88 1f       	adc	r24, r24
    4e0a:	99 1f       	adc	r25, r25
    4e0c:	1a 94       	dec	r1
    4e0e:	69 f7       	brne	.-38     	; 0x4dea <__udivmodsi4_loop>
    4e10:	60 95       	com	r22
    4e12:	70 95       	com	r23
    4e14:	80 95       	com	r24
    4e16:	90 95       	com	r25
    4e18:	9b 01       	movw	r18, r22
    4e1a:	ac 01       	movw	r20, r24
    4e1c:	bd 01       	movw	r22, r26
    4e1e:	cf 01       	movw	r24, r30
    4e20:	08 95       	ret

00004e22 <__tablejump2__>:
    4e22:	ee 0f       	add	r30, r30
    4e24:	ff 1f       	adc	r31, r31
    4e26:	05 90       	lpm	r0, Z+
    4e28:	f4 91       	lpm	r31, Z
    4e2a:	e0 2d       	mov	r30, r0
    4e2c:	09 94       	ijmp

00004e2e <__umulhisi3>:
    4e2e:	a2 9f       	mul	r26, r18
    4e30:	b0 01       	movw	r22, r0
    4e32:	b3 9f       	mul	r27, r19
    4e34:	c0 01       	movw	r24, r0
    4e36:	a3 9f       	mul	r26, r19
    4e38:	70 0d       	add	r23, r0
    4e3a:	81 1d       	adc	r24, r1
    4e3c:	11 24       	eor	r1, r1
    4e3e:	91 1d       	adc	r25, r1
    4e40:	b2 9f       	mul	r27, r18
    4e42:	70 0d       	add	r23, r0
    4e44:	81 1d       	adc	r24, r1
    4e46:	11 24       	eor	r1, r1
    4e48:	91 1d       	adc	r25, r1
    4e4a:	08 95       	ret

00004e4c <__udivmodhi4>:
    4e4c:	aa 1b       	sub	r26, r26
    4e4e:	bb 1b       	sub	r27, r27
    4e50:	51 e1       	ldi	r21, 0x11	; 17
    4e52:	07 c0       	rjmp	.+14     	; 0x4e62 <__udivmodhi4_ep>

00004e54 <__udivmodhi4_loop>:
    4e54:	aa 1f       	adc	r26, r26
    4e56:	bb 1f       	adc	r27, r27
    4e58:	a6 17       	cp	r26, r22
    4e5a:	b7 07       	cpc	r27, r23
    4e5c:	10 f0       	brcs	.+4      	; 0x4e62 <__udivmodhi4_ep>
    4e5e:	a6 1b       	sub	r26, r22
    4e60:	b7 0b       	sbc	r27, r23

00004e62 <__udivmodhi4_ep>:
    4e62:	88 1f       	adc	r24, r24
    4e64:	99 1f       	adc	r25, r25
    4e66:	5a 95       	dec	r21
    4e68:	a9 f7       	brne	.-22     	; 0x4e54 <__udivmodhi4_loop>
    4e6a:	80 95       	com	r24
    4e6c:	90 95       	com	r25
    4e6e:	bc 01       	movw	r22, r24
    4e70:	cd 01       	movw	r24, r26
    4e72:	08 95       	ret

00004e74 <malloc>:
    4e74:	0f 93       	push	r16
    4e76:	1f 93       	push	r17
    4e78:	cf 93       	push	r28
    4e7a:	df 93       	push	r29
    4e7c:	82 30       	cpi	r24, 0x02	; 2
    4e7e:	91 05       	cpc	r25, r1
    4e80:	10 f4       	brcc	.+4      	; 0x4e86 <malloc+0x12>
    4e82:	82 e0       	ldi	r24, 0x02	; 2
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	e0 91 bf 06 	lds	r30, 0x06BF	; 0x8006bf <__flp>
    4e8a:	f0 91 c0 06 	lds	r31, 0x06C0	; 0x8006c0 <__flp+0x1>
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	a0 e0       	ldi	r26, 0x00	; 0
    4e94:	b0 e0       	ldi	r27, 0x00	; 0
    4e96:	30 97       	sbiw	r30, 0x00	; 0
    4e98:	19 f1       	breq	.+70     	; 0x4ee0 <malloc+0x6c>
    4e9a:	40 81       	ld	r20, Z
    4e9c:	51 81       	ldd	r21, Z+1	; 0x01
    4e9e:	02 81       	ldd	r16, Z+2	; 0x02
    4ea0:	13 81       	ldd	r17, Z+3	; 0x03
    4ea2:	48 17       	cp	r20, r24
    4ea4:	59 07       	cpc	r21, r25
    4ea6:	c8 f0       	brcs	.+50     	; 0x4eda <malloc+0x66>
    4ea8:	84 17       	cp	r24, r20
    4eaa:	95 07       	cpc	r25, r21
    4eac:	69 f4       	brne	.+26     	; 0x4ec8 <malloc+0x54>
    4eae:	10 97       	sbiw	r26, 0x00	; 0
    4eb0:	31 f0       	breq	.+12     	; 0x4ebe <malloc+0x4a>
    4eb2:	12 96       	adiw	r26, 0x02	; 2
    4eb4:	0c 93       	st	X, r16
    4eb6:	12 97       	sbiw	r26, 0x02	; 2
    4eb8:	13 96       	adiw	r26, 0x03	; 3
    4eba:	1c 93       	st	X, r17
    4ebc:	27 c0       	rjmp	.+78     	; 0x4f0c <malloc+0x98>
    4ebe:	00 93 bf 06 	sts	0x06BF, r16	; 0x8006bf <__flp>
    4ec2:	10 93 c0 06 	sts	0x06C0, r17	; 0x8006c0 <__flp+0x1>
    4ec6:	22 c0       	rjmp	.+68     	; 0x4f0c <malloc+0x98>
    4ec8:	21 15       	cp	r18, r1
    4eca:	31 05       	cpc	r19, r1
    4ecc:	19 f0       	breq	.+6      	; 0x4ed4 <malloc+0x60>
    4ece:	42 17       	cp	r20, r18
    4ed0:	53 07       	cpc	r21, r19
    4ed2:	18 f4       	brcc	.+6      	; 0x4eda <malloc+0x66>
    4ed4:	9a 01       	movw	r18, r20
    4ed6:	bd 01       	movw	r22, r26
    4ed8:	ef 01       	movw	r28, r30
    4eda:	df 01       	movw	r26, r30
    4edc:	f8 01       	movw	r30, r16
    4ede:	db cf       	rjmp	.-74     	; 0x4e96 <malloc+0x22>
    4ee0:	21 15       	cp	r18, r1
    4ee2:	31 05       	cpc	r19, r1
    4ee4:	f9 f0       	breq	.+62     	; 0x4f24 <malloc+0xb0>
    4ee6:	28 1b       	sub	r18, r24
    4ee8:	39 0b       	sbc	r19, r25
    4eea:	24 30       	cpi	r18, 0x04	; 4
    4eec:	31 05       	cpc	r19, r1
    4eee:	80 f4       	brcc	.+32     	; 0x4f10 <malloc+0x9c>
    4ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ef4:	61 15       	cp	r22, r1
    4ef6:	71 05       	cpc	r23, r1
    4ef8:	21 f0       	breq	.+8      	; 0x4f02 <malloc+0x8e>
    4efa:	fb 01       	movw	r30, r22
    4efc:	93 83       	std	Z+3, r25	; 0x03
    4efe:	82 83       	std	Z+2, r24	; 0x02
    4f00:	04 c0       	rjmp	.+8      	; 0x4f0a <malloc+0x96>
    4f02:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <__flp+0x1>
    4f06:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <__flp>
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	32 96       	adiw	r30, 0x02	; 2
    4f0e:	44 c0       	rjmp	.+136    	; 0x4f98 <malloc+0x124>
    4f10:	fe 01       	movw	r30, r28
    4f12:	e2 0f       	add	r30, r18
    4f14:	f3 1f       	adc	r31, r19
    4f16:	81 93       	st	Z+, r24
    4f18:	91 93       	st	Z+, r25
    4f1a:	22 50       	subi	r18, 0x02	; 2
    4f1c:	31 09       	sbc	r19, r1
    4f1e:	39 83       	std	Y+1, r19	; 0x01
    4f20:	28 83       	st	Y, r18
    4f22:	3a c0       	rjmp	.+116    	; 0x4f98 <malloc+0x124>
    4f24:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <__brkval>
    4f28:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <__brkval+0x1>
    4f2c:	23 2b       	or	r18, r19
    4f2e:	41 f4       	brne	.+16     	; 0x4f40 <malloc+0xcc>
    4f30:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    4f34:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    4f38:	30 93 be 06 	sts	0x06BE, r19	; 0x8006be <__brkval+0x1>
    4f3c:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <__brkval>
    4f40:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    4f44:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    4f48:	21 15       	cp	r18, r1
    4f4a:	31 05       	cpc	r19, r1
    4f4c:	41 f4       	brne	.+16     	; 0x4f5e <malloc+0xea>
    4f4e:	2d b7       	in	r18, 0x3d	; 61
    4f50:	3e b7       	in	r19, 0x3e	; 62
    4f52:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    4f56:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    4f5a:	24 1b       	sub	r18, r20
    4f5c:	35 0b       	sbc	r19, r21
    4f5e:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <__brkval>
    4f62:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <__brkval+0x1>
    4f66:	e2 17       	cp	r30, r18
    4f68:	f3 07       	cpc	r31, r19
    4f6a:	a0 f4       	brcc	.+40     	; 0x4f94 <malloc+0x120>
    4f6c:	2e 1b       	sub	r18, r30
    4f6e:	3f 0b       	sbc	r19, r31
    4f70:	28 17       	cp	r18, r24
    4f72:	39 07       	cpc	r19, r25
    4f74:	78 f0       	brcs	.+30     	; 0x4f94 <malloc+0x120>
    4f76:	ac 01       	movw	r20, r24
    4f78:	4e 5f       	subi	r20, 0xFE	; 254
    4f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f7c:	24 17       	cp	r18, r20
    4f7e:	35 07       	cpc	r19, r21
    4f80:	48 f0       	brcs	.+18     	; 0x4f94 <malloc+0x120>
    4f82:	4e 0f       	add	r20, r30
    4f84:	5f 1f       	adc	r21, r31
    4f86:	50 93 be 06 	sts	0x06BE, r21	; 0x8006be <__brkval+0x1>
    4f8a:	40 93 bd 06 	sts	0x06BD, r20	; 0x8006bd <__brkval>
    4f8e:	81 93       	st	Z+, r24
    4f90:	91 93       	st	Z+, r25
    4f92:	02 c0       	rjmp	.+4      	; 0x4f98 <malloc+0x124>
    4f94:	e0 e0       	ldi	r30, 0x00	; 0
    4f96:	f0 e0       	ldi	r31, 0x00	; 0
    4f98:	cf 01       	movw	r24, r30
    4f9a:	df 91       	pop	r29
    4f9c:	cf 91       	pop	r28
    4f9e:	1f 91       	pop	r17
    4fa0:	0f 91       	pop	r16
    4fa2:	08 95       	ret

00004fa4 <free>:
    4fa4:	cf 93       	push	r28
    4fa6:	df 93       	push	r29
    4fa8:	00 97       	sbiw	r24, 0x00	; 0
    4faa:	09 f4       	brne	.+2      	; 0x4fae <free+0xa>
    4fac:	81 c0       	rjmp	.+258    	; 0x50b0 <free+0x10c>
    4fae:	fc 01       	movw	r30, r24
    4fb0:	32 97       	sbiw	r30, 0x02	; 2
    4fb2:	13 82       	std	Z+3, r1	; 0x03
    4fb4:	12 82       	std	Z+2, r1	; 0x02
    4fb6:	a0 91 bf 06 	lds	r26, 0x06BF	; 0x8006bf <__flp>
    4fba:	b0 91 c0 06 	lds	r27, 0x06C0	; 0x8006c0 <__flp+0x1>
    4fbe:	10 97       	sbiw	r26, 0x00	; 0
    4fc0:	81 f4       	brne	.+32     	; 0x4fe2 <free+0x3e>
    4fc2:	20 81       	ld	r18, Z
    4fc4:	31 81       	ldd	r19, Z+1	; 0x01
    4fc6:	82 0f       	add	r24, r18
    4fc8:	93 1f       	adc	r25, r19
    4fca:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <__brkval>
    4fce:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <__brkval+0x1>
    4fd2:	28 17       	cp	r18, r24
    4fd4:	39 07       	cpc	r19, r25
    4fd6:	51 f5       	brne	.+84     	; 0x502c <free+0x88>
    4fd8:	f0 93 be 06 	sts	0x06BE, r31	; 0x8006be <__brkval+0x1>
    4fdc:	e0 93 bd 06 	sts	0x06BD, r30	; 0x8006bd <__brkval>
    4fe0:	67 c0       	rjmp	.+206    	; 0x50b0 <free+0x10c>
    4fe2:	ed 01       	movw	r28, r26
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	ce 17       	cp	r28, r30
    4fea:	df 07       	cpc	r29, r31
    4fec:	40 f4       	brcc	.+16     	; 0x4ffe <free+0x5a>
    4fee:	4a 81       	ldd	r20, Y+2	; 0x02
    4ff0:	5b 81       	ldd	r21, Y+3	; 0x03
    4ff2:	9e 01       	movw	r18, r28
    4ff4:	41 15       	cp	r20, r1
    4ff6:	51 05       	cpc	r21, r1
    4ff8:	f1 f0       	breq	.+60     	; 0x5036 <free+0x92>
    4ffa:	ea 01       	movw	r28, r20
    4ffc:	f5 cf       	rjmp	.-22     	; 0x4fe8 <free+0x44>
    4ffe:	d3 83       	std	Z+3, r29	; 0x03
    5000:	c2 83       	std	Z+2, r28	; 0x02
    5002:	40 81       	ld	r20, Z
    5004:	51 81       	ldd	r21, Z+1	; 0x01
    5006:	84 0f       	add	r24, r20
    5008:	95 1f       	adc	r25, r21
    500a:	c8 17       	cp	r28, r24
    500c:	d9 07       	cpc	r29, r25
    500e:	59 f4       	brne	.+22     	; 0x5026 <free+0x82>
    5010:	88 81       	ld	r24, Y
    5012:	99 81       	ldd	r25, Y+1	; 0x01
    5014:	84 0f       	add	r24, r20
    5016:	95 1f       	adc	r25, r21
    5018:	02 96       	adiw	r24, 0x02	; 2
    501a:	91 83       	std	Z+1, r25	; 0x01
    501c:	80 83       	st	Z, r24
    501e:	8a 81       	ldd	r24, Y+2	; 0x02
    5020:	9b 81       	ldd	r25, Y+3	; 0x03
    5022:	93 83       	std	Z+3, r25	; 0x03
    5024:	82 83       	std	Z+2, r24	; 0x02
    5026:	21 15       	cp	r18, r1
    5028:	31 05       	cpc	r19, r1
    502a:	29 f4       	brne	.+10     	; 0x5036 <free+0x92>
    502c:	f0 93 c0 06 	sts	0x06C0, r31	; 0x8006c0 <__flp+0x1>
    5030:	e0 93 bf 06 	sts	0x06BF, r30	; 0x8006bf <__flp>
    5034:	3d c0       	rjmp	.+122    	; 0x50b0 <free+0x10c>
    5036:	e9 01       	movw	r28, r18
    5038:	fb 83       	std	Y+3, r31	; 0x03
    503a:	ea 83       	std	Y+2, r30	; 0x02
    503c:	49 91       	ld	r20, Y+
    503e:	59 91       	ld	r21, Y+
    5040:	c4 0f       	add	r28, r20
    5042:	d5 1f       	adc	r29, r21
    5044:	ec 17       	cp	r30, r28
    5046:	fd 07       	cpc	r31, r29
    5048:	61 f4       	brne	.+24     	; 0x5062 <free+0xbe>
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	84 0f       	add	r24, r20
    5050:	95 1f       	adc	r25, r21
    5052:	02 96       	adiw	r24, 0x02	; 2
    5054:	e9 01       	movw	r28, r18
    5056:	99 83       	std	Y+1, r25	; 0x01
    5058:	88 83       	st	Y, r24
    505a:	82 81       	ldd	r24, Z+2	; 0x02
    505c:	93 81       	ldd	r25, Z+3	; 0x03
    505e:	9b 83       	std	Y+3, r25	; 0x03
    5060:	8a 83       	std	Y+2, r24	; 0x02
    5062:	e0 e0       	ldi	r30, 0x00	; 0
    5064:	f0 e0       	ldi	r31, 0x00	; 0
    5066:	12 96       	adiw	r26, 0x02	; 2
    5068:	8d 91       	ld	r24, X+
    506a:	9c 91       	ld	r25, X
    506c:	13 97       	sbiw	r26, 0x03	; 3
    506e:	00 97       	sbiw	r24, 0x00	; 0
    5070:	19 f0       	breq	.+6      	; 0x5078 <free+0xd4>
    5072:	fd 01       	movw	r30, r26
    5074:	dc 01       	movw	r26, r24
    5076:	f7 cf       	rjmp	.-18     	; 0x5066 <free+0xc2>
    5078:	8d 91       	ld	r24, X+
    507a:	9c 91       	ld	r25, X
    507c:	11 97       	sbiw	r26, 0x01	; 1
    507e:	9d 01       	movw	r18, r26
    5080:	2e 5f       	subi	r18, 0xFE	; 254
    5082:	3f 4f       	sbci	r19, 0xFF	; 255
    5084:	82 0f       	add	r24, r18
    5086:	93 1f       	adc	r25, r19
    5088:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <__brkval>
    508c:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <__brkval+0x1>
    5090:	28 17       	cp	r18, r24
    5092:	39 07       	cpc	r19, r25
    5094:	69 f4       	brne	.+26     	; 0x50b0 <free+0x10c>
    5096:	30 97       	sbiw	r30, 0x00	; 0
    5098:	29 f4       	brne	.+10     	; 0x50a4 <free+0x100>
    509a:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <__flp+0x1>
    509e:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <__flp>
    50a2:	02 c0       	rjmp	.+4      	; 0x50a8 <free+0x104>
    50a4:	13 82       	std	Z+3, r1	; 0x03
    50a6:	12 82       	std	Z+2, r1	; 0x02
    50a8:	b0 93 be 06 	sts	0x06BE, r27	; 0x8006be <__brkval+0x1>
    50ac:	a0 93 bd 06 	sts	0x06BD, r26	; 0x8006bd <__brkval>
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	08 95       	ret

000050b6 <eeprom_read_byte>:
    50b6:	e1 99       	sbic	0x1c, 1	; 28
    50b8:	fe cf       	rjmp	.-4      	; 0x50b6 <eeprom_read_byte>
    50ba:	9f bb       	out	0x1f, r25	; 31
    50bc:	8e bb       	out	0x1e, r24	; 30
    50be:	e0 9a       	sbi	0x1c, 0	; 28
    50c0:	99 27       	eor	r25, r25
    50c2:	8d b3       	in	r24, 0x1d	; 29
    50c4:	08 95       	ret

000050c6 <eeprom_read_dword>:
    50c6:	a6 e1       	ldi	r26, 0x16	; 22
    50c8:	b0 e0       	ldi	r27, 0x00	; 0
    50ca:	44 e0       	ldi	r20, 0x04	; 4
    50cc:	50 e0       	ldi	r21, 0x00	; 0
    50ce:	0c 94 a1 28 	jmp	0x5142	; 0x5142 <eeprom_read_blraw>

000050d2 <eeprom_read_word>:
    50d2:	a8 e1       	ldi	r26, 0x18	; 24
    50d4:	b0 e0       	ldi	r27, 0x00	; 0
    50d6:	42 e0       	ldi	r20, 0x02	; 2
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	0c 94 a1 28 	jmp	0x5142	; 0x5142 <eeprom_read_blraw>

000050de <eeprom_update_byte>:
    50de:	26 2f       	mov	r18, r22

000050e0 <eeprom_update_r18>:
    50e0:	e1 99       	sbic	0x1c, 1	; 28
    50e2:	fe cf       	rjmp	.-4      	; 0x50e0 <eeprom_update_r18>
    50e4:	9f bb       	out	0x1f, r25	; 31
    50e6:	8e bb       	out	0x1e, r24	; 30
    50e8:	e0 9a       	sbi	0x1c, 0	; 28
    50ea:	01 97       	sbiw	r24, 0x01	; 1
    50ec:	0d b2       	in	r0, 0x1d	; 29
    50ee:	02 16       	cp	r0, r18
    50f0:	31 f0       	breq	.+12     	; 0x50fe <eeprom_update_r18+0x1e>
    50f2:	2d bb       	out	0x1d, r18	; 29
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	f8 94       	cli
    50f8:	e2 9a       	sbi	0x1c, 2	; 28
    50fa:	e1 9a       	sbi	0x1c, 1	; 28
    50fc:	0f be       	out	0x3f, r0	; 63
    50fe:	08 95       	ret

00005100 <eeprom_update_dword>:
    5100:	03 96       	adiw	r24, 0x03	; 3
    5102:	27 2f       	mov	r18, r23
    5104:	0e 94 70 28 	call	0x50e0	; 0x50e0 <eeprom_update_r18>
    5108:	0e 94 6f 28 	call	0x50de	; 0x50de <eeprom_update_byte>
    510c:	25 2f       	mov	r18, r21
    510e:	0e 94 70 28 	call	0x50e0	; 0x50e0 <eeprom_update_r18>
    5112:	24 2f       	mov	r18, r20
    5114:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <eeprom_update_r18>

00005118 <eeprom_update_word>:
    5118:	01 96       	adiw	r24, 0x01	; 1
    511a:	27 2f       	mov	r18, r23
    511c:	0e 94 70 28 	call	0x50e0	; 0x50e0 <eeprom_update_r18>
    5120:	0c 94 6f 28 	jmp	0x50de	; 0x50de <eeprom_update_byte>

00005124 <eeprom_write_dword>:
    5124:	24 2f       	mov	r18, r20
    5126:	0e 94 b0 28 	call	0x5160	; 0x5160 <eeprom_write_r18>
    512a:	25 2f       	mov	r18, r21
    512c:	0e 94 b0 28 	call	0x5160	; 0x5160 <eeprom_write_r18>
    5130:	0c 94 9a 28 	jmp	0x5134	; 0x5134 <eeprom_write_word>

00005134 <eeprom_write_word>:
    5134:	0e 94 af 28 	call	0x515e	; 0x515e <eeprom_write_byte>
    5138:	27 2f       	mov	r18, r23
    513a:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <eeprom_write_r18>

0000513e <eeprom_read_block>:
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22

00005142 <eeprom_read_blraw>:
    5142:	fc 01       	movw	r30, r24
    5144:	e1 99       	sbic	0x1c, 1	; 28
    5146:	fe cf       	rjmp	.-4      	; 0x5144 <eeprom_read_blraw+0x2>
    5148:	06 c0       	rjmp	.+12     	; 0x5156 <eeprom_read_blraw+0x14>
    514a:	ff bb       	out	0x1f, r31	; 31
    514c:	ee bb       	out	0x1e, r30	; 30
    514e:	e0 9a       	sbi	0x1c, 0	; 28
    5150:	31 96       	adiw	r30, 0x01	; 1
    5152:	0d b2       	in	r0, 0x1d	; 29
    5154:	0d 92       	st	X+, r0
    5156:	41 50       	subi	r20, 0x01	; 1
    5158:	50 40       	sbci	r21, 0x00	; 0
    515a:	b8 f7       	brcc	.-18     	; 0x514a <eeprom_read_blraw+0x8>
    515c:	08 95       	ret

0000515e <eeprom_write_byte>:
    515e:	26 2f       	mov	r18, r22

00005160 <eeprom_write_r18>:
    5160:	e1 99       	sbic	0x1c, 1	; 28
    5162:	fe cf       	rjmp	.-4      	; 0x5160 <eeprom_write_r18>
    5164:	9f bb       	out	0x1f, r25	; 31
    5166:	8e bb       	out	0x1e, r24	; 30
    5168:	2d bb       	out	0x1d, r18	; 29
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	f8 94       	cli
    516e:	e2 9a       	sbi	0x1c, 2	; 28
    5170:	e1 9a       	sbi	0x1c, 1	; 28
    5172:	0f be       	out	0x3f, r0	; 63
    5174:	01 96       	adiw	r24, 0x01	; 1
    5176:	08 95       	ret

00005178 <_exit>:
    5178:	f8 94       	cli

0000517a <__stop_program>:
    517a:	ff cf       	rjmp	.-2      	; 0x517a <__stop_program>
