
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  000043da  0000446e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000440  00800120  00800120  0000452e  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  0000452e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000045d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055c1  00000000  00000000  00004968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da3  00000000  00000000  00009f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002055  00000000  00000000  0000accc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b94  00000000  00000000  0000cd24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f32  00000000  00000000  0000d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005829  00000000  00000000  0000e7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00014013  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__ctors_end>
       4:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
       8:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__vector_2>
       c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      10:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_4>
      14:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      18:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      1c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      20:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      24:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_9>
      28:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_10>
      2c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      30:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      34:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      38:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      3c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      40:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      44:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      48:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      4c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>
      50:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__bad_interrupt>

00000054 <Arial12x17>:
      54:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      64:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      74:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      84:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      94:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      a4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      b4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      c4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      d4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
      e4:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
      f4:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     104:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     114:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     124:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     134:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     144:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     154:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     164:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     174:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     184:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     194:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1a4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1b4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1c4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1d4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     1e4:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     1f4:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     204:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     214:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     224:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     234:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     244:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     254:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     264:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     27c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     28c:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2a4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2b4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2c4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2d4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     2e4:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     2f4:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     304:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     314:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     324:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     334:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     344:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     354:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     364:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     374:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     384:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     394:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3a4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3b4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3c4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3d4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     3e4:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     3f4:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     404:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     414:	1f 00                                               ..

00000416 <Arial_Narrow18x32>:
     416:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     426:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     436:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     446:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     456:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     466:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     476:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     486:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     496:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4a6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4b6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4c6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4d6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     4e6:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     4f6:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     506:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     516:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     526:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     536:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     546:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     556:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     566:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     576:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     586:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     596:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5a6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5b6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5c6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5d6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     5e6:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     5f6:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     606:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     616:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     626:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     636:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     646:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     656:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     666:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     676:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     686:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     696:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6a6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6b6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6c6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6d6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     6e6:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     6f6:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     706:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     716:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     726:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     736:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     746:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     756:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     766:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     776:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     786:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     796:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7a6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7b6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7c6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7d6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     7e6:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     7f6:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     806:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     822:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     85a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     86a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     87a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     88a:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     89a:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8aa:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8ba:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ca:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8da:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     8ea:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     8fa:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     90a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     91a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     936:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     946:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     956:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     966:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     976:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     986:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     996:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9a6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9b6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9c6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9d6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     9e6:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     9f6:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a06:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a16:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a26:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a36:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a46:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a56:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a66:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a76:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     a86:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     a96:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     aa6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ab6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ac6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     ad6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     ae6:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     af6:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b06:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b16:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b26:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b36:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b46:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b56:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b66:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b76:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000b80 <Font5x8>:
     b80:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     b90:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     ba0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bb0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     bc0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bd0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     be0:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     bf0:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c00:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c10:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c20:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c30:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c40:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c50:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c60:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c70:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     c80:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     c90:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     ca0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cb0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     cc0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cd0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     ce0:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     cf0:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d00:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d10:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d20:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d30:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d40:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d50:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d60:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d70:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     d80:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     d90:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     da0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     db0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000dc0 <arrowLeft>:
	...
     dd4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e28:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e38:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e48:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e58:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     e88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f38:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f98:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fa8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fb8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fc8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
     ffc:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001044 <arrowRight>:
	...
    1080:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10a0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10b0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    10e0:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    10fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    110c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    120c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    121c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    122c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    125c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12a8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012c8 <skull>:
    12c8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    12e0:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    12f0:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1300:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1310:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1320:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1330:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1350:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1360:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1370:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    1380:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    1390:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13a0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13b0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13c0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13d0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    13e0:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    13f0:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1400:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1410:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1420:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1430:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1440:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1450:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1460:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1470:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    1480:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    1490:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14a0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14b8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14c8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14d8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    14e8:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    14f8:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1510:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001522 <__ctors_end>:
    1522:	11 24       	eor	r1, r1
    1524:	1f be       	out	0x3f, r1	; 63
    1526:	cf e5       	ldi	r28, 0x5F	; 95
    1528:	d8 e0       	ldi	r29, 0x08	; 8
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	cd bf       	out	0x3d, r28	; 61

0000152e <__do_copy_data>:
    152e:	11 e0       	ldi	r17, 0x01	; 1
    1530:	a0 e6       	ldi	r26, 0x60	; 96
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ea ed       	ldi	r30, 0xDA	; 218
    1536:	f3 e4       	ldi	r31, 0x43	; 67
    1538:	02 c0       	rjmp	.+4      	; 0x153e <__do_copy_data+0x10>
    153a:	05 90       	lpm	r0, Z+
    153c:	0d 92       	st	X+, r0
    153e:	a0 32       	cpi	r26, 0x20	; 32
    1540:	b1 07       	cpc	r27, r17
    1542:	d9 f7       	brne	.-10     	; 0x153a <__do_copy_data+0xc>

00001544 <__do_clear_bss>:
    1544:	25 e0       	ldi	r18, 0x05	; 5
    1546:	a0 e2       	ldi	r26, 0x20	; 32
    1548:	b1 e0       	ldi	r27, 0x01	; 1
    154a:	01 c0       	rjmp	.+2      	; 0x154e <.do_clear_bss_start>

0000154c <.do_clear_bss_loop>:
    154c:	1d 92       	st	X+, r1

0000154e <.do_clear_bss_start>:
    154e:	a0 36       	cpi	r26, 0x60	; 96
    1550:	b2 07       	cpc	r27, r18
    1552:	e1 f7       	brne	.-8      	; 0x154c <.do_clear_bss_loop>
    1554:	0e 94 a7 14 	call	0x294e	; 0x294e <main>
    1558:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <_exit>

0000155c <__bad_interrupt>:
    155c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001560 <step>:
	OCR0 = stepInterval;
	TIMSK|=_BV(OCIE0);

while (arrowMoving);
steps = 0;
newSteps = 0;
    1560:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <dir>
    1564:	99 23       	and	r25, r25
    1566:	81 f0       	breq	.+32     	; 0x1588 <step+0x28>
    1568:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <phase>
    156c:	9f 5f       	subi	r25, 0xFF	; 255
    156e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <phase>
    1572:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <steps>
    1576:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <steps+0x1>
    157a:	2f 5f       	subi	r18, 0xFF	; 255
    157c:	3f 4f       	sbci	r19, 0xFF	; 255
    157e:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <steps+0x1>
    1582:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <steps>
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <step+0x46>
    1588:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <phase>
    158c:	91 50       	subi	r25, 0x01	; 1
    158e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <phase>
    1592:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <steps>
    1596:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <steps+0x1>
    159a:	21 50       	subi	r18, 0x01	; 1
    159c:	31 09       	sbc	r19, r1
    159e:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <steps+0x1>
    15a2:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <steps>
    15a6:	81 11       	cpse	r24, r1
    15a8:	0e c0       	rjmp	.+28     	; 0x15c6 <step+0x66>
    15aa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <phase>
    15ae:	88 23       	and	r24, r24
    15b0:	1c f4       	brge	.+6      	; 0x15b8 <step+0x58>
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <phase>
    15b8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <phase>
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	34 f1       	brlt	.+76     	; 0x160c <step+0xac>
    15c0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <phase>
    15c4:	23 c0       	rjmp	.+70     	; 0x160c <step+0xac>
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	e1 f4       	brne	.+56     	; 0x1602 <step+0xa2>
    15ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <phase>
    15ce:	88 23       	and	r24, r24
    15d0:	1c f4       	brge	.+6      	; 0x15d8 <step+0x78>
    15d2:	87 e0       	ldi	r24, 0x07	; 7
    15d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <phase>
    15d8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <phase>
    15dc:	88 30       	cpi	r24, 0x08	; 8
    15de:	2c f0       	brlt	.+10     	; 0x15ea <step+0x8a>
    15e0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <phase>
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <step+0x8a>
    15e6:	8b bb       	out	0x1b, r24	; 27
    15e8:	08 95       	ret
    15ea:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <phase>
    15ee:	8b b3       	in	r24, 0x1b	; 27
    15f0:	80 7f       	andi	r24, 0xF0	; 240
    15f2:	0e 2e       	mov	r0, r30
    15f4:	00 0c       	add	r0, r0
    15f6:	ff 0b       	sbc	r31, r31
    15f8:	ec 5e       	subi	r30, 0xEC	; 236
    15fa:	fe 4f       	sbci	r31, 0xFE	; 254
    15fc:	90 81       	ld	r25, Z
    15fe:	89 2b       	or	r24, r25
    1600:	f2 cf       	rjmp	.-28     	; 0x15e6 <step+0x86>
    1602:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <phase>
    1606:	8b b3       	in	r24, 0x1b	; 27
    1608:	80 7f       	andi	r24, 0xF0	; 240
    160a:	ed cf       	rjmp	.-38     	; 0x15e6 <step+0x86>
    160c:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <phase>
    1610:	8b b3       	in	r24, 0x1b	; 27
    1612:	80 7f       	andi	r24, 0xF0	; 240
    1614:	0e 2e       	mov	r0, r30
    1616:	00 0c       	add	r0, r0
    1618:	ff 0b       	sbc	r31, r31
    161a:	e4 5e       	subi	r30, 0xE4	; 228
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	90 81       	ld	r25, Z
    1620:	89 2b       	or	r24, r25
    1622:	e1 cf       	rjmp	.-62     	; 0x15e6 <step+0x86>

00001624 <__vector_10>:
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    164a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <step>
    164e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <steps>
    1652:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <steps+0x1>
    1656:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <newSteps>
    165a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <newSteps+0x1>
    165e:	28 17       	cp	r18, r24
    1660:	39 07       	cpc	r19, r25
    1662:	39 f4       	brne	.+14     	; 0x1672 <__vector_10+0x4e>
    1664:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <arrowMoving>
    1668:	13 be       	out	0x33, r1	; 51
    166a:	1c be       	out	0x3c, r1	; 60
    166c:	89 b7       	in	r24, 0x39	; 57
    166e:	8d 7f       	andi	r24, 0xFD	; 253
    1670:	89 bf       	out	0x39, r24	; 57
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_4>:
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <speedTimer>
    16a6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <speedTimer+0x1>
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <speedTimer+0x1>
    16b0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <speedTimer>
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_9>:
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <signalOn>
    16d4:	88 23       	and	r24, r24
    16d6:	49 f0       	breq	.+18     	; 0x16ea <__vector_9+0x28>
    16d8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <signalCounter>
    16dc:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <signalCounter+0x1>
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <signalCounter+0x1>
    16e6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <signalCounter>
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <__vector_2>:
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	2f 93       	push	r18
    1704:	3f 93       	push	r19
    1706:	4f 93       	push	r20
    1708:	5f 93       	push	r21
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	af 93       	push	r26
    1710:	bf 93       	push	r27
    1712:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <firstMeasure>
    1716:	88 23       	and	r24, r24
    1718:	69 f1       	breq	.+90     	; 0x1774 <__vector_2+0x7c>
    171a:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <speedTimer>
    171e:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <speedTimer+0x1>
    1722:	24 b5       	in	r18, 0x24	; 36
    1724:	34 e1       	ldi	r19, 0x14	; 20
    1726:	34 9f       	mul	r19, r20
    1728:	c0 01       	movw	r24, r0
    172a:	35 9f       	mul	r19, r21
    172c:	90 0d       	add	r25, r0
    172e:	11 24       	eor	r1, r1
    1730:	82 0f       	add	r24, r18
    1732:	91 1d       	adc	r25, r1
    1734:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <speedTimerRecent+0x1>
    1738:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <speedTimerRecent>
    173c:	14 bc       	out	0x24, r1	; 36
    173e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <speedTimer+0x1>
    1742:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <speedTimer>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <speedRefresh>
    174c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <totalRotations>
    1750:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <totalRotations+0x1>
    1754:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <totalRotations+0x2>
    1758:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <totalRotations+0x3>
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	a1 1d       	adc	r26, r1
    1760:	b1 1d       	adc	r27, r1
    1762:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <totalRotations>
    1766:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <totalRotations+0x1>
    176a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <totalRotations+0x2>
    176e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <totalRotations+0x3>
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <__vector_2+0x8a>
    1774:	89 b7       	in	r24, 0x39	; 57
    1776:	80 68       	ori	r24, 0x80	; 128
    1778:	89 bf       	out	0x39, r24	; 57
    177a:	14 bc       	out	0x24, r1	; 36
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <firstMeasure>
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <main_screen>:
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <signalOn>
    17b6:	81 11       	cpse	r24, r1
    17b8:	f3 c0       	rjmp	.+486    	; 0x19a0 <main_screen+0x204>
    17ba:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
    17be:	0f ef       	ldi	r16, 0xFF	; 255
    17c0:	27 e1       	ldi	r18, 0x17	; 23
    17c2:	44 e2       	ldi	r20, 0x24	; 36
    17c4:	6b e0       	ldi	r22, 0x0B	; 11
    17c6:	8a e0       	ldi	r24, 0x0A	; 10
    17c8:	0e 94 8b 18 	call	0x3116	; 0x3116 <GLCD_DrawRectangle>
    17cc:	24 e1       	ldi	r18, 0x14	; 20
    17ce:	46 e2       	ldi	r20, 0x26	; 38
    17d0:	6e e0       	ldi	r22, 0x0E	; 14
    17d2:	85 e2       	ldi	r24, 0x25	; 37
    17d4:	0e 94 8b 18 	call	0x3116	; 0x3116 <GLCD_DrawRectangle>
    17d8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <voltage>
    17dc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <voltage+0x1>
    17e0:	89 36       	cpi	r24, 0x69	; 105
    17e2:	91 05       	cpc	r25, r1
    17e4:	34 f0       	brlt	.+12     	; 0x17f2 <main_screen+0x56>
    17e6:	25 e1       	ldi	r18, 0x15	; 21
    17e8:	40 e1       	ldi	r20, 0x10	; 16
    17ea:	6d e0       	ldi	r22, 0x0D	; 13
    17ec:	8c e0       	ldi	r24, 0x0C	; 12
    17ee:	0e 94 09 19 	call	0x3212	; 0x3212 <GLCD_FillRectangle>
    17f2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <voltage>
    17f6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <voltage+0x1>
    17fa:	8e 36       	cpi	r24, 0x6E	; 110
    17fc:	91 05       	cpc	r25, r1
    17fe:	3c f0       	brlt	.+14     	; 0x180e <main_screen+0x72>
    1800:	0f ef       	ldi	r16, 0xFF	; 255
    1802:	25 e1       	ldi	r18, 0x15	; 21
    1804:	46 e1       	ldi	r20, 0x16	; 22
    1806:	6d e0       	ldi	r22, 0x0D	; 13
    1808:	82 e1       	ldi	r24, 0x12	; 18
    180a:	0e 94 09 19 	call	0x3212	; 0x3212 <GLCD_FillRectangle>
    180e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <voltage>
    1812:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <voltage+0x1>
    1816:	83 37       	cpi	r24, 0x73	; 115
    1818:	91 05       	cpc	r25, r1
    181a:	3c f0       	brlt	.+14     	; 0x182a <main_screen+0x8e>
    181c:	0f ef       	ldi	r16, 0xFF	; 255
    181e:	25 e1       	ldi	r18, 0x15	; 21
    1820:	4c e1       	ldi	r20, 0x1C	; 28
    1822:	6d e0       	ldi	r22, 0x0D	; 13
    1824:	88 e1       	ldi	r24, 0x18	; 24
    1826:	0e 94 09 19 	call	0x3212	; 0x3212 <GLCD_FillRectangle>
    182a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <voltage>
    182e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <voltage+0x1>
    1832:	88 37       	cpi	r24, 0x78	; 120
    1834:	91 05       	cpc	r25, r1
    1836:	3c f0       	brlt	.+14     	; 0x1846 <main_screen+0xaa>
    1838:	0f ef       	ldi	r16, 0xFF	; 255
    183a:	25 e1       	ldi	r18, 0x15	; 21
    183c:	42 e2       	ldi	r20, 0x22	; 34
    183e:	6d e0       	ldi	r22, 0x0D	; 13
    1840:	8e e1       	ldi	r24, 0x1E	; 30
    1842:	0e 94 09 19 	call	0x3212	; 0x3212 <GLCD_FillRectangle>
    1846:	6f e0       	ldi	r22, 0x0F	; 15
    1848:	8b e2       	ldi	r24, 0x2B	; 43
    184a:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	48 e0       	ldi	r20, 0x08	; 8
    1852:	65 e0       	ldi	r22, 0x05	; 5
    1854:	80 e8       	ldi	r24, 0x80	; 128
    1856:	9b e0       	ldi	r25, 0x0B	; 11
    1858:	0e 94 e5 19 	call	0x33ca	; 0x33ca <GLCD_SetFont>
    185c:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <voltage>
    1860:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <voltage+0x1>
    1864:	07 2e       	mov	r0, r23
    1866:	00 0c       	add	r0, r0
    1868:	88 0b       	sbc	r24, r24
    186a:	99 0b       	sbc	r25, r25
    186c:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__floatsisf>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    187c:	2a e0       	ldi	r18, 0x0A	; 10
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
    1888:	87 ec       	ldi	r24, 0xC7	; 199
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	62 e1       	ldi	r22, 0x12	; 18
    1896:	86 e1       	ldi	r24, 0x16	; 22
    1898:	94 e0       	ldi	r25, 0x04	; 4
    189a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <GLCD_SetFont>
    189e:	6f e1       	ldi	r22, 0x1F	; 31
    18a0:	84 e0       	ldi	r24, 0x04	; 4
    18a2:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
    18a6:	80 90 2f 01 	lds	r8, 0x012F	; 0x80012f <distance>
    18aa:	90 90 30 01 	lds	r9, 0x0130	; 0x800130 <distance+0x1>
    18ae:	a0 90 31 01 	lds	r10, 0x0131	; 0x800131 <distance+0x2>
    18b2:	b0 90 32 01 	lds	r11, 0x0132	; 0x800132 <distance+0x3>
    18b6:	84 e6       	ldi	r24, 0x64	; 100
    18b8:	88 16       	cp	r8, r24
    18ba:	91 04       	cpc	r9, r1
    18bc:	a1 04       	cpc	r10, r1
    18be:	b1 04       	cpc	r11, r1
    18c0:	70 f0       	brcs	.+28     	; 0x18de <main_screen+0x142>
    18c2:	c5 01       	movw	r24, r10
    18c4:	b4 01       	movw	r22, r8
    18c6:	2a e0       	ldi	r18, 0x0A	; 10
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	0e 94 47 20 	call	0x408e	; 0x408e <__udivmodsi4>
    18d2:	21 15       	cp	r18, r1
    18d4:	31 05       	cpc	r19, r1
    18d6:	41 05       	cpc	r20, r1
    18d8:	51 05       	cpc	r21, r1
    18da:	29 f4       	brne	.+10     	; 0x18e6 <main_screen+0x14a>
    18dc:	5b c0       	rjmp	.+182    	; 0x1994 <main_screen+0x1f8>
    18de:	24 e6       	ldi	r18, 0x64	; 100
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	c0 e0       	ldi	r28, 0x00	; 0
    18e8:	0f 2e       	mov	r0, r31
    18ea:	fa e0       	ldi	r31, 0x0A	; 10
    18ec:	cf 2e       	mov	r12, r31
    18ee:	d1 2c       	mov	r13, r1
    18f0:	e1 2c       	mov	r14, r1
    18f2:	f1 2c       	mov	r15, r1
    18f4:	f0 2d       	mov	r31, r0
    18f6:	ca 01       	movw	r24, r20
    18f8:	b9 01       	movw	r22, r18
    18fa:	a7 01       	movw	r20, r14
    18fc:	96 01       	movw	r18, r12
    18fe:	0e 94 47 20 	call	0x408e	; 0x408e <__udivmodsi4>
    1902:	cf 5f       	subi	r28, 0xFF	; 255
    1904:	21 15       	cp	r18, r1
    1906:	31 05       	cpc	r19, r1
    1908:	41 05       	cpc	r20, r1
    190a:	51 05       	cpc	r21, r1
    190c:	a1 f7       	brne	.-24     	; 0x18f6 <main_screen+0x15a>
    190e:	84 e6       	ldi	r24, 0x64	; 100
    1910:	88 16       	cp	r8, r24
    1912:	91 04       	cpc	r9, r1
    1914:	a1 04       	cpc	r10, r1
    1916:	b1 04       	cpc	r11, r1
    1918:	f0 f5       	brcc	.+124    	; 0x1996 <main_screen+0x1fa>
    191a:	d4 e0       	ldi	r29, 0x04	; 4
    191c:	c0 e0       	ldi	r28, 0x00	; 0
    191e:	8e e7       	ldi	r24, 0x7E	; 126
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
    1926:	cf 5f       	subi	r28, 0xFF	; 255
    1928:	cd 17       	cp	r28, r29
    192a:	cc f3       	brlt	.-14     	; 0x191e <main_screen+0x182>
    192c:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <distance>
    1930:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <distance+0x1>
    1934:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <distance+0x2>
    1938:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <distance+0x3>
    193c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	48 ec       	ldi	r20, 0xC8	; 200
    1946:	52 e4       	ldi	r21, 0x42	; 66
    1948:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    194c:	2a e0       	ldi	r18, 0x0A	; 10
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	48 e0       	ldi	r20, 0x08	; 8
    195c:	65 e0       	ldi	r22, 0x05	; 5
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	9b e0       	ldi	r25, 0x0B	; 11
    1962:	0e 94 e5 19 	call	0x33ca	; 0x33ca <GLCD_SetFont>
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	80 e4       	ldi	r24, 0x40	; 64
    196a:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
    196e:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <speedKmh>
    1972:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <speedKmh+0x1>
    1976:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <speedKmh+0x2>
    197a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <speedKmh+0x3>
    197e:	2a e0       	ldi	r18, 0x0A	; 10
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
    198a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
    198e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
    1992:	06 c0       	rjmp	.+12     	; 0x19a0 <main_screen+0x204>
    1994:	c0 e0       	ldi	r28, 0x00	; 0
    1996:	d6 e0       	ldi	r29, 0x06	; 6
    1998:	dc 1b       	sub	r29, r28
    199a:	1d 16       	cp	r1, r29
    199c:	3c f6       	brge	.-114    	; 0x192c <main_screen+0x190>
    199e:	be cf       	rjmp	.-132    	; 0x191c <main_screen+0x180>
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	df 90       	pop	r13
    19ac:	cf 90       	pop	r12
    19ae:	bf 90       	pop	r11
    19b0:	af 90       	pop	r10
    19b2:	9f 90       	pop	r9
    19b4:	8f 90       	pop	r8
    19b6:	08 95       	ret

000019b8 <speed_arrow_update>:
    19b8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    19bc:	81 11       	cpse	r24, r1
    19be:	19 c0       	rjmp	.+50     	; 0x19f2 <speed_arrow_update+0x3a>
    19c0:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <kmhPerStep>
    19c4:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <kmhPerStep+0x1>
    19c8:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <kmhPerStep+0x2>
    19cc:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <kmhPerStep+0x3>
    19d0:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <speedKmh>
    19d4:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <speedKmh+0x1>
    19d8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <speedKmh+0x2>
    19dc:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <speedKmh+0x3>
    19e0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    19e4:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fixunssfsi>
    19e8:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <newSteps+0x1>
    19ec:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <newSteps>
    19f0:	1a c0       	rjmp	.+52     	; 0x1a26 <speed_arrow_update+0x6e>
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	c1 f4       	brne	.+48     	; 0x1a26 <speed_arrow_update+0x6e>
    19f6:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <kmhPerStep>
    19fa:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <kmhPerStep+0x1>
    19fe:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <kmhPerStep+0x2>
    1a02:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <kmhPerStep+0x3>
    1a06:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <speedKmh>
    1a0a:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <speedKmh+0x1>
    1a0e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <speedKmh+0x2>
    1a12:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <speedKmh+0x3>
    1a16:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    1a1a:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fixunssfsi>
    1a1e:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <newSteps+0x1>
    1a22:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <newSteps>
    1a26:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <steps>
    1a2a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <steps+0x1>
    1a2e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <newSteps>
    1a32:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <newSteps+0x1>
    1a36:	82 1b       	sub	r24, r18
    1a38:	93 0b       	sbc	r25, r19
    1a3a:	18 16       	cp	r1, r24
    1a3c:	19 06       	cpc	r1, r25
    1a3e:	1c f4       	brge	.+6      	; 0x1a46 <speed_arrow_update+0x8e>
    1a40:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <dir>
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <speed_arrow_update+0x98>
    1a46:	21 e0       	ldi	r18, 0x01	; 1
    1a48:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <dir>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <speed_arrow_update+0xb4>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <arrowMoving>
    1a56:	83 b7       	in	r24, 0x33	; 51
    1a58:	8d 60       	ori	r24, 0x0D	; 13
    1a5a:	83 bf       	out	0x33, r24	; 51
    1a5c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1a60:	8c bf       	out	0x3c, r24	; 60
    1a62:	89 b7       	in	r24, 0x39	; 57
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	89 bf       	out	0x39, r24	; 57
    1a68:	0e 94 ce 0b 	call	0x179c	; 0x179c <main_screen>
    1a6c:	08 95       	ret

00001a6e <button_monitor>:
    1a6e:	b5 9b       	sbis	0x16, 5	; 22
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <button_monitor+0xc>
    1a72:	b6 9b       	sbis	0x16, 6	; 22
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <button_monitor+0xc>
    1a76:	b7 99       	sbic	0x16, 7	; 22
    1a78:	32 c0       	rjmp	.+100    	; 0x1ade <button_monitor+0x70>
    1a7a:	b5 99       	sbic	0x16, 5	; 22
    1a7c:	34 c0       	rjmp	.+104    	; 0x1ae6 <button_monitor+0x78>
    1a7e:	2f ef       	ldi	r18, 0xFF	; 255
    1a80:	80 e7       	ldi	r24, 0x70	; 112
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	21 50       	subi	r18, 0x01	; 1
    1a86:	80 40       	sbci	r24, 0x00	; 0
    1a88:	90 40       	sbci	r25, 0x00	; 0
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <button_monitor+0x16>
    1a8c:	00 c0       	rjmp	.+0      	; 0x1a8e <button_monitor+0x20>
    1a8e:	00 00       	nop
    1a90:	96 b3       	in	r25, 0x16	; 22
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	29 2f       	mov	r18, r25
    1a96:	20 72       	andi	r18, 0x20	; 32
    1a98:	95 fd       	sbrc	r25, 5
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	b6 99       	sbic	0x16, 6	; 22
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <button_monitor+0x4e>
    1aa0:	22 23       	and	r18, r18
    1aa2:	29 f1       	breq	.+74     	; 0x1aee <button_monitor+0x80>
    1aa4:	2f ef       	ldi	r18, 0xFF	; 255
    1aa6:	80 e7       	ldi	r24, 0x70	; 112
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	21 50       	subi	r18, 0x01	; 1
    1aac:	80 40       	sbci	r24, 0x00	; 0
    1aae:	90 40       	sbci	r25, 0x00	; 0
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <button_monitor+0x3c>
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <button_monitor+0x46>
    1ab4:	00 00       	nop
    1ab6:	b6 9b       	sbis	0x16, 6	; 22
    1ab8:	19 c0       	rjmp	.+50     	; 0x1aec <button_monitor+0x7e>
    1aba:	1b c0       	rjmp	.+54     	; 0x1af2 <button_monitor+0x84>
    1abc:	b7 99       	sbic	0x16, 7	; 22
    1abe:	20 c0       	rjmp	.+64     	; 0x1b00 <button_monitor+0x92>
    1ac0:	22 23       	and	r18, r18
    1ac2:	f1 f0       	breq	.+60     	; 0x1b00 <button_monitor+0x92>
    1ac4:	2f ef       	ldi	r18, 0xFF	; 255
    1ac6:	80 e7       	ldi	r24, 0x70	; 112
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
    1aca:	21 50       	subi	r18, 0x01	; 1
    1acc:	80 40       	sbci	r24, 0x00	; 0
    1ace:	90 40       	sbci	r25, 0x00	; 0
    1ad0:	e1 f7       	brne	.-8      	; 0x1aca <button_monitor+0x5c>
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <button_monitor+0x66>
    1ad4:	00 00       	nop
    1ad6:	b7 99       	sbic	0x16, 7	; 22
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <button_monitor+0x74>
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	08 95       	ret
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	08 95       	ret
    1ae6:	b6 99       	sbic	0x16, 6	; 22
    1ae8:	08 c0       	rjmp	.+16     	; 0x1afa <button_monitor+0x8c>
    1aea:	dc cf       	rjmp	.-72     	; 0x1aa4 <button_monitor+0x36>
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	96 b3       	in	r25, 0x16	; 22
    1af0:	08 95       	ret
    1af2:	b7 9b       	sbis	0x16, 7	; 22
    1af4:	e7 cf       	rjmp	.-50     	; 0x1ac4 <button_monitor+0x56>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	08 95       	ret
    1afa:	b7 9b       	sbis	0x16, 7	; 22
    1afc:	e3 cf       	rjmp	.-58     	; 0x1ac4 <button_monitor+0x56>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	08 95       	ret

00001b02 <draw_arrow>:
//arrowCalibrated = 1;
}
	
void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1b02:	88 23       	and	r24, r24
    1b04:	81 f0       	breq	.+32     	; 0x1b26 <draw_arrow+0x24>
		GLCD_Clear();
    1b06:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1b0a:	67 e0       	ldi	r22, 0x07	; 7
    1b0c:	86 e1       	ldi	r24, 0x16	; 22
    1b0e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1b12:	2f ef       	ldi	r18, 0xFF	; 255
    1b14:	47 e3       	ldi	r20, 0x37	; 55
    1b16:	6c e5       	ldi	r22, 0x5C	; 92
    1b18:	84 e4       	ldi	r24, 0x44	; 68
    1b1a:	90 e1       	ldi	r25, 0x10	; 16
    1b1c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <GLCD_DrawBitmap>
		GLCD_Render();
    1b20:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
    1b24:	08 95       	ret
		}else{
		GLCD_Clear();
    1b26:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1b2a:	67 e0       	ldi	r22, 0x07	; 7
    1b2c:	86 e1       	ldi	r24, 0x16	; 22
    1b2e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1b32:	2f ef       	ldi	r18, 0xFF	; 255
    1b34:	47 e3       	ldi	r20, 0x37	; 55
    1b36:	6c e5       	ldi	r22, 0x5C	; 92
    1b38:	80 ec       	ldi	r24, 0xC0	; 192
    1b3a:	9d e0       	ldi	r25, 0x0D	; 13
    1b3c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <GLCD_DrawBitmap>
		GLCD_Render();	
    1b40:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
    1b44:	08 95       	ret

00001b46 <draw_skull>:
		}
}

void draw_skull (void)
{
GLCD_Clear();
    1b46:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
GLCD_GotoXY(21+6, 7);
    1b4a:	67 e0       	ldi	r22, 0x07	; 7
    1b4c:	8b e1       	ldi	r24, 0x1B	; 27
    1b4e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	44 e3       	ldi	r20, 0x34	; 52
    1b56:	66 e5       	ldi	r22, 0x56	; 86
    1b58:	88 ec       	ldi	r24, 0xC8	; 200
    1b5a:	92 e1       	ldi	r25, 0x12	; 18
    1b5c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <GLCD_DrawBitmap>
GLCD_Render();
    1b60:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
    1b64:	08 95       	ret

00001b66 <signal_monitor>:
		if (speedKmh>scaleMax)speedKmh = scaleMax;
		speedRefresh = 0;									
		}
void signal_monitor(){
		
		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1b66:	b4 99       	sbic	0x16, 4	; 22
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <signal_monitor+0x1c>
    1b6a:	b3 9b       	sbis	0x16, 3	; 22
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <signal_monitor+0x1c>
			draw_arrow(0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <draw_arrow>
			signalOn = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <signalOn>
			signalCounter = 0;
    1b7a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <signalCounter+0x1>
    1b7e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <signalCounter>
		}
		
		if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1b82:	b3 99       	sbic	0x16, 3	; 22
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <signal_monitor+0x3e>
    1b86:	b4 9b       	sbis	0x16, 4	; 22
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <signal_monitor+0x3e>
			draw_arrow(1);
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <draw_arrow>
			signalOn = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <signalOn>
			signalCounter = 0;
    1b96:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <signalCounter+0x1>
    1b9a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <signalCounter>
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1b9e:	b4 9b       	sbis	0x16, 4	; 22
    1ba0:	31 c0       	rjmp	.+98     	; 0x1c04 <signal_monitor+0x9e>
    1ba2:	33 c0       	rjmp	.+102    	; 0x1c0a <signal_monitor+0xa4>
    1ba4:	b4 99       	sbic	0x16, 4	; 22
    1ba6:	0c c0       	rjmp	.+24     	; 0x1bc0 <signal_monitor+0x5a>
    1ba8:	b3 99       	sbic	0x16, 3	; 22
    1baa:	0a c0       	rjmp	.+20     	; 0x1bc0 <signal_monitor+0x5a>
			draw_skull();
    1bac:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <draw_skull>
			signalOn = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <signalOn>
			signalCounter = 0;
    1bb6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <signalCounter+0x1>
    1bba:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <signalCounter>
    1bbe:	25 c0       	rjmp	.+74     	; 0x1c0a <signal_monitor+0xa4>
		}
		
		
		if (signalOn){
    1bc0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <signalOn>
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f1       	breq	.+70     	; 0x1c0e <signal_monitor+0xa8>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1bc8:	b3 9b       	sbis	0x16, 3	; 22
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <signal_monitor+0x78>
    1bcc:	b4 9b       	sbis	0x16, 4	; 22
    1bce:	07 c0       	rjmp	.+14     	; 0x1bde <signal_monitor+0x78>
				GLCD_Clear();
    1bd0:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
				GLCD_Render();
    1bd4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
				TIMSK|=_BV(TOIE1);	// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1bd8:	89 b7       	in	r24, 0x39	; 57
    1bda:	84 60       	ori	r24, 0x04	; 4
    1bdc:	89 bf       	out	0x39, r24	; 57
									//This is to see if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			}
			
			if (signalCounter > 300)	//if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1bde:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <signalCounter>
    1be2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <signalCounter+0x1>
    1be6:	8d 32       	cpi	r24, 0x2D	; 45
    1be8:	91 40       	sbci	r25, 0x01	; 1
    1bea:	88 f0       	brcs	.+34     	; 0x1c0e <signal_monitor+0xa8>
			{
				signalOn = 0;
    1bec:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <signalOn>
				signalCounter = 0;
    1bf0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <signalCounter+0x1>
    1bf4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <signalCounter>
				TIMSK&=~_BV(TOIE1);
    1bf8:	89 b7       	in	r24, 0x39	; 57
    1bfa:	8b 7f       	andi	r24, 0xFB	; 251
    1bfc:	89 bf       	out	0x39, r24	; 57
				main_screen();
    1bfe:	0e 94 ce 0b 	call	0x179c	; 0x179c <main_screen>
			}
		}
		
}
    1c02:	08 95       	ret
			draw_arrow(1);
			signalOn = 1;
			signalCounter = 0;
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1c04:	b3 99       	sbic	0x16, 3	; 22
    1c06:	e0 cf       	rjmp	.-64     	; 0x1bc8 <signal_monitor+0x62>
    1c08:	d1 cf       	rjmp	.-94     	; 0x1bac <signal_monitor+0x46>
			signalCounter = 0;
		}
		
		
		if (signalOn){
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1c0a:	b3 99       	sbic	0x16, 3	; 22
    1c0c:	df cf       	rjmp	.-66     	; 0x1bcc <signal_monitor+0x66>
    1c0e:	08 95       	ret

00001c10 <read_ADC>:
}
	
	
int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
    1c10:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	16 16       	cp	r1, r22
    1c16:	17 06       	cpc	r1, r23
    1c18:	8c f4       	brge	.+34     	; 0x1c3c <read_ADC+0x2c>
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1c22:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1c24:	36 99       	sbic	0x06, 6	; 6
    1c26:	fe cf       	rjmp	.-4      	; 0x1c24 <read_ADC+0x14>
		tmp += ADCW;
    1c28:	44 b1       	in	r20, 0x04	; 4
    1c2a:	55 b1       	in	r21, 0x05	; 5
    1c2c:	84 0f       	add	r24, r20
    1c2e:	95 1f       	adc	r25, r21
	
int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	26 17       	cp	r18, r22
    1c36:	37 07       	cpc	r19, r23
    1c38:	a1 f7       	brne	.-24     	; 0x1c22 <read_ADC+0x12>
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <read_ADC+0x30>
	
	
int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1c40:	0e 94 33 20 	call	0x4066	; 0x4066 <__divmodhi4>
    1c44:	cb 01       	movw	r24, r22
}	
    1c46:	08 95       	ret

00001c48 <data_monitor>:
				main_screen();
			}
		}
		
}
void data_monitor(){
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17

	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    1c4c:	6a e0       	ldi	r22, 0x0A	; 10
    1c4e:	84 e0       	ldi	r24, 0x04	; 4
    1c50:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <read_ADC>
    1c54:	bc 01       	movw	r22, r24
    1c56:	99 0f       	add	r25, r25
    1c58:	88 0b       	sbc	r24, r24
    1c5a:	99 0b       	sbc	r25, r25
    1c5c:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__floatsisf>
    1c60:	2a e9       	ldi	r18, 0x9A	; 154
    1c62:	39 e9       	ldi	r19, 0x99	; 153
    1c64:	4c ec       	ldi	r20, 0xCC	; 204
    1c66:	52 e4       	ldi	r21, 0x42	; 66
    1c68:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	50 e4       	ldi	r21, 0x40	; 64
    1c74:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 ec       	ldi	r20, 0xC0	; 192
    1c7e:	50 e4       	ldi	r21, 0x40	; 64
    1c80:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    1c84:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixsfsi>
    1c88:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <newVoltage+0x1>
    1c8c:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <newVoltage>
			newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
		}
		main();
	}*/
	
	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    1c90:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <voltage>
    1c94:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <voltage+0x1>
    1c98:	26 17       	cp	r18, r22
    1c9a:	37 07       	cpc	r19, r23
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <data_monitor+0x62>
	{
		voltage = newVoltage;
    1c9e:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <voltage+0x1>
    1ca2:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <voltage>
		main_screen();
    1ca6:	0e 94 ce 0b 	call	0x179c	; 0x179c <main_screen>
	}
	
	newDistance=(round(totalRotations)*circLength)/10.0;
    1caa:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <totalRotations>
    1cae:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <totalRotations+0x1>
    1cb2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <totalRotations+0x2>
    1cb6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <totalRotations+0x3>
    1cba:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    1cbe:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <round>
    1cc2:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <circLength>
    1cc6:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <circLength+0x1>
    1cca:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <circLength+0x2>
    1cce:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <circLength+0x3>
    1cd2:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    1ce2:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fixunssfsi>
    1ce6:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <newDistance>
    1cea:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <newDistance+0x1>
    1cee:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <newDistance+0x2>
    1cf2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <newDistance+0x3>
	if (newDistance!=distance)	//when the distance value changes by 100 meters - update the data on the screen
    1cf6:	00 91 2f 01 	lds	r16, 0x012F	; 0x80012f <distance>
    1cfa:	10 91 30 01 	lds	r17, 0x0130	; 0x800130 <distance+0x1>
    1cfe:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <distance+0x2>
    1d02:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <distance+0x3>
    1d06:	60 17       	cp	r22, r16
    1d08:	71 07       	cpc	r23, r17
    1d0a:	82 07       	cpc	r24, r18
    1d0c:	93 07       	cpc	r25, r19
    1d0e:	51 f0       	breq	.+20     	; 0x1d24 <data_monitor+0xdc>
	{
		distance = newDistance;
    1d10:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <distance>
    1d14:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <distance+0x1>
    1d18:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <distance+0x2>
    1d1c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <distance+0x3>
		main_screen();
    1d20:	0e 94 ce 0b 	call	0x179c	; 0x179c <main_screen>
	}
}
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <eep_operations>:
	}
	return tmp/cycles;
}	
	
	
	void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1d2a:	8f 92       	push	r8
    1d2c:	9f 92       	push	r9
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	e6 2e       	mov	r14, r22
		
		if (eepAction==EEP_WRITE){
    1d40:	41 30       	cpi	r20, 0x01	; 1
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <eep_operations+0x1c>
    1d44:	6a c0       	rjmp	.+212    	; 0x1e1a <eep_operations+0xf0>
			eeprom_write_byte((uint8_t*)eepStartAddress,0);
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
			eeprom_write_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1d4c:	f1 2c       	mov	r15, r1
    1d4e:	ce 0d       	add	r28, r14
    1d50:	df 1d       	adc	r29, r15
    1d52:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <pwmArrow>
    1d56:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <pwmArrow+0x1>
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	0e 94 d6 21 	call	0x43ac	; 0x43ac <eeprom_write_word>
			eeprom_write_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1d60:	ce 0d       	add	r28, r14
    1d62:	df 1d       	adc	r29, r15
    1d64:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <pwmDial>
    1d68:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <pwmDial+0x1>
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	0e 94 d6 21 	call	0x43ac	; 0x43ac <eeprom_write_word>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1d72:	ce 0d       	add	r28, r14
    1d74:	df 1d       	adc	r29, r15
    1d76:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <scaleMax>
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
			//eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),shutDownVoltageX10);
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1d80:	ce 0d       	add	r28, r14
    1d82:	df 1d       	adc	r29, r15
    1d84:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <stepInterval>
    1d88:	ce 01       	movw	r24, r28
    1d8a:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
			eeprom_write_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1d8e:	ce 0d       	add	r28, r14
    1d90:	df 1d       	adc	r29, r15
    1d92:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    1d96:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 94 d6 21 	call	0x43ac	; 0x43ac <eeprom_write_word>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1da0:	ce 0d       	add	r28, r14
    1da2:	df 1d       	adc	r29, r15
    1da4:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <lcdContrast>
    1da8:	ce 01       	movw	r24, r28
    1daa:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1dae:	ce 0d       	add	r28, r14
    1db0:	df 1d       	adc	r29, r15
    1db2:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1dbc:	ce 0d       	add	r28, r14
    1dbe:	df 1d       	adc	r29, r15
    1dc0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <stepMode>
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
			eeprom_write_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1dca:	ce 0d       	add	r28, r14
    1dcc:	df 1d       	adc	r29, r15
    1dce:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <wheelDiameter>
    1dd2:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <wheelDiameter+0x1>
    1dd6:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <wheelDiameter+0x2>
    1dda:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <wheelDiameter+0x3>
    1dde:	ce 01       	movw	r24, r28
    1de0:	0e 94 ce 21 	call	0x439c	; 0x439c <eeprom_write_dword>
			eeprom_write_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1de4:	ce 0d       	add	r28, r14
    1de6:	df 1d       	adc	r29, r15
    1de8:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <gearRatio>
    1dec:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <gearRatio+0x1>
    1df0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <gearRatio+0x2>
    1df4:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <gearRatio+0x3>
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0e 94 ce 21 	call	0x439c	; 0x439c <eeprom_write_dword>
			eeprom_write_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1dfe:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <degreesPerKmh>
    1e02:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    1e06:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    1e0a:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    1e0e:	c7 01       	movw	r24, r14
    1e10:	8c 0f       	add	r24, r28
    1e12:	9d 1f       	adc	r25, r29
    1e14:	0e 94 ce 21 	call	0x439c	; 0x439c <eeprom_write_dword>
    1e18:	af c0       	rjmp	.+350    	; 0x1f78 <eep_operations+0x24e>
			//eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),odometerCurrentAddress);
			}
			if(eepAction==EEP_READ){
    1e1a:	41 11       	cpse	r20, r1
    1e1c:	a9 c0       	rjmp	.+338    	; 0x1f70 <eep_operations+0x246>
			pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1e1e:	e6 2e       	mov	r14, r22
    1e20:	f1 2c       	mov	r15, r1
    1e22:	ce 0d       	add	r28, r14
    1e24:	df 1d       	adc	r29, r15
    1e26:	ce 01       	movw	r24, r28
    1e28:	0e 94 bb 21 	call	0x4376	; 0x4376 <eeprom_read_word>
    1e2c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pwmArrow+0x1>
    1e30:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pwmArrow>
			pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1e34:	ce 0d       	add	r28, r14
    1e36:	df 1d       	adc	r29, r15
    1e38:	ce 01       	movw	r24, r28
    1e3a:	0e 94 bb 21 	call	0x4376	; 0x4376 <eeprom_read_word>
    1e3e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <pwmDial+0x1>
    1e42:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pwmDial>
			scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e46:	ce 0d       	add	r28, r14
    1e48:	df 1d       	adc	r29, r15
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	0e 94 ad 21 	call	0x435a	; 0x435a <eeprom_read_byte>
    1e50:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <scaleMax>
			//shutDownVoltageX10 = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
			stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e54:	ce 0d       	add	r28, r14
    1e56:	df 1d       	adc	r29, r15
    1e58:	ce 01       	movw	r24, r28
    1e5a:	0e 94 ad 21 	call	0x435a	; 0x435a <eeprom_read_byte>
    1e5e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepInterval>
			smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1e62:	ce 0d       	add	r28, r14
    1e64:	df 1d       	adc	r29, r15
    1e66:	ce 01       	movw	r24, r28
    1e68:	0e 94 bb 21 	call	0x4376	; 0x4376 <eeprom_read_word>
    1e6c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <smSteps+0x1>
    1e70:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <smSteps>
			lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e74:	ce 0d       	add	r28, r14
    1e76:	df 1d       	adc	r29, r15
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0e 94 ad 21 	call	0x435a	; 0x435a <eeprom_read_byte>
    1e7e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <lcdContrast>
			magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e82:	ce 0d       	add	r28, r14
    1e84:	df 1d       	adc	r29, r15
    1e86:	ce 01       	movw	r24, r28
    1e88:	0e 94 ad 21 	call	0x435a	; 0x435a <eeprom_read_byte>
    1e8c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <magnetsOnWheel>
			stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e90:	ce 0d       	add	r28, r14
    1e92:	df 1d       	adc	r29, r15
    1e94:	ce 01       	movw	r24, r28
    1e96:	0e 94 ad 21 	call	0x435a	; 0x435a <eeprom_read_byte>
    1e9a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <stepMode>
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1e9e:	ce 0d       	add	r28, r14
    1ea0:	df 1d       	adc	r29, r15
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	0e 94 b5 21 	call	0x436a	; 0x436a <eeprom_read_dword>
    1ea8:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <wheelDiameter>
    1eac:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <wheelDiameter+0x1>
    1eb0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <wheelDiameter+0x2>
    1eb4:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <wheelDiameter+0x3>
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1eb8:	ce 0d       	add	r28, r14
    1eba:	df 1d       	adc	r29, r15
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	0e 94 b5 21 	call	0x436a	; 0x436a <eeprom_read_dword>
    1ec2:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <gearRatio>
    1ec6:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <gearRatio+0x1>
    1eca:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gearRatio+0x2>
    1ece:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gearRatio+0x3>
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1ed2:	c7 01       	movw	r24, r14
    1ed4:	8c 0f       	add	r24, r28
    1ed6:	9d 1f       	adc	r25, r29
    1ed8:	0e 94 b5 21 	call	0x436a	; 0x436a <eeprom_read_dword>
    1edc:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <degreesPerKmh>
    1ee0:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <degreesPerKmh+0x1>
    1ee4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <degreesPerKmh+0x2>
    1ee8:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <degreesPerKmh+0x3>
    1eec:	45 c0       	rjmp	.+138    	; 0x1f78 <eep_operations+0x24e>
    1eee:	f1 2c       	mov	r15, r1
			//odometerCurrentAddress = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		}
		if (eepAction==EEP_ODOMETER_READ){
    1ef0:	11 e0       	ldi	r17, 0x01	; 1
			uint32_t tempTotalRotations = 0;
			
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempTotalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	0e 94 b5 21 	call	0x436a	; 0x436a <eeprom_read_dword>
			if(tempTotalRotations>totalRotations){
    1ef8:	80 90 4a 01 	lds	r8, 0x014A	; 0x80014a <totalRotations>
    1efc:	90 90 4b 01 	lds	r9, 0x014B	; 0x80014b <totalRotations+0x1>
    1f00:	a0 90 4c 01 	lds	r10, 0x014C	; 0x80014c <totalRotations+0x2>
    1f04:	b0 90 4d 01 	lds	r11, 0x014D	; 0x80014d <totalRotations+0x3>
    1f08:	86 16       	cp	r8, r22
    1f0a:	97 06       	cpc	r9, r23
    1f0c:	a8 06       	cpc	r10, r24
    1f0e:	b9 06       	cpc	r11, r25
    1f10:	50 f4       	brcc	.+20     	; 0x1f26 <eep_operations+0x1fc>
				totalRotations = tempTotalRotations;
    1f12:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <totalRotations>
    1f16:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <totalRotations+0x1>
    1f1a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <totalRotations+0x2>
    1f1e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <totalRotations+0x3>
				odometerCurrentAddress = i + 1;
    1f22:	10 93 22 01 	sts	0x0122, r17	; 0x800122 <odometerCurrentAddress>
    1f26:	1f 5f       	subi	r17, 0xFF	; 255
    1f28:	ce 0d       	add	r28, r14
    1f2a:	df 1d       	adc	r29, r15
			//odometerCurrentAddress = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		}
		if (eepAction==EEP_ODOMETER_READ){
			uint32_t tempTotalRotations = 0;
			
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    1f2c:	14 33       	cpi	r17, 0x34	; 52
    1f2e:	09 f7       	brne	.-62     	; 0x1ef2 <eep_operations+0x1c8>
    1f30:	23 c0       	rjmp	.+70     	; 0x1f78 <eep_operations+0x24e>
				totalRotations = tempTotalRotations;
				odometerCurrentAddress = i + 1;
				}
			} 
		}
		if (eepAction==EEP_ODOMETER_WRITE){
    1f32:	43 30       	cpi	r20, 0x03	; 3
    1f34:	09 f5       	brne	.+66     	; 0x1f78 <eep_operations+0x24e>
			
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
    1f36:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <totalRotations>
    1f3a:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <totalRotations+0x1>
    1f3e:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <totalRotations+0x2>
    1f42:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <totalRotations+0x3>
    1f46:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <odometerCurrentAddress>
    1f4a:	9e 01       	movw	r18, r28
    1f4c:	8e 9d       	mul	r24, r14
    1f4e:	20 0d       	add	r18, r0
    1f50:	31 1d       	adc	r19, r1
    1f52:	11 24       	eor	r1, r1
    1f54:	c9 01       	movw	r24, r18
    1f56:	0e 94 ce 21 	call	0x439c	; 0x439c <eeprom_write_dword>
			odometerCurrentAddress++;
    1f5a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <odometerCurrentAddress>
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    1f60:	83 33       	cpi	r24, 0x33	; 51
    1f62:	18 f4       	brcc	.+6      	; 0x1f6a <eep_operations+0x240>
			} 
		}
		if (eepAction==EEP_ODOMETER_WRITE){
			
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
    1f64:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <odometerCurrentAddress>
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <eep_operations+0x24e>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    1f6a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <odometerCurrentAddress>
		}
		
		
	}
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <eep_operations+0x24e>
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			//odometerCurrentAddress = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
		}
		if (eepAction==EEP_ODOMETER_READ){
    1f70:	42 30       	cpi	r20, 0x02	; 2
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <eep_operations+0x24c>
    1f74:	bc cf       	rjmp	.-136    	; 0x1eee <eep_operations+0x1c4>
    1f76:	dd cf       	rjmp	.-70     	; 0x1f32 <eep_operations+0x208>
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
		}
		
		
	}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	9f 90       	pop	r9
    1f88:	8f 90       	pop	r8
    1f8a:	08 95       	ret

00001f8c <presets>:
	0b00000000,
	0b00001000,
	0b00000100			//HALF STEP
};

void presets (void){
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	cf 93       	push	r28


circLength = wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    1f96:	2b ed       	ldi	r18, 0xDB	; 219
    1f98:	3f e0       	ldi	r19, 0x0F	; 15
    1f9a:	49 e4       	ldi	r20, 0x49	; 73
    1f9c:	50 e4       	ldi	r21, 0x40	; 64
    1f9e:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    1fa2:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    1fa6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    1faa:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    1fae:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    1fb2:	6b 01       	movw	r12, r22
    1fb4:	7c 01       	movw	r14, r24
    1fb6:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__floatsisf>
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	c7 01       	movw	r24, r14
    1fca:	b6 01       	movw	r22, r12
    1fcc:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    1fd0:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <circLength>
    1fd4:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <circLength+0x1>
    1fd8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <circLength+0x2>
    1fdc:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <circLength+0x3>
timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    1fe0:	8d eb       	ldi	r24, 0xBD	; 189
    1fe2:	97 e3       	ldi	r25, 0x37	; 55
    1fe4:	a6 e8       	ldi	r26, 0x86	; 134
    1fe6:	b7 e3       	ldi	r27, 0x37	; 55
    1fe8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timePerTic>
    1fec:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timePerTic+0x1>
    1ff0:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timePerTic+0x2>
    1ff4:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timePerTic+0x3>

	
DDRA|=_BV(3); //ENABLE 1
    1ff8:	d3 9a       	sbi	0x1a, 3	; 26
DDRA|=_BV(0); //ENABLE 2
    1ffa:	d0 9a       	sbi	0x1a, 0	; 26
DDRA|=_BV(2); //PHASE 1
    1ffc:	d2 9a       	sbi	0x1a, 2	; 26
DDRA|=_BV(1); //PHASE 2
    1ffe:	d1 9a       	sbi	0x1a, 1	; 26
DDRD|=_BV(4);//PWM DIAL LIGHT
    2000:	8c 9a       	sbi	0x11, 4	; 17
DDRD|=_BV(5);//PWM ARROW LIGHT
    2002:	8d 9a       	sbi	0x11, 5	; 17


PORTA|=_BV(3);//ENABLE 1 high (disabled)
    2004:	db 9a       	sbi	0x1b, 3	; 27
PORTA|=_BV(0);//ENABLE 2 high (disabled)
    2006:	d8 9a       	sbi	0x1b, 0	; 27

PORTB|=_BV(5);//internal pull-up for external buttons
    2008:	c5 9a       	sbi	0x18, 5	; 24
PORTB|=_BV(6);
    200a:	c6 9a       	sbi	0x18, 6	; 24
PORTB|=_BV(7);
    200c:	c7 9a       	sbi	0x18, 7	; 24
	
		//=======================ADC
		ADCSRA |= _BV(ADEN);
    200e:	37 9a       	sbi	0x06, 7	; 6
		//=======================
		ADCSRA |= _BV(ADPS0);		//
    2010:	30 9a       	sbi	0x06, 0	; 6
		ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    2012:	31 9a       	sbi	0x06, 1	; 6
		ADCSRA |= _BV(ADPS2);		//
    2014:	32 9a       	sbi	0x06, 2	; 6
	
	//================= reading data from EEPROM
	
	uint8_t firstEepRead;
	
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    2016:	88 e0       	ldi	r24, 0x08	; 8
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 ad 21 	call	0x435a	; 0x435a <eeprom_read_byte>
	if (firstEepRead){
    201e:	88 23       	and	r24, r24
    2020:	79 f0       	breq	.+30     	; 0x2040 <presets+0xb4>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	64 e0       	ldi	r22, 0x04	; 4
    2026:	88 e0       	ldi	r24, 0x08	; 8
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eep_operations>
    202e:	c3 e3       	ldi	r28, 0x33	; 51
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    2030:	43 e0       	ldi	r20, 0x03	; 3
    2032:	64 e0       	ldi	r22, 0x04	; 4
    2034:	80 e8       	ldi	r24, 0x80	; 128
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eep_operations>
    203c:	c1 50       	subi	r28, 0x01	; 1
	uint8_t firstEepRead;
	
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    203e:	c1 f7       	brne	.-16     	; 0x2030 <presets+0xa4>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
			}
		}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	64 e0       	ldi	r22, 0x04	; 4
    2044:	88 e0       	ldi	r24, 0x08	; 8
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eep_operations>
	if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    204c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <odometerCurrentAddress>
    2050:	83 33       	cpi	r24, 0x33	; 51
    2052:	10 f0       	brcs	.+4      	; 0x2058 <presets+0xcc>
    2054:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <odometerCurrentAddress>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);	
    2058:	42 e0       	ldi	r20, 0x02	; 2
    205a:	64 e0       	ldi	r22, 0x04	; 4
    205c:	80 e8       	ldi	r24, 0x80	; 128
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eep_operations>
		
	
		
TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    2064:	85 b5       	in	r24, 0x25	; 37
    2066:	8e 60       	ori	r24, 0x0E	; 14
    2068:	85 bd       	out	0x25, r24	; 37
OCR2 = TIC; //upper limit of Timer2
    206a:	84 e1       	ldi	r24, 0x14	; 20
    206c:	83 bd       	out	0x23, r24	; 35

	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    206e:	83 ea       	ldi	r24, 0xA3	; 163
    2070:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    2072:	8b e0       	ldi	r24, 0x0B	; 11
    2074:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    2076:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <pwmArrow>
    207a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <pwmArrow+0x1>
    207e:	9b bd       	out	0x2b, r25	; 43
    2080:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    2082:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <pwmDial>
    2086:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <pwmDial+0x1>
    208a:	99 bd       	out	0x29, r25	; 41
    208c:	88 bd       	out	0x28, r24	; 40
	//============================
	if (stepMode==FULL_STEP){
    208e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    2092:	81 11       	cpse	r24, r1
    2094:	23 c0       	rjmp	.+70     	; 0x20dc <presets+0x150>
		kmhPerStep=(360.0/smSteps)/degreesPerKmh;
    2096:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    209a:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    20a6:	9b 01       	movw	r18, r22
    20a8:	ac 01       	movw	r20, r24
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	84 eb       	ldi	r24, 0xB4	; 180
    20b0:	93 e4       	ldi	r25, 0x43	; 67
    20b2:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    20b6:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <degreesPerKmh>
    20ba:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    20be:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    20c2:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    20c6:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    20ca:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <kmhPerStep>
    20ce:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <kmhPerStep+0x1>
    20d2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <kmhPerStep+0x2>
    20d6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <kmhPerStep+0x3>
    20da:	24 c0       	rjmp	.+72     	; 0x2124 <presets+0x198>
		}
	if (stepMode==HALF_STEP){
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	11 f5       	brne	.+68     	; 0x2124 <presets+0x198>
		kmhPerStep=(180.0/smSteps)/degreesPerKmh;
    20e0:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    20e4:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    20f0:	9b 01       	movw	r18, r22
    20f2:	ac 01       	movw	r20, r24
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	84 e3       	ldi	r24, 0x34	; 52
    20fa:	93 e4       	ldi	r25, 0x43	; 67
    20fc:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    2100:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <degreesPerKmh>
    2104:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    2108:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    210c:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2110:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    2114:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <kmhPerStep>
    2118:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <kmhPerStep+0x1>
    211c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <kmhPerStep+0x2>
    2120:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <kmhPerStep+0x3>
		}

//display initialization
GLCD_Setup();
    2124:	0e 94 7d 15 	call	0x2afa	; 0x2afa <GLCD_Setup>
GLCD_Clear();
    2128:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
GLCD_SetContrast(lcdContrast);
    212c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <lcdContrast>
    2130:	0e 94 5e 15 	call	0x2abc	; 0x2abc <GLCD_SetContrast>
GLCD_Render();
    2134:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
sei();
    2138:	78 94       	sei
//if (!arrowCalibrated)
//arrow_calibration();
MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
    213a:	85 b7       	in	r24, 0x35	; 53
    213c:	88 60       	ori	r24, 0x08	; 8
    213e:	85 bf       	out	0x35, r24	; 53
GICR|=_BV(INT1); //External Interrupt Enable INT1
    2140:	8b b7       	in	r24, 0x3b	; 59
    2142:	80 68       	ori	r24, 0x80	; 128
    2144:	8b bf       	out	0x3b, r24	; 59
}
    2146:	cf 91       	pop	r28
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	cf 90       	pop	r12
    2150:	08 95       	ret

00002152 <calculate_speed>:
				
				}
				
}

void calculate_speed(){
    2152:	cf 93       	push	r28
 
			if(speedTimer>400){
    2154:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <speedTimer>
    2158:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <speedTimer+0x1>
    215c:	81 39       	cpi	r24, 0x91	; 145
    215e:	91 40       	sbci	r25, 0x01	; 1
    2160:	f4 f0       	brlt	.+60     	; 0x219e <calculate_speed+0x4c>
						//if(speedRefresh)
						cli();
    2162:	f8 94       	cli
						eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    2164:	43 e0       	ldi	r20, 0x03	; 3
    2166:	64 e0       	ldi	r22, 0x04	; 4
    2168:	80 e8       	ldi	r24, 0x80	; 128
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eep_operations>
						sei();
    2170:	78 94       	sei
						TIMSK&=~_BV(OCIE2);	//if Hall sensor was not triggered for too long (0,32s) it means that vehicle does not move
    2172:	89 b7       	in	r24, 0x39	; 57
    2174:	8f 77       	andi	r24, 0x7F	; 127
    2176:	89 bf       	out	0x39, r24	; 57
						TCNT2 = 0;
    2178:	14 bc       	out	0x24, r1	; 36
						speedTimer = 0;
    217a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <speedTimer+0x1>
    217e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <speedTimer>
						speedTimerRecent = 0;	//speedTimer;//?
    2182:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <speedTimerRecent+0x1>
    2186:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <speedTimerRecent>
						speedKmh = 0;
    218a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <speedKmh>
    218e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <speedKmh+0x1>
    2192:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <speedKmh+0x2>
    2196:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <speedKmh+0x3>
						firstMeasure = 0;
    219a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <firstMeasure>
						
						}
			if((speedRefresh)&&(speedTimerRecent)){
    219e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <speedRefresh>
    21a2:	88 23       	and	r24, r24
    21a4:	d1 f1       	breq	.+116    	; 0x221a <calculate_speed+0xc8>
    21a6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <speedTimerRecent>
    21aa:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <speedTimerRecent+0x1>
    21ae:	89 2b       	or	r24, r25
    21b0:	a1 f1       	breq	.+104    	; 0x221a <calculate_speed+0xc8>
						speedKmh = 1.0/(timePerTic*speedTimerRecent)*3.6*circLength;			
    21b2:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <speedTimerRecent>
    21b6:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <speedTimerRecent+0x1>
    21ba:	07 2e       	mov	r0, r23
    21bc:	00 0c       	add	r0, r0
    21be:	88 0b       	sbc	r24, r24
    21c0:	99 0b       	sbc	r25, r25
    21c2:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__floatsisf>
    21c6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <timePerTic>
    21ca:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <timePerTic+0x1>
    21ce:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <timePerTic+0x2>
    21d2:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <timePerTic+0x3>
    21d6:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	80 e8       	ldi	r24, 0x80	; 128
    21e4:	9f e3       	ldi	r25, 0x3F	; 63
    21e6:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    21ea:	26 e6       	ldi	r18, 0x66	; 102
    21ec:	36 e6       	ldi	r19, 0x66	; 102
    21ee:	46 e6       	ldi	r20, 0x66	; 102
    21f0:	50 e4       	ldi	r21, 0x40	; 64
    21f2:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    21f6:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <circLength>
    21fa:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <circLength+0x1>
    21fe:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <circLength+0x2>
    2202:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <circLength+0x3>
    2206:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    220a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <speedKmh>
    220e:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <speedKmh+0x1>
    2212:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <speedKmh+0x2>
    2216:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <speedKmh+0x3>
						}
		
		if (speedKmh>scaleMax)speedKmh = scaleMax;
    221a:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <scaleMax>
    221e:	6c 2f       	mov	r22, r28
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__floatsisf>
    222a:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <speedKmh>
    222e:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <speedKmh+0x1>
    2232:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <speedKmh+0x2>
    2236:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <speedKmh+0x3>
    223a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__cmpsf2>
    223e:	88 23       	and	r24, r24
    2240:	74 f4       	brge	.+28     	; 0x225e <calculate_speed+0x10c>
    2242:	6c 2f       	mov	r22, r28
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    224e:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <speedKmh>
    2252:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <speedKmh+0x1>
    2256:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <speedKmh+0x2>
    225a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <speedKmh+0x3>
		speedRefresh = 0;									
    225e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <speedRefresh>
		}
    2262:	cf 91       	pop	r28
    2264:	08 95       	ret

00002266 <set_value>:
		}
		
		
	}
	
	uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	00 d0       	rcall	.+0      	; 0x226c <set_value+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <set_value+0x8>
    226e:	1f 92       	push	r1
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	7c 01       	movw	r14, r24
    2276:	5b 01       	movw	r10, r22
    2278:	6a 01       	movw	r12, r20
    227a:	2d 83       	std	Y+5, r18	; 0x05
		
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	48 e0       	ldi	r20, 0x08	; 8
    2280:	65 e0       	ldi	r22, 0x05	; 5
    2282:	80 e8       	ldi	r24, 0x80	; 128
    2284:	9b e0       	ldi	r25, 0x0B	; 11
    2286:	0e 94 e5 19 	call	0x33ca	; 0x33ca <GLCD_SetFont>
		GLCD_Clear();
    228a:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
		GLCD_GotoLine(1);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
		GLCD_GotoX(10);
    2294:	8a e0       	ldi	r24, 0x0A	; 10
    2296:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_PrintString(text);
    229a:	c8 01       	movw	r24, r16
    229c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
		GLCD_GotoY(8);
    22a0:	88 e0       	ldi	r24, 0x08	; 8
    22a2:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
		GLCD_GotoX(90);
    22a6:	8a e5       	ldi	r24, 0x5A	; 90
    22a8:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_PrintString("Edit");
    22ac:	80 e8       	ldi	r24, 0x80	; 128
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
		GLCD_GotoY(20);
    22b4:	84 e1       	ldi	r24, 0x14	; 20
    22b6:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
		GLCD_GotoX(90);
    22ba:	8a e5       	ldi	r24, 0x5A	; 90
    22bc:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_PrintString("Back");
    22c0:	85 e8       	ldi	r24, 0x85	; 133
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
		GLCD_GotoY(32);
    22c8:	80 e2       	ldi	r24, 0x20	; 32
    22ca:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
		GLCD_GotoX(90);
    22ce:	8a e5       	ldi	r24, 0x5A	; 90
    22d0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		
		GLCD_PrintString("Save");
    22d4:	8a e8       	ldi	r24, 0x8A	; 138
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
// 		GLCD_DrawRectangle(78,6,78+26,16,GLCD_Black);
// 		GLCD_DrawRectangle(110,6,120,16,GLCD_Black);
// 		GLCD_DrawLine(110,6,120,16,GLCD_Black);
// 		GLCD_DrawLine(110,16,120,6,GLCD_Black);
		GLCD_GotoY(55);
    22dc:	87 e3       	ldi	r24, 0x37	; 55
    22de:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
		GLCD_GotoX(6);
    22e2:	86 e0       	ldi	r24, 0x06	; 6
    22e4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_PrintString("min:");
    22e8:	8f e8       	ldi	r24, 0x8F	; 143
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
		GLCD_GotoX(70);
    22f0:	86 e4       	ldi	r24, 0x46	; 70
    22f2:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_PrintString("max:");
    22f6:	84 e9       	ldi	r24, 0x94	; 148
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
		GLCD_GotoX(28);
    22fe:	8c e1       	ldi	r24, 0x1C	; 28
    2300:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		if (tens){ 
    2304:	2d 81       	ldd	r18, Y+5	; 0x05
    2306:	22 23       	and	r18, r18
    2308:	09 f4       	brne	.+2      	; 0x230c <set_value+0xa6>
    230a:	44 c0       	rjmp	.+136    	; 0x2394 <set_value+0x12e>
			uint8_t devider=1;
			for (int8_t i=0;i<tens;i++){devider*=10;}
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	12 16       	cp	r1, r18
    2310:	13 06       	cpc	r1, r19
    2312:	8c f4       	brge	.+34     	; 0x2336 <set_value+0xd0>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	49 2e       	mov	r4, r25
    231a:	44 0c       	add	r4, r4
    231c:	94 2d       	mov	r25, r4
    231e:	99 0f       	add	r25, r25
    2320:	99 0f       	add	r25, r25
    2322:	94 0d       	add	r25, r4
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	48 2f       	mov	r20, r24
    2328:	08 2e       	mov	r0, r24
    232a:	00 0c       	add	r0, r0
    232c:	55 0b       	sbc	r21, r21
    232e:	42 17       	cp	r20, r18
    2330:	53 07       	cpc	r21, r19
    2332:	94 f3       	brlt	.-28     	; 0x2318 <set_value+0xb2>
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <set_value+0xd2>
    2336:	91 e0       	ldi	r25, 0x01	; 1
			
			GLCD_PrintDouble(maxValue/(float)devider,devider);
    2338:	49 2e       	mov	r4, r25
    233a:	51 2c       	mov	r5, r1
    233c:	61 2c       	mov	r6, r1
    233e:	71 2c       	mov	r7, r1
    2340:	c3 01       	movw	r24, r6
    2342:	b2 01       	movw	r22, r4
    2344:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    2348:	69 83       	std	Y+1, r22	; 0x01
    234a:	7a 83       	std	Y+2, r23	; 0x02
    234c:	8b 83       	std	Y+3, r24	; 0x03
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	b7 01       	movw	r22, r14
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    235a:	29 81       	ldd	r18, Y+1	; 0x01
    235c:	3a 81       	ldd	r19, Y+2	; 0x02
    235e:	4b 81       	ldd	r20, Y+3	; 0x03
    2360:	5c 81       	ldd	r21, Y+4	; 0x04
    2362:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    2366:	a3 01       	movw	r20, r6
    2368:	92 01       	movw	r18, r4
    236a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
			GLCD_GotoX(95);
    236e:	8f e5       	ldi	r24, 0x5F	; 95
    2370:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
			GLCD_PrintDouble((float)minValue/(float)devider,devider);
    2374:	b5 01       	movw	r22, r10
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    237e:	29 81       	ldd	r18, Y+1	; 0x01
    2380:	3a 81       	ldd	r19, Y+2	; 0x02
    2382:	4b 81       	ldd	r20, Y+3	; 0x03
    2384:	5c 81       	ldd	r21, Y+4	; 0x04
    2386:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3>
    238a:	a3 01       	movw	r20, r6
    238c:	92 01       	movw	r18, r4
    238e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <set_value+0x148>
			}else{
			GLCD_PrintInteger(maxValue);
    2394:	b7 01       	movw	r22, r14
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
			GLCD_GotoX(95);
    239e:	8f e5       	ldi	r24, 0x5F	; 95
    23a0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
			GLCD_PrintInteger(minValue);	
    23a4:	b5 01       	movw	r22, r10
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
			}
		
		GLCD_Render();
    23ae:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	83 ec       	ldi	r24, 0xC3	; 195
    23b6:	99 e0       	ldi	r25, 0x09	; 9
    23b8:	31 50       	subi	r19, 0x01	; 1
    23ba:	80 40       	sbci	r24, 0x00	; 0
    23bc:	90 40       	sbci	r25, 0x00	; 0
    23be:	e1 f7       	brne	.-8      	; 0x23b8 <set_value+0x152>
    23c0:	00 c0       	rjmp	.+0      	; 0x23c2 <set_value+0x15c>
    23c2:	00 00       	nop
		_delay_ms(200);
		
		GLCD_GotoY(24);
    23c4:	88 e1       	ldi	r24, 0x18	; 24
    23c6:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
		GLCD_GotoX(5);
    23ca:	85 e0       	ldi	r24, 0x05	; 5
    23cc:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	41 e1       	ldi	r20, 0x11	; 17
    23d4:	6c e0       	ldi	r22, 0x0C	; 12
    23d6:	84 e5       	ldi	r24, 0x54	; 84
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 e5 19 	call	0x33ca	; 0x33ca <GLCD_SetFont>
	uint8_t maxValueLength;
	int8_t *digitsArr;  
	int8_t currentItem = 0;
	tempValue = currValue;
	valueLength = 0;
	while(tempValue)       //finding the number of digits for current value 
    23de:	c1 14       	cp	r12, r1
    23e0:	d1 04       	cpc	r13, r1
    23e2:	91 f0       	breq	.+36     	; 0x2408 <set_value+0x1a2>
    23e4:	96 01       	movw	r18, r12
    23e6:	91 2c       	mov	r9, r1
	   {
		   tempValue = tempValue / 10;
    23e8:	ad ec       	ldi	r26, 0xCD	; 205
    23ea:	bc ec       	ldi	r27, 0xCC	; 204
    23ec:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__umulhisi3>
    23f0:	9c 01       	movw	r18, r24
    23f2:	36 95       	lsr	r19
    23f4:	27 95       	ror	r18
    23f6:	36 95       	lsr	r19
    23f8:	27 95       	ror	r18
    23fa:	36 95       	lsr	r19
    23fc:	27 95       	ror	r18
		   valueLength++;
    23fe:	93 94       	inc	r9
	uint8_t maxValueLength;
	int8_t *digitsArr;  
	int8_t currentItem = 0;
	tempValue = currValue;
	valueLength = 0;
	while(tempValue)       //finding the number of digits for current value 
    2400:	21 15       	cp	r18, r1
    2402:	31 05       	cpc	r19, r1
    2404:	89 f7       	brne	.-30     	; 0x23e8 <set_value+0x182>
    2406:	01 c0       	rjmp	.+2      	; 0x240a <set_value+0x1a4>
	uint8_t valueLength;
	uint8_t maxValueLength;
	int8_t *digitsArr;  
	int8_t currentItem = 0;
	tempValue = currValue;
	valueLength = 0;
    2408:	91 2c       	mov	r9, r1
		   tempValue = tempValue / 10;
		   valueLength++;
		        } 
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    240a:	e1 14       	cp	r14, r1
    240c:	f1 04       	cpc	r15, r1
    240e:	09 f4       	brne	.+2      	; 0x2412 <set_value+0x1ac>
    2410:	1a c1       	rjmp	.+564    	; 0x2646 <set_value+0x3e0>
    2412:	19 82       	std	Y+1, r1	; 0x01
    2414:	01 c0       	rjmp	.+2      	; 0x2418 <set_value+0x1b2>
		{
			tempValue = tempValue / 10;
			maxValueLength++;
    2416:	09 83       	std	Y+1, r16	; 0x01
		        } 
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
		{
			tempValue = tempValue / 10;
    2418:	97 01       	movw	r18, r14
    241a:	ad ec       	ldi	r26, 0xCD	; 205
    241c:	bc ec       	ldi	r27, 0xCC	; 204
    241e:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__umulhisi3>
    2422:	7c 01       	movw	r14, r24
    2424:	f6 94       	lsr	r15
    2426:	e7 94       	ror	r14
    2428:	f6 94       	lsr	r15
    242a:	e7 94       	ror	r14
    242c:	f6 94       	lsr	r15
    242e:	e7 94       	ror	r14
			maxValueLength++;
    2430:	09 81       	ldd	r16, Y+1	; 0x01
    2432:	0f 5f       	subi	r16, 0xFF	; 255
		   tempValue = tempValue / 10;
		   valueLength++;
		        } 
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    2434:	e1 14       	cp	r14, r1
    2436:	f1 04       	cpc	r15, r1
    2438:	71 f7       	brne	.-36     	; 0x2416 <set_value+0x1b0>
		{
			tempValue = tempValue / 10;
			maxValueLength++;
				}
				
		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	c8 01       	movw	r24, r16
    243e:	0e 94 8c 20 	call	0x4118	; 0x4118 <malloc>
    2442:	7c 01       	movw	r14, r24
		
		
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2444:	58 01       	movw	r10, r16
    2446:	1a 14       	cp	r1, r10
    2448:	1b 04       	cpc	r1, r11
    244a:	0c f0       	brlt	.+2      	; 0x244e <set_value+0x1e8>
    244c:	42 c0       	rjmp	.+132    	; 0x24d2 <set_value+0x26c>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	e0 e0       	ldi	r30, 0x00	; 0
			if (digitIndex<valueLength){
    2454:	49 2d       	mov	r20, r9
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	84 17       	cp	r24, r20
    245a:	95 07       	cpc	r25, r21
    245c:	64 f5       	brge	.+88     	; 0x24b6 <set_value+0x250>
				digitsArr[digitIndex] = currValue % 10;
    245e:	96 01       	movw	r18, r12
    2460:	ad ec       	ldi	r26, 0xCD	; 205
    2462:	bc ec       	ldi	r27, 0xCC	; 204
    2464:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__umulhisi3>
    2468:	96 95       	lsr	r25
    246a:	87 95       	ror	r24
    246c:	96 95       	lsr	r25
    246e:	87 95       	ror	r24
    2470:	96 95       	lsr	r25
    2472:	87 95       	ror	r24
    2474:	9c 01       	movw	r18, r24
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	96 01       	movw	r18, r12
    248c:	28 1b       	sub	r18, r24
    248e:	39 0b       	sbc	r19, r25
    2490:	d7 01       	movw	r26, r14
    2492:	ae 0f       	add	r26, r30
    2494:	b1 1d       	adc	r27, r1
    2496:	e7 fd       	sbrc	r30, 7
    2498:	ba 95       	dec	r27
    249a:	2c 93       	st	X, r18
				currValue = currValue / 10;
    249c:	96 01       	movw	r18, r12
    249e:	ad ec       	ldi	r26, 0xCD	; 205
    24a0:	bc ec       	ldi	r27, 0xCC	; 204
    24a2:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__umulhisi3>
    24a6:	6c 01       	movw	r12, r24
    24a8:	d6 94       	lsr	r13
    24aa:	c7 94       	ror	r12
    24ac:	d6 94       	lsr	r13
    24ae:	c7 94       	ror	r12
    24b0:	d6 94       	lsr	r13
    24b2:	c7 94       	ror	r12
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <set_value+0x25c>
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    24b6:	d7 01       	movw	r26, r14
    24b8:	ae 0f       	add	r26, r30
    24ba:	b1 1d       	adc	r27, r1
    24bc:	e7 fd       	sbrc	r30, 7
    24be:	ba 95       	dec	r27
    24c0:	1c 92       	st	X, r1
    24c2:	ef 5f       	subi	r30, 0xFF	; 255
				}
				
		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
		
		
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    24c4:	8e 2f       	mov	r24, r30
    24c6:	0e 2e       	mov	r0, r30
    24c8:	00 0c       	add	r0, r0
    24ca:	99 0b       	sbc	r25, r25
    24cc:	8a 15       	cp	r24, r10
    24ce:	9b 05       	cpc	r25, r11
    24d0:	1c f2       	brlt	.-122    	; 0x2458 <set_value+0x1f2>
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}
			  

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    24d2:	01 50       	subi	r16, 0x01	; 1
    24d4:	11 09       	sbc	r17, r1
    24d6:	8d e0       	ldi	r24, 0x0D	; 13
    24d8:	08 9f       	mul	r16, r24
    24da:	70 2c       	mov	r7, r0
    24dc:	11 24       	eor	r1, r1
    24de:	15 e0       	ldi	r17, 0x05	; 5
    24e0:	17 0d       	add	r17, r7
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    24e2:	89 80       	ldd	r8, Y+1	; 0x01
    24e4:	88 20       	and	r8, r8
    24e6:	14 f1       	brlt	.+68     	; 0x252c <set_value+0x2c6>
				GLCD_PrintInteger(digitsArr[digitIndex]);
					if ((digitIndex==tens)&&(tens)){
    24e8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ea:	43 2e       	mov	r4, r19
    24ec:	51 2c       	mov	r5, r1
		}
			  

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	c8 2e       	mov	r12, r24
    24f2:	88 0f       	add	r24, r24
    24f4:	dd 08       	sbc	r13, r13
    24f6:	f7 01       	movw	r30, r14
    24f8:	ec 0d       	add	r30, r12
    24fa:	fd 1d       	adc	r31, r13
    24fc:	60 81       	ld	r22, Z
    24fe:	06 2e       	mov	r0, r22
    2500:	00 0c       	add	r0, r0
    2502:	77 0b       	sbc	r23, r23
    2504:	88 0b       	sbc	r24, r24
    2506:	99 0b       	sbc	r25, r25
    2508:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
					if ((digitIndex==tens)&&(tens)){
    250c:	c4 14       	cp	r12, r4
    250e:	d5 04       	cpc	r13, r5
    2510:	41 f4       	brne	.+16     	; 0x2522 <set_value+0x2bc>
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	99 23       	and	r25, r25
    2516:	29 f0       	breq	.+10     	; 0x2522 <set_value+0x2bc>
						GLCD_PrintString(".");
    2518:	89 e9       	ldi	r24, 0x99	; 153
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
					rectShift+=5;
    2520:	1b 5f       	subi	r17, 0xFB	; 251
    2522:	29 81       	ldd	r18, Y+1	; 0x01
    2524:	21 50       	subi	r18, 0x01	; 1
    2526:	29 83       	std	Y+1, r18	; 0x01
			}
		}
			  

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2528:	22 23       	and	r18, r18
    252a:	0c f7       	brge	.-62     	; 0x24ee <set_value+0x288>
					}
				}   
				
		
		
		GLCD_InvertRect(rectShift,24,rectShift+12,40);
    252c:	4c e0       	ldi	r20, 0x0C	; 12
    252e:	41 0f       	add	r20, r17
    2530:	28 e2       	ldi	r18, 0x28	; 40
    2532:	68 e1       	ldi	r22, 0x18	; 24
    2534:	81 2f       	mov	r24, r17
    2536:	0e 94 0e 19 	call	0x321c	; 0x321c <GLCD_InvertRect>
		GLCD_Render();
    253a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
	uint16_t newValue = 0;
	int8_t digitIndex;
	uint8_t valueLength;
	uint8_t maxValueLength;
	int8_t *digitsArr;  
	int8_t currentItem = 0;
    253e:	91 2c       	mov	r9, r1
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem]=0;
					}
					if (currentButton == 2) {
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem]=9;
    2540:	0f 2e       	mov	r0, r31
    2542:	f9 e0       	ldi	r31, 0x09	; 9
    2544:	5f 2e       	mov	r5, r31
    2546:	f0 2d       	mov	r31, r0
			GLCD_DrawRectangle(4,24,4,56,GLCD_White);
			GLCD_GotoY(24);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	c3 2e       	mov	r12, r19
    254c:	d1 2c       	mov	r13, r1
			}
			
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    254e:	0f 2e       	mov	r0, r31
    2550:	f3 ef       	ldi	r31, 0xF3	; 243
    2552:	6f 2e       	mov	r6, r31
    2554:	f0 2d       	mov	r31, r0
		
		GLCD_InvertRect(rectShift,24,rectShift+12,40);
		GLCD_Render();
		
		while(1){
			uint8_t currentButton = button_monitor();
    2556:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <button_monitor>
			if(currentButton){
    255a:	88 23       	and	r24, r24
    255c:	e1 f3       	breq	.-8      	; 0x2556 <set_value+0x2f0>
				rectShift = 0;
					if (currentButton == 1) {
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	51 f4       	brne	.+20     	; 0x2576 <set_value+0x310>
						currentItem++;
    2562:	93 94       	inc	r9
						if (currentItem==maxValueLength)currentItem=0;
    2564:	89 2d       	mov	r24, r9
    2566:	09 2c       	mov	r0, r9
    2568:	00 0c       	add	r0, r0
    256a:	99 0b       	sbc	r25, r25
    256c:	8a 15       	cp	r24, r10
    256e:	9b 05       	cpc	r25, r11
    2570:	e9 f4       	brne	.+58     	; 0x25ac <set_value+0x346>
    2572:	91 2c       	mov	r9, r1
    2574:	1b c0       	rjmp	.+54     	; 0x25ac <set_value+0x346>
					
					}
			
					if (currentButton == 3) {
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	61 f4       	brne	.+24     	; 0x2592 <set_value+0x32c>
						digitsArr[currentItem]++;
    257a:	f7 01       	movw	r30, r14
    257c:	e9 0d       	add	r30, r9
    257e:	f1 1d       	adc	r31, r1
    2580:	97 fc       	sbrc	r9, 7
    2582:	fa 95       	dec	r31
    2584:	80 81       	ld	r24, Z
    2586:	8f 5f       	subi	r24, 0xFF	; 255
						if (digitsArr[currentItem]>9)digitsArr[currentItem]=0;
    2588:	8a 30       	cpi	r24, 0x0A	; 10
    258a:	0c f4       	brge	.+2      	; 0x258e <set_value+0x328>
    258c:	6b c0       	rjmp	.+214    	; 0x2664 <set_value+0x3fe>
    258e:	10 82       	st	Z, r1
    2590:	0d c0       	rjmp	.+26     	; 0x25ac <set_value+0x346>
					}
					if (currentButton == 2) {
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	59 f4       	brne	.+22     	; 0x25ac <set_value+0x346>
						digitsArr[currentItem]--;
    2596:	f7 01       	movw	r30, r14
    2598:	e9 0d       	add	r30, r9
    259a:	f1 1d       	adc	r31, r1
    259c:	97 fc       	sbrc	r9, 7
    259e:	fa 95       	dec	r31
    25a0:	80 81       	ld	r24, Z
    25a2:	81 50       	subi	r24, 0x01	; 1
						if (digitsArr[currentItem]<0)digitsArr[currentItem]=9;
    25a4:	12 f0       	brmi	.+4      	; 0x25aa <set_value+0x344>
					if (currentButton == 3) {
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem]=0;
					}
					if (currentButton == 2) {
						digitsArr[currentItem]--;
    25a6:	80 83       	st	Z, r24
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <set_value+0x346>
						if (digitsArr[currentItem]<0)digitsArr[currentItem]=9;
    25aa:	50 82       	st	Z, r5
					}
				while(button_monitor());
    25ac:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <button_monitor>
    25b0:	81 11       	cpse	r24, r1
    25b2:	fc cf       	rjmp	.-8      	; 0x25ac <set_value+0x346>
			
			GLCD_DrawRectangle(4,24,4,56,GLCD_White);
    25b4:	00 e0       	ldi	r16, 0x00	; 0
    25b6:	28 e3       	ldi	r18, 0x38	; 56
    25b8:	44 e0       	ldi	r20, 0x04	; 4
    25ba:	68 e1       	ldi	r22, 0x18	; 24
    25bc:	84 e0       	ldi	r24, 0x04	; 4
    25be:	0e 94 8b 18 	call	0x3116	; 0x3116 <GLCD_DrawRectangle>
			GLCD_GotoY(24);
    25c2:	88 e1       	ldi	r24, 0x18	; 24
    25c4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
			GLCD_GotoX(5);
    25c8:	85 e0       	ldi	r24, 0x05	; 5
    25ca:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    25ce:	88 20       	and	r8, r8
    25d0:	fc f0       	brlt	.+62     	; 0x2610 <set_value+0x3aa>
    25d2:	89 82       	std	Y+1, r8	; 0x01
				GLCD_PrintInteger(digitsArr[digitIndex]);
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	08 2f       	mov	r16, r24
    25d8:	88 0f       	add	r24, r24
    25da:	11 0b       	sbc	r17, r17
    25dc:	f7 01       	movw	r30, r14
    25de:	e0 0f       	add	r30, r16
    25e0:	f1 1f       	adc	r31, r17
    25e2:	60 81       	ld	r22, Z
    25e4:	06 2e       	mov	r0, r22
    25e6:	00 0c       	add	r0, r0
    25e8:	77 0b       	sbc	r23, r23
    25ea:	88 0b       	sbc	r24, r24
    25ec:	99 0b       	sbc	r25, r25
    25ee:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    25f2:	0c 15       	cp	r16, r12
    25f4:	1d 05       	cpc	r17, r13
    25f6:	39 f4       	brne	.+14     	; 0x2606 <set_value+0x3a0>
    25f8:	9d 81       	ldd	r25, Y+5	; 0x05
    25fa:	99 23       	and	r25, r25
    25fc:	21 f0       	breq	.+8      	; 0x2606 <set_value+0x3a0>
    25fe:	89 e9       	ldi	r24, 0x99	; 153
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
    2606:	29 81       	ldd	r18, Y+1	; 0x01
    2608:	21 50       	subi	r18, 0x01	; 1
    260a:	29 83       	std	Y+1, r18	; 0x01
				while(button_monitor());
			
			GLCD_DrawRectangle(4,24,4,56,GLCD_White);
			GLCD_GotoY(24);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    260c:	22 23       	and	r18, r18
    260e:	14 f7       	brge	.-60     	; 0x25d4 <set_value+0x36e>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2610:	97 2d       	mov	r25, r7
    2612:	96 9c       	mul	r9, r6
    2614:	90 0d       	add	r25, r0
    2616:	11 24       	eor	r1, r1
    2618:	85 e0       	ldi	r24, 0x05	; 5
    261a:	89 0f       	add	r24, r25
			if (tens){
    261c:	3d 81       	ldd	r19, Y+5	; 0x05
    261e:	33 23       	and	r19, r19
    2620:	49 f0       	breq	.+18     	; 0x2634 <set_value+0x3ce>
					if(currentItem<tens){
    2622:	29 2d       	mov	r18, r9
    2624:	09 2c       	mov	r0, r9
    2626:	00 0c       	add	r0, r0
    2628:	33 0b       	sbc	r19, r19
    262a:	2c 15       	cp	r18, r12
    262c:	3d 05       	cpc	r19, r13
    262e:	14 f4       	brge	.+4      	; 0x2634 <set_value+0x3ce>
						rectShift+=5;
    2630:	8a e0       	ldi	r24, 0x0A	; 10
    2632:	89 0f       	add	r24, r25
					}
				}
			GLCD_InvertRect(rectShift,24,rectShift+12,40);
    2634:	4c e0       	ldi	r20, 0x0C	; 12
    2636:	48 0f       	add	r20, r24
    2638:	28 e2       	ldi	r18, 0x28	; 40
    263a:	68 e1       	ldi	r22, 0x18	; 24
    263c:	0e 94 0e 19 	call	0x321c	; 0x321c <GLCD_InvertRect>
			GLCD_Render();
    2640:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>
    2644:	88 cf       	rjmp	.-240    	; 0x2556 <set_value+0x2f0>
		{
			tempValue = tempValue / 10;
			maxValueLength++;
				}
				
		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	0e 94 8c 20 	call	0x4118	; 0x4118 <malloc>
    264e:	7c 01       	movw	r14, r24
			}
		}
			  

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2650:	88 24       	eor	r8, r8
    2652:	8a 94       	dec	r8
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}
			  

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2654:	0f 2e       	mov	r0, r31
    2656:	f3 ef       	ldi	r31, 0xF3	; 243
    2658:	7f 2e       	mov	r7, r31
    265a:	f0 2d       	mov	r31, r0
				}
				
		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
		
		
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    265c:	a1 2c       	mov	r10, r1
    265e:	b1 2c       	mov	r11, r1
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}
			  

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2660:	18 ef       	ldi	r17, 0xF8	; 248
    2662:	64 cf       	rjmp	.-312    	; 0x252c <set_value+0x2c6>
						if (currentItem==maxValueLength)currentItem=0;
					
					}
			
					if (currentButton == 3) {
						digitsArr[currentItem]++;
    2664:	80 83       	st	Z, r24
    2666:	a2 cf       	rjmp	.-188    	; 0x25ac <set_value+0x346>

00002668 <menu_screen>:
void menu_screen(){
uint8_t offset = 75;	
static int8_t menuItem;
static int8_t page;

if (page < 0) page = 0;
    2668:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    266c:	88 23       	and	r24, r24
    266e:	14 f4       	brge	.+4      	; 0x2674 <menu_screen+0xc>
    2670:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <page.2770>
if (menuItem > 5){page++;menuItem=0;}
    2674:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    2678:	86 30       	cpi	r24, 0x06	; 6
    267a:	44 f0       	brlt	.+16     	; 0x268c <menu_screen+0x24>
    267c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <page.2770>
    2686:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
    268a:	19 c0       	rjmp	.+50     	; 0x26be <menu_screen+0x56>
if (menuItem < 0){page--;menuItem=5;}
    268c:	88 23       	and	r24, r24
    268e:	5c f4       	brge	.+22     	; 0x26a6 <menu_screen+0x3e>
    2690:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    2694:	81 50       	subi	r24, 0x01	; 1
    2696:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <page.2770>
    269a:	95 e0       	ldi	r25, 0x05	; 5
    269c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
if ((page == 2)&&(menuItem > 1)){
    26a0:	82 30       	cpi	r24, 0x02	; 2
    26a2:	69 f4       	brne	.+26     	; 0x26be <menu_screen+0x56>
    26a4:	08 c0       	rjmp	.+16     	; 0x26b6 <menu_screen+0x4e>
    26a6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    26aa:	82 30       	cpi	r24, 0x02	; 2
    26ac:	41 f4       	brne	.+16     	; 0x26be <menu_screen+0x56>
    26ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	24 f0       	brlt	.+8      	; 0x26be <menu_screen+0x56>
	page = 0;
    26b6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <page.2770>
	menuItem = 0;
    26ba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
}
GLCD_Clear();
    26be:	0e 94 05 19 	call	0x320a	; 0x320a <GLCD_Clear>
//GLCD_FillRectangle(122,0+menuItem*8-1+8,127,7+menuItem*8+8,GLCD_Black);
//GLCD_DrawLine(0,menuItem*8-2+8,127,menuItem*8-2+8,GLCD_Black);
//GLCD_DrawLine(0,menuItem*8+8+8,127,menuItem*8+8+8,GLCD_Black);
//GLCD_InvertRect(0,menuItem*8-2+8,127,menuItem*8-2+16);

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Merge);
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	48 e0       	ldi	r20, 0x08	; 8
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	80 e8       	ldi	r24, 0x80	; 128
    26ca:	9b e0       	ldi	r25, 0x0B	; 11
    26cc:	0e 94 e5 19 	call	0x33ca	; 0x33ca <GLCD_SetFont>
if(page==0){
    26d0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    26d4:	81 11       	cpse	r24, r1
    26d6:	81 c0       	rjmp	.+258    	; 0x27da <menu_screen+0x172>
GLCD_GotoX(10);	
    26d8:	8a e0       	ldi	r24, 0x0A	; 10
    26da:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_GotoLine(1);
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
GLCD_PrintString("Dial_PWM");
    26e4:	8b e9       	ldi	r24, 0x9B	; 155
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
GLCD_GotoX(offset);
    26ec:	8b e4       	ldi	r24, 0x4B	; 75
    26ee:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_PrintInteger(pwmDial);
    26f2:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <pwmDial>
    26f6:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <pwmDial+0x1>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>

GLCD_GotoX(10);
    2702:	8a e0       	ldi	r24, 0x0A	; 10
    2704:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_GotoLine(2);
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
GLCD_PrintString("Arr_PWM");
    270e:	84 ea       	ldi	r24, 0xA4	; 164
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
GLCD_GotoX(offset);
    2716:	8b e4       	ldi	r24, 0x4B	; 75
    2718:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_PrintInteger(pwmArrow);
    271c:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <pwmArrow>
    2720:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <pwmArrow+0x1>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>

GLCD_GotoX(10);
    272c:	8a e0       	ldi	r24, 0x0A	; 10
    272e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_GotoLine(3);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
GLCD_PrintString("Weel D");	
    2738:	8c ea       	ldi	r24, 0xAC	; 172
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
GLCD_GotoX(offset);
    2740:	8b e4       	ldi	r24, 0x4B	; 75
    2742:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_PrintDouble(wheelDiameter,100);
    2746:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    274a:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    274e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2752:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2756:	24 e6       	ldi	r18, 0x64	; 100
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
	
GLCD_GotoX(10);
    2762:	8a e0       	ldi	r24, 0x0A	; 10
    2764:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_GotoLine(4);
    2768:	84 e0       	ldi	r24, 0x04	; 4
    276a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
GLCD_PrintString("Ratio");	
    276e:	83 eb       	ldi	r24, 0xB3	; 179
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
GLCD_GotoX(offset);
    2776:	8b e4       	ldi	r24, 0x4B	; 75
    2778:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_PrintDouble(gearRatio,100);
    277c:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2780:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2784:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2788:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    278c:	24 e6       	ldi	r18, 0x64	; 100
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>

GLCD_GotoX(10);
    2798:	8a e0       	ldi	r24, 0x0A	; 10
    279a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_GotoLine(5);
    279e:	85 e0       	ldi	r24, 0x05	; 5
    27a0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
GLCD_PrintString("Magnets");
    27a4:	89 eb       	ldi	r24, 0xB9	; 185
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
GLCD_GotoX(offset);
    27ac:	8b e4       	ldi	r24, 0x4B	; 75
    27ae:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_PrintInteger(magnetsOnWheel);
    27b2:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>

GLCD_GotoX(10);
    27c0:	8a e0       	ldi	r24, 0x0A	; 10
    27c2:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
GLCD_GotoLine(6);
    27c6:	86 e0       	ldi	r24, 0x06	; 6
    27c8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
GLCD_PrintString("Sdown V");
    27cc:	81 ec       	ldi	r24, 0xC1	; 193
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
GLCD_GotoX(offset);
    27d4:	8b e4       	ldi	r24, 0x4B	; 75
    27d6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
//GLCD_PrintDouble(shutDownVoltageX10/10.0,10);

}

if (page==1){
    27da:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <menu_screen+0x17c>
    27e2:	65 c0       	rjmp	.+202    	; 0x28ae <menu_screen+0x246>
	
	GLCD_GotoX(10);
    27e4:	8a e0       	ldi	r24, 0x0A	; 10
    27e6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoLine(1);
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
	GLCD_PrintString("Max speed");
    27f0:	89 ec       	ldi	r24, 0xC9	; 201
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
	GLCD_GotoX(offset);
    27f8:	8b e4       	ldi	r24, 0x4B	; 75
    27fa:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_PrintInteger(scaleMax);
    27fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <scaleMax>
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
	
	GLCD_GotoX(10);
    280c:	8a e0       	ldi	r24, 0x0A	; 10
    280e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoLine(2);
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
	GLCD_PrintString("Deg/kmh");
    2818:	83 ed       	ldi	r24, 0xD3	; 211
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
	GLCD_GotoX(offset);
    2820:	8b e4       	ldi	r24, 0x4B	; 75
    2822:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_PrintDouble(degreesPerKmh,1000);
    2826:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    282a:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    282e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    2832:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2836:	28 ee       	ldi	r18, 0xE8	; 232
    2838:	33 e0       	ldi	r19, 0x03	; 3
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <GLCD_PrintDouble>
	
	GLCD_GotoX(10);
    2842:	8a e0       	ldi	r24, 0x0A	; 10
    2844:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoLine(3);
    2848:	83 e0       	ldi	r24, 0x03	; 3
    284a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
	GLCD_PrintString("SM steps");
    284e:	8b ed       	ldi	r24, 0xDB	; 219
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
	GLCD_GotoX(offset);
    2856:	8b e4       	ldi	r24, 0x4B	; 75
    2858:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_PrintInteger(smSteps);
    285c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    2860:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
	
	GLCD_GotoX(10);
    286c:	8a e0       	ldi	r24, 0x0A	; 10
    286e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoLine(4);
    2872:	84 e0       	ldi	r24, 0x04	; 4
    2874:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
	GLCD_PrintString("steps");
    2878:	8e ed       	ldi	r24, 0xDE	; 222
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
	GLCD_GotoX(offset);
    2880:	8b e4       	ldi	r24, 0x4B	; 75
    2882:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_PrintInteger(stepInterval);
    2886:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <stepInterval>
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
	
		GLCD_GotoX(10);
    2894:	8a e0       	ldi	r24, 0x0A	; 10
    2896:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
		GLCD_GotoLine(5);
    289a:	85 e0       	ldi	r24, 0x05	; 5
    289c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
		GLCD_PrintString("Calibrate");
    28a0:	84 ee       	ldi	r24, 0xE4	; 228
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
		GLCD_GotoX(offset);
    28a8:	8b e4       	ldi	r24, 0x4B	; 75
    28aa:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	
}
if (page==2){
    28ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <page.2770>
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	a1 f4       	brne	.+40     	; 0x28de <menu_screen+0x276>
	GLCD_GotoX(10);
    28b6:	8a e0       	ldi	r24, 0x0A	; 10
    28b8:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoLine(1);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
	GLCD_PrintString("odometer reset");
    28c2:	8e ee       	ldi	r24, 0xEE	; 238
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
	
	GLCD_GotoX(10);
    28ca:	8a e0       	ldi	r24, 0x0A	; 10
    28cc:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoLine(2);
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <GLCD_GotoLine>
	GLCD_PrintString("load defaults");
    28d6:	8d ef       	ldi	r24, 0xFD	; 253
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
}

GLCD_InvertRect(0,menuItem*8-2+9,127,menuItem*8-2+17);
    28de:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
    28e2:	66 0f       	add	r22, r22
    28e4:	66 0f       	add	r22, r22
    28e6:	66 0f       	add	r22, r22
    28e8:	2f e0       	ldi	r18, 0x0F	; 15
    28ea:	26 0f       	add	r18, r22
    28ec:	69 5f       	subi	r22, 0xF9	; 249
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	0e 94 0e 19 	call	0x321c	; 0x321c <GLCD_InvertRect>
GLCD_Render();
    28f6:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GLCD_Render>


while(1){
		uint8_t currentButton = button_monitor();
    28fa:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <button_monitor>
		if(currentButton){
    28fe:	88 23       	and	r24, r24
    2900:	e1 f3       	breq	.-8      	; 0x28fa <menu_screen+0x292>
			if ((currentButton == 1)&&(menuItem == 0)){
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	79 f4       	brne	.+30     	; 0x2924 <menu_screen+0x2bc>
    2906:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    290a:	81 11       	cpse	r24, r1
    290c:	1a c0       	rjmp	.+52     	; 0x2942 <menu_screen+0x2da>
				
				pwmDial=set_value(12345,0,1234,2,"Dial PWM");
    290e:	0b e0       	ldi	r16, 0x0B	; 11
    2910:	11 e0       	ldi	r17, 0x01	; 1
    2912:	22 e0       	ldi	r18, 0x02	; 2
    2914:	42 ed       	ldi	r20, 0xD2	; 210
    2916:	54 e0       	ldi	r21, 0x04	; 4
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	89 e3       	ldi	r24, 0x39	; 57
    291e:	90 e3       	ldi	r25, 0x30	; 48
    2920:	0e 94 33 11 	call	0x2266	; 0x2266 <set_value>
// 				GLCD_PrintInteger(tempVar);
// 				GLCD_Render();
// 				_delay_ms(200);
			}
			
			if(currentButton == 2)	menuItem++;
    2924:	82 30       	cpi	r24, 0x02	; 2
    2926:	31 f4       	brne	.+12     	; 0x2934 <menu_screen+0x2cc>
    2928:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <menu_screen+0x2da>
					
			if(currentButton == 3)	menuItem--;
    2934:	83 30       	cpi	r24, 0x03	; 3
    2936:	29 f4       	brne	.+10     	; 0x2942 <menu_screen+0x2da>
    2938:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
							
		while (button_monitor());
    2942:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <button_monitor>
    2946:	81 11       	cpse	r24, r1
    2948:	fc cf       	rjmp	.-8      	; 0x2942 <menu_screen+0x2da>
		menu_screen();
    294a:	0e 94 34 13 	call	0x2668	; 0x2668 <menu_screen>

0000294e <main>:
}


int main(void)
{
	presets();
    294e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <presets>
	
	while(1){
		data_monitor();
    2952:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <data_monitor>
		calculate_speed();
    2956:	0e 94 a9 10 	call	0x2152	; 0x2152 <calculate_speed>
		speed_arrow_update();
    295a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <speed_arrow_update>
		signal_monitor();
    295e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <signal_monitor>
		if(button_monitor()) menu_screen();
    2962:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <button_monitor>
    2966:	88 23       	and	r24, r24
    2968:	a1 f3       	breq	.-24     	; 0x2952 <main+0x4>
    296a:	0e 94 34 13 	call	0x2668	; 0x2668 <menu_screen>

0000296e <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    296e:	66 95       	lsr	r22
    2970:	66 95       	lsr	r22
    2972:	66 95       	lsr	r22
    2974:	90 e8       	ldi	r25, 0x80	; 128
    2976:	69 9f       	mul	r22, r25
    2978:	b0 01       	movw	r22, r0
    297a:	11 24       	eor	r1, r1
    297c:	68 0f       	add	r22, r24
    297e:	71 1d       	adc	r23, r1
    2980:	fb 01       	movw	r30, r22
    2982:	e4 5a       	subi	r30, 0xA4	; 164
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	40 83       	st	Z, r20
    2988:	08 95       	ret

0000298a <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    298a:	66 95       	lsr	r22
    298c:	66 95       	lsr	r22
    298e:	66 95       	lsr	r22
    2990:	90 e8       	ldi	r25, 0x80	; 128
    2992:	69 9f       	mul	r22, r25
    2994:	b0 01       	movw	r22, r0
    2996:	11 24       	eor	r1, r1
    2998:	68 0f       	add	r22, r24
    299a:	71 1d       	adc	r23, r1
    299c:	fb 01       	movw	r30, r22
    299e:	e4 5a       	subi	r30, 0xA4	; 164
    29a0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    29a2:	80 81       	ld	r24, Z
    29a4:	08 95       	ret

000029a6 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	c8 2f       	mov	r28, r24
    29b2:	06 2f       	mov	r16, r22
    29b4:	17 2f       	mov	r17, r23
    29b6:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    29b8:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    29bc:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    29c0:	88 30       	cpi	r24, 0x08	; 8
    29c2:	31 f0       	breq	.+12     	; 0x29d0 <GLCD_Send+0x2a>
    29c4:	80 31       	cpi	r24, 0x10	; 16
    29c6:	21 f0       	breq	.+8      	; 0x29d0 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__GLCD>
				break;
    29ce:	33 c0       	rjmp	.+102    	; 0x2a36 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    29d0:	88 e7       	ldi	r24, 0x78	; 120
    29d2:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    29d6:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    29da:	88 31       	cpi	r24, 0x18	; 24
    29dc:	31 f0       	breq	.+12     	; 0x29ea <GLCD_Send+0x44>
    29de:	80 32       	cpi	r24, 0x20	; 32
    29e0:	21 f0       	breq	.+8      	; 0x29ea <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__GLCD>
				break;
    29e8:	26 c0       	rjmp	.+76     	; 0x2a36 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    29ea:	8c 2f       	mov	r24, r28
    29ec:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    29f0:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    29f4:	88 32       	cpi	r24, 0x28	; 40
    29f6:	19 f4       	brne	.+6      	; 0x29fe <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    29f8:	f1 10       	cpse	r15, r1
    29fa:	07 c0       	rjmp	.+14     	; 0x2a0a <GLCD_Send+0x64>
    29fc:	1a c0       	rjmp	.+52     	; 0x2a32 <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    29fe:	80 33       	cpi	r24, 0x30	; 48
    2a00:	d9 f3       	breq	.-10     	; 0x29f8 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__GLCD>
				break;
    2a08:	16 c0       	rjmp	.+44     	; 0x2a36 <GLCD_Send+0x90>
    2a0a:	c0 2f       	mov	r28, r16
    2a0c:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    2a0e:	8e 01       	movw	r16, r28
    2a10:	0f 5f       	subi	r16, 0xFF	; 255
    2a12:	1f 4f       	sbci	r17, 0xFF	; 255
    2a14:	fa 94       	dec	r15
    2a16:	0f 0d       	add	r16, r15
    2a18:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    2a1a:	89 91       	ld	r24, Y+
    2a1c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    2a20:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    2a24:	88 32       	cpi	r24, 0x28	; 40
    2a26:	11 f0       	breq	.+4      	; 0x2a2c <GLCD_Send+0x86>
    2a28:	80 33       	cpi	r24, 0x30	; 48
    2a2a:	19 f4       	brne	.+6      	; 0x2a32 <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    2a2c:	c0 17       	cp	r28, r16
    2a2e:	d1 07       	cpc	r29, r17
    2a30:	a1 f7       	brne	.-24     	; 0x2a1a <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    2a32:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    2a36:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <TWI_EndTransmission>
}
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	08 95       	ret

00002a46 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	1f 92       	push	r1
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	be 01       	movw	r22, r28
    2a56:	6f 5f       	subi	r22, 0xFF	; 255
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <GLCD_Send>
}
    2a60:	0f 90       	pop	r0
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    2a6c:	81 e2       	ldi	r24, 0x21	; 33
    2a6e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    2a78:	8f e7       	ldi	r24, 0x7F	; 127
    2a7a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    2a7e:	82 e2       	ldi	r24, 0x22	; 34
    2a80:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    2a8a:	87 e0       	ldi	r24, 0x07	; 7
    2a8c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
    2a90:	c0 e0       	ldi	r28, 0x00	; 0
    2a92:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    2a94:	be 01       	movw	r22, r28
    2a96:	62 95       	swap	r22
    2a98:	72 95       	swap	r23
    2a9a:	70 7f       	andi	r23, 0xF0	; 240
    2a9c:	76 27       	eor	r23, r22
    2a9e:	60 7f       	andi	r22, 0xF0	; 240
    2aa0:	76 27       	eor	r23, r22
    2aa2:	64 5a       	subi	r22, 0xA4	; 164
    2aa4:	7e 4f       	sbci	r23, 0xFE	; 254
    2aa6:	40 e1       	ldi	r20, 0x10	; 16
    2aa8:	80 e4       	ldi	r24, 0x40	; 64
    2aaa:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <GLCD_Send>
    2aae:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    2ab0:	c0 34       	cpi	r28, 0x40	; 64
    2ab2:	d1 05       	cpc	r29, r1
    2ab4:	79 f7       	brne	.-34     	; 0x2a94 <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	08 95       	ret

00002abc <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    2abc:	cf 93       	push	r28
    2abe:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    2ac0:	81 e8       	ldi	r24, 0x81	; 129
    2ac2:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    2ac6:	8c 2f       	mov	r24, r28
    2ac8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
}
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    2ad0:	88 23       	and	r24, r24
    2ad2:	14 f0       	brlt	.+4      	; 0x2ad8 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    2ad4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__GLCD+0x1>
    2ad8:	08 95       	ret

00002ada <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    2ada:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__GLCD+0x2>
    2ade:	90 34       	cpi	r25, 0x40	; 64
    2ae0:	10 f4       	brcc	.+4      	; 0x2ae6 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    2ae2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__GLCD+0x2>
    2ae6:	08 95       	ret

00002ae8 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    2ae8:	cf 93       	push	r28
    2aea:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    2aec:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <GLCD_GotoX>
	GLCD_GotoY(Y);
    2af0:	8c 2f       	mov	r24, r28
    2af2:	0e 94 6d 15 	call	0x2ada	; 0x2ada <GLCD_GotoY>
}
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    2afa:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    2afe:	8e ea       	ldi	r24, 0xAE	; 174
    2b00:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    2b04:	85 ed       	ldi	r24, 0xD5	; 213
    2b06:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    2b0a:	80 ef       	ldi	r24, 0xF0	; 240
    2b0c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    2b10:	88 ea       	ldi	r24, 0xA8	; 168
    2b12:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    2b16:	8f e3       	ldi	r24, 0x3F	; 63
    2b18:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    2b1c:	83 ed       	ldi	r24, 0xD3	; 211
    2b1e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    2b28:	8d e8       	ldi	r24, 0x8D	; 141
    2b2a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    2b2e:	84 e1       	ldi	r24, 0x14	; 20
    2b30:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    2b34:	80 e4       	ldi	r24, 0x40	; 64
    2b36:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    2b3a:	80 e2       	ldi	r24, 0x20	; 32
    2b3c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    2b46:	81 ea       	ldi	r24, 0xA1	; 161
    2b48:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    2b4c:	88 ec       	ldi	r24, 0xC8	; 200
    2b4e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    2b52:	8a ed       	ldi	r24, 0xDA	; 218
    2b54:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    2b58:	82 e1       	ldi	r24, 0x12	; 18
    2b5a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    2b5e:	81 e8       	ldi	r24, 0x81	; 129
    2b60:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    2b64:	8f ef       	ldi	r24, 0xFF	; 255
    2b66:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    2b6a:	89 ed       	ldi	r24, 0xD9	; 217
    2b6c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    2b70:	81 ef       	ldi	r24, 0xF1	; 241
    2b72:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    2b76:	8b ed       	ldi	r24, 0xDB	; 219
    2b78:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    2b7c:	80 e2       	ldi	r24, 0x20	; 32
    2b7e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    2b82:	84 ea       	ldi	r24, 0xA4	; 164
    2b84:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    2b88:	86 ea       	ldi	r24, 0xA6	; 166
    2b8a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    2b8e:	8e e2       	ldi	r24, 0x2E	; 46
    2b90:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    2b94:	8f ea       	ldi	r24, 0xAF	; 175
    2b96:	0e 94 23 15 	call	0x2a46	; 0x2a46 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    2ba2:	86 ea       	ldi	r24, 0xA6	; 166
    2ba4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    2ba8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__GLCD+0x8>
    2bac:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__GLCD+0x7>
    2bb0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__GLCD+0x6>
    2bb4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__GLCD+0x2>
    2bb8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__GLCD+0x1>
    2bbc:	08 95       	ret

00002bbe <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    2bbe:	88 30       	cpi	r24, 0x08	; 8
    2bc0:	28 f4       	brcc	.+10     	; 0x2bcc <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    2bc2:	88 0f       	add	r24, r24
    2bc4:	88 0f       	add	r24, r24
    2bc6:	88 0f       	add	r24, r24
    2bc8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__GLCD+0x2>
    2bcc:	08 95       	ret

00002bce <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    2bce:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__GLCD+0x1>
    2bd2:	08 95       	ret

00002bd4 <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	06 2f       	mov	r16, r22
    2bee:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    2bf0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2bf4:	d0 91 54 01 	lds	r29, 0x0154	; 0x800154 <__GLCD+0x2>
    2bf8:	c0 91 53 01 	lds	r28, 0x0153	; 0x800153 <__GLCD+0x1>
    2bfc:	6d 2f       	mov	r22, r29
    2bfe:	8c 2f       	mov	r24, r28
    2c00:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    2c04:	1f 3f       	cpi	r17, 0xFF	; 255
    2c06:	91 f4       	brne	.+36     	; 0x2c2c <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    2c08:	90 2f       	mov	r25, r16
    2c0a:	97 70       	andi	r25, 0x07	; 7
    2c0c:	81 2c       	mov	r8, r1
    2c0e:	91 2c       	mov	r9, r1
    2c10:	54 01       	movw	r10, r8
    2c12:	83 94       	inc	r8
    2c14:	75 01       	movw	r14, r10
    2c16:	64 01       	movw	r12, r8
    2c18:	04 c0       	rjmp	.+8      	; 0x2c22 <GLCD_SetPixel+0x4e>
    2c1a:	cc 0c       	add	r12, r12
    2c1c:	dd 1c       	adc	r13, r13
    2c1e:	ee 1c       	adc	r14, r14
    2c20:	ff 1c       	adc	r15, r15
    2c22:	9a 95       	dec	r25
    2c24:	d2 f7       	brpl	.-12     	; 0x2c1a <GLCD_SetPixel+0x46>
    2c26:	48 2f       	mov	r20, r24
    2c28:	4c 29       	or	r20, r12
    2c2a:	13 c0       	rjmp	.+38     	; 0x2c52 <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    2c2c:	07 70       	andi	r16, 0x07	; 7
    2c2e:	c1 2c       	mov	r12, r1
    2c30:	d1 2c       	mov	r13, r1
    2c32:	76 01       	movw	r14, r12
    2c34:	c3 94       	inc	r12
    2c36:	b7 01       	movw	r22, r14
    2c38:	a6 01       	movw	r20, r12
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <GLCD_SetPixel+0x70>
    2c3c:	44 0f       	add	r20, r20
    2c3e:	55 1f       	adc	r21, r21
    2c40:	66 1f       	adc	r22, r22
    2c42:	77 1f       	adc	r23, r23
    2c44:	0a 95       	dec	r16
    2c46:	d2 f7       	brpl	.-12     	; 0x2c3c <GLCD_SetPixel+0x68>
    2c48:	8a 01       	movw	r16, r20
    2c4a:	9b 01       	movw	r18, r22
    2c4c:	00 95       	com	r16
    2c4e:	48 2f       	mov	r20, r24
    2c50:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    2c52:	6d 2f       	mov	r22, r29
    2c54:	8c 2f       	mov	r24, r28
    2c56:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
}
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	df 90       	pop	r13
    2c68:	cf 90       	pop	r12
    2c6a:	bf 90       	pop	r11
    2c6c:	af 90       	pop	r10
    2c6e:	9f 90       	pop	r9
    2c70:	8f 90       	pop	r8
    2c72:	08 95       	ret

00002c74 <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2c74:	3f 92       	push	r3
    2c76:	4f 92       	push	r4
    2c78:	5f 92       	push	r5
    2c7a:	6f 92       	push	r6
    2c7c:	7f 92       	push	r7
    2c7e:	8f 92       	push	r8
    2c80:	9f 92       	push	r9
    2c82:	af 92       	push	r10
    2c84:	bf 92       	push	r11
    2c86:	cf 92       	push	r12
    2c88:	df 92       	push	r13
    2c8a:	ef 92       	push	r14
    2c8c:	ff 92       	push	r15
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2c98:	88 23       	and	r24, r24
    2c9a:	0c f4       	brge	.+2      	; 0x2c9e <GLCD_SetPixels+0x2a>
    2c9c:	c6 c0       	rjmp	.+396    	; 0x2e2a <GLCD_SetPixels+0x1b6>
    2c9e:	44 23       	and	r20, r20
    2ca0:	0c f4       	brge	.+2      	; 0x2ca4 <GLCD_SetPixels+0x30>
    2ca2:	c3 c0       	rjmp	.+390    	; 0x2e2a <GLCD_SetPixels+0x1b6>
    2ca4:	60 34       	cpi	r22, 0x40	; 64
    2ca6:	08 f0       	brcs	.+2      	; 0x2caa <GLCD_SetPixels+0x36>
    2ca8:	c0 c0       	rjmp	.+384    	; 0x2e2a <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    2caa:	20 34       	cpi	r18, 0x40	; 64
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <GLCD_SetPixels+0x3c>
    2cae:	bd c0       	rjmp	.+378    	; 0x2e2a <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    2cb0:	11 e0       	ldi	r17, 0x01	; 1
    2cb2:	81 2e       	mov	r8, r17
    2cb4:	86 1a       	sub	r8, r22
    2cb6:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    2cb8:	18 1b       	sub	r17, r24
    2cba:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    2cbc:	46 2f       	mov	r20, r22
    2cbe:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    2cc0:	76 2e       	mov	r7, r22
    2cc2:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    2cc4:	e8 2c       	mov	r14, r8
    2cc6:	f1 2c       	mov	r15, r1
    2cc8:	88 e0       	ldi	r24, 0x08	; 8
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	84 1b       	sub	r24, r20
    2cce:	91 09       	sbc	r25, r1
    2cd0:	e8 16       	cp	r14, r24
    2cd2:	f9 06       	cpc	r15, r25
    2cd4:	7c f4       	brge	.+30     	; 0x2cf4 <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    2cd6:	88 e0       	ldi	r24, 0x08	; 8
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	8e 19       	sub	r24, r14
    2cdc:	9f 09       	sbc	r25, r15
    2cde:	2f ef       	ldi	r18, 0xFF	; 255
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	59 01       	movw	r10, r18
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <GLCD_SetPixels+0x76>
    2ce6:	b5 94       	asr	r11
    2ce8:	a7 94       	ror	r10
    2cea:	8a 95       	dec	r24
    2cec:	e2 f7       	brpl	.-8      	; 0x2ce6 <GLCD_SetPixels+0x72>
    2cee:	8a 2d       	mov	r24, r10
			h = height;
    2cf0:	68 2c       	mov	r6, r8
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    2cf4:	88 e0       	ldi	r24, 0x08	; 8
    2cf6:	68 2e       	mov	r6, r24
    2cf8:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    2cfa:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    2cfc:	a8 2e       	mov	r10, r24
    2cfe:	b1 2c       	mov	r11, r1
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <GLCD_SetPixels+0x92>
    2d02:	aa 0c       	add	r10, r10
    2d04:	bb 1c       	adc	r11, r11
    2d06:	4a 95       	dec	r20
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <GLCD_SetPixels+0x8e>
    2d0a:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    2d0c:	67 2d       	mov	r22, r7
    2d0e:	89 2d       	mov	r24, r9
    2d10:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    2d14:	11 23       	and	r17, r17
    2d16:	c9 f1       	breq	.+114    	; 0x2d8a <GLCD_SetPixels+0x116>
    2d18:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2d1a:	0f 2e       	mov	r0, r31
    2d1c:	f4 e5       	ldi	r31, 0x54	; 84
    2d1e:	cf 2e       	mov	r12, r31
    2d20:	f1 e0       	ldi	r31, 0x01	; 1
    2d22:	df 2e       	mov	r13, r31
    2d24:	f0 2d       	mov	r31, r0
    2d26:	c3 e5       	ldi	r28, 0x53	; 83
    2d28:	d1 e0       	ldi	r29, 0x01	; 1
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2d2a:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2d2c:	f6 01       	movw	r30, r12
    2d2e:	40 80       	ld	r4, Z
    2d30:	b8 80       	ld	r11, Y
    2d32:	64 2d       	mov	r22, r4
    2d34:	8b 2d       	mov	r24, r11
    2d36:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2d3a:	0f 3f       	cpi	r16, 0xFF	; 255
    2d3c:	19 f4       	brne	.+6      	; 0x2d44 <GLCD_SetPixels+0xd0>
    2d3e:	48 2f       	mov	r20, r24
    2d40:	43 29       	or	r20, r3
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <GLCD_SetPixels+0xd4>
    2d44:	48 2f       	mov	r20, r24
    2d46:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2d48:	9b 2d       	mov	r25, r11
    2d4a:	9f 5f       	subi	r25, 0xFF	; 255
    2d4c:	98 83       	st	Y, r25
    2d4e:	64 2d       	mov	r22, r4
    2d50:	8b 2d       	mov	r24, r11
    2d52:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    2d56:	53 94       	inc	r5
    2d58:	51 12       	cpse	r5, r17
    2d5a:	e8 cf       	rjmp	.-48     	; 0x2d2c <GLCD_SetPixels+0xb8>
    2d5c:	16 c0       	rjmp	.+44     	; 0x2d8a <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    2d5e:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    2d60:	6c 2f       	mov	r22, r28
    2d62:	89 2d       	mov	r24, r9
    2d64:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    2d68:	11 23       	and	r17, r17
    2d6a:	f1 f0       	breq	.+60     	; 0x2da8 <GLCD_SetPixels+0x134>
    2d6c:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    2d6e:	f6 01       	movw	r30, r12
    2d70:	60 81       	ld	r22, Z
    2d72:	f2 01       	movw	r30, r4
    2d74:	80 81       	ld	r24, Z
    2d76:	98 2f       	mov	r25, r24
    2d78:	9f 5f       	subi	r25, 0xFF	; 255
    2d7a:	90 83       	st	Z, r25
    2d7c:	40 2f       	mov	r20, r16
    2d7e:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    2d82:	73 94       	inc	r7
    2d84:	71 16       	cp	r7, r17
    2d86:	81 f0       	breq	.+32     	; 0x2da8 <GLCD_SetPixels+0x134>
    2d88:	f2 cf       	rjmp	.-28     	; 0x2d6e <GLCD_SetPixels+0xfa>
    2d8a:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    2d8c:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    2d8e:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    2d90:	0f 2e       	mov	r0, r31
    2d92:	f4 e5       	ldi	r31, 0x54	; 84
    2d94:	cf 2e       	mov	r12, r31
    2d96:	f1 e0       	ldi	r31, 0x01	; 1
    2d98:	df 2e       	mov	r13, r31
    2d9a:	f0 2d       	mov	r31, r0
    2d9c:	0f 2e       	mov	r0, r31
    2d9e:	f3 e5       	ldi	r31, 0x53	; 83
    2da0:	4f 2e       	mov	r4, r31
    2da2:	f1 e0       	ldi	r31, 0x01	; 1
    2da4:	5f 2e       	mov	r5, r31
    2da6:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    2da8:	26 2d       	mov	r18, r6
    2daa:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    2dac:	e2 2f       	mov	r30, r18
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	cf 01       	movw	r24, r30
    2db2:	08 96       	adiw	r24, 0x08	; 8
    2db4:	e8 16       	cp	r14, r24
    2db6:	f9 06       	cpc	r15, r25
    2db8:	94 f6       	brge	.-92     	; 0x2d5e <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    2dba:	28 15       	cp	r18, r8
    2dbc:	b0 f5       	brcc	.+108    	; 0x2e2a <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    2dbe:	ee 1a       	sub	r14, r30
    2dc0:	ff 0a       	sbc	r15, r31
    2dc2:	8f ef       	ldi	r24, 0xFF	; 255
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9c 01       	movw	r18, r24
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <GLCD_SetPixels+0x15a>
    2dca:	22 0f       	add	r18, r18
    2dcc:	33 1f       	adc	r19, r19
    2dce:	ea 94       	dec	r14
    2dd0:	e2 f7       	brpl	.-8      	; 0x2dca <GLCD_SetPixels+0x156>
    2dd2:	79 01       	movw	r14, r18
    2dd4:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    2dd6:	6c 2f       	mov	r22, r28
    2dd8:	68 5f       	subi	r22, 0xF8	; 248
    2dda:	89 2d       	mov	r24, r9
    2ddc:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    2de0:	11 23       	and	r17, r17
    2de2:	19 f1       	breq	.+70     	; 0x2e2a <GLCD_SetPixels+0x1b6>
    2de4:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2de6:	0f 2e       	mov	r0, r31
    2de8:	f4 e5       	ldi	r31, 0x54	; 84
    2dea:	cf 2e       	mov	r12, r31
    2dec:	f1 e0       	ldi	r31, 0x01	; 1
    2dee:	df 2e       	mov	r13, r31
    2df0:	f0 2d       	mov	r31, r0
    2df2:	c3 e5       	ldi	r28, 0x53	; 83
    2df4:	d1 e0       	ldi	r29, 0x01	; 1
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2df6:	9e 2c       	mov	r9, r14
    2df8:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2dfa:	f6 01       	movw	r30, r12
    2dfc:	a0 80       	ld	r10, Z
    2dfe:	f8 80       	ld	r15, Y
    2e00:	6a 2d       	mov	r22, r10
    2e02:	8f 2d       	mov	r24, r15
    2e04:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2e08:	0f 3f       	cpi	r16, 0xFF	; 255
    2e0a:	19 f4       	brne	.+6      	; 0x2e12 <GLCD_SetPixels+0x19e>
    2e0c:	48 2f       	mov	r20, r24
    2e0e:	4e 29       	or	r20, r14
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <GLCD_SetPixels+0x1a2>
    2e12:	48 2f       	mov	r20, r24
    2e14:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2e16:	9f 2d       	mov	r25, r15
    2e18:	9f 5f       	subi	r25, 0xFF	; 255
    2e1a:	98 83       	st	Y, r25
    2e1c:	6a 2d       	mov	r22, r10
    2e1e:	8f 2d       	mov	r24, r15
    2e20:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    2e24:	b3 94       	inc	r11
    2e26:	b1 12       	cpse	r11, r17
    2e28:	e8 cf       	rjmp	.-48     	; 0x2dfa <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	7f 90       	pop	r7
    2e44:	6f 90       	pop	r6
    2e46:	5f 90       	pop	r5
    2e48:	4f 90       	pop	r4
    2e4a:	3f 90       	pop	r3
    2e4c:	08 95       	ret

00002e4e <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    2e4e:	2f 92       	push	r2
    2e50:	3f 92       	push	r3
    2e52:	4f 92       	push	r4
    2e54:	5f 92       	push	r5
    2e56:	6f 92       	push	r6
    2e58:	7f 92       	push	r7
    2e5a:	8f 92       	push	r8
    2e5c:	9f 92       	push	r9
    2e5e:	af 92       	push	r10
    2e60:	bf 92       	push	r11
    2e62:	cf 92       	push	r12
    2e64:	df 92       	push	r13
    2e66:	ef 92       	push	r14
    2e68:	ff 92       	push	r15
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	2c 97       	sbiw	r28, 0x0c	; 12
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	5c 01       	movw	r10, r24
    2e84:	66 2e       	mov	r6, r22
    2e86:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    2e88:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <__GLCD+0x1>
    2e8c:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    2e8e:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <__GLCD+0x2>
    2e92:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    2e94:	82 2f       	mov	r24, r18
    2e96:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    2e98:	1a f4       	brpl	.+6      	; 0x2ea0 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    2e9a:	80 e8       	ldi	r24, 0x80	; 128
    2e9c:	68 2e       	mov	r6, r24
    2e9e:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    2ea0:	84 2f       	mov	r24, r20
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	07 96       	adiw	r24, 0x07	; 7
    2ea6:	95 95       	asr	r25
    2ea8:	87 95       	ror	r24
    2eaa:	95 95       	asr	r25
    2eac:	87 95       	ror	r24
    2eae:	95 95       	asr	r25
    2eb0:	87 95       	ror	r24
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	96 95       	lsr	r25
    2eba:	96 95       	lsr	r25
    2ebc:	96 95       	lsr	r25
    2ebe:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    2ec0:	89 30       	cpi	r24, 0x09	; 9
    2ec2:	48 f0       	brcs	.+18     	; 0x2ed6 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    2ec4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec8:	28 5f       	subi	r18, 0xF8	; 248
    2eca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ecc:	a9 01       	movw	r20, r18
    2ece:	48 1b       	sub	r20, r24
    2ed0:	51 09       	sbc	r21, r1
    2ed2:	5e 83       	std	Y+6, r21	; 0x06
    2ed4:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    2ed6:	4a 84       	ldd	r4, Y+10	; 0x0a
    2ed8:	57 e0       	ldi	r21, 0x07	; 7
    2eda:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	89 2b       	or	r24, r25
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <GLCD_DrawBitmap+0x98>
    2ee4:	fa c0       	rjmp	.+500    	; 0x30da <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    2eea:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    2eec:	26 2c       	mov	r2, r6
    2eee:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2ef0:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2ef2:	88 e0       	ldi	r24, 0x08	; 8
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	e4 19       	sub	r30, r4
    2efa:	f1 09       	sbc	r31, r1
    2efc:	fb 83       	std	Y+3, r31	; 0x03
    2efe:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2f00:	0f 2e       	mov	r0, r31
    2f02:	f4 e5       	ldi	r31, 0x54	; 84
    2f04:	cf 2e       	mov	r12, r31
    2f06:	f1 e0       	ldi	r31, 0x01	; 1
    2f08:	df 2e       	mov	r13, r31
    2f0a:	f0 2d       	mov	r31, r0
    2f0c:	03 e5       	ldi	r16, 0x53	; 83
    2f0e:	11 e0       	ldi	r17, 0x01	; 1
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2f10:	6c 81       	ldd	r22, Y+4	; 0x04
    2f12:	8f 81       	ldd	r24, Y+7	; 0x07
    2f14:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    2f18:	39 86       	std	Y+9, r3	; 0x09
    2f1a:	28 86       	std	Y+8, r2	; 0x08
    2f1c:	72 9c       	mul	r7, r2
    2f1e:	c0 01       	movw	r24, r0
    2f20:	73 9c       	mul	r7, r3
    2f22:	90 0d       	add	r25, r0
    2f24:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    2f26:	7c 01       	movw	r14, r24
    2f28:	e2 18       	sub	r14, r2
    2f2a:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2f2c:	66 20       	and	r6, r6
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <GLCD_DrawBitmap+0xe4>
    2f30:	3c c0       	rjmp	.+120    	; 0x2faa <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    2f32:	9c 01       	movw	r18, r24
    2f34:	2a 0d       	add	r18, r10
    2f36:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2f38:	85 2c       	mov	r8, r5
    2f3a:	3c 87       	std	Y+12, r19	; 0x0c
    2f3c:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    2f3e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2f40:	fc 85       	ldd	r31, Y+12	; 0x0c
    2f42:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    2f44:	04 2c       	mov	r0, r4
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <GLCD_DrawBitmap+0xfc>
    2f48:	99 0c       	add	r9, r9
    2f4a:	0a 94       	dec	r0
    2f4c:	ea f7       	brpl	.-6      	; 0x2f48 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    2f4e:	77 20       	and	r7, r7
    2f50:	79 f0       	breq	.+30     	; 0x2f70 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    2f52:	f5 01       	movw	r30, r10
    2f54:	ee 0d       	add	r30, r14
    2f56:	ff 1d       	adc	r31, r15
    2f58:	2f ef       	ldi	r18, 0xFF	; 255
    2f5a:	e2 1a       	sub	r14, r18
    2f5c:	f2 0a       	sbc	r15, r18
    2f5e:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0a 80       	ldd	r0, Y+2	; 0x02
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <GLCD_DrawBitmap+0x11c>
    2f66:	95 95       	asr	r25
    2f68:	87 95       	ror	r24
    2f6a:	0a 94       	dec	r0
    2f6c:	e2 f7       	brpl	.-8      	; 0x2f66 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    2f6e:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    2f70:	39 81       	ldd	r19, Y+1	; 0x01
    2f72:	31 30       	cpi	r19, 0x01	; 1
    2f74:	39 f4       	brne	.+14     	; 0x2f84 <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2f76:	f6 01       	movw	r30, r12
    2f78:	60 81       	ld	r22, Z
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 81       	ld	r24, Z
    2f7e:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
    2f82:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2f84:	f6 01       	movw	r30, r12
    2f86:	60 81       	ld	r22, Z
    2f88:	f8 01       	movw	r30, r16
    2f8a:	80 81       	ld	r24, Z
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	9f 5f       	subi	r25, 0xFF	; 255
    2f90:	90 83       	st	Z, r25
    2f92:	49 2d       	mov	r20, r9
    2f94:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2f98:	83 94       	inc	r8
    2f9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f9e:	2f 5f       	subi	r18, 0xFF	; 255
    2fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa2:	3c 87       	std	Y+12, r19	; 0x0c
    2fa4:	2b 87       	std	Y+11, r18	; 0x0b
    2fa6:	86 10       	cpse	r8, r6
    2fa8:	ca cf       	rjmp	.-108    	; 0x2f3e <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2faa:	eb e5       	ldi	r30, 0x5B	; 91
    2fac:	f1 e0       	ldi	r31, 0x01	; 1
    2fae:	80 81       	ld	r24, Z
    2fb0:	88 23       	and	r24, r24
    2fb2:	41 f0       	breq	.+16     	; 0x2fc4 <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2fb4:	f6 01       	movw	r30, r12
    2fb6:	60 81       	ld	r22, Z
    2fb8:	f8 01       	movw	r30, r16
    2fba:	80 81       	ld	r24, Z
    2fbc:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
    2fc0:	48 2f       	mov	r20, r24
    2fc2:	01 c0       	rjmp	.+2      	; 0x2fc6 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    2fc4:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    2fc6:	f6 01       	movw	r30, r12
    2fc8:	60 81       	ld	r22, Z
    2fca:	f8 01       	movw	r30, r16
    2fcc:	80 81       	ld	r24, Z
    2fce:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    2fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd4:	f8 5f       	subi	r31, 0xF8	; 248
    2fd6:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    2fd8:	73 94       	inc	r7
    2fda:	87 2d       	mov	r24, r7
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	2d 81       	ldd	r18, Y+5	; 0x05
    2fe0:	3e 81       	ldd	r19, Y+6	; 0x06
    2fe2:	82 17       	cp	r24, r18
    2fe4:	93 07       	cpc	r25, r19
    2fe6:	08 f4       	brcc	.+2      	; 0x2fea <GLCD_DrawBitmap+0x19c>
    2fe8:	93 cf       	rjmp	.-218    	; 0x2f10 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    2fea:	22 30       	cpi	r18, 0x02	; 2
    2fec:	31 05       	cpc	r19, r1
    2fee:	08 f4       	brcc	.+2      	; 0x2ff2 <GLCD_DrawBitmap+0x1a4>
    2ff0:	74 c0       	rjmp	.+232    	; 0x30da <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2ff2:	6f 2f       	mov	r22, r31
    2ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff6:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    2ffa:	27 2d       	mov	r18, r7
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	21 50       	subi	r18, 0x01	; 1
    3000:	31 09       	sbc	r19, r1
    3002:	48 85       	ldd	r20, Y+8	; 0x08
    3004:	59 85       	ldd	r21, Y+9	; 0x09
    3006:	24 9f       	mul	r18, r20
    3008:	c0 01       	movw	r24, r0
    300a:	25 9f       	mul	r18, r21
    300c:	90 0d       	add	r25, r0
    300e:	34 9f       	mul	r19, r20
    3010:	90 0d       	add	r25, r0
    3012:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3014:	66 20       	and	r6, r6
    3016:	09 f4       	brne	.+2      	; 0x301a <GLCD_DrawBitmap+0x1cc>
    3018:	3e c0       	rjmp	.+124    	; 0x3096 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    301a:	45 01       	movw	r8, r10
    301c:	88 0e       	add	r8, r24
    301e:	99 1e       	adc	r9, r25
    3020:	65 01       	movw	r12, r10
    3022:	5f ef       	ldi	r21, 0xFF	; 255
    3024:	c5 1a       	sub	r12, r21
    3026:	d5 0a       	sbc	r13, r21
    3028:	6a 94       	dec	r6
    302a:	c6 0c       	add	r12, r6
    302c:	d1 1c       	adc	r13, r1
    302e:	c8 0e       	add	r12, r24
    3030:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3032:	0f 2e       	mov	r0, r31
    3034:	f4 e5       	ldi	r31, 0x54	; 84
    3036:	ef 2e       	mov	r14, r31
    3038:	f1 e0       	ldi	r31, 0x01	; 1
    303a:	ff 2e       	mov	r15, r31
    303c:	f0 2d       	mov	r31, r0
    303e:	03 e5       	ldi	r16, 0x53	; 83
    3040:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3042:	88 e0       	ldi	r24, 0x08	; 8
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	5c 01       	movw	r10, r24
    3048:	a4 18       	sub	r10, r4
    304a:	b1 08       	sbc	r11, r1
    304c:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    304e:	f7 01       	movw	r30, r14
    3050:	80 80       	ld	r8, Z
    3052:	f8 01       	movw	r30, r16
    3054:	90 80       	ld	r9, Z
    3056:	68 2d       	mov	r22, r8
    3058:	89 2d       	mov	r24, r9
    305a:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    305e:	f3 01       	movw	r30, r6
    3060:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	0a 2c       	mov	r0, r10
    3066:	02 c0       	rjmp	.+4      	; 0x306c <GLCD_DrawBitmap+0x21e>
    3068:	55 95       	asr	r21
    306a:	47 95       	ror	r20
    306c:	0a 94       	dec	r0
    306e:	e2 f7       	brpl	.-8      	; 0x3068 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3070:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3072:	f9 81       	ldd	r31, Y+1	; 0x01
    3074:	f1 30       	cpi	r31, 0x01	; 1
    3076:	09 f4       	brne	.+2      	; 0x307a <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3078:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    307a:	89 2d       	mov	r24, r9
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	f8 01       	movw	r30, r16
    3080:	80 83       	st	Z, r24
    3082:	68 2d       	mov	r22, r8
    3084:	89 2d       	mov	r24, r9
    3086:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
    308a:	ff ef       	ldi	r31, 0xFF	; 255
    308c:	6f 1a       	sub	r6, r31
    308e:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3090:	6c 14       	cp	r6, r12
    3092:	7d 04       	cpc	r7, r13
    3094:	e1 f6       	brne	.-72     	; 0x304e <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3096:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <__GLCD+0x9>
    309a:	88 23       	and	r24, r24
    309c:	99 f0       	breq	.+38     	; 0x30c4 <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    309e:	81 30       	cpi	r24, 0x01	; 1
    30a0:	41 f4       	brne	.+16     	; 0x30b2 <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    30a2:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__GLCD+0x2>
    30a6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__GLCD+0x1>
    30aa:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
    30ae:	48 2f       	mov	r20, r24
    30b0:	0a c0       	rjmp	.+20     	; 0x30c6 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    30b2:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__GLCD+0x2>
    30b6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__GLCD+0x1>
    30ba:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
    30be:	48 2f       	mov	r20, r24
    30c0:	40 95       	com	r20
    30c2:	01 c0       	rjmp	.+2      	; 0x30c6 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    30c4:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    30c6:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__GLCD+0x2>
    30ca:	e3 e5       	ldi	r30, 0x53	; 83
    30cc:	f1 e0       	ldi	r31, 0x01	; 1
    30ce:	80 81       	ld	r24, Z
    30d0:	98 2f       	mov	r25, r24
    30d2:	9f 5f       	subi	r25, 0xFF	; 255
    30d4:	90 83       	st	Z, r25
    30d6:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    30da:	0e 94 e7 15 	call	0x2bce	; 0x2bce <GLCD_GetX>
    30de:	6a 85       	ldd	r22, Y+10	; 0x0a
    30e0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
}
    30e4:	2c 96       	adiw	r28, 0x0c	; 12
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	ff 90       	pop	r15
    30fa:	ef 90       	pop	r14
    30fc:	df 90       	pop	r13
    30fe:	cf 90       	pop	r12
    3100:	bf 90       	pop	r11
    3102:	af 90       	pop	r10
    3104:	9f 90       	pop	r9
    3106:	8f 90       	pop	r8
    3108:	7f 90       	pop	r7
    310a:	6f 90       	pop	r6
    310c:	5f 90       	pop	r5
    310e:	4f 90       	pop	r4
    3110:	3f 90       	pop	r3
    3112:	2f 90       	pop	r2
    3114:	08 95       	ret

00003116 <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3116:	df 92       	push	r13
    3118:	ef 92       	push	r14
    311a:	ff 92       	push	r15
    311c:	0f 93       	push	r16
    311e:	1f 93       	push	r17
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	e8 2e       	mov	r14, r24
    3126:	16 2f       	mov	r17, r22
    3128:	d4 2e       	mov	r13, r20
    312a:	f2 2e       	mov	r15, r18
    312c:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    312e:	88 23       	and	r24, r24
    3130:	0c f4       	brge	.+2      	; 0x3134 <GLCD_DrawRectangle+0x1e>
    3132:	49 c0       	rjmp	.+146    	; 0x31c6 <GLCD_DrawRectangle+0xb0>
    3134:	44 23       	and	r20, r20
    3136:	0c f4       	brge	.+2      	; 0x313a <GLCD_DrawRectangle+0x24>
    3138:	46 c0       	rjmp	.+140    	; 0x31c6 <GLCD_DrawRectangle+0xb0>
    313a:	60 34       	cpi	r22, 0x40	; 64
    313c:	08 f0       	brcs	.+2      	; 0x3140 <GLCD_DrawRectangle+0x2a>
    313e:	43 c0       	rjmp	.+134    	; 0x31c6 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3140:	8f e3       	ldi	r24, 0x3F	; 63
    3142:	82 17       	cp	r24, r18
    3144:	08 f4       	brcc	.+2      	; 0x3148 <GLCD_DrawRectangle+0x32>
    3146:	3f c0       	rjmp	.+126    	; 0x31c6 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3148:	4e 15       	cp	r20, r14
    314a:	00 f1       	brcs	.+64     	; 0x318c <GLCD_DrawRectangle+0x76>
    314c:	1c c0       	rjmp	.+56     	; 0x3186 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    314e:	4d 2f       	mov	r20, r29
    3150:	61 2f       	mov	r22, r17
    3152:	8c 2f       	mov	r24, r28
    3154:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <GLCD_SetPixel>
		X1++;
    3158:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    315a:	0c 17       	cp	r16, r28
    315c:	c0 f7       	brcc	.-16     	; 0x314e <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    315e:	de 14       	cp	r13, r14
    3160:	d8 f0       	brcs	.+54     	; 0x3198 <GLCD_DrawRectangle+0x82>
    3162:	17 c0       	rjmp	.+46     	; 0x3192 <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3164:	4d 2f       	mov	r20, r29
    3166:	6f 2d       	mov	r22, r15
    3168:	8c 2f       	mov	r24, r28
    316a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <GLCD_SetPixel>
		X1++;
    316e:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3170:	0c 17       	cp	r16, r28
    3172:	c0 f7       	brcc	.-16     	; 0x3164 <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    3174:	f1 16       	cp	r15, r17
    3176:	98 f0       	brcs	.+38     	; 0x319e <GLCD_DrawRectangle+0x88>
    3178:	1c c0       	rjmp	.+56     	; 0x31b2 <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    317a:	0d 2f       	mov	r16, r29
    317c:	4d 2d       	mov	r20, r13
    317e:	8d 2d       	mov	r24, r13
    3180:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <GLCD_SetPixels>
    3184:	20 c0       	rjmp	.+64     	; 0x31c6 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3186:	04 2f       	mov	r16, r20
    3188:	ce 2d       	mov	r28, r14
    318a:	e1 cf       	rjmp	.-62     	; 0x314e <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    318c:	0e 2d       	mov	r16, r14
    318e:	c4 2f       	mov	r28, r20
    3190:	de cf       	rjmp	.-68     	; 0x314e <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3192:	0d 2d       	mov	r16, r13
    3194:	ce 2d       	mov	r28, r14
    3196:	e6 cf       	rjmp	.-52     	; 0x3164 <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    3198:	0e 2d       	mov	r16, r14
    319a:	cd 2d       	mov	r28, r13
    319c:	e3 cf       	rjmp	.-58     	; 0x3164 <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    319e:	0d 2f       	mov	r16, r29
    31a0:	21 2f       	mov	r18, r17
    31a2:	4e 2d       	mov	r20, r14
    31a4:	6f 2d       	mov	r22, r15
    31a6:	8e 2d       	mov	r24, r14
    31a8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    31ac:	21 2f       	mov	r18, r17
    31ae:	6f 2d       	mov	r22, r15
    31b0:	e4 cf       	rjmp	.-56     	; 0x317a <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    31b2:	0d 2f       	mov	r16, r29
    31b4:	2f 2d       	mov	r18, r15
    31b6:	4e 2d       	mov	r20, r14
    31b8:	61 2f       	mov	r22, r17
    31ba:	8e 2d       	mov	r24, r14
    31bc:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <GLCD_SetPixels>
    31c0:	2f 2d       	mov	r18, r15
    31c2:	61 2f       	mov	r22, r17
    31c4:	da cf       	rjmp	.-76     	; 0x317a <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	df 90       	pop	r13
    31d4:	08 95       	ret

000031d6 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    31e0:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    31e2:	00 e0       	ldi	r16, 0x00	; 0
    31e4:	0b c0       	rjmp	.+22     	; 0x31fc <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    31e6:	41 2f       	mov	r20, r17
    31e8:	6d 2f       	mov	r22, r29
    31ea:	8c 2f       	mov	r24, r28
    31ec:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    31f0:	cf 5f       	subi	r28, 0xFF	; 255
    31f2:	c0 38       	cpi	r28, 0x80	; 128
    31f4:	c1 f7       	brne	.-16     	; 0x31e6 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    31f6:	d8 5f       	subi	r29, 0xF8	; 248
    31f8:	d0 34       	cpi	r29, 0x40	; 64
    31fa:	11 f0       	breq	.+4      	; 0x3200 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    31fc:	c0 2f       	mov	r28, r16
    31fe:	f3 cf       	rjmp	.-26     	; 0x31e6 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	08 95       	ret

0000320a <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <GLCD_FillScreen>
    3210:	08 95       	ret

00003212 <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    3212:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    3214:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <GLCD_SetPixels>
}
    3218:	0f 91       	pop	r16
    321a:	08 95       	ret

0000321c <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    321c:	2f 92       	push	r2
    321e:	3f 92       	push	r3
    3220:	5f 92       	push	r5
    3222:	6f 92       	push	r6
    3224:	7f 92       	push	r7
    3226:	8f 92       	push	r8
    3228:	9f 92       	push	r9
    322a:	af 92       	push	r10
    322c:	bf 92       	push	r11
    322e:	cf 92       	push	r12
    3230:	df 92       	push	r13
    3232:	ef 92       	push	r14
    3234:	ff 92       	push	r15
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	d8 2e       	mov	r13, r24
    3244:	dc 18       	sub	r13, r12
    3246:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    3248:	b8 2e       	mov	r11, r24
    324a:	b6 1a       	sub	r11, r22
    324c:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    324e:	46 2f       	mov	r20, r22
    3250:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    3252:	a6 2e       	mov	r10, r22
    3254:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    3256:	0b 2d       	mov	r16, r11
    3258:	10 e0       	ldi	r17, 0x00	; 0
    325a:	88 e0       	ldi	r24, 0x08	; 8
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	84 1b       	sub	r24, r20
    3260:	91 09       	sbc	r25, r1
    3262:	08 17       	cp	r16, r24
    3264:	19 07       	cpc	r17, r25
    3266:	7c f4       	brge	.+30     	; 0x3286 <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    3268:	88 e0       	ldi	r24, 0x08	; 8
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	80 1b       	sub	r24, r16
    326e:	91 0b       	sbc	r25, r17
    3270:	2f ef       	ldi	r18, 0xFF	; 255
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	b9 01       	movw	r22, r18
    3276:	02 c0       	rjmp	.+4      	; 0x327c <GLCD_InvertRect+0x60>
    3278:	75 95       	asr	r23
    327a:	67 95       	ror	r22
    327c:	8a 95       	dec	r24
    327e:	e2 f7       	brpl	.-8      	; 0x3278 <GLCD_InvertRect+0x5c>
    3280:	cb 01       	movw	r24, r22
		h = height;
    3282:	5b 2c       	mov	r5, r11
    3284:	04 c0       	rjmp	.+8      	; 0x328e <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    3286:	88 e0       	ldi	r24, 0x08	; 8
    3288:	58 2e       	mov	r5, r24
    328a:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    328c:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    328e:	68 2e       	mov	r6, r24
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <GLCD_InvertRect+0x78>
    3292:	66 0c       	add	r6, r6
    3294:	4a 95       	dec	r20
    3296:	ea f7       	brpl	.-6      	; 0x3292 <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    3298:	6a 2d       	mov	r22, r10
    329a:	8c 2d       	mov	r24, r12
    329c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    32a0:	dd 20       	and	r13, r13
    32a2:	d9 f1       	breq	.+118    	; 0x331a <GLCD_InvertRect+0xfe>
    32a4:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    32a6:	0f 2e       	mov	r0, r31
    32a8:	f4 e5       	ldi	r31, 0x54	; 84
    32aa:	ef 2e       	mov	r14, r31
    32ac:	f1 e0       	ldi	r31, 0x01	; 1
    32ae:	ff 2e       	mov	r15, r31
    32b0:	f0 2d       	mov	r31, r0
    32b2:	c3 e5       	ldi	r28, 0x53	; 83
    32b4:	d1 e0       	ldi	r29, 0x01	; 1
    32b6:	f7 01       	movw	r30, r14
    32b8:	70 80       	ld	r7, Z
    32ba:	98 80       	ld	r9, Y
    32bc:	67 2d       	mov	r22, r7
    32be:	89 2d       	mov	r24, r9
    32c0:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    32c4:	99 2d       	mov	r25, r9
    32c6:	9f 5f       	subi	r25, 0xFF	; 255
    32c8:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    32ca:	48 2f       	mov	r20, r24
    32cc:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    32ce:	67 2d       	mov	r22, r7
    32d0:	89 2d       	mov	r24, r9
    32d2:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    32d6:	83 94       	inc	r8
    32d8:	8d 10       	cpse	r8, r13
    32da:	ed cf       	rjmp	.-38     	; 0x32b6 <GLCD_InvertRect+0x9a>
    32dc:	1e c0       	rjmp	.+60     	; 0x331a <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    32de:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    32e0:	6c 2f       	mov	r22, r28
    32e2:	8c 2d       	mov	r24, r12
    32e4:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    32e8:	dd 20       	and	r13, r13
    32ea:	39 f1       	breq	.+78     	; 0x333a <GLCD_InvertRect+0x11e>
    32ec:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    32ee:	f7 01       	movw	r30, r14
    32f0:	50 80       	ld	r5, Z
    32f2:	f1 01       	movw	r30, r2
    32f4:	80 80       	ld	r8, Z
    32f6:	65 2d       	mov	r22, r5
    32f8:	88 2d       	mov	r24, r8
    32fa:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    32fe:	98 2d       	mov	r25, r8
    3300:	9f 5f       	subi	r25, 0xFF	; 255
    3302:	f1 01       	movw	r30, r2
    3304:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3306:	48 2f       	mov	r20, r24
    3308:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    330a:	65 2d       	mov	r22, r5
    330c:	88 2d       	mov	r24, r8
    330e:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    3312:	63 94       	inc	r6
    3314:	6d 14       	cp	r6, r13
    3316:	89 f0       	breq	.+34     	; 0x333a <GLCD_InvertRect+0x11e>
    3318:	ea cf       	rjmp	.-44     	; 0x32ee <GLCD_InvertRect+0xd2>
    331a:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    331c:	5a 18       	sub	r5, r10
    331e:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    3320:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3322:	0f 2e       	mov	r0, r31
    3324:	f4 e5       	ldi	r31, 0x54	; 84
    3326:	ef 2e       	mov	r14, r31
    3328:	f1 e0       	ldi	r31, 0x01	; 1
    332a:	ff 2e       	mov	r15, r31
    332c:	f0 2d       	mov	r31, r0
    332e:	0f 2e       	mov	r0, r31
    3330:	f3 e5       	ldi	r31, 0x53	; 83
    3332:	2f 2e       	mov	r2, r31
    3334:	f1 e0       	ldi	r31, 0x01	; 1
    3336:	3f 2e       	mov	r3, r31
    3338:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    333a:	8a 2d       	mov	r24, r10
    333c:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    333e:	e8 2f       	mov	r30, r24
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	df 01       	movw	r26, r30
    3344:	18 96       	adiw	r26, 0x08	; 8
    3346:	0a 17       	cp	r16, r26
    3348:	1b 07       	cpc	r17, r27
    334a:	4c f6       	brge	.-110    	; 0x32de <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    334c:	8b 15       	cp	r24, r11
    334e:	58 f5       	brcc	.+86     	; 0x33a6 <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    3350:	0e 1b       	sub	r16, r30
    3352:	1f 0b       	sbc	r17, r31
    3354:	8f ef       	ldi	r24, 0xFF	; 255
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	9c 01       	movw	r18, r24
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <GLCD_InvertRect+0x144>
    335c:	22 0f       	add	r18, r18
    335e:	33 1f       	adc	r19, r19
    3360:	0a 95       	dec	r16
    3362:	e2 f7       	brpl	.-8      	; 0x335c <GLCD_InvertRect+0x140>
    3364:	b2 2e       	mov	r11, r18
    3366:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    3368:	6c 2f       	mov	r22, r28
    336a:	68 5f       	subi	r22, 0xF8	; 248
    336c:	8c 2d       	mov	r24, r12
    336e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    3372:	dd 20       	and	r13, r13
    3374:	c1 f0       	breq	.+48     	; 0x33a6 <GLCD_InvertRect+0x18a>
    3376:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3378:	04 e5       	ldi	r16, 0x54	; 84
    337a:	11 e0       	ldi	r17, 0x01	; 1
    337c:	c3 e5       	ldi	r28, 0x53	; 83
    337e:	d1 e0       	ldi	r29, 0x01	; 1
    3380:	f8 01       	movw	r30, r16
    3382:	c0 80       	ld	r12, Z
    3384:	f8 80       	ld	r15, Y
    3386:	6c 2d       	mov	r22, r12
    3388:	8f 2d       	mov	r24, r15
    338a:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    338e:	9f 2d       	mov	r25, r15
    3390:	9f 5f       	subi	r25, 0xFF	; 255
    3392:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    3394:	48 2f       	mov	r20, r24
    3396:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3398:	6c 2d       	mov	r22, r12
    339a:	8f 2d       	mov	r24, r15
    339c:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    33a0:	e3 94       	inc	r14
    33a2:	ed 10       	cpse	r14, r13
    33a4:	ed cf       	rjmp	.-38     	; 0x3380 <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    33a6:	df 91       	pop	r29
    33a8:	cf 91       	pop	r28
    33aa:	1f 91       	pop	r17
    33ac:	0f 91       	pop	r16
    33ae:	ff 90       	pop	r15
    33b0:	ef 90       	pop	r14
    33b2:	df 90       	pop	r13
    33b4:	cf 90       	pop	r12
    33b6:	bf 90       	pop	r11
    33b8:	af 90       	pop	r10
    33ba:	9f 90       	pop	r9
    33bc:	8f 90       	pop	r8
    33be:	7f 90       	pop	r7
    33c0:	6f 90       	pop	r6
    33c2:	5f 90       	pop	r5
    33c4:	3f 90       	pop	r3
    33c6:	2f 90       	pop	r2
    33c8:	08 95       	ret

000033ca <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    33ca:	66 23       	and	r22, r22
    33cc:	f4 f0       	brlt	.+60     	; 0x340a <GLCD_SetFont+0x40>
    33ce:	40 34       	cpi	r20, 0x40	; 64
    33d0:	e0 f4       	brcc	.+56     	; 0x340a <GLCD_SetFont+0x40>
    33d2:	22 30       	cpi	r18, 0x02	; 2
    33d4:	d0 f4       	brcc	.+52     	; 0x340a <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    33d6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__GLCD+0x5>
    33da:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    33de:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    33e2:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    33e6:	50 e0       	ldi	r21, 0x00	; 0
    33e8:	41 50       	subi	r20, 0x01	; 1
    33ea:	51 09       	sbc	r21, r1
    33ec:	ca 01       	movw	r24, r20
    33ee:	99 23       	and	r25, r25
    33f0:	0c f4       	brge	.+2      	; 0x33f4 <GLCD_SetFont+0x2a>
    33f2:	07 96       	adiw	r24, 0x07	; 7
    33f4:	95 95       	asr	r25
    33f6:	87 95       	ror	r24
    33f8:	95 95       	asr	r25
    33fa:	87 95       	ror	r24
    33fc:	95 95       	asr	r25
    33fe:	87 95       	ror	r24
    3400:	8f 5f       	subi	r24, 0xFF	; 255
    3402:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    3406:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <__GLCD+0x9>
    340a:	08 95       	ret

0000340c <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    340c:	2f 92       	push	r2
    340e:	3f 92       	push	r3
    3410:	4f 92       	push	r4
    3412:	5f 92       	push	r5
    3414:	6f 92       	push	r6
    3416:	7f 92       	push	r7
    3418:	8f 92       	push	r8
    341a:	9f 92       	push	r9
    341c:	af 92       	push	r10
    341e:	bf 92       	push	r11
    3420:	cf 92       	push	r12
    3422:	df 92       	push	r13
    3424:	ef 92       	push	r14
    3426:	ff 92       	push	r15
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	2b 97       	sbiw	r28, 0x0b	; 11
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3440:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <__GLCD+0x1>
    3444:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    3446:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <__GLCD+0x2>
    344a:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    344c:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    3450:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    3452:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__GLCD+0x6>
    3456:	29 9f       	mul	r18, r25
    3458:	90 01       	movw	r18, r0
    345a:	11 24       	eor	r1, r1
    345c:	2f 5f       	subi	r18, 0xFF	; 255
    345e:	3f 4f       	sbci	r19, 0xFF	; 255
    3460:	82 9f       	mul	r24, r18
    3462:	a0 01       	movw	r20, r0
    3464:	83 9f       	mul	r24, r19
    3466:	50 0d       	add	r21, r0
    3468:	11 24       	eor	r1, r1
    346a:	59 87       	std	Y+9, r21	; 0x09
    346c:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    346e:	4f 5f       	subi	r20, 0xFF	; 255
    3470:	5f 4f       	sbci	r21, 0xFF	; 255
    3472:	5e 83       	std	Y+6, r21	; 0x06
    3474:	4d 83       	std	Y+5, r20	; 0x05
    3476:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <__GLCD+0x4>
    347a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <__GLCD+0x5>
    347e:	a8 85       	ldd	r26, Y+8	; 0x08
    3480:	b9 85       	ldd	r27, Y+9	; 0x09
    3482:	ea 0f       	add	r30, r26
    3484:	fb 1f       	adc	r31, r27
    3486:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3488:	7f 80       	ldd	r7, Y+7	; 0x07
    348a:	b7 e0       	ldi	r27, 0x07	; 7
    348c:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    348e:	99 23       	and	r25, r25
    3490:	09 f4       	brne	.+2      	; 0x3494 <GLCD_PrintChar+0x88>
    3492:	92 c0       	rjmp	.+292    	; 0x35b8 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3494:	ef 81       	ldd	r30, Y+7	; 0x07
    3496:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3498:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    349a:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    349c:	88 e0       	ldi	r24, 0x08	; 8
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9c 01       	movw	r18, r24
    34a2:	27 19       	sub	r18, r7
    34a4:	31 09       	sbc	r19, r1
    34a6:	3a 83       	std	Y+2, r19	; 0x02
    34a8:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    34aa:	0f 2e       	mov	r0, r31
    34ac:	fb e5       	ldi	r31, 0x5B	; 91
    34ae:	8f 2e       	mov	r8, r31
    34b0:	f1 e0       	ldi	r31, 0x01	; 1
    34b2:	9f 2e       	mov	r9, r31
    34b4:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    34b6:	0f 2e       	mov	r0, r31
    34b8:	f4 e5       	ldi	r31, 0x54	; 84
    34ba:	af 2e       	mov	r10, r31
    34bc:	f1 e0       	ldi	r31, 0x01	; 1
    34be:	bf 2e       	mov	r11, r31
    34c0:	f0 2d       	mov	r31, r0
    34c2:	03 e5       	ldi	r16, 0x53	; 83
    34c4:	11 e0       	ldi	r17, 0x01	; 1
    34c6:	67 2c       	mov	r6, r7
    34c8:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    34ca:	6b 81       	ldd	r22, Y+3	; 0x03
    34cc:	8c 81       	ldd	r24, Y+4	; 0x04
    34ce:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    34d2:	4d 81       	ldd	r20, Y+5	; 0x05
    34d4:	5e 81       	ldd	r21, Y+6	; 0x06
    34d6:	43 0d       	add	r20, r3
    34d8:	51 1d       	adc	r21, r1
    34da:	5b 87       	std	Y+11, r21	; 0x0b
    34dc:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    34de:	7a 01       	movw	r14, r20
    34e0:	51 e0       	ldi	r21, 0x01	; 1
    34e2:	e5 1a       	sub	r14, r21
    34e4:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    34e6:	77 20       	and	r7, r7
    34e8:	09 f4       	brne	.+2      	; 0x34ec <GLCD_PrintChar+0xe0>
    34ea:	4f c0       	rjmp	.+158    	; 0x358a <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    34ec:	0f 2e       	mov	r0, r31
    34ee:	fa e5       	ldi	r31, 0x5A	; 90
    34f0:	cf 2e       	mov	r12, r31
    34f2:	f1 e0       	ldi	r31, 0x01	; 1
    34f4:	df 2e       	mov	r13, r31
    34f6:	f0 2d       	mov	r31, r0
    34f8:	83 2d       	mov	r24, r3
    34fa:	36 2c       	mov	r3, r6
    34fc:	67 2c       	mov	r6, r7
    34fe:	72 2c       	mov	r7, r2
    3500:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    3502:	a6 e5       	ldi	r26, 0x56	; 86
    3504:	b1 e0       	ldi	r27, 0x01	; 1
    3506:	2d 91       	ld	r18, X+
    3508:	3c 91       	ld	r19, X
    350a:	ea 85       	ldd	r30, Y+10	; 0x0a
    350c:	fb 85       	ldd	r31, Y+11	; 0x0b
    350e:	e2 0f       	add	r30, r18
    3510:	f3 1f       	adc	r31, r19
    3512:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    3514:	4e 2e       	mov	r4, r30
    3516:	03 2c       	mov	r0, r3
    3518:	01 c0       	rjmp	.+2      	; 0x351c <GLCD_PrintChar+0x110>
    351a:	44 0c       	add	r4, r4
    351c:	0a 94       	dec	r0
    351e:	ea f7       	brpl	.-6      	; 0x351a <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    3520:	55 20       	and	r5, r5
    3522:	81 f0       	breq	.+32     	; 0x3544 <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3524:	f9 01       	movw	r30, r18
    3526:	ee 0d       	add	r30, r14
    3528:	ff 1d       	adc	r31, r15
    352a:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	09 80       	ldd	r0, Y+1	; 0x01
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <GLCD_PrintChar+0x12a>
    3532:	35 95       	asr	r19
    3534:	27 95       	ror	r18
    3536:	0a 94       	dec	r0
    3538:	e2 f7       	brpl	.-8      	; 0x3532 <GLCD_PrintChar+0x126>
				data |= dataPrev;
    353a:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    353c:	f6 01       	movw	r30, r12
    353e:	80 81       	ld	r24, Z
    3540:	e8 0e       	add	r14, r24
    3542:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3544:	d4 01       	movw	r26, r8
    3546:	8c 91       	ld	r24, X
    3548:	81 30       	cpi	r24, 0x01	; 1
    354a:	39 f4       	brne	.+14     	; 0x355a <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    354c:	f5 01       	movw	r30, r10
    354e:	60 81       	ld	r22, Z
    3550:	d8 01       	movw	r26, r16
    3552:	8c 91       	ld	r24, X
    3554:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
    3558:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    355a:	f5 01       	movw	r30, r10
    355c:	60 81       	ld	r22, Z
    355e:	d8 01       	movw	r26, r16
    3560:	8c 91       	ld	r24, X
    3562:	98 2f       	mov	r25, r24
    3564:	9f 5f       	subi	r25, 0xFF	; 255
    3566:	9c 93       	st	X, r25
    3568:	44 2d       	mov	r20, r4
    356a:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    356e:	f6 01       	movw	r30, r12
    3570:	80 81       	ld	r24, Z
    3572:	2a 85       	ldd	r18, Y+10	; 0x0a
    3574:	3b 85       	ldd	r19, Y+11	; 0x0b
    3576:	28 0f       	add	r18, r24
    3578:	31 1d       	adc	r19, r1
    357a:	3b 87       	std	Y+11, r19	; 0x0b
    357c:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    357e:	73 94       	inc	r7
    3580:	76 10       	cpse	r7, r6
    3582:	bf cf       	rjmp	.-130    	; 0x3502 <GLCD_PrintChar+0xf6>
    3584:	76 2c       	mov	r7, r6
    3586:	63 2c       	mov	r6, r3
    3588:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    358a:	d4 01       	movw	r26, r8
    358c:	8c 91       	ld	r24, X
    358e:	81 11       	cpse	r24, r1
    3590:	07 c0       	rjmp	.+14     	; 0x35a0 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    3592:	42 2d       	mov	r20, r2
    3594:	f5 01       	movw	r30, r10
    3596:	60 81       	ld	r22, Z
    3598:	d8 01       	movw	r26, r16
    359a:	8c 91       	ld	r24, X
    359c:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    35a0:	bb 81       	ldd	r27, Y+3	; 0x03
    35a2:	b8 5f       	subi	r27, 0xF8	; 248
    35a4:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    35a6:	33 94       	inc	r3
    35a8:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__GLCD+0x8>
    35ac:	38 16       	cp	r3, r24
    35ae:	08 f4       	brcc	.+2      	; 0x35b2 <GLCD_PrintChar+0x1a6>
    35b0:	8c cf       	rjmp	.-232    	; 0x34ca <GLCD_PrintChar+0xbe>
    35b2:	57 2c       	mov	r5, r7
    35b4:	76 2c       	mov	r7, r6
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    35b8:	ef 81       	ldd	r30, Y+7	; 0x07
    35ba:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    35bc:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    35be:	2f 81       	ldd	r18, Y+7	; 0x07
    35c0:	22 95       	swap	r18
    35c2:	26 95       	lsr	r18
    35c4:	26 95       	lsr	r18
    35c6:	23 70       	andi	r18, 0x03	; 3
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <__GLCD+0x7>
    35ce:	82 95       	swap	r24
    35d0:	86 95       	lsr	r24
    35d2:	86 95       	lsr	r24
    35d4:	83 70       	andi	r24, 0x03	; 3
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	ff 81       	ldd	r31, Y+7	; 0x07
    35da:	8f 0f       	add	r24, r31
    35dc:	91 1d       	adc	r25, r1
    35de:	28 17       	cp	r18, r24
    35e0:	39 07       	cpc	r19, r25
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <GLCD_PrintChar+0x1da>
    35e4:	69 c0       	rjmp	.+210    	; 0x36b8 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    35e6:	6b 81       	ldd	r22, Y+3	; 0x03
    35e8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ea:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    35ee:	28 85       	ldd	r18, Y+8	; 0x08
    35f0:	39 85       	ldd	r19, Y+9	; 0x09
    35f2:	23 0d       	add	r18, r3
    35f4:	31 1d       	adc	r19, r1
    35f6:	3a 83       	std	Y+2, r19	; 0x02
    35f8:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    35fa:	55 20       	and	r5, r5
    35fc:	09 f4       	brne	.+2      	; 0x3600 <GLCD_PrintChar+0x1f4>
    35fe:	51 c0       	rjmp	.+162    	; 0x36a2 <GLCD_PrintChar+0x296>
    3600:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3602:	0f 2e       	mov	r0, r31
    3604:	f4 e5       	ldi	r31, 0x54	; 84
    3606:	af 2e       	mov	r10, r31
    3608:	f1 e0       	ldi	r31, 0x01	; 1
    360a:	bf 2e       	mov	r11, r31
    360c:	f0 2d       	mov	r31, r0
    360e:	03 e5       	ldi	r16, 0x53	; 83
    3610:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3612:	0f 2e       	mov	r0, r31
    3614:	f6 e5       	ldi	r31, 0x56	; 86
    3616:	cf 2e       	mov	r12, r31
    3618:	f1 e0       	ldi	r31, 0x01	; 1
    361a:	df 2e       	mov	r13, r31
    361c:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    361e:	88 e0       	ldi	r24, 0x08	; 8
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	ac 01       	movw	r20, r24
    3624:	47 19       	sub	r20, r7
    3626:	51 09       	sbc	r21, r1
    3628:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    362a:	0f 2e       	mov	r0, r31
    362c:	fb e5       	ldi	r31, 0x5B	; 91
    362e:	ef 2e       	mov	r14, r31
    3630:	f1 e0       	ldi	r31, 0x01	; 1
    3632:	ff 2e       	mov	r15, r31
    3634:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    3636:	0f 2e       	mov	r0, r31
    3638:	fa e5       	ldi	r31, 0x5A	; 90
    363a:	8f 2e       	mov	r8, r31
    363c:	f1 e0       	ldi	r31, 0x01	; 1
    363e:	9f 2e       	mov	r9, r31
    3640:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3642:	d5 01       	movw	r26, r10
    3644:	2c 90       	ld	r2, X
    3646:	f8 01       	movw	r30, r16
    3648:	40 80       	ld	r4, Z
    364a:	62 2d       	mov	r22, r2
    364c:	84 2d       	mov	r24, r4
    364e:	0e 94 c5 14 	call	0x298a	; 0x298a <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3652:	d6 01       	movw	r26, r12
    3654:	ed 91       	ld	r30, X+
    3656:	fc 91       	ld	r31, X
    3658:	29 81       	ldd	r18, Y+1	; 0x01
    365a:	3a 81       	ldd	r19, Y+2	; 0x02
    365c:	e2 0f       	add	r30, r18
    365e:	f3 1f       	adc	r31, r19
    3660:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3662:	50 e0       	ldi	r21, 0x00	; 0
    3664:	06 2c       	mov	r0, r6
    3666:	02 c0       	rjmp	.+4      	; 0x366c <GLCD_PrintChar+0x260>
    3668:	55 95       	asr	r21
    366a:	47 95       	ror	r20
    366c:	0a 94       	dec	r0
    366e:	e2 f7       	brpl	.-8      	; 0x3668 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    3670:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3672:	d7 01       	movw	r26, r14
    3674:	9c 91       	ld	r25, X
    3676:	91 30       	cpi	r25, 0x01	; 1
    3678:	09 f4       	brne	.+2      	; 0x367c <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    367a:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    367c:	84 2d       	mov	r24, r4
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	f8 01       	movw	r30, r16
    3682:	80 83       	st	Z, r24
    3684:	62 2d       	mov	r22, r2
    3686:	84 2d       	mov	r24, r4
    3688:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    368c:	d4 01       	movw	r26, r8
    368e:	8c 91       	ld	r24, X
    3690:	e9 81       	ldd	r30, Y+1	; 0x01
    3692:	fa 81       	ldd	r31, Y+2	; 0x02
    3694:	e8 0f       	add	r30, r24
    3696:	f1 1d       	adc	r31, r1
    3698:	fa 83       	std	Y+2, r31	; 0x02
    369a:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    369c:	33 94       	inc	r3
    369e:	35 10       	cpse	r3, r5
    36a0:	d0 cf       	rjmp	.-96     	; 0x3642 <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    36a2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <__GLCD+0x9>
    36a6:	81 11       	cpse	r24, r1
    36a8:	07 c0       	rjmp	.+14     	; 0x36b8 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__GLCD+0x2>
    36b0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__GLCD+0x1>
    36b4:	0e 94 b7 14 	call	0x296e	; 0x296e <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    36b8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ba:	8f 5f       	subi	r24, 0xFF	; 255
    36bc:	6f 81       	ldd	r22, Y+7	; 0x07
    36be:	85 0d       	add	r24, r5
    36c0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <GLCD_GotoXY>
}
    36c4:	2b 96       	adiw	r28, 0x0b	; 11
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	ff 90       	pop	r15
    36da:	ef 90       	pop	r14
    36dc:	df 90       	pop	r13
    36de:	cf 90       	pop	r12
    36e0:	bf 90       	pop	r11
    36e2:	af 90       	pop	r10
    36e4:	9f 90       	pop	r9
    36e6:	8f 90       	pop	r8
    36e8:	7f 90       	pop	r7
    36ea:	6f 90       	pop	r6
    36ec:	5f 90       	pop	r5
    36ee:	4f 90       	pop	r4
    36f0:	3f 90       	pop	r3
    36f2:	2f 90       	pop	r2
    36f4:	08 95       	ret

000036f6 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	ec 01       	movw	r28, r24
	while(*Text)
    3704:	88 81       	ld	r24, Y
    3706:	88 23       	and	r24, r24
    3708:	19 f1       	breq	.+70     	; 0x3750 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    370a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__GLCD+0x1>
    370e:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__GLCD+0x6>
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	29 0f       	add	r18, r25
    3716:	31 1d       	adc	r19, r1
    3718:	20 38       	cpi	r18, 0x80	; 128
    371a:	31 05       	cpc	r19, r1
    371c:	cc f4       	brge	.+50     	; 0x3750 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    371e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    3720:	0f 2e       	mov	r0, r31
    3722:	f3 e5       	ldi	r31, 0x53	; 83
    3724:	ef 2e       	mov	r14, r31
    3726:	f1 e0       	ldi	r31, 0x01	; 1
    3728:	ff 2e       	mov	r15, r31
    372a:	f0 2d       	mov	r31, r0
    372c:	08 e5       	ldi	r16, 0x58	; 88
    372e:	11 e0       	ldi	r17, 0x01	; 1
    3730:	0a c0       	rjmp	.+20     	; 0x3746 <GLCD_PrintString+0x50>
    3732:	f7 01       	movw	r30, r14
    3734:	90 81       	ld	r25, Z
    3736:	f8 01       	movw	r30, r16
    3738:	20 81       	ld	r18, Z
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	29 0f       	add	r18, r25
    373e:	31 1d       	adc	r19, r1
    3740:	20 38       	cpi	r18, 0x80	; 128
    3742:	31 05       	cpc	r19, r1
    3744:	2c f4       	brge	.+10     	; 0x3750 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    3746:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    374a:	89 91       	ld	r24, Y+
    374c:	81 11       	cpse	r24, r1
    374e:	f1 cf       	rjmp	.-30     	; 0x3732 <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	08 95       	ret

0000375e <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	2c 97       	sbiw	r28, 0x0c	; 12
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    3776:	61 15       	cp	r22, r1
    3778:	71 05       	cpc	r23, r1
    377a:	81 05       	cpc	r24, r1
    377c:	91 05       	cpc	r25, r1
    377e:	21 f4       	brne	.+8      	; 0x3788 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    3780:	80 e3       	ldi	r24, 0x30	; 48
    3782:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
    3786:	45 c1       	rjmp	.+650    	; 0x3a12 <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    3788:	61 15       	cp	r22, r1
    378a:	71 05       	cpc	r23, r1
    378c:	81 05       	cpc	r24, r1
    378e:	20 e8       	ldi	r18, 0x80	; 128
    3790:	92 07       	cpc	r25, r18
    3792:	09 f4       	brne	.+2      	; 0x3796 <GLCD_PrintInteger+0x38>
    3794:	3e c1       	rjmp	.+636    	; 0x3a12 <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    3796:	fe 01       	movw	r30, r28
    3798:	31 96       	adiw	r30, 0x01	; 1
    379a:	2c e0       	ldi	r18, 0x0C	; 12
    379c:	df 01       	movw	r26, r30
    379e:	1d 92       	st	X+, r1
    37a0:	2a 95       	dec	r18
    37a2:	e9 f7       	brne	.-6      	; 0x379e <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    37a4:	20 e3       	ldi	r18, 0x30	; 48
    37a6:	2b 87       	std	Y+11, r18	; 0x0b
    37a8:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    37aa:	29 87       	std	Y+9, r18	; 0x09
    37ac:	28 87       	std	Y+8, r18	; 0x08
    37ae:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    37b0:	2e 83       	std	Y+6, r18	; 0x06
    37b2:	2d 83       	std	Y+5, r18	; 0x05
    37b4:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    37b6:	2b 83       	std	Y+3, r18	; 0x03
    37b8:	2a 83       	std	Y+2, r18	; 0x02
    37ba:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    37bc:	99 23       	and	r25, r25
    37be:	5c f4       	brge	.+22     	; 0x37d6 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    37c0:	9b 01       	movw	r18, r22
    37c2:	ac 01       	movw	r20, r24
    37c4:	88 27       	eor	r24, r24
    37c6:	99 27       	eor	r25, r25
    37c8:	dc 01       	movw	r26, r24
    37ca:	82 1b       	sub	r24, r18
    37cc:	93 0b       	sbc	r25, r19
    37ce:	a4 0b       	sbc	r26, r20
    37d0:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	03 c0       	rjmp	.+6      	; 0x37dc <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    37da:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    37dc:	81 30       	cpi	r24, 0x01	; 1
    37de:	3a ec       	ldi	r19, 0xCA	; 202
    37e0:	93 07       	cpc	r25, r19
    37e2:	3a e9       	ldi	r19, 0x9A	; 154
    37e4:	a3 07       	cpc	r26, r19
    37e6:	3b e3       	ldi	r19, 0x3B	; 59
    37e8:	b3 07       	cpc	r27, r19
    37ea:	94 f0       	brlt	.+36     	; 0x3810 <GLCD_PrintInteger+0xb2>
    37ec:	2a 81       	ldd	r18, Y+2	; 0x02
    37ee:	2f 5f       	subi	r18, 0xFF	; 255
    37f0:	01 c0       	rjmp	.+2      	; 0x37f4 <GLCD_PrintInteger+0x96>
    37f2:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    37f4:	9a 5c       	subi	r25, 0xCA	; 202
    37f6:	aa 49       	sbci	r26, 0x9A	; 154
    37f8:	bb 43       	sbci	r27, 0x3B	; 59
    37fa:	32 2f       	mov	r19, r18
    37fc:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    37fe:	81 30       	cpi	r24, 0x01	; 1
    3800:	5a ec       	ldi	r21, 0xCA	; 202
    3802:	95 07       	cpc	r25, r21
    3804:	5a e9       	ldi	r21, 0x9A	; 154
    3806:	a5 07       	cpc	r26, r21
    3808:	5b e3       	ldi	r21, 0x3B	; 59
    380a:	b5 07       	cpc	r27, r21
    380c:	94 f7       	brge	.-28     	; 0x37f2 <GLCD_PrintInteger+0x94>
    380e:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    3810:	81 15       	cp	r24, r1
    3812:	21 ee       	ldi	r18, 0xE1	; 225
    3814:	92 07       	cpc	r25, r18
    3816:	25 ef       	ldi	r18, 0xF5	; 245
    3818:	a2 07       	cpc	r26, r18
    381a:	25 e0       	ldi	r18, 0x05	; 5
    381c:	b2 07       	cpc	r27, r18
    381e:	94 f0       	brlt	.+36     	; 0x3844 <GLCD_PrintInteger+0xe6>
    3820:	2b 81       	ldd	r18, Y+3	; 0x03
    3822:	2f 5f       	subi	r18, 0xFF	; 255
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <GLCD_PrintInteger+0xca>
    3826:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    3828:	91 5e       	subi	r25, 0xE1	; 225
    382a:	a5 4f       	sbci	r26, 0xF5	; 245
    382c:	b5 40       	sbci	r27, 0x05	; 5
    382e:	32 2f       	mov	r19, r18
    3830:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    3832:	81 15       	cp	r24, r1
    3834:	51 ee       	ldi	r21, 0xE1	; 225
    3836:	95 07       	cpc	r25, r21
    3838:	55 ef       	ldi	r21, 0xF5	; 245
    383a:	a5 07       	cpc	r26, r21
    383c:	55 e0       	ldi	r21, 0x05	; 5
    383e:	b5 07       	cpc	r27, r21
    3840:	94 f7       	brge	.-28     	; 0x3826 <GLCD_PrintInteger+0xc8>
    3842:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    3844:	80 38       	cpi	r24, 0x80	; 128
    3846:	26 e9       	ldi	r18, 0x96	; 150
    3848:	92 07       	cpc	r25, r18
    384a:	28 e9       	ldi	r18, 0x98	; 152
    384c:	a2 07       	cpc	r26, r18
    384e:	b1 05       	cpc	r27, r1
    3850:	94 f0       	brlt	.+36     	; 0x3876 <GLCD_PrintInteger+0x118>
    3852:	2c 81       	ldd	r18, Y+4	; 0x04
    3854:	2f 5f       	subi	r18, 0xFF	; 255
    3856:	01 c0       	rjmp	.+2      	; 0x385a <GLCD_PrintInteger+0xfc>
    3858:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    385a:	80 58       	subi	r24, 0x80	; 128
    385c:	96 49       	sbci	r25, 0x96	; 150
    385e:	a8 49       	sbci	r26, 0x98	; 152
    3860:	b1 09       	sbc	r27, r1
    3862:	32 2f       	mov	r19, r18
    3864:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    3866:	80 38       	cpi	r24, 0x80	; 128
    3868:	56 e9       	ldi	r21, 0x96	; 150
    386a:	95 07       	cpc	r25, r21
    386c:	58 e9       	ldi	r21, 0x98	; 152
    386e:	a5 07       	cpc	r26, r21
    3870:	b1 05       	cpc	r27, r1
    3872:	94 f7       	brge	.-28     	; 0x3858 <GLCD_PrintInteger+0xfa>
    3874:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    3876:	80 34       	cpi	r24, 0x40	; 64
    3878:	22 e4       	ldi	r18, 0x42	; 66
    387a:	92 07       	cpc	r25, r18
    387c:	2f e0       	ldi	r18, 0x0F	; 15
    387e:	a2 07       	cpc	r26, r18
    3880:	b1 05       	cpc	r27, r1
    3882:	94 f0       	brlt	.+36     	; 0x38a8 <GLCD_PrintInteger+0x14a>
    3884:	2d 81       	ldd	r18, Y+5	; 0x05
    3886:	2f 5f       	subi	r18, 0xFF	; 255
    3888:	01 c0       	rjmp	.+2      	; 0x388c <GLCD_PrintInteger+0x12e>
    388a:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    388c:	80 54       	subi	r24, 0x40	; 64
    388e:	92 44       	sbci	r25, 0x42	; 66
    3890:	af 40       	sbci	r26, 0x0F	; 15
    3892:	b1 09       	sbc	r27, r1
    3894:	32 2f       	mov	r19, r18
    3896:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    3898:	80 34       	cpi	r24, 0x40	; 64
    389a:	52 e4       	ldi	r21, 0x42	; 66
    389c:	95 07       	cpc	r25, r21
    389e:	5f e0       	ldi	r21, 0x0F	; 15
    38a0:	a5 07       	cpc	r26, r21
    38a2:	b1 05       	cpc	r27, r1
    38a4:	94 f7       	brge	.-28     	; 0x388a <GLCD_PrintInteger+0x12c>
    38a6:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    38a8:	80 3a       	cpi	r24, 0xA0	; 160
    38aa:	26 e8       	ldi	r18, 0x86	; 134
    38ac:	92 07       	cpc	r25, r18
    38ae:	21 e0       	ldi	r18, 0x01	; 1
    38b0:	a2 07       	cpc	r26, r18
    38b2:	b1 05       	cpc	r27, r1
    38b4:	94 f0       	brlt	.+36     	; 0x38da <GLCD_PrintInteger+0x17c>
    38b6:	2e 81       	ldd	r18, Y+6	; 0x06
    38b8:	2f 5f       	subi	r18, 0xFF	; 255
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <GLCD_PrintInteger+0x160>
    38bc:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    38be:	80 5a       	subi	r24, 0xA0	; 160
    38c0:	96 48       	sbci	r25, 0x86	; 134
    38c2:	a1 40       	sbci	r26, 0x01	; 1
    38c4:	b1 09       	sbc	r27, r1
    38c6:	32 2f       	mov	r19, r18
    38c8:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    38ca:	80 3a       	cpi	r24, 0xA0	; 160
    38cc:	56 e8       	ldi	r21, 0x86	; 134
    38ce:	95 07       	cpc	r25, r21
    38d0:	51 e0       	ldi	r21, 0x01	; 1
    38d2:	a5 07       	cpc	r26, r21
    38d4:	b1 05       	cpc	r27, r1
    38d6:	94 f7       	brge	.-28     	; 0x38bc <GLCD_PrintInteger+0x15e>
    38d8:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    38da:	80 31       	cpi	r24, 0x10	; 16
    38dc:	27 e2       	ldi	r18, 0x27	; 39
    38de:	92 07       	cpc	r25, r18
    38e0:	a1 05       	cpc	r26, r1
    38e2:	b1 05       	cpc	r27, r1
    38e4:	8c f0       	brlt	.+34     	; 0x3908 <GLCD_PrintInteger+0x1aa>
    38e6:	2f 81       	ldd	r18, Y+7	; 0x07
    38e8:	2f 5f       	subi	r18, 0xFF	; 255
    38ea:	01 c0       	rjmp	.+2      	; 0x38ee <GLCD_PrintInteger+0x190>
    38ec:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    38ee:	80 51       	subi	r24, 0x10	; 16
    38f0:	97 42       	sbci	r25, 0x27	; 39
    38f2:	a1 09       	sbc	r26, r1
    38f4:	b1 09       	sbc	r27, r1
    38f6:	32 2f       	mov	r19, r18
    38f8:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    38fa:	80 31       	cpi	r24, 0x10	; 16
    38fc:	57 e2       	ldi	r21, 0x27	; 39
    38fe:	95 07       	cpc	r25, r21
    3900:	a1 05       	cpc	r26, r1
    3902:	b1 05       	cpc	r27, r1
    3904:	9c f7       	brge	.-26     	; 0x38ec <GLCD_PrintInteger+0x18e>
    3906:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3908:	88 3e       	cpi	r24, 0xE8	; 232
    390a:	23 e0       	ldi	r18, 0x03	; 3
    390c:	92 07       	cpc	r25, r18
    390e:	a1 05       	cpc	r26, r1
    3910:	b1 05       	cpc	r27, r1
    3912:	8c f0       	brlt	.+34     	; 0x3936 <GLCD_PrintInteger+0x1d8>
    3914:	28 85       	ldd	r18, Y+8	; 0x08
    3916:	2f 5f       	subi	r18, 0xFF	; 255
    3918:	01 c0       	rjmp	.+2      	; 0x391c <GLCD_PrintInteger+0x1be>
    391a:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    391c:	88 5e       	subi	r24, 0xE8	; 232
    391e:	93 40       	sbci	r25, 0x03	; 3
    3920:	a1 09       	sbc	r26, r1
    3922:	b1 09       	sbc	r27, r1
    3924:	32 2f       	mov	r19, r18
    3926:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3928:	88 3e       	cpi	r24, 0xE8	; 232
    392a:	53 e0       	ldi	r21, 0x03	; 3
    392c:	95 07       	cpc	r25, r21
    392e:	a1 05       	cpc	r26, r1
    3930:	b1 05       	cpc	r27, r1
    3932:	9c f7       	brge	.-26     	; 0x391a <GLCD_PrintInteger+0x1bc>
    3934:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    3936:	84 36       	cpi	r24, 0x64	; 100
    3938:	91 05       	cpc	r25, r1
    393a:	a1 05       	cpc	r26, r1
    393c:	b1 05       	cpc	r27, r1
    393e:	84 f0       	brlt	.+32     	; 0x3960 <GLCD_PrintInteger+0x202>
    3940:	29 85       	ldd	r18, Y+9	; 0x09
    3942:	2f 5f       	subi	r18, 0xFF	; 255
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <GLCD_PrintInteger+0x1ea>
    3946:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    3948:	84 56       	subi	r24, 0x64	; 100
    394a:	91 09       	sbc	r25, r1
    394c:	a1 09       	sbc	r26, r1
    394e:	b1 09       	sbc	r27, r1
    3950:	32 2f       	mov	r19, r18
    3952:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    3954:	84 36       	cpi	r24, 0x64	; 100
    3956:	91 05       	cpc	r25, r1
    3958:	a1 05       	cpc	r26, r1
    395a:	b1 05       	cpc	r27, r1
    395c:	a4 f7       	brge	.-24     	; 0x3946 <GLCD_PrintInteger+0x1e8>
    395e:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    3960:	8a 30       	cpi	r24, 0x0A	; 10
    3962:	91 05       	cpc	r25, r1
    3964:	a1 05       	cpc	r26, r1
    3966:	b1 05       	cpc	r27, r1
    3968:	7c f0       	brlt	.+30     	; 0x3988 <GLCD_PrintInteger+0x22a>
    396a:	2a 85       	ldd	r18, Y+10	; 0x0a
    396c:	2f 5f       	subi	r18, 0xFF	; 255
    396e:	01 c0       	rjmp	.+2      	; 0x3972 <GLCD_PrintInteger+0x214>
    3970:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    3972:	0a 97       	sbiw	r24, 0x0a	; 10
    3974:	a1 09       	sbc	r26, r1
    3976:	b1 09       	sbc	r27, r1
    3978:	32 2f       	mov	r19, r18
    397a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    397c:	8a 30       	cpi	r24, 0x0A	; 10
    397e:	91 05       	cpc	r25, r1
    3980:	a1 05       	cpc	r26, r1
    3982:	b1 05       	cpc	r27, r1
    3984:	ac f7       	brge	.-22     	; 0x3970 <GLCD_PrintInteger+0x212>
    3986:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    3988:	18 16       	cp	r1, r24
    398a:	19 06       	cpc	r1, r25
    398c:	1a 06       	cpc	r1, r26
    398e:	1b 06       	cpc	r1, r27
    3990:	5c f4       	brge	.+22     	; 0x39a8 <GLCD_PrintInteger+0x24a>
    3992:	5b 85       	ldd	r21, Y+11	; 0x0b
    3994:	8c 01       	movw	r16, r24
    3996:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    3998:	01 50       	subi	r16, 0x01	; 1
    399a:	11 09       	sbc	r17, r1
    399c:	21 09       	sbc	r18, r1
    399e:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    39a0:	d9 f7       	brne	.-10     	; 0x3998 <GLCD_PrintInteger+0x23a>
    39a2:	65 2f       	mov	r22, r21
    39a4:	68 0f       	add	r22, r24
    39a6:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	80 33       	cpi	r24, 0x30	; 48
    39ac:	61 f4       	brne	.+24     	; 0x39c6 <GLCD_PrintInteger+0x268>
    39ae:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    39b0:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    39b2:	e1 e0       	ldi	r30, 0x01	; 1
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	ec 0f       	add	r30, r28
    39b8:	fd 1f       	adc	r31, r29
    39ba:	e8 0f       	add	r30, r24
    39bc:	f1 1d       	adc	r31, r1
    39be:	90 81       	ld	r25, Z
    39c0:	90 33       	cpi	r25, 0x30	; 48
    39c2:	b1 f3       	breq	.-20     	; 0x39b0 <GLCD_PrintInteger+0x252>
    39c4:	01 c0       	rjmp	.+2      	; 0x39c8 <GLCD_PrintInteger+0x26a>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    39c8:	44 23       	and	r20, r20
    39ca:	31 f0       	breq	.+12     	; 0x39d8 <GLCD_PrintInteger+0x27a>
	{
		i--;
    39cc:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    39ce:	fe 01       	movw	r30, r28
    39d0:	e8 0f       	add	r30, r24
    39d2:	f1 1d       	adc	r31, r1
    39d4:	9d e2       	ldi	r25, 0x2D	; 45
    39d6:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    39d8:	4a e0       	ldi	r20, 0x0A	; 10
    39da:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    39dc:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	e1 e0       	ldi	r30, 0x01	; 1
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	ec 0f       	add	r30, r28
    39e6:	fd 1f       	adc	r31, r29
    39e8:	e2 0f       	add	r30, r18
    39ea:	f1 1d       	adc	r31, r1
    39ec:	df 01       	movw	r26, r30
    39ee:	a8 0f       	add	r26, r24
    39f0:	b9 1f       	adc	r27, r25
    39f2:	3c 91       	ld	r19, X
    39f4:	30 83       	st	Z, r19
		i++;
    39f6:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    39f8:	42 17       	cp	r20, r18
    39fa:	90 f7       	brcc	.-28     	; 0x39e0 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    39fc:	e1 e0       	ldi	r30, 0x01	; 1
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	ec 0f       	add	r30, r28
    3a02:	fd 1f       	adc	r31, r29
    3a04:	e2 0f       	add	r30, r18
    3a06:	f1 1d       	adc	r31, r1
    3a08:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <GLCD_PrintString>
	}
}
    3a12:	2c 96       	adiw	r28, 0x0c	; 12
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	08 95       	ret

00003a28 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    3a28:	8f 92       	push	r8
    3a2a:	9f 92       	push	r9
    3a2c:	af 92       	push	r10
    3a2e:	bf 92       	push	r11
    3a30:	cf 92       	push	r12
    3a32:	df 92       	push	r13
    3a34:	ef 92       	push	r14
    3a36:	ff 92       	push	r15
    3a38:	6b 01       	movw	r12, r22
    3a3a:	7c 01       	movw	r14, r24
    3a3c:	49 01       	movw	r8, r18
    3a3e:	5a 01       	movw	r10, r20
	if (Value == 0)
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	a9 01       	movw	r20, r18
    3a46:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__cmpsf2>
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	0a c0       	rjmp	.+20     	; 0x3a62 <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    3a4e:	80 e3       	ldi	r24, 0x30	; 48
    3a50:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
		GLCD_PrintChar('.');
    3a54:	8e e2       	ldi	r24, 0x2E	; 46
    3a56:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
		GLCD_PrintChar('0');
    3a5a:	80 e3       	ldi	r24, 0x30	; 48
    3a5c:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
    3a60:	4a c0       	rjmp	.+148    	; 0x3af6 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	5f ec       	ldi	r21, 0xCF	; 207
    3a6a:	c7 01       	movw	r24, r14
    3a6c:	b6 01       	movw	r22, r12
    3a6e:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__gesf2>
    3a72:	88 23       	and	r24, r24
    3a74:	0c f4       	brge	.+2      	; 0x3a78 <GLCD_PrintDouble+0x50>
    3a76:	3f c0       	rjmp	.+126    	; 0x3af6 <GLCD_PrintDouble+0xce>
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e0       	ldi	r20, 0x00	; 0
    3a7e:	5f e4       	ldi	r21, 0x4F	; 79
    3a80:	c7 01       	movw	r24, r14
    3a82:	b6 01       	movw	r22, r12
    3a84:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__cmpsf2>
    3a88:	88 23       	and	r24, r24
    3a8a:	ac f5       	brge	.+106    	; 0x3af6 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	a9 01       	movw	r20, r18
    3a92:	c7 01       	movw	r24, r14
    3a94:	b6 01       	movw	r22, r12
    3a96:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__cmpsf2>
    3a9a:	88 23       	and	r24, r24
    3a9c:	3c f4       	brge	.+14     	; 0x3aac <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    3a9e:	f7 fa       	bst	r15, 7
    3aa0:	f0 94       	com	r15
    3aa2:	f7 f8       	bld	r15, 7
    3aa4:	f0 94       	com	r15
			GLCD_PrintChar('-');
    3aa6:	8d e2       	ldi	r24, 0x2D	; 45
    3aa8:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    3aac:	c7 01       	movw	r24, r14
    3aae:	b6 01       	movw	r22, r12
    3ab0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixsfsi>
    3ab4:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    3ab8:	8e e2       	ldi	r24, 0x2E	; 46
    3aba:	0e 94 06 1a 	call	0x340c	; 0x340c <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    3abe:	c7 01       	movw	r24, r14
    3ac0:	b6 01       	movw	r22, r12
    3ac2:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fixunssfsi>
    3ac6:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    3aca:	9b 01       	movw	r18, r22
    3acc:	ac 01       	movw	r20, r24
    3ace:	c7 01       	movw	r24, r14
    3ad0:	b6 01       	movw	r22, r12
    3ad2:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__subsf3>
    3ad6:	6b 01       	movw	r12, r22
    3ad8:	7c 01       	movw	r14, r24
    3ada:	c5 01       	movw	r24, r10
    3adc:	b4 01       	movw	r22, r8
    3ade:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__floatunsisf>
    3ae2:	9b 01       	movw	r18, r22
    3ae4:	ac 01       	movw	r20, r24
    3ae6:	c7 01       	movw	r24, r14
    3ae8:	b6 01       	movw	r22, r12
    3aea:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3>
    3aee:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__fixsfsi>
    3af2:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_PrintInteger>
	}
}
    3af6:	ff 90       	pop	r15
    3af8:	ef 90       	pop	r14
    3afa:	df 90       	pop	r13
    3afc:	cf 90       	pop	r12
    3afe:	bf 90       	pop	r11
    3b00:	af 90       	pop	r10
    3b02:	9f 90       	pop	r9
    3b04:	8f 90       	pop	r8
    3b06:	08 95       	ret

00003b08 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    3b08:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    3b0a:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    3b0c:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    3b0e:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    3b10:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    3b12:	8c e0       	ldi	r24, 0x0C	; 12
    3b14:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    3b16:	84 e0       	ldi	r24, 0x04	; 4
    3b18:	86 bf       	out	0x36, r24	; 54
    3b1a:	08 95       	ret

00003b1c <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    3b1c:	81 b1       	in	r24, 0x01	; 1
}
    3b1e:	88 7f       	andi	r24, 0xF8	; 248
    3b20:	08 95       	ret

00003b22 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3b22:	84 ea       	ldi	r24, 0xA4	; 164
    3b24:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    3b26:	06 b6       	in	r0, 0x36	; 54
    3b28:	07 fe       	sbrs	r0, 7
    3b2a:	fd cf       	rjmp	.-6      	; 0x3b26 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    3b2c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <TWI_Status>
}
    3b30:	08 95       	ret

00003b32 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    3b32:	85 ed       	ldi	r24, 0xD5	; 213
    3b34:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    3b36:	06 b6       	in	r0, 0x36	; 54
    3b38:	04 fc       	sbrc	r0, 4
    3b3a:	fd cf       	rjmp	.-6      	; 0x3b36 <TWI_EndTransmission+0x4>
}
    3b3c:	08 95       	ret

00003b3e <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    3b3e:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    3b40:	84 e8       	ldi	r24, 0x84	; 132
    3b42:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    3b44:	06 b6       	in	r0, 0x36	; 54
    3b46:	07 fe       	sbrs	r0, 7
    3b48:	fd cf       	rjmp	.-6      	; 0x3b44 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    3b4a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <TWI_Status>
}
    3b4e:	08 95       	ret

00003b50 <__subsf3>:
    3b50:	50 58       	subi	r21, 0x80	; 128

00003b52 <__addsf3>:
    3b52:	bb 27       	eor	r27, r27
    3b54:	aa 27       	eor	r26, r26
    3b56:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <__addsf3x>
    3b5a:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <__fp_round>
    3b5e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__fp_pscA>
    3b62:	38 f0       	brcs	.+14     	; 0x3b72 <__addsf3+0x20>
    3b64:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__fp_pscB>
    3b68:	20 f0       	brcs	.+8      	; 0x3b72 <__addsf3+0x20>
    3b6a:	39 f4       	brne	.+14     	; 0x3b7a <__addsf3+0x28>
    3b6c:	9f 3f       	cpi	r25, 0xFF	; 255
    3b6e:	19 f4       	brne	.+6      	; 0x3b76 <__addsf3+0x24>
    3b70:	26 f4       	brtc	.+8      	; 0x3b7a <__addsf3+0x28>
    3b72:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__fp_nan>
    3b76:	0e f4       	brtc	.+2      	; 0x3b7a <__addsf3+0x28>
    3b78:	e0 95       	com	r30
    3b7a:	e7 fb       	bst	r30, 7
    3b7c:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__fp_inf>

00003b80 <__addsf3x>:
    3b80:	e9 2f       	mov	r30, r25
    3b82:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__fp_split3>
    3b86:	58 f3       	brcs	.-42     	; 0x3b5e <__addsf3+0xc>
    3b88:	ba 17       	cp	r27, r26
    3b8a:	62 07       	cpc	r22, r18
    3b8c:	73 07       	cpc	r23, r19
    3b8e:	84 07       	cpc	r24, r20
    3b90:	95 07       	cpc	r25, r21
    3b92:	20 f0       	brcs	.+8      	; 0x3b9c <__addsf3x+0x1c>
    3b94:	79 f4       	brne	.+30     	; 0x3bb4 <__addsf3x+0x34>
    3b96:	a6 f5       	brtc	.+104    	; 0x3c00 <__addsf3x+0x80>
    3b98:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_zero>
    3b9c:	0e f4       	brtc	.+2      	; 0x3ba0 <__addsf3x+0x20>
    3b9e:	e0 95       	com	r30
    3ba0:	0b 2e       	mov	r0, r27
    3ba2:	ba 2f       	mov	r27, r26
    3ba4:	a0 2d       	mov	r26, r0
    3ba6:	0b 01       	movw	r0, r22
    3ba8:	b9 01       	movw	r22, r18
    3baa:	90 01       	movw	r18, r0
    3bac:	0c 01       	movw	r0, r24
    3bae:	ca 01       	movw	r24, r20
    3bb0:	a0 01       	movw	r20, r0
    3bb2:	11 24       	eor	r1, r1
    3bb4:	ff 27       	eor	r31, r31
    3bb6:	59 1b       	sub	r21, r25
    3bb8:	99 f0       	breq	.+38     	; 0x3be0 <__addsf3x+0x60>
    3bba:	59 3f       	cpi	r21, 0xF9	; 249
    3bbc:	50 f4       	brcc	.+20     	; 0x3bd2 <__addsf3x+0x52>
    3bbe:	50 3e       	cpi	r21, 0xE0	; 224
    3bc0:	68 f1       	brcs	.+90     	; 0x3c1c <__addsf3x+0x9c>
    3bc2:	1a 16       	cp	r1, r26
    3bc4:	f0 40       	sbci	r31, 0x00	; 0
    3bc6:	a2 2f       	mov	r26, r18
    3bc8:	23 2f       	mov	r18, r19
    3bca:	34 2f       	mov	r19, r20
    3bcc:	44 27       	eor	r20, r20
    3bce:	58 5f       	subi	r21, 0xF8	; 248
    3bd0:	f3 cf       	rjmp	.-26     	; 0x3bb8 <__addsf3x+0x38>
    3bd2:	46 95       	lsr	r20
    3bd4:	37 95       	ror	r19
    3bd6:	27 95       	ror	r18
    3bd8:	a7 95       	ror	r26
    3bda:	f0 40       	sbci	r31, 0x00	; 0
    3bdc:	53 95       	inc	r21
    3bde:	c9 f7       	brne	.-14     	; 0x3bd2 <__addsf3x+0x52>
    3be0:	7e f4       	brtc	.+30     	; 0x3c00 <__addsf3x+0x80>
    3be2:	1f 16       	cp	r1, r31
    3be4:	ba 0b       	sbc	r27, r26
    3be6:	62 0b       	sbc	r22, r18
    3be8:	73 0b       	sbc	r23, r19
    3bea:	84 0b       	sbc	r24, r20
    3bec:	ba f0       	brmi	.+46     	; 0x3c1c <__addsf3x+0x9c>
    3bee:	91 50       	subi	r25, 0x01	; 1
    3bf0:	a1 f0       	breq	.+40     	; 0x3c1a <__addsf3x+0x9a>
    3bf2:	ff 0f       	add	r31, r31
    3bf4:	bb 1f       	adc	r27, r27
    3bf6:	66 1f       	adc	r22, r22
    3bf8:	77 1f       	adc	r23, r23
    3bfa:	88 1f       	adc	r24, r24
    3bfc:	c2 f7       	brpl	.-16     	; 0x3bee <__addsf3x+0x6e>
    3bfe:	0e c0       	rjmp	.+28     	; 0x3c1c <__addsf3x+0x9c>
    3c00:	ba 0f       	add	r27, r26
    3c02:	62 1f       	adc	r22, r18
    3c04:	73 1f       	adc	r23, r19
    3c06:	84 1f       	adc	r24, r20
    3c08:	48 f4       	brcc	.+18     	; 0x3c1c <__addsf3x+0x9c>
    3c0a:	87 95       	ror	r24
    3c0c:	77 95       	ror	r23
    3c0e:	67 95       	ror	r22
    3c10:	b7 95       	ror	r27
    3c12:	f7 95       	ror	r31
    3c14:	9e 3f       	cpi	r25, 0xFE	; 254
    3c16:	08 f0       	brcs	.+2      	; 0x3c1a <__addsf3x+0x9a>
    3c18:	b0 cf       	rjmp	.-160    	; 0x3b7a <__addsf3+0x28>
    3c1a:	93 95       	inc	r25
    3c1c:	88 0f       	add	r24, r24
    3c1e:	08 f0       	brcs	.+2      	; 0x3c22 <__addsf3x+0xa2>
    3c20:	99 27       	eor	r25, r25
    3c22:	ee 0f       	add	r30, r30
    3c24:	97 95       	ror	r25
    3c26:	87 95       	ror	r24
    3c28:	08 95       	ret

00003c2a <__cmpsf2>:
    3c2a:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <__fp_cmp>
    3c2e:	08 f4       	brcc	.+2      	; 0x3c32 <__cmpsf2+0x8>
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	08 95       	ret

00003c34 <__divsf3>:
    3c34:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__divsf3x>
    3c38:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <__fp_round>
    3c3c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__fp_pscB>
    3c40:	58 f0       	brcs	.+22     	; 0x3c58 <__divsf3+0x24>
    3c42:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__fp_pscA>
    3c46:	40 f0       	brcs	.+16     	; 0x3c58 <__divsf3+0x24>
    3c48:	29 f4       	brne	.+10     	; 0x3c54 <__divsf3+0x20>
    3c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3c4c:	29 f0       	breq	.+10     	; 0x3c58 <__divsf3+0x24>
    3c4e:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__fp_inf>
    3c52:	51 11       	cpse	r21, r1
    3c54:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_szero>
    3c58:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__fp_nan>

00003c5c <__divsf3x>:
    3c5c:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__fp_split3>
    3c60:	68 f3       	brcs	.-38     	; 0x3c3c <__divsf3+0x8>

00003c62 <__divsf3_pse>:
    3c62:	99 23       	and	r25, r25
    3c64:	b1 f3       	breq	.-20     	; 0x3c52 <__divsf3+0x1e>
    3c66:	55 23       	and	r21, r21
    3c68:	91 f3       	breq	.-28     	; 0x3c4e <__divsf3+0x1a>
    3c6a:	95 1b       	sub	r25, r21
    3c6c:	55 0b       	sbc	r21, r21
    3c6e:	bb 27       	eor	r27, r27
    3c70:	aa 27       	eor	r26, r26
    3c72:	62 17       	cp	r22, r18
    3c74:	73 07       	cpc	r23, r19
    3c76:	84 07       	cpc	r24, r20
    3c78:	38 f0       	brcs	.+14     	; 0x3c88 <__divsf3_pse+0x26>
    3c7a:	9f 5f       	subi	r25, 0xFF	; 255
    3c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7e:	22 0f       	add	r18, r18
    3c80:	33 1f       	adc	r19, r19
    3c82:	44 1f       	adc	r20, r20
    3c84:	aa 1f       	adc	r26, r26
    3c86:	a9 f3       	breq	.-22     	; 0x3c72 <__divsf3_pse+0x10>
    3c88:	35 d0       	rcall	.+106    	; 0x3cf4 <__divsf3_pse+0x92>
    3c8a:	0e 2e       	mov	r0, r30
    3c8c:	3a f0       	brmi	.+14     	; 0x3c9c <__divsf3_pse+0x3a>
    3c8e:	e0 e8       	ldi	r30, 0x80	; 128
    3c90:	32 d0       	rcall	.+100    	; 0x3cf6 <__divsf3_pse+0x94>
    3c92:	91 50       	subi	r25, 0x01	; 1
    3c94:	50 40       	sbci	r21, 0x00	; 0
    3c96:	e6 95       	lsr	r30
    3c98:	00 1c       	adc	r0, r0
    3c9a:	ca f7       	brpl	.-14     	; 0x3c8e <__divsf3_pse+0x2c>
    3c9c:	2b d0       	rcall	.+86     	; 0x3cf4 <__divsf3_pse+0x92>
    3c9e:	fe 2f       	mov	r31, r30
    3ca0:	29 d0       	rcall	.+82     	; 0x3cf4 <__divsf3_pse+0x92>
    3ca2:	66 0f       	add	r22, r22
    3ca4:	77 1f       	adc	r23, r23
    3ca6:	88 1f       	adc	r24, r24
    3ca8:	bb 1f       	adc	r27, r27
    3caa:	26 17       	cp	r18, r22
    3cac:	37 07       	cpc	r19, r23
    3cae:	48 07       	cpc	r20, r24
    3cb0:	ab 07       	cpc	r26, r27
    3cb2:	b0 e8       	ldi	r27, 0x80	; 128
    3cb4:	09 f0       	breq	.+2      	; 0x3cb8 <__divsf3_pse+0x56>
    3cb6:	bb 0b       	sbc	r27, r27
    3cb8:	80 2d       	mov	r24, r0
    3cba:	bf 01       	movw	r22, r30
    3cbc:	ff 27       	eor	r31, r31
    3cbe:	93 58       	subi	r25, 0x83	; 131
    3cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc2:	3a f0       	brmi	.+14     	; 0x3cd2 <__divsf3_pse+0x70>
    3cc4:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc6:	51 05       	cpc	r21, r1
    3cc8:	78 f0       	brcs	.+30     	; 0x3ce8 <__divsf3_pse+0x86>
    3cca:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__fp_inf>
    3cce:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_szero>
    3cd2:	5f 3f       	cpi	r21, 0xFF	; 255
    3cd4:	e4 f3       	brlt	.-8      	; 0x3cce <__divsf3_pse+0x6c>
    3cd6:	98 3e       	cpi	r25, 0xE8	; 232
    3cd8:	d4 f3       	brlt	.-12     	; 0x3cce <__divsf3_pse+0x6c>
    3cda:	86 95       	lsr	r24
    3cdc:	77 95       	ror	r23
    3cde:	67 95       	ror	r22
    3ce0:	b7 95       	ror	r27
    3ce2:	f7 95       	ror	r31
    3ce4:	9f 5f       	subi	r25, 0xFF	; 255
    3ce6:	c9 f7       	brne	.-14     	; 0x3cda <__divsf3_pse+0x78>
    3ce8:	88 0f       	add	r24, r24
    3cea:	91 1d       	adc	r25, r1
    3cec:	96 95       	lsr	r25
    3cee:	87 95       	ror	r24
    3cf0:	97 f9       	bld	r25, 7
    3cf2:	08 95       	ret
    3cf4:	e1 e0       	ldi	r30, 0x01	; 1
    3cf6:	66 0f       	add	r22, r22
    3cf8:	77 1f       	adc	r23, r23
    3cfa:	88 1f       	adc	r24, r24
    3cfc:	bb 1f       	adc	r27, r27
    3cfe:	62 17       	cp	r22, r18
    3d00:	73 07       	cpc	r23, r19
    3d02:	84 07       	cpc	r24, r20
    3d04:	ba 07       	cpc	r27, r26
    3d06:	20 f0       	brcs	.+8      	; 0x3d10 <__divsf3_pse+0xae>
    3d08:	62 1b       	sub	r22, r18
    3d0a:	73 0b       	sbc	r23, r19
    3d0c:	84 0b       	sbc	r24, r20
    3d0e:	ba 0b       	sbc	r27, r26
    3d10:	ee 1f       	adc	r30, r30
    3d12:	88 f7       	brcc	.-30     	; 0x3cf6 <__divsf3_pse+0x94>
    3d14:	e0 95       	com	r30
    3d16:	08 95       	ret

00003d18 <__fixsfsi>:
    3d18:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fixunssfsi>
    3d1c:	68 94       	set
    3d1e:	b1 11       	cpse	r27, r1
    3d20:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_szero>
    3d24:	08 95       	ret

00003d26 <__fixunssfsi>:
    3d26:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fp_splitA>
    3d2a:	88 f0       	brcs	.+34     	; 0x3d4e <__fixunssfsi+0x28>
    3d2c:	9f 57       	subi	r25, 0x7F	; 127
    3d2e:	98 f0       	brcs	.+38     	; 0x3d56 <__fixunssfsi+0x30>
    3d30:	b9 2f       	mov	r27, r25
    3d32:	99 27       	eor	r25, r25
    3d34:	b7 51       	subi	r27, 0x17	; 23
    3d36:	b0 f0       	brcs	.+44     	; 0x3d64 <__fixunssfsi+0x3e>
    3d38:	e1 f0       	breq	.+56     	; 0x3d72 <__fixunssfsi+0x4c>
    3d3a:	66 0f       	add	r22, r22
    3d3c:	77 1f       	adc	r23, r23
    3d3e:	88 1f       	adc	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	1a f0       	brmi	.+6      	; 0x3d4a <__fixunssfsi+0x24>
    3d44:	ba 95       	dec	r27
    3d46:	c9 f7       	brne	.-14     	; 0x3d3a <__fixunssfsi+0x14>
    3d48:	14 c0       	rjmp	.+40     	; 0x3d72 <__fixunssfsi+0x4c>
    3d4a:	b1 30       	cpi	r27, 0x01	; 1
    3d4c:	91 f0       	breq	.+36     	; 0x3d72 <__fixunssfsi+0x4c>
    3d4e:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__fp_zero>
    3d52:	b1 e0       	ldi	r27, 0x01	; 1
    3d54:	08 95       	ret
    3d56:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_zero>
    3d5a:	67 2f       	mov	r22, r23
    3d5c:	78 2f       	mov	r23, r24
    3d5e:	88 27       	eor	r24, r24
    3d60:	b8 5f       	subi	r27, 0xF8	; 248
    3d62:	39 f0       	breq	.+14     	; 0x3d72 <__fixunssfsi+0x4c>
    3d64:	b9 3f       	cpi	r27, 0xF9	; 249
    3d66:	cc f3       	brlt	.-14     	; 0x3d5a <__fixunssfsi+0x34>
    3d68:	86 95       	lsr	r24
    3d6a:	77 95       	ror	r23
    3d6c:	67 95       	ror	r22
    3d6e:	b3 95       	inc	r27
    3d70:	d9 f7       	brne	.-10     	; 0x3d68 <__fixunssfsi+0x42>
    3d72:	3e f4       	brtc	.+14     	; 0x3d82 <__fixunssfsi+0x5c>
    3d74:	90 95       	com	r25
    3d76:	80 95       	com	r24
    3d78:	70 95       	com	r23
    3d7a:	61 95       	neg	r22
    3d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	08 95       	ret

00003d84 <__floatunsisf>:
    3d84:	e8 94       	clt
    3d86:	09 c0       	rjmp	.+18     	; 0x3d9a <__floatsisf+0x12>

00003d88 <__floatsisf>:
    3d88:	97 fb       	bst	r25, 7
    3d8a:	3e f4       	brtc	.+14     	; 0x3d9a <__floatsisf+0x12>
    3d8c:	90 95       	com	r25
    3d8e:	80 95       	com	r24
    3d90:	70 95       	com	r23
    3d92:	61 95       	neg	r22
    3d94:	7f 4f       	sbci	r23, 0xFF	; 255
    3d96:	8f 4f       	sbci	r24, 0xFF	; 255
    3d98:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9a:	99 23       	and	r25, r25
    3d9c:	a9 f0       	breq	.+42     	; 0x3dc8 <__floatsisf+0x40>
    3d9e:	f9 2f       	mov	r31, r25
    3da0:	96 e9       	ldi	r25, 0x96	; 150
    3da2:	bb 27       	eor	r27, r27
    3da4:	93 95       	inc	r25
    3da6:	f6 95       	lsr	r31
    3da8:	87 95       	ror	r24
    3daa:	77 95       	ror	r23
    3dac:	67 95       	ror	r22
    3dae:	b7 95       	ror	r27
    3db0:	f1 11       	cpse	r31, r1
    3db2:	f8 cf       	rjmp	.-16     	; 0x3da4 <__floatsisf+0x1c>
    3db4:	fa f4       	brpl	.+62     	; 0x3df4 <__floatsisf+0x6c>
    3db6:	bb 0f       	add	r27, r27
    3db8:	11 f4       	brne	.+4      	; 0x3dbe <__floatsisf+0x36>
    3dba:	60 ff       	sbrs	r22, 0
    3dbc:	1b c0       	rjmp	.+54     	; 0x3df4 <__floatsisf+0x6c>
    3dbe:	6f 5f       	subi	r22, 0xFF	; 255
    3dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc6:	16 c0       	rjmp	.+44     	; 0x3df4 <__floatsisf+0x6c>
    3dc8:	88 23       	and	r24, r24
    3dca:	11 f0       	breq	.+4      	; 0x3dd0 <__floatsisf+0x48>
    3dcc:	96 e9       	ldi	r25, 0x96	; 150
    3dce:	11 c0       	rjmp	.+34     	; 0x3df2 <__floatsisf+0x6a>
    3dd0:	77 23       	and	r23, r23
    3dd2:	21 f0       	breq	.+8      	; 0x3ddc <__floatsisf+0x54>
    3dd4:	9e e8       	ldi	r25, 0x8E	; 142
    3dd6:	87 2f       	mov	r24, r23
    3dd8:	76 2f       	mov	r23, r22
    3dda:	05 c0       	rjmp	.+10     	; 0x3de6 <__floatsisf+0x5e>
    3ddc:	66 23       	and	r22, r22
    3dde:	71 f0       	breq	.+28     	; 0x3dfc <__floatsisf+0x74>
    3de0:	96 e8       	ldi	r25, 0x86	; 134
    3de2:	86 2f       	mov	r24, r22
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	2a f0       	brmi	.+10     	; 0x3df4 <__floatsisf+0x6c>
    3dea:	9a 95       	dec	r25
    3dec:	66 0f       	add	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	88 1f       	adc	r24, r24
    3df2:	da f7       	brpl	.-10     	; 0x3dea <__floatsisf+0x62>
    3df4:	88 0f       	add	r24, r24
    3df6:	96 95       	lsr	r25
    3df8:	87 95       	ror	r24
    3dfa:	97 f9       	bld	r25, 7
    3dfc:	08 95       	ret

00003dfe <__fp_cmp>:
    3dfe:	99 0f       	add	r25, r25
    3e00:	00 08       	sbc	r0, r0
    3e02:	55 0f       	add	r21, r21
    3e04:	aa 0b       	sbc	r26, r26
    3e06:	e0 e8       	ldi	r30, 0x80	; 128
    3e08:	fe ef       	ldi	r31, 0xFE	; 254
    3e0a:	16 16       	cp	r1, r22
    3e0c:	17 06       	cpc	r1, r23
    3e0e:	e8 07       	cpc	r30, r24
    3e10:	f9 07       	cpc	r31, r25
    3e12:	c0 f0       	brcs	.+48     	; 0x3e44 <__fp_cmp+0x46>
    3e14:	12 16       	cp	r1, r18
    3e16:	13 06       	cpc	r1, r19
    3e18:	e4 07       	cpc	r30, r20
    3e1a:	f5 07       	cpc	r31, r21
    3e1c:	98 f0       	brcs	.+38     	; 0x3e44 <__fp_cmp+0x46>
    3e1e:	62 1b       	sub	r22, r18
    3e20:	73 0b       	sbc	r23, r19
    3e22:	84 0b       	sbc	r24, r20
    3e24:	95 0b       	sbc	r25, r21
    3e26:	39 f4       	brne	.+14     	; 0x3e36 <__fp_cmp+0x38>
    3e28:	0a 26       	eor	r0, r26
    3e2a:	61 f0       	breq	.+24     	; 0x3e44 <__fp_cmp+0x46>
    3e2c:	23 2b       	or	r18, r19
    3e2e:	24 2b       	or	r18, r20
    3e30:	25 2b       	or	r18, r21
    3e32:	21 f4       	brne	.+8      	; 0x3e3c <__fp_cmp+0x3e>
    3e34:	08 95       	ret
    3e36:	0a 26       	eor	r0, r26
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <__fp_cmp+0x3e>
    3e3a:	a1 40       	sbci	r26, 0x01	; 1
    3e3c:	a6 95       	lsr	r26
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	81 1d       	adc	r24, r1
    3e42:	81 1d       	adc	r24, r1
    3e44:	08 95       	ret

00003e46 <__fp_inf>:
    3e46:	97 f9       	bld	r25, 7
    3e48:	9f 67       	ori	r25, 0x7F	; 127
    3e4a:	80 e8       	ldi	r24, 0x80	; 128
    3e4c:	70 e0       	ldi	r23, 0x00	; 0
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	08 95       	ret

00003e52 <__fp_nan>:
    3e52:	9f ef       	ldi	r25, 0xFF	; 255
    3e54:	80 ec       	ldi	r24, 0xC0	; 192
    3e56:	08 95       	ret

00003e58 <__fp_pscA>:
    3e58:	00 24       	eor	r0, r0
    3e5a:	0a 94       	dec	r0
    3e5c:	16 16       	cp	r1, r22
    3e5e:	17 06       	cpc	r1, r23
    3e60:	18 06       	cpc	r1, r24
    3e62:	09 06       	cpc	r0, r25
    3e64:	08 95       	ret

00003e66 <__fp_pscB>:
    3e66:	00 24       	eor	r0, r0
    3e68:	0a 94       	dec	r0
    3e6a:	12 16       	cp	r1, r18
    3e6c:	13 06       	cpc	r1, r19
    3e6e:	14 06       	cpc	r1, r20
    3e70:	05 06       	cpc	r0, r21
    3e72:	08 95       	ret

00003e74 <__fp_round>:
    3e74:	09 2e       	mov	r0, r25
    3e76:	03 94       	inc	r0
    3e78:	00 0c       	add	r0, r0
    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <__fp_round+0xc>
    3e7c:	88 23       	and	r24, r24
    3e7e:	52 f0       	brmi	.+20     	; 0x3e94 <__fp_round+0x20>
    3e80:	bb 0f       	add	r27, r27
    3e82:	40 f4       	brcc	.+16     	; 0x3e94 <__fp_round+0x20>
    3e84:	bf 2b       	or	r27, r31
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <__fp_round+0x18>
    3e88:	60 ff       	sbrs	r22, 0
    3e8a:	04 c0       	rjmp	.+8      	; 0x3e94 <__fp_round+0x20>
    3e8c:	6f 5f       	subi	r22, 0xFF	; 255
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	8f 4f       	sbci	r24, 0xFF	; 255
    3e92:	9f 4f       	sbci	r25, 0xFF	; 255
    3e94:	08 95       	ret

00003e96 <__fp_split3>:
    3e96:	57 fd       	sbrc	r21, 7
    3e98:	90 58       	subi	r25, 0x80	; 128
    3e9a:	44 0f       	add	r20, r20
    3e9c:	55 1f       	adc	r21, r21
    3e9e:	59 f0       	breq	.+22     	; 0x3eb6 <__fp_splitA+0x10>
    3ea0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ea2:	71 f0       	breq	.+28     	; 0x3ec0 <__fp_splitA+0x1a>
    3ea4:	47 95       	ror	r20

00003ea6 <__fp_splitA>:
    3ea6:	88 0f       	add	r24, r24
    3ea8:	97 fb       	bst	r25, 7
    3eaa:	99 1f       	adc	r25, r25
    3eac:	61 f0       	breq	.+24     	; 0x3ec6 <__fp_splitA+0x20>
    3eae:	9f 3f       	cpi	r25, 0xFF	; 255
    3eb0:	79 f0       	breq	.+30     	; 0x3ed0 <__fp_splitA+0x2a>
    3eb2:	87 95       	ror	r24
    3eb4:	08 95       	ret
    3eb6:	12 16       	cp	r1, r18
    3eb8:	13 06       	cpc	r1, r19
    3eba:	14 06       	cpc	r1, r20
    3ebc:	55 1f       	adc	r21, r21
    3ebe:	f2 cf       	rjmp	.-28     	; 0x3ea4 <__fp_split3+0xe>
    3ec0:	46 95       	lsr	r20
    3ec2:	f1 df       	rcall	.-30     	; 0x3ea6 <__fp_splitA>
    3ec4:	08 c0       	rjmp	.+16     	; 0x3ed6 <__fp_splitA+0x30>
    3ec6:	16 16       	cp	r1, r22
    3ec8:	17 06       	cpc	r1, r23
    3eca:	18 06       	cpc	r1, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	f1 cf       	rjmp	.-30     	; 0x3eb2 <__fp_splitA+0xc>
    3ed0:	86 95       	lsr	r24
    3ed2:	71 05       	cpc	r23, r1
    3ed4:	61 05       	cpc	r22, r1
    3ed6:	08 94       	sec
    3ed8:	08 95       	ret

00003eda <__fp_zero>:
    3eda:	e8 94       	clt

00003edc <__fp_szero>:
    3edc:	bb 27       	eor	r27, r27
    3ede:	66 27       	eor	r22, r22
    3ee0:	77 27       	eor	r23, r23
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	97 f9       	bld	r25, 7
    3ee6:	08 95       	ret

00003ee8 <__gesf2>:
    3ee8:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <__fp_cmp>
    3eec:	08 f4       	brcc	.+2      	; 0x3ef0 <__gesf2+0x8>
    3eee:	8f ef       	ldi	r24, 0xFF	; 255
    3ef0:	08 95       	ret

00003ef2 <__mulsf3>:
    3ef2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__mulsf3x>
    3ef6:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <__fp_round>
    3efa:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__fp_pscA>
    3efe:	38 f0       	brcs	.+14     	; 0x3f0e <__mulsf3+0x1c>
    3f00:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__fp_pscB>
    3f04:	20 f0       	brcs	.+8      	; 0x3f0e <__mulsf3+0x1c>
    3f06:	95 23       	and	r25, r21
    3f08:	11 f0       	breq	.+4      	; 0x3f0e <__mulsf3+0x1c>
    3f0a:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__fp_inf>
    3f0e:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__fp_nan>
    3f12:	11 24       	eor	r1, r1
    3f14:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_szero>

00003f18 <__mulsf3x>:
    3f18:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__fp_split3>
    3f1c:	70 f3       	brcs	.-36     	; 0x3efa <__mulsf3+0x8>

00003f1e <__mulsf3_pse>:
    3f1e:	95 9f       	mul	r25, r21
    3f20:	c1 f3       	breq	.-16     	; 0x3f12 <__mulsf3+0x20>
    3f22:	95 0f       	add	r25, r21
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	55 1f       	adc	r21, r21
    3f28:	62 9f       	mul	r22, r18
    3f2a:	f0 01       	movw	r30, r0
    3f2c:	72 9f       	mul	r23, r18
    3f2e:	bb 27       	eor	r27, r27
    3f30:	f0 0d       	add	r31, r0
    3f32:	b1 1d       	adc	r27, r1
    3f34:	63 9f       	mul	r22, r19
    3f36:	aa 27       	eor	r26, r26
    3f38:	f0 0d       	add	r31, r0
    3f3a:	b1 1d       	adc	r27, r1
    3f3c:	aa 1f       	adc	r26, r26
    3f3e:	64 9f       	mul	r22, r20
    3f40:	66 27       	eor	r22, r22
    3f42:	b0 0d       	add	r27, r0
    3f44:	a1 1d       	adc	r26, r1
    3f46:	66 1f       	adc	r22, r22
    3f48:	82 9f       	mul	r24, r18
    3f4a:	22 27       	eor	r18, r18
    3f4c:	b0 0d       	add	r27, r0
    3f4e:	a1 1d       	adc	r26, r1
    3f50:	62 1f       	adc	r22, r18
    3f52:	73 9f       	mul	r23, r19
    3f54:	b0 0d       	add	r27, r0
    3f56:	a1 1d       	adc	r26, r1
    3f58:	62 1f       	adc	r22, r18
    3f5a:	83 9f       	mul	r24, r19
    3f5c:	a0 0d       	add	r26, r0
    3f5e:	61 1d       	adc	r22, r1
    3f60:	22 1f       	adc	r18, r18
    3f62:	74 9f       	mul	r23, r20
    3f64:	33 27       	eor	r19, r19
    3f66:	a0 0d       	add	r26, r0
    3f68:	61 1d       	adc	r22, r1
    3f6a:	23 1f       	adc	r18, r19
    3f6c:	84 9f       	mul	r24, r20
    3f6e:	60 0d       	add	r22, r0
    3f70:	21 1d       	adc	r18, r1
    3f72:	82 2f       	mov	r24, r18
    3f74:	76 2f       	mov	r23, r22
    3f76:	6a 2f       	mov	r22, r26
    3f78:	11 24       	eor	r1, r1
    3f7a:	9f 57       	subi	r25, 0x7F	; 127
    3f7c:	50 40       	sbci	r21, 0x00	; 0
    3f7e:	9a f0       	brmi	.+38     	; 0x3fa6 <__mulsf3_pse+0x88>
    3f80:	f1 f0       	breq	.+60     	; 0x3fbe <__mulsf3_pse+0xa0>
    3f82:	88 23       	and	r24, r24
    3f84:	4a f0       	brmi	.+18     	; 0x3f98 <__mulsf3_pse+0x7a>
    3f86:	ee 0f       	add	r30, r30
    3f88:	ff 1f       	adc	r31, r31
    3f8a:	bb 1f       	adc	r27, r27
    3f8c:	66 1f       	adc	r22, r22
    3f8e:	77 1f       	adc	r23, r23
    3f90:	88 1f       	adc	r24, r24
    3f92:	91 50       	subi	r25, 0x01	; 1
    3f94:	50 40       	sbci	r21, 0x00	; 0
    3f96:	a9 f7       	brne	.-22     	; 0x3f82 <__mulsf3_pse+0x64>
    3f98:	9e 3f       	cpi	r25, 0xFE	; 254
    3f9a:	51 05       	cpc	r21, r1
    3f9c:	80 f0       	brcs	.+32     	; 0x3fbe <__mulsf3_pse+0xa0>
    3f9e:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__fp_inf>
    3fa2:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_szero>
    3fa6:	5f 3f       	cpi	r21, 0xFF	; 255
    3fa8:	e4 f3       	brlt	.-8      	; 0x3fa2 <__mulsf3_pse+0x84>
    3faa:	98 3e       	cpi	r25, 0xE8	; 232
    3fac:	d4 f3       	brlt	.-12     	; 0x3fa2 <__mulsf3_pse+0x84>
    3fae:	86 95       	lsr	r24
    3fb0:	77 95       	ror	r23
    3fb2:	67 95       	ror	r22
    3fb4:	b7 95       	ror	r27
    3fb6:	f7 95       	ror	r31
    3fb8:	e7 95       	ror	r30
    3fba:	9f 5f       	subi	r25, 0xFF	; 255
    3fbc:	c1 f7       	brne	.-16     	; 0x3fae <__mulsf3_pse+0x90>
    3fbe:	fe 2b       	or	r31, r30
    3fc0:	88 0f       	add	r24, r24
    3fc2:	91 1d       	adc	r25, r1
    3fc4:	96 95       	lsr	r25
    3fc6:	87 95       	ror	r24
    3fc8:	97 f9       	bld	r25, 7
    3fca:	08 95       	ret

00003fcc <round>:
    3fcc:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fp_splitA>
    3fd0:	e8 f0       	brcs	.+58     	; 0x400c <round+0x40>
    3fd2:	9e 37       	cpi	r25, 0x7E	; 126
    3fd4:	e8 f0       	brcs	.+58     	; 0x4010 <round+0x44>
    3fd6:	96 39       	cpi	r25, 0x96	; 150
    3fd8:	b8 f4       	brcc	.+46     	; 0x4008 <round+0x3c>
    3fda:	9e 38       	cpi	r25, 0x8E	; 142
    3fdc:	48 f4       	brcc	.+18     	; 0x3ff0 <round+0x24>
    3fde:	67 2f       	mov	r22, r23
    3fe0:	78 2f       	mov	r23, r24
    3fe2:	88 27       	eor	r24, r24
    3fe4:	98 5f       	subi	r25, 0xF8	; 248
    3fe6:	f9 cf       	rjmp	.-14     	; 0x3fda <round+0xe>
    3fe8:	86 95       	lsr	r24
    3fea:	77 95       	ror	r23
    3fec:	67 95       	ror	r22
    3fee:	93 95       	inc	r25
    3ff0:	95 39       	cpi	r25, 0x95	; 149
    3ff2:	d0 f3       	brcs	.-12     	; 0x3fe8 <round+0x1c>
    3ff4:	b6 2f       	mov	r27, r22
    3ff6:	b1 70       	andi	r27, 0x01	; 1
    3ff8:	6b 0f       	add	r22, r27
    3ffa:	71 1d       	adc	r23, r1
    3ffc:	81 1d       	adc	r24, r1
    3ffe:	20 f4       	brcc	.+8      	; 0x4008 <round+0x3c>
    4000:	87 95       	ror	r24
    4002:	77 95       	ror	r23
    4004:	67 95       	ror	r22
    4006:	93 95       	inc	r25
    4008:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__fp_mintl>
    400c:	0c 94 25 20 	jmp	0x404a	; 0x404a <__fp_mpack>
    4010:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_szero>

00004014 <__fp_mintl>:
    4014:	88 23       	and	r24, r24
    4016:	71 f4       	brne	.+28     	; 0x4034 <__fp_mintl+0x20>
    4018:	77 23       	and	r23, r23
    401a:	21 f0       	breq	.+8      	; 0x4024 <__fp_mintl+0x10>
    401c:	98 50       	subi	r25, 0x08	; 8
    401e:	87 2b       	or	r24, r23
    4020:	76 2f       	mov	r23, r22
    4022:	07 c0       	rjmp	.+14     	; 0x4032 <__fp_mintl+0x1e>
    4024:	66 23       	and	r22, r22
    4026:	11 f4       	brne	.+4      	; 0x402c <__fp_mintl+0x18>
    4028:	99 27       	eor	r25, r25
    402a:	0d c0       	rjmp	.+26     	; 0x4046 <__fp_mintl+0x32>
    402c:	90 51       	subi	r25, 0x10	; 16
    402e:	86 2b       	or	r24, r22
    4030:	70 e0       	ldi	r23, 0x00	; 0
    4032:	60 e0       	ldi	r22, 0x00	; 0
    4034:	2a f0       	brmi	.+10     	; 0x4040 <__fp_mintl+0x2c>
    4036:	9a 95       	dec	r25
    4038:	66 0f       	add	r22, r22
    403a:	77 1f       	adc	r23, r23
    403c:	88 1f       	adc	r24, r24
    403e:	da f7       	brpl	.-10     	; 0x4036 <__fp_mintl+0x22>
    4040:	88 0f       	add	r24, r24
    4042:	96 95       	lsr	r25
    4044:	87 95       	ror	r24
    4046:	97 f9       	bld	r25, 7
    4048:	08 95       	ret

0000404a <__fp_mpack>:
    404a:	9f 3f       	cpi	r25, 0xFF	; 255
    404c:	31 f0       	breq	.+12     	; 0x405a <__fp_mpack_finite+0xc>

0000404e <__fp_mpack_finite>:
    404e:	91 50       	subi	r25, 0x01	; 1
    4050:	20 f4       	brcc	.+8      	; 0x405a <__fp_mpack_finite+0xc>
    4052:	87 95       	ror	r24
    4054:	77 95       	ror	r23
    4056:	67 95       	ror	r22
    4058:	b7 95       	ror	r27
    405a:	88 0f       	add	r24, r24
    405c:	91 1d       	adc	r25, r1
    405e:	96 95       	lsr	r25
    4060:	87 95       	ror	r24
    4062:	97 f9       	bld	r25, 7
    4064:	08 95       	ret

00004066 <__divmodhi4>:
    4066:	97 fb       	bst	r25, 7
    4068:	07 2e       	mov	r0, r23
    406a:	16 f4       	brtc	.+4      	; 0x4070 <__divmodhi4+0xa>
    406c:	00 94       	com	r0
    406e:	07 d0       	rcall	.+14     	; 0x407e <__divmodhi4_neg1>
    4070:	77 fd       	sbrc	r23, 7
    4072:	09 d0       	rcall	.+18     	; 0x4086 <__divmodhi4_neg2>
    4074:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__udivmodhi4>
    4078:	07 fc       	sbrc	r0, 7
    407a:	05 d0       	rcall	.+10     	; 0x4086 <__divmodhi4_neg2>
    407c:	3e f4       	brtc	.+14     	; 0x408c <__divmodhi4_exit>

0000407e <__divmodhi4_neg1>:
    407e:	90 95       	com	r25
    4080:	81 95       	neg	r24
    4082:	9f 4f       	sbci	r25, 0xFF	; 255
    4084:	08 95       	ret

00004086 <__divmodhi4_neg2>:
    4086:	70 95       	com	r23
    4088:	61 95       	neg	r22
    408a:	7f 4f       	sbci	r23, 0xFF	; 255

0000408c <__divmodhi4_exit>:
    408c:	08 95       	ret

0000408e <__udivmodsi4>:
    408e:	a1 e2       	ldi	r26, 0x21	; 33
    4090:	1a 2e       	mov	r1, r26
    4092:	aa 1b       	sub	r26, r26
    4094:	bb 1b       	sub	r27, r27
    4096:	fd 01       	movw	r30, r26
    4098:	0d c0       	rjmp	.+26     	; 0x40b4 <__udivmodsi4_ep>

0000409a <__udivmodsi4_loop>:
    409a:	aa 1f       	adc	r26, r26
    409c:	bb 1f       	adc	r27, r27
    409e:	ee 1f       	adc	r30, r30
    40a0:	ff 1f       	adc	r31, r31
    40a2:	a2 17       	cp	r26, r18
    40a4:	b3 07       	cpc	r27, r19
    40a6:	e4 07       	cpc	r30, r20
    40a8:	f5 07       	cpc	r31, r21
    40aa:	20 f0       	brcs	.+8      	; 0x40b4 <__udivmodsi4_ep>
    40ac:	a2 1b       	sub	r26, r18
    40ae:	b3 0b       	sbc	r27, r19
    40b0:	e4 0b       	sbc	r30, r20
    40b2:	f5 0b       	sbc	r31, r21

000040b4 <__udivmodsi4_ep>:
    40b4:	66 1f       	adc	r22, r22
    40b6:	77 1f       	adc	r23, r23
    40b8:	88 1f       	adc	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	1a 94       	dec	r1
    40be:	69 f7       	brne	.-38     	; 0x409a <__udivmodsi4_loop>
    40c0:	60 95       	com	r22
    40c2:	70 95       	com	r23
    40c4:	80 95       	com	r24
    40c6:	90 95       	com	r25
    40c8:	9b 01       	movw	r18, r22
    40ca:	ac 01       	movw	r20, r24
    40cc:	bd 01       	movw	r22, r26
    40ce:	cf 01       	movw	r24, r30
    40d0:	08 95       	ret

000040d2 <__umulhisi3>:
    40d2:	a2 9f       	mul	r26, r18
    40d4:	b0 01       	movw	r22, r0
    40d6:	b3 9f       	mul	r27, r19
    40d8:	c0 01       	movw	r24, r0
    40da:	a3 9f       	mul	r26, r19
    40dc:	70 0d       	add	r23, r0
    40de:	81 1d       	adc	r24, r1
    40e0:	11 24       	eor	r1, r1
    40e2:	91 1d       	adc	r25, r1
    40e4:	b2 9f       	mul	r27, r18
    40e6:	70 0d       	add	r23, r0
    40e8:	81 1d       	adc	r24, r1
    40ea:	11 24       	eor	r1, r1
    40ec:	91 1d       	adc	r25, r1
    40ee:	08 95       	ret

000040f0 <__udivmodhi4>:
    40f0:	aa 1b       	sub	r26, r26
    40f2:	bb 1b       	sub	r27, r27
    40f4:	51 e1       	ldi	r21, 0x11	; 17
    40f6:	07 c0       	rjmp	.+14     	; 0x4106 <__udivmodhi4_ep>

000040f8 <__udivmodhi4_loop>:
    40f8:	aa 1f       	adc	r26, r26
    40fa:	bb 1f       	adc	r27, r27
    40fc:	a6 17       	cp	r26, r22
    40fe:	b7 07       	cpc	r27, r23
    4100:	10 f0       	brcs	.+4      	; 0x4106 <__udivmodhi4_ep>
    4102:	a6 1b       	sub	r26, r22
    4104:	b7 0b       	sbc	r27, r23

00004106 <__udivmodhi4_ep>:
    4106:	88 1f       	adc	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	5a 95       	dec	r21
    410c:	a9 f7       	brne	.-22     	; 0x40f8 <__udivmodhi4_loop>
    410e:	80 95       	com	r24
    4110:	90 95       	com	r25
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	08 95       	ret

00004118 <malloc>:
    4118:	0f 93       	push	r16
    411a:	1f 93       	push	r17
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	82 30       	cpi	r24, 0x02	; 2
    4122:	91 05       	cpc	r25, r1
    4124:	10 f4       	brcc	.+4      	; 0x412a <malloc+0x12>
    4126:	82 e0       	ldi	r24, 0x02	; 2
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <__flp>
    412e:	f0 91 5f 05 	lds	r31, 0x055F	; 0x80055f <__flp+0x1>
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	a0 e0       	ldi	r26, 0x00	; 0
    4138:	b0 e0       	ldi	r27, 0x00	; 0
    413a:	30 97       	sbiw	r30, 0x00	; 0
    413c:	19 f1       	breq	.+70     	; 0x4184 <malloc+0x6c>
    413e:	40 81       	ld	r20, Z
    4140:	51 81       	ldd	r21, Z+1	; 0x01
    4142:	02 81       	ldd	r16, Z+2	; 0x02
    4144:	13 81       	ldd	r17, Z+3	; 0x03
    4146:	48 17       	cp	r20, r24
    4148:	59 07       	cpc	r21, r25
    414a:	c8 f0       	brcs	.+50     	; 0x417e <malloc+0x66>
    414c:	84 17       	cp	r24, r20
    414e:	95 07       	cpc	r25, r21
    4150:	69 f4       	brne	.+26     	; 0x416c <malloc+0x54>
    4152:	10 97       	sbiw	r26, 0x00	; 0
    4154:	31 f0       	breq	.+12     	; 0x4162 <malloc+0x4a>
    4156:	12 96       	adiw	r26, 0x02	; 2
    4158:	0c 93       	st	X, r16
    415a:	12 97       	sbiw	r26, 0x02	; 2
    415c:	13 96       	adiw	r26, 0x03	; 3
    415e:	1c 93       	st	X, r17
    4160:	27 c0       	rjmp	.+78     	; 0x41b0 <malloc+0x98>
    4162:	00 93 5e 05 	sts	0x055E, r16	; 0x80055e <__flp>
    4166:	10 93 5f 05 	sts	0x055F, r17	; 0x80055f <__flp+0x1>
    416a:	22 c0       	rjmp	.+68     	; 0x41b0 <malloc+0x98>
    416c:	21 15       	cp	r18, r1
    416e:	31 05       	cpc	r19, r1
    4170:	19 f0       	breq	.+6      	; 0x4178 <malloc+0x60>
    4172:	42 17       	cp	r20, r18
    4174:	53 07       	cpc	r21, r19
    4176:	18 f4       	brcc	.+6      	; 0x417e <malloc+0x66>
    4178:	9a 01       	movw	r18, r20
    417a:	bd 01       	movw	r22, r26
    417c:	ef 01       	movw	r28, r30
    417e:	df 01       	movw	r26, r30
    4180:	f8 01       	movw	r30, r16
    4182:	db cf       	rjmp	.-74     	; 0x413a <malloc+0x22>
    4184:	21 15       	cp	r18, r1
    4186:	31 05       	cpc	r19, r1
    4188:	f9 f0       	breq	.+62     	; 0x41c8 <malloc+0xb0>
    418a:	28 1b       	sub	r18, r24
    418c:	39 0b       	sbc	r19, r25
    418e:	24 30       	cpi	r18, 0x04	; 4
    4190:	31 05       	cpc	r19, r1
    4192:	80 f4       	brcc	.+32     	; 0x41b4 <malloc+0x9c>
    4194:	8a 81       	ldd	r24, Y+2	; 0x02
    4196:	9b 81       	ldd	r25, Y+3	; 0x03
    4198:	61 15       	cp	r22, r1
    419a:	71 05       	cpc	r23, r1
    419c:	21 f0       	breq	.+8      	; 0x41a6 <malloc+0x8e>
    419e:	fb 01       	movw	r30, r22
    41a0:	93 83       	std	Z+3, r25	; 0x03
    41a2:	82 83       	std	Z+2, r24	; 0x02
    41a4:	04 c0       	rjmp	.+8      	; 0x41ae <malloc+0x96>
    41a6:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <__flp+0x1>
    41aa:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <__flp>
    41ae:	fe 01       	movw	r30, r28
    41b0:	32 96       	adiw	r30, 0x02	; 2
    41b2:	44 c0       	rjmp	.+136    	; 0x423c <malloc+0x124>
    41b4:	fe 01       	movw	r30, r28
    41b6:	e2 0f       	add	r30, r18
    41b8:	f3 1f       	adc	r31, r19
    41ba:	81 93       	st	Z+, r24
    41bc:	91 93       	st	Z+, r25
    41be:	22 50       	subi	r18, 0x02	; 2
    41c0:	31 09       	sbc	r19, r1
    41c2:	39 83       	std	Y+1, r19	; 0x01
    41c4:	28 83       	st	Y, r18
    41c6:	3a c0       	rjmp	.+116    	; 0x423c <malloc+0x124>
    41c8:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <__brkval>
    41cc:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <__brkval+0x1>
    41d0:	23 2b       	or	r18, r19
    41d2:	41 f4       	brne	.+16     	; 0x41e4 <malloc+0xcc>
    41d4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    41d8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    41dc:	30 93 5d 05 	sts	0x055D, r19	; 0x80055d <__brkval+0x1>
    41e0:	20 93 5c 05 	sts	0x055C, r18	; 0x80055c <__brkval>
    41e4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    41e8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    41ec:	21 15       	cp	r18, r1
    41ee:	31 05       	cpc	r19, r1
    41f0:	41 f4       	brne	.+16     	; 0x4202 <malloc+0xea>
    41f2:	2d b7       	in	r18, 0x3d	; 61
    41f4:	3e b7       	in	r19, 0x3e	; 62
    41f6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    41fa:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    41fe:	24 1b       	sub	r18, r20
    4200:	35 0b       	sbc	r19, r21
    4202:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <__brkval>
    4206:	f0 91 5d 05 	lds	r31, 0x055D	; 0x80055d <__brkval+0x1>
    420a:	e2 17       	cp	r30, r18
    420c:	f3 07       	cpc	r31, r19
    420e:	a0 f4       	brcc	.+40     	; 0x4238 <malloc+0x120>
    4210:	2e 1b       	sub	r18, r30
    4212:	3f 0b       	sbc	r19, r31
    4214:	28 17       	cp	r18, r24
    4216:	39 07       	cpc	r19, r25
    4218:	78 f0       	brcs	.+30     	; 0x4238 <malloc+0x120>
    421a:	ac 01       	movw	r20, r24
    421c:	4e 5f       	subi	r20, 0xFE	; 254
    421e:	5f 4f       	sbci	r21, 0xFF	; 255
    4220:	24 17       	cp	r18, r20
    4222:	35 07       	cpc	r19, r21
    4224:	48 f0       	brcs	.+18     	; 0x4238 <malloc+0x120>
    4226:	4e 0f       	add	r20, r30
    4228:	5f 1f       	adc	r21, r31
    422a:	50 93 5d 05 	sts	0x055D, r21	; 0x80055d <__brkval+0x1>
    422e:	40 93 5c 05 	sts	0x055C, r20	; 0x80055c <__brkval>
    4232:	81 93       	st	Z+, r24
    4234:	91 93       	st	Z+, r25
    4236:	02 c0       	rjmp	.+4      	; 0x423c <malloc+0x124>
    4238:	e0 e0       	ldi	r30, 0x00	; 0
    423a:	f0 e0       	ldi	r31, 0x00	; 0
    423c:	cf 01       	movw	r24, r30
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	08 95       	ret

00004248 <free>:
    4248:	cf 93       	push	r28
    424a:	df 93       	push	r29
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	09 f4       	brne	.+2      	; 0x4252 <free+0xa>
    4250:	81 c0       	rjmp	.+258    	; 0x4354 <free+0x10c>
    4252:	fc 01       	movw	r30, r24
    4254:	32 97       	sbiw	r30, 0x02	; 2
    4256:	13 82       	std	Z+3, r1	; 0x03
    4258:	12 82       	std	Z+2, r1	; 0x02
    425a:	a0 91 5e 05 	lds	r26, 0x055E	; 0x80055e <__flp>
    425e:	b0 91 5f 05 	lds	r27, 0x055F	; 0x80055f <__flp+0x1>
    4262:	10 97       	sbiw	r26, 0x00	; 0
    4264:	81 f4       	brne	.+32     	; 0x4286 <free+0x3e>
    4266:	20 81       	ld	r18, Z
    4268:	31 81       	ldd	r19, Z+1	; 0x01
    426a:	82 0f       	add	r24, r18
    426c:	93 1f       	adc	r25, r19
    426e:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <__brkval>
    4272:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <__brkval+0x1>
    4276:	28 17       	cp	r18, r24
    4278:	39 07       	cpc	r19, r25
    427a:	51 f5       	brne	.+84     	; 0x42d0 <free+0x88>
    427c:	f0 93 5d 05 	sts	0x055D, r31	; 0x80055d <__brkval+0x1>
    4280:	e0 93 5c 05 	sts	0x055C, r30	; 0x80055c <__brkval>
    4284:	67 c0       	rjmp	.+206    	; 0x4354 <free+0x10c>
    4286:	ed 01       	movw	r28, r26
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	ce 17       	cp	r28, r30
    428e:	df 07       	cpc	r29, r31
    4290:	40 f4       	brcc	.+16     	; 0x42a2 <free+0x5a>
    4292:	4a 81       	ldd	r20, Y+2	; 0x02
    4294:	5b 81       	ldd	r21, Y+3	; 0x03
    4296:	9e 01       	movw	r18, r28
    4298:	41 15       	cp	r20, r1
    429a:	51 05       	cpc	r21, r1
    429c:	f1 f0       	breq	.+60     	; 0x42da <free+0x92>
    429e:	ea 01       	movw	r28, r20
    42a0:	f5 cf       	rjmp	.-22     	; 0x428c <free+0x44>
    42a2:	d3 83       	std	Z+3, r29	; 0x03
    42a4:	c2 83       	std	Z+2, r28	; 0x02
    42a6:	40 81       	ld	r20, Z
    42a8:	51 81       	ldd	r21, Z+1	; 0x01
    42aa:	84 0f       	add	r24, r20
    42ac:	95 1f       	adc	r25, r21
    42ae:	c8 17       	cp	r28, r24
    42b0:	d9 07       	cpc	r29, r25
    42b2:	59 f4       	brne	.+22     	; 0x42ca <free+0x82>
    42b4:	88 81       	ld	r24, Y
    42b6:	99 81       	ldd	r25, Y+1	; 0x01
    42b8:	84 0f       	add	r24, r20
    42ba:	95 1f       	adc	r25, r21
    42bc:	02 96       	adiw	r24, 0x02	; 2
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
    42c2:	8a 81       	ldd	r24, Y+2	; 0x02
    42c4:	9b 81       	ldd	r25, Y+3	; 0x03
    42c6:	93 83       	std	Z+3, r25	; 0x03
    42c8:	82 83       	std	Z+2, r24	; 0x02
    42ca:	21 15       	cp	r18, r1
    42cc:	31 05       	cpc	r19, r1
    42ce:	29 f4       	brne	.+10     	; 0x42da <free+0x92>
    42d0:	f0 93 5f 05 	sts	0x055F, r31	; 0x80055f <__flp+0x1>
    42d4:	e0 93 5e 05 	sts	0x055E, r30	; 0x80055e <__flp>
    42d8:	3d c0       	rjmp	.+122    	; 0x4354 <free+0x10c>
    42da:	e9 01       	movw	r28, r18
    42dc:	fb 83       	std	Y+3, r31	; 0x03
    42de:	ea 83       	std	Y+2, r30	; 0x02
    42e0:	49 91       	ld	r20, Y+
    42e2:	59 91       	ld	r21, Y+
    42e4:	c4 0f       	add	r28, r20
    42e6:	d5 1f       	adc	r29, r21
    42e8:	ec 17       	cp	r30, r28
    42ea:	fd 07       	cpc	r31, r29
    42ec:	61 f4       	brne	.+24     	; 0x4306 <free+0xbe>
    42ee:	80 81       	ld	r24, Z
    42f0:	91 81       	ldd	r25, Z+1	; 0x01
    42f2:	84 0f       	add	r24, r20
    42f4:	95 1f       	adc	r25, r21
    42f6:	02 96       	adiw	r24, 0x02	; 2
    42f8:	e9 01       	movw	r28, r18
    42fa:	99 83       	std	Y+1, r25	; 0x01
    42fc:	88 83       	st	Y, r24
    42fe:	82 81       	ldd	r24, Z+2	; 0x02
    4300:	93 81       	ldd	r25, Z+3	; 0x03
    4302:	9b 83       	std	Y+3, r25	; 0x03
    4304:	8a 83       	std	Y+2, r24	; 0x02
    4306:	e0 e0       	ldi	r30, 0x00	; 0
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	12 96       	adiw	r26, 0x02	; 2
    430c:	8d 91       	ld	r24, X+
    430e:	9c 91       	ld	r25, X
    4310:	13 97       	sbiw	r26, 0x03	; 3
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	19 f0       	breq	.+6      	; 0x431c <free+0xd4>
    4316:	fd 01       	movw	r30, r26
    4318:	dc 01       	movw	r26, r24
    431a:	f7 cf       	rjmp	.-18     	; 0x430a <free+0xc2>
    431c:	8d 91       	ld	r24, X+
    431e:	9c 91       	ld	r25, X
    4320:	11 97       	sbiw	r26, 0x01	; 1
    4322:	9d 01       	movw	r18, r26
    4324:	2e 5f       	subi	r18, 0xFE	; 254
    4326:	3f 4f       	sbci	r19, 0xFF	; 255
    4328:	82 0f       	add	r24, r18
    432a:	93 1f       	adc	r25, r19
    432c:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <__brkval>
    4330:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <__brkval+0x1>
    4334:	28 17       	cp	r18, r24
    4336:	39 07       	cpc	r19, r25
    4338:	69 f4       	brne	.+26     	; 0x4354 <free+0x10c>
    433a:	30 97       	sbiw	r30, 0x00	; 0
    433c:	29 f4       	brne	.+10     	; 0x4348 <free+0x100>
    433e:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <__flp+0x1>
    4342:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <__flp>
    4346:	02 c0       	rjmp	.+4      	; 0x434c <free+0x104>
    4348:	13 82       	std	Z+3, r1	; 0x03
    434a:	12 82       	std	Z+2, r1	; 0x02
    434c:	b0 93 5d 05 	sts	0x055D, r27	; 0x80055d <__brkval+0x1>
    4350:	a0 93 5c 05 	sts	0x055C, r26	; 0x80055c <__brkval>
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	08 95       	ret

0000435a <eeprom_read_byte>:
    435a:	e1 99       	sbic	0x1c, 1	; 28
    435c:	fe cf       	rjmp	.-4      	; 0x435a <eeprom_read_byte>
    435e:	9f bb       	out	0x1f, r25	; 31
    4360:	8e bb       	out	0x1e, r24	; 30
    4362:	e0 9a       	sbi	0x1c, 0	; 28
    4364:	99 27       	eor	r25, r25
    4366:	8d b3       	in	r24, 0x1d	; 29
    4368:	08 95       	ret

0000436a <eeprom_read_dword>:
    436a:	a6 e1       	ldi	r26, 0x16	; 22
    436c:	b0 e0       	ldi	r27, 0x00	; 0
    436e:	44 e0       	ldi	r20, 0x04	; 4
    4370:	50 e0       	ldi	r21, 0x00	; 0
    4372:	0c 94 dd 21 	jmp	0x43ba	; 0x43ba <eeprom_read_blraw>

00004376 <eeprom_read_word>:
    4376:	a8 e1       	ldi	r26, 0x18	; 24
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	42 e0       	ldi	r20, 0x02	; 2
    437c:	50 e0       	ldi	r21, 0x00	; 0
    437e:	0c 94 dd 21 	jmp	0x43ba	; 0x43ba <eeprom_read_blraw>

00004382 <eeprom_write_byte>:
    4382:	26 2f       	mov	r18, r22

00004384 <eeprom_write_r18>:
    4384:	e1 99       	sbic	0x1c, 1	; 28
    4386:	fe cf       	rjmp	.-4      	; 0x4384 <eeprom_write_r18>
    4388:	9f bb       	out	0x1f, r25	; 31
    438a:	8e bb       	out	0x1e, r24	; 30
    438c:	2d bb       	out	0x1d, r18	; 29
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	f8 94       	cli
    4392:	e2 9a       	sbi	0x1c, 2	; 28
    4394:	e1 9a       	sbi	0x1c, 1	; 28
    4396:	0f be       	out	0x3f, r0	; 63
    4398:	01 96       	adiw	r24, 0x01	; 1
    439a:	08 95       	ret

0000439c <eeprom_write_dword>:
    439c:	24 2f       	mov	r18, r20
    439e:	0e 94 c2 21 	call	0x4384	; 0x4384 <eeprom_write_r18>
    43a2:	25 2f       	mov	r18, r21
    43a4:	0e 94 c2 21 	call	0x4384	; 0x4384 <eeprom_write_r18>
    43a8:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <eeprom_write_word>

000043ac <eeprom_write_word>:
    43ac:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeprom_write_byte>
    43b0:	27 2f       	mov	r18, r23
    43b2:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <eeprom_write_r18>

000043b6 <eeprom_read_block>:
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22

000043ba <eeprom_read_blraw>:
    43ba:	fc 01       	movw	r30, r24
    43bc:	e1 99       	sbic	0x1c, 1	; 28
    43be:	fe cf       	rjmp	.-4      	; 0x43bc <eeprom_read_blraw+0x2>
    43c0:	06 c0       	rjmp	.+12     	; 0x43ce <eeprom_read_blraw+0x14>
    43c2:	ff bb       	out	0x1f, r31	; 31
    43c4:	ee bb       	out	0x1e, r30	; 30
    43c6:	e0 9a       	sbi	0x1c, 0	; 28
    43c8:	31 96       	adiw	r30, 0x01	; 1
    43ca:	0d b2       	in	r0, 0x1d	; 29
    43cc:	0d 92       	st	X+, r0
    43ce:	41 50       	subi	r20, 0x01	; 1
    43d0:	50 40       	sbci	r21, 0x00	; 0
    43d2:	b8 f7       	brcc	.-18     	; 0x43c2 <eeprom_read_blraw+0x8>
    43d4:	08 95       	ret

000043d6 <_exit>:
    43d6:	f8 94       	cli

000043d8 <__stop_program>:
    43d8:	ff cf       	rjmp	.-2      	; 0x43d8 <__stop_program>
