
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003864  000038f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000043d  008000f6  008000f6  0000398e  2**0
                  ALLOC
  3 .stab         00002850  00000000  00000000  00003990  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a8e  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006c6e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  00006c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000046f9  00000000  00000000  00006f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000083a  00000000  00000000  0000b64e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001156  00000000  00000000  0000be88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b74  00000000  00000000  0000cfe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bb2  00000000  00000000  0000db54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000050a1  00000000  00000000  0000e706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  000137a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__ctors_end>
       4:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
       8:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_2>
       c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      10:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_4>
      14:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      18:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      1c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      20:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      24:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_9>
      28:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_10>
      2c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      30:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      34:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      38:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      3c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      40:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      44:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      48:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      4c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      50:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>

00000054 <Arial_Narrow18x32>:
      54:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
      64:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
      74:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
      84:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
      94:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
      a4:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
      b4:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
      c4:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
      d4:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
      e4:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
      f4:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     104:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     114:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     124:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     134:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     144:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     154:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     164:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     174:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     184:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     194:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     1a4:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     1b4:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     1c4:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     1d4:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     1e4:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     1f4:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     204:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     214:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     224:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     234:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     244:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     254:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     264:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     274:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     284:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     294:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     2a4:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     2b4:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     2c4:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     2d4:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     2e4:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     2f4:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     304:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     314:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     324:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     334:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     344:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     354:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     364:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     374:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     384:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     394:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     3a4:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     3b4:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     3c4:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     3d4:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     3e4:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     3f4:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     404:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     414:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     424:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     434:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     444:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     460:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     498:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     4a8:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     4b8:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     4c8:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     4d8:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     4e8:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     4f8:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     508:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     518:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     528:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     538:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     548:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     558:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     574:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     584:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     594:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     5a4:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     5b4:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     5c4:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     5d4:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     5e4:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     5f4:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     604:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     614:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     624:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     634:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     644:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     654:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     664:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     674:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     684:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     694:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     6a4:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     6b4:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     6c4:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     6d4:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     6e4:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     6f4:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     704:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     714:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     724:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     734:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     744:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     754:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     764:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     774:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     784:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     794:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     7a4:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     7b4:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

000007be <arrowLeft>:
	...
     7d2:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     826:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     836:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     846:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     856:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     866:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     876:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     886:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     896:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8a6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8c6:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     8d6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8f6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     906:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     916:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     926:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     936:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     946:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     956:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     966:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     976:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     986:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     996:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     9a6:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9b6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9c6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9d6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
     9fa:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00000a42 <arrowRight>:
	...
     a7e:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
     a9e:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     aae:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     abe:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     ace:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
     ade:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
     afa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b0a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b1a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b2a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b3a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b4a:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
     b5a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b6a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b7a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b8a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b9a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     baa:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
     bba:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bca:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bda:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bea:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bfa:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
     c0a:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c1a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c2a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c3a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c4a:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
     c5a:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ca6:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

00000cc6 <skull>:
     cc6:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
     cde:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
     cee:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
     cfe:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
     d0e:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
     d1e:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
     d2e:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
     d3e:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d4e:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
     d5e:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
     d6e:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
     d7e:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
     d8e:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
     d9e:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
     dae:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
     dbe:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dce:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
     dde:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
     dee:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
     dfe:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
     e0e:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e1e:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
     e2e:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
     e3e:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
     e4e:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
     e5e:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
     e6e:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
     e7e:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
     e8e:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
     e9e:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
     eb6:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
     ec6:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
     ed6:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     ee6:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
     ef6:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
     f0e:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00000f20 <Font5x8>:
     f20:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     f30:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     f40:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     f50:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     f60:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     f70:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     f80:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     f90:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     fa0:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     fb0:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     fc0:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     fd0:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     fe0:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     ff0:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
    1000:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
    1010:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
    1020:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
    1030:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
    1040:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
    1050:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
    1060:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
    1070:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
    1080:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
    1090:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
    10a0:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
    10b0:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
    10c0:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
    10d0:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
    10e0:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
    10f0:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
    1100:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
    1110:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
    1120:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
    1130:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
    1140:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
    1150:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00001160 <__ctors_end>:
    1160:	11 24       	eor	r1, r1
    1162:	1f be       	out	0x3f, r1	; 63
    1164:	cf e5       	ldi	r28, 0x5F	; 95
    1166:	d8 e0       	ldi	r29, 0x08	; 8
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	cd bf       	out	0x3d, r28	; 61

0000116c <__do_copy_data>:
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	a0 e6       	ldi	r26, 0x60	; 96
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e4 e6       	ldi	r30, 0x64	; 100
    1174:	f8 e3       	ldi	r31, 0x38	; 56
    1176:	02 c0       	rjmp	.+4      	; 0x117c <__do_copy_data+0x10>
    1178:	05 90       	lpm	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	a6 3f       	cpi	r26, 0xF6	; 246
    117e:	b1 07       	cpc	r27, r17
    1180:	d9 f7       	brne	.-10     	; 0x1178 <__do_copy_data+0xc>

00001182 <__do_clear_bss>:
    1182:	25 e0       	ldi	r18, 0x05	; 5
    1184:	a6 ef       	ldi	r26, 0xF6	; 246
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	01 c0       	rjmp	.+2      	; 0x118c <.do_clear_bss_start>

0000118a <.do_clear_bss_loop>:
    118a:	1d 92       	st	X+, r1

0000118c <.do_clear_bss_start>:
    118c:	a3 33       	cpi	r26, 0x33	; 51
    118e:	b2 07       	cpc	r27, r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <.do_clear_bss_loop>
    1192:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <main>
    1196:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <_exit>

0000119a <__bad_interrupt>:
    119a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000119e <step>:

void step(char mode){
	char tempPort = 0;
	signed int tempPhase = 0;
	
	if (dir)
    119e:	90 91 fd 00 	lds	r25, 0x00FD
    11a2:	99 23       	and	r25, r25
    11a4:	a9 f0       	breq	.+42     	; 0x11d0 <step+0x32>
	{
		phase++;
    11a6:	20 91 fe 00 	lds	r18, 0x00FE
    11aa:	30 91 ff 00 	lds	r19, 0x00FF
    11ae:	2f 5f       	subi	r18, 0xFF	; 255
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	30 93 ff 00 	sts	0x00FF, r19
    11b6:	20 93 fe 00 	sts	0x00FE, r18
		steps++;
    11ba:	20 91 fb 00 	lds	r18, 0x00FB
    11be:	30 91 fc 00 	lds	r19, 0x00FC
    11c2:	2f 5f       	subi	r18, 0xFF	; 255
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	30 93 fc 00 	sts	0x00FC, r19
    11ca:	20 93 fb 00 	sts	0x00FB, r18
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <step+0x5a>
	}
	else
	{
		phase--;
    11d0:	20 91 fe 00 	lds	r18, 0x00FE
    11d4:	30 91 ff 00 	lds	r19, 0x00FF
    11d8:	21 50       	subi	r18, 0x01	; 1
    11da:	31 09       	sbc	r19, r1
    11dc:	30 93 ff 00 	sts	0x00FF, r19
    11e0:	20 93 fe 00 	sts	0x00FE, r18
		steps--;
    11e4:	20 91 fb 00 	lds	r18, 0x00FB
    11e8:	30 91 fc 00 	lds	r19, 0x00FC
    11ec:	21 50       	subi	r18, 0x01	; 1
    11ee:	31 09       	sbc	r19, r1
    11f0:	30 93 fc 00 	sts	0x00FC, r19
    11f4:	20 93 fb 00 	sts	0x00FB, r18
	}
	if(mode == FULL_STEP_ONE_PHASE){
    11f8:	81 11       	cpse	r24, r1
    11fa:	17 c0       	rjmp	.+46     	; 0x122a <step+0x8c>
		if (phase < 0) phase = 3;
    11fc:	80 91 fe 00 	lds	r24, 0x00FE
    1200:	90 91 ff 00 	lds	r25, 0x00FF
    1204:	99 23       	and	r25, r25
    1206:	34 f4       	brge	.+12     	; 0x1214 <step+0x76>
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	90 93 ff 00 	sts	0x00FF, r25
    1210:	80 93 fe 00 	sts	0x00FE, r24
		if (phase > 3) phase = 0;
    1214:	80 91 fe 00 	lds	r24, 0x00FE
    1218:	90 91 ff 00 	lds	r25, 0x00FF
    121c:	04 97       	sbiw	r24, 0x04	; 4
    121e:	2c f1       	brlt	.+74     	; 0x126a <step+0xcc>
    1220:	10 92 ff 00 	sts	0x00FF, r1
    1224:	10 92 fe 00 	sts	0x00FE, r1
    1228:	20 c0       	rjmp	.+64     	; 0x126a <step+0xcc>
	}
	if(mode == HALF_STEP){
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	81 f5       	brne	.+96     	; 0x128e <step+0xf0>
		if (phase < 0) phase = 7;
    122e:	80 91 fe 00 	lds	r24, 0x00FE
    1232:	90 91 ff 00 	lds	r25, 0x00FF
    1236:	99 23       	and	r25, r25
    1238:	34 f4       	brge	.+12     	; 0x1246 <step+0xa8>
    123a:	87 e0       	ldi	r24, 0x07	; 7
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	90 93 ff 00 	sts	0x00FF, r25
    1242:	80 93 fe 00 	sts	0x00FE, r24
		if (phase > 7) phase = 0;
    1246:	80 91 fe 00 	lds	r24, 0x00FE
    124a:	90 91 ff 00 	lds	r25, 0x00FF
    124e:	08 97       	sbiw	r24, 0x08	; 8
    1250:	bc f0       	brlt	.+46     	; 0x1280 <step+0xe2>
    1252:	10 92 ff 00 	sts	0x00FF, r1
    1256:	10 92 fe 00 	sts	0x00FE, r1
    125a:	12 c0       	rjmp	.+36     	; 0x1280 <step+0xe2>
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
	if(mode == FULL_STEP_ONE_PHASE) tempPort|=phase_arr_full_step_1phase[tempPhase];
	if(mode == HALF_STEP) tempPort|=phase_arr_half_step[tempPhase];
    125c:	f9 01       	movw	r30, r18
    125e:	e7 51       	subi	r30, 0x17	; 23
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	98 2b       	or	r25, r24

	PORTA = tempPort;
    1266:	9b bb       	out	0x1b, r25	; 27
    1268:	08 95       	ret
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	} 
	tempPhase=phase;
    126a:	e0 91 fe 00 	lds	r30, 0x00FE
    126e:	f0 91 ff 00 	lds	r31, 0x00FF

	tempPort=PORTA;
    1272:	9b b3       	in	r25, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    1274:	90 7f       	andi	r25, 0xF0	; 240
	if(mode == FULL_STEP_ONE_PHASE) tempPort|=phase_arr_full_step_1phase[tempPhase];
    1276:	ef 50       	subi	r30, 0x0F	; 15
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	98 2b       	or	r25, r24
    127e:	f3 cf       	rjmp	.-26     	; 0x1266 <step+0xc8>
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	} 
	tempPhase=phase;
    1280:	20 91 fe 00 	lds	r18, 0x00FE
    1284:	30 91 ff 00 	lds	r19, 0x00FF

	tempPort=PORTA;
    1288:	9b b3       	in	r25, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    128a:	90 7f       	andi	r25, 0xF0	; 240
    128c:	e7 cf       	rjmp	.-50     	; 0x125c <step+0xbe>
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	} 
	tempPhase=phase;
    128e:	20 91 fe 00 	lds	r18, 0x00FE
    1292:	30 91 ff 00 	lds	r19, 0x00FF

	tempPort=PORTA;
    1296:	9b b3       	in	r25, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    1298:	90 7f       	andi	r25, 0xF0	; 240
	if(mode == FULL_STEP_ONE_PHASE) tempPort|=phase_arr_full_step_1phase[tempPhase];
	if(mode == HALF_STEP) tempPort|=phase_arr_half_step[tempPhase];
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	21 f7       	brne	.-56     	; 0x1266 <step+0xc8>
    129e:	de cf       	rjmp	.-68     	; 0x125c <step+0xbe>

000012a0 <__vector_10>:
GLCD_SetContrast(lcdContrast);

sei();
}

ISR( TIMER0_COMP_vect ){
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31

step(stepMode);		
    12c2:	80 91 60 00 	lds	r24, 0x0060
    12c6:	0e 94 cf 08 	call	0x119e	; 0x119e <step>
	if (steps == newSteps){
    12ca:	20 91 fb 00 	lds	r18, 0x00FB
    12ce:	30 91 fc 00 	lds	r19, 0x00FC
    12d2:	80 91 10 01 	lds	r24, 0x0110
    12d6:	90 91 11 01 	lds	r25, 0x0111
    12da:	28 17       	cp	r18, r24
    12dc:	39 07       	cpc	r19, r25
    12de:	39 f4       	brne	.+14     	; 0x12ee <__vector_10+0x4e>
	arrowMoving = 0;
    12e0:	10 92 12 01 	sts	0x0112, r1
	TCCR0=0;
    12e4:	13 be       	out	0x33, r1	; 51
	OCR0=0;
    12e6:	1c be       	out	0x3c, r1	; 60
	TIMSK&=~_BV(OCIE0);
    12e8:	89 b7       	in	r24, 0x39	; 57
    12ea:	8d 7f       	andi	r24, 0xFD	; 253
    12ec:	89 bf       	out	0x39, r24	; 57
	}
}
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_4>:
	GLCD_Render();
	*/
}


ISR( TIMER2_COMP_vect ){
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
	speedTimer++; //speedTimer increments each period timePerTic*TIC
    131e:	80 91 25 01 	lds	r24, 0x0125
    1322:	90 91 26 01 	lds	r25, 0x0126
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	90 93 26 01 	sts	0x0126, r25
    132c:	80 93 25 01 	sts	0x0125, r24
	}
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_9>:
ISR (TIMER1_OVF_vect){
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	8f 93       	push	r24
    134a:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    134c:	80 91 0f 01 	lds	r24, 0x010F
    1350:	88 23       	and	r24, r24
    1352:	49 f0       	breq	.+18     	; 0x1366 <__vector_9+0x28>
    1354:	80 91 0c 01 	lds	r24, 0x010C
    1358:	90 91 0d 01 	lds	r25, 0x010D
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	90 93 0d 01 	sts	0x010D, r25
    1362:	80 93 0c 01 	sts	0x010C, r24
}
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_2>:
ISR(INT1_vect){
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	8f 93       	push	r24
    1388:	9f 93       	push	r25
    138a:	af 93       	push	r26
    138c:	bf 93       	push	r27
//interrupt occurs when Hall sensor is triggered
if (firstMeasure==0)
    138e:	80 91 0e 01 	lds	r24, 0x010E
    1392:	81 11       	cpse	r24, r1
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <__vector_2+0x32>
	{
		TIMSK|=_BV(OCIE2);
    1396:	89 b7       	in	r24, 0x39	; 57
    1398:	80 68       	ori	r24, 0x80	; 128
    139a:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0;
    139c:	14 bc       	out	0x24, r1	; 36
		firstMeasure = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 0e 01 	sts	0x010E, r24
    13a4:	2c c0       	rjmp	.+88     	; 0x13fe <__vector_2+0x8a>
		//first triggering of the sensor starts TIMER2
	}
else
	{
		speedTimerRecent = (speedTimer*TIC)+TCNT2;
    13a6:	20 91 25 01 	lds	r18, 0x0125
    13aa:	30 91 26 01 	lds	r19, 0x0126
    13ae:	44 b5       	in	r20, 0x24	; 36
    13b0:	54 e1       	ldi	r21, 0x14	; 20
    13b2:	52 9f       	mul	r21, r18
    13b4:	c0 01       	movw	r24, r0
    13b6:	53 9f       	mul	r21, r19
    13b8:	90 0d       	add	r25, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	84 0f       	add	r24, r20
    13be:	91 1d       	adc	r25, r1
    13c0:	90 93 24 01 	sts	0x0124, r25
    13c4:	80 93 23 01 	sts	0x0123, r24
		TCNT2 = 0;	
    13c8:	14 bc       	out	0x24, r1	; 36
		speedTimer = 0;
    13ca:	10 92 26 01 	sts	0x0126, r1
    13ce:	10 92 25 01 	sts	0x0125, r1
		speedRefresh = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 77 00 	sts	0x0077, r24
		totalRotations++;
    13d8:	80 91 1f 01 	lds	r24, 0x011F
    13dc:	90 91 20 01 	lds	r25, 0x0120
    13e0:	a0 91 21 01 	lds	r26, 0x0121
    13e4:	b0 91 22 01 	lds	r27, 0x0122
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	a1 1d       	adc	r26, r1
    13ec:	b1 1d       	adc	r27, r1
    13ee:	80 93 1f 01 	sts	0x011F, r24
    13f2:	90 93 20 01 	sts	0x0120, r25
    13f6:	a0 93 21 01 	sts	0x0121, r26
    13fa:	b0 93 22 01 	sts	0x0122, r27
	}
}
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <main_screen>:
	}
	
}

void main_screen()
{
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
	if (!signalOn){
    142e:	80 91 0f 01 	lds	r24, 0x010F
    1432:	81 11       	cpse	r24, r1
    1434:	e6 c0       	rjmp	.+460    	; 0x1602 <main_screen+0x1ea>
	
	uint8_t offsetX = 10;
	uint8_t offsetY = 11;
		GLCD_Clear();
    1436:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    143a:	0f ef       	ldi	r16, 0xFF	; 255
    143c:	27 e1       	ldi	r18, 0x17	; 23
    143e:	44 e2       	ldi	r20, 0x24	; 36
    1440:	6b e0       	ldi	r22, 0x0B	; 11
    1442:	8a e0       	ldi	r24, 0x0A	; 10
    1444:	0e 94 20 15 	call	0x2a40	; 0x2a40 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    1448:	24 e1       	ldi	r18, 0x14	; 20
    144a:	46 e2       	ldi	r20, 0x26	; 38
    144c:	6e e0       	ldi	r22, 0x0E	; 14
    144e:	85 e2       	ldi	r24, 0x25	; 37
    1450:	0e 94 20 15 	call	0x2a40	; 0x2a40 <GLCD_DrawRectangle>
		
		
		if (voltage>=105)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    1454:	80 91 f8 00 	lds	r24, 0x00F8
    1458:	90 91 f9 00 	lds	r25, 0x00F9
    145c:	89 36       	cpi	r24, 0x69	; 105
    145e:	91 05       	cpc	r25, r1
    1460:	34 f0       	brlt	.+12     	; 0x146e <main_screen+0x56>
    1462:	25 e1       	ldi	r18, 0x15	; 21
    1464:	40 e1       	ldi	r20, 0x10	; 16
    1466:	6d e0       	ldi	r22, 0x0D	; 13
    1468:	8c e0       	ldi	r24, 0x0C	; 12
    146a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_FillRectangle>
		if (voltage>=110)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    146e:	80 91 f8 00 	lds	r24, 0x00F8
    1472:	90 91 f9 00 	lds	r25, 0x00F9
    1476:	8e 36       	cpi	r24, 0x6E	; 110
    1478:	91 05       	cpc	r25, r1
    147a:	3c f0       	brlt	.+14     	; 0x148a <main_screen+0x72>
    147c:	0f ef       	ldi	r16, 0xFF	; 255
    147e:	25 e1       	ldi	r18, 0x15	; 21
    1480:	46 e1       	ldi	r20, 0x16	; 22
    1482:	6d e0       	ldi	r22, 0x0D	; 13
    1484:	82 e1       	ldi	r24, 0x12	; 18
    1486:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_FillRectangle>
		if (voltage>=115)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    148a:	80 91 f8 00 	lds	r24, 0x00F8
    148e:	90 91 f9 00 	lds	r25, 0x00F9
    1492:	83 37       	cpi	r24, 0x73	; 115
    1494:	91 05       	cpc	r25, r1
    1496:	3c f0       	brlt	.+14     	; 0x14a6 <main_screen+0x8e>
    1498:	0f ef       	ldi	r16, 0xFF	; 255
    149a:	25 e1       	ldi	r18, 0x15	; 21
    149c:	4c e1       	ldi	r20, 0x1C	; 28
    149e:	6d e0       	ldi	r22, 0x0D	; 13
    14a0:	88 e1       	ldi	r24, 0x18	; 24
    14a2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_FillRectangle>
		if (voltage>=120)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    14a6:	80 91 f8 00 	lds	r24, 0x00F8
    14aa:	90 91 f9 00 	lds	r25, 0x00F9
    14ae:	88 37       	cpi	r24, 0x78	; 120
    14b0:	91 05       	cpc	r25, r1
    14b2:	3c f0       	brlt	.+14     	; 0x14c2 <main_screen+0xaa>
    14b4:	0f ef       	ldi	r16, 0xFF	; 255
    14b6:	25 e1       	ldi	r18, 0x15	; 21
    14b8:	42 e2       	ldi	r20, 0x22	; 34
    14ba:	6d e0       	ldi	r22, 0x0D	; 13
    14bc:	8e e1       	ldi	r24, 0x1E	; 30
    14be:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_FillRectangle>
		
		GLCD_GotoXY(33+offsetX, 4+offsetY);
    14c2:	6f e0       	ldi	r22, 0x0F	; 15
    14c4:	8b e2       	ldi	r24, 0x2B	; 43
    14c6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	48 e0       	ldi	r20, 0x08	; 8
    14ce:	65 e0       	ldi	r22, 0x05	; 5
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	9f e0       	ldi	r25, 0x0F	; 15
    14d4:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    14d8:	60 91 f8 00 	lds	r22, 0x00F8
    14dc:	70 91 f9 00 	lds	r23, 0x00F9
    14e0:	88 27       	eor	r24, r24
    14e2:	77 fd       	sbrc	r23, 7
    14e4:	80 95       	com	r24
    14e6:	98 2f       	mov	r25, r24
    14e8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e2       	ldi	r20, 0x20	; 32
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    14f8:	2a e0       	ldi	r18, 0x0A	; 10
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>
		GLCD_PrintString("V");
    1504:	85 ea       	ldi	r24, 0xA5	; 165
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	GLCD_GotoXY(0, 16);
    150c:	60 e1       	ldi	r22, 0x10	; 16
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		//GLCD_PrintInteger(total_rotations);
		
		
	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	62 e1       	ldi	r22, 0x12	; 18
    151a:	84 e5       	ldi	r24, 0x54	; 84
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <GLCD_SetFont>
	GLCD_GotoXY(2+2, 31);
    1522:	6f e1       	ldi	r22, 0x1F	; 31
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
    152a:	80 90 08 01 	lds	r8, 0x0108
    152e:	90 90 09 01 	lds	r9, 0x0109
    1532:	a0 90 0a 01 	lds	r10, 0x010A
    1536:	b0 90 0b 01 	lds	r11, 0x010B
    153a:	24 e6       	ldi	r18, 0x64	; 100
    153c:	82 16       	cp	r8, r18
    153e:	91 04       	cpc	r9, r1
    1540:	a1 04       	cpc	r10, r1
    1542:	b1 04       	cpc	r11, r1
    1544:	68 f4       	brcc	.+26     	; 0x1560 <main_screen+0x148>
    1546:	24 e6       	ldi	r18, 0x64	; 100
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	d0 e0       	ldi	r29, 0x00	; 0
		uint8_t l=0;
		
			while(tempDistance){
			tempDistance/=10;
    1550:	0f 2e       	mov	r0, r31
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	cf 2e       	mov	r12, r31
    1556:	d1 2c       	mov	r13, r1
    1558:	e1 2c       	mov	r14, r1
    155a:	f1 2c       	mov	r15, r1
    155c:	f0 2d       	mov	r31, r0
    155e:	0f c0       	rjmp	.+30     	; 0x157e <main_screen+0x166>
		
	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
	GLCD_GotoXY(2+2, 31);
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
    1560:	c5 01       	movw	r24, r10
    1562:	b4 01       	movw	r22, r8
    1564:	2a e0       	ldi	r18, 0x0A	; 10
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodsi4>
		uint8_t l=0;
		
			while(tempDistance){
    1570:	21 15       	cp	r18, r1
    1572:	31 05       	cpc	r19, r1
    1574:	41 05       	cpc	r20, r1
    1576:	51 05       	cpc	r21, r1
    1578:	51 f7       	brne	.-44     	; 0x154e <main_screen+0x136>
    157a:	d0 e0       	ldi	r29, 0x00	; 0
    157c:	12 c0       	rjmp	.+36     	; 0x15a2 <main_screen+0x18a>
			tempDistance/=10;
    157e:	ca 01       	movw	r24, r20
    1580:	b9 01       	movw	r22, r18
    1582:	a7 01       	movw	r20, r14
    1584:	96 01       	movw	r18, r12
    1586:	0e 94 00 1c 	call	0x3800	; 0x3800 <__divmodsi4>
			l++;
    158a:	df 5f       	subi	r29, 0xFF	; 255
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
		uint8_t l=0;
		
			while(tempDistance){
    158c:	21 15       	cp	r18, r1
    158e:	31 05       	cpc	r19, r1
    1590:	41 05       	cpc	r20, r1
    1592:	51 05       	cpc	r21, r1
    1594:	a1 f7       	brne	.-24     	; 0x157e <main_screen+0x166>
			tempDistance/=10;
			l++;
			}
	
	int zeros = 6-l;
	if (distance < 100)zeros = 4;
    1596:	34 e6       	ldi	r19, 0x64	; 100
    1598:	83 16       	cp	r8, r19
    159a:	91 04       	cpc	r9, r1
    159c:	a1 04       	cpc	r10, r1
    159e:	b1 04       	cpc	r11, r1
    15a0:	50 f0       	brcs	.+20     	; 0x15b6 <main_screen+0x19e>
			while(tempDistance){
			tempDistance/=10;
			l++;
			}
	
	int zeros = 6-l;
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 01       	movw	r18, r24
    15a8:	2d 1b       	sub	r18, r29
    15aa:	31 09       	sbc	r19, r1
    15ac:	e9 01       	movw	r28, r18
	if (distance < 100)zeros = 4;
		if (zeros > 0){
    15ae:	1c 16       	cp	r1, r28
    15b0:	1d 06       	cpc	r1, r29
    15b2:	7c f4       	brge	.+30     	; 0x15d2 <main_screen+0x1ba>
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <main_screen+0x1a2>
			tempDistance/=10;
			l++;
			}
	
	int zeros = 6-l;
	if (distance < 100)zeros = 4;
    15b6:	c4 e0       	ldi	r28, 0x04	; 4
    15b8:	d0 e0       	ldi	r29, 0x00	; 0
    15ba:	e1 2c       	mov	r14, r1
    15bc:	f1 2c       	mov	r15, r1
		if (zeros > 0){
			for (int i=0;i<zeros;i++){
		
				GLCD_PrintString("0");
    15be:	88 e7       	ldi	r24, 0x78	; 120
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
			}
	
	int zeros = 6-l;
	if (distance < 100)zeros = 4;
		if (zeros > 0){
			for (int i=0;i<zeros;i++){
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	e3 1a       	sub	r14, r19
    15ca:	f3 0a       	sbc	r15, r19
    15cc:	ec 16       	cp	r14, r28
    15ce:	fd 06       	cpc	r15, r29
    15d0:	b4 f3       	brlt	.-20     	; 0x15be <main_screen+0x1a6>
		
				GLCD_PrintString("0");
		
			}	
		}
	GLCD_PrintDouble((double)distance/100.0,10);
    15d2:	60 91 08 01 	lds	r22, 0x0108
    15d6:	70 91 09 01 	lds	r23, 0x0109
    15da:	80 91 0a 01 	lds	r24, 0x010A
    15de:	90 91 0b 01 	lds	r25, 0x010B
    15e2:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__floatunsisf>
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	48 ec       	ldi	r20, 0xC8	; 200
    15ec:	52 e4       	ldi	r21, 0x42	; 66
    15ee:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>
	
	
		GLCD_Render();	
    15fe:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
		}
		
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	08 95       	ret

0000161a <speed_arrow_update>:
			}
	return 0;
}

void speed_arrow_update(){
				if (stepMode == FULL_STEP_ONE_PHASE)	 newSteps = speedKmh/kmhPerStep;//(12,75 degrees per 10 km/h)
    161a:	80 91 60 00 	lds	r24, 0x0060
    161e:	81 11       	cpse	r24, r1
    1620:	19 c0       	rjmp	.+50     	; 0x1654 <speed_arrow_update+0x3a>
    1622:	60 91 13 01 	lds	r22, 0x0113
    1626:	70 91 14 01 	lds	r23, 0x0114
    162a:	80 91 15 01 	lds	r24, 0x0115
    162e:	90 91 16 01 	lds	r25, 0x0116
    1632:	20 91 00 01 	lds	r18, 0x0100
    1636:	30 91 01 01 	lds	r19, 0x0101
    163a:	40 91 02 01 	lds	r20, 0x0102
    163e:	50 91 03 01 	lds	r21, 0x0103
    1642:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1646:	0e 94 37 1a 	call	0x346e	; 0x346e <__fixsfsi>
    164a:	70 93 11 01 	sts	0x0111, r23
    164e:	60 93 10 01 	sts	0x0110, r22
    1652:	1a c0       	rjmp	.+52     	; 0x1688 <speed_arrow_update+0x6e>
				if (stepMode == HALF_STEP) newSteps = speedKmh/kmhPerStep;
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	c1 f4       	brne	.+48     	; 0x1688 <speed_arrow_update+0x6e>
    1658:	60 91 13 01 	lds	r22, 0x0113
    165c:	70 91 14 01 	lds	r23, 0x0114
    1660:	80 91 15 01 	lds	r24, 0x0115
    1664:	90 91 16 01 	lds	r25, 0x0116
    1668:	20 91 00 01 	lds	r18, 0x0100
    166c:	30 91 01 01 	lds	r19, 0x0101
    1670:	40 91 02 01 	lds	r20, 0x0102
    1674:	50 91 03 01 	lds	r21, 0x0103
    1678:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    167c:	0e 94 37 1a 	call	0x346e	; 0x346e <__fixsfsi>
    1680:	70 93 11 01 	sts	0x0111, r23
    1684:	60 93 10 01 	sts	0x0110, r22
				int shiftSteps = steps - newSteps;//difference in speedometer readings (how much the arrow should be shifted)
    1688:	80 91 fb 00 	lds	r24, 0x00FB
    168c:	90 91 fc 00 	lds	r25, 0x00FC
    1690:	20 91 10 01 	lds	r18, 0x0110
    1694:	30 91 11 01 	lds	r19, 0x0111
    1698:	82 1b       	sub	r24, r18
    169a:	93 0b       	sbc	r25, r19
				if (shiftSteps > 0){dir = 0;}else {dir = 1;}
    169c:	18 16       	cp	r1, r24
    169e:	19 06       	cpc	r1, r25
    16a0:	1c f4       	brge	.+6      	; 0x16a8 <speed_arrow_update+0x8e>
    16a2:	10 92 fd 00 	sts	0x00FD, r1
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <speed_arrow_update+0x98>
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	20 93 fd 00 	sts	0x00FD, r18
				if (abs(shiftSteps)){
    16ae:	89 2b       	or	r24, r25
    16b0:	61 f0       	breq	.+24     	; 0x16ca <speed_arrow_update+0xb0>
					arrowMoving = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	80 93 12 01 	sts	0x0112, r24
					
					TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    16b8:	83 b7       	in	r24, 0x33	; 51
    16ba:	8d 60       	ori	r24, 0x0D	; 13
    16bc:	83 bf       	out	0x33, r24	; 51
					OCR0 = stepInterval;//interval between steps (Affects Stepper Motor Rotation Speed)
    16be:	80 91 62 00 	lds	r24, 0x0062
    16c2:	8c bf       	out	0x3c, r24	; 60
					TIMSK|=_BV(OCIE0);
    16c4:	89 b7       	in	r24, 0x39	; 57
    16c6:	82 60       	ori	r24, 0x02	; 2
    16c8:	89 bf       	out	0x39, r24	; 57
    16ca:	08 95       	ret

000016cc <calculate_speed>:
				}
				
}

void calculate_speed(){
    16cc:	cf 92       	push	r12
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	cf 93       	push	r28
 
			if(speedTimer>1000){
    16d6:	80 91 25 01 	lds	r24, 0x0125
    16da:	90 91 26 01 	lds	r25, 0x0126
    16de:	89 3e       	cpi	r24, 0xE9	; 233
    16e0:	93 40       	sbci	r25, 0x03	; 3
    16e2:	b4 f0       	brlt	.+44     	; 0x1710 <calculate_speed+0x44>
						TIMSK&=~_BV(OCIE2);  //if Hall sensor was not triggered for too long (0,32s) it means that vehicle does not move
    16e4:	89 b7       	in	r24, 0x39	; 57
    16e6:	8f 77       	andi	r24, 0x7F	; 127
    16e8:	89 bf       	out	0x39, r24	; 57
						TCNT2 = 0;
    16ea:	14 bc       	out	0x24, r1	; 36
						speedTimer = 0;
    16ec:	10 92 26 01 	sts	0x0126, r1
    16f0:	10 92 25 01 	sts	0x0125, r1
						speedTimerRecent = 0;//speedTimer;//?
    16f4:	10 92 24 01 	sts	0x0124, r1
    16f8:	10 92 23 01 	sts	0x0123, r1
						speedKmh = 0;
    16fc:	10 92 13 01 	sts	0x0113, r1
    1700:	10 92 14 01 	sts	0x0114, r1
    1704:	10 92 15 01 	sts	0x0115, r1
    1708:	10 92 16 01 	sts	0x0116, r1
						firstMeasure = 0;
    170c:	10 92 0e 01 	sts	0x010E, r1
						}
			if((speedRefresh)&&(speedTimerRecent)){
    1710:	80 91 77 00 	lds	r24, 0x0077
    1714:	88 23       	and	r24, r24
    1716:	09 f4       	brne	.+2      	; 0x171a <calculate_speed+0x4e>
    1718:	46 c0       	rjmp	.+140    	; 0x17a6 <calculate_speed+0xda>
    171a:	80 91 23 01 	lds	r24, 0x0123
    171e:	90 91 24 01 	lds	r25, 0x0124
    1722:	89 2b       	or	r24, r25
    1724:	09 f4       	brne	.+2      	; 0x1728 <calculate_speed+0x5c>
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <calculate_speed+0xda>
						if (speedTimerRecent>400) speedKmh = 1.0/(timePerTic*speedTimerRecent)*3.6*circLength;			
    1728:	80 91 23 01 	lds	r24, 0x0123
    172c:	90 91 24 01 	lds	r25, 0x0124
    1730:	81 39       	cpi	r24, 0x91	; 145
    1732:	91 40       	sbci	r25, 0x01	; 1
    1734:	c4 f1       	brlt	.+112    	; 0x17a6 <calculate_speed+0xda>
    1736:	60 91 23 01 	lds	r22, 0x0123
    173a:	70 91 24 01 	lds	r23, 0x0124
    173e:	88 27       	eor	r24, r24
    1740:	77 fd       	sbrc	r23, 7
    1742:	80 95       	com	r24
    1744:	98 2f       	mov	r25, r24
    1746:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    174a:	20 91 1b 01 	lds	r18, 0x011B
    174e:	30 91 1c 01 	lds	r19, 0x011C
    1752:	40 91 1d 01 	lds	r20, 0x011D
    1756:	50 91 1e 01 	lds	r21, 0x011E
    175a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    175e:	9b 01       	movw	r18, r22
    1760:	ac 01       	movw	r20, r24
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	80 e8       	ldi	r24, 0x80	; 128
    1768:	9f e3       	ldi	r25, 0x3F	; 63
    176a:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    176e:	26 e6       	ldi	r18, 0x66	; 102
    1770:	36 e6       	ldi	r19, 0x66	; 102
    1772:	46 e6       	ldi	r20, 0x66	; 102
    1774:	50 e4       	ldi	r21, 0x40	; 64
    1776:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    177a:	20 91 17 01 	lds	r18, 0x0117
    177e:	30 91 18 01 	lds	r19, 0x0118
    1782:	40 91 19 01 	lds	r20, 0x0119
    1786:	50 91 1a 01 	lds	r21, 0x011A
    178a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    178e:	46 2f       	mov	r20, r22
    1790:	57 2f       	mov	r21, r23
    1792:	68 2f       	mov	r22, r24
    1794:	79 2f       	mov	r23, r25
    1796:	40 93 13 01 	sts	0x0113, r20
    179a:	50 93 14 01 	sts	0x0114, r21
    179e:	60 93 15 01 	sts	0x0115, r22
    17a2:	70 93 16 01 	sts	0x0116, r23
						}
		
			
		if (speedKmh>scaleMax)speedKmh=scaleMax;
    17a6:	c0 91 64 00 	lds	r28, 0x0064
    17aa:	c0 90 13 01 	lds	r12, 0x0113
    17ae:	d0 90 14 01 	lds	r13, 0x0114
    17b2:	e0 90 15 01 	lds	r14, 0x0115
    17b6:	f0 90 16 01 	lds	r15, 0x0116
    17ba:	6c 2f       	mov	r22, r28
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    17c6:	a7 01       	movw	r20, r14
    17c8:	96 01       	movw	r18, r12
    17ca:	0e 94 cb 19 	call	0x3396	; 0x3396 <__cmpsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	74 f4       	brge	.+28     	; 0x17ee <calculate_speed+0x122>
    17d2:	6c 2f       	mov	r22, r28
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__floatunsisf>
    17de:	60 93 13 01 	sts	0x0113, r22
    17e2:	70 93 14 01 	sts	0x0114, r23
    17e6:	80 93 15 01 	sts	0x0115, r24
    17ea:	90 93 16 01 	sts	0x0116, r25
		speedRefresh=0;
    17ee:	10 92 77 00 	sts	0x0077, r1
														GLCD_PrintInteger(steps);
														GLCD_GotoXY(64, 10);
														GLCD_PrintInteger(newSteps);
														GLCD_Render();
														*/
														GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	48 e0       	ldi	r20, 0x08	; 8
    17f6:	65 e0       	ldi	r22, 0x05	; 5
    17f8:	80 e2       	ldi	r24, 0x20	; 32
    17fa:	9f e0       	ldi	r25, 0x0F	; 15
    17fc:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <GLCD_SetFont>
														GLCD_GotoXY(64, 0);
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
														GLCD_PrintDouble(speedKmh,10);
    1808:	60 91 13 01 	lds	r22, 0x0113
    180c:	70 91 14 01 	lds	r23, 0x0114
    1810:	80 91 15 01 	lds	r24, 0x0115
    1814:	90 91 16 01 	lds	r25, 0x0116
    1818:	2a e0       	ldi	r18, 0x0A	; 10
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>
														GLCD_Render();
    1824:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
		}
    1828:	cf 91       	pop	r28
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	08 95       	ret

00001834 <button_monitor>:
		main_screen();
	}
}

uint8_t button_monitor(){
if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
    1834:	b5 9b       	sbis	0x16, 5	; 22
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <button_monitor+0x14>
    1838:	b6 9b       	sbis	0x16, 6	; 22
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <button_monitor+0x14>
    183c:	b7 9b       	sbis	0x16, 7	; 22
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <button_monitor+0x14>
	btnPressed = 0;
    1840:	10 92 fa 00 	sts	0x00FA, r1
	return 0;
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret
}

if((!(PINB&_BV(5)))&&(!btnPressed)){
    1848:	b5 99       	sbic	0x16, 5	; 22
    184a:	12 c0       	rjmp	.+36     	; 0x1870 <button_monitor+0x3c>
    184c:	80 91 fa 00 	lds	r24, 0x00FA
    1850:	81 11       	cpse	r24, r1
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <button_monitor+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1854:	2f ef       	ldi	r18, 0xFF	; 255
    1856:	80 e7       	ldi	r24, 0x70	; 112
    1858:	92 e0       	ldi	r25, 0x02	; 2
    185a:	21 50       	subi	r18, 0x01	; 1
    185c:	80 40       	sbci	r24, 0x00	; 0
    185e:	90 40       	sbci	r25, 0x00	; 0
    1860:	e1 f7       	brne	.-8      	; 0x185a <button_monitor+0x26>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <button_monitor+0x30>
    1864:	00 00       	nop
	_delay_ms(50);
	if(!(PINB&_BV(5))){
    1866:	b5 99       	sbic	0x16, 5	; 22
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <button_monitor+0x3c>
		btnPressed = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 fa 00 	sts	0x00FA, r24
	}
}

if((!(PINB&_BV(6)))&&(!btnPressed)){
    1870:	b6 99       	sbic	0x16, 6	; 22
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <button_monitor+0x64>
    1874:	80 91 fa 00 	lds	r24, 0x00FA
    1878:	81 11       	cpse	r24, r1
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <button_monitor+0x64>
    187c:	2f ef       	ldi	r18, 0xFF	; 255
    187e:	80 e7       	ldi	r24, 0x70	; 112
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	21 50       	subi	r18, 0x01	; 1
    1884:	80 40       	sbci	r24, 0x00	; 0
    1886:	90 40       	sbci	r25, 0x00	; 0
    1888:	e1 f7       	brne	.-8      	; 0x1882 <button_monitor+0x4e>
    188a:	00 c0       	rjmp	.+0      	; 0x188c <button_monitor+0x58>
    188c:	00 00       	nop
	_delay_ms(50);
	if(!(PINB&_BV(6))){
    188e:	b6 99       	sbic	0x16, 6	; 22
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <button_monitor+0x64>
	btnPressed=2;
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	80 93 fa 00 	sts	0x00FA, r24
	}
	
}
if((!(PINB&_BV(7)))&&(!btnPressed)){
    1898:	b7 99       	sbic	0x16, 7	; 22
    189a:	12 c0       	rjmp	.+36     	; 0x18c0 <button_monitor+0x8c>
    189c:	80 91 fa 00 	lds	r24, 0x00FA
    18a0:	81 11       	cpse	r24, r1
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <button_monitor+0x8c>
    18a4:	2f ef       	ldi	r18, 0xFF	; 255
    18a6:	80 e7       	ldi	r24, 0x70	; 112
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	80 40       	sbci	r24, 0x00	; 0
    18ae:	90 40       	sbci	r25, 0x00	; 0
    18b0:	e1 f7       	brne	.-8      	; 0x18aa <button_monitor+0x76>
    18b2:	00 c0       	rjmp	.+0      	; 0x18b4 <button_monitor+0x80>
    18b4:	00 00       	nop
	_delay_ms(50);
	if(!(PINB&_BV(7))){
    18b6:	b7 99       	sbic	0x16, 7	; 22
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <button_monitor+0x8c>
	btnPressed=3;
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	80 93 fa 00 	sts	0x00FA, r24
	}
	
}
return btnPressed;
    18c0:	80 91 fa 00 	lds	r24, 0x00FA
}
    18c4:	08 95       	ret

000018c6 <menu_screen>:

void menu_screen(){
uint8_t offset = 75;	
static int8_t menuItem;
static int8_t page;
if (page < 0) page = 0;
    18c6:	80 91 27 01 	lds	r24, 0x0127
    18ca:	88 23       	and	r24, r24
    18cc:	14 f4       	brge	.+4      	; 0x18d2 <menu_screen+0xc>
    18ce:	10 92 27 01 	sts	0x0127, r1
if (menuItem > 5){page++;menuItem=0;}
    18d2:	80 91 28 01 	lds	r24, 0x0128
    18d6:	86 30       	cpi	r24, 0x06	; 6
    18d8:	44 f0       	brlt	.+16     	; 0x18ea <menu_screen+0x24>
    18da:	80 91 27 01 	lds	r24, 0x0127
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	80 93 27 01 	sts	0x0127, r24
    18e4:	10 92 28 01 	sts	0x0128, r1
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <menu_screen+0x38>
if (menuItem < 0){page--;menuItem=5;}
    18ea:	88 23       	and	r24, r24
    18ec:	44 f4       	brge	.+16     	; 0x18fe <menu_screen+0x38>
    18ee:	80 91 27 01 	lds	r24, 0x0127
    18f2:	81 50       	subi	r24, 0x01	; 1
    18f4:	80 93 27 01 	sts	0x0127, r24
    18f8:	85 e0       	ldi	r24, 0x05	; 5
    18fa:	80 93 28 01 	sts	0x0128, r24
if ((page == 2)&&(menuItem > 1)){
    18fe:	80 91 27 01 	lds	r24, 0x0127
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	41 f4       	brne	.+16     	; 0x1916 <menu_screen+0x50>
    1906:	80 91 28 01 	lds	r24, 0x0128
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	24 f0       	brlt	.+8      	; 0x1916 <menu_screen+0x50>
	page = 0;
    190e:	10 92 27 01 	sts	0x0127, r1
	menuItem = 0;
    1912:	10 92 28 01 	sts	0x0128, r1
}
GLCD_Clear();
    1916:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
GLCD_FillRectangle(0,0+menuItem*8-1+8,5,7+menuItem*8+8,GLCD_Black);
    191a:	80 91 28 01 	lds	r24, 0x0128
    191e:	88 0f       	add	r24, r24
    1920:	88 0f       	add	r24, r24
    1922:	88 0f       	add	r24, r24
    1924:	28 2f       	mov	r18, r24
    1926:	21 5f       	subi	r18, 0xF1	; 241
    1928:	68 2f       	mov	r22, r24
    192a:	69 5f       	subi	r22, 0xF9	; 249
    192c:	0f ef       	ldi	r16, 0xFF	; 255
    192e:	45 e0       	ldi	r20, 0x05	; 5
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_FillRectangle>
GLCD_FillRectangle(122,0+menuItem*8-1+8,127,7+menuItem*8+8,GLCD_Black);
    1936:	80 91 28 01 	lds	r24, 0x0128
    193a:	88 0f       	add	r24, r24
    193c:	88 0f       	add	r24, r24
    193e:	88 0f       	add	r24, r24
    1940:	28 2f       	mov	r18, r24
    1942:	21 5f       	subi	r18, 0xF1	; 241
    1944:	68 2f       	mov	r22, r24
    1946:	69 5f       	subi	r22, 0xF9	; 249
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	8a e7       	ldi	r24, 0x7A	; 122
    194c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_FillRectangle>
GLCD_DrawLine(0,menuItem*8-2+8,127,menuItem*8-2+8,GLCD_Black);
    1950:	60 91 28 01 	lds	r22, 0x0128
    1954:	66 0f       	add	r22, r22
    1956:	66 0f       	add	r22, r22
    1958:	66 0f       	add	r22, r22
    195a:	6a 5f       	subi	r22, 0xFA	; 250
    195c:	26 2f       	mov	r18, r22
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 8b 14 	call	0x2916	; 0x2916 <GLCD_DrawLine>
GLCD_DrawLine(0,menuItem*8+8+8,127,menuItem*8+8+8,GLCD_Black);
    1966:	60 91 28 01 	lds	r22, 0x0128
    196a:	66 0f       	add	r22, r22
    196c:	66 0f       	add	r22, r22
    196e:	66 0f       	add	r22, r22
    1970:	60 5f       	subi	r22, 0xF0	; 240
    1972:	26 2f       	mov	r18, r22
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 8b 14 	call	0x2916	; 0x2916 <GLCD_DrawLine>

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Merge);
    197c:	21 e0       	ldi	r18, 0x01	; 1
    197e:	48 e0       	ldi	r20, 0x08	; 8
    1980:	65 e0       	ldi	r22, 0x05	; 5
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	9f e0       	ldi	r25, 0x0F	; 15
    1986:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <GLCD_SetFont>
if(page==0){
    198a:	80 91 27 01 	lds	r24, 0x0127
    198e:	81 11       	cpse	r24, r1
    1990:	94 c0       	rjmp	.+296    	; 0x1aba <menu_screen+0x1f4>
GLCD_GotoX(10);	
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_GotoLine(1);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
GLCD_PrintString("Dig_PWM");
    199e:	8a e7       	ldi	r24, 0x7A	; 122
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
GLCD_GotoX(offset);
    19a6:	8b e4       	ldi	r24, 0x4B	; 75
    19a8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_PrintInteger(pwmDial);
    19ac:	60 91 69 00 	lds	r22, 0x0069
    19b0:	70 91 6a 00 	lds	r23, 0x006A
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>

GLCD_GotoX(10);
    19bc:	8a e0       	ldi	r24, 0x0A	; 10
    19be:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_GotoLine(2);
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
GLCD_PrintString("Arr_PWM");
    19c8:	82 e8       	ldi	r24, 0x82	; 130
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
GLCD_GotoX(offset);
    19d0:	8b e4       	ldi	r24, 0x4B	; 75
    19d2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_PrintInteger(pwmArrow);
    19d6:	60 91 6b 00 	lds	r22, 0x006B
    19da:	70 91 6c 00 	lds	r23, 0x006C
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>

GLCD_GotoX(10);
    19e6:	8a e0       	ldi	r24, 0x0A	; 10
    19e8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_GotoLine(3);
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
GLCD_PrintString("Weel D");	
    19f2:	8a e8       	ldi	r24, 0x8A	; 138
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
GLCD_GotoX(offset);
    19fa:	8b e4       	ldi	r24, 0x4B	; 75
    19fc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_PrintDouble(wheelDiameter,100);
    1a00:	60 91 6d 00 	lds	r22, 0x006D
    1a04:	70 91 6e 00 	lds	r23, 0x006E
    1a08:	80 91 6f 00 	lds	r24, 0x006F
    1a0c:	90 91 70 00 	lds	r25, 0x0070
    1a10:	24 e6       	ldi	r18, 0x64	; 100
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>
	
GLCD_GotoX(10);
    1a1c:	8a e0       	ldi	r24, 0x0A	; 10
    1a1e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_GotoLine(4);
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
GLCD_PrintString("Ratio");	
    1a28:	81 e9       	ldi	r24, 0x91	; 145
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
GLCD_GotoX(offset);
    1a30:	8b e4       	ldi	r24, 0x4B	; 75
    1a32:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_PrintDouble(ratio,100);
    1a36:	60 91 71 00 	lds	r22, 0x0071
    1a3a:	70 91 72 00 	lds	r23, 0x0072
    1a3e:	80 91 73 00 	lds	r24, 0x0073
    1a42:	90 91 74 00 	lds	r25, 0x0074
    1a46:	24 e6       	ldi	r18, 0x64	; 100
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>

GLCD_GotoX(10);
    1a52:	8a e0       	ldi	r24, 0x0A	; 10
    1a54:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_GotoLine(5);
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
GLCD_PrintString("Magnets");
    1a5e:	87 e9       	ldi	r24, 0x97	; 151
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
GLCD_GotoX(offset);
    1a66:	8b e4       	ldi	r24, 0x4B	; 75
    1a68:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_PrintInteger(magnets);
    1a6c:	60 91 75 00 	lds	r22, 0x0075
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>

GLCD_GotoX(10);
    1a7a:	8a e0       	ldi	r24, 0x0A	; 10
    1a7c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_GotoLine(6);
    1a80:	86 e0       	ldi	r24, 0x06	; 6
    1a82:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
GLCD_PrintString("Sdown V");
    1a86:	8f e9       	ldi	r24, 0x9F	; 159
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
GLCD_GotoX(offset);
    1a8e:	8b e4       	ldi	r24, 0x4B	; 75
    1a90:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
GLCD_PrintDouble(shutDownVoltageX10/10.0,10);
    1a94:	60 91 63 00 	lds	r22, 0x0063
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1aae:	2a e0       	ldi	r18, 0x0A	; 10
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>

}

if (page==1){
    1aba:	80 91 27 01 	lds	r24, 0x0127
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <menu_screen+0x1fe>
    1ac2:	64 c0       	rjmp	.+200    	; 0x1b8c <menu_screen+0x2c6>
	
	GLCD_GotoX(10);
    1ac4:	8a e0       	ldi	r24, 0x0A	; 10
    1ac6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoLine(1);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
	GLCD_PrintString("Max speed");
    1ad0:	87 ea       	ldi	r24, 0xA7	; 167
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	GLCD_GotoX(offset);
    1ad8:	8b e4       	ldi	r24, 0x4B	; 75
    1ada:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_PrintInteger(scaleMax);
    1ade:	60 91 64 00 	lds	r22, 0x0064
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>
	
	GLCD_GotoX(10);
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
    1aee:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoLine(2);
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
	GLCD_PrintString("Deg/kmh");
    1af8:	81 eb       	ldi	r24, 0xB1	; 177
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	GLCD_GotoX(offset);
    1b00:	8b e4       	ldi	r24, 0x4B	; 75
    1b02:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_PrintDouble(degreesPerKmh,1000);
    1b06:	60 91 65 00 	lds	r22, 0x0065
    1b0a:	70 91 66 00 	lds	r23, 0x0066
    1b0e:	80 91 67 00 	lds	r24, 0x0067
    1b12:	90 91 68 00 	lds	r25, 0x0068
    1b16:	28 ee       	ldi	r18, 0xE8	; 232
    1b18:	33 e0       	ldi	r19, 0x03	; 3
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <GLCD_PrintDouble>
	
	GLCD_GotoX(10);
    1b22:	8a e0       	ldi	r24, 0x0A	; 10
    1b24:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoLine(3);
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
	GLCD_PrintString("SM steps");
    1b2e:	89 eb       	ldi	r24, 0xB9	; 185
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	GLCD_GotoX(offset);
    1b36:	8b e4       	ldi	r24, 0x4B	; 75
    1b38:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_PrintInteger(smSteps);
    1b3c:	60 91 61 00 	lds	r22, 0x0061
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>
	
	GLCD_GotoX(10);
    1b4a:	8a e0       	ldi	r24, 0x0A	; 10
    1b4c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoLine(4);
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
	GLCD_PrintString("steps");
    1b56:	8c eb       	ldi	r24, 0xBC	; 188
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	GLCD_GotoX(offset);
    1b5e:	8b e4       	ldi	r24, 0x4B	; 75
    1b60:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_PrintInteger(stepInterval);
    1b64:	60 91 62 00 	lds	r22, 0x0062
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>
	
		GLCD_GotoX(10);
    1b72:	8a e0       	ldi	r24, 0x0A	; 10
    1b74:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
		GLCD_GotoLine(5);
    1b78:	85 e0       	ldi	r24, 0x05	; 5
    1b7a:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
		GLCD_PrintString("Calibrate");
    1b7e:	82 ec       	ldi	r24, 0xC2	; 194
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
		GLCD_GotoX(offset);
    1b86:	8b e4       	ldi	r24, 0x4B	; 75
    1b88:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
		
	


}
if (page==2){
    1b8c:	80 91 27 01 	lds	r24, 0x0127
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	a1 f4       	brne	.+40     	; 0x1bbc <menu_screen+0x2f6>
	GLCD_GotoX(10);
    1b94:	8a e0       	ldi	r24, 0x0A	; 10
    1b96:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoLine(1);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
	GLCD_PrintString("odometer reset");
    1ba0:	8c ec       	ldi	r24, 0xCC	; 204
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	
	GLCD_GotoX(10);
    1ba8:	8a e0       	ldi	r24, 0x0A	; 10
    1baa:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoLine(2);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	0e 94 df 11 	call	0x23be	; 0x23be <GLCD_GotoLine>
	GLCD_PrintString("load defaults");
    1bb4:	8b ed       	ldi	r24, 0xDB	; 219
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
}

GLCD_Render();
    1bbc:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>


while(1){
		uint8_t currentButton=button_monitor();
    1bc0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <button_monitor>
		if(currentButton){
    1bc4:	88 23       	and	r24, r24
    1bc6:	e1 f3       	breq	.-8      	; 0x1bc0 <menu_screen+0x2fa>
			if(currentButton == 2)	menuItem++;
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	31 f4       	brne	.+12     	; 0x1bd8 <menu_screen+0x312>
    1bcc:	80 91 28 01 	lds	r24, 0x0128
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	80 93 28 01 	sts	0x0128, r24
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <menu_screen+0x320>
					
			if(currentButton == 3)	menuItem--;
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	29 f4       	brne	.+10     	; 0x1be6 <menu_screen+0x320>
    1bdc:	80 91 28 01 	lds	r24, 0x0128
    1be0:	81 50       	subi	r24, 0x01	; 1
    1be2:	80 93 28 01 	sts	0x0128, r24
							
		while (button_monitor());
    1be6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <button_monitor>
    1bea:	81 11       	cpse	r24, r1
    1bec:	fc cf       	rjmp	.-8      	; 0x1be6 <menu_screen+0x320>
		menu_screen();
    1bee:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <menu_screen>

00001bf2 <DrawArrow>:
newSteps = 0;
phase = 0;
}
	
void DrawArrow (char dir){
	if (dir){
    1bf2:	88 23       	and	r24, r24
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <DrawArrow+0x24>
		GLCD_Clear();
    1bf6:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1bfa:	67 e0       	ldi	r22, 0x07	; 7
    1bfc:	86 e1       	ldi	r24, 0x16	; 22
    1bfe:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1c02:	2f ef       	ldi	r18, 0xFF	; 255
    1c04:	47 e3       	ldi	r20, 0x37	; 55
    1c06:	6c e5       	ldi	r22, 0x5C	; 92
    1c08:	82 e4       	ldi	r24, 0x42	; 66
    1c0a:	9a e0       	ldi	r25, 0x0A	; 10
    1c0c:	0e 94 27 13 	call	0x264e	; 0x264e <GLCD_DrawBitmap>
		GLCD_Render();
    1c10:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
    1c14:	08 95       	ret
		}else{
		GLCD_Clear();
    1c16:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c1a:	67 e0       	ldi	r22, 0x07	; 7
    1c1c:	86 e1       	ldi	r24, 0x16	; 22
    1c1e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1c22:	2f ef       	ldi	r18, 0xFF	; 255
    1c24:	47 e3       	ldi	r20, 0x37	; 55
    1c26:	6c e5       	ldi	r22, 0x5C	; 92
    1c28:	8e eb       	ldi	r24, 0xBE	; 190
    1c2a:	97 e0       	ldi	r25, 0x07	; 7
    1c2c:	0e 94 27 13 	call	0x264e	; 0x264e <GLCD_DrawBitmap>
		GLCD_Render();	
    1c30:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
    1c34:	08 95       	ret

00001c36 <DrawSkull>:
		}
}

void DrawSkull (void)
{
GLCD_Clear();
    1c36:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
GLCD_GotoXY(21+6, 7);
    1c3a:	67 e0       	ldi	r22, 0x07	; 7
    1c3c:	8b e1       	ldi	r24, 0x1B	; 27
    1c3e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1c42:	2f ef       	ldi	r18, 0xFF	; 255
    1c44:	44 e3       	ldi	r20, 0x34	; 52
    1c46:	66 e5       	ldi	r22, 0x56	; 86
    1c48:	86 ec       	ldi	r24, 0xC6	; 198
    1c4a:	9c e0       	ldi	r25, 0x0C	; 12
    1c4c:	0e 94 27 13 	call	0x264e	; 0x264e <GLCD_DrawBitmap>
GLCD_Render();
    1c50:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
    1c54:	08 95       	ret

00001c56 <signal_monitor>:
														GLCD_PrintDouble(speedKmh,10);
														GLCD_Render();
		}
void signal_monitor(){
		
		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1c56:	b4 99       	sbic	0x16, 4	; 22
    1c58:	0c c0       	rjmp	.+24     	; 0x1c72 <signal_monitor+0x1c>
    1c5a:	b3 9b       	sbis	0x16, 3	; 22
    1c5c:	0a c0       	rjmp	.+20     	; 0x1c72 <signal_monitor+0x1c>
			DrawArrow(0);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DrawArrow>
			signalOn=1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	80 93 0f 01 	sts	0x010F, r24
			signalCounter=0;
    1c6a:	10 92 0d 01 	sts	0x010D, r1
    1c6e:	10 92 0c 01 	sts	0x010C, r1
		}
		
		if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1c72:	b3 99       	sbic	0x16, 3	; 22
    1c74:	0c c0       	rjmp	.+24     	; 0x1c8e <signal_monitor+0x38>
    1c76:	b4 9b       	sbis	0x16, 4	; 22
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <signal_monitor+0x38>
			DrawArrow(1);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DrawArrow>
			signalOn=1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 0f 01 	sts	0x010F, r24
			signalCounter=0;
    1c86:	10 92 0d 01 	sts	0x010D, r1
    1c8a:	10 92 0c 01 	sts	0x010C, r1
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1c8e:	b4 99       	sbic	0x16, 4	; 22
    1c90:	0b c0       	rjmp	.+22     	; 0x1ca8 <signal_monitor+0x52>
    1c92:	b3 99       	sbic	0x16, 3	; 22
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <signal_monitor+0x52>
			DrawSkull();
    1c96:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <DrawSkull>
			signalOn=1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 0f 01 	sts	0x010F, r24
			signalCounter=0;
    1ca0:	10 92 0d 01 	sts	0x010D, r1
    1ca4:	10 92 0c 01 	sts	0x010C, r1
		}
		
		
		if (signalOn){
    1ca8:	80 91 0f 01 	lds	r24, 0x010F
    1cac:	88 23       	and	r24, r24
    1cae:	e9 f0       	breq	.+58     	; 0x1cea <signal_monitor+0x94>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1cb0:	b3 9b       	sbis	0x16, 3	; 22
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <signal_monitor+0x70>
    1cb4:	b4 9b       	sbis	0x16, 4	; 22
    1cb6:	07 c0       	rjmp	.+14     	; 0x1cc6 <signal_monitor+0x70>
				GLCD_Clear();
    1cb8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
				GLCD_Render();
    1cbc:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
				TIMSK|=_BV(TOIE1);// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1cc0:	89 b7       	in	r24, 0x39	; 57
    1cc2:	84 60       	ori	r24, 0x04	; 4
    1cc4:	89 bf       	out	0x39, r24	; 57
				//This is to see if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			}
			
			if (signalCounter>300) //if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1cc6:	80 91 0c 01 	lds	r24, 0x010C
    1cca:	90 91 0d 01 	lds	r25, 0x010D
    1cce:	8d 32       	cpi	r24, 0x2D	; 45
    1cd0:	91 40       	sbci	r25, 0x01	; 1
    1cd2:	58 f0       	brcs	.+22     	; 0x1cea <signal_monitor+0x94>
			{
				signalOn=0;
    1cd4:	10 92 0f 01 	sts	0x010F, r1
				signalCounter=0;
    1cd8:	10 92 0d 01 	sts	0x010D, r1
    1cdc:	10 92 0c 01 	sts	0x010C, r1
				TIMSK&=~_BV(TOIE1);
    1ce0:	89 b7       	in	r24, 0x39	; 57
    1ce2:	8b 7f       	andi	r24, 0xFB	; 251
    1ce4:	89 bf       	out	0x39, r24	; 57
				main_screen();
    1ce6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <main_screen>
    1cea:	08 95       	ret

00001cec <read_ADC>:
}
	
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
    1cec:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	16 16       	cp	r1, r22
    1cf2:	17 06       	cpc	r1, r23
    1cf4:	8c f4       	brge	.+34     	; 0x1d18 <read_ADC+0x2c>
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
	
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0;i<cycles;i++)
	{
		ADCSRA |= (1<<ADSC);
    1cfe:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1d00:	36 99       	sbic	0x06, 6	; 6
    1d02:	fe cf       	rjmp	.-4      	; 0x1d00 <read_ADC+0x14>
		tmp += ADCW;
    1d04:	44 b1       	in	r20, 0x04	; 4
    1d06:	55 b1       	in	r21, 0x05	; 5
    1d08:	84 0f       	add	r24, r20
    1d0a:	95 1f       	adc	r25, r21
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	26 17       	cp	r18, r22
    1d12:	37 07       	cpc	r19, r23
    1d14:	a4 f3       	brlt	.-24     	; 0x1cfe <read_ADC+0x12>
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <read_ADC+0x30>
	
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1d1c:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__divmodhi4>
    1d20:	86 2f       	mov	r24, r22
    1d22:	97 2f       	mov	r25, r23
}	
    1d24:	08 95       	ret

00001d26 <eeprom_write_byte>:
	void eeprom_write_byte(unsigned int uiAddress, unsigned char ucData)
{
/* 
Wait for completion of previous write
 */
while(EECR & (1<<EEWE))
    1d26:	e1 99       	sbic	0x1c, 1	; 28
    1d28:	fe cf       	rjmp	.-4      	; 0x1d26 <eeprom_write_byte>
;
/* Set up address and data registers */
EEAR = uiAddress;
    1d2a:	9f bb       	out	0x1f, r25	; 31
    1d2c:	8e bb       	out	0x1e, r24	; 30
EEDR = ucData;
    1d2e:	6d bb       	out	0x1d, r22	; 29
/* 
Write logical one to EEMWE */
cli();
    1d30:	f8 94       	cli
EECR |= (1<<EEMWE);
    1d32:	e2 9a       	sbi	0x1c, 2	; 28
/* Start eeprom write by setting EEWE */
EECR |= (1<<EEWE);
    1d34:	e1 9a       	sbi	0x1c, 1	; 28
sei();
    1d36:	78 94       	sei
    1d38:	08 95       	ret

00001d3a <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
    1d3a:	e1 99       	sbic	0x1c, 1	; 28
    1d3c:	fe cf       	rjmp	.-4      	; 0x1d3a <eeprom_read_byte>
	;
	/* Set up address register */
	cli();
    1d3e:	f8 94       	cli
	EEAR = uiAddress;
    1d40:	9f bb       	out	0x1f, r25	; 31
    1d42:	8e bb       	out	0x1e, r24	; 30
	/*
	Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1d44:	e0 9a       	sbi	0x1c, 0	; 28
	sei();
    1d46:	78 94       	sei
	/* Return data from data register */
	return EEDR;
    1d48:	8d b3       	in	r24, 0x1d	; 29
}
    1d4a:	08 95       	ret

00001d4c <presets>:
};




void presets (void){
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15


circLength = wheelDiameter * pi/magnets;			//circumferential length between the magnets
    1d5c:	2b ed       	ldi	r18, 0xDB	; 219
    1d5e:	3f e0       	ldi	r19, 0x0F	; 15
    1d60:	49 e4       	ldi	r20, 0x49	; 73
    1d62:	50 e4       	ldi	r21, 0x40	; 64
    1d64:	60 91 6d 00 	lds	r22, 0x006D
    1d68:	70 91 6e 00 	lds	r23, 0x006E
    1d6c:	80 91 6f 00 	lds	r24, 0x006F
    1d70:	90 91 70 00 	lds	r25, 0x0070
    1d74:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    1d78:	6b 01       	movw	r12, r22
    1d7a:	7c 01       	movw	r14, r24
    1d7c:	60 91 75 00 	lds	r22, 0x0075
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	ac 01       	movw	r20, r24
    1d8e:	c7 01       	movw	r24, r14
    1d90:	b6 01       	movw	r22, r12
    1d92:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1d96:	60 93 17 01 	sts	0x0117, r22
    1d9a:	70 93 18 01 	sts	0x0118, r23
    1d9e:	80 93 19 01 	sts	0x0119, r24
    1da2:	90 93 1a 01 	sts	0x011A, r25
timePerTic = 1.0/(F_CPU/PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    1da6:	8d eb       	ldi	r24, 0xBD	; 189
    1da8:	97 e3       	ldi	r25, 0x37	; 55
    1daa:	a6 e8       	ldi	r26, 0x86	; 134
    1dac:	b7 e3       	ldi	r27, 0x37	; 55
    1dae:	80 93 1b 01 	sts	0x011B, r24
    1db2:	90 93 1c 01 	sts	0x011C, r25
    1db6:	a0 93 1d 01 	sts	0x011D, r26
    1dba:	b0 93 1e 01 	sts	0x011E, r27

	
DDRA|=_BV(3); //ENABLE 1
    1dbe:	d3 9a       	sbi	0x1a, 3	; 26
DDRA|=_BV(0); //ENABLE 2
    1dc0:	d0 9a       	sbi	0x1a, 0	; 26
DDRA|=_BV(2); //PHASE 1
    1dc2:	d2 9a       	sbi	0x1a, 2	; 26
DDRA|=_BV(1); //PHASE 2
    1dc4:	d1 9a       	sbi	0x1a, 1	; 26
DDRD|=_BV(4);//PWM DIAL LIGHT
    1dc6:	8c 9a       	sbi	0x11, 4	; 17
DDRD|=_BV(5);//PWM ARROW LIGHT
    1dc8:	8d 9a       	sbi	0x11, 5	; 17


PORTA|=_BV(3);//ENABLE 1 high (disabled)
    1dca:	db 9a       	sbi	0x1b, 3	; 27
PORTA|=_BV(0);//ENABLE 2 high (disabled)
    1dcc:	d8 9a       	sbi	0x1b, 0	; 27

PORTB|=_BV(5);//internal pull-up for external buttons
    1dce:	c5 9a       	sbi	0x18, 5	; 24
PORTB|=_BV(6);
    1dd0:	c6 9a       	sbi	0x18, 6	; 24
PORTB|=_BV(7);
    1dd2:	c7 9a       	sbi	0x18, 7	; 24
	
		//=======================ADC
		ADCSRA |= _BV(ADEN);
    1dd4:	37 9a       	sbi	0x06, 7	; 6
		//=======================
		ADCSRA |= _BV(ADPS0);		//
    1dd6:	30 9a       	sbi	0x06, 0	; 6
		ADCSRA |= _BV(ADPS1);		// Prescaler 128
    1dd8:	31 9a       	sbi	0x06, 1	; 6
		ADCSRA |= _BV(ADPS2);		//
    1dda:	32 9a       	sbi	0x06, 2	; 6
		//=======================
	
	//display initialization
	GLCD_Setup();
    1ddc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <GLCD_Setup>
	GLCD_Clear();	
    1de0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <GLCD_Clear>
	GLCD_Render();
    1de4:	0e 94 34 11 	call	0x2268	; 0x2268 <GLCD_Render>
	//================= reading data from EEPROM
	
	
	
	
	if(eeprom_read_byte(10)){
    1de8:	8a e0       	ldi	r24, 0x0A	; 10
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <eeprom_read_byte>
    1df0:	88 23       	and	r24, r24
    1df2:	69 f1       	breq	.+90     	; 0x1e4e <presets+0x102>
		//====total rotations of the wheel, 3 bytes
		
		eeprom_write_byte(21, 0);
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	85 e1       	ldi	r24, 0x15	; 21
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		eeprom_write_byte(22, 0);
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	86 e1       	ldi	r24, 0x16	; 22
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		eeprom_write_byte(23, 0);
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	87 e1       	ldi	r24, 0x17	; 23
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		//====Arrow illumination PWM
		eeprom_write_byte(30, 255);
    1e12:	6f ef       	ldi	r22, 0xFF	; 255
    1e14:	8e e1       	ldi	r24, 0x1E	; 30
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		eeprom_write_byte(31, 200);
    1e1c:	68 ec       	ldi	r22, 0xC8	; 200
    1e1e:	8f e1       	ldi	r24, 0x1F	; 31
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		//====Dial illumination PWM
		eeprom_write_byte(32, 0);
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	80 e2       	ldi	r24, 0x20	; 32
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		eeprom_write_byte(33, 50);
    1e30:	62 e3       	ldi	r22, 0x32	; 50
    1e32:	81 e2       	ldi	r24, 0x21	; 33
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		//====Display contrast
		eeprom_write_byte(34, 255);
    1e3a:	6f ef       	ldi	r22, 0xFF	; 255
    1e3c:	82 e2       	ldi	r24, 0x22	; 34
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		//====
		eeprom_write_byte(10, 0);
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
	}
	
	//==================
	
	unsigned long b = eeprom_read_byte(21);
    1e4e:	85 e1       	ldi	r24, 0x15	; 21
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <eeprom_read_byte>
    1e56:	88 2e       	mov	r8, r24
    1e58:	91 2c       	mov	r9, r1
    1e5a:	a1 2c       	mov	r10, r1
    1e5c:	b1 2c       	mov	r11, r1
	b=(b<<16);
	unsigned long c = eeprom_read_byte(22);
    1e5e:	86 e1       	ldi	r24, 0x16	; 22
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <eeprom_read_byte>
    1e66:	c8 2e       	mov	r12, r24
    1e68:	d1 2c       	mov	r13, r1
    1e6a:	e1 2c       	mov	r14, r1
    1e6c:	f1 2c       	mov	r15, r1
	c=(c<<8);
	unsigned long d = eeprom_read_byte(23);
    1e6e:	87 e1       	ldi	r24, 0x17	; 23
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <eeprom_read_byte>
	}
	
	//==================
	
	unsigned long b = eeprom_read_byte(21);
	b=(b<<16);
    1e76:	54 01       	movw	r10, r8
    1e78:	99 24       	eor	r9, r9
    1e7a:	88 24       	eor	r8, r8
	unsigned long c = eeprom_read_byte(22);
	c=(c<<8);
    1e7c:	fe 2c       	mov	r15, r14
    1e7e:	ed 2c       	mov	r14, r13
    1e80:	dc 2c       	mov	r13, r12
    1e82:	cc 24       	eor	r12, r12
	unsigned long d = eeprom_read_byte(23);
	
	totalRotations = b+c+d;  
    1e84:	c8 0c       	add	r12, r8
    1e86:	d9 1c       	adc	r13, r9
    1e88:	ea 1c       	adc	r14, r10
    1e8a:	fb 1c       	adc	r15, r11
    1e8c:	c8 0e       	add	r12, r24
    1e8e:	d1 1c       	adc	r13, r1
    1e90:	e1 1c       	adc	r14, r1
    1e92:	f1 1c       	adc	r15, r1
    1e94:	c0 92 1f 01 	sts	0x011F, r12
    1e98:	d0 92 20 01 	sts	0x0120, r13
    1e9c:	e0 92 21 01 	sts	0x0121, r14
    1ea0:	f0 92 22 01 	sts	0x0122, r15
	lcdContrast = eeprom_read_byte(34);
    1ea4:	82 e2       	ldi	r24, 0x22	; 34
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <eeprom_read_byte>
    1eac:	80 93 76 00 	sts	0x0076, r24
	
	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    1eb0:	83 ea       	ldi	r24, 0xA3	; 163
    1eb2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    1eb4:	8b e0       	ldi	r24, 0x0B	; 11
    1eb6:	8e bd       	out	0x2e, r24	; 46
	OCR1A= pwmArrow;
    1eb8:	80 91 6b 00 	lds	r24, 0x006B
    1ebc:	90 91 6c 00 	lds	r25, 0x006C
    1ec0:	9b bd       	out	0x2b, r25	; 43
    1ec2:	8a bd       	out	0x2a, r24	; 42
	OCR1B= pwmDial;
    1ec4:	80 91 69 00 	lds	r24, 0x0069
    1ec8:	90 91 6a 00 	lds	r25, 0x006A
    1ecc:	99 bd       	out	0x29, r25	; 41
    1ece:	88 bd       	out	0x28, r24	; 40
	//============================
	if (stepMode==FULL_STEP_ONE_PHASE){
    1ed0:	80 91 60 00 	lds	r24, 0x0060
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	22 c0       	rjmp	.+68     	; 0x1f1c <presets+0x1d0>
		kmhPerStep=(360.0/smSteps)/degreesPerKmh;
    1ed8:	60 91 61 00 	lds	r22, 0x0061
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	84 eb       	ldi	r24, 0xB4	; 180
    1ef0:	93 e4       	ldi	r25, 0x43	; 67
    1ef2:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1ef6:	20 91 65 00 	lds	r18, 0x0065
    1efa:	30 91 66 00 	lds	r19, 0x0066
    1efe:	40 91 67 00 	lds	r20, 0x0067
    1f02:	50 91 68 00 	lds	r21, 0x0068
    1f06:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1f0a:	60 93 00 01 	sts	0x0100, r22
    1f0e:	70 93 01 01 	sts	0x0101, r23
    1f12:	80 93 02 01 	sts	0x0102, r24
    1f16:	90 93 03 01 	sts	0x0103, r25
    1f1a:	23 c0       	rjmp	.+70     	; 0x1f62 <presets+0x216>
		}
	if (stepMode==HALF_STEP){
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	09 f5       	brne	.+66     	; 0x1f62 <presets+0x216>
		kmhPerStep=(180.0/smSteps)/degreesPerKmh;
    1f20:	60 91 61 00 	lds	r22, 0x0061
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    1f2e:	9b 01       	movw	r18, r22
    1f30:	ac 01       	movw	r20, r24
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	84 e3       	ldi	r24, 0x34	; 52
    1f38:	93 e4       	ldi	r25, 0x43	; 67
    1f3a:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1f3e:	20 91 65 00 	lds	r18, 0x0065
    1f42:	30 91 66 00 	lds	r19, 0x0066
    1f46:	40 91 67 00 	lds	r20, 0x0067
    1f4a:	50 91 68 00 	lds	r21, 0x0068
    1f4e:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1f52:	60 93 00 01 	sts	0x0100, r22
    1f56:	70 93 01 01 	sts	0x0101, r23
    1f5a:	80 93 02 01 	sts	0x0102, r24
    1f5e:	90 93 03 01 	sts	0x0103, r25
		}
//arrow_calibration();



MCUCR|= _BV(ISC11); // External falling edge interrupt INT1
    1f62:	85 b7       	in	r24, 0x35	; 53
    1f64:	88 60       	ori	r24, 0x08	; 8
    1f66:	85 bf       	out	0x35, r24	; 53
GICR|=_BV(INT1); // External Interrupt Enable INT1
    1f68:	8b b7       	in	r24, 0x3b	; 59
    1f6a:	80 68       	ori	r24, 0x80	; 128
    1f6c:	8b bf       	out	0x3b, r24	; 59

TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    1f6e:	85 b5       	in	r24, 0x25	; 37
    1f70:	8e 60       	ori	r24, 0x0E	; 14
    1f72:	85 bd       	out	0x25, r24	; 37
OCR2=TIC; //upper limit of Timer2
    1f74:	84 e1       	ldi	r24, 0x14	; 20
    1f76:	83 bd       	out	0x23, r24	; 35

GLCD_SetContrast(lcdContrast);
    1f78:	80 91 76 00 	lds	r24, 0x0076
    1f7c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <GLCD_SetContrast>

sei();
    1f80:	78 94       	sei
}
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	9f 90       	pop	r9
    1f90:	8f 90       	pop	r8
    1f92:	08 95       	ret

00001f94 <main>:
}


int main(void)
{
	presets();
    1f94:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <presets>
	
	while(1){
		voltage_monitor();
    1f98:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <voltage_monitor>
		calculate_speed();
    1f9c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <calculate_speed>
		speed_arrow_update();
    1fa0:	0e 94 0d 0b 	call	0x161a	; 0x161a <speed_arrow_update>
		signal_monitor();
    1fa4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <signal_monitor>
		if(button_monitor()) menu_screen();
    1fa8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <button_monitor>
    1fac:	88 23       	and	r24, r24
    1fae:	a1 f3       	breq	.-24     	; 0x1f98 <main+0x4>
    1fb0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <menu_screen>

00001fb4 <voltage_monitor>:
				main_screen();
			}
		}
		
}
void voltage_monitor(){
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17

	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    1fb8:	6a e0       	ldi	r22, 0x0A	; 10
    1fba:	84 e0       	ldi	r24, 0x04	; 4
    1fbc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <read_ADC>
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	88 27       	eor	r24, r24
    1fc4:	77 fd       	sbrc	r23, 7
    1fc6:	80 95       	com	r24
    1fc8:	98 2f       	mov	r25, r24
    1fca:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    1fce:	2a e9       	ldi	r18, 0x9A	; 154
    1fd0:	39 e9       	ldi	r19, 0x99	; 153
    1fd2:	4c ec       	ldi	r20, 0xCC	; 204
    1fd4:	52 e4       	ldi	r21, 0x42	; 66
    1fd6:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	50 e4       	ldi	r21, 0x40	; 64
    1fe2:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 ec       	ldi	r20, 0xC0	; 192
    1fec:	50 e4       	ldi	r21, 0x40	; 64
    1fee:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    1ff2:	0e 94 37 1a 	call	0x346e	; 0x346e <__fixsfsi>
    1ff6:	9b 01       	movw	r18, r22
    1ff8:	70 93 f7 00 	sts	0x00F7, r23
    1ffc:	60 93 f6 00 	sts	0x00F6, r22
	
	if (newVoltage<shutDownVoltageX10){  
    2000:	80 91 63 00 	lds	r24, 0x0063
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	28 17       	cp	r18, r24
    2008:	39 07       	cpc	r19, r25
    200a:	0c f0       	brlt	.+2      	; 0x200e <voltage_monitor+0x5a>
    200c:	63 c0       	rjmp	.+198    	; 0x20d4 <voltage_monitor+0x120>
		cli();
    200e:	f8 94       	cli
		TCCR1A = 0;
    2010:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;
    2012:	1e bc       	out	0x2e, r1	; 46
											//shutting down all the power consumers
		PORTA|=_BV(3); //ENABLE 1
    2014:	db 9a       	sbi	0x1b, 3	; 27
		PORTA|=_BV(0); //ENABLE 2
    2016:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA|=_BV(2); //PHASE 1
    2018:	da 9a       	sbi	0x1b, 2	; 27
		PORTA|=_BV(1); //PHASE 2
    201a:	d9 9a       	sbi	0x1b, 1	; 27
		
		unsigned long x = 0;//saving odometer data to EEPROM
		x = totalRotations;
    201c:	80 91 1f 01 	lds	r24, 0x011F
    2020:	90 91 20 01 	lds	r25, 0x0120
    2024:	a0 91 21 01 	lds	r26, 0x0121
    2028:	b0 91 22 01 	lds	r27, 0x0122
		x = (x<<24);
		x = (x>>24);
    202c:	68 2f       	mov	r22, r24
		//debug1=x;
		eeprom_write_byte(23,x);
    202e:	87 e1       	ldi	r24, 0x17	; 23
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		x = totalRotations;
    2036:	80 91 1f 01 	lds	r24, 0x011F
    203a:	90 91 20 01 	lds	r25, 0x0120
    203e:	a0 91 21 01 	lds	r26, 0x0121
    2042:	b0 91 22 01 	lds	r27, 0x0122
		x=(x<<16);
		x=(x>>24);
    2046:	69 2f       	mov	r22, r25
		//	debug2=x;
		eeprom_write_byte(22,x);
    2048:	86 e1       	ldi	r24, 0x16	; 22
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		x = totalRotations;
    2050:	80 91 1f 01 	lds	r24, 0x011F
    2054:	90 91 20 01 	lds	r25, 0x0120
    2058:	a0 91 21 01 	lds	r26, 0x0121
    205c:	b0 91 22 01 	lds	r27, 0x0122
		x=(x<<8);
		x=(x>>24);
    2060:	6a 2f       	mov	r22, r26
		//	debug3=x;
		eeprom_write_byte(21,x);
    2062:	85 e1       	ldi	r24, 0x15	; 21
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_write_byte>
		//x = total_rotations;
		//x=x>>24;
		//eeprom_write_byte(20,x);
		
		while (newVoltage<shutDownVoltageX10){
    206a:	20 91 63 00 	lds	r18, 0x0063
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	80 91 f6 00 	lds	r24, 0x00F6
    2074:	90 91 f7 00 	lds	r25, 0x00F7
    2078:	82 17       	cp	r24, r18
    207a:	93 07       	cpc	r25, r19
    207c:	4c f5       	brge	.+82     	; 0x20d0 <voltage_monitor+0x11c>
			newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    207e:	6a e0       	ldi	r22, 0x0A	; 10
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	0e 94 76 0e 	call	0x1cec	; 0x1cec <read_ADC>
    2086:	bc 01       	movw	r22, r24
    2088:	88 27       	eor	r24, r24
    208a:	77 fd       	sbrc	r23, 7
    208c:	80 95       	com	r24
    208e:	98 2f       	mov	r25, r24
    2090:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__floatsisf>
    2094:	2a e9       	ldi	r18, 0x9A	; 154
    2096:	39 e9       	ldi	r19, 0x99	; 153
    2098:	4c ec       	ldi	r20, 0xCC	; 204
    209a:	52 e4       	ldi	r21, 0x42	; 66
    209c:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	50 e4       	ldi	r21, 0x40	; 64
    20a8:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 ec       	ldi	r20, 0xC0	; 192
    20b2:	50 e4       	ldi	r21, 0x40	; 64
    20b4:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    20b8:	0e 94 37 1a 	call	0x346e	; 0x346e <__fixsfsi>
    20bc:	70 93 f7 00 	sts	0x00F7, r23
    20c0:	60 93 f6 00 	sts	0x00F6, r22
		eeprom_write_byte(21,x);
		//x = total_rotations;
		//x=x>>24;
		//eeprom_write_byte(20,x);
		
		while (newVoltage<shutDownVoltageX10){
    20c4:	20 91 63 00 	lds	r18, 0x0063
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	62 17       	cp	r22, r18
    20cc:	73 07       	cpc	r23, r19
    20ce:	bc f2       	brlt	.-82     	; 0x207e <voltage_monitor+0xca>
			newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
		}
		main();
    20d0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <main>
	}
	
	
	if (newVoltage!=voltage)
    20d4:	80 91 f8 00 	lds	r24, 0x00F8
    20d8:	90 91 f9 00 	lds	r25, 0x00F9
    20dc:	28 17       	cp	r18, r24
    20de:	39 07       	cpc	r19, r25
    20e0:	31 f0       	breq	.+12     	; 0x20ee <voltage_monitor+0x13a>
	{
		voltage=newVoltage;
    20e2:	30 93 f9 00 	sts	0x00F9, r19
    20e6:	20 93 f8 00 	sts	0x00F8, r18
		main_screen();
    20ea:	0e 94 0c 0a 	call	0x1418	; 0x1418 <main_screen>
	}
	
	newDistance=(round(totalRotations)*circLength)/10.0;
    20ee:	60 91 1f 01 	lds	r22, 0x011F
    20f2:	70 91 20 01 	lds	r23, 0x0120
    20f6:	80 91 21 01 	lds	r24, 0x0121
    20fa:	90 91 22 01 	lds	r25, 0x0122
    20fe:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__floatunsisf>
    2102:	0e 94 81 1b 	call	0x3702	; 0x3702 <round>
    2106:	20 91 17 01 	lds	r18, 0x0117
    210a:	30 91 18 01 	lds	r19, 0x0118
    210e:	40 91 19 01 	lds	r20, 0x0119
    2112:	50 91 1a 01 	lds	r21, 0x011A
    2116:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 cf 19 	call	0x339e	; 0x339e <__divsf3>
    2126:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fixunssfsi>
    212a:	60 93 04 01 	sts	0x0104, r22
    212e:	70 93 05 01 	sts	0x0105, r23
    2132:	80 93 06 01 	sts	0x0106, r24
    2136:	90 93 07 01 	sts	0x0107, r25
	if (newDistance!=distance)
    213a:	00 91 08 01 	lds	r16, 0x0108
    213e:	10 91 09 01 	lds	r17, 0x0109
    2142:	20 91 0a 01 	lds	r18, 0x010A
    2146:	30 91 0b 01 	lds	r19, 0x010B
    214a:	60 17       	cp	r22, r16
    214c:	71 07       	cpc	r23, r17
    214e:	82 07       	cpc	r24, r18
    2150:	93 07       	cpc	r25, r19
    2152:	51 f0       	breq	.+20     	; 0x2168 <voltage_monitor+0x1b4>
	{
		distance=newDistance;
    2154:	60 93 08 01 	sts	0x0108, r22
    2158:	70 93 09 01 	sts	0x0109, r23
    215c:	80 93 0a 01 	sts	0x010A, r24
    2160:	90 93 0b 01 	sts	0x010B, r25
		main_screen();
    2164:	0e 94 0c 0a 	call	0x1418	; 0x1418 <main_screen>
	}
}
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	08 95       	ret

0000216e <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    216e:	66 95       	lsr	r22
    2170:	66 95       	lsr	r22
    2172:	66 95       	lsr	r22
    2174:	90 e8       	ldi	r25, 0x80	; 128
    2176:	69 9f       	mul	r22, r25
    2178:	b0 01       	movw	r22, r0
    217a:	11 24       	eor	r1, r1
    217c:	68 0f       	add	r22, r24
    217e:	71 1d       	adc	r23, r1
    2180:	fb 01       	movw	r30, r22
    2182:	ed 5c       	subi	r30, 0xCD	; 205
    2184:	fe 4f       	sbci	r31, 0xFE	; 254
    2186:	40 83       	st	Z, r20
    2188:	08 95       	ret

0000218a <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    218a:	66 95       	lsr	r22
    218c:	66 95       	lsr	r22
    218e:	66 95       	lsr	r22
    2190:	90 e8       	ldi	r25, 0x80	; 128
    2192:	69 9f       	mul	r22, r25
    2194:	b0 01       	movw	r22, r0
    2196:	11 24       	eor	r1, r1
    2198:	68 0f       	add	r22, r24
    219a:	71 1d       	adc	r23, r1
    219c:	fb 01       	movw	r30, r22
    219e:	ed 5c       	subi	r30, 0xCD	; 205
    21a0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    21a2:	80 81       	ld	r24, Z
    21a4:	08 95       	ret

000021a6 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    21a6:	ff 92       	push	r15
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	c8 2f       	mov	r28, r24
    21b2:	06 2f       	mov	r16, r22
    21b4:	17 2f       	mov	r17, r23
    21b6:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    21b8:	0e 94 4f 19 	call	0x329e	; 0x329e <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    21bc:	0e 94 4c 19 	call	0x3298	; 0x3298 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	31 f0       	breq	.+12     	; 0x21d0 <GLCD_Send+0x2a>
    21c4:	80 31       	cpi	r24, 0x10	; 16
    21c6:	21 f0       	breq	.+8      	; 0x21d0 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	80 93 29 01 	sts	0x0129, r24
				break;
    21ce:	33 c0       	rjmp	.+102    	; 0x2236 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    21d0:	88 e7       	ldi	r24, 0x78	; 120
    21d2:	0e 94 5d 19 	call	0x32ba	; 0x32ba <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    21d6:	0e 94 4c 19 	call	0x3298	; 0x3298 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    21da:	88 31       	cpi	r24, 0x18	; 24
    21dc:	31 f0       	breq	.+12     	; 0x21ea <GLCD_Send+0x44>
    21de:	80 32       	cpi	r24, 0x20	; 32
    21e0:	21 f0       	breq	.+8      	; 0x21ea <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	80 93 29 01 	sts	0x0129, r24
				break;
    21e8:	26 c0       	rjmp	.+76     	; 0x2236 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    21ea:	8c 2f       	mov	r24, r28
    21ec:	0e 94 5d 19 	call	0x32ba	; 0x32ba <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    21f0:	0e 94 4c 19 	call	0x3298	; 0x3298 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    21f4:	88 32       	cpi	r24, 0x28	; 40
    21f6:	19 f4       	brne	.+6      	; 0x21fe <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    21f8:	f1 10       	cpse	r15, r1
    21fa:	07 c0       	rjmp	.+14     	; 0x220a <GLCD_Send+0x64>
    21fc:	1a c0       	rjmp	.+52     	; 0x2232 <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    21fe:	80 33       	cpi	r24, 0x30	; 48
    2200:	d9 f3       	breq	.-10     	; 0x21f8 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 29 01 	sts	0x0129, r24
				break;
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <GLCD_Send+0x90>
    220a:	c0 2f       	mov	r28, r16
    220c:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    220e:	8e 01       	movw	r16, r28
    2210:	0f 5f       	subi	r16, 0xFF	; 255
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	fa 94       	dec	r15
    2216:	0f 0d       	add	r16, r15
    2218:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    221a:	89 91       	ld	r24, Y+
    221c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    2220:	0e 94 4c 19 	call	0x3298	; 0x3298 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    2224:	88 32       	cpi	r24, 0x28	; 40
    2226:	11 f0       	breq	.+4      	; 0x222c <GLCD_Send+0x86>
    2228:	80 33       	cpi	r24, 0x30	; 48
    222a:	19 f4       	brne	.+6      	; 0x2232 <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    222c:	c0 17       	cp	r28, r16
    222e:	d1 07       	cpc	r29, r17
    2230:	a1 f7       	brne	.-24     	; 0x221a <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    2232:	10 92 29 01 	sts	0x0129, r1
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    2236:	0e 94 57 19 	call	0x32ae	; 0x32ae <TWI_EndTransmission>
}
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	08 95       	ret

00002246 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	1f 92       	push	r1
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	be 01       	movw	r22, r28
    2256:	6f 5f       	subi	r22, 0xFF	; 255
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <GLCD_Send>
}
    2260:	0f 90       	pop	r0
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	08 95       	ret

00002268 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    226c:	81 e2       	ldi	r24, 0x21	; 33
    226e:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    2278:	8f e7       	ldi	r24, 0x7F	; 127
    227a:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    227e:	82 e2       	ldi	r24, 0x22	; 34
    2280:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    228a:	87 e0       	ldi	r24, 0x07	; 7
    228c:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
    2290:	c0 e0       	ldi	r28, 0x00	; 0
    2292:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    2294:	be 01       	movw	r22, r28
    2296:	62 95       	swap	r22
    2298:	72 95       	swap	r23
    229a:	70 7f       	andi	r23, 0xF0	; 240
    229c:	76 27       	eor	r23, r22
    229e:	60 7f       	andi	r22, 0xF0	; 240
    22a0:	76 27       	eor	r23, r22
    22a2:	6d 5c       	subi	r22, 0xCD	; 205
    22a4:	7e 4f       	sbci	r23, 0xFE	; 254
    22a6:	40 e1       	ldi	r20, 0x10	; 16
    22a8:	80 e4       	ldi	r24, 0x40	; 64
    22aa:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <GLCD_Send>
    22ae:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    22b0:	c0 34       	cpi	r28, 0x40	; 64
    22b2:	d1 05       	cpc	r29, r1
    22b4:	79 f7       	brne	.-34     	; 0x2294 <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	08 95       	ret

000022bc <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    22bc:	cf 93       	push	r28
    22be:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    22c0:	81 e8       	ldi	r24, 0x81	; 129
    22c2:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    22c6:	8c 2f       	mov	r24, r28
    22c8:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
}
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    22d0:	88 23       	and	r24, r24
    22d2:	14 f0       	brlt	.+4      	; 0x22d8 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    22d4:	80 93 2a 01 	sts	0x012A, r24
    22d8:	08 95       	ret

000022da <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    22da:	90 91 2b 01 	lds	r25, 0x012B
    22de:	90 34       	cpi	r25, 0x40	; 64
    22e0:	10 f4       	brcc	.+4      	; 0x22e6 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    22e2:	80 93 2b 01 	sts	0x012B, r24
    22e6:	08 95       	ret

000022e8 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    22e8:	cf 93       	push	r28
    22ea:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    22ec:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GLCD_GotoX>
	GLCD_GotoY(Y);
    22f0:	8c 2f       	mov	r24, r28
    22f2:	0e 94 6d 11 	call	0x22da	; 0x22da <GLCD_GotoY>
}
    22f6:	cf 91       	pop	r28
    22f8:	08 95       	ret

000022fa <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    22fa:	0e 94 42 19 	call	0x3284	; 0x3284 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    22fe:	8e ea       	ldi	r24, 0xAE	; 174
    2300:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    2304:	85 ed       	ldi	r24, 0xD5	; 213
    2306:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    230a:	80 ef       	ldi	r24, 0xF0	; 240
    230c:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    2310:	88 ea       	ldi	r24, 0xA8	; 168
    2312:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    2316:	8f e3       	ldi	r24, 0x3F	; 63
    2318:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    231c:	83 ed       	ldi	r24, 0xD3	; 211
    231e:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    2328:	8d e8       	ldi	r24, 0x8D	; 141
    232a:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    232e:	84 e1       	ldi	r24, 0x14	; 20
    2330:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    2334:	80 e4       	ldi	r24, 0x40	; 64
    2336:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    233a:	80 e2       	ldi	r24, 0x20	; 32
    233c:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    2346:	81 ea       	ldi	r24, 0xA1	; 161
    2348:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    234c:	88 ec       	ldi	r24, 0xC8	; 200
    234e:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    2352:	8a ed       	ldi	r24, 0xDA	; 218
    2354:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    2358:	82 e1       	ldi	r24, 0x12	; 18
    235a:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    235e:	81 e8       	ldi	r24, 0x81	; 129
    2360:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    236a:	89 ed       	ldi	r24, 0xD9	; 217
    236c:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    2370:	81 ef       	ldi	r24, 0xF1	; 241
    2372:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    2376:	8b ed       	ldi	r24, 0xDB	; 219
    2378:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    237c:	80 e2       	ldi	r24, 0x20	; 32
    237e:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    2382:	84 ea       	ldi	r24, 0xA4	; 164
    2384:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    2388:	86 ea       	ldi	r24, 0xA6	; 166
    238a:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    238e:	8e e2       	ldi	r24, 0x2E	; 46
    2390:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    2394:	8f ea       	ldi	r24, 0xAF	; 175
    2396:	0e 94 23 11 	call	0x2246	; 0x2246 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    23a2:	86 ea       	ldi	r24, 0xA6	; 166
    23a4:	80 93 2c 01 	sts	0x012C, r24
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    23a8:	10 92 31 01 	sts	0x0131, r1
    23ac:	10 92 30 01 	sts	0x0130, r1
    23b0:	10 92 2f 01 	sts	0x012F, r1
    23b4:	10 92 2b 01 	sts	0x012B, r1
    23b8:	10 92 2a 01 	sts	0x012A, r1
    23bc:	08 95       	ret

000023be <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    23be:	88 30       	cpi	r24, 0x08	; 8
    23c0:	28 f4       	brcc	.+10     	; 0x23cc <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    23c2:	88 0f       	add	r24, r24
    23c4:	88 0f       	add	r24, r24
    23c6:	88 0f       	add	r24, r24
    23c8:	80 93 2b 01 	sts	0x012B, r24
    23cc:	08 95       	ret

000023ce <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    23ce:	80 91 2a 01 	lds	r24, 0x012A
    23d2:	08 95       	ret

000023d4 <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	06 2f       	mov	r16, r22
    23ee:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    23f0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    23f4:	d0 91 2b 01 	lds	r29, 0x012B
    23f8:	c0 91 2a 01 	lds	r28, 0x012A
    23fc:	6d 2f       	mov	r22, r29
    23fe:	8c 2f       	mov	r24, r28
    2400:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    2404:	1f 3f       	cpi	r17, 0xFF	; 255
    2406:	91 f4       	brne	.+36     	; 0x242c <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    2408:	90 2f       	mov	r25, r16
    240a:	97 70       	andi	r25, 0x07	; 7
    240c:	81 2c       	mov	r8, r1
    240e:	91 2c       	mov	r9, r1
    2410:	54 01       	movw	r10, r8
    2412:	83 94       	inc	r8
    2414:	75 01       	movw	r14, r10
    2416:	64 01       	movw	r12, r8
    2418:	04 c0       	rjmp	.+8      	; 0x2422 <GLCD_SetPixel+0x4e>
    241a:	cc 0c       	add	r12, r12
    241c:	dd 1c       	adc	r13, r13
    241e:	ee 1c       	adc	r14, r14
    2420:	ff 1c       	adc	r15, r15
    2422:	9a 95       	dec	r25
    2424:	d2 f7       	brpl	.-12     	; 0x241a <GLCD_SetPixel+0x46>
    2426:	48 2f       	mov	r20, r24
    2428:	4c 29       	or	r20, r12
    242a:	13 c0       	rjmp	.+38     	; 0x2452 <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    242c:	07 70       	andi	r16, 0x07	; 7
    242e:	c1 2c       	mov	r12, r1
    2430:	d1 2c       	mov	r13, r1
    2432:	76 01       	movw	r14, r12
    2434:	c3 94       	inc	r12
    2436:	b7 01       	movw	r22, r14
    2438:	a6 01       	movw	r20, r12
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <GLCD_SetPixel+0x70>
    243c:	44 0f       	add	r20, r20
    243e:	55 1f       	adc	r21, r21
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	0a 95       	dec	r16
    2446:	d2 f7       	brpl	.-12     	; 0x243c <GLCD_SetPixel+0x68>
    2448:	8a 01       	movw	r16, r20
    244a:	9b 01       	movw	r18, r22
    244c:	00 95       	com	r16
    244e:	48 2f       	mov	r20, r24
    2450:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    2452:	6d 2f       	mov	r22, r29
    2454:	8c 2f       	mov	r24, r28
    2456:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
}
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    2464:	ef 90       	pop	r14
    2466:	df 90       	pop	r13
    2468:	cf 90       	pop	r12
    246a:	bf 90       	pop	r11
    246c:	af 90       	pop	r10
    246e:	9f 90       	pop	r9
    2470:	8f 90       	pop	r8
    2472:	08 95       	ret

00002474 <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2474:	3f 92       	push	r3
    2476:	4f 92       	push	r4
    2478:	5f 92       	push	r5
    247a:	6f 92       	push	r6
    247c:	7f 92       	push	r7
    247e:	8f 92       	push	r8
    2480:	9f 92       	push	r9
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2498:	88 23       	and	r24, r24
    249a:	0c f4       	brge	.+2      	; 0x249e <GLCD_SetPixels+0x2a>
    249c:	c6 c0       	rjmp	.+396    	; 0x262a <GLCD_SetPixels+0x1b6>
    249e:	44 23       	and	r20, r20
    24a0:	0c f4       	brge	.+2      	; 0x24a4 <GLCD_SetPixels+0x30>
    24a2:	c3 c0       	rjmp	.+390    	; 0x262a <GLCD_SetPixels+0x1b6>
    24a4:	60 34       	cpi	r22, 0x40	; 64
    24a6:	08 f0       	brcs	.+2      	; 0x24aa <GLCD_SetPixels+0x36>
    24a8:	c0 c0       	rjmp	.+384    	; 0x262a <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    24aa:	20 34       	cpi	r18, 0x40	; 64
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <GLCD_SetPixels+0x3c>
    24ae:	bd c0       	rjmp	.+378    	; 0x262a <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    24b0:	11 e0       	ldi	r17, 0x01	; 1
    24b2:	81 2e       	mov	r8, r17
    24b4:	86 1a       	sub	r8, r22
    24b6:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    24b8:	18 1b       	sub	r17, r24
    24ba:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    24bc:	46 2f       	mov	r20, r22
    24be:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    24c0:	76 2e       	mov	r7, r22
    24c2:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    24c4:	e8 2c       	mov	r14, r8
    24c6:	f1 2c       	mov	r15, r1
    24c8:	88 e0       	ldi	r24, 0x08	; 8
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	84 1b       	sub	r24, r20
    24ce:	91 09       	sbc	r25, r1
    24d0:	e8 16       	cp	r14, r24
    24d2:	f9 06       	cpc	r15, r25
    24d4:	7c f4       	brge	.+30     	; 0x24f4 <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    24d6:	88 e0       	ldi	r24, 0x08	; 8
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	8e 19       	sub	r24, r14
    24dc:	9f 09       	sbc	r25, r15
    24de:	2f ef       	ldi	r18, 0xFF	; 255
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	59 01       	movw	r10, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <GLCD_SetPixels+0x76>
    24e6:	b5 94       	asr	r11
    24e8:	a7 94       	ror	r10
    24ea:	8a 95       	dec	r24
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <GLCD_SetPixels+0x72>
    24ee:	8a 2d       	mov	r24, r10
			h = height;
    24f0:	68 2c       	mov	r6, r8
    24f2:	04 c0       	rjmp	.+8      	; 0x24fc <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    24f4:	88 e0       	ldi	r24, 0x08	; 8
    24f6:	68 2e       	mov	r6, r24
    24f8:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    24fc:	a8 2e       	mov	r10, r24
    24fe:	b1 2c       	mov	r11, r1
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <GLCD_SetPixels+0x92>
    2502:	aa 0c       	add	r10, r10
    2504:	bb 1c       	adc	r11, r11
    2506:	4a 95       	dec	r20
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <GLCD_SetPixels+0x8e>
    250a:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    250c:	67 2d       	mov	r22, r7
    250e:	89 2d       	mov	r24, r9
    2510:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    2514:	11 23       	and	r17, r17
    2516:	c9 f1       	breq	.+114    	; 0x258a <GLCD_SetPixels+0x116>
    2518:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    251a:	0f 2e       	mov	r0, r31
    251c:	fb e2       	ldi	r31, 0x2B	; 43
    251e:	cf 2e       	mov	r12, r31
    2520:	f1 e0       	ldi	r31, 0x01	; 1
    2522:	df 2e       	mov	r13, r31
    2524:	f0 2d       	mov	r31, r0
    2526:	ca e2       	ldi	r28, 0x2A	; 42
    2528:	d1 e0       	ldi	r29, 0x01	; 1
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    252a:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    252c:	f6 01       	movw	r30, r12
    252e:	40 80       	ld	r4, Z
    2530:	b8 80       	ld	r11, Y
    2532:	64 2d       	mov	r22, r4
    2534:	8b 2d       	mov	r24, r11
    2536:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    253a:	0f 3f       	cpi	r16, 0xFF	; 255
    253c:	19 f4       	brne	.+6      	; 0x2544 <GLCD_SetPixels+0xd0>
    253e:	48 2f       	mov	r20, r24
    2540:	43 29       	or	r20, r3
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <GLCD_SetPixels+0xd4>
    2544:	48 2f       	mov	r20, r24
    2546:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2548:	9b 2d       	mov	r25, r11
    254a:	9f 5f       	subi	r25, 0xFF	; 255
    254c:	98 83       	st	Y, r25
    254e:	64 2d       	mov	r22, r4
    2550:	8b 2d       	mov	r24, r11
    2552:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    2556:	53 94       	inc	r5
    2558:	51 12       	cpse	r5, r17
    255a:	e8 cf       	rjmp	.-48     	; 0x252c <GLCD_SetPixels+0xb8>
    255c:	16 c0       	rjmp	.+44     	; 0x258a <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    255e:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    2560:	6c 2f       	mov	r22, r28
    2562:	89 2d       	mov	r24, r9
    2564:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    2568:	11 23       	and	r17, r17
    256a:	f1 f0       	breq	.+60     	; 0x25a8 <GLCD_SetPixels+0x134>
    256c:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    256e:	f6 01       	movw	r30, r12
    2570:	60 81       	ld	r22, Z
    2572:	f2 01       	movw	r30, r4
    2574:	80 81       	ld	r24, Z
    2576:	98 2f       	mov	r25, r24
    2578:	9f 5f       	subi	r25, 0xFF	; 255
    257a:	90 83       	st	Z, r25
    257c:	40 2f       	mov	r20, r16
    257e:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    2582:	73 94       	inc	r7
    2584:	71 16       	cp	r7, r17
    2586:	81 f0       	breq	.+32     	; 0x25a8 <GLCD_SetPixels+0x134>
    2588:	f2 cf       	rjmp	.-28     	; 0x256e <GLCD_SetPixels+0xfa>
    258a:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    258c:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    258e:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    2590:	0f 2e       	mov	r0, r31
    2592:	fb e2       	ldi	r31, 0x2B	; 43
    2594:	cf 2e       	mov	r12, r31
    2596:	f1 e0       	ldi	r31, 0x01	; 1
    2598:	df 2e       	mov	r13, r31
    259a:	f0 2d       	mov	r31, r0
    259c:	0f 2e       	mov	r0, r31
    259e:	fa e2       	ldi	r31, 0x2A	; 42
    25a0:	4f 2e       	mov	r4, r31
    25a2:	f1 e0       	ldi	r31, 0x01	; 1
    25a4:	5f 2e       	mov	r5, r31
    25a6:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    25a8:	26 2d       	mov	r18, r6
    25aa:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    25ac:	e2 2f       	mov	r30, r18
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	cf 01       	movw	r24, r30
    25b2:	08 96       	adiw	r24, 0x08	; 8
    25b4:	e8 16       	cp	r14, r24
    25b6:	f9 06       	cpc	r15, r25
    25b8:	94 f6       	brge	.-92     	; 0x255e <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    25ba:	28 15       	cp	r18, r8
    25bc:	b0 f5       	brcc	.+108    	; 0x262a <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    25be:	ee 1a       	sub	r14, r30
    25c0:	ff 0a       	sbc	r15, r31
    25c2:	8f ef       	ldi	r24, 0xFF	; 255
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 01       	movw	r18, r24
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <GLCD_SetPixels+0x15a>
    25ca:	22 0f       	add	r18, r18
    25cc:	33 1f       	adc	r19, r19
    25ce:	ea 94       	dec	r14
    25d0:	e2 f7       	brpl	.-8      	; 0x25ca <GLCD_SetPixels+0x156>
    25d2:	79 01       	movw	r14, r18
    25d4:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    25d6:	6c 2f       	mov	r22, r28
    25d8:	68 5f       	subi	r22, 0xF8	; 248
    25da:	89 2d       	mov	r24, r9
    25dc:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    25e0:	11 23       	and	r17, r17
    25e2:	19 f1       	breq	.+70     	; 0x262a <GLCD_SetPixels+0x1b6>
    25e4:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    25e6:	0f 2e       	mov	r0, r31
    25e8:	fb e2       	ldi	r31, 0x2B	; 43
    25ea:	cf 2e       	mov	r12, r31
    25ec:	f1 e0       	ldi	r31, 0x01	; 1
    25ee:	df 2e       	mov	r13, r31
    25f0:	f0 2d       	mov	r31, r0
    25f2:	ca e2       	ldi	r28, 0x2A	; 42
    25f4:	d1 e0       	ldi	r29, 0x01	; 1
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    25f6:	9e 2c       	mov	r9, r14
    25f8:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    25fa:	f6 01       	movw	r30, r12
    25fc:	a0 80       	ld	r10, Z
    25fe:	f8 80       	ld	r15, Y
    2600:	6a 2d       	mov	r22, r10
    2602:	8f 2d       	mov	r24, r15
    2604:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2608:	0f 3f       	cpi	r16, 0xFF	; 255
    260a:	19 f4       	brne	.+6      	; 0x2612 <GLCD_SetPixels+0x19e>
    260c:	48 2f       	mov	r20, r24
    260e:	4e 29       	or	r20, r14
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <GLCD_SetPixels+0x1a2>
    2612:	48 2f       	mov	r20, r24
    2614:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2616:	9f 2d       	mov	r25, r15
    2618:	9f 5f       	subi	r25, 0xFF	; 255
    261a:	98 83       	st	Y, r25
    261c:	6a 2d       	mov	r22, r10
    261e:	8f 2d       	mov	r24, r15
    2620:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    2624:	b3 94       	inc	r11
    2626:	b1 12       	cpse	r11, r17
    2628:	e8 cf       	rjmp	.-48     	; 0x25fa <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	9f 90       	pop	r9
    2640:	8f 90       	pop	r8
    2642:	7f 90       	pop	r7
    2644:	6f 90       	pop	r6
    2646:	5f 90       	pop	r5
    2648:	4f 90       	pop	r4
    264a:	3f 90       	pop	r3
    264c:	08 95       	ret

0000264e <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    264e:	2f 92       	push	r2
    2650:	3f 92       	push	r3
    2652:	4f 92       	push	r4
    2654:	5f 92       	push	r5
    2656:	6f 92       	push	r6
    2658:	7f 92       	push	r7
    265a:	8f 92       	push	r8
    265c:	9f 92       	push	r9
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	2c 97       	sbiw	r28, 0x0c	; 12
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	5c 01       	movw	r10, r24
    2684:	66 2e       	mov	r6, r22
    2686:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    2688:	20 91 2a 01 	lds	r18, 0x012A
    268c:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    268e:	30 91 2b 01 	lds	r19, 0x012B
    2692:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    2694:	82 2f       	mov	r24, r18
    2696:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    2698:	1a f4       	brpl	.+6      	; 0x26a0 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    269a:	80 e8       	ldi	r24, 0x80	; 128
    269c:	68 2e       	mov	r6, r24
    269e:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    26a0:	84 2f       	mov	r24, r20
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	07 96       	adiw	r24, 0x07	; 7
    26a6:	95 95       	asr	r25
    26a8:	87 95       	ror	r24
    26aa:	95 95       	asr	r25
    26ac:	87 95       	ror	r24
    26ae:	95 95       	asr	r25
    26b0:	87 95       	ror	r24
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	96 95       	lsr	r25
    26ba:	96 95       	lsr	r25
    26bc:	96 95       	lsr	r25
    26be:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    26c0:	89 30       	cpi	r24, 0x09	; 9
    26c2:	48 f0       	brcs	.+18     	; 0x26d6 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    26c4:	2d 81       	ldd	r18, Y+5	; 0x05
    26c6:	3e 81       	ldd	r19, Y+6	; 0x06
    26c8:	28 5f       	subi	r18, 0xF8	; 248
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	a9 01       	movw	r20, r18
    26ce:	48 1b       	sub	r20, r24
    26d0:	51 09       	sbc	r21, r1
    26d2:	5e 83       	std	Y+6, r21	; 0x06
    26d4:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    26d6:	4a 84       	ldd	r4, Y+10	; 0x0a
    26d8:	57 e0       	ldi	r21, 0x07	; 7
    26da:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	89 2b       	or	r24, r25
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <GLCD_DrawBitmap+0x98>
    26e4:	fa c0       	rjmp	.+500    	; 0x28da <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    26ea:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    26ec:	26 2c       	mov	r2, r6
    26ee:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    26f0:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    26f2:	88 e0       	ldi	r24, 0x08	; 8
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	fc 01       	movw	r30, r24
    26f8:	e4 19       	sub	r30, r4
    26fa:	f1 09       	sbc	r31, r1
    26fc:	fb 83       	std	Y+3, r31	; 0x03
    26fe:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2700:	0f 2e       	mov	r0, r31
    2702:	fb e2       	ldi	r31, 0x2B	; 43
    2704:	cf 2e       	mov	r12, r31
    2706:	f1 e0       	ldi	r31, 0x01	; 1
    2708:	df 2e       	mov	r13, r31
    270a:	f0 2d       	mov	r31, r0
    270c:	0a e2       	ldi	r16, 0x2A	; 42
    270e:	11 e0       	ldi	r17, 0x01	; 1
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2710:	6c 81       	ldd	r22, Y+4	; 0x04
    2712:	8f 81       	ldd	r24, Y+7	; 0x07
    2714:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    2718:	39 86       	std	Y+9, r3	; 0x09
    271a:	28 86       	std	Y+8, r2	; 0x08
    271c:	72 9c       	mul	r7, r2
    271e:	c0 01       	movw	r24, r0
    2720:	73 9c       	mul	r7, r3
    2722:	90 0d       	add	r25, r0
    2724:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    2726:	7c 01       	movw	r14, r24
    2728:	e2 18       	sub	r14, r2
    272a:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    272c:	66 20       	and	r6, r6
    272e:	09 f4       	brne	.+2      	; 0x2732 <GLCD_DrawBitmap+0xe4>
    2730:	3c c0       	rjmp	.+120    	; 0x27aa <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    2732:	9c 01       	movw	r18, r24
    2734:	2a 0d       	add	r18, r10
    2736:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2738:	85 2c       	mov	r8, r5
    273a:	3c 87       	std	Y+12, r19	; 0x0c
    273c:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    273e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2740:	fc 85       	ldd	r31, Y+12	; 0x0c
    2742:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    2744:	04 2c       	mov	r0, r4
    2746:	01 c0       	rjmp	.+2      	; 0x274a <GLCD_DrawBitmap+0xfc>
    2748:	99 0c       	add	r9, r9
    274a:	0a 94       	dec	r0
    274c:	ea f7       	brpl	.-6      	; 0x2748 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    274e:	77 20       	and	r7, r7
    2750:	79 f0       	breq	.+30     	; 0x2770 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    2752:	f5 01       	movw	r30, r10
    2754:	ee 0d       	add	r30, r14
    2756:	ff 1d       	adc	r31, r15
    2758:	2f ef       	ldi	r18, 0xFF	; 255
    275a:	e2 1a       	sub	r14, r18
    275c:	f2 0a       	sbc	r15, r18
    275e:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0a 80       	ldd	r0, Y+2	; 0x02
    2764:	02 c0       	rjmp	.+4      	; 0x276a <GLCD_DrawBitmap+0x11c>
    2766:	95 95       	asr	r25
    2768:	87 95       	ror	r24
    276a:	0a 94       	dec	r0
    276c:	e2 f7       	brpl	.-8      	; 0x2766 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    276e:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    2770:	39 81       	ldd	r19, Y+1	; 0x01
    2772:	31 30       	cpi	r19, 0x01	; 1
    2774:	39 f4       	brne	.+14     	; 0x2784 <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2776:	f6 01       	movw	r30, r12
    2778:	60 81       	ld	r22, Z
    277a:	f8 01       	movw	r30, r16
    277c:	80 81       	ld	r24, Z
    277e:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
    2782:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2784:	f6 01       	movw	r30, r12
    2786:	60 81       	ld	r22, Z
    2788:	f8 01       	movw	r30, r16
    278a:	80 81       	ld	r24, Z
    278c:	98 2f       	mov	r25, r24
    278e:	9f 5f       	subi	r25, 0xFF	; 255
    2790:	90 83       	st	Z, r25
    2792:	49 2d       	mov	r20, r9
    2794:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2798:	83 94       	inc	r8
    279a:	2b 85       	ldd	r18, Y+11	; 0x0b
    279c:	3c 85       	ldd	r19, Y+12	; 0x0c
    279e:	2f 5f       	subi	r18, 0xFF	; 255
    27a0:	3f 4f       	sbci	r19, 0xFF	; 255
    27a2:	3c 87       	std	Y+12, r19	; 0x0c
    27a4:	2b 87       	std	Y+11, r18	; 0x0b
    27a6:	86 10       	cpse	r8, r6
    27a8:	ca cf       	rjmp	.-108    	; 0x273e <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    27aa:	e2 e3       	ldi	r30, 0x32	; 50
    27ac:	f1 e0       	ldi	r31, 0x01	; 1
    27ae:	80 81       	ld	r24, Z
    27b0:	88 23       	and	r24, r24
    27b2:	41 f0       	breq	.+16     	; 0x27c4 <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    27b4:	f6 01       	movw	r30, r12
    27b6:	60 81       	ld	r22, Z
    27b8:	f8 01       	movw	r30, r16
    27ba:	80 81       	ld	r24, Z
    27bc:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
    27c0:	48 2f       	mov	r20, r24
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    27c4:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    27c6:	f6 01       	movw	r30, r12
    27c8:	60 81       	ld	r22, Z
    27ca:	f8 01       	movw	r30, r16
    27cc:	80 81       	ld	r24, Z
    27ce:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    27d2:	fc 81       	ldd	r31, Y+4	; 0x04
    27d4:	f8 5f       	subi	r31, 0xF8	; 248
    27d6:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    27d8:	73 94       	inc	r7
    27da:	87 2d       	mov	r24, r7
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	2d 81       	ldd	r18, Y+5	; 0x05
    27e0:	3e 81       	ldd	r19, Y+6	; 0x06
    27e2:	82 17       	cp	r24, r18
    27e4:	93 07       	cpc	r25, r19
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <GLCD_DrawBitmap+0x19c>
    27e8:	93 cf       	rjmp	.-218    	; 0x2710 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	08 f4       	brcc	.+2      	; 0x27f2 <GLCD_DrawBitmap+0x1a4>
    27f0:	74 c0       	rjmp	.+232    	; 0x28da <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    27f2:	6f 2f       	mov	r22, r31
    27f4:	8f 81       	ldd	r24, Y+7	; 0x07
    27f6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    27fa:	27 2d       	mov	r18, r7
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	21 50       	subi	r18, 0x01	; 1
    2800:	31 09       	sbc	r19, r1
    2802:	48 85       	ldd	r20, Y+8	; 0x08
    2804:	59 85       	ldd	r21, Y+9	; 0x09
    2806:	24 9f       	mul	r18, r20
    2808:	c0 01       	movw	r24, r0
    280a:	25 9f       	mul	r18, r21
    280c:	90 0d       	add	r25, r0
    280e:	34 9f       	mul	r19, r20
    2810:	90 0d       	add	r25, r0
    2812:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2814:	66 20       	and	r6, r6
    2816:	09 f4       	brne	.+2      	; 0x281a <GLCD_DrawBitmap+0x1cc>
    2818:	3e c0       	rjmp	.+124    	; 0x2896 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    281a:	45 01       	movw	r8, r10
    281c:	88 0e       	add	r8, r24
    281e:	99 1e       	adc	r9, r25
    2820:	65 01       	movw	r12, r10
    2822:	5f ef       	ldi	r21, 0xFF	; 255
    2824:	c5 1a       	sub	r12, r21
    2826:	d5 0a       	sbc	r13, r21
    2828:	6a 94       	dec	r6
    282a:	c6 0c       	add	r12, r6
    282c:	d1 1c       	adc	r13, r1
    282e:	c8 0e       	add	r12, r24
    2830:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2832:	0f 2e       	mov	r0, r31
    2834:	fb e2       	ldi	r31, 0x2B	; 43
    2836:	ef 2e       	mov	r14, r31
    2838:	f1 e0       	ldi	r31, 0x01	; 1
    283a:	ff 2e       	mov	r15, r31
    283c:	f0 2d       	mov	r31, r0
    283e:	0a e2       	ldi	r16, 0x2A	; 42
    2840:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2842:	88 e0       	ldi	r24, 0x08	; 8
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	5c 01       	movw	r10, r24
    2848:	a4 18       	sub	r10, r4
    284a:	b1 08       	sbc	r11, r1
    284c:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    284e:	f7 01       	movw	r30, r14
    2850:	80 80       	ld	r8, Z
    2852:	f8 01       	movw	r30, r16
    2854:	90 80       	ld	r9, Z
    2856:	68 2d       	mov	r22, r8
    2858:	89 2d       	mov	r24, r9
    285a:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    285e:	f3 01       	movw	r30, r6
    2860:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	0a 2c       	mov	r0, r10
    2866:	02 c0       	rjmp	.+4      	; 0x286c <GLCD_DrawBitmap+0x21e>
    2868:	55 95       	asr	r21
    286a:	47 95       	ror	r20
    286c:	0a 94       	dec	r0
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    2870:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    2872:	f9 81       	ldd	r31, Y+1	; 0x01
    2874:	f1 30       	cpi	r31, 0x01	; 1
    2876:	09 f4       	brne	.+2      	; 0x287a <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2878:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    287a:	89 2d       	mov	r24, r9
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	f8 01       	movw	r30, r16
    2880:	80 83       	st	Z, r24
    2882:	68 2d       	mov	r22, r8
    2884:	89 2d       	mov	r24, r9
    2886:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
    288a:	ff ef       	ldi	r31, 0xFF	; 255
    288c:	6f 1a       	sub	r6, r31
    288e:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2890:	6c 14       	cp	r6, r12
    2892:	7d 04       	cpc	r7, r13
    2894:	e1 f6       	brne	.-72     	; 0x284e <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2896:	80 91 32 01 	lds	r24, 0x0132
    289a:	88 23       	and	r24, r24
    289c:	99 f0       	breq	.+38     	; 0x28c4 <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	41 f4       	brne	.+16     	; 0x28b2 <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    28a2:	60 91 2b 01 	lds	r22, 0x012B
    28a6:	80 91 2a 01 	lds	r24, 0x012A
    28aa:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
    28ae:	48 2f       	mov	r20, r24
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    28b2:	60 91 2b 01 	lds	r22, 0x012B
    28b6:	80 91 2a 01 	lds	r24, 0x012A
    28ba:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
    28be:	48 2f       	mov	r20, r24
    28c0:	40 95       	com	r20
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    28c4:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    28c6:	60 91 2b 01 	lds	r22, 0x012B
    28ca:	ea e2       	ldi	r30, 0x2A	; 42
    28cc:	f1 e0       	ldi	r31, 0x01	; 1
    28ce:	80 81       	ld	r24, Z
    28d0:	98 2f       	mov	r25, r24
    28d2:	9f 5f       	subi	r25, 0xFF	; 255
    28d4:	90 83       	st	Z, r25
    28d6:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    28da:	0e 94 e7 11 	call	0x23ce	; 0x23ce <GLCD_GetX>
    28de:	6a 85       	ldd	r22, Y+10	; 0x0a
    28e0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
}
    28e4:	2c 96       	adiw	r28, 0x0c	; 12
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
    2900:	bf 90       	pop	r11
    2902:	af 90       	pop	r10
    2904:	9f 90       	pop	r9
    2906:	8f 90       	pop	r8
    2908:	7f 90       	pop	r7
    290a:	6f 90       	pop	r6
    290c:	5f 90       	pop	r5
    290e:	4f 90       	pop	r4
    2910:	3f 90       	pop	r3
    2912:	2f 90       	pop	r2
    2914:	08 95       	ret

00002916 <GLCD_DrawLine>:

void GLCD_DrawLine(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2, enum Color_t Color)
{
    2916:	bf 92       	push	r11
    2918:	cf 92       	push	r12
    291a:	df 92       	push	r13
    291c:	ef 92       	push	r14
    291e:	ff 92       	push	r15
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	c8 2f       	mov	r28, r24
    292a:	f6 2e       	mov	r15, r22
    292c:	14 2f       	mov	r17, r20
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    292e:	88 23       	and	r24, r24
    2930:	0c f4       	brge	.+2      	; 0x2934 <GLCD_DrawLine+0x1e>
    2932:	7c c0       	rjmp	.+248    	; 0x2a2c <GLCD_DrawLine+0x116>
    2934:	44 23       	and	r20, r20
    2936:	0c f4       	brge	.+2      	; 0x293a <GLCD_DrawLine+0x24>
    2938:	79 c0       	rjmp	.+242    	; 0x2a2c <GLCD_DrawLine+0x116>
    293a:	8f e3       	ldi	r24, 0x3F	; 63
    293c:	86 17       	cp	r24, r22
    293e:	08 f4       	brcc	.+2      	; 0x2942 <GLCD_DrawLine+0x2c>
    2940:	75 c0       	rjmp	.+234    	; 0x2a2c <GLCD_DrawLine+0x116>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    2942:	20 34       	cpi	r18, 0x40	; 64
    2944:	08 f0       	brcs	.+2      	; 0x2948 <GLCD_DrawLine+0x32>
    2946:	72 c0       	rjmp	.+228    	; 0x2a2c <GLCD_DrawLine+0x116>
	{
		if (X1 == X2)
    2948:	c4 13       	cpse	r28, r20
    294a:	0a c0       	rjmp	.+20     	; 0x2960 <GLCD_DrawLine+0x4a>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    294c:	26 17       	cp	r18, r22
    294e:	10 f4       	brcc	.+4      	; 0x2954 <GLCD_DrawLine+0x3e>
		__GLCD_Swap(Y1, Y2);
    2950:	f2 2e       	mov	r15, r18
    2952:	26 2f       	mov	r18, r22

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2954:	4c 2f       	mov	r20, r28
    2956:	6f 2d       	mov	r22, r15
    2958:	8c 2f       	mov	r24, r28
    295a:	0e 94 3a 12 	call	0x2474	; 0x2474 <GLCD_SetPixels>
    295e:	66 c0       	rjmp	.+204    	; 0x2a2c <GLCD_DrawLine+0x116>
	{
		if (X1 == X2)
		{
			GLCD_DrawVLine(Y1, Y2, X1, Color);
		}
		else if (Y1 == Y2)
    2960:	62 13       	cpse	r22, r18
    2962:	0c c0       	rjmp	.+24     	; 0x297c <GLCD_DrawLine+0x66>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2964:	4c 17       	cp	r20, r28
    2966:	08 f4       	brcc	.+2      	; 0x296a <GLCD_DrawLine+0x54>
    2968:	5d c0       	rjmp	.+186    	; 0x2a24 <GLCD_DrawLine+0x10e>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    296a:	40 2f       	mov	r20, r16
    296c:	6f 2d       	mov	r22, r15
    296e:	8c 2f       	mov	r24, r28
    2970:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <GLCD_SetPixel>
		X1++;
    2974:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2976:	1c 17       	cp	r17, r28
    2978:	c0 f7       	brcc	.-16     	; 0x296a <GLCD_DrawLine+0x54>
    297a:	58 c0       	rjmp	.+176    	; 0x2a2c <GLCD_DrawLine+0x116>
		}
		else
		{
			uint8_t deltax, deltay, x, y, slope;
			int8_t error, ystep;
			slope = ((__GLCD_AbsDiff(Y1, Y2) > __GLCD_AbsDiff(X1,X2)) ? 1 : 0);
    297c:	26 17       	cp	r18, r22
    297e:	28 f4       	brcc	.+10     	; 0x298a <GLCD_DrawLine+0x74>
    2980:	a6 2f       	mov	r26, r22
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	a2 1b       	sub	r26, r18
    2986:	b1 09       	sbc	r27, r1
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <GLCD_DrawLine+0x7c>
    298a:	a2 2f       	mov	r26, r18
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	a6 1b       	sub	r26, r22
    2990:	b1 09       	sbc	r27, r1
    2992:	1c 17       	cp	r17, r28
    2994:	28 f4       	brcc	.+10     	; 0x29a0 <GLCD_DrawLine+0x8a>
    2996:	ec 2f       	mov	r30, r28
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	e1 1b       	sub	r30, r17
    299c:	f1 09       	sbc	r31, r1
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <GLCD_DrawLine+0x92>
    29a0:	e1 2f       	mov	r30, r17
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	ec 1b       	sub	r30, r28
    29a6:	f1 09       	sbc	r31, r1
    29a8:	ee 24       	eor	r14, r14
    29aa:	e3 94       	inc	r14
    29ac:	ea 17       	cp	r30, r26
    29ae:	fb 07       	cpc	r31, r27
    29b0:	0c f0       	brlt	.+2      	; 0x29b4 <GLCD_DrawLine+0x9e>
    29b2:	e1 2c       	mov	r14, r1
			if (slope)
    29b4:	ee 20       	and	r14, r14
    29b6:	31 f0       	breq	.+12     	; 0x29c4 <GLCD_DrawLine+0xae>
    29b8:	81 2f       	mov	r24, r17
			{
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
    29ba:	12 2f       	mov	r17, r18
    29bc:	28 2f       	mov	r18, r24
		else
		{
			uint8_t deltax, deltay, x, y, slope;
			int8_t error, ystep;
			slope = ((__GLCD_AbsDiff(Y1, Y2) > __GLCD_AbsDiff(X1,X2)) ? 1 : 0);
			if (slope)
    29be:	8c 2f       	mov	r24, r28
			{
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
    29c0:	cf 2d       	mov	r28, r15
    29c2:	f8 2e       	mov	r15, r24
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
			}
			if (X1 > X2)
    29c4:	1c 17       	cp	r17, r28
    29c6:	30 f4       	brcc	.+12     	; 0x29d4 <GLCD_DrawLine+0xbe>
    29c8:	8f 2d       	mov	r24, r15
			{
				//Swap x1, x2
				__GLCD_Swap(X1, X2);
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
    29ca:	f2 2e       	mov	r15, r18
    29cc:	28 2f       	mov	r18, r24
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
			}
			if (X1 > X2)
    29ce:	8c 2f       	mov	r24, r28
			{
				//Swap x1, x2
				__GLCD_Swap(X1, X2);
    29d0:	c1 2f       	mov	r28, r17
    29d2:	18 2f       	mov	r17, r24
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
			}
			
			deltax = X2 - X1;
    29d4:	c1 2e       	mov	r12, r17
    29d6:	cc 1a       	sub	r12, r28
			deltay = __GLCD_AbsDiff(Y2, Y1);
    29d8:	f2 16       	cp	r15, r18
    29da:	38 f4       	brcc	.+14     	; 0x29ea <GLCD_DrawLine+0xd4>
    29dc:	d2 2e       	mov	r13, r18
    29de:	df 18       	sub	r13, r15
			error = deltax / 2;
    29e0:	dc 2d       	mov	r29, r12
    29e2:	d6 95       	lsr	r29
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
    29e4:	bb 24       	eor	r11, r11
    29e6:	b3 94       	inc	r11
    29e8:	06 c0       	rjmp	.+12     	; 0x29f6 <GLCD_DrawLine+0xe0>
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
			}
			
			deltax = X2 - X1;
			deltay = __GLCD_AbsDiff(Y2, Y1);
    29ea:	df 2c       	mov	r13, r15
    29ec:	d2 1a       	sub	r13, r18
			error = deltax / 2;
    29ee:	dc 2d       	mov	r29, r12
    29f0:	d6 95       	lsr	r29
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
    29f2:	bb 24       	eor	r11, r11
    29f4:	ba 94       	dec	r11
			
			for (x = X1 ; x <= X2 ; x++)
    29f6:	1c 17       	cp	r17, r28
    29f8:	c8 f0       	brcs	.+50     	; 0x2a2c <GLCD_DrawLine+0x116>
			{
				if (slope)
    29fa:	ee 20       	and	r14, r14
    29fc:	31 f0       	breq	.+12     	; 0x2a0a <GLCD_DrawLine+0xf4>
					GLCD_SetPixel(y, x, Color);
    29fe:	40 2f       	mov	r20, r16
    2a00:	6c 2f       	mov	r22, r28
    2a02:	8f 2d       	mov	r24, r15
    2a04:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <GLCD_SetPixel>
    2a08:	05 c0       	rjmp	.+10     	; 0x2a14 <GLCD_DrawLine+0xfe>
				else
					GLCD_SetPixel(x, y, Color);
    2a0a:	40 2f       	mov	r20, r16
    2a0c:	6f 2d       	mov	r22, r15
    2a0e:	8c 2f       	mov	r24, r28
    2a10:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <GLCD_SetPixel>
				
				error -= deltay;
    2a14:	dd 19       	sub	r29, r13
				if (error < 0)
    2a16:	12 f4       	brpl	.+4      	; 0x2a1c <GLCD_DrawLine+0x106>
				{
					y = y + ystep;
    2a18:	fb 0c       	add	r15, r11
					error = error + deltax;
    2a1a:	dc 0d       	add	r29, r12
			deltay = __GLCD_AbsDiff(Y2, Y1);
			error = deltax / 2;
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
			
			for (x = X1 ; x <= X2 ; x++)
    2a1c:	cf 5f       	subi	r28, 0xFF	; 255
    2a1e:	1c 17       	cp	r17, r28
    2a20:	60 f7       	brcc	.-40     	; 0x29fa <GLCD_DrawLine+0xe4>
    2a22:	04 c0       	rjmp	.+8      	; 0x2a2c <GLCD_DrawLine+0x116>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2a24:	8c 2f       	mov	r24, r28
		__GLCD_Swap(X1, X2);
    2a26:	c4 2f       	mov	r28, r20
    2a28:	18 2f       	mov	r17, r24
    2a2a:	9f cf       	rjmp	.-194    	; 0x296a <GLCD_DrawLine+0x54>
					error = error + deltax;
				}
			}
		}
	}
}
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	df 90       	pop	r13
    2a3a:	cf 90       	pop	r12
    2a3c:	bf 90       	pop	r11
    2a3e:	08 95       	ret

00002a40 <GLCD_DrawRectangle>:

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	e8 2e       	mov	r14, r24
    2a50:	16 2f       	mov	r17, r22
    2a52:	d4 2e       	mov	r13, r20
    2a54:	f2 2e       	mov	r15, r18
    2a56:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2a58:	88 23       	and	r24, r24
    2a5a:	0c f4       	brge	.+2      	; 0x2a5e <GLCD_DrawRectangle+0x1e>
    2a5c:	49 c0       	rjmp	.+146    	; 0x2af0 <GLCD_DrawRectangle+0xb0>
    2a5e:	44 23       	and	r20, r20
    2a60:	0c f4       	brge	.+2      	; 0x2a64 <GLCD_DrawRectangle+0x24>
    2a62:	46 c0       	rjmp	.+140    	; 0x2af0 <GLCD_DrawRectangle+0xb0>
    2a64:	60 34       	cpi	r22, 0x40	; 64
    2a66:	08 f0       	brcs	.+2      	; 0x2a6a <GLCD_DrawRectangle+0x2a>
    2a68:	43 c0       	rjmp	.+134    	; 0x2af0 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    2a6a:	8f e3       	ldi	r24, 0x3F	; 63
    2a6c:	82 17       	cp	r24, r18
    2a6e:	08 f4       	brcc	.+2      	; 0x2a72 <GLCD_DrawRectangle+0x32>
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2a72:	4e 15       	cp	r20, r14
    2a74:	00 f1       	brcs	.+64     	; 0x2ab6 <GLCD_DrawRectangle+0x76>
    2a76:	1c c0       	rjmp	.+56     	; 0x2ab0 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2a78:	4d 2f       	mov	r20, r29
    2a7a:	61 2f       	mov	r22, r17
    2a7c:	8c 2f       	mov	r24, r28
    2a7e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <GLCD_SetPixel>
		X1++;
    2a82:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2a84:	0c 17       	cp	r16, r28
    2a86:	c0 f7       	brcc	.-16     	; 0x2a78 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2a88:	de 14       	cp	r13, r14
    2a8a:	d8 f0       	brcs	.+54     	; 0x2ac2 <GLCD_DrawRectangle+0x82>
    2a8c:	17 c0       	rjmp	.+46     	; 0x2abc <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2a8e:	4d 2f       	mov	r20, r29
    2a90:	6f 2d       	mov	r22, r15
    2a92:	8c 2f       	mov	r24, r28
    2a94:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <GLCD_SetPixel>
		X1++;
    2a98:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2a9a:	0c 17       	cp	r16, r28
    2a9c:	c0 f7       	brcc	.-16     	; 0x2a8e <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    2a9e:	f1 16       	cp	r15, r17
    2aa0:	98 f0       	brcs	.+38     	; 0x2ac8 <GLCD_DrawRectangle+0x88>
    2aa2:	1c c0       	rjmp	.+56     	; 0x2adc <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2aa4:	0d 2f       	mov	r16, r29
    2aa6:	4d 2d       	mov	r20, r13
    2aa8:	8d 2d       	mov	r24, r13
    2aaa:	0e 94 3a 12 	call	0x2474	; 0x2474 <GLCD_SetPixels>
    2aae:	20 c0       	rjmp	.+64     	; 0x2af0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2ab0:	04 2f       	mov	r16, r20
    2ab2:	ce 2d       	mov	r28, r14
    2ab4:	e1 cf       	rjmp	.-62     	; 0x2a78 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    2ab6:	0e 2d       	mov	r16, r14
    2ab8:	c4 2f       	mov	r28, r20
    2aba:	de cf       	rjmp	.-68     	; 0x2a78 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2abc:	0d 2d       	mov	r16, r13
    2abe:	ce 2d       	mov	r28, r14
    2ac0:	e6 cf       	rjmp	.-52     	; 0x2a8e <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    2ac2:	0e 2d       	mov	r16, r14
    2ac4:	cd 2d       	mov	r28, r13
    2ac6:	e3 cf       	rjmp	.-58     	; 0x2a8e <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2ac8:	0d 2f       	mov	r16, r29
    2aca:	21 2f       	mov	r18, r17
    2acc:	4e 2d       	mov	r20, r14
    2ace:	6f 2d       	mov	r22, r15
    2ad0:	8e 2d       	mov	r24, r14
    2ad2:	0e 94 3a 12 	call	0x2474	; 0x2474 <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    2ad6:	21 2f       	mov	r18, r17
    2ad8:	6f 2d       	mov	r22, r15
    2ada:	e4 cf       	rjmp	.-56     	; 0x2aa4 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2adc:	0d 2f       	mov	r16, r29
    2ade:	2f 2d       	mov	r18, r15
    2ae0:	4e 2d       	mov	r20, r14
    2ae2:	61 2f       	mov	r22, r17
    2ae4:	8e 2d       	mov	r24, r14
    2ae6:	0e 94 3a 12 	call	0x2474	; 0x2474 <GLCD_SetPixels>
    2aea:	2f 2d       	mov	r18, r15
    2aec:	61 2f       	mov	r22, r17
    2aee:	da cf       	rjmp	.-76     	; 0x2aa4 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	08 95       	ret

00002b00 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    2b0a:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2b0c:	00 e0       	ldi	r16, 0x00	; 0
    2b0e:	0b c0       	rjmp	.+22     	; 0x2b26 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    2b10:	41 2f       	mov	r20, r17
    2b12:	6d 2f       	mov	r22, r29
    2b14:	8c 2f       	mov	r24, r28
    2b16:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    2b1a:	cf 5f       	subi	r28, 0xFF	; 255
    2b1c:	c0 38       	cpi	r28, 0x80	; 128
    2b1e:	c1 f7       	brne	.-16     	; 0x2b10 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    2b20:	d8 5f       	subi	r29, 0xF8	; 248
    2b22:	d0 34       	cpi	r29, 0x40	; 64
    2b24:	11 f0       	breq	.+4      	; 0x2b2a <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2b26:	c0 2f       	mov	r28, r16
    2b28:	f3 cf       	rjmp	.-26     	; 0x2b10 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	08 95       	ret

00002b34 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	0e 94 80 15 	call	0x2b00	; 0x2b00 <GLCD_FillScreen>
    2b3a:	08 95       	ret

00002b3c <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2b3c:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    2b3e:	0e 94 3a 12 	call	0x2474	; 0x2474 <GLCD_SetPixels>
}
    2b42:	0f 91       	pop	r16
    2b44:	08 95       	ret

00002b46 <GLCD_SetFont>:
	}
}

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    2b46:	66 23       	and	r22, r22
    2b48:	f4 f0       	brlt	.+60     	; 0x2b86 <GLCD_SetFont+0x40>
    2b4a:	40 34       	cpi	r20, 0x40	; 64
    2b4c:	e0 f4       	brcc	.+56     	; 0x2b86 <GLCD_SetFont+0x40>
    2b4e:	22 30       	cpi	r18, 0x02	; 2
    2b50:	d0 f4       	brcc	.+52     	; 0x2b86 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    2b52:	90 93 2e 01 	sts	0x012E, r25
    2b56:	80 93 2d 01 	sts	0x012D, r24
		
		//Update font's size
		__GLCD.Font.Width = Width;
    2b5a:	60 93 2f 01 	sts	0x012F, r22
		__GLCD.Font.Height = Height;
    2b5e:	40 93 30 01 	sts	0x0130, r20
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	41 50       	subi	r20, 0x01	; 1
    2b66:	51 09       	sbc	r21, r1
    2b68:	ca 01       	movw	r24, r20
    2b6a:	99 23       	and	r25, r25
    2b6c:	0c f4       	brge	.+2      	; 0x2b70 <GLCD_SetFont+0x2a>
    2b6e:	07 96       	adiw	r24, 0x07	; 7
    2b70:	95 95       	asr	r25
    2b72:	87 95       	ror	r24
    2b74:	95 95       	asr	r25
    2b76:	87 95       	ror	r24
    2b78:	95 95       	asr	r25
    2b7a:	87 95       	ror	r24
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	80 93 31 01 	sts	0x0131, r24
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    2b82:	20 93 32 01 	sts	0x0132, r18
    2b86:	08 95       	ret

00002b88 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    2b88:	2f 92       	push	r2
    2b8a:	3f 92       	push	r3
    2b8c:	4f 92       	push	r4
    2b8e:	5f 92       	push	r5
    2b90:	6f 92       	push	r6
    2b92:	7f 92       	push	r7
    2b94:	8f 92       	push	r8
    2b96:	9f 92       	push	r9
    2b98:	af 92       	push	r10
    2b9a:	bf 92       	push	r11
    2b9c:	cf 92       	push	r12
    2b9e:	df 92       	push	r13
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	2b 97       	sbiw	r28, 0x0b	; 11
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    2bbc:	20 91 2a 01 	lds	r18, 0x012A
    2bc0:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    2bc2:	30 91 2b 01 	lds	r19, 0x012B
    2bc6:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    2bc8:	90 91 31 01 	lds	r25, 0x0131
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    2bcc:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    2bce:	20 91 2f 01 	lds	r18, 0x012F
    2bd2:	29 9f       	mul	r18, r25
    2bd4:	90 01       	movw	r18, r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	2f 5f       	subi	r18, 0xFF	; 255
    2bda:	3f 4f       	sbci	r19, 0xFF	; 255
    2bdc:	82 9f       	mul	r24, r18
    2bde:	a0 01       	movw	r20, r0
    2be0:	83 9f       	mul	r24, r19
    2be2:	50 0d       	add	r21, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	59 87       	std	Y+9, r21	; 0x09
    2be8:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    2bea:	4f 5f       	subi	r20, 0xFF	; 255
    2bec:	5f 4f       	sbci	r21, 0xFF	; 255
    2bee:	5e 83       	std	Y+6, r21	; 0x06
    2bf0:	4d 83       	std	Y+5, r20	; 0x05
    2bf2:	e0 91 2d 01 	lds	r30, 0x012D
    2bf6:	f0 91 2e 01 	lds	r31, 0x012E
    2bfa:	a8 85       	ldd	r26, Y+8	; 0x08
    2bfc:	b9 85       	ldd	r27, Y+9	; 0x09
    2bfe:	ea 0f       	add	r30, r26
    2c00:	fb 1f       	adc	r31, r27
    2c02:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    2c04:	7f 80       	ldd	r7, Y+7	; 0x07
    2c06:	b7 e0       	ldi	r27, 0x07	; 7
    2c08:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2c0a:	99 23       	and	r25, r25
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <GLCD_PrintChar+0x88>
    2c0e:	92 c0       	rjmp	.+292    	; 0x2d34 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2c10:	ef 81       	ldd	r30, Y+7	; 0x07
    2c12:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2c14:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2c16:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2c18:	88 e0       	ldi	r24, 0x08	; 8
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9c 01       	movw	r18, r24
    2c1e:	27 19       	sub	r18, r7
    2c20:	31 09       	sbc	r19, r1
    2c22:	3a 83       	std	Y+2, r19	; 0x02
    2c24:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2c26:	0f 2e       	mov	r0, r31
    2c28:	f2 e3       	ldi	r31, 0x32	; 50
    2c2a:	8f 2e       	mov	r8, r31
    2c2c:	f1 e0       	ldi	r31, 0x01	; 1
    2c2e:	9f 2e       	mov	r9, r31
    2c30:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2c32:	0f 2e       	mov	r0, r31
    2c34:	fb e2       	ldi	r31, 0x2B	; 43
    2c36:	af 2e       	mov	r10, r31
    2c38:	f1 e0       	ldi	r31, 0x01	; 1
    2c3a:	bf 2e       	mov	r11, r31
    2c3c:	f0 2d       	mov	r31, r0
    2c3e:	0a e2       	ldi	r16, 0x2A	; 42
    2c40:	11 e0       	ldi	r17, 0x01	; 1
    2c42:	67 2c       	mov	r6, r7
    2c44:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2c46:	6b 81       	ldd	r22, Y+3	; 0x03
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    2c4e:	4d 81       	ldd	r20, Y+5	; 0x05
    2c50:	5e 81       	ldd	r21, Y+6	; 0x06
    2c52:	43 0d       	add	r20, r3
    2c54:	51 1d       	adc	r21, r1
    2c56:	5b 87       	std	Y+11, r21	; 0x0b
    2c58:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    2c5a:	7a 01       	movw	r14, r20
    2c5c:	51 e0       	ldi	r21, 0x01	; 1
    2c5e:	e5 1a       	sub	r14, r21
    2c60:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2c62:	77 20       	and	r7, r7
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <GLCD_PrintChar+0xe0>
    2c66:	4f c0       	rjmp	.+158    	; 0x2d06 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    2c68:	0f 2e       	mov	r0, r31
    2c6a:	f1 e3       	ldi	r31, 0x31	; 49
    2c6c:	cf 2e       	mov	r12, r31
    2c6e:	f1 e0       	ldi	r31, 0x01	; 1
    2c70:	df 2e       	mov	r13, r31
    2c72:	f0 2d       	mov	r31, r0
    2c74:	83 2d       	mov	r24, r3
    2c76:	36 2c       	mov	r3, r6
    2c78:	67 2c       	mov	r6, r7
    2c7a:	72 2c       	mov	r7, r2
    2c7c:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    2c7e:	ad e2       	ldi	r26, 0x2D	; 45
    2c80:	b1 e0       	ldi	r27, 0x01	; 1
    2c82:	2d 91       	ld	r18, X+
    2c84:	3c 91       	ld	r19, X
    2c86:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c88:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
    2c8e:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    2c90:	4e 2e       	mov	r4, r30
    2c92:	03 2c       	mov	r0, r3
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <GLCD_PrintChar+0x110>
    2c96:	44 0c       	add	r4, r4
    2c98:	0a 94       	dec	r0
    2c9a:	ea f7       	brpl	.-6      	; 0x2c96 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    2c9c:	55 20       	and	r5, r5
    2c9e:	81 f0       	breq	.+32     	; 0x2cc0 <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2ca0:	f9 01       	movw	r30, r18
    2ca2:	ee 0d       	add	r30, r14
    2ca4:	ff 1d       	adc	r31, r15
    2ca6:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	09 80       	ldd	r0, Y+1	; 0x01
    2cac:	02 c0       	rjmp	.+4      	; 0x2cb2 <GLCD_PrintChar+0x12a>
    2cae:	35 95       	asr	r19
    2cb0:	27 95       	ror	r18
    2cb2:	0a 94       	dec	r0
    2cb4:	e2 f7       	brpl	.-8      	; 0x2cae <GLCD_PrintChar+0x126>
				data |= dataPrev;
    2cb6:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    2cb8:	f6 01       	movw	r30, r12
    2cba:	80 81       	ld	r24, Z
    2cbc:	e8 0e       	add	r14, r24
    2cbe:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2cc0:	d4 01       	movw	r26, r8
    2cc2:	8c 91       	ld	r24, X
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	39 f4       	brne	.+14     	; 0x2cd6 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2cc8:	f5 01       	movw	r30, r10
    2cca:	60 81       	ld	r22, Z
    2ccc:	d8 01       	movw	r26, r16
    2cce:	8c 91       	ld	r24, X
    2cd0:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
    2cd4:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2cd6:	f5 01       	movw	r30, r10
    2cd8:	60 81       	ld	r22, Z
    2cda:	d8 01       	movw	r26, r16
    2cdc:	8c 91       	ld	r24, X
    2cde:	98 2f       	mov	r25, r24
    2ce0:	9f 5f       	subi	r25, 0xFF	; 255
    2ce2:	9c 93       	st	X, r25
    2ce4:	44 2d       	mov	r20, r4
    2ce6:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    2cea:	f6 01       	movw	r30, r12
    2cec:	80 81       	ld	r24, Z
    2cee:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cf0:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cf2:	28 0f       	add	r18, r24
    2cf4:	31 1d       	adc	r19, r1
    2cf6:	3b 87       	std	Y+11, r19	; 0x0b
    2cf8:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2cfa:	73 94       	inc	r7
    2cfc:	76 10       	cpse	r7, r6
    2cfe:	bf cf       	rjmp	.-130    	; 0x2c7e <GLCD_PrintChar+0xf6>
    2d00:	76 2c       	mov	r7, r6
    2d02:	63 2c       	mov	r6, r3
    2d04:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2d06:	d4 01       	movw	r26, r8
    2d08:	8c 91       	ld	r24, X
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	07 c0       	rjmp	.+14     	; 0x2d1c <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    2d0e:	42 2d       	mov	r20, r2
    2d10:	f5 01       	movw	r30, r10
    2d12:	60 81       	ld	r22, Z
    2d14:	d8 01       	movw	r26, r16
    2d16:	8c 91       	ld	r24, X
    2d18:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    2d1c:	bb 81       	ldd	r27, Y+3	; 0x03
    2d1e:	b8 5f       	subi	r27, 0xF8	; 248
    2d20:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2d22:	33 94       	inc	r3
    2d24:	80 91 31 01 	lds	r24, 0x0131
    2d28:	38 16       	cp	r3, r24
    2d2a:	08 f4       	brcc	.+2      	; 0x2d2e <GLCD_PrintChar+0x1a6>
    2d2c:	8c cf       	rjmp	.-232    	; 0x2c46 <GLCD_PrintChar+0xbe>
    2d2e:	57 2c       	mov	r5, r7
    2d30:	76 2c       	mov	r7, r6
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2d34:	ef 81       	ldd	r30, Y+7	; 0x07
    2d36:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2d38:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    2d3a:	2f 81       	ldd	r18, Y+7	; 0x07
    2d3c:	22 95       	swap	r18
    2d3e:	26 95       	lsr	r18
    2d40:	26 95       	lsr	r18
    2d42:	23 70       	andi	r18, 0x03	; 3
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	80 91 30 01 	lds	r24, 0x0130
    2d4a:	82 95       	swap	r24
    2d4c:	86 95       	lsr	r24
    2d4e:	86 95       	lsr	r24
    2d50:	83 70       	andi	r24, 0x03	; 3
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	ff 81       	ldd	r31, Y+7	; 0x07
    2d56:	8f 0f       	add	r24, r31
    2d58:	91 1d       	adc	r25, r1
    2d5a:	28 17       	cp	r18, r24
    2d5c:	39 07       	cpc	r19, r25
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <GLCD_PrintChar+0x1da>
    2d60:	69 c0       	rjmp	.+210    	; 0x2e34 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2d62:	6b 81       	ldd	r22, Y+3	; 0x03
    2d64:	8c 81       	ldd	r24, Y+4	; 0x04
    2d66:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    2d6a:	28 85       	ldd	r18, Y+8	; 0x08
    2d6c:	39 85       	ldd	r19, Y+9	; 0x09
    2d6e:	23 0d       	add	r18, r3
    2d70:	31 1d       	adc	r19, r1
    2d72:	3a 83       	std	Y+2, r19	; 0x02
    2d74:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2d76:	55 20       	and	r5, r5
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <GLCD_PrintChar+0x1f4>
    2d7a:	51 c0       	rjmp	.+162    	; 0x2e1e <GLCD_PrintChar+0x296>
    2d7c:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2d7e:	0f 2e       	mov	r0, r31
    2d80:	fb e2       	ldi	r31, 0x2B	; 43
    2d82:	af 2e       	mov	r10, r31
    2d84:	f1 e0       	ldi	r31, 0x01	; 1
    2d86:	bf 2e       	mov	r11, r31
    2d88:	f0 2d       	mov	r31, r0
    2d8a:	0a e2       	ldi	r16, 0x2A	; 42
    2d8c:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2d8e:	0f 2e       	mov	r0, r31
    2d90:	fd e2       	ldi	r31, 0x2D	; 45
    2d92:	cf 2e       	mov	r12, r31
    2d94:	f1 e0       	ldi	r31, 0x01	; 1
    2d96:	df 2e       	mov	r13, r31
    2d98:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2d9a:	88 e0       	ldi	r24, 0x08	; 8
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	ac 01       	movw	r20, r24
    2da0:	47 19       	sub	r20, r7
    2da2:	51 09       	sbc	r21, r1
    2da4:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2da6:	0f 2e       	mov	r0, r31
    2da8:	f2 e3       	ldi	r31, 0x32	; 50
    2daa:	ef 2e       	mov	r14, r31
    2dac:	f1 e0       	ldi	r31, 0x01	; 1
    2dae:	ff 2e       	mov	r15, r31
    2db0:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    2db2:	0f 2e       	mov	r0, r31
    2db4:	f1 e3       	ldi	r31, 0x31	; 49
    2db6:	8f 2e       	mov	r8, r31
    2db8:	f1 e0       	ldi	r31, 0x01	; 1
    2dba:	9f 2e       	mov	r9, r31
    2dbc:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2dbe:	d5 01       	movw	r26, r10
    2dc0:	2c 90       	ld	r2, X
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	40 80       	ld	r4, Z
    2dc6:	62 2d       	mov	r22, r2
    2dc8:	84 2d       	mov	r24, r4
    2dca:	0e 94 c5 10 	call	0x218a	; 0x218a <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2dce:	d6 01       	movw	r26, r12
    2dd0:	ed 91       	ld	r30, X+
    2dd2:	fc 91       	ld	r31, X
    2dd4:	29 81       	ldd	r18, Y+1	; 0x01
    2dd6:	3a 81       	ldd	r19, Y+2	; 0x02
    2dd8:	e2 0f       	add	r30, r18
    2dda:	f3 1f       	adc	r31, r19
    2ddc:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	06 2c       	mov	r0, r6
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <GLCD_PrintChar+0x260>
    2de4:	55 95       	asr	r21
    2de6:	47 95       	ror	r20
    2de8:	0a 94       	dec	r0
    2dea:	e2 f7       	brpl	.-8      	; 0x2de4 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    2dec:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2dee:	d7 01       	movw	r26, r14
    2df0:	9c 91       	ld	r25, X
    2df2:	91 30       	cpi	r25, 0x01	; 1
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2df6:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2df8:	84 2d       	mov	r24, r4
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	80 83       	st	Z, r24
    2e00:	62 2d       	mov	r22, r2
    2e02:	84 2d       	mov	r24, r4
    2e04:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    2e08:	d4 01       	movw	r26, r8
    2e0a:	8c 91       	ld	r24, X
    2e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e10:	e8 0f       	add	r30, r24
    2e12:	f1 1d       	adc	r31, r1
    2e14:	fa 83       	std	Y+2, r31	; 0x02
    2e16:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2e18:	33 94       	inc	r3
    2e1a:	35 10       	cpse	r3, r5
    2e1c:	d0 cf       	rjmp	.-96     	; 0x2dbe <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2e1e:	80 91 32 01 	lds	r24, 0x0132
    2e22:	81 11       	cpse	r24, r1
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	60 91 2b 01 	lds	r22, 0x012B
    2e2c:	80 91 2a 01 	lds	r24, 0x012A
    2e30:	0e 94 b7 10 	call	0x216e	; 0x216e <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    2e34:	8c 81       	ldd	r24, Y+4	; 0x04
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3a:	85 0d       	add	r24, r5
    2e3c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <GLCD_GotoXY>
}
    2e40:	2b 96       	adiw	r28, 0x0b	; 11
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	bf 90       	pop	r11
    2e5e:	af 90       	pop	r10
    2e60:	9f 90       	pop	r9
    2e62:	8f 90       	pop	r8
    2e64:	7f 90       	pop	r7
    2e66:	6f 90       	pop	r6
    2e68:	5f 90       	pop	r5
    2e6a:	4f 90       	pop	r4
    2e6c:	3f 90       	pop	r3
    2e6e:	2f 90       	pop	r2
    2e70:	08 95       	ret

00002e72 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	ec 01       	movw	r28, r24
	while(*Text)
    2e80:	88 81       	ld	r24, Y
    2e82:	88 23       	and	r24, r24
    2e84:	19 f1       	breq	.+70     	; 0x2ecc <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    2e86:	90 91 2a 01 	lds	r25, 0x012A
    2e8a:	20 91 2f 01 	lds	r18, 0x012F
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	29 0f       	add	r18, r25
    2e92:	31 1d       	adc	r19, r1
    2e94:	20 38       	cpi	r18, 0x80	; 128
    2e96:	31 05       	cpc	r19, r1
    2e98:	cc f4       	brge	.+50     	; 0x2ecc <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    2e9a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    2e9c:	0f 2e       	mov	r0, r31
    2e9e:	fa e2       	ldi	r31, 0x2A	; 42
    2ea0:	ef 2e       	mov	r14, r31
    2ea2:	f1 e0       	ldi	r31, 0x01	; 1
    2ea4:	ff 2e       	mov	r15, r31
    2ea6:	f0 2d       	mov	r31, r0
    2ea8:	0f e2       	ldi	r16, 0x2F	; 47
    2eaa:	11 e0       	ldi	r17, 0x01	; 1
    2eac:	0a c0       	rjmp	.+20     	; 0x2ec2 <GLCD_PrintString+0x50>
    2eae:	f7 01       	movw	r30, r14
    2eb0:	90 81       	ld	r25, Z
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	20 81       	ld	r18, Z
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	29 0f       	add	r18, r25
    2eba:	31 1d       	adc	r19, r1
    2ebc:	20 38       	cpi	r18, 0x80	; 128
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    2ec2:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    2ec6:	89 91       	ld	r24, Y+
    2ec8:	81 11       	cpse	r24, r1
    2eca:	f1 cf       	rjmp	.-30     	; 0x2eae <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	08 95       	ret

00002eda <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    2eda:	0f 93       	push	r16
    2edc:	1f 93       	push	r17
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	2c 97       	sbiw	r28, 0x0c	; 12
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    2ef2:	61 15       	cp	r22, r1
    2ef4:	71 05       	cpc	r23, r1
    2ef6:	81 05       	cpc	r24, r1
    2ef8:	91 05       	cpc	r25, r1
    2efa:	21 f4       	brne	.+8      	; 0x2f04 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    2efc:	80 e3       	ldi	r24, 0x30	; 48
    2efe:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
    2f02:	45 c1       	rjmp	.+650    	; 0x318e <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    2f04:	61 15       	cp	r22, r1
    2f06:	71 05       	cpc	r23, r1
    2f08:	81 05       	cpc	r24, r1
    2f0a:	20 e8       	ldi	r18, 0x80	; 128
    2f0c:	92 07       	cpc	r25, r18
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <GLCD_PrintInteger+0x38>
    2f10:	3e c1       	rjmp	.+636    	; 0x318e <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    2f12:	fe 01       	movw	r30, r28
    2f14:	31 96       	adiw	r30, 0x01	; 1
    2f16:	2c e0       	ldi	r18, 0x0C	; 12
    2f18:	df 01       	movw	r26, r30
    2f1a:	1d 92       	st	X+, r1
    2f1c:	2a 95       	dec	r18
    2f1e:	e9 f7       	brne	.-6      	; 0x2f1a <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    2f20:	20 e3       	ldi	r18, 0x30	; 48
    2f22:	2b 87       	std	Y+11, r18	; 0x0b
    2f24:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    2f26:	29 87       	std	Y+9, r18	; 0x09
    2f28:	28 87       	std	Y+8, r18	; 0x08
    2f2a:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    2f2c:	2e 83       	std	Y+6, r18	; 0x06
    2f2e:	2d 83       	std	Y+5, r18	; 0x05
    2f30:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    2f32:	2b 83       	std	Y+3, r18	; 0x03
    2f34:	2a 83       	std	Y+2, r18	; 0x02
    2f36:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    2f38:	99 23       	and	r25, r25
    2f3a:	5c f4       	brge	.+22     	; 0x2f52 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    2f3c:	9b 01       	movw	r18, r22
    2f3e:	ac 01       	movw	r20, r24
    2f40:	88 27       	eor	r24, r24
    2f42:	99 27       	eor	r25, r25
    2f44:	dc 01       	movw	r26, r24
    2f46:	82 1b       	sub	r24, r18
    2f48:	93 0b       	sbc	r25, r19
    2f4a:	a4 0b       	sbc	r26, r20
    2f4c:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    2f4e:	41 e0       	ldi	r20, 0x01	; 1
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    2f56:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	3a ec       	ldi	r19, 0xCA	; 202
    2f5c:	93 07       	cpc	r25, r19
    2f5e:	3a e9       	ldi	r19, 0x9A	; 154
    2f60:	a3 07       	cpc	r26, r19
    2f62:	3b e3       	ldi	r19, 0x3B	; 59
    2f64:	b3 07       	cpc	r27, r19
    2f66:	94 f0       	brlt	.+36     	; 0x2f8c <GLCD_PrintInteger+0xb2>
    2f68:	2a 81       	ldd	r18, Y+2	; 0x02
    2f6a:	2f 5f       	subi	r18, 0xFF	; 255
    2f6c:	01 c0       	rjmp	.+2      	; 0x2f70 <GLCD_PrintInteger+0x96>
    2f6e:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    2f70:	9a 5c       	subi	r25, 0xCA	; 202
    2f72:	aa 49       	sbci	r26, 0x9A	; 154
    2f74:	bb 43       	sbci	r27, 0x3B	; 59
    2f76:	32 2f       	mov	r19, r18
    2f78:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	5a ec       	ldi	r21, 0xCA	; 202
    2f7e:	95 07       	cpc	r25, r21
    2f80:	5a e9       	ldi	r21, 0x9A	; 154
    2f82:	a5 07       	cpc	r26, r21
    2f84:	5b e3       	ldi	r21, 0x3B	; 59
    2f86:	b5 07       	cpc	r27, r21
    2f88:	94 f7       	brge	.-28     	; 0x2f6e <GLCD_PrintInteger+0x94>
    2f8a:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    2f8c:	81 15       	cp	r24, r1
    2f8e:	21 ee       	ldi	r18, 0xE1	; 225
    2f90:	92 07       	cpc	r25, r18
    2f92:	25 ef       	ldi	r18, 0xF5	; 245
    2f94:	a2 07       	cpc	r26, r18
    2f96:	25 e0       	ldi	r18, 0x05	; 5
    2f98:	b2 07       	cpc	r27, r18
    2f9a:	94 f0       	brlt	.+36     	; 0x2fc0 <GLCD_PrintInteger+0xe6>
    2f9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f9e:	2f 5f       	subi	r18, 0xFF	; 255
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <GLCD_PrintInteger+0xca>
    2fa2:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    2fa4:	91 5e       	subi	r25, 0xE1	; 225
    2fa6:	a5 4f       	sbci	r26, 0xF5	; 245
    2fa8:	b5 40       	sbci	r27, 0x05	; 5
    2faa:	32 2f       	mov	r19, r18
    2fac:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    2fae:	81 15       	cp	r24, r1
    2fb0:	51 ee       	ldi	r21, 0xE1	; 225
    2fb2:	95 07       	cpc	r25, r21
    2fb4:	55 ef       	ldi	r21, 0xF5	; 245
    2fb6:	a5 07       	cpc	r26, r21
    2fb8:	55 e0       	ldi	r21, 0x05	; 5
    2fba:	b5 07       	cpc	r27, r21
    2fbc:	94 f7       	brge	.-28     	; 0x2fa2 <GLCD_PrintInteger+0xc8>
    2fbe:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    2fc0:	80 38       	cpi	r24, 0x80	; 128
    2fc2:	26 e9       	ldi	r18, 0x96	; 150
    2fc4:	92 07       	cpc	r25, r18
    2fc6:	28 e9       	ldi	r18, 0x98	; 152
    2fc8:	a2 07       	cpc	r26, r18
    2fca:	b1 05       	cpc	r27, r1
    2fcc:	94 f0       	brlt	.+36     	; 0x2ff2 <GLCD_PrintInteger+0x118>
    2fce:	2c 81       	ldd	r18, Y+4	; 0x04
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <GLCD_PrintInteger+0xfc>
    2fd4:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    2fd6:	80 58       	subi	r24, 0x80	; 128
    2fd8:	96 49       	sbci	r25, 0x96	; 150
    2fda:	a8 49       	sbci	r26, 0x98	; 152
    2fdc:	b1 09       	sbc	r27, r1
    2fde:	32 2f       	mov	r19, r18
    2fe0:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    2fe2:	80 38       	cpi	r24, 0x80	; 128
    2fe4:	56 e9       	ldi	r21, 0x96	; 150
    2fe6:	95 07       	cpc	r25, r21
    2fe8:	58 e9       	ldi	r21, 0x98	; 152
    2fea:	a5 07       	cpc	r26, r21
    2fec:	b1 05       	cpc	r27, r1
    2fee:	94 f7       	brge	.-28     	; 0x2fd4 <GLCD_PrintInteger+0xfa>
    2ff0:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    2ff2:	80 34       	cpi	r24, 0x40	; 64
    2ff4:	22 e4       	ldi	r18, 0x42	; 66
    2ff6:	92 07       	cpc	r25, r18
    2ff8:	2f e0       	ldi	r18, 0x0F	; 15
    2ffa:	a2 07       	cpc	r26, r18
    2ffc:	b1 05       	cpc	r27, r1
    2ffe:	94 f0       	brlt	.+36     	; 0x3024 <GLCD_PrintInteger+0x14a>
    3000:	2d 81       	ldd	r18, Y+5	; 0x05
    3002:	2f 5f       	subi	r18, 0xFF	; 255
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <GLCD_PrintInteger+0x12e>
    3006:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    3008:	80 54       	subi	r24, 0x40	; 64
    300a:	92 44       	sbci	r25, 0x42	; 66
    300c:	af 40       	sbci	r26, 0x0F	; 15
    300e:	b1 09       	sbc	r27, r1
    3010:	32 2f       	mov	r19, r18
    3012:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    3014:	80 34       	cpi	r24, 0x40	; 64
    3016:	52 e4       	ldi	r21, 0x42	; 66
    3018:	95 07       	cpc	r25, r21
    301a:	5f e0       	ldi	r21, 0x0F	; 15
    301c:	a5 07       	cpc	r26, r21
    301e:	b1 05       	cpc	r27, r1
    3020:	94 f7       	brge	.-28     	; 0x3006 <GLCD_PrintInteger+0x12c>
    3022:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    3024:	80 3a       	cpi	r24, 0xA0	; 160
    3026:	26 e8       	ldi	r18, 0x86	; 134
    3028:	92 07       	cpc	r25, r18
    302a:	21 e0       	ldi	r18, 0x01	; 1
    302c:	a2 07       	cpc	r26, r18
    302e:	b1 05       	cpc	r27, r1
    3030:	94 f0       	brlt	.+36     	; 0x3056 <GLCD_PrintInteger+0x17c>
    3032:	2e 81       	ldd	r18, Y+6	; 0x06
    3034:	2f 5f       	subi	r18, 0xFF	; 255
    3036:	01 c0       	rjmp	.+2      	; 0x303a <GLCD_PrintInteger+0x160>
    3038:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    303a:	80 5a       	subi	r24, 0xA0	; 160
    303c:	96 48       	sbci	r25, 0x86	; 134
    303e:	a1 40       	sbci	r26, 0x01	; 1
    3040:	b1 09       	sbc	r27, r1
    3042:	32 2f       	mov	r19, r18
    3044:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    3046:	80 3a       	cpi	r24, 0xA0	; 160
    3048:	56 e8       	ldi	r21, 0x86	; 134
    304a:	95 07       	cpc	r25, r21
    304c:	51 e0       	ldi	r21, 0x01	; 1
    304e:	a5 07       	cpc	r26, r21
    3050:	b1 05       	cpc	r27, r1
    3052:	94 f7       	brge	.-28     	; 0x3038 <GLCD_PrintInteger+0x15e>
    3054:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    3056:	80 31       	cpi	r24, 0x10	; 16
    3058:	27 e2       	ldi	r18, 0x27	; 39
    305a:	92 07       	cpc	r25, r18
    305c:	a1 05       	cpc	r26, r1
    305e:	b1 05       	cpc	r27, r1
    3060:	8c f0       	brlt	.+34     	; 0x3084 <GLCD_PrintInteger+0x1aa>
    3062:	2f 81       	ldd	r18, Y+7	; 0x07
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	01 c0       	rjmp	.+2      	; 0x306a <GLCD_PrintInteger+0x190>
    3068:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    306a:	80 51       	subi	r24, 0x10	; 16
    306c:	97 42       	sbci	r25, 0x27	; 39
    306e:	a1 09       	sbc	r26, r1
    3070:	b1 09       	sbc	r27, r1
    3072:	32 2f       	mov	r19, r18
    3074:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    3076:	80 31       	cpi	r24, 0x10	; 16
    3078:	57 e2       	ldi	r21, 0x27	; 39
    307a:	95 07       	cpc	r25, r21
    307c:	a1 05       	cpc	r26, r1
    307e:	b1 05       	cpc	r27, r1
    3080:	9c f7       	brge	.-26     	; 0x3068 <GLCD_PrintInteger+0x18e>
    3082:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3084:	88 3e       	cpi	r24, 0xE8	; 232
    3086:	23 e0       	ldi	r18, 0x03	; 3
    3088:	92 07       	cpc	r25, r18
    308a:	a1 05       	cpc	r26, r1
    308c:	b1 05       	cpc	r27, r1
    308e:	8c f0       	brlt	.+34     	; 0x30b2 <GLCD_PrintInteger+0x1d8>
    3090:	28 85       	ldd	r18, Y+8	; 0x08
    3092:	2f 5f       	subi	r18, 0xFF	; 255
    3094:	01 c0       	rjmp	.+2      	; 0x3098 <GLCD_PrintInteger+0x1be>
    3096:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    3098:	88 5e       	subi	r24, 0xE8	; 232
    309a:	93 40       	sbci	r25, 0x03	; 3
    309c:	a1 09       	sbc	r26, r1
    309e:	b1 09       	sbc	r27, r1
    30a0:	32 2f       	mov	r19, r18
    30a2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    30a4:	88 3e       	cpi	r24, 0xE8	; 232
    30a6:	53 e0       	ldi	r21, 0x03	; 3
    30a8:	95 07       	cpc	r25, r21
    30aa:	a1 05       	cpc	r26, r1
    30ac:	b1 05       	cpc	r27, r1
    30ae:	9c f7       	brge	.-26     	; 0x3096 <GLCD_PrintInteger+0x1bc>
    30b0:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    30b2:	84 36       	cpi	r24, 0x64	; 100
    30b4:	91 05       	cpc	r25, r1
    30b6:	a1 05       	cpc	r26, r1
    30b8:	b1 05       	cpc	r27, r1
    30ba:	84 f0       	brlt	.+32     	; 0x30dc <GLCD_PrintInteger+0x202>
    30bc:	29 85       	ldd	r18, Y+9	; 0x09
    30be:	2f 5f       	subi	r18, 0xFF	; 255
    30c0:	01 c0       	rjmp	.+2      	; 0x30c4 <GLCD_PrintInteger+0x1ea>
    30c2:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    30c4:	84 56       	subi	r24, 0x64	; 100
    30c6:	91 09       	sbc	r25, r1
    30c8:	a1 09       	sbc	r26, r1
    30ca:	b1 09       	sbc	r27, r1
    30cc:	32 2f       	mov	r19, r18
    30ce:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    30d0:	84 36       	cpi	r24, 0x64	; 100
    30d2:	91 05       	cpc	r25, r1
    30d4:	a1 05       	cpc	r26, r1
    30d6:	b1 05       	cpc	r27, r1
    30d8:	a4 f7       	brge	.-24     	; 0x30c2 <GLCD_PrintInteger+0x1e8>
    30da:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    30dc:	8a 30       	cpi	r24, 0x0A	; 10
    30de:	91 05       	cpc	r25, r1
    30e0:	a1 05       	cpc	r26, r1
    30e2:	b1 05       	cpc	r27, r1
    30e4:	7c f0       	brlt	.+30     	; 0x3104 <GLCD_PrintInteger+0x22a>
    30e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    30e8:	2f 5f       	subi	r18, 0xFF	; 255
    30ea:	01 c0       	rjmp	.+2      	; 0x30ee <GLCD_PrintInteger+0x214>
    30ec:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    30ee:	0a 97       	sbiw	r24, 0x0a	; 10
    30f0:	a1 09       	sbc	r26, r1
    30f2:	b1 09       	sbc	r27, r1
    30f4:	32 2f       	mov	r19, r18
    30f6:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    30f8:	8a 30       	cpi	r24, 0x0A	; 10
    30fa:	91 05       	cpc	r25, r1
    30fc:	a1 05       	cpc	r26, r1
    30fe:	b1 05       	cpc	r27, r1
    3100:	ac f7       	brge	.-22     	; 0x30ec <GLCD_PrintInteger+0x212>
    3102:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    3104:	18 16       	cp	r1, r24
    3106:	19 06       	cpc	r1, r25
    3108:	1a 06       	cpc	r1, r26
    310a:	1b 06       	cpc	r1, r27
    310c:	5c f4       	brge	.+22     	; 0x3124 <GLCD_PrintInteger+0x24a>
    310e:	5b 85       	ldd	r21, Y+11	; 0x0b
    3110:	8c 01       	movw	r16, r24
    3112:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    3114:	01 50       	subi	r16, 0x01	; 1
    3116:	11 09       	sbc	r17, r1
    3118:	21 09       	sbc	r18, r1
    311a:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    311c:	d9 f7       	brne	.-10     	; 0x3114 <GLCD_PrintInteger+0x23a>
    311e:	65 2f       	mov	r22, r21
    3120:	68 0f       	add	r22, r24
    3122:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	80 33       	cpi	r24, 0x30	; 48
    3128:	61 f4       	brne	.+24     	; 0x3142 <GLCD_PrintInteger+0x268>
    312a:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    312c:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    312e:	e1 e0       	ldi	r30, 0x01	; 1
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	ec 0f       	add	r30, r28
    3134:	fd 1f       	adc	r31, r29
    3136:	e8 0f       	add	r30, r24
    3138:	f1 1d       	adc	r31, r1
    313a:	90 81       	ld	r25, Z
    313c:	90 33       	cpi	r25, 0x30	; 48
    313e:	b1 f3       	breq	.-20     	; 0x312c <GLCD_PrintInteger+0x252>
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <GLCD_PrintInteger+0x26a>
    3142:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    3144:	44 23       	and	r20, r20
    3146:	31 f0       	breq	.+12     	; 0x3154 <GLCD_PrintInteger+0x27a>
	{
		i--;
    3148:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    314a:	fe 01       	movw	r30, r28
    314c:	e8 0f       	add	r30, r24
    314e:	f1 1d       	adc	r31, r1
    3150:	9d e2       	ldi	r25, 0x2D	; 45
    3152:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    3154:	4a e0       	ldi	r20, 0x0A	; 10
    3156:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    3158:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	e1 e0       	ldi	r30, 0x01	; 1
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	ec 0f       	add	r30, r28
    3162:	fd 1f       	adc	r31, r29
    3164:	e2 0f       	add	r30, r18
    3166:	f1 1d       	adc	r31, r1
    3168:	df 01       	movw	r26, r30
    316a:	a8 0f       	add	r26, r24
    316c:	b9 1f       	adc	r27, r25
    316e:	3c 91       	ld	r19, X
    3170:	30 83       	st	Z, r19
		i++;
    3172:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    3174:	42 17       	cp	r20, r18
    3176:	90 f7       	brcc	.-28     	; 0x315c <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    3178:	e1 e0       	ldi	r30, 0x01	; 1
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	ec 0f       	add	r30, r28
    317e:	fd 1f       	adc	r31, r29
    3180:	e2 0f       	add	r30, r18
    3182:	f1 1d       	adc	r31, r1
    3184:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    3186:	ce 01       	movw	r24, r28
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <GLCD_PrintString>
	}
}
    318e:	2c 96       	adiw	r28, 0x0c	; 12
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	08 95       	ret

000031a4 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    31a4:	8f 92       	push	r8
    31a6:	9f 92       	push	r9
    31a8:	af 92       	push	r10
    31aa:	bf 92       	push	r11
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	6b 01       	movw	r12, r22
    31b6:	7c 01       	movw	r14, r24
    31b8:	49 01       	movw	r8, r18
    31ba:	5a 01       	movw	r10, r20
	if (Value == 0)
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	a9 01       	movw	r20, r18
    31c2:	0e 94 cb 19 	call	0x3396	; 0x3396 <__cmpsf2>
    31c6:	81 11       	cpse	r24, r1
    31c8:	0a c0       	rjmp	.+20     	; 0x31de <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    31ca:	80 e3       	ldi	r24, 0x30	; 48
    31cc:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    31d0:	8e e2       	ldi	r24, 0x2E	; 46
    31d2:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    31d6:	80 e3       	ldi	r24, 0x30	; 48
    31d8:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
    31dc:	4a c0       	rjmp	.+148    	; 0x3272 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	5f ec       	ldi	r21, 0xCF	; 207
    31e6:	c7 01       	movw	r24, r14
    31e8:	b6 01       	movw	r22, r12
    31ea:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__gesf2>
    31ee:	88 23       	and	r24, r24
    31f0:	0c f4       	brge	.+2      	; 0x31f4 <GLCD_PrintDouble+0x50>
    31f2:	3f c0       	rjmp	.+126    	; 0x3272 <GLCD_PrintDouble+0xce>
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	5f e4       	ldi	r21, 0x4F	; 79
    31fc:	c7 01       	movw	r24, r14
    31fe:	b6 01       	movw	r22, r12
    3200:	0e 94 cb 19 	call	0x3396	; 0x3396 <__cmpsf2>
    3204:	88 23       	and	r24, r24
    3206:	ac f5       	brge	.+106    	; 0x3272 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	a9 01       	movw	r20, r18
    320e:	c7 01       	movw	r24, r14
    3210:	b6 01       	movw	r22, r12
    3212:	0e 94 cb 19 	call	0x3396	; 0x3396 <__cmpsf2>
    3216:	88 23       	and	r24, r24
    3218:	3c f4       	brge	.+14     	; 0x3228 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    321a:	f7 fa       	bst	r15, 7
    321c:	f0 94       	com	r15
    321e:	f7 f8       	bld	r15, 7
    3220:	f0 94       	com	r15
			GLCD_PrintChar('-');
    3222:	8d e2       	ldi	r24, 0x2D	; 45
    3224:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    3228:	c7 01       	movw	r24, r14
    322a:	b6 01       	movw	r22, r12
    322c:	0e 94 37 1a 	call	0x346e	; 0x346e <__fixsfsi>
    3230:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    3234:	8e e2       	ldi	r24, 0x2E	; 46
    3236:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    323a:	c7 01       	movw	r24, r14
    323c:	b6 01       	movw	r22, r12
    323e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fixunssfsi>
    3242:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__floatunsisf>
    3246:	9b 01       	movw	r18, r22
    3248:	ac 01       	movw	r20, r24
    324a:	c7 01       	movw	r24, r14
    324c:	b6 01       	movw	r22, r12
    324e:	0e 94 66 19 	call	0x32cc	; 0x32cc <__subsf3>
    3252:	6b 01       	movw	r12, r22
    3254:	7c 01       	movw	r14, r24
    3256:	c5 01       	movw	r24, r10
    3258:	b4 01       	movw	r22, r8
    325a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__floatunsisf>
    325e:	9b 01       	movw	r18, r22
    3260:	ac 01       	movw	r20, r24
    3262:	c7 01       	movw	r24, r14
    3264:	b6 01       	movw	r22, r12
    3266:	0e 94 1e 1b 	call	0x363c	; 0x363c <__mulsf3>
    326a:	0e 94 37 1a 	call	0x346e	; 0x346e <__fixsfsi>
    326e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GLCD_PrintInteger>
	}
}
    3272:	ff 90       	pop	r15
    3274:	ef 90       	pop	r14
    3276:	df 90       	pop	r13
    3278:	cf 90       	pop	r12
    327a:	bf 90       	pop	r11
    327c:	af 90       	pop	r10
    327e:	9f 90       	pop	r9
    3280:	8f 90       	pop	r8
    3282:	08 95       	ret

00003284 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    3284:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    3286:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    3288:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    328a:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    328c:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    328e:	8c e0       	ldi	r24, 0x0C	; 12
    3290:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    3292:	84 e0       	ldi	r24, 0x04	; 4
    3294:	86 bf       	out	0x36, r24	; 54
    3296:	08 95       	ret

00003298 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    3298:	81 b1       	in	r24, 0x01	; 1
}
    329a:	88 7f       	andi	r24, 0xF8	; 248
    329c:	08 95       	ret

0000329e <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    329e:	84 ea       	ldi	r24, 0xA4	; 164
    32a0:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    32a2:	06 b6       	in	r0, 0x36	; 54
    32a4:	07 fe       	sbrs	r0, 7
    32a6:	fd cf       	rjmp	.-6      	; 0x32a2 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    32a8:	0e 94 4c 19 	call	0x3298	; 0x3298 <TWI_Status>
}
    32ac:	08 95       	ret

000032ae <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    32ae:	85 ed       	ldi	r24, 0xD5	; 213
    32b0:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    32b2:	06 b6       	in	r0, 0x36	; 54
    32b4:	04 fc       	sbrc	r0, 4
    32b6:	fd cf       	rjmp	.-6      	; 0x32b2 <TWI_EndTransmission+0x4>
}
    32b8:	08 95       	ret

000032ba <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    32ba:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    32bc:	84 e8       	ldi	r24, 0x84	; 132
    32be:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    32c0:	06 b6       	in	r0, 0x36	; 54
    32c2:	07 fe       	sbrs	r0, 7
    32c4:	fd cf       	rjmp	.-6      	; 0x32c0 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    32c6:	0e 94 4c 19 	call	0x3298	; 0x3298 <TWI_Status>
}
    32ca:	08 95       	ret

000032cc <__subsf3>:
    32cc:	50 58       	subi	r21, 0x80	; 128

000032ce <__addsf3>:
    32ce:	bb 27       	eor	r27, r27
    32d0:	aa 27       	eor	r26, r26
    32d2:	0e d0       	rcall	.+28     	; 0x32f0 <__addsf3x>
    32d4:	75 c1       	rjmp	.+746    	; 0x35c0 <__fp_round>
    32d6:	66 d1       	rcall	.+716    	; 0x35a4 <__fp_pscA>
    32d8:	30 f0       	brcs	.+12     	; 0x32e6 <__addsf3+0x18>
    32da:	6b d1       	rcall	.+726    	; 0x35b2 <__fp_pscB>
    32dc:	20 f0       	brcs	.+8      	; 0x32e6 <__addsf3+0x18>
    32de:	31 f4       	brne	.+12     	; 0x32ec <__addsf3+0x1e>
    32e0:	9f 3f       	cpi	r25, 0xFF	; 255
    32e2:	11 f4       	brne	.+4      	; 0x32e8 <__addsf3+0x1a>
    32e4:	1e f4       	brtc	.+6      	; 0x32ec <__addsf3+0x1e>
    32e6:	5b c1       	rjmp	.+694    	; 0x359e <__fp_nan>
    32e8:	0e f4       	brtc	.+2      	; 0x32ec <__addsf3+0x1e>
    32ea:	e0 95       	com	r30
    32ec:	e7 fb       	bst	r30, 7
    32ee:	51 c1       	rjmp	.+674    	; 0x3592 <__fp_inf>

000032f0 <__addsf3x>:
    32f0:	e9 2f       	mov	r30, r25
    32f2:	77 d1       	rcall	.+750    	; 0x35e2 <__fp_split3>
    32f4:	80 f3       	brcs	.-32     	; 0x32d6 <__addsf3+0x8>
    32f6:	ba 17       	cp	r27, r26
    32f8:	62 07       	cpc	r22, r18
    32fa:	73 07       	cpc	r23, r19
    32fc:	84 07       	cpc	r24, r20
    32fe:	95 07       	cpc	r25, r21
    3300:	18 f0       	brcs	.+6      	; 0x3308 <__addsf3x+0x18>
    3302:	71 f4       	brne	.+28     	; 0x3320 <__addsf3x+0x30>
    3304:	9e f5       	brtc	.+102    	; 0x336c <__addsf3x+0x7c>
    3306:	8f c1       	rjmp	.+798    	; 0x3626 <__fp_zero>
    3308:	0e f4       	brtc	.+2      	; 0x330c <__addsf3x+0x1c>
    330a:	e0 95       	com	r30
    330c:	0b 2e       	mov	r0, r27
    330e:	ba 2f       	mov	r27, r26
    3310:	a0 2d       	mov	r26, r0
    3312:	0b 01       	movw	r0, r22
    3314:	b9 01       	movw	r22, r18
    3316:	90 01       	movw	r18, r0
    3318:	0c 01       	movw	r0, r24
    331a:	ca 01       	movw	r24, r20
    331c:	a0 01       	movw	r20, r0
    331e:	11 24       	eor	r1, r1
    3320:	ff 27       	eor	r31, r31
    3322:	59 1b       	sub	r21, r25
    3324:	99 f0       	breq	.+38     	; 0x334c <__addsf3x+0x5c>
    3326:	59 3f       	cpi	r21, 0xF9	; 249
    3328:	50 f4       	brcc	.+20     	; 0x333e <__addsf3x+0x4e>
    332a:	50 3e       	cpi	r21, 0xE0	; 224
    332c:	68 f1       	brcs	.+90     	; 0x3388 <__addsf3x+0x98>
    332e:	1a 16       	cp	r1, r26
    3330:	f0 40       	sbci	r31, 0x00	; 0
    3332:	a2 2f       	mov	r26, r18
    3334:	23 2f       	mov	r18, r19
    3336:	34 2f       	mov	r19, r20
    3338:	44 27       	eor	r20, r20
    333a:	58 5f       	subi	r21, 0xF8	; 248
    333c:	f3 cf       	rjmp	.-26     	; 0x3324 <__addsf3x+0x34>
    333e:	46 95       	lsr	r20
    3340:	37 95       	ror	r19
    3342:	27 95       	ror	r18
    3344:	a7 95       	ror	r26
    3346:	f0 40       	sbci	r31, 0x00	; 0
    3348:	53 95       	inc	r21
    334a:	c9 f7       	brne	.-14     	; 0x333e <__addsf3x+0x4e>
    334c:	7e f4       	brtc	.+30     	; 0x336c <__addsf3x+0x7c>
    334e:	1f 16       	cp	r1, r31
    3350:	ba 0b       	sbc	r27, r26
    3352:	62 0b       	sbc	r22, r18
    3354:	73 0b       	sbc	r23, r19
    3356:	84 0b       	sbc	r24, r20
    3358:	ba f0       	brmi	.+46     	; 0x3388 <__addsf3x+0x98>
    335a:	91 50       	subi	r25, 0x01	; 1
    335c:	a1 f0       	breq	.+40     	; 0x3386 <__addsf3x+0x96>
    335e:	ff 0f       	add	r31, r31
    3360:	bb 1f       	adc	r27, r27
    3362:	66 1f       	adc	r22, r22
    3364:	77 1f       	adc	r23, r23
    3366:	88 1f       	adc	r24, r24
    3368:	c2 f7       	brpl	.-16     	; 0x335a <__addsf3x+0x6a>
    336a:	0e c0       	rjmp	.+28     	; 0x3388 <__addsf3x+0x98>
    336c:	ba 0f       	add	r27, r26
    336e:	62 1f       	adc	r22, r18
    3370:	73 1f       	adc	r23, r19
    3372:	84 1f       	adc	r24, r20
    3374:	48 f4       	brcc	.+18     	; 0x3388 <__addsf3x+0x98>
    3376:	87 95       	ror	r24
    3378:	77 95       	ror	r23
    337a:	67 95       	ror	r22
    337c:	b7 95       	ror	r27
    337e:	f7 95       	ror	r31
    3380:	9e 3f       	cpi	r25, 0xFE	; 254
    3382:	08 f0       	brcs	.+2      	; 0x3386 <__addsf3x+0x96>
    3384:	b3 cf       	rjmp	.-154    	; 0x32ec <__addsf3+0x1e>
    3386:	93 95       	inc	r25
    3388:	88 0f       	add	r24, r24
    338a:	08 f0       	brcs	.+2      	; 0x338e <__addsf3x+0x9e>
    338c:	99 27       	eor	r25, r25
    338e:	ee 0f       	add	r30, r30
    3390:	97 95       	ror	r25
    3392:	87 95       	ror	r24
    3394:	08 95       	ret

00003396 <__cmpsf2>:
    3396:	d9 d0       	rcall	.+434    	; 0x354a <__fp_cmp>
    3398:	08 f4       	brcc	.+2      	; 0x339c <__cmpsf2+0x6>
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	08 95       	ret

0000339e <__divsf3>:
    339e:	0c d0       	rcall	.+24     	; 0x33b8 <__divsf3x>
    33a0:	0f c1       	rjmp	.+542    	; 0x35c0 <__fp_round>
    33a2:	07 d1       	rcall	.+526    	; 0x35b2 <__fp_pscB>
    33a4:	40 f0       	brcs	.+16     	; 0x33b6 <__divsf3+0x18>
    33a6:	fe d0       	rcall	.+508    	; 0x35a4 <__fp_pscA>
    33a8:	30 f0       	brcs	.+12     	; 0x33b6 <__divsf3+0x18>
    33aa:	21 f4       	brne	.+8      	; 0x33b4 <__divsf3+0x16>
    33ac:	5f 3f       	cpi	r21, 0xFF	; 255
    33ae:	19 f0       	breq	.+6      	; 0x33b6 <__divsf3+0x18>
    33b0:	f0 c0       	rjmp	.+480    	; 0x3592 <__fp_inf>
    33b2:	51 11       	cpse	r21, r1
    33b4:	39 c1       	rjmp	.+626    	; 0x3628 <__fp_szero>
    33b6:	f3 c0       	rjmp	.+486    	; 0x359e <__fp_nan>

000033b8 <__divsf3x>:
    33b8:	14 d1       	rcall	.+552    	; 0x35e2 <__fp_split3>
    33ba:	98 f3       	brcs	.-26     	; 0x33a2 <__divsf3+0x4>

000033bc <__divsf3_pse>:
    33bc:	99 23       	and	r25, r25
    33be:	c9 f3       	breq	.-14     	; 0x33b2 <__divsf3+0x14>
    33c0:	55 23       	and	r21, r21
    33c2:	b1 f3       	breq	.-20     	; 0x33b0 <__divsf3+0x12>
    33c4:	95 1b       	sub	r25, r21
    33c6:	55 0b       	sbc	r21, r21
    33c8:	bb 27       	eor	r27, r27
    33ca:	aa 27       	eor	r26, r26
    33cc:	62 17       	cp	r22, r18
    33ce:	73 07       	cpc	r23, r19
    33d0:	84 07       	cpc	r24, r20
    33d2:	38 f0       	brcs	.+14     	; 0x33e2 <__divsf3_pse+0x26>
    33d4:	9f 5f       	subi	r25, 0xFF	; 255
    33d6:	5f 4f       	sbci	r21, 0xFF	; 255
    33d8:	22 0f       	add	r18, r18
    33da:	33 1f       	adc	r19, r19
    33dc:	44 1f       	adc	r20, r20
    33de:	aa 1f       	adc	r26, r26
    33e0:	a9 f3       	breq	.-22     	; 0x33cc <__divsf3_pse+0x10>
    33e2:	33 d0       	rcall	.+102    	; 0x344a <__divsf3_pse+0x8e>
    33e4:	0e 2e       	mov	r0, r30
    33e6:	3a f0       	brmi	.+14     	; 0x33f6 <__divsf3_pse+0x3a>
    33e8:	e0 e8       	ldi	r30, 0x80	; 128
    33ea:	30 d0       	rcall	.+96     	; 0x344c <__divsf3_pse+0x90>
    33ec:	91 50       	subi	r25, 0x01	; 1
    33ee:	50 40       	sbci	r21, 0x00	; 0
    33f0:	e6 95       	lsr	r30
    33f2:	00 1c       	adc	r0, r0
    33f4:	ca f7       	brpl	.-14     	; 0x33e8 <__divsf3_pse+0x2c>
    33f6:	29 d0       	rcall	.+82     	; 0x344a <__divsf3_pse+0x8e>
    33f8:	fe 2f       	mov	r31, r30
    33fa:	27 d0       	rcall	.+78     	; 0x344a <__divsf3_pse+0x8e>
    33fc:	66 0f       	add	r22, r22
    33fe:	77 1f       	adc	r23, r23
    3400:	88 1f       	adc	r24, r24
    3402:	bb 1f       	adc	r27, r27
    3404:	26 17       	cp	r18, r22
    3406:	37 07       	cpc	r19, r23
    3408:	48 07       	cpc	r20, r24
    340a:	ab 07       	cpc	r26, r27
    340c:	b0 e8       	ldi	r27, 0x80	; 128
    340e:	09 f0       	breq	.+2      	; 0x3412 <__divsf3_pse+0x56>
    3410:	bb 0b       	sbc	r27, r27
    3412:	80 2d       	mov	r24, r0
    3414:	bf 01       	movw	r22, r30
    3416:	ff 27       	eor	r31, r31
    3418:	93 58       	subi	r25, 0x83	; 131
    341a:	5f 4f       	sbci	r21, 0xFF	; 255
    341c:	2a f0       	brmi	.+10     	; 0x3428 <__divsf3_pse+0x6c>
    341e:	9e 3f       	cpi	r25, 0xFE	; 254
    3420:	51 05       	cpc	r21, r1
    3422:	68 f0       	brcs	.+26     	; 0x343e <__divsf3_pse+0x82>
    3424:	b6 c0       	rjmp	.+364    	; 0x3592 <__fp_inf>
    3426:	00 c1       	rjmp	.+512    	; 0x3628 <__fp_szero>
    3428:	5f 3f       	cpi	r21, 0xFF	; 255
    342a:	ec f3       	brlt	.-6      	; 0x3426 <__divsf3_pse+0x6a>
    342c:	98 3e       	cpi	r25, 0xE8	; 232
    342e:	dc f3       	brlt	.-10     	; 0x3426 <__divsf3_pse+0x6a>
    3430:	86 95       	lsr	r24
    3432:	77 95       	ror	r23
    3434:	67 95       	ror	r22
    3436:	b7 95       	ror	r27
    3438:	f7 95       	ror	r31
    343a:	9f 5f       	subi	r25, 0xFF	; 255
    343c:	c9 f7       	brne	.-14     	; 0x3430 <__divsf3_pse+0x74>
    343e:	88 0f       	add	r24, r24
    3440:	91 1d       	adc	r25, r1
    3442:	96 95       	lsr	r25
    3444:	87 95       	ror	r24
    3446:	97 f9       	bld	r25, 7
    3448:	08 95       	ret
    344a:	e1 e0       	ldi	r30, 0x01	; 1
    344c:	66 0f       	add	r22, r22
    344e:	77 1f       	adc	r23, r23
    3450:	88 1f       	adc	r24, r24
    3452:	bb 1f       	adc	r27, r27
    3454:	62 17       	cp	r22, r18
    3456:	73 07       	cpc	r23, r19
    3458:	84 07       	cpc	r24, r20
    345a:	ba 07       	cpc	r27, r26
    345c:	20 f0       	brcs	.+8      	; 0x3466 <__divsf3_pse+0xaa>
    345e:	62 1b       	sub	r22, r18
    3460:	73 0b       	sbc	r23, r19
    3462:	84 0b       	sbc	r24, r20
    3464:	ba 0b       	sbc	r27, r26
    3466:	ee 1f       	adc	r30, r30
    3468:	88 f7       	brcc	.-30     	; 0x344c <__divsf3_pse+0x90>
    346a:	e0 95       	com	r30
    346c:	08 95       	ret

0000346e <__fixsfsi>:
    346e:	04 d0       	rcall	.+8      	; 0x3478 <__fixunssfsi>
    3470:	68 94       	set
    3472:	b1 11       	cpse	r27, r1
    3474:	d9 c0       	rjmp	.+434    	; 0x3628 <__fp_szero>
    3476:	08 95       	ret

00003478 <__fixunssfsi>:
    3478:	bc d0       	rcall	.+376    	; 0x35f2 <__fp_splitA>
    347a:	88 f0       	brcs	.+34     	; 0x349e <__fixunssfsi+0x26>
    347c:	9f 57       	subi	r25, 0x7F	; 127
    347e:	90 f0       	brcs	.+36     	; 0x34a4 <__fixunssfsi+0x2c>
    3480:	b9 2f       	mov	r27, r25
    3482:	99 27       	eor	r25, r25
    3484:	b7 51       	subi	r27, 0x17	; 23
    3486:	a0 f0       	brcs	.+40     	; 0x34b0 <__fixunssfsi+0x38>
    3488:	d1 f0       	breq	.+52     	; 0x34be <__fixunssfsi+0x46>
    348a:	66 0f       	add	r22, r22
    348c:	77 1f       	adc	r23, r23
    348e:	88 1f       	adc	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	1a f0       	brmi	.+6      	; 0x349a <__fixunssfsi+0x22>
    3494:	ba 95       	dec	r27
    3496:	c9 f7       	brne	.-14     	; 0x348a <__fixunssfsi+0x12>
    3498:	12 c0       	rjmp	.+36     	; 0x34be <__fixunssfsi+0x46>
    349a:	b1 30       	cpi	r27, 0x01	; 1
    349c:	81 f0       	breq	.+32     	; 0x34be <__fixunssfsi+0x46>
    349e:	c3 d0       	rcall	.+390    	; 0x3626 <__fp_zero>
    34a0:	b1 e0       	ldi	r27, 0x01	; 1
    34a2:	08 95       	ret
    34a4:	c0 c0       	rjmp	.+384    	; 0x3626 <__fp_zero>
    34a6:	67 2f       	mov	r22, r23
    34a8:	78 2f       	mov	r23, r24
    34aa:	88 27       	eor	r24, r24
    34ac:	b8 5f       	subi	r27, 0xF8	; 248
    34ae:	39 f0       	breq	.+14     	; 0x34be <__fixunssfsi+0x46>
    34b0:	b9 3f       	cpi	r27, 0xF9	; 249
    34b2:	cc f3       	brlt	.-14     	; 0x34a6 <__fixunssfsi+0x2e>
    34b4:	86 95       	lsr	r24
    34b6:	77 95       	ror	r23
    34b8:	67 95       	ror	r22
    34ba:	b3 95       	inc	r27
    34bc:	d9 f7       	brne	.-10     	; 0x34b4 <__fixunssfsi+0x3c>
    34be:	3e f4       	brtc	.+14     	; 0x34ce <__fixunssfsi+0x56>
    34c0:	90 95       	com	r25
    34c2:	80 95       	com	r24
    34c4:	70 95       	com	r23
    34c6:	61 95       	neg	r22
    34c8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ca:	8f 4f       	sbci	r24, 0xFF	; 255
    34cc:	9f 4f       	sbci	r25, 0xFF	; 255
    34ce:	08 95       	ret

000034d0 <__floatunsisf>:
    34d0:	e8 94       	clt
    34d2:	09 c0       	rjmp	.+18     	; 0x34e6 <__floatsisf+0x12>

000034d4 <__floatsisf>:
    34d4:	97 fb       	bst	r25, 7
    34d6:	3e f4       	brtc	.+14     	; 0x34e6 <__floatsisf+0x12>
    34d8:	90 95       	com	r25
    34da:	80 95       	com	r24
    34dc:	70 95       	com	r23
    34de:	61 95       	neg	r22
    34e0:	7f 4f       	sbci	r23, 0xFF	; 255
    34e2:	8f 4f       	sbci	r24, 0xFF	; 255
    34e4:	9f 4f       	sbci	r25, 0xFF	; 255
    34e6:	99 23       	and	r25, r25
    34e8:	a9 f0       	breq	.+42     	; 0x3514 <__floatsisf+0x40>
    34ea:	f9 2f       	mov	r31, r25
    34ec:	96 e9       	ldi	r25, 0x96	; 150
    34ee:	bb 27       	eor	r27, r27
    34f0:	93 95       	inc	r25
    34f2:	f6 95       	lsr	r31
    34f4:	87 95       	ror	r24
    34f6:	77 95       	ror	r23
    34f8:	67 95       	ror	r22
    34fa:	b7 95       	ror	r27
    34fc:	f1 11       	cpse	r31, r1
    34fe:	f8 cf       	rjmp	.-16     	; 0x34f0 <__floatsisf+0x1c>
    3500:	fa f4       	brpl	.+62     	; 0x3540 <__floatsisf+0x6c>
    3502:	bb 0f       	add	r27, r27
    3504:	11 f4       	brne	.+4      	; 0x350a <__floatsisf+0x36>
    3506:	60 ff       	sbrs	r22, 0
    3508:	1b c0       	rjmp	.+54     	; 0x3540 <__floatsisf+0x6c>
    350a:	6f 5f       	subi	r22, 0xFF	; 255
    350c:	7f 4f       	sbci	r23, 0xFF	; 255
    350e:	8f 4f       	sbci	r24, 0xFF	; 255
    3510:	9f 4f       	sbci	r25, 0xFF	; 255
    3512:	16 c0       	rjmp	.+44     	; 0x3540 <__floatsisf+0x6c>
    3514:	88 23       	and	r24, r24
    3516:	11 f0       	breq	.+4      	; 0x351c <__floatsisf+0x48>
    3518:	96 e9       	ldi	r25, 0x96	; 150
    351a:	11 c0       	rjmp	.+34     	; 0x353e <__floatsisf+0x6a>
    351c:	77 23       	and	r23, r23
    351e:	21 f0       	breq	.+8      	; 0x3528 <__floatsisf+0x54>
    3520:	9e e8       	ldi	r25, 0x8E	; 142
    3522:	87 2f       	mov	r24, r23
    3524:	76 2f       	mov	r23, r22
    3526:	05 c0       	rjmp	.+10     	; 0x3532 <__floatsisf+0x5e>
    3528:	66 23       	and	r22, r22
    352a:	71 f0       	breq	.+28     	; 0x3548 <__floatsisf+0x74>
    352c:	96 e8       	ldi	r25, 0x86	; 134
    352e:	86 2f       	mov	r24, r22
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	60 e0       	ldi	r22, 0x00	; 0
    3534:	2a f0       	brmi	.+10     	; 0x3540 <__floatsisf+0x6c>
    3536:	9a 95       	dec	r25
    3538:	66 0f       	add	r22, r22
    353a:	77 1f       	adc	r23, r23
    353c:	88 1f       	adc	r24, r24
    353e:	da f7       	brpl	.-10     	; 0x3536 <__floatsisf+0x62>
    3540:	88 0f       	add	r24, r24
    3542:	96 95       	lsr	r25
    3544:	87 95       	ror	r24
    3546:	97 f9       	bld	r25, 7
    3548:	08 95       	ret

0000354a <__fp_cmp>:
    354a:	99 0f       	add	r25, r25
    354c:	00 08       	sbc	r0, r0
    354e:	55 0f       	add	r21, r21
    3550:	aa 0b       	sbc	r26, r26
    3552:	e0 e8       	ldi	r30, 0x80	; 128
    3554:	fe ef       	ldi	r31, 0xFE	; 254
    3556:	16 16       	cp	r1, r22
    3558:	17 06       	cpc	r1, r23
    355a:	e8 07       	cpc	r30, r24
    355c:	f9 07       	cpc	r31, r25
    355e:	c0 f0       	brcs	.+48     	; 0x3590 <__fp_cmp+0x46>
    3560:	12 16       	cp	r1, r18
    3562:	13 06       	cpc	r1, r19
    3564:	e4 07       	cpc	r30, r20
    3566:	f5 07       	cpc	r31, r21
    3568:	98 f0       	brcs	.+38     	; 0x3590 <__fp_cmp+0x46>
    356a:	62 1b       	sub	r22, r18
    356c:	73 0b       	sbc	r23, r19
    356e:	84 0b       	sbc	r24, r20
    3570:	95 0b       	sbc	r25, r21
    3572:	39 f4       	brne	.+14     	; 0x3582 <__fp_cmp+0x38>
    3574:	0a 26       	eor	r0, r26
    3576:	61 f0       	breq	.+24     	; 0x3590 <__fp_cmp+0x46>
    3578:	23 2b       	or	r18, r19
    357a:	24 2b       	or	r18, r20
    357c:	25 2b       	or	r18, r21
    357e:	21 f4       	brne	.+8      	; 0x3588 <__fp_cmp+0x3e>
    3580:	08 95       	ret
    3582:	0a 26       	eor	r0, r26
    3584:	09 f4       	brne	.+2      	; 0x3588 <__fp_cmp+0x3e>
    3586:	a1 40       	sbci	r26, 0x01	; 1
    3588:	a6 95       	lsr	r26
    358a:	8f ef       	ldi	r24, 0xFF	; 255
    358c:	81 1d       	adc	r24, r1
    358e:	81 1d       	adc	r24, r1
    3590:	08 95       	ret

00003592 <__fp_inf>:
    3592:	97 f9       	bld	r25, 7
    3594:	9f 67       	ori	r25, 0x7F	; 127
    3596:	80 e8       	ldi	r24, 0x80	; 128
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	08 95       	ret

0000359e <__fp_nan>:
    359e:	9f ef       	ldi	r25, 0xFF	; 255
    35a0:	80 ec       	ldi	r24, 0xC0	; 192
    35a2:	08 95       	ret

000035a4 <__fp_pscA>:
    35a4:	00 24       	eor	r0, r0
    35a6:	0a 94       	dec	r0
    35a8:	16 16       	cp	r1, r22
    35aa:	17 06       	cpc	r1, r23
    35ac:	18 06       	cpc	r1, r24
    35ae:	09 06       	cpc	r0, r25
    35b0:	08 95       	ret

000035b2 <__fp_pscB>:
    35b2:	00 24       	eor	r0, r0
    35b4:	0a 94       	dec	r0
    35b6:	12 16       	cp	r1, r18
    35b8:	13 06       	cpc	r1, r19
    35ba:	14 06       	cpc	r1, r20
    35bc:	05 06       	cpc	r0, r21
    35be:	08 95       	ret

000035c0 <__fp_round>:
    35c0:	09 2e       	mov	r0, r25
    35c2:	03 94       	inc	r0
    35c4:	00 0c       	add	r0, r0
    35c6:	11 f4       	brne	.+4      	; 0x35cc <__fp_round+0xc>
    35c8:	88 23       	and	r24, r24
    35ca:	52 f0       	brmi	.+20     	; 0x35e0 <__fp_round+0x20>
    35cc:	bb 0f       	add	r27, r27
    35ce:	40 f4       	brcc	.+16     	; 0x35e0 <__fp_round+0x20>
    35d0:	bf 2b       	or	r27, r31
    35d2:	11 f4       	brne	.+4      	; 0x35d8 <__fp_round+0x18>
    35d4:	60 ff       	sbrs	r22, 0
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <__fp_round+0x20>
    35d8:	6f 5f       	subi	r22, 0xFF	; 255
    35da:	7f 4f       	sbci	r23, 0xFF	; 255
    35dc:	8f 4f       	sbci	r24, 0xFF	; 255
    35de:	9f 4f       	sbci	r25, 0xFF	; 255
    35e0:	08 95       	ret

000035e2 <__fp_split3>:
    35e2:	57 fd       	sbrc	r21, 7
    35e4:	90 58       	subi	r25, 0x80	; 128
    35e6:	44 0f       	add	r20, r20
    35e8:	55 1f       	adc	r21, r21
    35ea:	59 f0       	breq	.+22     	; 0x3602 <__fp_splitA+0x10>
    35ec:	5f 3f       	cpi	r21, 0xFF	; 255
    35ee:	71 f0       	breq	.+28     	; 0x360c <__fp_splitA+0x1a>
    35f0:	47 95       	ror	r20

000035f2 <__fp_splitA>:
    35f2:	88 0f       	add	r24, r24
    35f4:	97 fb       	bst	r25, 7
    35f6:	99 1f       	adc	r25, r25
    35f8:	61 f0       	breq	.+24     	; 0x3612 <__fp_splitA+0x20>
    35fa:	9f 3f       	cpi	r25, 0xFF	; 255
    35fc:	79 f0       	breq	.+30     	; 0x361c <__fp_splitA+0x2a>
    35fe:	87 95       	ror	r24
    3600:	08 95       	ret
    3602:	12 16       	cp	r1, r18
    3604:	13 06       	cpc	r1, r19
    3606:	14 06       	cpc	r1, r20
    3608:	55 1f       	adc	r21, r21
    360a:	f2 cf       	rjmp	.-28     	; 0x35f0 <__fp_split3+0xe>
    360c:	46 95       	lsr	r20
    360e:	f1 df       	rcall	.-30     	; 0x35f2 <__fp_splitA>
    3610:	08 c0       	rjmp	.+16     	; 0x3622 <__fp_splitA+0x30>
    3612:	16 16       	cp	r1, r22
    3614:	17 06       	cpc	r1, r23
    3616:	18 06       	cpc	r1, r24
    3618:	99 1f       	adc	r25, r25
    361a:	f1 cf       	rjmp	.-30     	; 0x35fe <__fp_splitA+0xc>
    361c:	86 95       	lsr	r24
    361e:	71 05       	cpc	r23, r1
    3620:	61 05       	cpc	r22, r1
    3622:	08 94       	sec
    3624:	08 95       	ret

00003626 <__fp_zero>:
    3626:	e8 94       	clt

00003628 <__fp_szero>:
    3628:	bb 27       	eor	r27, r27
    362a:	66 27       	eor	r22, r22
    362c:	77 27       	eor	r23, r23
    362e:	cb 01       	movw	r24, r22
    3630:	97 f9       	bld	r25, 7
    3632:	08 95       	ret

00003634 <__gesf2>:
    3634:	8a df       	rcall	.-236    	; 0x354a <__fp_cmp>
    3636:	08 f4       	brcc	.+2      	; 0x363a <__gesf2+0x6>
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	08 95       	ret

0000363c <__mulsf3>:
    363c:	0b d0       	rcall	.+22     	; 0x3654 <__mulsf3x>
    363e:	c0 cf       	rjmp	.-128    	; 0x35c0 <__fp_round>
    3640:	b1 df       	rcall	.-158    	; 0x35a4 <__fp_pscA>
    3642:	28 f0       	brcs	.+10     	; 0x364e <__mulsf3+0x12>
    3644:	b6 df       	rcall	.-148    	; 0x35b2 <__fp_pscB>
    3646:	18 f0       	brcs	.+6      	; 0x364e <__mulsf3+0x12>
    3648:	95 23       	and	r25, r21
    364a:	09 f0       	breq	.+2      	; 0x364e <__mulsf3+0x12>
    364c:	a2 cf       	rjmp	.-188    	; 0x3592 <__fp_inf>
    364e:	a7 cf       	rjmp	.-178    	; 0x359e <__fp_nan>
    3650:	11 24       	eor	r1, r1
    3652:	ea cf       	rjmp	.-44     	; 0x3628 <__fp_szero>

00003654 <__mulsf3x>:
    3654:	c6 df       	rcall	.-116    	; 0x35e2 <__fp_split3>
    3656:	a0 f3       	brcs	.-24     	; 0x3640 <__mulsf3+0x4>

00003658 <__mulsf3_pse>:
    3658:	95 9f       	mul	r25, r21
    365a:	d1 f3       	breq	.-12     	; 0x3650 <__mulsf3+0x14>
    365c:	95 0f       	add	r25, r21
    365e:	50 e0       	ldi	r21, 0x00	; 0
    3660:	55 1f       	adc	r21, r21
    3662:	62 9f       	mul	r22, r18
    3664:	f0 01       	movw	r30, r0
    3666:	72 9f       	mul	r23, r18
    3668:	bb 27       	eor	r27, r27
    366a:	f0 0d       	add	r31, r0
    366c:	b1 1d       	adc	r27, r1
    366e:	63 9f       	mul	r22, r19
    3670:	aa 27       	eor	r26, r26
    3672:	f0 0d       	add	r31, r0
    3674:	b1 1d       	adc	r27, r1
    3676:	aa 1f       	adc	r26, r26
    3678:	64 9f       	mul	r22, r20
    367a:	66 27       	eor	r22, r22
    367c:	b0 0d       	add	r27, r0
    367e:	a1 1d       	adc	r26, r1
    3680:	66 1f       	adc	r22, r22
    3682:	82 9f       	mul	r24, r18
    3684:	22 27       	eor	r18, r18
    3686:	b0 0d       	add	r27, r0
    3688:	a1 1d       	adc	r26, r1
    368a:	62 1f       	adc	r22, r18
    368c:	73 9f       	mul	r23, r19
    368e:	b0 0d       	add	r27, r0
    3690:	a1 1d       	adc	r26, r1
    3692:	62 1f       	adc	r22, r18
    3694:	83 9f       	mul	r24, r19
    3696:	a0 0d       	add	r26, r0
    3698:	61 1d       	adc	r22, r1
    369a:	22 1f       	adc	r18, r18
    369c:	74 9f       	mul	r23, r20
    369e:	33 27       	eor	r19, r19
    36a0:	a0 0d       	add	r26, r0
    36a2:	61 1d       	adc	r22, r1
    36a4:	23 1f       	adc	r18, r19
    36a6:	84 9f       	mul	r24, r20
    36a8:	60 0d       	add	r22, r0
    36aa:	21 1d       	adc	r18, r1
    36ac:	82 2f       	mov	r24, r18
    36ae:	76 2f       	mov	r23, r22
    36b0:	6a 2f       	mov	r22, r26
    36b2:	11 24       	eor	r1, r1
    36b4:	9f 57       	subi	r25, 0x7F	; 127
    36b6:	50 40       	sbci	r21, 0x00	; 0
    36b8:	8a f0       	brmi	.+34     	; 0x36dc <__mulsf3_pse+0x84>
    36ba:	e1 f0       	breq	.+56     	; 0x36f4 <__mulsf3_pse+0x9c>
    36bc:	88 23       	and	r24, r24
    36be:	4a f0       	brmi	.+18     	; 0x36d2 <__mulsf3_pse+0x7a>
    36c0:	ee 0f       	add	r30, r30
    36c2:	ff 1f       	adc	r31, r31
    36c4:	bb 1f       	adc	r27, r27
    36c6:	66 1f       	adc	r22, r22
    36c8:	77 1f       	adc	r23, r23
    36ca:	88 1f       	adc	r24, r24
    36cc:	91 50       	subi	r25, 0x01	; 1
    36ce:	50 40       	sbci	r21, 0x00	; 0
    36d0:	a9 f7       	brne	.-22     	; 0x36bc <__mulsf3_pse+0x64>
    36d2:	9e 3f       	cpi	r25, 0xFE	; 254
    36d4:	51 05       	cpc	r21, r1
    36d6:	70 f0       	brcs	.+28     	; 0x36f4 <__mulsf3_pse+0x9c>
    36d8:	5c cf       	rjmp	.-328    	; 0x3592 <__fp_inf>
    36da:	a6 cf       	rjmp	.-180    	; 0x3628 <__fp_szero>
    36dc:	5f 3f       	cpi	r21, 0xFF	; 255
    36de:	ec f3       	brlt	.-6      	; 0x36da <__mulsf3_pse+0x82>
    36e0:	98 3e       	cpi	r25, 0xE8	; 232
    36e2:	dc f3       	brlt	.-10     	; 0x36da <__mulsf3_pse+0x82>
    36e4:	86 95       	lsr	r24
    36e6:	77 95       	ror	r23
    36e8:	67 95       	ror	r22
    36ea:	b7 95       	ror	r27
    36ec:	f7 95       	ror	r31
    36ee:	e7 95       	ror	r30
    36f0:	9f 5f       	subi	r25, 0xFF	; 255
    36f2:	c1 f7       	brne	.-16     	; 0x36e4 <__mulsf3_pse+0x8c>
    36f4:	fe 2b       	or	r31, r30
    36f6:	88 0f       	add	r24, r24
    36f8:	91 1d       	adc	r25, r1
    36fa:	96 95       	lsr	r25
    36fc:	87 95       	ror	r24
    36fe:	97 f9       	bld	r25, 7
    3700:	08 95       	ret

00003702 <round>:
    3702:	77 df       	rcall	.-274    	; 0x35f2 <__fp_splitA>
    3704:	e0 f0       	brcs	.+56     	; 0x373e <round+0x3c>
    3706:	9e 37       	cpi	r25, 0x7E	; 126
    3708:	d8 f0       	brcs	.+54     	; 0x3740 <round+0x3e>
    370a:	96 39       	cpi	r25, 0x96	; 150
    370c:	b8 f4       	brcc	.+46     	; 0x373c <round+0x3a>
    370e:	9e 38       	cpi	r25, 0x8E	; 142
    3710:	48 f4       	brcc	.+18     	; 0x3724 <round+0x22>
    3712:	67 2f       	mov	r22, r23
    3714:	78 2f       	mov	r23, r24
    3716:	88 27       	eor	r24, r24
    3718:	98 5f       	subi	r25, 0xF8	; 248
    371a:	f9 cf       	rjmp	.-14     	; 0x370e <round+0xc>
    371c:	86 95       	lsr	r24
    371e:	77 95       	ror	r23
    3720:	67 95       	ror	r22
    3722:	93 95       	inc	r25
    3724:	95 39       	cpi	r25, 0x95	; 149
    3726:	d0 f3       	brcs	.-12     	; 0x371c <round+0x1a>
    3728:	b6 2f       	mov	r27, r22
    372a:	b1 70       	andi	r27, 0x01	; 1
    372c:	6b 0f       	add	r22, r27
    372e:	71 1d       	adc	r23, r1
    3730:	81 1d       	adc	r24, r1
    3732:	20 f4       	brcc	.+8      	; 0x373c <round+0x3a>
    3734:	87 95       	ror	r24
    3736:	77 95       	ror	r23
    3738:	67 95       	ror	r22
    373a:	93 95       	inc	r25
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <__fp_mintl>
    373e:	1c c0       	rjmp	.+56     	; 0x3778 <__fp_mpack>
    3740:	73 cf       	rjmp	.-282    	; 0x3628 <__fp_szero>

00003742 <__fp_mintl>:
    3742:	88 23       	and	r24, r24
    3744:	71 f4       	brne	.+28     	; 0x3762 <__fp_mintl+0x20>
    3746:	77 23       	and	r23, r23
    3748:	21 f0       	breq	.+8      	; 0x3752 <__fp_mintl+0x10>
    374a:	98 50       	subi	r25, 0x08	; 8
    374c:	87 2b       	or	r24, r23
    374e:	76 2f       	mov	r23, r22
    3750:	07 c0       	rjmp	.+14     	; 0x3760 <__fp_mintl+0x1e>
    3752:	66 23       	and	r22, r22
    3754:	11 f4       	brne	.+4      	; 0x375a <__fp_mintl+0x18>
    3756:	99 27       	eor	r25, r25
    3758:	0d c0       	rjmp	.+26     	; 0x3774 <__fp_mintl+0x32>
    375a:	90 51       	subi	r25, 0x10	; 16
    375c:	86 2b       	or	r24, r22
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	2a f0       	brmi	.+10     	; 0x376e <__fp_mintl+0x2c>
    3764:	9a 95       	dec	r25
    3766:	66 0f       	add	r22, r22
    3768:	77 1f       	adc	r23, r23
    376a:	88 1f       	adc	r24, r24
    376c:	da f7       	brpl	.-10     	; 0x3764 <__fp_mintl+0x22>
    376e:	88 0f       	add	r24, r24
    3770:	96 95       	lsr	r25
    3772:	87 95       	ror	r24
    3774:	97 f9       	bld	r25, 7
    3776:	08 95       	ret

00003778 <__fp_mpack>:
    3778:	9f 3f       	cpi	r25, 0xFF	; 255
    377a:	31 f0       	breq	.+12     	; 0x3788 <__fp_mpack_finite+0xc>

0000377c <__fp_mpack_finite>:
    377c:	91 50       	subi	r25, 0x01	; 1
    377e:	20 f4       	brcc	.+8      	; 0x3788 <__fp_mpack_finite+0xc>
    3780:	87 95       	ror	r24
    3782:	77 95       	ror	r23
    3784:	67 95       	ror	r22
    3786:	b7 95       	ror	r27
    3788:	88 0f       	add	r24, r24
    378a:	91 1d       	adc	r25, r1
    378c:	96 95       	lsr	r25
    378e:	87 95       	ror	r24
    3790:	97 f9       	bld	r25, 7
    3792:	08 95       	ret

00003794 <__divmodhi4>:
    3794:	97 fb       	bst	r25, 7
    3796:	07 2e       	mov	r0, r23
    3798:	16 f4       	brtc	.+4      	; 0x379e <__divmodhi4+0xa>
    379a:	00 94       	com	r0
    379c:	07 d0       	rcall	.+14     	; 0x37ac <__divmodhi4_neg1>
    379e:	77 fd       	sbrc	r23, 7
    37a0:	09 d0       	rcall	.+18     	; 0x37b4 <__divmodhi4_neg2>
    37a2:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__udivmodhi4>
    37a6:	07 fc       	sbrc	r0, 7
    37a8:	05 d0       	rcall	.+10     	; 0x37b4 <__divmodhi4_neg2>
    37aa:	3e f4       	brtc	.+14     	; 0x37ba <__divmodhi4_exit>

000037ac <__divmodhi4_neg1>:
    37ac:	90 95       	com	r25
    37ae:	81 95       	neg	r24
    37b0:	9f 4f       	sbci	r25, 0xFF	; 255
    37b2:	08 95       	ret

000037b4 <__divmodhi4_neg2>:
    37b4:	70 95       	com	r23
    37b6:	61 95       	neg	r22
    37b8:	7f 4f       	sbci	r23, 0xFF	; 255

000037ba <__divmodhi4_exit>:
    37ba:	08 95       	ret

000037bc <__udivmodsi4>:
    37bc:	a1 e2       	ldi	r26, 0x21	; 33
    37be:	1a 2e       	mov	r1, r26
    37c0:	aa 1b       	sub	r26, r26
    37c2:	bb 1b       	sub	r27, r27
    37c4:	fd 01       	movw	r30, r26
    37c6:	0d c0       	rjmp	.+26     	; 0x37e2 <__udivmodsi4_ep>

000037c8 <__udivmodsi4_loop>:
    37c8:	aa 1f       	adc	r26, r26
    37ca:	bb 1f       	adc	r27, r27
    37cc:	ee 1f       	adc	r30, r30
    37ce:	ff 1f       	adc	r31, r31
    37d0:	a2 17       	cp	r26, r18
    37d2:	b3 07       	cpc	r27, r19
    37d4:	e4 07       	cpc	r30, r20
    37d6:	f5 07       	cpc	r31, r21
    37d8:	20 f0       	brcs	.+8      	; 0x37e2 <__udivmodsi4_ep>
    37da:	a2 1b       	sub	r26, r18
    37dc:	b3 0b       	sbc	r27, r19
    37de:	e4 0b       	sbc	r30, r20
    37e0:	f5 0b       	sbc	r31, r21

000037e2 <__udivmodsi4_ep>:
    37e2:	66 1f       	adc	r22, r22
    37e4:	77 1f       	adc	r23, r23
    37e6:	88 1f       	adc	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	1a 94       	dec	r1
    37ec:	69 f7       	brne	.-38     	; 0x37c8 <__udivmodsi4_loop>
    37ee:	60 95       	com	r22
    37f0:	70 95       	com	r23
    37f2:	80 95       	com	r24
    37f4:	90 95       	com	r25
    37f6:	9b 01       	movw	r18, r22
    37f8:	ac 01       	movw	r20, r24
    37fa:	bd 01       	movw	r22, r26
    37fc:	cf 01       	movw	r24, r30
    37fe:	08 95       	ret

00003800 <__divmodsi4>:
    3800:	05 2e       	mov	r0, r21
    3802:	97 fb       	bst	r25, 7
    3804:	16 f4       	brtc	.+4      	; 0x380a <__divmodsi4+0xa>
    3806:	00 94       	com	r0
    3808:	07 d0       	rcall	.+14     	; 0x3818 <__divmodsi4_neg1>
    380a:	57 fd       	sbrc	r21, 7
    380c:	0d d0       	rcall	.+26     	; 0x3828 <__divmodsi4_neg2>
    380e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__udivmodsi4>
    3812:	07 fc       	sbrc	r0, 7
    3814:	09 d0       	rcall	.+18     	; 0x3828 <__divmodsi4_neg2>
    3816:	7e f4       	brtc	.+30     	; 0x3836 <__divmodsi4_exit>

00003818 <__divmodsi4_neg1>:
    3818:	90 95       	com	r25
    381a:	80 95       	com	r24
    381c:	70 95       	com	r23
    381e:	61 95       	neg	r22
    3820:	7f 4f       	sbci	r23, 0xFF	; 255
    3822:	8f 4f       	sbci	r24, 0xFF	; 255
    3824:	9f 4f       	sbci	r25, 0xFF	; 255
    3826:	08 95       	ret

00003828 <__divmodsi4_neg2>:
    3828:	50 95       	com	r21
    382a:	40 95       	com	r20
    382c:	30 95       	com	r19
    382e:	21 95       	neg	r18
    3830:	3f 4f       	sbci	r19, 0xFF	; 255
    3832:	4f 4f       	sbci	r20, 0xFF	; 255
    3834:	5f 4f       	sbci	r21, 0xFF	; 255

00003836 <__divmodsi4_exit>:
    3836:	08 95       	ret

00003838 <__udivmodhi4>:
    3838:	aa 1b       	sub	r26, r26
    383a:	bb 1b       	sub	r27, r27
    383c:	51 e1       	ldi	r21, 0x11	; 17
    383e:	07 c0       	rjmp	.+14     	; 0x384e <__udivmodhi4_ep>

00003840 <__udivmodhi4_loop>:
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	a6 17       	cp	r26, r22
    3846:	b7 07       	cpc	r27, r23
    3848:	10 f0       	brcs	.+4      	; 0x384e <__udivmodhi4_ep>
    384a:	a6 1b       	sub	r26, r22
    384c:	b7 0b       	sbc	r27, r23

0000384e <__udivmodhi4_ep>:
    384e:	88 1f       	adc	r24, r24
    3850:	99 1f       	adc	r25, r25
    3852:	5a 95       	dec	r21
    3854:	a9 f7       	brne	.-22     	; 0x3840 <__udivmodhi4_loop>
    3856:	80 95       	com	r24
    3858:	90 95       	com	r25
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	08 95       	ret

00003860 <_exit>:
    3860:	f8 94       	cli

00003862 <__stop_program>:
    3862:	ff cf       	rjmp	.-2      	; 0x3862 <__stop_program>
