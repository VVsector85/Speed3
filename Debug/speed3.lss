
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003a4c  00003ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000043d  008000f6  008000f6  00003b76  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00003b76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00003c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fe8  00000000  00000000  00003fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6e  00000000  00000000  00008f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d44  00000000  00000000  00009cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  0000ba3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e70  00000000  00000000  0000c56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000519a  00000000  00000000  0000d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00012576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__ctors_end>
       4:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
       8:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_2>
       c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      10:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_4>
      14:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      18:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      1c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      20:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      24:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_9>
      28:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_10>
      2c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      30:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      34:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      38:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      3c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      40:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      44:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      48:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      4c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      50:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>

00000054 <Arial_Narrow18x32>:
      54:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
      64:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
      74:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
      84:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
      94:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
      a4:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
      b4:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
      c4:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
      d4:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
      e4:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
      f4:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     104:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     114:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     124:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     134:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     144:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     154:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     164:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     174:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     184:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     194:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     1a4:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     1b4:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     1c4:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     1d4:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     1e4:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     1f4:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     204:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     214:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     224:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     234:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     244:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     254:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     264:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     274:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     284:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     294:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     2a4:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     2b4:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     2c4:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     2d4:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     2e4:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     2f4:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     304:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     314:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     324:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     334:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     344:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     354:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     364:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     374:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     384:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     394:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     3a4:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     3b4:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     3c4:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     3d4:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     3e4:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     3f4:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     404:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     414:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     424:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     434:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     444:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     460:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     498:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     4a8:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     4b8:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     4c8:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     4d8:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     4e8:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     4f8:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     508:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     518:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     528:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     538:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     548:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     558:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     574:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     584:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     594:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     5a4:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     5b4:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     5c4:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     5d4:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     5e4:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     5f4:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     604:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     614:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     624:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     634:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     644:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     654:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     664:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     674:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     684:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     694:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     6a4:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     6b4:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     6c4:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     6d4:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     6e4:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     6f4:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     704:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     714:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     724:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     734:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     744:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     754:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     764:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     774:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     784:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     794:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     7a4:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     7b4:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

000007be <arrowLeft>:
	...
     7d2:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     826:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     836:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     846:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     856:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     866:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     876:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     886:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     896:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8a6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8c6:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     8d6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8f6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     906:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     916:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     926:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     936:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     946:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     956:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     966:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     976:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     986:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     996:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     9a6:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9b6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9c6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9d6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
     9fa:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00000a42 <arrowRight>:
	...
     a7e:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
     a9e:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     aae:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     abe:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     ace:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
     ade:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
     afa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b0a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b1a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b2a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b3a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b4a:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
     b5a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b6a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b7a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b8a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b9a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     baa:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
     bba:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bca:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bda:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bea:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bfa:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
     c0a:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c1a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c2a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c3a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c4a:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
     c5a:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ca6:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

00000cc6 <skull>:
     cc6:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
     cde:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
     cee:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
     cfe:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
     d0e:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
     d1e:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
     d2e:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
     d3e:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d4e:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
     d5e:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
     d6e:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
     d7e:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
     d8e:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
     d9e:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
     dae:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
     dbe:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dce:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
     dde:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
     dee:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
     dfe:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
     e0e:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e1e:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
     e2e:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
     e3e:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
     e4e:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
     e5e:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
     e6e:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
     e7e:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
     e8e:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
     e9e:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
     eb6:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
     ec6:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
     ed6:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     ee6:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
     ef6:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
     f0e:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00000f20 <Font5x8>:
     f20:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     f30:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     f40:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     f50:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     f60:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     f70:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     f80:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     f90:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     fa0:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     fb0:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     fc0:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     fd0:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     fe0:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     ff0:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
    1000:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
    1010:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
    1020:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
    1030:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
    1040:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
    1050:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
    1060:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
    1070:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
    1080:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
    1090:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
    10a0:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
    10b0:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
    10c0:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
    10d0:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
    10e0:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
    10f0:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
    1100:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
    1110:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
    1120:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
    1130:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
    1140:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
    1150:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00001160 <__ctors_end>:
    1160:	11 24       	eor	r1, r1
    1162:	1f be       	out	0x3f, r1	; 63
    1164:	cf e5       	ldi	r28, 0x5F	; 95
    1166:	d8 e0       	ldi	r29, 0x08	; 8
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	cd bf       	out	0x3d, r28	; 61

0000116c <__do_copy_data>:
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	a0 e6       	ldi	r26, 0x60	; 96
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ec e4       	ldi	r30, 0x4C	; 76
    1174:	fa e3       	ldi	r31, 0x3A	; 58
    1176:	02 c0       	rjmp	.+4      	; 0x117c <__do_copy_data+0x10>
    1178:	05 90       	lpm	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	a6 3f       	cpi	r26, 0xF6	; 246
    117e:	b1 07       	cpc	r27, r17
    1180:	d9 f7       	brne	.-10     	; 0x1178 <__do_copy_data+0xc>

00001182 <__do_clear_bss>:
    1182:	25 e0       	ldi	r18, 0x05	; 5
    1184:	a6 ef       	ldi	r26, 0xF6	; 246
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	01 c0       	rjmp	.+2      	; 0x118c <.do_clear_bss_start>

0000118a <.do_clear_bss_loop>:
    118a:	1d 92       	st	X+, r1

0000118c <.do_clear_bss_start>:
    118c:	a3 33       	cpi	r26, 0x33	; 51
    118e:	b2 07       	cpc	r27, r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <.do_clear_bss_loop>
    1192:	0e 94 33 11 	call	0x2266	; 0x2266 <main>
    1196:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <_exit>

0000119a <__bad_interrupt>:
    119a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000119e <step>:

void step(uint8_t mode){
	char tempPort = 0;
	signed int tempPhase = 0;
	
	if (dir)
    119e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <dir>
    11a2:	99 23       	and	r25, r25
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <step+0x28>
	{
		phase++;
    11a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <phase>
    11aa:	9f 5f       	subi	r25, 0xFF	; 255
    11ac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <phase>
		steps++;
    11b0:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <steps>
    11b4:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <steps+0x1>
    11b8:	2f 5f       	subi	r18, 0xFF	; 255
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <steps+0x1>
    11c0:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <steps>
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <step+0x46>
	}
	else
	{
		phase--;
    11c6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <phase>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <phase>
		steps--;
    11d0:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <steps>
    11d4:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <steps+0x1>
    11d8:	21 50       	subi	r18, 0x01	; 1
    11da:	31 09       	sbc	r19, r1
    11dc:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <steps+0x1>
    11e0:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <steps>
	}
	if(mode == FULL_STEP){
    11e4:	81 11       	cpse	r24, r1
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <step+0x66>
		if (phase < 0) phase = 3;
    11e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <phase>
    11ec:	88 23       	and	r24, r24
    11ee:	1c f4       	brge	.+6      	; 0x11f6 <step+0x58>
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <phase>
		if (phase > 3) phase = 0;
    11f6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <phase>
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	34 f1       	brlt	.+76     	; 0x124a <step+0xac>
    11fe:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phase>
    1202:	23 c0       	rjmp	.+70     	; 0x124a <step+0xac>
	}
	if(mode == HALF_STEP){
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	e1 f4       	brne	.+56     	; 0x1240 <step+0xa2>
		if (phase < 0) phase = 7;
    1208:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <phase>
    120c:	88 23       	and	r24, r24
    120e:	1c f4       	brge	.+6      	; 0x1216 <step+0x78>
    1210:	87 e0       	ldi	r24, 0x07	; 7
    1212:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <phase>
		if (phase > 7) phase = 0;
    1216:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <phase>
    121a:	88 30       	cpi	r24, 0x08	; 8
    121c:	2c f0       	brlt	.+10     	; 0x1228 <step+0x8a>
    121e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phase>
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <step+0x8a>
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
	if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[tempPhase];
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[tempPhase];

	PORTA = tempPort;
    1224:	8b bb       	out	0x1b, r24	; 27
	
}
    1226:	08 95       	ret
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	} 
	tempPhase=phase;
    1228:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <phase>

	tempPort=PORTA;
    122c:	8b b3       	in	r24, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    122e:	80 7f       	andi	r24, 0xF0	; 240
	if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[tempPhase];
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[tempPhase];
    1230:	0e 2e       	mov	r0, r30
    1232:	00 0c       	add	r0, r0
    1234:	ff 0b       	sbc	r31, r31
    1236:	e7 51       	subi	r30, 0x17	; 23
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	90 81       	ld	r25, Z
    123c:	89 2b       	or	r24, r25
    123e:	f2 cf       	rjmp	.-28     	; 0x1224 <step+0x86>
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	} 
	tempPhase=phase;
    1240:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <phase>

	tempPort=PORTA;
    1244:	8b b3       	in	r24, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    1246:	80 7f       	andi	r24, 0xF0	; 240
    1248:	ed cf       	rjmp	.-38     	; 0x1224 <step+0x86>
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	} 
	tempPhase=phase;
    124a:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <phase>

	tempPort=PORTA;
    124e:	8b b3       	in	r24, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    1250:	80 7f       	andi	r24, 0xF0	; 240
	if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[tempPhase];
    1252:	0e 2e       	mov	r0, r30
    1254:	00 0c       	add	r0, r0
    1256:	ff 0b       	sbc	r31, r31
    1258:	ef 50       	subi	r30, 0x0F	; 15
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	90 81       	ld	r25, Z
    125e:	89 2b       	or	r24, r25
    1260:	e1 cf       	rjmp	.-62     	; 0x1224 <step+0x86>

00001262 <__vector_10>:



}

ISR( TIMER0_COMP_vect ){
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31

step(stepMode);		
    1284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1288:	0e 94 cf 08 	call	0x119e	; 0x119e <step>
	if (steps == newSteps){
    128c:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <steps>
    1290:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <steps+0x1>
    1294:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <newSteps>
    1298:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <newSteps+0x1>
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__vector_10+0x4e>
	arrowMoving = 0;
    12a2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <arrowMoving>
	TCCR0=0;
    12a6:	13 be       	out	0x33, r1	; 51
	OCR0=0;
    12a8:	1c be       	out	0x3c, r1	; 60
	TIMSK&=~_BV(OCIE0);
    12aa:	89 b7       	in	r24, 0x39	; 57
    12ac:	8d 7f       	andi	r24, 0xFD	; 253
    12ae:	89 bf       	out	0x39, r24	; 57
	}
}
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_4>:
	PORTA = tempPort;
	
}


ISR( TIMER2_COMP_vect ){
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	8f 93       	push	r24
    12de:	9f 93       	push	r25
	speedTimer++; //speedTimer increments each period timePerTic*TIC
    12e0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <speedTimer>
    12e4:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <speedTimer+0x1>
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <speedTimer+0x1>
    12ee:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <speedTimer>
	}
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	0f 90       	pop	r0
    12fc:	1f 90       	pop	r1
    12fe:	18 95       	reti

00001300 <__vector_9>:
ISR (TIMER1_OVF_vect){
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    130e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <signalOn>
    1312:	88 23       	and	r24, r24
    1314:	49 f0       	breq	.+18     	; 0x1328 <__vector_9+0x28>
    1316:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <signalCounter>
    131a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <signalCounter+0x1>
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <signalCounter+0x1>
    1324:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <signalCounter>
}
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_2>:
ISR(INT1_vect){
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	8f 93       	push	r24
    134a:	9f 93       	push	r25
    134c:	af 93       	push	r26
    134e:	bf 93       	push	r27
//interrupt occurs when Hall sensor is triggered
if (firstMeasure==0)
    1350:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <firstMeasure>
    1354:	81 11       	cpse	r24, r1
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <__vector_2+0x32>
	{
		TIMSK|=_BV(OCIE2);
    1358:	89 b7       	in	r24, 0x39	; 57
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0;
    135e:	14 bc       	out	0x24, r1	; 36
		firstMeasure = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <firstMeasure>
    1366:	2c c0       	rjmp	.+88     	; 0x13c0 <__vector_2+0x8a>
		//first triggering of the sensor starts TIMER2
	}
else
	{
		speedTimerRecent = (speedTimer*TIC)+TCNT2;
    1368:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <speedTimer>
    136c:	50 91 28 01 	lds	r21, 0x0128	; 0x800128 <speedTimer+0x1>
    1370:	24 b5       	in	r18, 0x24	; 36
    1372:	34 e1       	ldi	r19, 0x14	; 20
    1374:	34 9f       	mul	r19, r20
    1376:	c0 01       	movw	r24, r0
    1378:	35 9f       	mul	r19, r21
    137a:	90 0d       	add	r25, r0
    137c:	11 24       	eor	r1, r1
    137e:	82 0f       	add	r24, r18
    1380:	91 1d       	adc	r25, r1
    1382:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <speedTimerRecent+0x1>
    1386:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <speedTimerRecent>
		TCNT2 = 0;	
    138a:	14 bc       	out	0x24, r1	; 36
		speedTimer = 0;
    138c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <speedTimer+0x1>
    1390:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <speedTimer>
		speedRefresh = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <speedRefresh>
		totalRotations++;
    139a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <totalRotations>
    139e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <totalRotations+0x1>
    13a2:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <totalRotations+0x2>
    13a6:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <totalRotations+0x3>
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	a1 1d       	adc	r26, r1
    13ae:	b1 1d       	adc	r27, r1
    13b0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <totalRotations>
    13b4:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <totalRotations+0x1>
    13b8:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <totalRotations+0x2>
    13bc:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <totalRotations+0x3>
	}
}
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <main_screen>:
	}
	
}

void main_screen()
{
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
	if (!signalOn){
    13f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <signalOn>
    13f6:	81 11       	cpse	r24, r1
    13f8:	fa c0       	rjmp	.+500    	; 0x15ee <main_screen+0x214>
	
	uint8_t offsetX = 10;
	uint8_t offsetY = 11;
		GLCD_Clear();
    13fa:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    13fe:	0f ef       	ldi	r16, 0xFF	; 255
    1400:	27 e1       	ldi	r18, 0x17	; 23
    1402:	44 e2       	ldi	r20, 0x24	; 36
    1404:	6b e0       	ldi	r22, 0x0B	; 11
    1406:	8a e0       	ldi	r24, 0x0A	; 10
    1408:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    140c:	24 e1       	ldi	r18, 0x14	; 20
    140e:	46 e2       	ldi	r20, 0x26	; 38
    1410:	6e e0       	ldi	r22, 0x0E	; 14
    1412:	85 e2       	ldi	r24, 0x25	; 37
    1414:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <GLCD_DrawRectangle>
		
		
		if (voltage>=105)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    1418:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    141c:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    1420:	89 36       	cpi	r24, 0x69	; 105
    1422:	91 05       	cpc	r25, r1
    1424:	34 f0       	brlt	.+12     	; 0x1432 <main_screen+0x58>
    1426:	25 e1       	ldi	r18, 0x15	; 21
    1428:	40 e1       	ldi	r20, 0x10	; 16
    142a:	6d e0       	ldi	r22, 0x0D	; 13
    142c:	8c e0       	ldi	r24, 0x0C	; 12
    142e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <GLCD_FillRectangle>
		if (voltage>=110)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    1432:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    1436:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    143a:	8e 36       	cpi	r24, 0x6E	; 110
    143c:	91 05       	cpc	r25, r1
    143e:	3c f0       	brlt	.+14     	; 0x144e <main_screen+0x74>
    1440:	0f ef       	ldi	r16, 0xFF	; 255
    1442:	25 e1       	ldi	r18, 0x15	; 21
    1444:	46 e1       	ldi	r20, 0x16	; 22
    1446:	6d e0       	ldi	r22, 0x0D	; 13
    1448:	82 e1       	ldi	r24, 0x12	; 18
    144a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <GLCD_FillRectangle>
		if (voltage>=115)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    144e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    1452:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    1456:	83 37       	cpi	r24, 0x73	; 115
    1458:	91 05       	cpc	r25, r1
    145a:	3c f0       	brlt	.+14     	; 0x146a <main_screen+0x90>
    145c:	0f ef       	ldi	r16, 0xFF	; 255
    145e:	25 e1       	ldi	r18, 0x15	; 21
    1460:	4c e1       	ldi	r20, 0x1C	; 28
    1462:	6d e0       	ldi	r22, 0x0D	; 13
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <GLCD_FillRectangle>
		if (voltage>=120)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    146a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    146e:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    1472:	88 37       	cpi	r24, 0x78	; 120
    1474:	91 05       	cpc	r25, r1
    1476:	3c f0       	brlt	.+14     	; 0x1486 <main_screen+0xac>
    1478:	0f ef       	ldi	r16, 0xFF	; 255
    147a:	25 e1       	ldi	r18, 0x15	; 21
    147c:	42 e2       	ldi	r20, 0x22	; 34
    147e:	6d e0       	ldi	r22, 0x0D	; 13
    1480:	8e e1       	ldi	r24, 0x1E	; 30
    1482:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <GLCD_FillRectangle>
		
		GLCD_GotoXY(33+offsetX, 4+offsetY);
    1486:	6f e0       	ldi	r22, 0x0F	; 15
    1488:	8b e2       	ldi	r24, 0x2B	; 43
    148a:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	48 e0       	ldi	r20, 0x08	; 8
    1492:	65 e0       	ldi	r22, 0x05	; 5
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	9f e0       	ldi	r25, 0x0F	; 15
    1498:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    149c:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <voltage>
    14a0:	70 91 fb 00 	lds	r23, 0x00FB	; 0x8000fb <voltage+0x1>
    14a4:	07 2e       	mov	r0, r23
    14a6:	00 0c       	add	r0, r0
    14a8:	88 0b       	sbc	r24, r24
    14aa:	99 0b       	sbc	r25, r25
    14ac:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    14bc:	2a e0       	ldi	r18, 0x0A	; 10
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>
		GLCD_PrintString("V");
    14c8:	85 ea       	ldi	r24, 0xA5	; 165
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
		
		
	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	62 e1       	ldi	r22, 0x12	; 18
    14d6:	84 e5       	ldi	r24, 0x54	; 84
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <GLCD_SetFont>
	GLCD_GotoXY(2+2, 31);
    14de:	6f e1       	ldi	r22, 0x1F	; 31
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
    14e6:	80 90 05 01 	lds	r8, 0x0105	; 0x800105 <distance>
    14ea:	90 90 06 01 	lds	r9, 0x0106	; 0x800106 <distance+0x1>
    14ee:	a0 90 07 01 	lds	r10, 0x0107	; 0x800107 <distance+0x2>
    14f2:	b0 90 08 01 	lds	r11, 0x0108	; 0x800108 <distance+0x3>
    14f6:	84 e6       	ldi	r24, 0x64	; 100
    14f8:	88 16       	cp	r8, r24
    14fa:	91 04       	cpc	r9, r1
    14fc:	a1 04       	cpc	r10, r1
    14fe:	b1 04       	cpc	r11, r1
    1500:	70 f0       	brcs	.+28     	; 0x151e <main_screen+0x144>
    1502:	c5 01       	movw	r24, r10
    1504:	b4 01       	movw	r22, r8
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	0e 94 91 1c 	call	0x3922	; 0x3922 <__udivmodsi4>
		uint8_t l=0;
		
			while(tempDistance){
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	41 05       	cpc	r20, r1
    1518:	51 05       	cpc	r21, r1
    151a:	29 f4       	brne	.+10     	; 0x1526 <main_screen+0x14c>
    151c:	5f c0       	rjmp	.+190    	; 0x15dc <main_screen+0x202>
		
	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
	GLCD_GotoXY(2+2, 31);
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
    151e:	24 e6       	ldi	r18, 0x64	; 100
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t l=0;
		
			while(tempDistance){
			tempDistance/=10;
    1528:	0f 2e       	mov	r0, r31
    152a:	fa e0       	ldi	r31, 0x0A	; 10
    152c:	cf 2e       	mov	r12, r31
    152e:	d1 2c       	mov	r13, r1
    1530:	e1 2c       	mov	r14, r1
    1532:	f1 2c       	mov	r15, r1
    1534:	f0 2d       	mov	r31, r0
    1536:	ca 01       	movw	r24, r20
    1538:	b9 01       	movw	r22, r18
    153a:	a7 01       	movw	r20, r14
    153c:	96 01       	movw	r18, r12
    153e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__divmodsi4>
			l++;
    1542:	cf 5f       	subi	r28, 0xFF	; 255
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
		uint8_t l=0;
		
			while(tempDistance){
    1544:	21 15       	cp	r18, r1
    1546:	31 05       	cpc	r19, r1
    1548:	41 05       	cpc	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	a1 f7       	brne	.-24     	; 0x1536 <main_screen+0x15c>
			tempDistance/=10;
			l++;
			}
	
	int zeros = 6-l;
	if (distance < 100)zeros = 4;
    154e:	84 e6       	ldi	r24, 0x64	; 100
    1550:	88 16       	cp	r8, r24
    1552:	91 04       	cpc	r9, r1
    1554:	a1 04       	cpc	r10, r1
    1556:	b1 04       	cpc	r11, r1
    1558:	08 f0       	brcs	.+2      	; 0x155c <main_screen+0x182>
    155a:	41 c0       	rjmp	.+130    	; 0x15de <main_screen+0x204>
    155c:	04 e0       	ldi	r16, 0x04	; 4
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	c0 e0       	ldi	r28, 0x00	; 0
    1562:	d0 e0       	ldi	r29, 0x00	; 0
		if (zeros > 0){
			for (int i=0;i<zeros;i++){
		
				GLCD_PrintString("0");
    1564:	88 e7       	ldi	r24, 0x78	; 120
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
			}
	
	int zeros = 6-l;
	if (distance < 100)zeros = 4;
		if (zeros > 0){
			for (int i=0;i<zeros;i++){
    156c:	21 96       	adiw	r28, 0x01	; 1
    156e:	c0 17       	cp	r28, r16
    1570:	d1 07       	cpc	r29, r17
    1572:	c4 f3       	brlt	.-16     	; 0x1564 <main_screen+0x18a>
		
				GLCD_PrintString("0");
		
			}	
		}
	GLCD_PrintDouble((double)distance/100.0,10);
    1574:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <distance>
    1578:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <distance+0x1>
    157c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <distance+0x2>
    1580:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <distance+0x3>
    1584:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	48 ec       	ldi	r20, 0xC8	; 200
    158e:	52 e4       	ldi	r21, 0x42	; 66
    1590:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1594:	2a e0       	ldi	r18, 0x0A	; 10
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>
	
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	48 e0       	ldi	r20, 0x08	; 8
    15a4:	65 e0       	ldi	r22, 0x05	; 5
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	9f e0       	ldi	r25, 0x0F	; 15
    15aa:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <GLCD_SetFont>
	GLCD_GotoXY(64, 0);
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
	GLCD_PrintDouble(speedKmh,10);
    15b6:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <speedKmh>
    15ba:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <speedKmh+0x1>
    15be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <speedKmh+0x2>
    15c2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <speedKmh+0x3>
    15c6:	2a e0       	ldi	r18, 0x0A	; 10
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>
	GLCD_Render();
    15d2:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
	
	
		GLCD_Render();	
    15d6:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
		}
		
}
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <main_screen+0x214>
		long tempDistance=0;
	
		if (distance>99){tempDistance=distance/10;} else{tempDistance=100;}
		uint8_t l=0;
		
			while(tempDistance){
    15dc:	c0 e0       	ldi	r28, 0x00	; 0
			tempDistance/=10;
			l++;
			}
	
	int zeros = 6-l;
    15de:	06 e0       	ldi	r16, 0x06	; 6
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	0c 1b       	sub	r16, r28
    15e4:	11 09       	sbc	r17, r1
	if (distance < 100)zeros = 4;
		if (zeros > 0){
    15e6:	10 16       	cp	r1, r16
    15e8:	11 06       	cpc	r1, r17
    15ea:	24 f6       	brge	.-120    	; 0x1574 <main_screen+0x19a>
    15ec:	b9 cf       	rjmp	.-142    	; 0x1560 <main_screen+0x186>
	
	
		GLCD_Render();	
		}
		
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	08 95       	ret

00001608 <speed_arrow_update>:
			}
	return 0;
}

void speed_arrow_update(){
				if (stepMode == FULL_STEP)	 newSteps = speedKmh/kmhPerStep;//(12,75 degrees per 10 km/h)
    1608:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    160c:	81 11       	cpse	r24, r1
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <speed_arrow_update+0x3a>
    1610:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <kmhPerStep>
    1614:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <kmhPerStep+0x1>
    1618:	40 91 ff 00 	lds	r20, 0x00FF	; 0x8000ff <kmhPerStep+0x2>
    161c:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <kmhPerStep+0x3>
    1620:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <speedKmh>
    1624:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <speedKmh+0x1>
    1628:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <speedKmh+0x2>
    162c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <speedKmh+0x3>
    1630:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1634:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
    1638:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <newSteps+0x1>
    163c:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <newSteps>
    1640:	1a c0       	rjmp	.+52     	; 0x1676 <speed_arrow_update+0x6e>
				if (stepMode == HALF_STEP) newSteps = speedKmh/kmhPerStep;
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	c1 f4       	brne	.+48     	; 0x1676 <speed_arrow_update+0x6e>
    1646:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <kmhPerStep>
    164a:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <kmhPerStep+0x1>
    164e:	40 91 ff 00 	lds	r20, 0x00FF	; 0x8000ff <kmhPerStep+0x2>
    1652:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <kmhPerStep+0x3>
    1656:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <speedKmh>
    165a:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <speedKmh+0x1>
    165e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <speedKmh+0x2>
    1662:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <speedKmh+0x3>
    1666:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    166a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
    166e:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <newSteps+0x1>
    1672:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <newSteps>
				int shiftSteps = steps - newSteps;//difference in speedometer readings (how much the arrow should be shifted)
    1676:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <steps>
    167a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <steps+0x1>
    167e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <newSteps>
    1682:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <newSteps+0x1>
    1686:	82 1b       	sub	r24, r18
    1688:	93 0b       	sbc	r25, r19
				if (shiftSteps > 0){dir = 0;}else {dir = 1;}
    168a:	18 16       	cp	r1, r24
    168c:	19 06       	cpc	r1, r25
    168e:	1c f4       	brge	.+6      	; 0x1696 <speed_arrow_update+0x8e>
    1690:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <dir>
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <speed_arrow_update+0x98>
    1696:	21 e0       	ldi	r18, 0x01	; 1
    1698:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <dir>
				if (abs(shiftSteps)){
    169c:	89 2b       	or	r24, r25
    169e:	71 f0       	breq	.+28     	; 0x16bc <speed_arrow_update+0xb4>
					arrowMoving = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <arrowMoving>
					
					TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    16a6:	83 b7       	in	r24, 0x33	; 51
    16a8:	8d 60       	ori	r24, 0x0D	; 13
    16aa:	83 bf       	out	0x33, r24	; 51
					OCR0 = stepInterval;//interval between steps (Affects Stepper Motor Rotation Speed)
    16ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <stepInterval>
    16b0:	8c bf       	out	0x3c, r24	; 60
					TIMSK|=_BV(OCIE0);
    16b2:	89 b7       	in	r24, 0x39	; 57
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	89 bf       	out	0x39, r24	; 57
				
				main_screen();
    16b8:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
    16bc:	08 95       	ret

000016be <calculate_speed>:
				
				}
				
}

void calculate_speed(){
    16be:	cf 93       	push	r28
 
			if(speedTimer>1000){
    16c0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <speedTimer>
    16c4:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <speedTimer+0x1>
    16c8:	89 3e       	cpi	r24, 0xE9	; 233
    16ca:	93 40       	sbci	r25, 0x03	; 3
    16cc:	b4 f0       	brlt	.+44     	; 0x16fa <calculate_speed+0x3c>
						TIMSK&=~_BV(OCIE2);  //if Hall sensor was not triggered for too long (0,32s) it means that vehicle does not move
    16ce:	89 b7       	in	r24, 0x39	; 57
    16d0:	8f 77       	andi	r24, 0x7F	; 127
    16d2:	89 bf       	out	0x39, r24	; 57
						TCNT2 = 0;
    16d4:	14 bc       	out	0x24, r1	; 36
						speedTimer = 0;
    16d6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <speedTimer+0x1>
    16da:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <speedTimer>
						speedTimerRecent = 0;//speedTimer;//?
    16de:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <speedTimerRecent+0x1>
    16e2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <speedTimerRecent>
						speedKmh = 0;
    16e6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <speedKmh>
    16ea:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <speedKmh+0x1>
    16ee:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speedKmh+0x2>
    16f2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <speedKmh+0x3>
						firstMeasure = 0;
    16f6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <firstMeasure>
						}
			if((speedRefresh)&&(speedTimerRecent)){
    16fa:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <speedRefresh>
    16fe:	88 23       	and	r24, r24
    1700:	09 f4       	brne	.+2      	; 0x1704 <calculate_speed+0x46>
    1702:	41 c0       	rjmp	.+130    	; 0x1786 <calculate_speed+0xc8>
    1704:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <speedTimerRecent>
    1708:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <speedTimerRecent+0x1>
    170c:	89 2b       	or	r24, r25
    170e:	d9 f1       	breq	.+118    	; 0x1786 <calculate_speed+0xc8>
						if (speedTimerRecent>400) speedKmh = 1.0/(timePerTic*speedTimerRecent)*3.6*circLength;			
    1710:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <speedTimerRecent>
    1714:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <speedTimerRecent+0x1>
    1718:	81 39       	cpi	r24, 0x91	; 145
    171a:	91 40       	sbci	r25, 0x01	; 1
    171c:	a4 f1       	brlt	.+104    	; 0x1786 <calculate_speed+0xc8>
    171e:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <speedTimerRecent>
    1722:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <speedTimerRecent+0x1>
    1726:	07 2e       	mov	r0, r23
    1728:	00 0c       	add	r0, r0
    172a:	88 0b       	sbc	r24, r24
    172c:	99 0b       	sbc	r25, r25
    172e:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1732:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <timePerTic>
    1736:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <timePerTic+0x1>
    173a:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <timePerTic+0x2>
    173e:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <timePerTic+0x3>
    1742:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    1746:	9b 01       	movw	r18, r22
    1748:	ac 01       	movw	r20, r24
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 e8       	ldi	r24, 0x80	; 128
    1750:	9f e3       	ldi	r25, 0x3F	; 63
    1752:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1756:	26 e6       	ldi	r18, 0x66	; 102
    1758:	36 e6       	ldi	r19, 0x66	; 102
    175a:	46 e6       	ldi	r20, 0x66	; 102
    175c:	50 e4       	ldi	r21, 0x40	; 64
    175e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    1762:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <circLength>
    1766:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <circLength+0x1>
    176a:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <circLength+0x2>
    176e:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <circLength+0x3>
    1772:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    1776:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <speedKmh>
    177a:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <speedKmh+0x1>
    177e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <speedKmh+0x2>
    1782:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <speedKmh+0x3>
						}
		
			
		if (speedKmh>scaleMax)speedKmh=scaleMax;
    1786:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <scaleMax>
    178a:	6c 2f       	mov	r22, r28
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1796:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <speedKmh>
    179a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <speedKmh+0x1>
    179e:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <speedKmh+0x2>
    17a2:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <speedKmh+0x3>
    17a6:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	74 f4       	brge	.+28     	; 0x17ca <calculate_speed+0x10c>
    17ae:	6c 2f       	mov	r22, r28
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    17ba:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <speedKmh>
    17be:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <speedKmh+0x1>
    17c2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <speedKmh+0x2>
    17c6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <speedKmh+0x3>
		speedRefresh=0;
    17ca:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <speedRefresh>
														
														
		}
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <button_monitor>:
		main_screen();
	}
}

uint8_t button_monitor(){
if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
    17d2:	b5 9b       	sbis	0x16, 5	; 22
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <button_monitor+0x14>
    17d6:	b6 9b       	sbis	0x16, 6	; 22
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <button_monitor+0x14>
    17da:	b7 9b       	sbis	0x16, 7	; 22
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <button_monitor+0x14>
	btnPressed = 0;
    17de:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <btnPressed>
	return 0;
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	08 95       	ret
}

if((!(PINB&_BV(5)))&&(!btnPressed)){
    17e6:	b5 99       	sbic	0x16, 5	; 22
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <button_monitor+0x3e>
    17ea:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    17ee:	81 11       	cpse	r24, r1
    17f0:	3d c0       	rjmp	.+122    	; 0x186c <button_monitor+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17f2:	2f ef       	ldi	r18, 0xFF	; 255
    17f4:	80 e7       	ldi	r24, 0x70	; 112
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	21 50       	subi	r18, 0x01	; 1
    17fa:	80 40       	sbci	r24, 0x00	; 0
    17fc:	90 40       	sbci	r25, 0x00	; 0
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <button_monitor+0x26>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <button_monitor+0x30>
    1802:	00 00       	nop
	_delay_ms(50);
	if(!(PINB&_BV(5))){
    1804:	b5 99       	sbic	0x16, 5	; 22
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <button_monitor+0x3e>
		btnPressed = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <btnPressed>
    180e:	2e c0       	rjmp	.+92     	; 0x186c <button_monitor+0x9a>
	}
}

if((!(PINB&_BV(6)))&&(!btnPressed)){
    1810:	b6 99       	sbic	0x16, 6	; 22
    1812:	13 c0       	rjmp	.+38     	; 0x183a <button_monitor+0x68>
    1814:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    1818:	81 11       	cpse	r24, r1
    181a:	26 c0       	rjmp	.+76     	; 0x1868 <button_monitor+0x96>
    181c:	2f ef       	ldi	r18, 0xFF	; 255
    181e:	80 e7       	ldi	r24, 0x70	; 112
    1820:	92 e0       	ldi	r25, 0x02	; 2
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	80 40       	sbci	r24, 0x00	; 0
    1826:	90 40       	sbci	r25, 0x00	; 0
    1828:	e1 f7       	brne	.-8      	; 0x1822 <button_monitor+0x50>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <button_monitor+0x5a>
    182c:	00 00       	nop
	_delay_ms(50);
	if(!(PINB&_BV(6))){
    182e:	b6 99       	sbic	0x16, 6	; 22
    1830:	04 c0       	rjmp	.+8      	; 0x183a <button_monitor+0x68>
	btnPressed=2;
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <btnPressed>
    1838:	17 c0       	rjmp	.+46     	; 0x1868 <button_monitor+0x96>
	}
	
}
if((!(PINB&_BV(7)))&&(!btnPressed)){
    183a:	b7 99       	sbic	0x16, 7	; 22
    183c:	12 c0       	rjmp	.+36     	; 0x1862 <button_monitor+0x90>
    183e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    1842:	81 11       	cpse	r24, r1
    1844:	0e c0       	rjmp	.+28     	; 0x1862 <button_monitor+0x90>
    1846:	2f ef       	ldi	r18, 0xFF	; 255
    1848:	80 e7       	ldi	r24, 0x70	; 112
    184a:	92 e0       	ldi	r25, 0x02	; 2
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	80 40       	sbci	r24, 0x00	; 0
    1850:	90 40       	sbci	r25, 0x00	; 0
    1852:	e1 f7       	brne	.-8      	; 0x184c <button_monitor+0x7a>
    1854:	00 c0       	rjmp	.+0      	; 0x1856 <button_monitor+0x84>
    1856:	00 00       	nop
	_delay_ms(50);
	if(!(PINB&_BV(7))){
    1858:	b7 99       	sbic	0x16, 7	; 22
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <button_monitor+0x90>
	btnPressed=3;
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <btnPressed>
	}
	
}
return btnPressed;
    1862:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    1866:	08 95       	ret
	if(!(PINB&_BV(6))){
	btnPressed=2;
	}
	
}
if((!(PINB&_BV(7)))&&(!btnPressed)){
    1868:	86 b3       	in	r24, 0x16	; 22
    186a:	fb cf       	rjmp	.-10     	; 0x1862 <button_monitor+0x90>
	if(!(PINB&_BV(5))){
		btnPressed = 1;
	}
}

if((!(PINB&_BV(6)))&&(!btnPressed)){
    186c:	b6 9b       	sbis	0x16, 6	; 22
    186e:	fc cf       	rjmp	.-8      	; 0x1868 <button_monitor+0x96>
    1870:	e4 cf       	rjmp	.-56     	; 0x183a <button_monitor+0x68>

00001872 <menu_screen>:

void menu_screen(){
uint8_t offset = 75;	
static int8_t menuItem;
static int8_t page;
if (page < 0) page = 0;
    1872:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    1876:	88 23       	and	r24, r24
    1878:	14 f4       	brge	.+4      	; 0x187e <menu_screen+0xc>
    187a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <page.2759>
if (menuItem > 5){page++;menuItem=0;}
    187e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    1882:	86 30       	cpi	r24, 0x06	; 6
    1884:	44 f0       	brlt	.+16     	; 0x1896 <menu_screen+0x24>
    1886:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <page.2759>
    1890:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <menu_screen+0x56>
if (menuItem < 0){page--;menuItem=5;}
    1896:	88 23       	and	r24, r24
    1898:	5c f4       	brge	.+22     	; 0x18b0 <menu_screen+0x3e>
    189a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    189e:	81 50       	subi	r24, 0x01	; 1
    18a0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <page.2759>
    18a4:	95 e0       	ldi	r25, 0x05	; 5
    18a6:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <__data_end>
if ((page == 2)&&(menuItem > 1)){
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	69 f4       	brne	.+26     	; 0x18c8 <menu_screen+0x56>
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <menu_screen+0x4e>
    18b0:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	41 f4       	brne	.+16     	; 0x18c8 <menu_screen+0x56>
    18b8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	24 f0       	brlt	.+8      	; 0x18c8 <menu_screen+0x56>
	page = 0;
    18c0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <page.2759>
	menuItem = 0;
    18c4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
}
GLCD_Clear();
    18c8:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
GLCD_FillRectangle(0,0+menuItem*8-1+8,5,7+menuItem*8+8,GLCD_Black);
    18cc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    18d0:	88 0f       	add	r24, r24
    18d2:	88 0f       	add	r24, r24
    18d4:	88 0f       	add	r24, r24
    18d6:	2f e0       	ldi	r18, 0x0F	; 15
    18d8:	28 0f       	add	r18, r24
    18da:	67 e0       	ldi	r22, 0x07	; 7
    18dc:	68 0f       	add	r22, r24
    18de:	0f ef       	ldi	r16, 0xFF	; 255
    18e0:	45 e0       	ldi	r20, 0x05	; 5
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <GLCD_FillRectangle>
GLCD_FillRectangle(122,0+menuItem*8-1+8,127,7+menuItem*8+8,GLCD_Black);
    18e8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    18ec:	88 0f       	add	r24, r24
    18ee:	88 0f       	add	r24, r24
    18f0:	88 0f       	add	r24, r24
    18f2:	2f e0       	ldi	r18, 0x0F	; 15
    18f4:	28 0f       	add	r18, r24
    18f6:	67 e0       	ldi	r22, 0x07	; 7
    18f8:	68 0f       	add	r22, r24
    18fa:	4f e7       	ldi	r20, 0x7F	; 127
    18fc:	8a e7       	ldi	r24, 0x7A	; 122
    18fe:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <GLCD_FillRectangle>
GLCD_DrawLine(0,menuItem*8-2+8,127,menuItem*8-2+8,GLCD_Black);
    1902:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__data_end>
    1906:	66 0f       	add	r22, r22
    1908:	66 0f       	add	r22, r22
    190a:	66 0f       	add	r22, r22
    190c:	6a 5f       	subi	r22, 0xFA	; 250
    190e:	26 2f       	mov	r18, r22
    1910:	4f e7       	ldi	r20, 0x7F	; 127
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <GLCD_DrawLine>
GLCD_DrawLine(0,menuItem*8+8+8,127,menuItem*8+8+8,GLCD_Black);
    1918:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__data_end>
    191c:	66 0f       	add	r22, r22
    191e:	66 0f       	add	r22, r22
    1920:	66 0f       	add	r22, r22
    1922:	60 5f       	subi	r22, 0xF0	; 240
    1924:	26 2f       	mov	r18, r22
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <GLCD_DrawLine>

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Merge);
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	48 e0       	ldi	r20, 0x08	; 8
    1932:	65 e0       	ldi	r22, 0x05	; 5
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	9f e0       	ldi	r25, 0x0F	; 15
    1938:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <GLCD_SetFont>
if(page==0){
    193c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    1940:	81 11       	cpse	r24, r1
    1942:	94 c0       	rjmp	.+296    	; 0x1a6c <menu_screen+0x1fa>
GLCD_GotoX(10);	
    1944:	8a e0       	ldi	r24, 0x0A	; 10
    1946:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_GotoLine(1);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
GLCD_PrintString("Dig_PWM");
    1950:	8a e7       	ldi	r24, 0x7A	; 122
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
GLCD_GotoX(offset);
    1958:	8b e4       	ldi	r24, 0x4B	; 75
    195a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_PrintInteger(pwmDial);
    195e:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <pwmDial>
    1962:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <pwmDial+0x1>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>

GLCD_GotoX(10);
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_GotoLine(2);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
GLCD_PrintString("Arr_PWM");
    197a:	82 e8       	ldi	r24, 0x82	; 130
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
GLCD_GotoX(offset);
    1982:	8b e4       	ldi	r24, 0x4B	; 75
    1984:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_PrintInteger(pwmArrow);
    1988:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <pwmArrow>
    198c:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <pwmArrow+0x1>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>

GLCD_GotoX(10);
    1998:	8a e0       	ldi	r24, 0x0A	; 10
    199a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_GotoLine(3);
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
GLCD_PrintString("Weel D");	
    19a4:	8a e8       	ldi	r24, 0x8A	; 138
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
GLCD_GotoX(offset);
    19ac:	8b e4       	ldi	r24, 0x4B	; 75
    19ae:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_PrintDouble(wheelDiameter,100);
    19b2:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <wheelDiameter>
    19b6:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <wheelDiameter+0x1>
    19ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <wheelDiameter+0x2>
    19be:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <wheelDiameter+0x3>
    19c2:	24 e6       	ldi	r18, 0x64	; 100
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>
	
GLCD_GotoX(10);
    19ce:	8a e0       	ldi	r24, 0x0A	; 10
    19d0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_GotoLine(4);
    19d4:	84 e0       	ldi	r24, 0x04	; 4
    19d6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
GLCD_PrintString("Ratio");	
    19da:	81 e9       	ldi	r24, 0x91	; 145
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
GLCD_GotoX(offset);
    19e2:	8b e4       	ldi	r24, 0x4B	; 75
    19e4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_PrintDouble(gearRatio,100);
    19e8:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <gearRatio>
    19ec:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <gearRatio+0x1>
    19f0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <gearRatio+0x2>
    19f4:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gearRatio+0x3>
    19f8:	24 e6       	ldi	r18, 0x64	; 100
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>

GLCD_GotoX(10);
    1a04:	8a e0       	ldi	r24, 0x0A	; 10
    1a06:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_GotoLine(5);
    1a0a:	85 e0       	ldi	r24, 0x05	; 5
    1a0c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
GLCD_PrintString("Magnets");
    1a10:	87 e9       	ldi	r24, 0x97	; 151
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
GLCD_GotoX(offset);
    1a18:	8b e4       	ldi	r24, 0x4B	; 75
    1a1a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_PrintInteger(magnetsOnWheel);
    1a1e:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <magnetsOnWheel>
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>

GLCD_GotoX(10);
    1a2c:	8a e0       	ldi	r24, 0x0A	; 10
    1a2e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_GotoLine(6);
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
GLCD_PrintString("Sdown V");
    1a38:	8f e9       	ldi	r24, 0x9F	; 159
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
GLCD_GotoX(offset);
    1a40:	8b e4       	ldi	r24, 0x4B	; 75
    1a42:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
GLCD_PrintDouble(shutDownVoltageX10/10.0,10);
    1a46:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <shutDownVoltageX10>
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1a60:	2a e0       	ldi	r18, 0x0A	; 10
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>

}

if (page==1){
    1a6c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <menu_screen+0x204>
    1a74:	64 c0       	rjmp	.+200    	; 0x1b3e <menu_screen+0x2cc>
	
	GLCD_GotoX(10);
    1a76:	8a e0       	ldi	r24, 0x0A	; 10
    1a78:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoLine(1);
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
	GLCD_PrintString("Max speed");
    1a82:	87 ea       	ldi	r24, 0xA7	; 167
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
	GLCD_GotoX(offset);
    1a8a:	8b e4       	ldi	r24, 0x4B	; 75
    1a8c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_PrintInteger(scaleMax);
    1a90:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <scaleMax>
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>
	
	GLCD_GotoX(10);
    1a9e:	8a e0       	ldi	r24, 0x0A	; 10
    1aa0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoLine(2);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
	GLCD_PrintString("Deg/kmh");
    1aaa:	81 eb       	ldi	r24, 0xB1	; 177
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
	GLCD_GotoX(offset);
    1ab2:	8b e4       	ldi	r24, 0x4B	; 75
    1ab4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_PrintDouble(degreesPerKmh,1000);
    1ab8:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <degreesPerKmh>
    1abc:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <degreesPerKmh+0x1>
    1ac0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <degreesPerKmh+0x2>
    1ac4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <degreesPerKmh+0x3>
    1ac8:	28 ee       	ldi	r18, 0xE8	; 232
    1aca:	33 e0       	ldi	r19, 0x03	; 3
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <GLCD_PrintDouble>
	
	GLCD_GotoX(10);
    1ad4:	8a e0       	ldi	r24, 0x0A	; 10
    1ad6:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoLine(3);
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
	GLCD_PrintString("SM steps");
    1ae0:	89 eb       	ldi	r24, 0xB9	; 185
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
	GLCD_GotoX(offset);
    1ae8:	8b e4       	ldi	r24, 0x4B	; 75
    1aea:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_PrintInteger(smSteps);
    1aee:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>
	
	GLCD_GotoX(10);
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoLine(4);
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
	GLCD_PrintString("steps");
    1b08:	8c eb       	ldi	r24, 0xBC	; 188
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
	GLCD_GotoX(offset);
    1b10:	8b e4       	ldi	r24, 0x4B	; 75
    1b12:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_PrintInteger(stepInterval);
    1b16:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <stepInterval>
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>
	
		GLCD_GotoX(10);
    1b24:	8a e0       	ldi	r24, 0x0A	; 10
    1b26:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
		GLCD_GotoLine(5);
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
		GLCD_PrintString("Calibrate");
    1b30:	82 ec       	ldi	r24, 0xC2	; 194
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
		GLCD_GotoX(offset);
    1b38:	8b e4       	ldi	r24, 0x4B	; 75
    1b3a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
		
	


}
if (page==2){
    1b3e:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2759>
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	a1 f4       	brne	.+40     	; 0x1b6e <menu_screen+0x2fc>
	GLCD_GotoX(10);
    1b46:	8a e0       	ldi	r24, 0x0A	; 10
    1b48:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoLine(1);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
	GLCD_PrintString("odometer reset");
    1b52:	8c ec       	ldi	r24, 0xCC	; 204
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
	
	GLCD_GotoX(10);
    1b5a:	8a e0       	ldi	r24, 0x0A	; 10
    1b5c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoLine(2);
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <GLCD_GotoLine>
	GLCD_PrintString("load defaults");
    1b66:	8b ed       	ldi	r24, 0xDB	; 219
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
}

GLCD_Render();
    1b6e:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>


while(1){
		uint8_t currentButton=button_monitor();
    1b72:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <button_monitor>
		if(currentButton){
    1b76:	88 23       	and	r24, r24
    1b78:	e1 f3       	breq	.-8      	; 0x1b72 <menu_screen+0x300>
			if(currentButton == 2)	menuItem++;
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	31 f4       	brne	.+12     	; 0x1b8a <menu_screen+0x318>
    1b7e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
    1b88:	07 c0       	rjmp	.+14     	; 0x1b98 <menu_screen+0x326>
					
			if(currentButton == 3)	menuItem--;
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	29 f4       	brne	.+10     	; 0x1b98 <menu_screen+0x326>
    1b8e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
							
		while (button_monitor());
    1b98:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <button_monitor>
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	fc cf       	rjmp	.-8      	; 0x1b98 <menu_screen+0x326>
		menu_screen();
    1ba0:	0e 94 39 0c 	call	0x1872	; 0x1872 <menu_screen>

00001ba4 <arrow_calibration>:
}
return btnPressed;
}
void arrow_calibration(){
	int calibrationSteps = 0;
	if (stepMode==FULL_STEP){
    1ba4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1ba8:	81 11       	cpse	r24, r1
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <arrow_calibration+0x10>
		calibrationSteps = smSteps;
    1bac:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <smSteps>
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <arrow_calibration+0x1a>
	}else{
		calibrationSteps = smSteps*2;
    1bb4:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <smSteps>
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
	}


steps = 0;
    1bbe:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <steps+0x1>
    1bc2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <steps>
phase = 0;
    1bc6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phase>
	
	newSteps = calibrationSteps/4; //moving arrow 90 degrees clockwise
    1bca:	c9 01       	movw	r24, r18
    1bcc:	95 95       	asr	r25
    1bce:	87 95       	ror	r24
    1bd0:	95 95       	asr	r25
    1bd2:	87 95       	ror	r24
    1bd4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <newSteps+0x1>
    1bd8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <newSteps>
	
	
		dir = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <dir>
		arrowMoving=1;
    1be2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <arrowMoving>
		
		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1be6:	83 b7       	in	r24, 0x33	; 51
    1be8:	8d 60       	ori	r24, 0x0D	; 13
    1bea:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;
    1bec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <stepInterval>
    1bf0:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1bf2:	89 b7       	in	r24, 0x39	; 57
    1bf4:	82 60       	ori	r24, 0x02	; 2
    1bf6:	89 bf       	out	0x39, r24	; 57
	

while (arrowMoving);
    1bf8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <arrowMoving>
    1bfc:	81 11       	cpse	r24, r1
    1bfe:	fc cf       	rjmp	.-8      	; 0x1bf8 <arrow_calibration+0x54>
    1c00:	4f ef       	ldi	r20, 0xFF	; 255
    1c02:	82 e5       	ldi	r24, 0x52	; 82
    1c04:	97 e0       	ldi	r25, 0x07	; 7
    1c06:	41 50       	subi	r20, 0x01	; 1
    1c08:	80 40       	sbci	r24, 0x00	; 0
    1c0a:	90 40       	sbci	r25, 0x00	; 0
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <arrow_calibration+0x62>
    1c0e:	00 c0       	rjmp	.+0      	; 0x1c10 <arrow_calibration+0x6c>
    1c10:	00 00       	nop

	_delay_ms(150);
	steps = calibrationSteps;
    1c12:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <steps+0x1>
    1c16:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1c1a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <newSteps+0x1>
    1c1e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <newSteps>
	
	dir = 0;
    1c22:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <dir>
	arrowMoving = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <arrowMoving>
	
	
	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1c2c:	83 b7       	in	r24, 0x33	; 51
    1c2e:	8d 60       	ori	r24, 0x0D	; 13
    1c30:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1c32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <stepInterval>
    1c36:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1c38:	89 b7       	in	r24, 0x39	; 57
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	89 bf       	out	0x39, r24	; 57

while (arrowMoving);
    1c3e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <arrowMoving>
    1c42:	81 11       	cpse	r24, r1
    1c44:	fc cf       	rjmp	.-8      	; 0x1c3e <arrow_calibration+0x9a>
steps = 0;
    1c46:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <steps+0x1>
    1c4a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <steps>
newSteps = 0;
    1c4e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <newSteps+0x1>
    1c52:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <newSteps>
arrowCalibrated = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <arrowCalibrated>
    1c5c:	08 95       	ret

00001c5e <presets>:
	0b00000000,
	0b00001000,
	0b00000100			//HALF STEP
};

void presets (void){
    1c5e:	cf 92       	push	r12
    1c60:	df 92       	push	r13
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15


circLength = wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    1c66:	2b ed       	ldi	r18, 0xDB	; 219
    1c68:	3f e0       	ldi	r19, 0x0F	; 15
    1c6a:	49 e4       	ldi	r20, 0x49	; 73
    1c6c:	50 e4       	ldi	r21, 0x40	; 64
    1c6e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <wheelDiameter>
    1c72:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <wheelDiameter+0x1>
    1c76:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <wheelDiameter+0x2>
    1c7a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <wheelDiameter+0x3>
    1c7e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    1c82:	6b 01       	movw	r12, r22
    1c84:	7c 01       	movw	r14, r24
    1c86:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <magnetsOnWheel>
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1c94:	9b 01       	movw	r18, r22
    1c96:	ac 01       	movw	r20, r24
    1c98:	c7 01       	movw	r24, r14
    1c9a:	b6 01       	movw	r22, r12
    1c9c:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1ca0:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <circLength>
    1ca4:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <circLength+0x1>
    1ca8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <circLength+0x2>
    1cac:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <circLength+0x3>
timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    1cb0:	8d eb       	ldi	r24, 0xBD	; 189
    1cb2:	97 e3       	ldi	r25, 0x37	; 55
    1cb4:	a6 e8       	ldi	r26, 0x86	; 134
    1cb6:	b7 e3       	ldi	r27, 0x37	; 55
    1cb8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timePerTic>
    1cbc:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <timePerTic+0x1>
    1cc0:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <timePerTic+0x2>
    1cc4:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <timePerTic+0x3>

	
DDRA|=_BV(3); //ENABLE 1
    1cc8:	d3 9a       	sbi	0x1a, 3	; 26
DDRA|=_BV(0); //ENABLE 2
    1cca:	d0 9a       	sbi	0x1a, 0	; 26
DDRA|=_BV(2); //PHASE 1
    1ccc:	d2 9a       	sbi	0x1a, 2	; 26
DDRA|=_BV(1); //PHASE 2
    1cce:	d1 9a       	sbi	0x1a, 1	; 26
DDRD|=_BV(4);//PWM DIAL LIGHT
    1cd0:	8c 9a       	sbi	0x11, 4	; 17
DDRD|=_BV(5);//PWM ARROW LIGHT
    1cd2:	8d 9a       	sbi	0x11, 5	; 17


PORTA|=_BV(3);//ENABLE 1 high (disabled)
    1cd4:	db 9a       	sbi	0x1b, 3	; 27
PORTA|=_BV(0);//ENABLE 2 high (disabled)
    1cd6:	d8 9a       	sbi	0x1b, 0	; 27

PORTB|=_BV(5);//internal pull-up for external buttons
    1cd8:	c5 9a       	sbi	0x18, 5	; 24
PORTB|=_BV(6);
    1cda:	c6 9a       	sbi	0x18, 6	; 24
PORTB|=_BV(7);
    1cdc:	c7 9a       	sbi	0x18, 7	; 24
	
		//=======================ADC
		ADCSRA |= _BV(ADEN);
    1cde:	37 9a       	sbi	0x06, 7	; 6
		//=======================
		ADCSRA |= _BV(ADPS0);		//
    1ce0:	30 9a       	sbi	0x06, 0	; 6
		ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    1ce2:	31 9a       	sbi	0x06, 1	; 6
		ADCSRA |= _BV(ADPS2);		//
    1ce4:	32 9a       	sbi	0x06, 2	; 6
	//================= reading data from EEPROM
	
	uint8_t firstEepRead;
	uint16_t eepAddress = 8;
	uint8_t eepAddrShift = 8;
	firstEepRead = eeprom_read_byte((uint8_t*)eepAddress);//if the device is starting for the first time the default values have to be written to EEPROM
    1ce6:	88 e0       	ldi	r24, 0x08	; 8
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
	if (firstEepRead){
    1cee:	88 23       	and	r24, r24
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <presets+0x96>
    1cf2:	6f c0       	rjmp	.+222    	; 0x1dd2 <presets+0x174>
		eeprom_write_byte((uint8_t*)eepAddress,0);
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	88 e0       	ldi	r24, 0x08	; 8
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
	    eeprom_write_word((uint16_t*)(eepAddress+=eepAddrShift),pwmArrow);
    1cfe:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <pwmArrow>
    1d02:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <pwmArrow+0x1>
    1d06:	80 e1       	ldi	r24, 0x10	; 16
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <eeprom_write_word>
		eeprom_write_word((uint16_t*)(eepAddress+=eepAddrShift),pwmDial);
    1d0e:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <pwmDial>
    1d12:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <pwmDial+0x1>
    1d16:	88 e1       	ldi	r24, 0x18	; 24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <eeprom_write_word>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),scaleMax);
    1d1e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <scaleMax>
    1d22:	80 e2       	ldi	r24, 0x20	; 32
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),shutDownVoltageX10);
    1d2a:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <shutDownVoltageX10>
    1d2e:	88 e2       	ldi	r24, 0x28	; 40
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),stepInterval);
    1d36:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <stepInterval>
    1d3a:	80 e3       	ldi	r24, 0x30	; 48
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),smSteps);
    1d42:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    1d46:	88 e3       	ldi	r24, 0x38	; 56
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),lcdContrast);
    1d4e:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <lcdContrast>
    1d52:	80 e4       	ldi	r24, 0x40	; 64
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),magnetsOnWheel);
    1d5a:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <magnetsOnWheel>
    1d5e:	88 e4       	ldi	r24, 0x48	; 72
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)(eepAddress+=eepAddrShift),stepMode);
    1d66:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    1d6a:	80 e5       	ldi	r24, 0x50	; 80
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
		eeprom_write_float((float*)(eepAddress+=eepAddrShift),wheelDiameter);
    1d72:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <wheelDiameter>
    1d76:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <wheelDiameter+0x1>
    1d7a:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <wheelDiameter+0x2>
    1d7e:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <wheelDiameter+0x3>
    1d82:	88 e5       	ldi	r24, 0x58	; 88
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <eeprom_write_dword>
		eeprom_write_float((float*)(eepAddress+=eepAddrShift),gearRatio);
    1d8a:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <gearRatio>
    1d8e:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <gearRatio+0x1>
    1d92:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <gearRatio+0x2>
    1d96:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <gearRatio+0x3>
    1d9a:	80 e6       	ldi	r24, 0x60	; 96
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <eeprom_write_dword>
		eeprom_write_float((float*)(eepAddress+=eepAddrShift),degreesPerKmh);
    1da2:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <degreesPerKmh>
    1da6:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <degreesPerKmh+0x1>
    1daa:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <degreesPerKmh+0x2>
    1dae:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <degreesPerKmh+0x3>
    1db2:	88 e6       	ldi	r24, 0x68	; 104
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <eeprom_write_dword>
		eeprom_write_dword((uint32_t*)(eepAddress+=eepAddrShift),totalRotations);
    1dba:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <totalRotations>
    1dbe:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <totalRotations+0x1>
    1dc2:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <totalRotations+0x2>
    1dc6:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <totalRotations+0x3>
    1dca:	80 e7       	ldi	r24, 0x70	; 112
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <eeprom_write_dword>
		}
		eepAddress = 8;
		
		pwmArrow = eeprom_read_word((uint16_t*)(eepAddress+=eepAddrShift));
    1dd2:	80 e1       	ldi	r24, 0x10	; 16
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_read_word>
    1dda:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <pwmArrow+0x1>
    1dde:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <pwmArrow>
		pwmDial = eeprom_read_word((uint16_t*)(eepAddress+=eepAddrShift));
    1de2:	88 e1       	ldi	r24, 0x18	; 24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_read_word>
    1dea:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <pwmDial+0x1>
    1dee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <pwmDial>
		scaleMax = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1df2:	80 e2       	ldi	r24, 0x20	; 32
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1dfa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <scaleMax>
		shutDownVoltageX10 = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1dfe:	88 e2       	ldi	r24, 0x28	; 40
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1e06:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <shutDownVoltageX10>
		stepInterval = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1e0a:	80 e3       	ldi	r24, 0x30	; 48
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1e12:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <stepInterval>
		smSteps = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1e16:	88 e3       	ldi	r24, 0x38	; 56
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1e1e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <smSteps>
		lcdContrast = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1e22:	80 e4       	ldi	r24, 0x40	; 64
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1e2a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <lcdContrast>
		magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1e2e:	88 e4       	ldi	r24, 0x48	; 72
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1e36:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <magnetsOnWheel>
		stepMode = eeprom_read_byte((uint8_t*)(eepAddress+=eepAddrShift));
    1e3a:	80 e5       	ldi	r24, 0x50	; 80
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <eeprom_read_byte>
    1e42:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		wheelDiameter = eeprom_read_float((float*)(eepAddress+=eepAddrShift));
    1e46:	88 e5       	ldi	r24, 0x58	; 88
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <eeprom_read_dword>
    1e4e:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <wheelDiameter>
    1e52:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <wheelDiameter+0x1>
    1e56:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <wheelDiameter+0x2>
    1e5a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <wheelDiameter+0x3>
		gearRatio = eeprom_read_float((float*)(eepAddress+=eepAddrShift));
    1e5e:	80 e6       	ldi	r24, 0x60	; 96
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <eeprom_read_dword>
    1e66:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <gearRatio>
    1e6a:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <gearRatio+0x1>
    1e6e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <gearRatio+0x2>
    1e72:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <gearRatio+0x3>
		degreesPerKmh = eeprom_read_float((float*)(eepAddress+=eepAddrShift));
    1e76:	88 e6       	ldi	r24, 0x68	; 104
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <eeprom_read_dword>
    1e7e:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <degreesPerKmh>
    1e82:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <degreesPerKmh+0x1>
    1e86:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <degreesPerKmh+0x2>
    1e8a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <degreesPerKmh+0x3>
		totalRotations = eeprom_read_dword((uint32_t*)(eepAddress+=eepAddrShift));
    1e8e:	80 e7       	ldi	r24, 0x70	; 112
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <eeprom_read_dword>
    1e96:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <totalRotations>
    1e9a:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <totalRotations+0x1>
    1e9e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <totalRotations+0x2>
    1ea2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <totalRotations+0x3>
	
		
TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    1ea6:	85 b5       	in	r24, 0x25	; 37
    1ea8:	8e 60       	ori	r24, 0x0E	; 14
    1eaa:	85 bd       	out	0x25, r24	; 37
OCR2 = TIC; //upper limit of Timer2
    1eac:	84 e1       	ldi	r24, 0x14	; 20
    1eae:	83 bd       	out	0x23, r24	; 35

	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    1eb0:	83 ea       	ldi	r24, 0xA3	; 163
    1eb2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    1eb4:	8b e0       	ldi	r24, 0x0B	; 11
    1eb6:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    1eb8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <pwmArrow>
    1ebc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <pwmArrow+0x1>
    1ec0:	9b bd       	out	0x2b, r25	; 43
    1ec2:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    1ec4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwmDial>
    1ec8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <pwmDial+0x1>
    1ecc:	99 bd       	out	0x29, r25	; 41
    1ece:	88 bd       	out	0x28, r24	; 40
	//============================
	if (stepMode==FULL_STEP){
    1ed0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	22 c0       	rjmp	.+68     	; 0x1f1c <presets+0x2be>
		kmhPerStep=(360.0/smSteps)/degreesPerKmh;
    1ed8:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	84 eb       	ldi	r24, 0xB4	; 180
    1ef0:	93 e4       	ldi	r25, 0x43	; 67
    1ef2:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1ef6:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <degreesPerKmh>
    1efa:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <degreesPerKmh+0x1>
    1efe:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <degreesPerKmh+0x2>
    1f02:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <degreesPerKmh+0x3>
    1f06:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1f0a:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <kmhPerStep>
    1f0e:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <kmhPerStep+0x1>
    1f12:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <kmhPerStep+0x2>
    1f16:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <kmhPerStep+0x3>
    1f1a:	23 c0       	rjmp	.+70     	; 0x1f62 <presets+0x304>
		}
	if (stepMode==HALF_STEP){
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	09 f5       	brne	.+66     	; 0x1f62 <presets+0x304>
		kmhPerStep=(180.0/smSteps)/degreesPerKmh;
    1f20:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    1f2e:	9b 01       	movw	r18, r22
    1f30:	ac 01       	movw	r20, r24
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	84 e3       	ldi	r24, 0x34	; 52
    1f38:	93 e4       	ldi	r25, 0x43	; 67
    1f3a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1f3e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <degreesPerKmh>
    1f42:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <degreesPerKmh+0x1>
    1f46:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <degreesPerKmh+0x2>
    1f4a:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <degreesPerKmh+0x3>
    1f4e:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1f52:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <kmhPerStep>
    1f56:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <kmhPerStep+0x1>
    1f5a:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <kmhPerStep+0x2>
    1f5e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <kmhPerStep+0x3>
		}



//display initialization
GLCD_Setup();
    1f62:	0e 94 09 12 	call	0x2412	; 0x2412 <GLCD_Setup>
GLCD_Clear();
    1f66:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
GLCD_SetContrast(lcdContrast);
    1f6a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <lcdContrast>
    1f6e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <GLCD_SetContrast>
GLCD_Render();
    1f72:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
sei();
    1f76:	78 94       	sei
if (!arrowCalibrated)arrow_calibration();
    1f78:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <arrowCalibrated>
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <presets+0x326>
    1f80:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <arrow_calibration>
MCUCR|= _BV(ISC11); // External falling edge interrupt INT1
    1f84:	85 b7       	in	r24, 0x35	; 53
    1f86:	88 60       	ori	r24, 0x08	; 8
    1f88:	85 bf       	out	0x35, r24	; 53
GICR|=_BV(INT1); // External Interrupt Enable INT1
    1f8a:	8b b7       	in	r24, 0x3b	; 59
    1f8c:	80 68       	ori	r24, 0x80	; 128
    1f8e:	8b bf       	out	0x3b, r24	; 59



}
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	08 95       	ret

00001f9a <draw_arrow>:
newSteps = 0;
arrowCalibrated = 1;
}
	
void draw_arrow (char arrowDir){
	if (arrowDir){
    1f9a:	88 23       	and	r24, r24
    1f9c:	81 f0       	breq	.+32     	; 0x1fbe <draw_arrow+0x24>
		GLCD_Clear();
    1f9e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1fa2:	67 e0       	ldi	r22, 0x07	; 7
    1fa4:	86 e1       	ldi	r24, 0x16	; 22
    1fa6:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1faa:	2f ef       	ldi	r18, 0xFF	; 255
    1fac:	47 e3       	ldi	r20, 0x37	; 55
    1fae:	6c e5       	ldi	r22, 0x5C	; 92
    1fb0:	82 e4       	ldi	r24, 0x42	; 66
    1fb2:	9a e0       	ldi	r25, 0x0A	; 10
    1fb4:	0e 94 b3 13 	call	0x2766	; 0x2766 <GLCD_DrawBitmap>
		GLCD_Render();
    1fb8:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
    1fbc:	08 95       	ret
		}else{
		GLCD_Clear();
    1fbe:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1fc2:	67 e0       	ldi	r22, 0x07	; 7
    1fc4:	86 e1       	ldi	r24, 0x16	; 22
    1fc6:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1fca:	2f ef       	ldi	r18, 0xFF	; 255
    1fcc:	47 e3       	ldi	r20, 0x37	; 55
    1fce:	6c e5       	ldi	r22, 0x5C	; 92
    1fd0:	8e eb       	ldi	r24, 0xBE	; 190
    1fd2:	97 e0       	ldi	r25, 0x07	; 7
    1fd4:	0e 94 b3 13 	call	0x2766	; 0x2766 <GLCD_DrawBitmap>
		GLCD_Render();	
    1fd8:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
    1fdc:	08 95       	ret

00001fde <draw_skull>:
		}
}

void draw_skull (void)
{
GLCD_Clear();
    1fde:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
GLCD_GotoXY(21+6, 7);
    1fe2:	67 e0       	ldi	r22, 0x07	; 7
    1fe4:	8b e1       	ldi	r24, 0x1B	; 27
    1fe6:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1fea:	2f ef       	ldi	r18, 0xFF	; 255
    1fec:	44 e3       	ldi	r20, 0x34	; 52
    1fee:	66 e5       	ldi	r22, 0x56	; 86
    1ff0:	86 ec       	ldi	r24, 0xC6	; 198
    1ff2:	9c e0       	ldi	r25, 0x0C	; 12
    1ff4:	0e 94 b3 13 	call	0x2766	; 0x2766 <GLCD_DrawBitmap>
GLCD_Render();
    1ff8:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
    1ffc:	08 95       	ret

00001ffe <signal_monitor>:
														
														
		}
void signal_monitor(){
		
		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1ffe:	b4 99       	sbic	0x16, 4	; 22
    2000:	0c c0       	rjmp	.+24     	; 0x201a <signal_monitor+0x1c>
    2002:	b3 9b       	sbis	0x16, 3	; 22
    2004:	0a c0       	rjmp	.+20     	; 0x201a <signal_monitor+0x1c>
			draw_arrow(0);
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <draw_arrow>
			signalOn = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <signalOn>
			signalCounter = 0;
    2012:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    2016:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
		}
		
		if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    201a:	b3 99       	sbic	0x16, 3	; 22
    201c:	0f c0       	rjmp	.+30     	; 0x203c <signal_monitor+0x3e>
    201e:	b4 9b       	sbis	0x16, 4	; 22
    2020:	0d c0       	rjmp	.+26     	; 0x203c <signal_monitor+0x3e>
			draw_arrow(1);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <draw_arrow>
			signalOn = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <signalOn>
			signalCounter = 0;
    202e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    2032:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    2036:	b4 9b       	sbis	0x16, 4	; 22
    2038:	31 c0       	rjmp	.+98     	; 0x209c <signal_monitor+0x9e>
    203a:	33 c0       	rjmp	.+102    	; 0x20a2 <signal_monitor+0xa4>
    203c:	b4 99       	sbic	0x16, 4	; 22
    203e:	0c c0       	rjmp	.+24     	; 0x2058 <signal_monitor+0x5a>
    2040:	b3 99       	sbic	0x16, 3	; 22
    2042:	0a c0       	rjmp	.+20     	; 0x2058 <signal_monitor+0x5a>
			draw_skull();
    2044:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <draw_skull>
			signalOn = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <signalOn>
			signalCounter = 0;
    204e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    2052:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
    2056:	25 c0       	rjmp	.+74     	; 0x20a2 <signal_monitor+0xa4>
		}
		
		
		if (signalOn){
    2058:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <signalOn>
    205c:	88 23       	and	r24, r24
    205e:	19 f1       	breq	.+70     	; 0x20a6 <signal_monitor+0xa8>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    2060:	b3 9b       	sbis	0x16, 3	; 22
    2062:	09 c0       	rjmp	.+18     	; 0x2076 <signal_monitor+0x78>
    2064:	b4 9b       	sbis	0x16, 4	; 22
    2066:	07 c0       	rjmp	.+14     	; 0x2076 <signal_monitor+0x78>
				GLCD_Clear();
    2068:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <GLCD_Clear>
				GLCD_Render();
    206c:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_Render>
				TIMSK|=_BV(TOIE1);// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    2070:	89 b7       	in	r24, 0x39	; 57
    2072:	84 60       	ori	r24, 0x04	; 4
    2074:	89 bf       	out	0x39, r24	; 57
				//This is to see if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			}
			
			if (signalCounter > 300) //if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    2076:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <signalCounter>
    207a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <signalCounter+0x1>
    207e:	8d 32       	cpi	r24, 0x2D	; 45
    2080:	91 40       	sbci	r25, 0x01	; 1
    2082:	88 f0       	brcs	.+34     	; 0x20a6 <signal_monitor+0xa8>
			{
				signalOn = 0;
    2084:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <signalOn>
				signalCounter = 0;
    2088:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    208c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
				TIMSK&=~_BV(TOIE1);
    2090:	89 b7       	in	r24, 0x39	; 57
    2092:	8b 7f       	andi	r24, 0xFB	; 251
    2094:	89 bf       	out	0x39, r24	; 57
				main_screen();
    2096:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
			}
		}
		
}
    209a:	08 95       	ret
			draw_arrow(1);
			signalOn = 1;
			signalCounter = 0;
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    209c:	b3 99       	sbic	0x16, 3	; 22
    209e:	e0 cf       	rjmp	.-64     	; 0x2060 <signal_monitor+0x62>
    20a0:	d1 cf       	rjmp	.-94     	; 0x2044 <signal_monitor+0x46>
			signalCounter = 0;
		}
		
		
		if (signalOn){
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    20a2:	b3 99       	sbic	0x16, 3	; 22
    20a4:	df cf       	rjmp	.-66     	; 0x2064 <signal_monitor+0x66>
    20a6:	08 95       	ret

000020a8 <read_ADC>:
}
	
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
    20a8:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	16 16       	cp	r1, r22
    20ae:	17 06       	cpc	r1, r23
    20b0:	8c f4       	brge	.+34     	; 0x20d4 <read_ADC+0x2c>
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    20ba:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    20bc:	36 99       	sbic	0x06, 6	; 6
    20be:	fe cf       	rjmp	.-4      	; 0x20bc <read_ADC+0x14>
		tmp += ADCW;
    20c0:	44 b1       	in	r20, 0x04	; 4
    20c2:	55 b1       	in	r21, 0x05	; 5
    20c4:	84 0f       	add	r24, r20
    20c6:	95 1f       	adc	r25, r21
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    20c8:	2f 5f       	subi	r18, 0xFF	; 255
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	26 17       	cp	r18, r22
    20ce:	37 07       	cpc	r19, r23
    20d0:	a1 f7       	brne	.-24     	; 0x20ba <read_ADC+0x12>
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <read_ADC+0x30>
	
	
int read_ADC(unsigned char mux, unsigned char cycles)
{
	ADMUX = mux;
	int tmp = 0;
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    20d8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__divmodhi4>
    20dc:	cb 01       	movw	r24, r22
}	
    20de:	08 95       	ret

000020e0 <data_monitor>:
				main_screen();
			}
		}
		
}
void data_monitor(){
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17

	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    20e4:	6a e0       	ldi	r22, 0x0A	; 10
    20e6:	84 e0       	ldi	r24, 0x04	; 4
    20e8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <read_ADC>
    20ec:	bc 01       	movw	r22, r24
    20ee:	99 0f       	add	r25, r25
    20f0:	88 0b       	sbc	r24, r24
    20f2:	99 0b       	sbc	r25, r25
    20f4:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    20f8:	2a e9       	ldi	r18, 0x9A	; 154
    20fa:	39 e9       	ldi	r19, 0x99	; 153
    20fc:	4c ec       	ldi	r20, 0xCC	; 204
    20fe:	52 e4       	ldi	r21, 0x42	; 66
    2100:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	50 e4       	ldi	r21, 0x40	; 64
    210c:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 ec       	ldi	r20, 0xC0	; 192
    2116:	50 e4       	ldi	r21, 0x40	; 64
    2118:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    211c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
    2120:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <newVoltage+0x1>
    2124:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <newVoltage>
	
	if (newVoltage<shutDownVoltageX10){  
    2128:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <shutDownVoltageX10>
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	62 17       	cp	r22, r18
    2130:	73 07       	cpc	r23, r19
    2132:	0c f0       	brlt	.+2      	; 0x2136 <data_monitor+0x56>
    2134:	47 c0       	rjmp	.+142    	; 0x21c4 <data_monitor+0xe4>
		cli();
    2136:	f8 94       	cli
		TCCR1A = 0;
    2138:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;
    213a:	1e bc       	out	0x2e, r1	; 46
											//shutting down all the power consumers
		PORTA|=_BV(3); //ENABLE 1
    213c:	db 9a       	sbi	0x1b, 3	; 27
		PORTA|=_BV(0); //ENABLE 2
    213e:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA|=_BV(2); //PHASE 1
    2140:	da 9a       	sbi	0x1b, 2	; 27
		PORTA|=_BV(1); //PHASE 2
    2142:	d9 9a       	sbi	0x1b, 1	; 27
		
		eeprom_write_dword((uint32_t*)112,totalRotations);
    2144:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <totalRotations>
    2148:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <totalRotations+0x1>
    214c:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <totalRotations+0x2>
    2150:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <totalRotations+0x3>
    2154:	80 e7       	ldi	r24, 0x70	; 112
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <eeprom_write_dword>
		
		while (newVoltage<shutDownVoltageX10){
    215c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <shutDownVoltageX10>
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <newVoltage>
    2166:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <newVoltage+0x1>
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	44 f5       	brge	.+80     	; 0x21c0 <data_monitor+0xe0>
			newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    2170:	6a e0       	ldi	r22, 0x0A	; 10
    2172:	84 e0       	ldi	r24, 0x04	; 4
    2174:	0e 94 54 10 	call	0x20a8	; 0x20a8 <read_ADC>
    2178:	bc 01       	movw	r22, r24
    217a:	99 0f       	add	r25, r25
    217c:	88 0b       	sbc	r24, r24
    217e:	99 0b       	sbc	r25, r25
    2180:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    2184:	2a e9       	ldi	r18, 0x9A	; 154
    2186:	39 e9       	ldi	r19, 0x99	; 153
    2188:	4c ec       	ldi	r20, 0xCC	; 204
    218a:	52 e4       	ldi	r21, 0x42	; 66
    218c:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e2       	ldi	r20, 0x20	; 32
    2196:	50 e4       	ldi	r21, 0x40	; 64
    2198:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 ec       	ldi	r20, 0xC0	; 192
    21a2:	50 e4       	ldi	r21, 0x40	; 64
    21a4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    21a8:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
    21ac:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <newVoltage+0x1>
    21b0:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <newVoltage>
		PORTA|=_BV(2); //PHASE 1
		PORTA|=_BV(1); //PHASE 2
		
		eeprom_write_dword((uint32_t*)112,totalRotations);
		
		while (newVoltage<shutDownVoltageX10){
    21b4:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <shutDownVoltageX10>
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	62 17       	cp	r22, r18
    21bc:	73 07       	cpc	r23, r19
    21be:	c4 f2       	brlt	.-80     	; 0x2170 <data_monitor+0x90>
			newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
		}
		main();
    21c0:	0e 94 33 11 	call	0x2266	; 0x2266 <main>
	}
	
	
	if (newVoltage!=voltage) //if voltage value changes - refresh data on the screen
    21c4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <newVoltage>
    21c8:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <newVoltage+0x1>
    21cc:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <voltage>
    21d0:	30 91 fb 00 	lds	r19, 0x00FB	; 0x8000fb <voltage+0x1>
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	31 f0       	breq	.+12     	; 0x21e6 <data_monitor+0x106>
	{
		voltage = newVoltage;
    21da:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <voltage+0x1>
    21de:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <voltage>
		main_screen();
    21e2:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
	}
	
	newDistance=(round(totalRotations)*circLength)/10.0;
    21e6:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <totalRotations>
    21ea:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <totalRotations+0x1>
    21ee:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <totalRotations+0x2>
    21f2:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <totalRotations+0x3>
    21f6:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    21fa:	0e 94 30 1c 	call	0x3860	; 0x3860 <round>
    21fe:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <circLength>
    2202:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <circLength+0x1>
    2206:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <circLength+0x2>
    220a:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <circLength+0x3>
    220e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    221e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fixunssfsi>
    2222:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <newDistance>
    2226:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <newDistance+0x1>
    222a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <newDistance+0x2>
    222e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <newDistance+0x3>
	if (newDistance!=distance) //when the distance value changes by 100 meters - update the data on the screen
    2232:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <distance>
    2236:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <distance+0x1>
    223a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <distance+0x2>
    223e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <distance+0x3>
    2242:	60 17       	cp	r22, r16
    2244:	71 07       	cpc	r23, r17
    2246:	82 07       	cpc	r24, r18
    2248:	93 07       	cpc	r25, r19
    224a:	51 f0       	breq	.+20     	; 0x2260 <data_monitor+0x180>
	{
		distance=newDistance;
    224c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <distance>
    2250:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <distance+0x1>
    2254:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <distance+0x2>
    2258:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <distance+0x3>
		main_screen();
    225c:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
	}
}
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	08 95       	ret

00002266 <main>:
}


int main(void)
{
	presets();
    2266:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <presets>
	
	while(1){
		data_monitor();
    226a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <data_monitor>
		calculate_speed();
    226e:	0e 94 5f 0b 	call	0x16be	; 0x16be <calculate_speed>
		speed_arrow_update();
    2272:	0e 94 04 0b 	call	0x1608	; 0x1608 <speed_arrow_update>
		signal_monitor();
    2276:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <signal_monitor>
		if(button_monitor()) menu_screen();
    227a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <button_monitor>
    227e:	88 23       	and	r24, r24
    2280:	a1 f3       	breq	.-24     	; 0x226a <main+0x4>
    2282:	0e 94 39 0c 	call	0x1872	; 0x1872 <menu_screen>

00002286 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    2286:	66 95       	lsr	r22
    2288:	66 95       	lsr	r22
    228a:	66 95       	lsr	r22
    228c:	90 e8       	ldi	r25, 0x80	; 128
    228e:	69 9f       	mul	r22, r25
    2290:	b0 01       	movw	r22, r0
    2292:	11 24       	eor	r1, r1
    2294:	68 0f       	add	r22, r24
    2296:	71 1d       	adc	r23, r1
    2298:	fb 01       	movw	r30, r22
    229a:	ed 5c       	subi	r30, 0xCD	; 205
    229c:	fe 4f       	sbci	r31, 0xFE	; 254
    229e:	40 83       	st	Z, r20
    22a0:	08 95       	ret

000022a2 <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    22a2:	66 95       	lsr	r22
    22a4:	66 95       	lsr	r22
    22a6:	66 95       	lsr	r22
    22a8:	90 e8       	ldi	r25, 0x80	; 128
    22aa:	69 9f       	mul	r22, r25
    22ac:	b0 01       	movw	r22, r0
    22ae:	11 24       	eor	r1, r1
    22b0:	68 0f       	add	r22, r24
    22b2:	71 1d       	adc	r23, r1
    22b4:	fb 01       	movw	r30, r22
    22b6:	ed 5c       	subi	r30, 0xCD	; 205
    22b8:	fe 4f       	sbci	r31, 0xFE	; 254
}
    22ba:	80 81       	ld	r24, Z
    22bc:	08 95       	ret

000022be <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	c8 2f       	mov	r28, r24
    22ca:	06 2f       	mov	r16, r22
    22cc:	17 2f       	mov	r17, r23
    22ce:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    22d0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    22d4:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    22d8:	88 30       	cpi	r24, 0x08	; 8
    22da:	31 f0       	breq	.+12     	; 0x22e8 <GLCD_Send+0x2a>
    22dc:	80 31       	cpi	r24, 0x10	; 16
    22de:	21 f0       	breq	.+8      	; 0x22e8 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__GLCD>
				break;
    22e6:	33 c0       	rjmp	.+102    	; 0x234e <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    22e8:	88 e7       	ldi	r24, 0x78	; 120
    22ea:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    22ee:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    22f2:	88 31       	cpi	r24, 0x18	; 24
    22f4:	31 f0       	breq	.+12     	; 0x2302 <GLCD_Send+0x44>
    22f6:	80 32       	cpi	r24, 0x20	; 32
    22f8:	21 f0       	breq	.+8      	; 0x2302 <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__GLCD>
				break;
    2300:	26 c0       	rjmp	.+76     	; 0x234e <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    2302:	8c 2f       	mov	r24, r28
    2304:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    2308:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    230c:	88 32       	cpi	r24, 0x28	; 40
    230e:	19 f4       	brne	.+6      	; 0x2316 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    2310:	f1 10       	cpse	r15, r1
    2312:	07 c0       	rjmp	.+14     	; 0x2322 <GLCD_Send+0x64>
    2314:	1a c0       	rjmp	.+52     	; 0x234a <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    2316:	80 33       	cpi	r24, 0x30	; 48
    2318:	d9 f3       	breq	.-10     	; 0x2310 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__GLCD>
				break;
    2320:	16 c0       	rjmp	.+44     	; 0x234e <GLCD_Send+0x90>
    2322:	c0 2f       	mov	r28, r16
    2324:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    2326:	8e 01       	movw	r16, r28
    2328:	0f 5f       	subi	r16, 0xFF	; 255
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	fa 94       	dec	r15
    232e:	0f 0d       	add	r16, r15
    2330:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    2332:	89 91       	ld	r24, Y+
    2334:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    2338:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    233c:	88 32       	cpi	r24, 0x28	; 40
    233e:	11 f0       	breq	.+4      	; 0x2344 <GLCD_Send+0x86>
    2340:	80 33       	cpi	r24, 0x30	; 48
    2342:	19 f4       	brne	.+6      	; 0x234a <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    2344:	c0 17       	cp	r28, r16
    2346:	d1 07       	cpc	r29, r17
    2348:	a1 f7       	brne	.-24     	; 0x2332 <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    234a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    234e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <TWI_EndTransmission>
}
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	08 95       	ret

0000235e <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	1f 92       	push	r1
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	be 01       	movw	r22, r28
    236e:	6f 5f       	subi	r22, 0xFF	; 255
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	0e 94 5f 11 	call	0x22be	; 0x22be <GLCD_Send>
}
    2378:	0f 90       	pop	r0
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    2384:	81 e2       	ldi	r24, 0x21	; 33
    2386:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    2390:	8f e7       	ldi	r24, 0x7F	; 127
    2392:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    2396:	82 e2       	ldi	r24, 0x22	; 34
    2398:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    23a2:	87 e0       	ldi	r24, 0x07	; 7
    23a4:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
    23a8:	c0 e0       	ldi	r28, 0x00	; 0
    23aa:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    23ac:	be 01       	movw	r22, r28
    23ae:	62 95       	swap	r22
    23b0:	72 95       	swap	r23
    23b2:	70 7f       	andi	r23, 0xF0	; 240
    23b4:	76 27       	eor	r23, r22
    23b6:	60 7f       	andi	r22, 0xF0	; 240
    23b8:	76 27       	eor	r23, r22
    23ba:	6d 5c       	subi	r22, 0xCD	; 205
    23bc:	7e 4f       	sbci	r23, 0xFE	; 254
    23be:	40 e1       	ldi	r20, 0x10	; 16
    23c0:	80 e4       	ldi	r24, 0x40	; 64
    23c2:	0e 94 5f 11 	call	0x22be	; 0x22be <GLCD_Send>
    23c6:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    23c8:	c0 34       	cpi	r28, 0x40	; 64
    23ca:	d1 05       	cpc	r29, r1
    23cc:	79 f7       	brne	.-34     	; 0x23ac <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    23d4:	cf 93       	push	r28
    23d6:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    23d8:	81 e8       	ldi	r24, 0x81	; 129
    23da:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    23de:	8c 2f       	mov	r24, r28
    23e0:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
}
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    23e8:	88 23       	and	r24, r24
    23ea:	14 f0       	brlt	.+4      	; 0x23f0 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    23ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__GLCD+0x1>
    23f0:	08 95       	ret

000023f2 <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    23f2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__GLCD+0x2>
    23f6:	90 34       	cpi	r25, 0x40	; 64
    23f8:	10 f4       	brcc	.+4      	; 0x23fe <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    23fa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__GLCD+0x2>
    23fe:	08 95       	ret

00002400 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    2400:	cf 93       	push	r28
    2402:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    2404:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GLCD_GotoX>
	GLCD_GotoY(Y);
    2408:	8c 2f       	mov	r24, r28
    240a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <GLCD_GotoY>
}
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    2412:	0e 94 ce 19 	call	0x339c	; 0x339c <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    2416:	8e ea       	ldi	r24, 0xAE	; 174
    2418:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    241c:	85 ed       	ldi	r24, 0xD5	; 213
    241e:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    2422:	80 ef       	ldi	r24, 0xF0	; 240
    2424:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    2428:	88 ea       	ldi	r24, 0xA8	; 168
    242a:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    242e:	8f e3       	ldi	r24, 0x3F	; 63
    2430:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    2434:	83 ed       	ldi	r24, 0xD3	; 211
    2436:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    2440:	8d e8       	ldi	r24, 0x8D	; 141
    2442:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    2446:	84 e1       	ldi	r24, 0x14	; 20
    2448:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    244c:	80 e4       	ldi	r24, 0x40	; 64
    244e:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    2452:	80 e2       	ldi	r24, 0x20	; 32
    2454:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    245e:	81 ea       	ldi	r24, 0xA1	; 161
    2460:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    246a:	8a ed       	ldi	r24, 0xDA	; 218
    246c:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    2470:	82 e1       	ldi	r24, 0x12	; 18
    2472:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    2476:	81 e8       	ldi	r24, 0x81	; 129
    2478:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    247c:	8f ef       	ldi	r24, 0xFF	; 255
    247e:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    2482:	89 ed       	ldi	r24, 0xD9	; 217
    2484:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    2488:	81 ef       	ldi	r24, 0xF1	; 241
    248a:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    248e:	8b ed       	ldi	r24, 0xDB	; 219
    2490:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    249a:	84 ea       	ldi	r24, 0xA4	; 164
    249c:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    24a0:	86 ea       	ldi	r24, 0xA6	; 166
    24a2:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    24a6:	8e e2       	ldi	r24, 0x2E	; 46
    24a8:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    24ac:	8f ea       	ldi	r24, 0xAF	; 175
    24ae:	0e 94 af 11 	call	0x235e	; 0x235e <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    24ba:	86 ea       	ldi	r24, 0xA6	; 166
    24bc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    24c0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__GLCD+0x8>
    24c4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__GLCD+0x7>
    24c8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__GLCD+0x6>
    24cc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__GLCD+0x2>
    24d0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__GLCD+0x1>
    24d4:	08 95       	ret

000024d6 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    24d6:	88 30       	cpi	r24, 0x08	; 8
    24d8:	28 f4       	brcc	.+10     	; 0x24e4 <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    24da:	88 0f       	add	r24, r24
    24dc:	88 0f       	add	r24, r24
    24de:	88 0f       	add	r24, r24
    24e0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__GLCD+0x2>
    24e4:	08 95       	ret

000024e6 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    24e6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    24ea:	08 95       	ret

000024ec <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    24ec:	8f 92       	push	r8
    24ee:	9f 92       	push	r9
    24f0:	af 92       	push	r10
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	06 2f       	mov	r16, r22
    2506:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    2508:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    250c:	d0 91 2b 01 	lds	r29, 0x012B	; 0x80012b <__GLCD+0x2>
    2510:	c0 91 2a 01 	lds	r28, 0x012A	; 0x80012a <__GLCD+0x1>
    2514:	6d 2f       	mov	r22, r29
    2516:	8c 2f       	mov	r24, r28
    2518:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    251c:	1f 3f       	cpi	r17, 0xFF	; 255
    251e:	91 f4       	brne	.+36     	; 0x2544 <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    2520:	90 2f       	mov	r25, r16
    2522:	97 70       	andi	r25, 0x07	; 7
    2524:	81 2c       	mov	r8, r1
    2526:	91 2c       	mov	r9, r1
    2528:	54 01       	movw	r10, r8
    252a:	83 94       	inc	r8
    252c:	75 01       	movw	r14, r10
    252e:	64 01       	movw	r12, r8
    2530:	04 c0       	rjmp	.+8      	; 0x253a <GLCD_SetPixel+0x4e>
    2532:	cc 0c       	add	r12, r12
    2534:	dd 1c       	adc	r13, r13
    2536:	ee 1c       	adc	r14, r14
    2538:	ff 1c       	adc	r15, r15
    253a:	9a 95       	dec	r25
    253c:	d2 f7       	brpl	.-12     	; 0x2532 <GLCD_SetPixel+0x46>
    253e:	48 2f       	mov	r20, r24
    2540:	4c 29       	or	r20, r12
    2542:	13 c0       	rjmp	.+38     	; 0x256a <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    2544:	07 70       	andi	r16, 0x07	; 7
    2546:	c1 2c       	mov	r12, r1
    2548:	d1 2c       	mov	r13, r1
    254a:	76 01       	movw	r14, r12
    254c:	c3 94       	inc	r12
    254e:	b7 01       	movw	r22, r14
    2550:	a6 01       	movw	r20, r12
    2552:	04 c0       	rjmp	.+8      	; 0x255c <GLCD_SetPixel+0x70>
    2554:	44 0f       	add	r20, r20
    2556:	55 1f       	adc	r21, r21
    2558:	66 1f       	adc	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	0a 95       	dec	r16
    255e:	d2 f7       	brpl	.-12     	; 0x2554 <GLCD_SetPixel+0x68>
    2560:	8a 01       	movw	r16, r20
    2562:	9b 01       	movw	r18, r22
    2564:	00 95       	com	r16
    2566:	48 2f       	mov	r20, r24
    2568:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    256a:	6d 2f       	mov	r22, r29
    256c:	8c 2f       	mov	r24, r28
    256e:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
}
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	df 90       	pop	r13
    2580:	cf 90       	pop	r12
    2582:	bf 90       	pop	r11
    2584:	af 90       	pop	r10
    2586:	9f 90       	pop	r9
    2588:	8f 90       	pop	r8
    258a:	08 95       	ret

0000258c <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    258c:	3f 92       	push	r3
    258e:	4f 92       	push	r4
    2590:	5f 92       	push	r5
    2592:	6f 92       	push	r6
    2594:	7f 92       	push	r7
    2596:	8f 92       	push	r8
    2598:	9f 92       	push	r9
    259a:	af 92       	push	r10
    259c:	bf 92       	push	r11
    259e:	cf 92       	push	r12
    25a0:	df 92       	push	r13
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    25b0:	88 23       	and	r24, r24
    25b2:	0c f4       	brge	.+2      	; 0x25b6 <GLCD_SetPixels+0x2a>
    25b4:	c6 c0       	rjmp	.+396    	; 0x2742 <GLCD_SetPixels+0x1b6>
    25b6:	44 23       	and	r20, r20
    25b8:	0c f4       	brge	.+2      	; 0x25bc <GLCD_SetPixels+0x30>
    25ba:	c3 c0       	rjmp	.+390    	; 0x2742 <GLCD_SetPixels+0x1b6>
    25bc:	60 34       	cpi	r22, 0x40	; 64
    25be:	08 f0       	brcs	.+2      	; 0x25c2 <GLCD_SetPixels+0x36>
    25c0:	c0 c0       	rjmp	.+384    	; 0x2742 <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    25c2:	20 34       	cpi	r18, 0x40	; 64
    25c4:	08 f0       	brcs	.+2      	; 0x25c8 <GLCD_SetPixels+0x3c>
    25c6:	bd c0       	rjmp	.+378    	; 0x2742 <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    25c8:	11 e0       	ldi	r17, 0x01	; 1
    25ca:	81 2e       	mov	r8, r17
    25cc:	86 1a       	sub	r8, r22
    25ce:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    25d0:	18 1b       	sub	r17, r24
    25d2:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    25d4:	46 2f       	mov	r20, r22
    25d6:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    25d8:	76 2e       	mov	r7, r22
    25da:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    25dc:	e8 2c       	mov	r14, r8
    25de:	f1 2c       	mov	r15, r1
    25e0:	88 e0       	ldi	r24, 0x08	; 8
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	84 1b       	sub	r24, r20
    25e6:	91 09       	sbc	r25, r1
    25e8:	e8 16       	cp	r14, r24
    25ea:	f9 06       	cpc	r15, r25
    25ec:	7c f4       	brge	.+30     	; 0x260c <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    25ee:	88 e0       	ldi	r24, 0x08	; 8
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	8e 19       	sub	r24, r14
    25f4:	9f 09       	sbc	r25, r15
    25f6:	2f ef       	ldi	r18, 0xFF	; 255
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	59 01       	movw	r10, r18
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <GLCD_SetPixels+0x76>
    25fe:	b5 94       	asr	r11
    2600:	a7 94       	ror	r10
    2602:	8a 95       	dec	r24
    2604:	e2 f7       	brpl	.-8      	; 0x25fe <GLCD_SetPixels+0x72>
    2606:	8a 2d       	mov	r24, r10
			h = height;
    2608:	68 2c       	mov	r6, r8
    260a:	04 c0       	rjmp	.+8      	; 0x2614 <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    260c:	88 e0       	ldi	r24, 0x08	; 8
    260e:	68 2e       	mov	r6, r24
    2610:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    2612:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    2614:	a8 2e       	mov	r10, r24
    2616:	b1 2c       	mov	r11, r1
    2618:	02 c0       	rjmp	.+4      	; 0x261e <GLCD_SetPixels+0x92>
    261a:	aa 0c       	add	r10, r10
    261c:	bb 1c       	adc	r11, r11
    261e:	4a 95       	dec	r20
    2620:	e2 f7       	brpl	.-8      	; 0x261a <GLCD_SetPixels+0x8e>
    2622:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    2624:	67 2d       	mov	r22, r7
    2626:	89 2d       	mov	r24, r9
    2628:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    262c:	11 23       	and	r17, r17
    262e:	c9 f1       	breq	.+114    	; 0x26a2 <GLCD_SetPixels+0x116>
    2630:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2632:	0f 2e       	mov	r0, r31
    2634:	fb e2       	ldi	r31, 0x2B	; 43
    2636:	cf 2e       	mov	r12, r31
    2638:	f1 e0       	ldi	r31, 0x01	; 1
    263a:	df 2e       	mov	r13, r31
    263c:	f0 2d       	mov	r31, r0
    263e:	ca e2       	ldi	r28, 0x2A	; 42
    2640:	d1 e0       	ldi	r29, 0x01	; 1
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2642:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2644:	f6 01       	movw	r30, r12
    2646:	40 80       	ld	r4, Z
    2648:	b8 80       	ld	r11, Y
    264a:	64 2d       	mov	r22, r4
    264c:	8b 2d       	mov	r24, r11
    264e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2652:	0f 3f       	cpi	r16, 0xFF	; 255
    2654:	19 f4       	brne	.+6      	; 0x265c <GLCD_SetPixels+0xd0>
    2656:	48 2f       	mov	r20, r24
    2658:	43 29       	or	r20, r3
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <GLCD_SetPixels+0xd4>
    265c:	48 2f       	mov	r20, r24
    265e:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2660:	9b 2d       	mov	r25, r11
    2662:	9f 5f       	subi	r25, 0xFF	; 255
    2664:	98 83       	st	Y, r25
    2666:	64 2d       	mov	r22, r4
    2668:	8b 2d       	mov	r24, r11
    266a:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    266e:	53 94       	inc	r5
    2670:	51 12       	cpse	r5, r17
    2672:	e8 cf       	rjmp	.-48     	; 0x2644 <GLCD_SetPixels+0xb8>
    2674:	16 c0       	rjmp	.+44     	; 0x26a2 <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    2676:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    2678:	6c 2f       	mov	r22, r28
    267a:	89 2d       	mov	r24, r9
    267c:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    2680:	11 23       	and	r17, r17
    2682:	f1 f0       	breq	.+60     	; 0x26c0 <GLCD_SetPixels+0x134>
    2684:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    2686:	f6 01       	movw	r30, r12
    2688:	60 81       	ld	r22, Z
    268a:	f2 01       	movw	r30, r4
    268c:	80 81       	ld	r24, Z
    268e:	98 2f       	mov	r25, r24
    2690:	9f 5f       	subi	r25, 0xFF	; 255
    2692:	90 83       	st	Z, r25
    2694:	40 2f       	mov	r20, r16
    2696:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    269a:	73 94       	inc	r7
    269c:	71 16       	cp	r7, r17
    269e:	81 f0       	breq	.+32     	; 0x26c0 <GLCD_SetPixels+0x134>
    26a0:	f2 cf       	rjmp	.-28     	; 0x2686 <GLCD_SetPixels+0xfa>
    26a2:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    26a4:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    26a6:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    26a8:	0f 2e       	mov	r0, r31
    26aa:	fb e2       	ldi	r31, 0x2B	; 43
    26ac:	cf 2e       	mov	r12, r31
    26ae:	f1 e0       	ldi	r31, 0x01	; 1
    26b0:	df 2e       	mov	r13, r31
    26b2:	f0 2d       	mov	r31, r0
    26b4:	0f 2e       	mov	r0, r31
    26b6:	fa e2       	ldi	r31, 0x2A	; 42
    26b8:	4f 2e       	mov	r4, r31
    26ba:	f1 e0       	ldi	r31, 0x01	; 1
    26bc:	5f 2e       	mov	r5, r31
    26be:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    26c0:	26 2d       	mov	r18, r6
    26c2:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    26c4:	e2 2f       	mov	r30, r18
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	cf 01       	movw	r24, r30
    26ca:	08 96       	adiw	r24, 0x08	; 8
    26cc:	e8 16       	cp	r14, r24
    26ce:	f9 06       	cpc	r15, r25
    26d0:	94 f6       	brge	.-92     	; 0x2676 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    26d2:	28 15       	cp	r18, r8
    26d4:	b0 f5       	brcc	.+108    	; 0x2742 <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    26d6:	ee 1a       	sub	r14, r30
    26d8:	ff 0a       	sbc	r15, r31
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9c 01       	movw	r18, r24
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <GLCD_SetPixels+0x15a>
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	ea 94       	dec	r14
    26e8:	e2 f7       	brpl	.-8      	; 0x26e2 <GLCD_SetPixels+0x156>
    26ea:	79 01       	movw	r14, r18
    26ec:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    26ee:	6c 2f       	mov	r22, r28
    26f0:	68 5f       	subi	r22, 0xF8	; 248
    26f2:	89 2d       	mov	r24, r9
    26f4:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    26f8:	11 23       	and	r17, r17
    26fa:	19 f1       	breq	.+70     	; 0x2742 <GLCD_SetPixels+0x1b6>
    26fc:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    26fe:	0f 2e       	mov	r0, r31
    2700:	fb e2       	ldi	r31, 0x2B	; 43
    2702:	cf 2e       	mov	r12, r31
    2704:	f1 e0       	ldi	r31, 0x01	; 1
    2706:	df 2e       	mov	r13, r31
    2708:	f0 2d       	mov	r31, r0
    270a:	ca e2       	ldi	r28, 0x2A	; 42
    270c:	d1 e0       	ldi	r29, 0x01	; 1
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    270e:	9e 2c       	mov	r9, r14
    2710:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2712:	f6 01       	movw	r30, r12
    2714:	a0 80       	ld	r10, Z
    2716:	f8 80       	ld	r15, Y
    2718:	6a 2d       	mov	r22, r10
    271a:	8f 2d       	mov	r24, r15
    271c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    2720:	0f 3f       	cpi	r16, 0xFF	; 255
    2722:	19 f4       	brne	.+6      	; 0x272a <GLCD_SetPixels+0x19e>
    2724:	48 2f       	mov	r20, r24
    2726:	4e 29       	or	r20, r14
    2728:	02 c0       	rjmp	.+4      	; 0x272e <GLCD_SetPixels+0x1a2>
    272a:	48 2f       	mov	r20, r24
    272c:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    272e:	9f 2d       	mov	r25, r15
    2730:	9f 5f       	subi	r25, 0xFF	; 255
    2732:	98 83       	st	Y, r25
    2734:	6a 2d       	mov	r22, r10
    2736:	8f 2d       	mov	r24, r15
    2738:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    273c:	b3 94       	inc	r11
    273e:	b1 12       	cpse	r11, r17
    2740:	e8 cf       	rjmp	.-48     	; 0x2712 <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	bf 90       	pop	r11
    2754:	af 90       	pop	r10
    2756:	9f 90       	pop	r9
    2758:	8f 90       	pop	r8
    275a:	7f 90       	pop	r7
    275c:	6f 90       	pop	r6
    275e:	5f 90       	pop	r5
    2760:	4f 90       	pop	r4
    2762:	3f 90       	pop	r3
    2764:	08 95       	ret

00002766 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    2766:	2f 92       	push	r2
    2768:	3f 92       	push	r3
    276a:	4f 92       	push	r4
    276c:	5f 92       	push	r5
    276e:	6f 92       	push	r6
    2770:	7f 92       	push	r7
    2772:	8f 92       	push	r8
    2774:	9f 92       	push	r9
    2776:	af 92       	push	r10
    2778:	bf 92       	push	r11
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	2c 97       	sbiw	r28, 0x0c	; 12
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	5c 01       	movw	r10, r24
    279c:	66 2e       	mov	r6, r22
    279e:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    27a0:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__GLCD+0x1>
    27a4:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    27a6:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__GLCD+0x2>
    27aa:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    27ac:	82 2f       	mov	r24, r18
    27ae:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    27b0:	1a f4       	brpl	.+6      	; 0x27b8 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    27b2:	80 e8       	ldi	r24, 0x80	; 128
    27b4:	68 2e       	mov	r6, r24
    27b6:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    27b8:	84 2f       	mov	r24, r20
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	07 96       	adiw	r24, 0x07	; 7
    27be:	95 95       	asr	r25
    27c0:	87 95       	ror	r24
    27c2:	95 95       	asr	r25
    27c4:	87 95       	ror	r24
    27c6:	95 95       	asr	r25
    27c8:	87 95       	ror	r24
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	96 95       	lsr	r25
    27d2:	96 95       	lsr	r25
    27d4:	96 95       	lsr	r25
    27d6:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    27d8:	89 30       	cpi	r24, 0x09	; 9
    27da:	48 f0       	brcs	.+18     	; 0x27ee <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    27dc:	2d 81       	ldd	r18, Y+5	; 0x05
    27de:	3e 81       	ldd	r19, Y+6	; 0x06
    27e0:	28 5f       	subi	r18, 0xF8	; 248
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	a9 01       	movw	r20, r18
    27e6:	48 1b       	sub	r20, r24
    27e8:	51 09       	sbc	r21, r1
    27ea:	5e 83       	std	Y+6, r21	; 0x06
    27ec:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    27ee:	4a 84       	ldd	r4, Y+10	; 0x0a
    27f0:	57 e0       	ldi	r21, 0x07	; 7
    27f2:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	89 2b       	or	r24, r25
    27fa:	09 f4       	brne	.+2      	; 0x27fe <GLCD_DrawBitmap+0x98>
    27fc:	fa c0       	rjmp	.+500    	; 0x29f2 <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    27fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2800:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    2802:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    2804:	26 2c       	mov	r2, r6
    2806:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2808:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    280a:	88 e0       	ldi	r24, 0x08	; 8
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	fc 01       	movw	r30, r24
    2810:	e4 19       	sub	r30, r4
    2812:	f1 09       	sbc	r31, r1
    2814:	fb 83       	std	Y+3, r31	; 0x03
    2816:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2818:	0f 2e       	mov	r0, r31
    281a:	fb e2       	ldi	r31, 0x2B	; 43
    281c:	cf 2e       	mov	r12, r31
    281e:	f1 e0       	ldi	r31, 0x01	; 1
    2820:	df 2e       	mov	r13, r31
    2822:	f0 2d       	mov	r31, r0
    2824:	0a e2       	ldi	r16, 0x2A	; 42
    2826:	11 e0       	ldi	r17, 0x01	; 1
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2828:	6c 81       	ldd	r22, Y+4	; 0x04
    282a:	8f 81       	ldd	r24, Y+7	; 0x07
    282c:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    2830:	39 86       	std	Y+9, r3	; 0x09
    2832:	28 86       	std	Y+8, r2	; 0x08
    2834:	72 9c       	mul	r7, r2
    2836:	c0 01       	movw	r24, r0
    2838:	73 9c       	mul	r7, r3
    283a:	90 0d       	add	r25, r0
    283c:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    283e:	7c 01       	movw	r14, r24
    2840:	e2 18       	sub	r14, r2
    2842:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2844:	66 20       	and	r6, r6
    2846:	09 f4       	brne	.+2      	; 0x284a <GLCD_DrawBitmap+0xe4>
    2848:	3c c0       	rjmp	.+120    	; 0x28c2 <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    284a:	9c 01       	movw	r18, r24
    284c:	2a 0d       	add	r18, r10
    284e:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2850:	85 2c       	mov	r8, r5
    2852:	3c 87       	std	Y+12, r19	; 0x0c
    2854:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    2856:	eb 85       	ldd	r30, Y+11	; 0x0b
    2858:	fc 85       	ldd	r31, Y+12	; 0x0c
    285a:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    285c:	04 2c       	mov	r0, r4
    285e:	01 c0       	rjmp	.+2      	; 0x2862 <GLCD_DrawBitmap+0xfc>
    2860:	99 0c       	add	r9, r9
    2862:	0a 94       	dec	r0
    2864:	ea f7       	brpl	.-6      	; 0x2860 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    2866:	77 20       	and	r7, r7
    2868:	79 f0       	breq	.+30     	; 0x2888 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    286a:	f5 01       	movw	r30, r10
    286c:	ee 0d       	add	r30, r14
    286e:	ff 1d       	adc	r31, r15
    2870:	2f ef       	ldi	r18, 0xFF	; 255
    2872:	e2 1a       	sub	r14, r18
    2874:	f2 0a       	sbc	r15, r18
    2876:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0a 80       	ldd	r0, Y+2	; 0x02
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <GLCD_DrawBitmap+0x11c>
    287e:	95 95       	asr	r25
    2880:	87 95       	ror	r24
    2882:	0a 94       	dec	r0
    2884:	e2 f7       	brpl	.-8      	; 0x287e <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    2886:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    2888:	39 81       	ldd	r19, Y+1	; 0x01
    288a:	31 30       	cpi	r19, 0x01	; 1
    288c:	39 f4       	brne	.+14     	; 0x289c <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    288e:	f6 01       	movw	r30, r12
    2890:	60 81       	ld	r22, Z
    2892:	f8 01       	movw	r30, r16
    2894:	80 81       	ld	r24, Z
    2896:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
    289a:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    289c:	f6 01       	movw	r30, r12
    289e:	60 81       	ld	r22, Z
    28a0:	f8 01       	movw	r30, r16
    28a2:	80 81       	ld	r24, Z
    28a4:	98 2f       	mov	r25, r24
    28a6:	9f 5f       	subi	r25, 0xFF	; 255
    28a8:	90 83       	st	Z, r25
    28aa:	49 2d       	mov	r20, r9
    28ac:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    28b0:	83 94       	inc	r8
    28b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    28b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    28b6:	2f 5f       	subi	r18, 0xFF	; 255
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	3c 87       	std	Y+12, r19	; 0x0c
    28bc:	2b 87       	std	Y+11, r18	; 0x0b
    28be:	86 10       	cpse	r8, r6
    28c0:	ca cf       	rjmp	.-108    	; 0x2856 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    28c2:	e2 e3       	ldi	r30, 0x32	; 50
    28c4:	f1 e0       	ldi	r31, 0x01	; 1
    28c6:	80 81       	ld	r24, Z
    28c8:	88 23       	and	r24, r24
    28ca:	41 f0       	breq	.+16     	; 0x28dc <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    28cc:	f6 01       	movw	r30, r12
    28ce:	60 81       	ld	r22, Z
    28d0:	f8 01       	movw	r30, r16
    28d2:	80 81       	ld	r24, Z
    28d4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
    28d8:	48 2f       	mov	r20, r24
    28da:	01 c0       	rjmp	.+2      	; 0x28de <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    28dc:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    28de:	f6 01       	movw	r30, r12
    28e0:	60 81       	ld	r22, Z
    28e2:	f8 01       	movw	r30, r16
    28e4:	80 81       	ld	r24, Z
    28e6:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    28ea:	fc 81       	ldd	r31, Y+4	; 0x04
    28ec:	f8 5f       	subi	r31, 0xF8	; 248
    28ee:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    28f0:	73 94       	inc	r7
    28f2:	87 2d       	mov	r24, r7
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	2d 81       	ldd	r18, Y+5	; 0x05
    28f8:	3e 81       	ldd	r19, Y+6	; 0x06
    28fa:	82 17       	cp	r24, r18
    28fc:	93 07       	cpc	r25, r19
    28fe:	08 f4       	brcc	.+2      	; 0x2902 <GLCD_DrawBitmap+0x19c>
    2900:	93 cf       	rjmp	.-218    	; 0x2828 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    2902:	22 30       	cpi	r18, 0x02	; 2
    2904:	31 05       	cpc	r19, r1
    2906:	08 f4       	brcc	.+2      	; 0x290a <GLCD_DrawBitmap+0x1a4>
    2908:	74 c0       	rjmp	.+232    	; 0x29f2 <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    290a:	6f 2f       	mov	r22, r31
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    2912:	27 2d       	mov	r18, r7
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	21 50       	subi	r18, 0x01	; 1
    2918:	31 09       	sbc	r19, r1
    291a:	48 85       	ldd	r20, Y+8	; 0x08
    291c:	59 85       	ldd	r21, Y+9	; 0x09
    291e:	24 9f       	mul	r18, r20
    2920:	c0 01       	movw	r24, r0
    2922:	25 9f       	mul	r18, r21
    2924:	90 0d       	add	r25, r0
    2926:	34 9f       	mul	r19, r20
    2928:	90 0d       	add	r25, r0
    292a:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    292c:	66 20       	and	r6, r6
    292e:	09 f4       	brne	.+2      	; 0x2932 <GLCD_DrawBitmap+0x1cc>
    2930:	3e c0       	rjmp	.+124    	; 0x29ae <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    2932:	45 01       	movw	r8, r10
    2934:	88 0e       	add	r8, r24
    2936:	99 1e       	adc	r9, r25
    2938:	65 01       	movw	r12, r10
    293a:	5f ef       	ldi	r21, 0xFF	; 255
    293c:	c5 1a       	sub	r12, r21
    293e:	d5 0a       	sbc	r13, r21
    2940:	6a 94       	dec	r6
    2942:	c6 0c       	add	r12, r6
    2944:	d1 1c       	adc	r13, r1
    2946:	c8 0e       	add	r12, r24
    2948:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    294a:	0f 2e       	mov	r0, r31
    294c:	fb e2       	ldi	r31, 0x2B	; 43
    294e:	ef 2e       	mov	r14, r31
    2950:	f1 e0       	ldi	r31, 0x01	; 1
    2952:	ff 2e       	mov	r15, r31
    2954:	f0 2d       	mov	r31, r0
    2956:	0a e2       	ldi	r16, 0x2A	; 42
    2958:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    295a:	88 e0       	ldi	r24, 0x08	; 8
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	5c 01       	movw	r10, r24
    2960:	a4 18       	sub	r10, r4
    2962:	b1 08       	sbc	r11, r1
    2964:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2966:	f7 01       	movw	r30, r14
    2968:	80 80       	ld	r8, Z
    296a:	f8 01       	movw	r30, r16
    296c:	90 80       	ld	r9, Z
    296e:	68 2d       	mov	r22, r8
    2970:	89 2d       	mov	r24, r9
    2972:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    2976:	f3 01       	movw	r30, r6
    2978:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	0a 2c       	mov	r0, r10
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <GLCD_DrawBitmap+0x21e>
    2980:	55 95       	asr	r21
    2982:	47 95       	ror	r20
    2984:	0a 94       	dec	r0
    2986:	e2 f7       	brpl	.-8      	; 0x2980 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    2988:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    298a:	f9 81       	ldd	r31, Y+1	; 0x01
    298c:	f1 30       	cpi	r31, 0x01	; 1
    298e:	09 f4       	brne	.+2      	; 0x2992 <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2990:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2992:	89 2d       	mov	r24, r9
    2994:	8f 5f       	subi	r24, 0xFF	; 255
    2996:	f8 01       	movw	r30, r16
    2998:	80 83       	st	Z, r24
    299a:	68 2d       	mov	r22, r8
    299c:	89 2d       	mov	r24, r9
    299e:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
    29a2:	ff ef       	ldi	r31, 0xFF	; 255
    29a4:	6f 1a       	sub	r6, r31
    29a6:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    29a8:	6c 14       	cp	r6, r12
    29aa:	7d 04       	cpc	r7, r13
    29ac:	e1 f6       	brne	.-72     	; 0x2966 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    29ae:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__GLCD+0x9>
    29b2:	88 23       	and	r24, r24
    29b4:	99 f0       	breq	.+38     	; 0x29dc <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	41 f4       	brne	.+16     	; 0x29ca <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    29ba:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    29be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    29c2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
    29c6:	48 2f       	mov	r20, r24
    29c8:	0a c0       	rjmp	.+20     	; 0x29de <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    29ca:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    29ce:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    29d2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
    29d6:	48 2f       	mov	r20, r24
    29d8:	40 95       	com	r20
    29da:	01 c0       	rjmp	.+2      	; 0x29de <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    29dc:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    29de:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    29e2:	ea e2       	ldi	r30, 0x2A	; 42
    29e4:	f1 e0       	ldi	r31, 0x01	; 1
    29e6:	80 81       	ld	r24, Z
    29e8:	98 2f       	mov	r25, r24
    29ea:	9f 5f       	subi	r25, 0xFF	; 255
    29ec:	90 83       	st	Z, r25
    29ee:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    29f2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <GLCD_GetX>
    29f6:	6a 85       	ldd	r22, Y+10	; 0x0a
    29f8:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
}
    29fc:	2c 96       	adiw	r28, 0x0c	; 12
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	9f 90       	pop	r9
    2a1e:	8f 90       	pop	r8
    2a20:	7f 90       	pop	r7
    2a22:	6f 90       	pop	r6
    2a24:	5f 90       	pop	r5
    2a26:	4f 90       	pop	r4
    2a28:	3f 90       	pop	r3
    2a2a:	2f 90       	pop	r2
    2a2c:	08 95       	ret

00002a2e <GLCD_DrawLine>:

void GLCD_DrawLine(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2, enum Color_t Color)
{
    2a2e:	bf 92       	push	r11
    2a30:	cf 92       	push	r12
    2a32:	df 92       	push	r13
    2a34:	ef 92       	push	r14
    2a36:	ff 92       	push	r15
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	c8 2f       	mov	r28, r24
    2a42:	f6 2e       	mov	r15, r22
    2a44:	14 2f       	mov	r17, r20
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2a46:	88 23       	and	r24, r24
    2a48:	0c f4       	brge	.+2      	; 0x2a4c <GLCD_DrawLine+0x1e>
    2a4a:	7c c0       	rjmp	.+248    	; 0x2b44 <GLCD_DrawLine+0x116>
    2a4c:	44 23       	and	r20, r20
    2a4e:	0c f4       	brge	.+2      	; 0x2a52 <GLCD_DrawLine+0x24>
    2a50:	79 c0       	rjmp	.+242    	; 0x2b44 <GLCD_DrawLine+0x116>
    2a52:	8f e3       	ldi	r24, 0x3F	; 63
    2a54:	86 17       	cp	r24, r22
    2a56:	08 f4       	brcc	.+2      	; 0x2a5a <GLCD_DrawLine+0x2c>
    2a58:	75 c0       	rjmp	.+234    	; 0x2b44 <GLCD_DrawLine+0x116>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    2a5a:	20 34       	cpi	r18, 0x40	; 64
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <GLCD_DrawLine+0x32>
    2a5e:	72 c0       	rjmp	.+228    	; 0x2b44 <GLCD_DrawLine+0x116>
	{
		if (X1 == X2)
    2a60:	c4 13       	cpse	r28, r20
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <GLCD_DrawLine+0x4a>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    2a64:	26 17       	cp	r18, r22
    2a66:	10 f4       	brcc	.+4      	; 0x2a6c <GLCD_DrawLine+0x3e>
		__GLCD_Swap(Y1, Y2);
    2a68:	f2 2e       	mov	r15, r18
    2a6a:	26 2f       	mov	r18, r22

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2a6c:	4c 2f       	mov	r20, r28
    2a6e:	6f 2d       	mov	r22, r15
    2a70:	8c 2f       	mov	r24, r28
    2a72:	0e 94 c6 12 	call	0x258c	; 0x258c <GLCD_SetPixels>
    2a76:	66 c0       	rjmp	.+204    	; 0x2b44 <GLCD_DrawLine+0x116>
	{
		if (X1 == X2)
		{
			GLCD_DrawVLine(Y1, Y2, X1, Color);
		}
		else if (Y1 == Y2)
    2a78:	62 13       	cpse	r22, r18
    2a7a:	0c c0       	rjmp	.+24     	; 0x2a94 <GLCD_DrawLine+0x66>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2a7c:	4c 17       	cp	r20, r28
    2a7e:	08 f4       	brcc	.+2      	; 0x2a82 <GLCD_DrawLine+0x54>
    2a80:	5d c0       	rjmp	.+186    	; 0x2b3c <GLCD_DrawLine+0x10e>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2a82:	40 2f       	mov	r20, r16
    2a84:	6f 2d       	mov	r22, r15
    2a86:	8c 2f       	mov	r24, r28
    2a88:	0e 94 76 12 	call	0x24ec	; 0x24ec <GLCD_SetPixel>
		X1++;
    2a8c:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2a8e:	1c 17       	cp	r17, r28
    2a90:	c0 f7       	brcc	.-16     	; 0x2a82 <GLCD_DrawLine+0x54>
    2a92:	58 c0       	rjmp	.+176    	; 0x2b44 <GLCD_DrawLine+0x116>
		}
		else
		{
			uint8_t deltax, deltay, x, y, slope;
			int8_t error, ystep;
			slope = ((__GLCD_AbsDiff(Y1, Y2) > __GLCD_AbsDiff(X1,X2)) ? 1 : 0);
    2a94:	26 17       	cp	r18, r22
    2a96:	28 f4       	brcc	.+10     	; 0x2aa2 <GLCD_DrawLine+0x74>
    2a98:	a6 2f       	mov	r26, r22
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	a2 1b       	sub	r26, r18
    2a9e:	b1 09       	sbc	r27, r1
    2aa0:	04 c0       	rjmp	.+8      	; 0x2aaa <GLCD_DrawLine+0x7c>
    2aa2:	a2 2f       	mov	r26, r18
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	a6 1b       	sub	r26, r22
    2aa8:	b1 09       	sbc	r27, r1
    2aaa:	1c 17       	cp	r17, r28
    2aac:	28 f4       	brcc	.+10     	; 0x2ab8 <GLCD_DrawLine+0x8a>
    2aae:	ec 2f       	mov	r30, r28
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	e1 1b       	sub	r30, r17
    2ab4:	f1 09       	sbc	r31, r1
    2ab6:	04 c0       	rjmp	.+8      	; 0x2ac0 <GLCD_DrawLine+0x92>
    2ab8:	e1 2f       	mov	r30, r17
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	ec 1b       	sub	r30, r28
    2abe:	f1 09       	sbc	r31, r1
    2ac0:	ee 24       	eor	r14, r14
    2ac2:	e3 94       	inc	r14
    2ac4:	ea 17       	cp	r30, r26
    2ac6:	fb 07       	cpc	r31, r27
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <GLCD_DrawLine+0x9e>
    2aca:	e1 2c       	mov	r14, r1
			if (slope)
    2acc:	ee 20       	and	r14, r14
    2ace:	31 f0       	breq	.+12     	; 0x2adc <GLCD_DrawLine+0xae>
    2ad0:	81 2f       	mov	r24, r17
			{
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
    2ad2:	12 2f       	mov	r17, r18
    2ad4:	28 2f       	mov	r18, r24
		else
		{
			uint8_t deltax, deltay, x, y, slope;
			int8_t error, ystep;
			slope = ((__GLCD_AbsDiff(Y1, Y2) > __GLCD_AbsDiff(X1,X2)) ? 1 : 0);
			if (slope)
    2ad6:	8c 2f       	mov	r24, r28
			{
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
    2ad8:	cf 2d       	mov	r28, r15
    2ada:	f8 2e       	mov	r15, r24
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
			}
			if (X1 > X2)
    2adc:	1c 17       	cp	r17, r28
    2ade:	30 f4       	brcc	.+12     	; 0x2aec <GLCD_DrawLine+0xbe>
    2ae0:	8f 2d       	mov	r24, r15
			{
				//Swap x1, x2
				__GLCD_Swap(X1, X2);
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
    2ae2:	f2 2e       	mov	r15, r18
    2ae4:	28 2f       	mov	r18, r24
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
			}
			if (X1 > X2)
    2ae6:	8c 2f       	mov	r24, r28
			{
				//Swap x1, x2
				__GLCD_Swap(X1, X2);
    2ae8:	c1 2f       	mov	r28, r17
    2aea:	18 2f       	mov	r17, r24
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
			}
			
			deltax = X2 - X1;
    2aec:	c1 2e       	mov	r12, r17
    2aee:	cc 1a       	sub	r12, r28
			deltay = __GLCD_AbsDiff(Y2, Y1);
    2af0:	f2 16       	cp	r15, r18
    2af2:	38 f4       	brcc	.+14     	; 0x2b02 <GLCD_DrawLine+0xd4>
    2af4:	d2 2e       	mov	r13, r18
    2af6:	df 18       	sub	r13, r15
			error = deltax / 2;
    2af8:	dc 2d       	mov	r29, r12
    2afa:	d6 95       	lsr	r29
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
    2afc:	bb 24       	eor	r11, r11
    2afe:	b3 94       	inc	r11
    2b00:	06 c0       	rjmp	.+12     	; 0x2b0e <GLCD_DrawLine+0xe0>
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
			}
			
			deltax = X2 - X1;
			deltay = __GLCD_AbsDiff(Y2, Y1);
    2b02:	df 2c       	mov	r13, r15
    2b04:	d2 1a       	sub	r13, r18
			error = deltax / 2;
    2b06:	dc 2d       	mov	r29, r12
    2b08:	d6 95       	lsr	r29
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
    2b0a:	bb 24       	eor	r11, r11
    2b0c:	ba 94       	dec	r11
			
			for (x = X1 ; x <= X2 ; x++)
    2b0e:	1c 17       	cp	r17, r28
    2b10:	c8 f0       	brcs	.+50     	; 0x2b44 <GLCD_DrawLine+0x116>
			{
				if (slope)
    2b12:	ee 20       	and	r14, r14
    2b14:	31 f0       	breq	.+12     	; 0x2b22 <GLCD_DrawLine+0xf4>
					GLCD_SetPixel(y, x, Color);
    2b16:	40 2f       	mov	r20, r16
    2b18:	6c 2f       	mov	r22, r28
    2b1a:	8f 2d       	mov	r24, r15
    2b1c:	0e 94 76 12 	call	0x24ec	; 0x24ec <GLCD_SetPixel>
    2b20:	05 c0       	rjmp	.+10     	; 0x2b2c <GLCD_DrawLine+0xfe>
				else
					GLCD_SetPixel(x, y, Color);
    2b22:	40 2f       	mov	r20, r16
    2b24:	6f 2d       	mov	r22, r15
    2b26:	8c 2f       	mov	r24, r28
    2b28:	0e 94 76 12 	call	0x24ec	; 0x24ec <GLCD_SetPixel>
				
				error -= deltay;
    2b2c:	dd 19       	sub	r29, r13
				if (error < 0)
    2b2e:	12 f4       	brpl	.+4      	; 0x2b34 <GLCD_DrawLine+0x106>
				{
					y = y + ystep;
    2b30:	fb 0c       	add	r15, r11
					error = error + deltax;
    2b32:	dc 0d       	add	r29, r12
			deltay = __GLCD_AbsDiff(Y2, Y1);
			error = deltax / 2;
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
			
			for (x = X1 ; x <= X2 ; x++)
    2b34:	cf 5f       	subi	r28, 0xFF	; 255
    2b36:	1c 17       	cp	r17, r28
    2b38:	60 f7       	brcc	.-40     	; 0x2b12 <GLCD_DrawLine+0xe4>
    2b3a:	04 c0       	rjmp	.+8      	; 0x2b44 <GLCD_DrawLine+0x116>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2b3c:	8c 2f       	mov	r24, r28
		__GLCD_Swap(X1, X2);
    2b3e:	c4 2f       	mov	r28, r20
    2b40:	18 2f       	mov	r17, r24
    2b42:	9f cf       	rjmp	.-194    	; 0x2a82 <GLCD_DrawLine+0x54>
					error = error + deltax;
				}
			}
		}
	}
}
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	bf 90       	pop	r11
    2b56:	08 95       	ret

00002b58 <GLCD_DrawRectangle>:

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2b58:	df 92       	push	r13
    2b5a:	ef 92       	push	r14
    2b5c:	ff 92       	push	r15
    2b5e:	0f 93       	push	r16
    2b60:	1f 93       	push	r17
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	e8 2e       	mov	r14, r24
    2b68:	16 2f       	mov	r17, r22
    2b6a:	d4 2e       	mov	r13, r20
    2b6c:	f2 2e       	mov	r15, r18
    2b6e:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2b70:	88 23       	and	r24, r24
    2b72:	0c f4       	brge	.+2      	; 0x2b76 <GLCD_DrawRectangle+0x1e>
    2b74:	49 c0       	rjmp	.+146    	; 0x2c08 <GLCD_DrawRectangle+0xb0>
    2b76:	44 23       	and	r20, r20
    2b78:	0c f4       	brge	.+2      	; 0x2b7c <GLCD_DrawRectangle+0x24>
    2b7a:	46 c0       	rjmp	.+140    	; 0x2c08 <GLCD_DrawRectangle+0xb0>
    2b7c:	60 34       	cpi	r22, 0x40	; 64
    2b7e:	08 f0       	brcs	.+2      	; 0x2b82 <GLCD_DrawRectangle+0x2a>
    2b80:	43 c0       	rjmp	.+134    	; 0x2c08 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    2b82:	8f e3       	ldi	r24, 0x3F	; 63
    2b84:	82 17       	cp	r24, r18
    2b86:	08 f4       	brcc	.+2      	; 0x2b8a <GLCD_DrawRectangle+0x32>
    2b88:	3f c0       	rjmp	.+126    	; 0x2c08 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2b8a:	4e 15       	cp	r20, r14
    2b8c:	00 f1       	brcs	.+64     	; 0x2bce <GLCD_DrawRectangle+0x76>
    2b8e:	1c c0       	rjmp	.+56     	; 0x2bc8 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2b90:	4d 2f       	mov	r20, r29
    2b92:	61 2f       	mov	r22, r17
    2b94:	8c 2f       	mov	r24, r28
    2b96:	0e 94 76 12 	call	0x24ec	; 0x24ec <GLCD_SetPixel>
		X1++;
    2b9a:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2b9c:	0c 17       	cp	r16, r28
    2b9e:	c0 f7       	brcc	.-16     	; 0x2b90 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2ba0:	de 14       	cp	r13, r14
    2ba2:	d8 f0       	brcs	.+54     	; 0x2bda <GLCD_DrawRectangle+0x82>
    2ba4:	17 c0       	rjmp	.+46     	; 0x2bd4 <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2ba6:	4d 2f       	mov	r20, r29
    2ba8:	6f 2d       	mov	r22, r15
    2baa:	8c 2f       	mov	r24, r28
    2bac:	0e 94 76 12 	call	0x24ec	; 0x24ec <GLCD_SetPixel>
		X1++;
    2bb0:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2bb2:	0c 17       	cp	r16, r28
    2bb4:	c0 f7       	brcc	.-16     	; 0x2ba6 <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    2bb6:	f1 16       	cp	r15, r17
    2bb8:	98 f0       	brcs	.+38     	; 0x2be0 <GLCD_DrawRectangle+0x88>
    2bba:	1c c0       	rjmp	.+56     	; 0x2bf4 <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2bbc:	0d 2f       	mov	r16, r29
    2bbe:	4d 2d       	mov	r20, r13
    2bc0:	8d 2d       	mov	r24, r13
    2bc2:	0e 94 c6 12 	call	0x258c	; 0x258c <GLCD_SetPixels>
    2bc6:	20 c0       	rjmp	.+64     	; 0x2c08 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2bc8:	04 2f       	mov	r16, r20
    2bca:	ce 2d       	mov	r28, r14
    2bcc:	e1 cf       	rjmp	.-62     	; 0x2b90 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    2bce:	0e 2d       	mov	r16, r14
    2bd0:	c4 2f       	mov	r28, r20
    2bd2:	de cf       	rjmp	.-68     	; 0x2b90 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2bd4:	0d 2d       	mov	r16, r13
    2bd6:	ce 2d       	mov	r28, r14
    2bd8:	e6 cf       	rjmp	.-52     	; 0x2ba6 <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    2bda:	0e 2d       	mov	r16, r14
    2bdc:	cd 2d       	mov	r28, r13
    2bde:	e3 cf       	rjmp	.-58     	; 0x2ba6 <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2be0:	0d 2f       	mov	r16, r29
    2be2:	21 2f       	mov	r18, r17
    2be4:	4e 2d       	mov	r20, r14
    2be6:	6f 2d       	mov	r22, r15
    2be8:	8e 2d       	mov	r24, r14
    2bea:	0e 94 c6 12 	call	0x258c	; 0x258c <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    2bee:	21 2f       	mov	r18, r17
    2bf0:	6f 2d       	mov	r22, r15
    2bf2:	e4 cf       	rjmp	.-56     	; 0x2bbc <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2bf4:	0d 2f       	mov	r16, r29
    2bf6:	2f 2d       	mov	r18, r15
    2bf8:	4e 2d       	mov	r20, r14
    2bfa:	61 2f       	mov	r22, r17
    2bfc:	8e 2d       	mov	r24, r14
    2bfe:	0e 94 c6 12 	call	0x258c	; 0x258c <GLCD_SetPixels>
    2c02:	2f 2d       	mov	r18, r15
    2c04:	61 2f       	mov	r22, r17
    2c06:	da cf       	rjmp	.-76     	; 0x2bbc <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	1f 91       	pop	r17
    2c0e:	0f 91       	pop	r16
    2c10:	ff 90       	pop	r15
    2c12:	ef 90       	pop	r14
    2c14:	df 90       	pop	r13
    2c16:	08 95       	ret

00002c18 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    2c22:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2c24:	00 e0       	ldi	r16, 0x00	; 0
    2c26:	0b c0       	rjmp	.+22     	; 0x2c3e <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    2c28:	41 2f       	mov	r20, r17
    2c2a:	6d 2f       	mov	r22, r29
    2c2c:	8c 2f       	mov	r24, r28
    2c2e:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    2c32:	cf 5f       	subi	r28, 0xFF	; 255
    2c34:	c0 38       	cpi	r28, 0x80	; 128
    2c36:	c1 f7       	brne	.-16     	; 0x2c28 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    2c38:	d8 5f       	subi	r29, 0xF8	; 248
    2c3a:	d0 34       	cpi	r29, 0x40	; 64
    2c3c:	11 f0       	breq	.+4      	; 0x2c42 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2c3e:	c0 2f       	mov	r28, r16
    2c40:	f3 cf       	rjmp	.-26     	; 0x2c28 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	08 95       	ret

00002c4c <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <GLCD_FillScreen>
    2c52:	08 95       	ret

00002c54 <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2c54:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    2c56:	0e 94 c6 12 	call	0x258c	; 0x258c <GLCD_SetPixels>
}
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret

00002c5e <GLCD_SetFont>:
	}
}

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    2c5e:	66 23       	and	r22, r22
    2c60:	f4 f0       	brlt	.+60     	; 0x2c9e <GLCD_SetFont+0x40>
    2c62:	40 34       	cpi	r20, 0x40	; 64
    2c64:	e0 f4       	brcc	.+56     	; 0x2c9e <GLCD_SetFont+0x40>
    2c66:	22 30       	cpi	r18, 0x02	; 2
    2c68:	d0 f4       	brcc	.+52     	; 0x2c9e <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    2c6a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__GLCD+0x5>
    2c6e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    2c72:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    2c76:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	41 50       	subi	r20, 0x01	; 1
    2c7e:	51 09       	sbc	r21, r1
    2c80:	ca 01       	movw	r24, r20
    2c82:	99 23       	and	r25, r25
    2c84:	0c f4       	brge	.+2      	; 0x2c88 <GLCD_SetFont+0x2a>
    2c86:	07 96       	adiw	r24, 0x07	; 7
    2c88:	95 95       	asr	r25
    2c8a:	87 95       	ror	r24
    2c8c:	95 95       	asr	r25
    2c8e:	87 95       	ror	r24
    2c90:	95 95       	asr	r25
    2c92:	87 95       	ror	r24
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    2c9a:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__GLCD+0x9>
    2c9e:	08 95       	ret

00002ca0 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    2ca0:	2f 92       	push	r2
    2ca2:	3f 92       	push	r3
    2ca4:	4f 92       	push	r4
    2ca6:	5f 92       	push	r5
    2ca8:	6f 92       	push	r6
    2caa:	7f 92       	push	r7
    2cac:	8f 92       	push	r8
    2cae:	9f 92       	push	r9
    2cb0:	af 92       	push	r10
    2cb2:	bf 92       	push	r11
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ef 92       	push	r14
    2cba:	ff 92       	push	r15
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	2b 97       	sbiw	r28, 0x0b	; 11
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    2cd4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__GLCD+0x1>
    2cd8:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    2cda:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__GLCD+0x2>
    2cde:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    2ce0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    2ce4:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    2ce6:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <__GLCD+0x6>
    2cea:	29 9f       	mul	r18, r25
    2cec:	90 01       	movw	r18, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	2f 5f       	subi	r18, 0xFF	; 255
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	82 9f       	mul	r24, r18
    2cf6:	a0 01       	movw	r20, r0
    2cf8:	83 9f       	mul	r24, r19
    2cfa:	50 0d       	add	r21, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	59 87       	std	Y+9, r21	; 0x09
    2d00:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    2d02:	4f 5f       	subi	r20, 0xFF	; 255
    2d04:	5f 4f       	sbci	r21, 0xFF	; 255
    2d06:	5e 83       	std	Y+6, r21	; 0x06
    2d08:	4d 83       	std	Y+5, r20	; 0x05
    2d0a:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__GLCD+0x4>
    2d0e:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__GLCD+0x5>
    2d12:	a8 85       	ldd	r26, Y+8	; 0x08
    2d14:	b9 85       	ldd	r27, Y+9	; 0x09
    2d16:	ea 0f       	add	r30, r26
    2d18:	fb 1f       	adc	r31, r27
    2d1a:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    2d1c:	7f 80       	ldd	r7, Y+7	; 0x07
    2d1e:	b7 e0       	ldi	r27, 0x07	; 7
    2d20:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2d22:	99 23       	and	r25, r25
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <GLCD_PrintChar+0x88>
    2d26:	92 c0       	rjmp	.+292    	; 0x2e4c <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2d28:	ef 81       	ldd	r30, Y+7	; 0x07
    2d2a:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2d2c:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2d2e:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2d30:	88 e0       	ldi	r24, 0x08	; 8
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9c 01       	movw	r18, r24
    2d36:	27 19       	sub	r18, r7
    2d38:	31 09       	sbc	r19, r1
    2d3a:	3a 83       	std	Y+2, r19	; 0x02
    2d3c:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2d3e:	0f 2e       	mov	r0, r31
    2d40:	f2 e3       	ldi	r31, 0x32	; 50
    2d42:	8f 2e       	mov	r8, r31
    2d44:	f1 e0       	ldi	r31, 0x01	; 1
    2d46:	9f 2e       	mov	r9, r31
    2d48:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2d4a:	0f 2e       	mov	r0, r31
    2d4c:	fb e2       	ldi	r31, 0x2B	; 43
    2d4e:	af 2e       	mov	r10, r31
    2d50:	f1 e0       	ldi	r31, 0x01	; 1
    2d52:	bf 2e       	mov	r11, r31
    2d54:	f0 2d       	mov	r31, r0
    2d56:	0a e2       	ldi	r16, 0x2A	; 42
    2d58:	11 e0       	ldi	r17, 0x01	; 1
    2d5a:	67 2c       	mov	r6, r7
    2d5c:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2d5e:	6b 81       	ldd	r22, Y+3	; 0x03
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    2d66:	4d 81       	ldd	r20, Y+5	; 0x05
    2d68:	5e 81       	ldd	r21, Y+6	; 0x06
    2d6a:	43 0d       	add	r20, r3
    2d6c:	51 1d       	adc	r21, r1
    2d6e:	5b 87       	std	Y+11, r21	; 0x0b
    2d70:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    2d72:	7a 01       	movw	r14, r20
    2d74:	51 e0       	ldi	r21, 0x01	; 1
    2d76:	e5 1a       	sub	r14, r21
    2d78:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2d7a:	77 20       	and	r7, r7
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <GLCD_PrintChar+0xe0>
    2d7e:	4f c0       	rjmp	.+158    	; 0x2e1e <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    2d80:	0f 2e       	mov	r0, r31
    2d82:	f1 e3       	ldi	r31, 0x31	; 49
    2d84:	cf 2e       	mov	r12, r31
    2d86:	f1 e0       	ldi	r31, 0x01	; 1
    2d88:	df 2e       	mov	r13, r31
    2d8a:	f0 2d       	mov	r31, r0
    2d8c:	83 2d       	mov	r24, r3
    2d8e:	36 2c       	mov	r3, r6
    2d90:	67 2c       	mov	r6, r7
    2d92:	72 2c       	mov	r7, r2
    2d94:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    2d96:	ad e2       	ldi	r26, 0x2D	; 45
    2d98:	b1 e0       	ldi	r27, 0x01	; 1
    2d9a:	2d 91       	ld	r18, X+
    2d9c:	3c 91       	ld	r19, X
    2d9e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2da0:	fb 85       	ldd	r31, Y+11	; 0x0b
    2da2:	e2 0f       	add	r30, r18
    2da4:	f3 1f       	adc	r31, r19
    2da6:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    2da8:	4e 2e       	mov	r4, r30
    2daa:	03 2c       	mov	r0, r3
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <GLCD_PrintChar+0x110>
    2dae:	44 0c       	add	r4, r4
    2db0:	0a 94       	dec	r0
    2db2:	ea f7       	brpl	.-6      	; 0x2dae <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    2db4:	55 20       	and	r5, r5
    2db6:	81 f0       	breq	.+32     	; 0x2dd8 <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2db8:	f9 01       	movw	r30, r18
    2dba:	ee 0d       	add	r30, r14
    2dbc:	ff 1d       	adc	r31, r15
    2dbe:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	09 80       	ldd	r0, Y+1	; 0x01
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <GLCD_PrintChar+0x12a>
    2dc6:	35 95       	asr	r19
    2dc8:	27 95       	ror	r18
    2dca:	0a 94       	dec	r0
    2dcc:	e2 f7       	brpl	.-8      	; 0x2dc6 <GLCD_PrintChar+0x126>
				data |= dataPrev;
    2dce:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    2dd0:	f6 01       	movw	r30, r12
    2dd2:	80 81       	ld	r24, Z
    2dd4:	e8 0e       	add	r14, r24
    2dd6:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2dd8:	d4 01       	movw	r26, r8
    2dda:	8c 91       	ld	r24, X
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	39 f4       	brne	.+14     	; 0x2dee <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2de0:	f5 01       	movw	r30, r10
    2de2:	60 81       	ld	r22, Z
    2de4:	d8 01       	movw	r26, r16
    2de6:	8c 91       	ld	r24, X
    2de8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
    2dec:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2dee:	f5 01       	movw	r30, r10
    2df0:	60 81       	ld	r22, Z
    2df2:	d8 01       	movw	r26, r16
    2df4:	8c 91       	ld	r24, X
    2df6:	98 2f       	mov	r25, r24
    2df8:	9f 5f       	subi	r25, 0xFF	; 255
    2dfa:	9c 93       	st	X, r25
    2dfc:	44 2d       	mov	r20, r4
    2dfe:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    2e02:	f6 01       	movw	r30, r12
    2e04:	80 81       	ld	r24, Z
    2e06:	2a 85       	ldd	r18, Y+10	; 0x0a
    2e08:	3b 85       	ldd	r19, Y+11	; 0x0b
    2e0a:	28 0f       	add	r18, r24
    2e0c:	31 1d       	adc	r19, r1
    2e0e:	3b 87       	std	Y+11, r19	; 0x0b
    2e10:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2e12:	73 94       	inc	r7
    2e14:	76 10       	cpse	r7, r6
    2e16:	bf cf       	rjmp	.-130    	; 0x2d96 <GLCD_PrintChar+0xf6>
    2e18:	76 2c       	mov	r7, r6
    2e1a:	63 2c       	mov	r6, r3
    2e1c:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2e1e:	d4 01       	movw	r26, r8
    2e20:	8c 91       	ld	r24, X
    2e22:	81 11       	cpse	r24, r1
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    2e26:	42 2d       	mov	r20, r2
    2e28:	f5 01       	movw	r30, r10
    2e2a:	60 81       	ld	r22, Z
    2e2c:	d8 01       	movw	r26, r16
    2e2e:	8c 91       	ld	r24, X
    2e30:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    2e34:	bb 81       	ldd	r27, Y+3	; 0x03
    2e36:	b8 5f       	subi	r27, 0xF8	; 248
    2e38:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2e3a:	33 94       	inc	r3
    2e3c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__GLCD+0x8>
    2e40:	38 16       	cp	r3, r24
    2e42:	08 f4       	brcc	.+2      	; 0x2e46 <GLCD_PrintChar+0x1a6>
    2e44:	8c cf       	rjmp	.-232    	; 0x2d5e <GLCD_PrintChar+0xbe>
    2e46:	57 2c       	mov	r5, r7
    2e48:	76 2c       	mov	r7, r6
    2e4a:	03 c0       	rjmp	.+6      	; 0x2e52 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2e4c:	ef 81       	ldd	r30, Y+7	; 0x07
    2e4e:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2e50:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    2e52:	2f 81       	ldd	r18, Y+7	; 0x07
    2e54:	22 95       	swap	r18
    2e56:	26 95       	lsr	r18
    2e58:	26 95       	lsr	r18
    2e5a:	23 70       	andi	r18, 0x03	; 3
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__GLCD+0x7>
    2e62:	82 95       	swap	r24
    2e64:	86 95       	lsr	r24
    2e66:	86 95       	lsr	r24
    2e68:	83 70       	andi	r24, 0x03	; 3
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	ff 81       	ldd	r31, Y+7	; 0x07
    2e6e:	8f 0f       	add	r24, r31
    2e70:	91 1d       	adc	r25, r1
    2e72:	28 17       	cp	r18, r24
    2e74:	39 07       	cpc	r19, r25
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <GLCD_PrintChar+0x1da>
    2e78:	69 c0       	rjmp	.+210    	; 0x2f4c <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2e7a:	6b 81       	ldd	r22, Y+3	; 0x03
    2e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7e:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    2e82:	28 85       	ldd	r18, Y+8	; 0x08
    2e84:	39 85       	ldd	r19, Y+9	; 0x09
    2e86:	23 0d       	add	r18, r3
    2e88:	31 1d       	adc	r19, r1
    2e8a:	3a 83       	std	Y+2, r19	; 0x02
    2e8c:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2e8e:	55 20       	and	r5, r5
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <GLCD_PrintChar+0x1f4>
    2e92:	51 c0       	rjmp	.+162    	; 0x2f36 <GLCD_PrintChar+0x296>
    2e94:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2e96:	0f 2e       	mov	r0, r31
    2e98:	fb e2       	ldi	r31, 0x2B	; 43
    2e9a:	af 2e       	mov	r10, r31
    2e9c:	f1 e0       	ldi	r31, 0x01	; 1
    2e9e:	bf 2e       	mov	r11, r31
    2ea0:	f0 2d       	mov	r31, r0
    2ea2:	0a e2       	ldi	r16, 0x2A	; 42
    2ea4:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2ea6:	0f 2e       	mov	r0, r31
    2ea8:	fd e2       	ldi	r31, 0x2D	; 45
    2eaa:	cf 2e       	mov	r12, r31
    2eac:	f1 e0       	ldi	r31, 0x01	; 1
    2eae:	df 2e       	mov	r13, r31
    2eb0:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2eb2:	88 e0       	ldi	r24, 0x08	; 8
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	ac 01       	movw	r20, r24
    2eb8:	47 19       	sub	r20, r7
    2eba:	51 09       	sbc	r21, r1
    2ebc:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2ebe:	0f 2e       	mov	r0, r31
    2ec0:	f2 e3       	ldi	r31, 0x32	; 50
    2ec2:	ef 2e       	mov	r14, r31
    2ec4:	f1 e0       	ldi	r31, 0x01	; 1
    2ec6:	ff 2e       	mov	r15, r31
    2ec8:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    2eca:	0f 2e       	mov	r0, r31
    2ecc:	f1 e3       	ldi	r31, 0x31	; 49
    2ece:	8f 2e       	mov	r8, r31
    2ed0:	f1 e0       	ldi	r31, 0x01	; 1
    2ed2:	9f 2e       	mov	r9, r31
    2ed4:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2ed6:	d5 01       	movw	r26, r10
    2ed8:	2c 90       	ld	r2, X
    2eda:	f8 01       	movw	r30, r16
    2edc:	40 80       	ld	r4, Z
    2ede:	62 2d       	mov	r22, r2
    2ee0:	84 2d       	mov	r24, r4
    2ee2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2ee6:	d6 01       	movw	r26, r12
    2ee8:	ed 91       	ld	r30, X+
    2eea:	fc 91       	ld	r31, X
    2eec:	29 81       	ldd	r18, Y+1	; 0x01
    2eee:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef0:	e2 0f       	add	r30, r18
    2ef2:	f3 1f       	adc	r31, r19
    2ef4:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	06 2c       	mov	r0, r6
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <GLCD_PrintChar+0x260>
    2efc:	55 95       	asr	r21
    2efe:	47 95       	ror	r20
    2f00:	0a 94       	dec	r0
    2f02:	e2 f7       	brpl	.-8      	; 0x2efc <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    2f04:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2f06:	d7 01       	movw	r26, r14
    2f08:	9c 91       	ld	r25, X
    2f0a:	91 30       	cpi	r25, 0x01	; 1
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2f0e:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2f10:	84 2d       	mov	r24, r4
    2f12:	8f 5f       	subi	r24, 0xFF	; 255
    2f14:	f8 01       	movw	r30, r16
    2f16:	80 83       	st	Z, r24
    2f18:	62 2d       	mov	r22, r2
    2f1a:	84 2d       	mov	r24, r4
    2f1c:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    2f20:	d4 01       	movw	r26, r8
    2f22:	8c 91       	ld	r24, X
    2f24:	e9 81       	ldd	r30, Y+1	; 0x01
    2f26:	fa 81       	ldd	r31, Y+2	; 0x02
    2f28:	e8 0f       	add	r30, r24
    2f2a:	f1 1d       	adc	r31, r1
    2f2c:	fa 83       	std	Y+2, r31	; 0x02
    2f2e:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2f30:	33 94       	inc	r3
    2f32:	35 10       	cpse	r3, r5
    2f34:	d0 cf       	rjmp	.-96     	; 0x2ed6 <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2f36:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__GLCD+0x9>
    2f3a:	81 11       	cpse	r24, r1
    2f3c:	07 c0       	rjmp	.+14     	; 0x2f4c <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    2f44:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    2f48:	0e 94 43 11 	call	0x2286	; 0x2286 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	8f 5f       	subi	r24, 0xFF	; 255
    2f50:	6f 81       	ldd	r22, Y+7	; 0x07
    2f52:	85 0d       	add	r24, r5
    2f54:	0e 94 00 12 	call	0x2400	; 0x2400 <GLCD_GotoXY>
}
    2f58:	2b 96       	adiw	r28, 0x0b	; 11
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	bf 90       	pop	r11
    2f76:	af 90       	pop	r10
    2f78:	9f 90       	pop	r9
    2f7a:	8f 90       	pop	r8
    2f7c:	7f 90       	pop	r7
    2f7e:	6f 90       	pop	r6
    2f80:	5f 90       	pop	r5
    2f82:	4f 90       	pop	r4
    2f84:	3f 90       	pop	r3
    2f86:	2f 90       	pop	r2
    2f88:	08 95       	ret

00002f8a <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	ec 01       	movw	r28, r24
	while(*Text)
    2f98:	88 81       	ld	r24, Y
    2f9a:	88 23       	and	r24, r24
    2f9c:	19 f1       	breq	.+70     	; 0x2fe4 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    2f9e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__GLCD+0x1>
    2fa2:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <__GLCD+0x6>
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	29 0f       	add	r18, r25
    2faa:	31 1d       	adc	r19, r1
    2fac:	20 38       	cpi	r18, 0x80	; 128
    2fae:	31 05       	cpc	r19, r1
    2fb0:	cc f4       	brge	.+50     	; 0x2fe4 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    2fb2:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    2fb4:	0f 2e       	mov	r0, r31
    2fb6:	fa e2       	ldi	r31, 0x2A	; 42
    2fb8:	ef 2e       	mov	r14, r31
    2fba:	f1 e0       	ldi	r31, 0x01	; 1
    2fbc:	ff 2e       	mov	r15, r31
    2fbe:	f0 2d       	mov	r31, r0
    2fc0:	0f e2       	ldi	r16, 0x2F	; 47
    2fc2:	11 e0       	ldi	r17, 0x01	; 1
    2fc4:	0a c0       	rjmp	.+20     	; 0x2fda <GLCD_PrintString+0x50>
    2fc6:	f7 01       	movw	r30, r14
    2fc8:	90 81       	ld	r25, Z
    2fca:	f8 01       	movw	r30, r16
    2fcc:	20 81       	ld	r18, Z
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	29 0f       	add	r18, r25
    2fd2:	31 1d       	adc	r19, r1
    2fd4:	20 38       	cpi	r18, 0x80	; 128
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	2c f4       	brge	.+10     	; 0x2fe4 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    2fda:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    2fde:	89 91       	ld	r24, Y+
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	f1 cf       	rjmp	.-30     	; 0x2fc6 <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	ef 90       	pop	r14
    2ff0:	08 95       	ret

00002ff2 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	2c 97       	sbiw	r28, 0x0c	; 12
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    300a:	61 15       	cp	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	81 05       	cpc	r24, r1
    3010:	91 05       	cpc	r25, r1
    3012:	21 f4       	brne	.+8      	; 0x301c <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    3014:	80 e3       	ldi	r24, 0x30	; 48
    3016:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
    301a:	45 c1       	rjmp	.+650    	; 0x32a6 <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    301c:	61 15       	cp	r22, r1
    301e:	71 05       	cpc	r23, r1
    3020:	81 05       	cpc	r24, r1
    3022:	20 e8       	ldi	r18, 0x80	; 128
    3024:	92 07       	cpc	r25, r18
    3026:	09 f4       	brne	.+2      	; 0x302a <GLCD_PrintInteger+0x38>
    3028:	3e c1       	rjmp	.+636    	; 0x32a6 <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    302a:	fe 01       	movw	r30, r28
    302c:	31 96       	adiw	r30, 0x01	; 1
    302e:	2c e0       	ldi	r18, 0x0C	; 12
    3030:	df 01       	movw	r26, r30
    3032:	1d 92       	st	X+, r1
    3034:	2a 95       	dec	r18
    3036:	e9 f7       	brne	.-6      	; 0x3032 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    3038:	20 e3       	ldi	r18, 0x30	; 48
    303a:	2b 87       	std	Y+11, r18	; 0x0b
    303c:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    303e:	29 87       	std	Y+9, r18	; 0x09
    3040:	28 87       	std	Y+8, r18	; 0x08
    3042:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    3044:	2e 83       	std	Y+6, r18	; 0x06
    3046:	2d 83       	std	Y+5, r18	; 0x05
    3048:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    304a:	2b 83       	std	Y+3, r18	; 0x03
    304c:	2a 83       	std	Y+2, r18	; 0x02
    304e:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    3050:	99 23       	and	r25, r25
    3052:	5c f4       	brge	.+22     	; 0x306a <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    3054:	9b 01       	movw	r18, r22
    3056:	ac 01       	movw	r20, r24
    3058:	88 27       	eor	r24, r24
    305a:	99 27       	eor	r25, r25
    305c:	dc 01       	movw	r26, r24
    305e:	82 1b       	sub	r24, r18
    3060:	93 0b       	sbc	r25, r19
    3062:	a4 0b       	sbc	r26, r20
    3064:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	03 c0       	rjmp	.+6      	; 0x3070 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    306e:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    3070:	81 30       	cpi	r24, 0x01	; 1
    3072:	3a ec       	ldi	r19, 0xCA	; 202
    3074:	93 07       	cpc	r25, r19
    3076:	3a e9       	ldi	r19, 0x9A	; 154
    3078:	a3 07       	cpc	r26, r19
    307a:	3b e3       	ldi	r19, 0x3B	; 59
    307c:	b3 07       	cpc	r27, r19
    307e:	94 f0       	brlt	.+36     	; 0x30a4 <GLCD_PrintInteger+0xb2>
    3080:	2a 81       	ldd	r18, Y+2	; 0x02
    3082:	2f 5f       	subi	r18, 0xFF	; 255
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <GLCD_PrintInteger+0x96>
    3086:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    3088:	9a 5c       	subi	r25, 0xCA	; 202
    308a:	aa 49       	sbci	r26, 0x9A	; 154
    308c:	bb 43       	sbci	r27, 0x3B	; 59
    308e:	32 2f       	mov	r19, r18
    3090:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	5a ec       	ldi	r21, 0xCA	; 202
    3096:	95 07       	cpc	r25, r21
    3098:	5a e9       	ldi	r21, 0x9A	; 154
    309a:	a5 07       	cpc	r26, r21
    309c:	5b e3       	ldi	r21, 0x3B	; 59
    309e:	b5 07       	cpc	r27, r21
    30a0:	94 f7       	brge	.-28     	; 0x3086 <GLCD_PrintInteger+0x94>
    30a2:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    30a4:	81 15       	cp	r24, r1
    30a6:	21 ee       	ldi	r18, 0xE1	; 225
    30a8:	92 07       	cpc	r25, r18
    30aa:	25 ef       	ldi	r18, 0xF5	; 245
    30ac:	a2 07       	cpc	r26, r18
    30ae:	25 e0       	ldi	r18, 0x05	; 5
    30b0:	b2 07       	cpc	r27, r18
    30b2:	94 f0       	brlt	.+36     	; 0x30d8 <GLCD_PrintInteger+0xe6>
    30b4:	2b 81       	ldd	r18, Y+3	; 0x03
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <GLCD_PrintInteger+0xca>
    30ba:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    30bc:	91 5e       	subi	r25, 0xE1	; 225
    30be:	a5 4f       	sbci	r26, 0xF5	; 245
    30c0:	b5 40       	sbci	r27, 0x05	; 5
    30c2:	32 2f       	mov	r19, r18
    30c4:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    30c6:	81 15       	cp	r24, r1
    30c8:	51 ee       	ldi	r21, 0xE1	; 225
    30ca:	95 07       	cpc	r25, r21
    30cc:	55 ef       	ldi	r21, 0xF5	; 245
    30ce:	a5 07       	cpc	r26, r21
    30d0:	55 e0       	ldi	r21, 0x05	; 5
    30d2:	b5 07       	cpc	r27, r21
    30d4:	94 f7       	brge	.-28     	; 0x30ba <GLCD_PrintInteger+0xc8>
    30d6:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    30d8:	80 38       	cpi	r24, 0x80	; 128
    30da:	26 e9       	ldi	r18, 0x96	; 150
    30dc:	92 07       	cpc	r25, r18
    30de:	28 e9       	ldi	r18, 0x98	; 152
    30e0:	a2 07       	cpc	r26, r18
    30e2:	b1 05       	cpc	r27, r1
    30e4:	94 f0       	brlt	.+36     	; 0x310a <GLCD_PrintInteger+0x118>
    30e6:	2c 81       	ldd	r18, Y+4	; 0x04
    30e8:	2f 5f       	subi	r18, 0xFF	; 255
    30ea:	01 c0       	rjmp	.+2      	; 0x30ee <GLCD_PrintInteger+0xfc>
    30ec:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    30ee:	80 58       	subi	r24, 0x80	; 128
    30f0:	96 49       	sbci	r25, 0x96	; 150
    30f2:	a8 49       	sbci	r26, 0x98	; 152
    30f4:	b1 09       	sbc	r27, r1
    30f6:	32 2f       	mov	r19, r18
    30f8:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    30fa:	80 38       	cpi	r24, 0x80	; 128
    30fc:	56 e9       	ldi	r21, 0x96	; 150
    30fe:	95 07       	cpc	r25, r21
    3100:	58 e9       	ldi	r21, 0x98	; 152
    3102:	a5 07       	cpc	r26, r21
    3104:	b1 05       	cpc	r27, r1
    3106:	94 f7       	brge	.-28     	; 0x30ec <GLCD_PrintInteger+0xfa>
    3108:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    310a:	80 34       	cpi	r24, 0x40	; 64
    310c:	22 e4       	ldi	r18, 0x42	; 66
    310e:	92 07       	cpc	r25, r18
    3110:	2f e0       	ldi	r18, 0x0F	; 15
    3112:	a2 07       	cpc	r26, r18
    3114:	b1 05       	cpc	r27, r1
    3116:	94 f0       	brlt	.+36     	; 0x313c <GLCD_PrintInteger+0x14a>
    3118:	2d 81       	ldd	r18, Y+5	; 0x05
    311a:	2f 5f       	subi	r18, 0xFF	; 255
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <GLCD_PrintInteger+0x12e>
    311e:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    3120:	80 54       	subi	r24, 0x40	; 64
    3122:	92 44       	sbci	r25, 0x42	; 66
    3124:	af 40       	sbci	r26, 0x0F	; 15
    3126:	b1 09       	sbc	r27, r1
    3128:	32 2f       	mov	r19, r18
    312a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    312c:	80 34       	cpi	r24, 0x40	; 64
    312e:	52 e4       	ldi	r21, 0x42	; 66
    3130:	95 07       	cpc	r25, r21
    3132:	5f e0       	ldi	r21, 0x0F	; 15
    3134:	a5 07       	cpc	r26, r21
    3136:	b1 05       	cpc	r27, r1
    3138:	94 f7       	brge	.-28     	; 0x311e <GLCD_PrintInteger+0x12c>
    313a:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    313c:	80 3a       	cpi	r24, 0xA0	; 160
    313e:	26 e8       	ldi	r18, 0x86	; 134
    3140:	92 07       	cpc	r25, r18
    3142:	21 e0       	ldi	r18, 0x01	; 1
    3144:	a2 07       	cpc	r26, r18
    3146:	b1 05       	cpc	r27, r1
    3148:	94 f0       	brlt	.+36     	; 0x316e <GLCD_PrintInteger+0x17c>
    314a:	2e 81       	ldd	r18, Y+6	; 0x06
    314c:	2f 5f       	subi	r18, 0xFF	; 255
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <GLCD_PrintInteger+0x160>
    3150:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    3152:	80 5a       	subi	r24, 0xA0	; 160
    3154:	96 48       	sbci	r25, 0x86	; 134
    3156:	a1 40       	sbci	r26, 0x01	; 1
    3158:	b1 09       	sbc	r27, r1
    315a:	32 2f       	mov	r19, r18
    315c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    315e:	80 3a       	cpi	r24, 0xA0	; 160
    3160:	56 e8       	ldi	r21, 0x86	; 134
    3162:	95 07       	cpc	r25, r21
    3164:	51 e0       	ldi	r21, 0x01	; 1
    3166:	a5 07       	cpc	r26, r21
    3168:	b1 05       	cpc	r27, r1
    316a:	94 f7       	brge	.-28     	; 0x3150 <GLCD_PrintInteger+0x15e>
    316c:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    316e:	80 31       	cpi	r24, 0x10	; 16
    3170:	27 e2       	ldi	r18, 0x27	; 39
    3172:	92 07       	cpc	r25, r18
    3174:	a1 05       	cpc	r26, r1
    3176:	b1 05       	cpc	r27, r1
    3178:	8c f0       	brlt	.+34     	; 0x319c <GLCD_PrintInteger+0x1aa>
    317a:	2f 81       	ldd	r18, Y+7	; 0x07
    317c:	2f 5f       	subi	r18, 0xFF	; 255
    317e:	01 c0       	rjmp	.+2      	; 0x3182 <GLCD_PrintInteger+0x190>
    3180:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    3182:	80 51       	subi	r24, 0x10	; 16
    3184:	97 42       	sbci	r25, 0x27	; 39
    3186:	a1 09       	sbc	r26, r1
    3188:	b1 09       	sbc	r27, r1
    318a:	32 2f       	mov	r19, r18
    318c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    318e:	80 31       	cpi	r24, 0x10	; 16
    3190:	57 e2       	ldi	r21, 0x27	; 39
    3192:	95 07       	cpc	r25, r21
    3194:	a1 05       	cpc	r26, r1
    3196:	b1 05       	cpc	r27, r1
    3198:	9c f7       	brge	.-26     	; 0x3180 <GLCD_PrintInteger+0x18e>
    319a:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    319c:	88 3e       	cpi	r24, 0xE8	; 232
    319e:	23 e0       	ldi	r18, 0x03	; 3
    31a0:	92 07       	cpc	r25, r18
    31a2:	a1 05       	cpc	r26, r1
    31a4:	b1 05       	cpc	r27, r1
    31a6:	8c f0       	brlt	.+34     	; 0x31ca <GLCD_PrintInteger+0x1d8>
    31a8:	28 85       	ldd	r18, Y+8	; 0x08
    31aa:	2f 5f       	subi	r18, 0xFF	; 255
    31ac:	01 c0       	rjmp	.+2      	; 0x31b0 <GLCD_PrintInteger+0x1be>
    31ae:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    31b0:	88 5e       	subi	r24, 0xE8	; 232
    31b2:	93 40       	sbci	r25, 0x03	; 3
    31b4:	a1 09       	sbc	r26, r1
    31b6:	b1 09       	sbc	r27, r1
    31b8:	32 2f       	mov	r19, r18
    31ba:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    31bc:	88 3e       	cpi	r24, 0xE8	; 232
    31be:	53 e0       	ldi	r21, 0x03	; 3
    31c0:	95 07       	cpc	r25, r21
    31c2:	a1 05       	cpc	r26, r1
    31c4:	b1 05       	cpc	r27, r1
    31c6:	9c f7       	brge	.-26     	; 0x31ae <GLCD_PrintInteger+0x1bc>
    31c8:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    31ca:	84 36       	cpi	r24, 0x64	; 100
    31cc:	91 05       	cpc	r25, r1
    31ce:	a1 05       	cpc	r26, r1
    31d0:	b1 05       	cpc	r27, r1
    31d2:	84 f0       	brlt	.+32     	; 0x31f4 <GLCD_PrintInteger+0x202>
    31d4:	29 85       	ldd	r18, Y+9	; 0x09
    31d6:	2f 5f       	subi	r18, 0xFF	; 255
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <GLCD_PrintInteger+0x1ea>
    31da:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    31dc:	84 56       	subi	r24, 0x64	; 100
    31de:	91 09       	sbc	r25, r1
    31e0:	a1 09       	sbc	r26, r1
    31e2:	b1 09       	sbc	r27, r1
    31e4:	32 2f       	mov	r19, r18
    31e6:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    31e8:	84 36       	cpi	r24, 0x64	; 100
    31ea:	91 05       	cpc	r25, r1
    31ec:	a1 05       	cpc	r26, r1
    31ee:	b1 05       	cpc	r27, r1
    31f0:	a4 f7       	brge	.-24     	; 0x31da <GLCD_PrintInteger+0x1e8>
    31f2:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    31f4:	8a 30       	cpi	r24, 0x0A	; 10
    31f6:	91 05       	cpc	r25, r1
    31f8:	a1 05       	cpc	r26, r1
    31fa:	b1 05       	cpc	r27, r1
    31fc:	7c f0       	brlt	.+30     	; 0x321c <GLCD_PrintInteger+0x22a>
    31fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3200:	2f 5f       	subi	r18, 0xFF	; 255
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <GLCD_PrintInteger+0x214>
    3204:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    3206:	0a 97       	sbiw	r24, 0x0a	; 10
    3208:	a1 09       	sbc	r26, r1
    320a:	b1 09       	sbc	r27, r1
    320c:	32 2f       	mov	r19, r18
    320e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    3210:	8a 30       	cpi	r24, 0x0A	; 10
    3212:	91 05       	cpc	r25, r1
    3214:	a1 05       	cpc	r26, r1
    3216:	b1 05       	cpc	r27, r1
    3218:	ac f7       	brge	.-22     	; 0x3204 <GLCD_PrintInteger+0x212>
    321a:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    321c:	18 16       	cp	r1, r24
    321e:	19 06       	cpc	r1, r25
    3220:	1a 06       	cpc	r1, r26
    3222:	1b 06       	cpc	r1, r27
    3224:	5c f4       	brge	.+22     	; 0x323c <GLCD_PrintInteger+0x24a>
    3226:	5b 85       	ldd	r21, Y+11	; 0x0b
    3228:	8c 01       	movw	r16, r24
    322a:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    322c:	01 50       	subi	r16, 0x01	; 1
    322e:	11 09       	sbc	r17, r1
    3230:	21 09       	sbc	r18, r1
    3232:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    3234:	d9 f7       	brne	.-10     	; 0x322c <GLCD_PrintInteger+0x23a>
    3236:	65 2f       	mov	r22, r21
    3238:	68 0f       	add	r22, r24
    323a:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	80 33       	cpi	r24, 0x30	; 48
    3240:	61 f4       	brne	.+24     	; 0x325a <GLCD_PrintInteger+0x268>
    3242:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    3244:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    3246:	e1 e0       	ldi	r30, 0x01	; 1
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	ec 0f       	add	r30, r28
    324c:	fd 1f       	adc	r31, r29
    324e:	e8 0f       	add	r30, r24
    3250:	f1 1d       	adc	r31, r1
    3252:	90 81       	ld	r25, Z
    3254:	90 33       	cpi	r25, 0x30	; 48
    3256:	b1 f3       	breq	.-20     	; 0x3244 <GLCD_PrintInteger+0x252>
    3258:	01 c0       	rjmp	.+2      	; 0x325c <GLCD_PrintInteger+0x26a>
    325a:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    325c:	44 23       	and	r20, r20
    325e:	31 f0       	breq	.+12     	; 0x326c <GLCD_PrintInteger+0x27a>
	{
		i--;
    3260:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    3262:	fe 01       	movw	r30, r28
    3264:	e8 0f       	add	r30, r24
    3266:	f1 1d       	adc	r31, r1
    3268:	9d e2       	ldi	r25, 0x2D	; 45
    326a:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    326c:	4a e0       	ldi	r20, 0x0A	; 10
    326e:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    3270:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	e1 e0       	ldi	r30, 0x01	; 1
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	ec 0f       	add	r30, r28
    327a:	fd 1f       	adc	r31, r29
    327c:	e2 0f       	add	r30, r18
    327e:	f1 1d       	adc	r31, r1
    3280:	df 01       	movw	r26, r30
    3282:	a8 0f       	add	r26, r24
    3284:	b9 1f       	adc	r27, r25
    3286:	3c 91       	ld	r19, X
    3288:	30 83       	st	Z, r19
		i++;
    328a:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    328c:	42 17       	cp	r20, r18
    328e:	90 f7       	brcc	.-28     	; 0x3274 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    3290:	e1 e0       	ldi	r30, 0x01	; 1
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	ec 0f       	add	r30, r28
    3296:	fd 1f       	adc	r31, r29
    3298:	e2 0f       	add	r30, r18
    329a:	f1 1d       	adc	r31, r1
    329c:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    329e:	ce 01       	movw	r24, r28
    32a0:	01 96       	adiw	r24, 0x01	; 1
    32a2:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintString>
	}
}
    32a6:	2c 96       	adiw	r28, 0x0c	; 12
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	1f 91       	pop	r17
    32b8:	0f 91       	pop	r16
    32ba:	08 95       	ret

000032bc <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    32bc:	8f 92       	push	r8
    32be:	9f 92       	push	r9
    32c0:	af 92       	push	r10
    32c2:	bf 92       	push	r11
    32c4:	cf 92       	push	r12
    32c6:	df 92       	push	r13
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	6b 01       	movw	r12, r22
    32ce:	7c 01       	movw	r14, r24
    32d0:	49 01       	movw	r8, r18
    32d2:	5a 01       	movw	r10, r20
	if (Value == 0)
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	a9 01       	movw	r20, r18
    32da:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    32de:	81 11       	cpse	r24, r1
    32e0:	0a c0       	rjmp	.+20     	; 0x32f6 <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    32e2:	80 e3       	ldi	r24, 0x30	; 48
    32e4:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    32e8:	8e e2       	ldi	r24, 0x2E	; 46
    32ea:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    32ee:	80 e3       	ldi	r24, 0x30	; 48
    32f0:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
    32f4:	4a c0       	rjmp	.+148    	; 0x338a <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e0       	ldi	r20, 0x00	; 0
    32fc:	5f ec       	ldi	r21, 0xCF	; 207
    32fe:	c7 01       	movw	r24, r14
    3300:	b6 01       	movw	r22, r12
    3302:	0e 94 be 1b 	call	0x377c	; 0x377c <__gesf2>
    3306:	88 23       	and	r24, r24
    3308:	0c f4       	brge	.+2      	; 0x330c <GLCD_PrintDouble+0x50>
    330a:	3f c0       	rjmp	.+126    	; 0x338a <GLCD_PrintDouble+0xce>
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	5f e4       	ldi	r21, 0x4F	; 79
    3314:	c7 01       	movw	r24, r14
    3316:	b6 01       	movw	r22, r12
    3318:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    331c:	88 23       	and	r24, r24
    331e:	ac f5       	brge	.+106    	; 0x338a <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	a9 01       	movw	r20, r18
    3326:	c7 01       	movw	r24, r14
    3328:	b6 01       	movw	r22, r12
    332a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    332e:	88 23       	and	r24, r24
    3330:	3c f4       	brge	.+14     	; 0x3340 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    3332:	f7 fa       	bst	r15, 7
    3334:	f0 94       	com	r15
    3336:	f7 f8       	bld	r15, 7
    3338:	f0 94       	com	r15
			GLCD_PrintChar('-');
    333a:	8d e2       	ldi	r24, 0x2D	; 45
    333c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    3340:	c7 01       	movw	r24, r14
    3342:	b6 01       	movw	r22, r12
    3344:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
    3348:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    334c:	8e e2       	ldi	r24, 0x2E	; 46
    334e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    3352:	c7 01       	movw	r24, r14
    3354:	b6 01       	movw	r22, r12
    3356:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fixunssfsi>
    335a:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    335e:	9b 01       	movw	r18, r22
    3360:	ac 01       	movw	r20, r24
    3362:	c7 01       	movw	r24, r14
    3364:	b6 01       	movw	r22, r12
    3366:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    336a:	6b 01       	movw	r12, r22
    336c:	7c 01       	movw	r14, r24
    336e:	c5 01       	movw	r24, r10
    3370:	b4 01       	movw	r22, r8
    3372:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    3376:	9b 01       	movw	r18, r22
    3378:	ac 01       	movw	r20, r24
    337a:	c7 01       	movw	r24, r14
    337c:	b6 01       	movw	r22, r12
    337e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    3382:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
    3386:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <GLCD_PrintInteger>
	}
}
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	bf 90       	pop	r11
    3394:	af 90       	pop	r10
    3396:	9f 90       	pop	r9
    3398:	8f 90       	pop	r8
    339a:	08 95       	ret

0000339c <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    339c:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    339e:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    33a0:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    33a2:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    33a4:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    33a6:	8c e0       	ldi	r24, 0x0C	; 12
    33a8:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    33aa:	84 e0       	ldi	r24, 0x04	; 4
    33ac:	86 bf       	out	0x36, r24	; 54
    33ae:	08 95       	ret

000033b0 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    33b0:	81 b1       	in	r24, 0x01	; 1
}
    33b2:	88 7f       	andi	r24, 0xF8	; 248
    33b4:	08 95       	ret

000033b6 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    33b6:	84 ea       	ldi	r24, 0xA4	; 164
    33b8:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    33ba:	06 b6       	in	r0, 0x36	; 54
    33bc:	07 fe       	sbrs	r0, 7
    33be:	fd cf       	rjmp	.-6      	; 0x33ba <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    33c0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_Status>
}
    33c4:	08 95       	ret

000033c6 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    33c6:	85 ed       	ldi	r24, 0xD5	; 213
    33c8:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    33ca:	06 b6       	in	r0, 0x36	; 54
    33cc:	04 fc       	sbrc	r0, 4
    33ce:	fd cf       	rjmp	.-6      	; 0x33ca <TWI_EndTransmission+0x4>
}
    33d0:	08 95       	ret

000033d2 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    33d2:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    33d4:	84 e8       	ldi	r24, 0x84	; 132
    33d6:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    33d8:	06 b6       	in	r0, 0x36	; 54
    33da:	07 fe       	sbrs	r0, 7
    33dc:	fd cf       	rjmp	.-6      	; 0x33d8 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    33de:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <TWI_Status>
}
    33e2:	08 95       	ret

000033e4 <__subsf3>:
    33e4:	50 58       	subi	r21, 0x80	; 128

000033e6 <__addsf3>:
    33e6:	bb 27       	eor	r27, r27
    33e8:	aa 27       	eor	r26, r26
    33ea:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__addsf3x>
    33ee:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_round>
    33f2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fp_pscA>
    33f6:	38 f0       	brcs	.+14     	; 0x3406 <__addsf3+0x20>
    33f8:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_pscB>
    33fc:	20 f0       	brcs	.+8      	; 0x3406 <__addsf3+0x20>
    33fe:	39 f4       	brne	.+14     	; 0x340e <__addsf3+0x28>
    3400:	9f 3f       	cpi	r25, 0xFF	; 255
    3402:	19 f4       	brne	.+6      	; 0x340a <__addsf3+0x24>
    3404:	26 f4       	brtc	.+8      	; 0x340e <__addsf3+0x28>
    3406:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__fp_nan>
    340a:	0e f4       	brtc	.+2      	; 0x340e <__addsf3+0x28>
    340c:	e0 95       	com	r30
    340e:	e7 fb       	bst	r30, 7
    3410:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>

00003414 <__addsf3x>:
    3414:	e9 2f       	mov	r30, r25
    3416:	0e 94 95 1b 	call	0x372a	; 0x372a <__fp_split3>
    341a:	58 f3       	brcs	.-42     	; 0x33f2 <__addsf3+0xc>
    341c:	ba 17       	cp	r27, r26
    341e:	62 07       	cpc	r22, r18
    3420:	73 07       	cpc	r23, r19
    3422:	84 07       	cpc	r24, r20
    3424:	95 07       	cpc	r25, r21
    3426:	20 f0       	brcs	.+8      	; 0x3430 <__addsf3x+0x1c>
    3428:	79 f4       	brne	.+30     	; 0x3448 <__addsf3x+0x34>
    342a:	a6 f5       	brtc	.+104    	; 0x3494 <__addsf3x+0x80>
    342c:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__fp_zero>
    3430:	0e f4       	brtc	.+2      	; 0x3434 <__addsf3x+0x20>
    3432:	e0 95       	com	r30
    3434:	0b 2e       	mov	r0, r27
    3436:	ba 2f       	mov	r27, r26
    3438:	a0 2d       	mov	r26, r0
    343a:	0b 01       	movw	r0, r22
    343c:	b9 01       	movw	r22, r18
    343e:	90 01       	movw	r18, r0
    3440:	0c 01       	movw	r0, r24
    3442:	ca 01       	movw	r24, r20
    3444:	a0 01       	movw	r20, r0
    3446:	11 24       	eor	r1, r1
    3448:	ff 27       	eor	r31, r31
    344a:	59 1b       	sub	r21, r25
    344c:	99 f0       	breq	.+38     	; 0x3474 <__addsf3x+0x60>
    344e:	59 3f       	cpi	r21, 0xF9	; 249
    3450:	50 f4       	brcc	.+20     	; 0x3466 <__addsf3x+0x52>
    3452:	50 3e       	cpi	r21, 0xE0	; 224
    3454:	68 f1       	brcs	.+90     	; 0x34b0 <__addsf3x+0x9c>
    3456:	1a 16       	cp	r1, r26
    3458:	f0 40       	sbci	r31, 0x00	; 0
    345a:	a2 2f       	mov	r26, r18
    345c:	23 2f       	mov	r18, r19
    345e:	34 2f       	mov	r19, r20
    3460:	44 27       	eor	r20, r20
    3462:	58 5f       	subi	r21, 0xF8	; 248
    3464:	f3 cf       	rjmp	.-26     	; 0x344c <__addsf3x+0x38>
    3466:	46 95       	lsr	r20
    3468:	37 95       	ror	r19
    346a:	27 95       	ror	r18
    346c:	a7 95       	ror	r26
    346e:	f0 40       	sbci	r31, 0x00	; 0
    3470:	53 95       	inc	r21
    3472:	c9 f7       	brne	.-14     	; 0x3466 <__addsf3x+0x52>
    3474:	7e f4       	brtc	.+30     	; 0x3494 <__addsf3x+0x80>
    3476:	1f 16       	cp	r1, r31
    3478:	ba 0b       	sbc	r27, r26
    347a:	62 0b       	sbc	r22, r18
    347c:	73 0b       	sbc	r23, r19
    347e:	84 0b       	sbc	r24, r20
    3480:	ba f0       	brmi	.+46     	; 0x34b0 <__addsf3x+0x9c>
    3482:	91 50       	subi	r25, 0x01	; 1
    3484:	a1 f0       	breq	.+40     	; 0x34ae <__addsf3x+0x9a>
    3486:	ff 0f       	add	r31, r31
    3488:	bb 1f       	adc	r27, r27
    348a:	66 1f       	adc	r22, r22
    348c:	77 1f       	adc	r23, r23
    348e:	88 1f       	adc	r24, r24
    3490:	c2 f7       	brpl	.-16     	; 0x3482 <__addsf3x+0x6e>
    3492:	0e c0       	rjmp	.+28     	; 0x34b0 <__addsf3x+0x9c>
    3494:	ba 0f       	add	r27, r26
    3496:	62 1f       	adc	r22, r18
    3498:	73 1f       	adc	r23, r19
    349a:	84 1f       	adc	r24, r20
    349c:	48 f4       	brcc	.+18     	; 0x34b0 <__addsf3x+0x9c>
    349e:	87 95       	ror	r24
    34a0:	77 95       	ror	r23
    34a2:	67 95       	ror	r22
    34a4:	b7 95       	ror	r27
    34a6:	f7 95       	ror	r31
    34a8:	9e 3f       	cpi	r25, 0xFE	; 254
    34aa:	08 f0       	brcs	.+2      	; 0x34ae <__addsf3x+0x9a>
    34ac:	b0 cf       	rjmp	.-160    	; 0x340e <__addsf3+0x28>
    34ae:	93 95       	inc	r25
    34b0:	88 0f       	add	r24, r24
    34b2:	08 f0       	brcs	.+2      	; 0x34b6 <__addsf3x+0xa2>
    34b4:	99 27       	eor	r25, r25
    34b6:	ee 0f       	add	r30, r30
    34b8:	97 95       	ror	r25
    34ba:	87 95       	ror	r24
    34bc:	08 95       	ret

000034be <__cmpsf2>:
    34be:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_cmp>
    34c2:	08 f4       	brcc	.+2      	; 0x34c6 <__cmpsf2+0x8>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	08 95       	ret

000034c8 <__divsf3>:
    34c8:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__divsf3x>
    34cc:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_round>
    34d0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_pscB>
    34d4:	58 f0       	brcs	.+22     	; 0x34ec <__divsf3+0x24>
    34d6:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fp_pscA>
    34da:	40 f0       	brcs	.+16     	; 0x34ec <__divsf3+0x24>
    34dc:	29 f4       	brne	.+10     	; 0x34e8 <__divsf3+0x20>
    34de:	5f 3f       	cpi	r21, 0xFF	; 255
    34e0:	29 f0       	breq	.+10     	; 0x34ec <__divsf3+0x24>
    34e2:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    34e6:	51 11       	cpse	r21, r1
    34e8:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    34ec:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__fp_nan>

000034f0 <__divsf3x>:
    34f0:	0e 94 95 1b 	call	0x372a	; 0x372a <__fp_split3>
    34f4:	68 f3       	brcs	.-38     	; 0x34d0 <__divsf3+0x8>

000034f6 <__divsf3_pse>:
    34f6:	99 23       	and	r25, r25
    34f8:	b1 f3       	breq	.-20     	; 0x34e6 <__divsf3+0x1e>
    34fa:	55 23       	and	r21, r21
    34fc:	91 f3       	breq	.-28     	; 0x34e2 <__divsf3+0x1a>
    34fe:	95 1b       	sub	r25, r21
    3500:	55 0b       	sbc	r21, r21
    3502:	bb 27       	eor	r27, r27
    3504:	aa 27       	eor	r26, r26
    3506:	62 17       	cp	r22, r18
    3508:	73 07       	cpc	r23, r19
    350a:	84 07       	cpc	r24, r20
    350c:	38 f0       	brcs	.+14     	; 0x351c <__divsf3_pse+0x26>
    350e:	9f 5f       	subi	r25, 0xFF	; 255
    3510:	5f 4f       	sbci	r21, 0xFF	; 255
    3512:	22 0f       	add	r18, r18
    3514:	33 1f       	adc	r19, r19
    3516:	44 1f       	adc	r20, r20
    3518:	aa 1f       	adc	r26, r26
    351a:	a9 f3       	breq	.-22     	; 0x3506 <__divsf3_pse+0x10>
    351c:	35 d0       	rcall	.+106    	; 0x3588 <__divsf3_pse+0x92>
    351e:	0e 2e       	mov	r0, r30
    3520:	3a f0       	brmi	.+14     	; 0x3530 <__divsf3_pse+0x3a>
    3522:	e0 e8       	ldi	r30, 0x80	; 128
    3524:	32 d0       	rcall	.+100    	; 0x358a <__divsf3_pse+0x94>
    3526:	91 50       	subi	r25, 0x01	; 1
    3528:	50 40       	sbci	r21, 0x00	; 0
    352a:	e6 95       	lsr	r30
    352c:	00 1c       	adc	r0, r0
    352e:	ca f7       	brpl	.-14     	; 0x3522 <__divsf3_pse+0x2c>
    3530:	2b d0       	rcall	.+86     	; 0x3588 <__divsf3_pse+0x92>
    3532:	fe 2f       	mov	r31, r30
    3534:	29 d0       	rcall	.+82     	; 0x3588 <__divsf3_pse+0x92>
    3536:	66 0f       	add	r22, r22
    3538:	77 1f       	adc	r23, r23
    353a:	88 1f       	adc	r24, r24
    353c:	bb 1f       	adc	r27, r27
    353e:	26 17       	cp	r18, r22
    3540:	37 07       	cpc	r19, r23
    3542:	48 07       	cpc	r20, r24
    3544:	ab 07       	cpc	r26, r27
    3546:	b0 e8       	ldi	r27, 0x80	; 128
    3548:	09 f0       	breq	.+2      	; 0x354c <__divsf3_pse+0x56>
    354a:	bb 0b       	sbc	r27, r27
    354c:	80 2d       	mov	r24, r0
    354e:	bf 01       	movw	r22, r30
    3550:	ff 27       	eor	r31, r31
    3552:	93 58       	subi	r25, 0x83	; 131
    3554:	5f 4f       	sbci	r21, 0xFF	; 255
    3556:	3a f0       	brmi	.+14     	; 0x3566 <__divsf3_pse+0x70>
    3558:	9e 3f       	cpi	r25, 0xFE	; 254
    355a:	51 05       	cpc	r21, r1
    355c:	78 f0       	brcs	.+30     	; 0x357c <__divsf3_pse+0x86>
    355e:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    3562:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    3566:	5f 3f       	cpi	r21, 0xFF	; 255
    3568:	e4 f3       	brlt	.-8      	; 0x3562 <__divsf3_pse+0x6c>
    356a:	98 3e       	cpi	r25, 0xE8	; 232
    356c:	d4 f3       	brlt	.-12     	; 0x3562 <__divsf3_pse+0x6c>
    356e:	86 95       	lsr	r24
    3570:	77 95       	ror	r23
    3572:	67 95       	ror	r22
    3574:	b7 95       	ror	r27
    3576:	f7 95       	ror	r31
    3578:	9f 5f       	subi	r25, 0xFF	; 255
    357a:	c9 f7       	brne	.-14     	; 0x356e <__divsf3_pse+0x78>
    357c:	88 0f       	add	r24, r24
    357e:	91 1d       	adc	r25, r1
    3580:	96 95       	lsr	r25
    3582:	87 95       	ror	r24
    3584:	97 f9       	bld	r25, 7
    3586:	08 95       	ret
    3588:	e1 e0       	ldi	r30, 0x01	; 1
    358a:	66 0f       	add	r22, r22
    358c:	77 1f       	adc	r23, r23
    358e:	88 1f       	adc	r24, r24
    3590:	bb 1f       	adc	r27, r27
    3592:	62 17       	cp	r22, r18
    3594:	73 07       	cpc	r23, r19
    3596:	84 07       	cpc	r24, r20
    3598:	ba 07       	cpc	r27, r26
    359a:	20 f0       	brcs	.+8      	; 0x35a4 <__divsf3_pse+0xae>
    359c:	62 1b       	sub	r22, r18
    359e:	73 0b       	sbc	r23, r19
    35a0:	84 0b       	sbc	r24, r20
    35a2:	ba 0b       	sbc	r27, r26
    35a4:	ee 1f       	adc	r30, r30
    35a6:	88 f7       	brcc	.-30     	; 0x358a <__divsf3_pse+0x94>
    35a8:	e0 95       	com	r30
    35aa:	08 95       	ret

000035ac <__fixsfsi>:
    35ac:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fixunssfsi>
    35b0:	68 94       	set
    35b2:	b1 11       	cpse	r27, r1
    35b4:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    35b8:	08 95       	ret

000035ba <__fixunssfsi>:
    35ba:	0e 94 9d 1b 	call	0x373a	; 0x373a <__fp_splitA>
    35be:	88 f0       	brcs	.+34     	; 0x35e2 <__fixunssfsi+0x28>
    35c0:	9f 57       	subi	r25, 0x7F	; 127
    35c2:	98 f0       	brcs	.+38     	; 0x35ea <__fixunssfsi+0x30>
    35c4:	b9 2f       	mov	r27, r25
    35c6:	99 27       	eor	r25, r25
    35c8:	b7 51       	subi	r27, 0x17	; 23
    35ca:	b0 f0       	brcs	.+44     	; 0x35f8 <__fixunssfsi+0x3e>
    35cc:	e1 f0       	breq	.+56     	; 0x3606 <__fixunssfsi+0x4c>
    35ce:	66 0f       	add	r22, r22
    35d0:	77 1f       	adc	r23, r23
    35d2:	88 1f       	adc	r24, r24
    35d4:	99 1f       	adc	r25, r25
    35d6:	1a f0       	brmi	.+6      	; 0x35de <__fixunssfsi+0x24>
    35d8:	ba 95       	dec	r27
    35da:	c9 f7       	brne	.-14     	; 0x35ce <__fixunssfsi+0x14>
    35dc:	14 c0       	rjmp	.+40     	; 0x3606 <__fixunssfsi+0x4c>
    35de:	b1 30       	cpi	r27, 0x01	; 1
    35e0:	91 f0       	breq	.+36     	; 0x3606 <__fixunssfsi+0x4c>
    35e2:	0e 94 b7 1b 	call	0x376e	; 0x376e <__fp_zero>
    35e6:	b1 e0       	ldi	r27, 0x01	; 1
    35e8:	08 95       	ret
    35ea:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__fp_zero>
    35ee:	67 2f       	mov	r22, r23
    35f0:	78 2f       	mov	r23, r24
    35f2:	88 27       	eor	r24, r24
    35f4:	b8 5f       	subi	r27, 0xF8	; 248
    35f6:	39 f0       	breq	.+14     	; 0x3606 <__fixunssfsi+0x4c>
    35f8:	b9 3f       	cpi	r27, 0xF9	; 249
    35fa:	cc f3       	brlt	.-14     	; 0x35ee <__fixunssfsi+0x34>
    35fc:	86 95       	lsr	r24
    35fe:	77 95       	ror	r23
    3600:	67 95       	ror	r22
    3602:	b3 95       	inc	r27
    3604:	d9 f7       	brne	.-10     	; 0x35fc <__fixunssfsi+0x42>
    3606:	3e f4       	brtc	.+14     	; 0x3616 <__fixunssfsi+0x5c>
    3608:	90 95       	com	r25
    360a:	80 95       	com	r24
    360c:	70 95       	com	r23
    360e:	61 95       	neg	r22
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	8f 4f       	sbci	r24, 0xFF	; 255
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	08 95       	ret

00003618 <__floatunsisf>:
    3618:	e8 94       	clt
    361a:	09 c0       	rjmp	.+18     	; 0x362e <__floatsisf+0x12>

0000361c <__floatsisf>:
    361c:	97 fb       	bst	r25, 7
    361e:	3e f4       	brtc	.+14     	; 0x362e <__floatsisf+0x12>
    3620:	90 95       	com	r25
    3622:	80 95       	com	r24
    3624:	70 95       	com	r23
    3626:	61 95       	neg	r22
    3628:	7f 4f       	sbci	r23, 0xFF	; 255
    362a:	8f 4f       	sbci	r24, 0xFF	; 255
    362c:	9f 4f       	sbci	r25, 0xFF	; 255
    362e:	99 23       	and	r25, r25
    3630:	a9 f0       	breq	.+42     	; 0x365c <__floatsisf+0x40>
    3632:	f9 2f       	mov	r31, r25
    3634:	96 e9       	ldi	r25, 0x96	; 150
    3636:	bb 27       	eor	r27, r27
    3638:	93 95       	inc	r25
    363a:	f6 95       	lsr	r31
    363c:	87 95       	ror	r24
    363e:	77 95       	ror	r23
    3640:	67 95       	ror	r22
    3642:	b7 95       	ror	r27
    3644:	f1 11       	cpse	r31, r1
    3646:	f8 cf       	rjmp	.-16     	; 0x3638 <__floatsisf+0x1c>
    3648:	fa f4       	brpl	.+62     	; 0x3688 <__floatsisf+0x6c>
    364a:	bb 0f       	add	r27, r27
    364c:	11 f4       	brne	.+4      	; 0x3652 <__floatsisf+0x36>
    364e:	60 ff       	sbrs	r22, 0
    3650:	1b c0       	rjmp	.+54     	; 0x3688 <__floatsisf+0x6c>
    3652:	6f 5f       	subi	r22, 0xFF	; 255
    3654:	7f 4f       	sbci	r23, 0xFF	; 255
    3656:	8f 4f       	sbci	r24, 0xFF	; 255
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	16 c0       	rjmp	.+44     	; 0x3688 <__floatsisf+0x6c>
    365c:	88 23       	and	r24, r24
    365e:	11 f0       	breq	.+4      	; 0x3664 <__floatsisf+0x48>
    3660:	96 e9       	ldi	r25, 0x96	; 150
    3662:	11 c0       	rjmp	.+34     	; 0x3686 <__floatsisf+0x6a>
    3664:	77 23       	and	r23, r23
    3666:	21 f0       	breq	.+8      	; 0x3670 <__floatsisf+0x54>
    3668:	9e e8       	ldi	r25, 0x8E	; 142
    366a:	87 2f       	mov	r24, r23
    366c:	76 2f       	mov	r23, r22
    366e:	05 c0       	rjmp	.+10     	; 0x367a <__floatsisf+0x5e>
    3670:	66 23       	and	r22, r22
    3672:	71 f0       	breq	.+28     	; 0x3690 <__floatsisf+0x74>
    3674:	96 e8       	ldi	r25, 0x86	; 134
    3676:	86 2f       	mov	r24, r22
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	2a f0       	brmi	.+10     	; 0x3688 <__floatsisf+0x6c>
    367e:	9a 95       	dec	r25
    3680:	66 0f       	add	r22, r22
    3682:	77 1f       	adc	r23, r23
    3684:	88 1f       	adc	r24, r24
    3686:	da f7       	brpl	.-10     	; 0x367e <__floatsisf+0x62>
    3688:	88 0f       	add	r24, r24
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	97 f9       	bld	r25, 7
    3690:	08 95       	ret

00003692 <__fp_cmp>:
    3692:	99 0f       	add	r25, r25
    3694:	00 08       	sbc	r0, r0
    3696:	55 0f       	add	r21, r21
    3698:	aa 0b       	sbc	r26, r26
    369a:	e0 e8       	ldi	r30, 0x80	; 128
    369c:	fe ef       	ldi	r31, 0xFE	; 254
    369e:	16 16       	cp	r1, r22
    36a0:	17 06       	cpc	r1, r23
    36a2:	e8 07       	cpc	r30, r24
    36a4:	f9 07       	cpc	r31, r25
    36a6:	c0 f0       	brcs	.+48     	; 0x36d8 <__fp_cmp+0x46>
    36a8:	12 16       	cp	r1, r18
    36aa:	13 06       	cpc	r1, r19
    36ac:	e4 07       	cpc	r30, r20
    36ae:	f5 07       	cpc	r31, r21
    36b0:	98 f0       	brcs	.+38     	; 0x36d8 <__fp_cmp+0x46>
    36b2:	62 1b       	sub	r22, r18
    36b4:	73 0b       	sbc	r23, r19
    36b6:	84 0b       	sbc	r24, r20
    36b8:	95 0b       	sbc	r25, r21
    36ba:	39 f4       	brne	.+14     	; 0x36ca <__fp_cmp+0x38>
    36bc:	0a 26       	eor	r0, r26
    36be:	61 f0       	breq	.+24     	; 0x36d8 <__fp_cmp+0x46>
    36c0:	23 2b       	or	r18, r19
    36c2:	24 2b       	or	r18, r20
    36c4:	25 2b       	or	r18, r21
    36c6:	21 f4       	brne	.+8      	; 0x36d0 <__fp_cmp+0x3e>
    36c8:	08 95       	ret
    36ca:	0a 26       	eor	r0, r26
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <__fp_cmp+0x3e>
    36ce:	a1 40       	sbci	r26, 0x01	; 1
    36d0:	a6 95       	lsr	r26
    36d2:	8f ef       	ldi	r24, 0xFF	; 255
    36d4:	81 1d       	adc	r24, r1
    36d6:	81 1d       	adc	r24, r1
    36d8:	08 95       	ret

000036da <__fp_inf>:
    36da:	97 f9       	bld	r25, 7
    36dc:	9f 67       	ori	r25, 0x7F	; 127
    36de:	80 e8       	ldi	r24, 0x80	; 128
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	08 95       	ret

000036e6 <__fp_nan>:
    36e6:	9f ef       	ldi	r25, 0xFF	; 255
    36e8:	80 ec       	ldi	r24, 0xC0	; 192
    36ea:	08 95       	ret

000036ec <__fp_pscA>:
    36ec:	00 24       	eor	r0, r0
    36ee:	0a 94       	dec	r0
    36f0:	16 16       	cp	r1, r22
    36f2:	17 06       	cpc	r1, r23
    36f4:	18 06       	cpc	r1, r24
    36f6:	09 06       	cpc	r0, r25
    36f8:	08 95       	ret

000036fa <__fp_pscB>:
    36fa:	00 24       	eor	r0, r0
    36fc:	0a 94       	dec	r0
    36fe:	12 16       	cp	r1, r18
    3700:	13 06       	cpc	r1, r19
    3702:	14 06       	cpc	r1, r20
    3704:	05 06       	cpc	r0, r21
    3706:	08 95       	ret

00003708 <__fp_round>:
    3708:	09 2e       	mov	r0, r25
    370a:	03 94       	inc	r0
    370c:	00 0c       	add	r0, r0
    370e:	11 f4       	brne	.+4      	; 0x3714 <__fp_round+0xc>
    3710:	88 23       	and	r24, r24
    3712:	52 f0       	brmi	.+20     	; 0x3728 <__fp_round+0x20>
    3714:	bb 0f       	add	r27, r27
    3716:	40 f4       	brcc	.+16     	; 0x3728 <__fp_round+0x20>
    3718:	bf 2b       	or	r27, r31
    371a:	11 f4       	brne	.+4      	; 0x3720 <__fp_round+0x18>
    371c:	60 ff       	sbrs	r22, 0
    371e:	04 c0       	rjmp	.+8      	; 0x3728 <__fp_round+0x20>
    3720:	6f 5f       	subi	r22, 0xFF	; 255
    3722:	7f 4f       	sbci	r23, 0xFF	; 255
    3724:	8f 4f       	sbci	r24, 0xFF	; 255
    3726:	9f 4f       	sbci	r25, 0xFF	; 255
    3728:	08 95       	ret

0000372a <__fp_split3>:
    372a:	57 fd       	sbrc	r21, 7
    372c:	90 58       	subi	r25, 0x80	; 128
    372e:	44 0f       	add	r20, r20
    3730:	55 1f       	adc	r21, r21
    3732:	59 f0       	breq	.+22     	; 0x374a <__fp_splitA+0x10>
    3734:	5f 3f       	cpi	r21, 0xFF	; 255
    3736:	71 f0       	breq	.+28     	; 0x3754 <__fp_splitA+0x1a>
    3738:	47 95       	ror	r20

0000373a <__fp_splitA>:
    373a:	88 0f       	add	r24, r24
    373c:	97 fb       	bst	r25, 7
    373e:	99 1f       	adc	r25, r25
    3740:	61 f0       	breq	.+24     	; 0x375a <__fp_splitA+0x20>
    3742:	9f 3f       	cpi	r25, 0xFF	; 255
    3744:	79 f0       	breq	.+30     	; 0x3764 <__fp_splitA+0x2a>
    3746:	87 95       	ror	r24
    3748:	08 95       	ret
    374a:	12 16       	cp	r1, r18
    374c:	13 06       	cpc	r1, r19
    374e:	14 06       	cpc	r1, r20
    3750:	55 1f       	adc	r21, r21
    3752:	f2 cf       	rjmp	.-28     	; 0x3738 <__fp_split3+0xe>
    3754:	46 95       	lsr	r20
    3756:	f1 df       	rcall	.-30     	; 0x373a <__fp_splitA>
    3758:	08 c0       	rjmp	.+16     	; 0x376a <__fp_splitA+0x30>
    375a:	16 16       	cp	r1, r22
    375c:	17 06       	cpc	r1, r23
    375e:	18 06       	cpc	r1, r24
    3760:	99 1f       	adc	r25, r25
    3762:	f1 cf       	rjmp	.-30     	; 0x3746 <__fp_splitA+0xc>
    3764:	86 95       	lsr	r24
    3766:	71 05       	cpc	r23, r1
    3768:	61 05       	cpc	r22, r1
    376a:	08 94       	sec
    376c:	08 95       	ret

0000376e <__fp_zero>:
    376e:	e8 94       	clt

00003770 <__fp_szero>:
    3770:	bb 27       	eor	r27, r27
    3772:	66 27       	eor	r22, r22
    3774:	77 27       	eor	r23, r23
    3776:	cb 01       	movw	r24, r22
    3778:	97 f9       	bld	r25, 7
    377a:	08 95       	ret

0000377c <__gesf2>:
    377c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_cmp>
    3780:	08 f4       	brcc	.+2      	; 0x3784 <__gesf2+0x8>
    3782:	8f ef       	ldi	r24, 0xFF	; 255
    3784:	08 95       	ret

00003786 <__mulsf3>:
    3786:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3x>
    378a:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_round>
    378e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fp_pscA>
    3792:	38 f0       	brcs	.+14     	; 0x37a2 <__mulsf3+0x1c>
    3794:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_pscB>
    3798:	20 f0       	brcs	.+8      	; 0x37a2 <__mulsf3+0x1c>
    379a:	95 23       	and	r25, r21
    379c:	11 f0       	breq	.+4      	; 0x37a2 <__mulsf3+0x1c>
    379e:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    37a2:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__fp_nan>
    37a6:	11 24       	eor	r1, r1
    37a8:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>

000037ac <__mulsf3x>:
    37ac:	0e 94 95 1b 	call	0x372a	; 0x372a <__fp_split3>
    37b0:	70 f3       	brcs	.-36     	; 0x378e <__mulsf3+0x8>

000037b2 <__mulsf3_pse>:
    37b2:	95 9f       	mul	r25, r21
    37b4:	c1 f3       	breq	.-16     	; 0x37a6 <__mulsf3+0x20>
    37b6:	95 0f       	add	r25, r21
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	55 1f       	adc	r21, r21
    37bc:	62 9f       	mul	r22, r18
    37be:	f0 01       	movw	r30, r0
    37c0:	72 9f       	mul	r23, r18
    37c2:	bb 27       	eor	r27, r27
    37c4:	f0 0d       	add	r31, r0
    37c6:	b1 1d       	adc	r27, r1
    37c8:	63 9f       	mul	r22, r19
    37ca:	aa 27       	eor	r26, r26
    37cc:	f0 0d       	add	r31, r0
    37ce:	b1 1d       	adc	r27, r1
    37d0:	aa 1f       	adc	r26, r26
    37d2:	64 9f       	mul	r22, r20
    37d4:	66 27       	eor	r22, r22
    37d6:	b0 0d       	add	r27, r0
    37d8:	a1 1d       	adc	r26, r1
    37da:	66 1f       	adc	r22, r22
    37dc:	82 9f       	mul	r24, r18
    37de:	22 27       	eor	r18, r18
    37e0:	b0 0d       	add	r27, r0
    37e2:	a1 1d       	adc	r26, r1
    37e4:	62 1f       	adc	r22, r18
    37e6:	73 9f       	mul	r23, r19
    37e8:	b0 0d       	add	r27, r0
    37ea:	a1 1d       	adc	r26, r1
    37ec:	62 1f       	adc	r22, r18
    37ee:	83 9f       	mul	r24, r19
    37f0:	a0 0d       	add	r26, r0
    37f2:	61 1d       	adc	r22, r1
    37f4:	22 1f       	adc	r18, r18
    37f6:	74 9f       	mul	r23, r20
    37f8:	33 27       	eor	r19, r19
    37fa:	a0 0d       	add	r26, r0
    37fc:	61 1d       	adc	r22, r1
    37fe:	23 1f       	adc	r18, r19
    3800:	84 9f       	mul	r24, r20
    3802:	60 0d       	add	r22, r0
    3804:	21 1d       	adc	r18, r1
    3806:	82 2f       	mov	r24, r18
    3808:	76 2f       	mov	r23, r22
    380a:	6a 2f       	mov	r22, r26
    380c:	11 24       	eor	r1, r1
    380e:	9f 57       	subi	r25, 0x7F	; 127
    3810:	50 40       	sbci	r21, 0x00	; 0
    3812:	9a f0       	brmi	.+38     	; 0x383a <__mulsf3_pse+0x88>
    3814:	f1 f0       	breq	.+60     	; 0x3852 <__mulsf3_pse+0xa0>
    3816:	88 23       	and	r24, r24
    3818:	4a f0       	brmi	.+18     	; 0x382c <__mulsf3_pse+0x7a>
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	bb 1f       	adc	r27, r27
    3820:	66 1f       	adc	r22, r22
    3822:	77 1f       	adc	r23, r23
    3824:	88 1f       	adc	r24, r24
    3826:	91 50       	subi	r25, 0x01	; 1
    3828:	50 40       	sbci	r21, 0x00	; 0
    382a:	a9 f7       	brne	.-22     	; 0x3816 <__mulsf3_pse+0x64>
    382c:	9e 3f       	cpi	r25, 0xFE	; 254
    382e:	51 05       	cpc	r21, r1
    3830:	80 f0       	brcs	.+32     	; 0x3852 <__mulsf3_pse+0xa0>
    3832:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    3836:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    383a:	5f 3f       	cpi	r21, 0xFF	; 255
    383c:	e4 f3       	brlt	.-8      	; 0x3836 <__mulsf3_pse+0x84>
    383e:	98 3e       	cpi	r25, 0xE8	; 232
    3840:	d4 f3       	brlt	.-12     	; 0x3836 <__mulsf3_pse+0x84>
    3842:	86 95       	lsr	r24
    3844:	77 95       	ror	r23
    3846:	67 95       	ror	r22
    3848:	b7 95       	ror	r27
    384a:	f7 95       	ror	r31
    384c:	e7 95       	ror	r30
    384e:	9f 5f       	subi	r25, 0xFF	; 255
    3850:	c1 f7       	brne	.-16     	; 0x3842 <__mulsf3_pse+0x90>
    3852:	fe 2b       	or	r31, r30
    3854:	88 0f       	add	r24, r24
    3856:	91 1d       	adc	r25, r1
    3858:	96 95       	lsr	r25
    385a:	87 95       	ror	r24
    385c:	97 f9       	bld	r25, 7
    385e:	08 95       	ret

00003860 <round>:
    3860:	0e 94 9d 1b 	call	0x373a	; 0x373a <__fp_splitA>
    3864:	e8 f0       	brcs	.+58     	; 0x38a0 <round+0x40>
    3866:	9e 37       	cpi	r25, 0x7E	; 126
    3868:	e8 f0       	brcs	.+58     	; 0x38a4 <round+0x44>
    386a:	96 39       	cpi	r25, 0x96	; 150
    386c:	b8 f4       	brcc	.+46     	; 0x389c <round+0x3c>
    386e:	9e 38       	cpi	r25, 0x8E	; 142
    3870:	48 f4       	brcc	.+18     	; 0x3884 <round+0x24>
    3872:	67 2f       	mov	r22, r23
    3874:	78 2f       	mov	r23, r24
    3876:	88 27       	eor	r24, r24
    3878:	98 5f       	subi	r25, 0xF8	; 248
    387a:	f9 cf       	rjmp	.-14     	; 0x386e <round+0xe>
    387c:	86 95       	lsr	r24
    387e:	77 95       	ror	r23
    3880:	67 95       	ror	r22
    3882:	93 95       	inc	r25
    3884:	95 39       	cpi	r25, 0x95	; 149
    3886:	d0 f3       	brcs	.-12     	; 0x387c <round+0x1c>
    3888:	b6 2f       	mov	r27, r22
    388a:	b1 70       	andi	r27, 0x01	; 1
    388c:	6b 0f       	add	r22, r27
    388e:	71 1d       	adc	r23, r1
    3890:	81 1d       	adc	r24, r1
    3892:	20 f4       	brcc	.+8      	; 0x389c <round+0x3c>
    3894:	87 95       	ror	r24
    3896:	77 95       	ror	r23
    3898:	67 95       	ror	r22
    389a:	93 95       	inc	r25
    389c:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__fp_mintl>
    38a0:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__fp_mpack>
    38a4:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>

000038a8 <__fp_mintl>:
    38a8:	88 23       	and	r24, r24
    38aa:	71 f4       	brne	.+28     	; 0x38c8 <__fp_mintl+0x20>
    38ac:	77 23       	and	r23, r23
    38ae:	21 f0       	breq	.+8      	; 0x38b8 <__fp_mintl+0x10>
    38b0:	98 50       	subi	r25, 0x08	; 8
    38b2:	87 2b       	or	r24, r23
    38b4:	76 2f       	mov	r23, r22
    38b6:	07 c0       	rjmp	.+14     	; 0x38c6 <__fp_mintl+0x1e>
    38b8:	66 23       	and	r22, r22
    38ba:	11 f4       	brne	.+4      	; 0x38c0 <__fp_mintl+0x18>
    38bc:	99 27       	eor	r25, r25
    38be:	0d c0       	rjmp	.+26     	; 0x38da <__fp_mintl+0x32>
    38c0:	90 51       	subi	r25, 0x10	; 16
    38c2:	86 2b       	or	r24, r22
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	2a f0       	brmi	.+10     	; 0x38d4 <__fp_mintl+0x2c>
    38ca:	9a 95       	dec	r25
    38cc:	66 0f       	add	r22, r22
    38ce:	77 1f       	adc	r23, r23
    38d0:	88 1f       	adc	r24, r24
    38d2:	da f7       	brpl	.-10     	; 0x38ca <__fp_mintl+0x22>
    38d4:	88 0f       	add	r24, r24
    38d6:	96 95       	lsr	r25
    38d8:	87 95       	ror	r24
    38da:	97 f9       	bld	r25, 7
    38dc:	08 95       	ret

000038de <__fp_mpack>:
    38de:	9f 3f       	cpi	r25, 0xFF	; 255
    38e0:	31 f0       	breq	.+12     	; 0x38ee <__fp_mpack_finite+0xc>

000038e2 <__fp_mpack_finite>:
    38e2:	91 50       	subi	r25, 0x01	; 1
    38e4:	20 f4       	brcc	.+8      	; 0x38ee <__fp_mpack_finite+0xc>
    38e6:	87 95       	ror	r24
    38e8:	77 95       	ror	r23
    38ea:	67 95       	ror	r22
    38ec:	b7 95       	ror	r27
    38ee:	88 0f       	add	r24, r24
    38f0:	91 1d       	adc	r25, r1
    38f2:	96 95       	lsr	r25
    38f4:	87 95       	ror	r24
    38f6:	97 f9       	bld	r25, 7
    38f8:	08 95       	ret

000038fa <__divmodhi4>:
    38fa:	97 fb       	bst	r25, 7
    38fc:	07 2e       	mov	r0, r23
    38fe:	16 f4       	brtc	.+4      	; 0x3904 <__divmodhi4+0xa>
    3900:	00 94       	com	r0
    3902:	07 d0       	rcall	.+14     	; 0x3912 <__divmodhi4_neg1>
    3904:	77 fd       	sbrc	r23, 7
    3906:	09 d0       	rcall	.+18     	; 0x391a <__divmodhi4_neg2>
    3908:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    390c:	07 fc       	sbrc	r0, 7
    390e:	05 d0       	rcall	.+10     	; 0x391a <__divmodhi4_neg2>
    3910:	3e f4       	brtc	.+14     	; 0x3920 <__divmodhi4_exit>

00003912 <__divmodhi4_neg1>:
    3912:	90 95       	com	r25
    3914:	81 95       	neg	r24
    3916:	9f 4f       	sbci	r25, 0xFF	; 255
    3918:	08 95       	ret

0000391a <__divmodhi4_neg2>:
    391a:	70 95       	com	r23
    391c:	61 95       	neg	r22
    391e:	7f 4f       	sbci	r23, 0xFF	; 255

00003920 <__divmodhi4_exit>:
    3920:	08 95       	ret

00003922 <__udivmodsi4>:
    3922:	a1 e2       	ldi	r26, 0x21	; 33
    3924:	1a 2e       	mov	r1, r26
    3926:	aa 1b       	sub	r26, r26
    3928:	bb 1b       	sub	r27, r27
    392a:	fd 01       	movw	r30, r26
    392c:	0d c0       	rjmp	.+26     	; 0x3948 <__udivmodsi4_ep>

0000392e <__udivmodsi4_loop>:
    392e:	aa 1f       	adc	r26, r26
    3930:	bb 1f       	adc	r27, r27
    3932:	ee 1f       	adc	r30, r30
    3934:	ff 1f       	adc	r31, r31
    3936:	a2 17       	cp	r26, r18
    3938:	b3 07       	cpc	r27, r19
    393a:	e4 07       	cpc	r30, r20
    393c:	f5 07       	cpc	r31, r21
    393e:	20 f0       	brcs	.+8      	; 0x3948 <__udivmodsi4_ep>
    3940:	a2 1b       	sub	r26, r18
    3942:	b3 0b       	sbc	r27, r19
    3944:	e4 0b       	sbc	r30, r20
    3946:	f5 0b       	sbc	r31, r21

00003948 <__udivmodsi4_ep>:
    3948:	66 1f       	adc	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	88 1f       	adc	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	1a 94       	dec	r1
    3952:	69 f7       	brne	.-38     	; 0x392e <__udivmodsi4_loop>
    3954:	60 95       	com	r22
    3956:	70 95       	com	r23
    3958:	80 95       	com	r24
    395a:	90 95       	com	r25
    395c:	9b 01       	movw	r18, r22
    395e:	ac 01       	movw	r20, r24
    3960:	bd 01       	movw	r22, r26
    3962:	cf 01       	movw	r24, r30
    3964:	08 95       	ret

00003966 <__divmodsi4>:
    3966:	05 2e       	mov	r0, r21
    3968:	97 fb       	bst	r25, 7
    396a:	1e f4       	brtc	.+6      	; 0x3972 <__divmodsi4+0xc>
    396c:	00 94       	com	r0
    396e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__negsi2>
    3972:	57 fd       	sbrc	r21, 7
    3974:	07 d0       	rcall	.+14     	; 0x3984 <__divmodsi4_neg2>
    3976:	0e 94 91 1c 	call	0x3922	; 0x3922 <__udivmodsi4>
    397a:	07 fc       	sbrc	r0, 7
    397c:	03 d0       	rcall	.+6      	; 0x3984 <__divmodsi4_neg2>
    397e:	4e f4       	brtc	.+18     	; 0x3992 <__divmodsi4_exit>
    3980:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__negsi2>

00003984 <__divmodsi4_neg2>:
    3984:	50 95       	com	r21
    3986:	40 95       	com	r20
    3988:	30 95       	com	r19
    398a:	21 95       	neg	r18
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	4f 4f       	sbci	r20, 0xFF	; 255
    3990:	5f 4f       	sbci	r21, 0xFF	; 255

00003992 <__divmodsi4_exit>:
    3992:	08 95       	ret

00003994 <__negsi2>:
    3994:	90 95       	com	r25
    3996:	80 95       	com	r24
    3998:	70 95       	com	r23
    399a:	61 95       	neg	r22
    399c:	7f 4f       	sbci	r23, 0xFF	; 255
    399e:	8f 4f       	sbci	r24, 0xFF	; 255
    39a0:	9f 4f       	sbci	r25, 0xFF	; 255
    39a2:	08 95       	ret

000039a4 <__udivmodhi4>:
    39a4:	aa 1b       	sub	r26, r26
    39a6:	bb 1b       	sub	r27, r27
    39a8:	51 e1       	ldi	r21, 0x11	; 17
    39aa:	07 c0       	rjmp	.+14     	; 0x39ba <__udivmodhi4_ep>

000039ac <__udivmodhi4_loop>:
    39ac:	aa 1f       	adc	r26, r26
    39ae:	bb 1f       	adc	r27, r27
    39b0:	a6 17       	cp	r26, r22
    39b2:	b7 07       	cpc	r27, r23
    39b4:	10 f0       	brcs	.+4      	; 0x39ba <__udivmodhi4_ep>
    39b6:	a6 1b       	sub	r26, r22
    39b8:	b7 0b       	sbc	r27, r23

000039ba <__udivmodhi4_ep>:
    39ba:	88 1f       	adc	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	5a 95       	dec	r21
    39c0:	a9 f7       	brne	.-22     	; 0x39ac <__udivmodhi4_loop>
    39c2:	80 95       	com	r24
    39c4:	90 95       	com	r25
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	08 95       	ret

000039cc <eeprom_read_byte>:
    39cc:	e1 99       	sbic	0x1c, 1	; 28
    39ce:	fe cf       	rjmp	.-4      	; 0x39cc <eeprom_read_byte>
    39d0:	9f bb       	out	0x1f, r25	; 31
    39d2:	8e bb       	out	0x1e, r24	; 30
    39d4:	e0 9a       	sbi	0x1c, 0	; 28
    39d6:	99 27       	eor	r25, r25
    39d8:	8d b3       	in	r24, 0x1d	; 29
    39da:	08 95       	ret

000039dc <eeprom_read_dword>:
    39dc:	a6 e1       	ldi	r26, 0x16	; 22
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	44 e0       	ldi	r20, 0x04	; 4
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <eeprom_read_blraw>

000039e8 <eeprom_read_word>:
    39e8:	a8 e1       	ldi	r26, 0x18	; 24
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	42 e0       	ldi	r20, 0x02	; 2
    39ee:	50 e0       	ldi	r21, 0x00	; 0
    39f0:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <eeprom_read_blraw>

000039f4 <eeprom_write_byte>:
    39f4:	26 2f       	mov	r18, r22

000039f6 <eeprom_write_r18>:
    39f6:	e1 99       	sbic	0x1c, 1	; 28
    39f8:	fe cf       	rjmp	.-4      	; 0x39f6 <eeprom_write_r18>
    39fa:	9f bb       	out	0x1f, r25	; 31
    39fc:	8e bb       	out	0x1e, r24	; 30
    39fe:	2d bb       	out	0x1d, r18	; 29
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	e2 9a       	sbi	0x1c, 2	; 28
    3a06:	e1 9a       	sbi	0x1c, 1	; 28
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	08 95       	ret

00003a0e <eeprom_write_dword>:
    3a0e:	24 2f       	mov	r18, r20
    3a10:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <eeprom_write_r18>
    3a14:	25 2f       	mov	r18, r21
    3a16:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <eeprom_write_r18>
    3a1a:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <eeprom_write_word>

00003a1e <eeprom_write_word>:
    3a1e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <eeprom_write_byte>
    3a22:	27 2f       	mov	r18, r23
    3a24:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <eeprom_write_r18>

00003a28 <eeprom_read_block>:
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22

00003a2c <eeprom_read_blraw>:
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	e1 99       	sbic	0x1c, 1	; 28
    3a30:	fe cf       	rjmp	.-4      	; 0x3a2e <eeprom_read_blraw+0x2>
    3a32:	06 c0       	rjmp	.+12     	; 0x3a40 <eeprom_read_blraw+0x14>
    3a34:	ff bb       	out	0x1f, r31	; 31
    3a36:	ee bb       	out	0x1e, r30	; 30
    3a38:	e0 9a       	sbi	0x1c, 0	; 28
    3a3a:	31 96       	adiw	r30, 0x01	; 1
    3a3c:	0d b2       	in	r0, 0x1d	; 29
    3a3e:	0d 92       	st	X+, r0
    3a40:	41 50       	subi	r20, 0x01	; 1
    3a42:	50 40       	sbci	r21, 0x00	; 0
    3a44:	b8 f7       	brcc	.-18     	; 0x3a34 <eeprom_read_blraw+0x8>
    3a46:	08 95       	ret

00003a48 <_exit>:
    3a48:	f8 94       	cli

00003a4a <__stop_program>:
    3a4a:	ff cf       	rjmp	.-2      	; 0x3a4a <__stop_program>
