
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  00004c12  00004ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000441  008001f6  008001f6  00004e3c  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00004e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004e9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00004ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006016  00000000  00000000  000052d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2c  00000000  00000000  0000b2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002497  00000000  00000000  0000c11a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c14  00000000  00000000  0000e5b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f73  00000000  00000000  0000f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b45  00000000  00000000  0001013b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00015c80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__ctors_end>
       4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
       8:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      10:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_4>
      14:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      18:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      1c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      20:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      24:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_9>
      28:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_10>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      30:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      34:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      38:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      40:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      44:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      48:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      50:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__bad_interrupt>
      54:	86 16       	cp	r8, r22
      56:	a6 16       	cp	r10, r22
      58:	c6 16       	cp	r12, r22
      5a:	15 17       	cp	r17, r21
      5c:	64 17       	cp	r22, r20
      5e:	80 17       	cp	r24, r16
      60:	9c 17       	cp	r25, r28
      62:	b8 17       	cp	r27, r24
      64:	07 18       	sub	r0, r7
      66:	27 18       	sub	r2, r7
      68:	43 18       	sub	r4, r3
      6a:	61 18       	sub	r6, r1
      6c:	6b 18       	sub	r6, r11
      6e:	6e 18       	sub	r6, r14
      70:	96 18       	sub	r9, r6
      72:	80 18       	sub	r8, r0

00000074 <Arial12x17>:
      74:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
      84:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
      94:	7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe     ................
      a4:	ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0     ................
      b4:	01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f     ................
      c4:	00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01     ................
      d4:	07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c     ................
      e4:	00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07     ................
      f4:	c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f     ................
     104:	00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff     ................
     114:	00 0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01     ................
     124:	fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00     ................
     134:	fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07     ................
     144:	c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00     ................
     154:	00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0     ................
     164:	01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00     ................
     174:	f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00     ................
     184:	0f e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe     ................
     194:	ff 00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc     ................
     1a4:	7f 00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0     ................
     1b4:	01 0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00     ................
     1c4:	00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01     ................
     1d4:	07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0     ................
     1e4:	1f 00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f     ................
     1f4:	e0 01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff     ................
     204:	00 fc 7f 00 f0 1f 00 0c 00 00 00 f0 1f 00 fc 7f     ................
     214:	00 fe ff 00 0f e0 01 07 c0 01 07 c0 01 07 c0 01     ................
     224:	0f e0 01 fe ff 00 fc 7f 00 f0 1f 00 0c 00 00 00     ................
     234:	f0 1f 00 fc 7f 00 fe ff 00 0f e0 01 07 c0 01 07     ................
     244:	c0 01 07 c0 01 0f e0 01 fe ff 00 fc 7f 00 f0 1f     ................
     254:	00 0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0     ................
     264:	01 07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00     ................
     274:	fc 7f 00 f0 1f 00 04 00 00 00 00 c0 01 00 c0 01     ................
     284:	00 c0 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     29c:	00 00 00 0c 00 80 01 00 f8 01 c0 ff 01 fc 7f 00     ................
     2ac:	ff 07 00 3f 00 00 03 00 00 00 00 00 00 00 00 00     ...?............
	...
     2c4:	0c 00 00 00 f0 1f 00 fc 7f 00 fe ff 00 0f e0 01     ................
     2d4:	07 c0 01 07 c0 01 07 c0 01 0f e0 01 fe ff 00 fc     ................
     2e4:	7f 00 f0 1f 00 0c 00 00 00 00 00 00 60 00 00 70     ............`..p
     2f4:	00 00 78 00 00 3c 00 00 1e 00 00 ff ff 01 ff ff     ..x..<..........
     304:	01 ff ff 01 00 00 00 00 00 00 0c 00 00 00 38 80     ..............8.
     314:	01 3c e0 01 3e f0 01 0f f8 01 07 fc 01 07 de 01     .<..>...........
     324:	07 cf 01 8f c7 01 fe c3 01 fe c1 01 78 c0 01 0c     ............x...
     334:	00 00 00 18 38 00 1e 78 00 1e f8 00 0f e0 01 c7     ....8..x........
     344:	c1 01 c7 c1 01 e7 c1 01 ff e3 01 7e ff 00 3c 7f     ...........~..<.
     354:	00 00 3e 00 0c 00 00 00 00 3e 00 80 3f 00 c0 3f     ..>......>..?..?
     364:	00 f0 39 00 78 38 00 3e 38 00 ff ff 01 ff ff 01     ..9.x8.>8.......
     374:	ff ff 01 00 38 00 00 38 00 0c 00 00 00 80 39 00     ....8..8......9.
     384:	fc 79 00 ff f9 00 ff e0 01 e7 c0 01 e7 c0 01 e7     .y..............
     394:	c0 01 e7 e1 01 c7 ff 00 87 7f 00 00 1f 00 0c 00     ................
     3a4:	00 00 f0 1f 00 fc 7f 00 fe ff 00 8e e3 01 c7 c1     ................
     3b4:	01 c7 c1 01 c7 c1 01 cf e3 01 9e ff 00 9e 7f 00     ................
     3c4:	18 3e 00 0c 00 00 00 07 00 00 07 00 00 07 e0 01     .>..............
     3d4:	07 fc 01 87 ff 01 e7 1f 00 f7 03 00 ff 00 00 3f     ...............?
     3e4:	00 00 1f 00 00 07 00 00 0c 00 00 00 78 3c 00 fe     ............x<..
     3f4:	fe 00 fe ff 00 cf e7 01 87 c3 01 87 c3 01 87 c3     ................
     404:	01 cf e7 01 fe ff 00 fe fe 00 78 3c 00 0c 00 00     ..........x<....
     414:	00 f8 30 00 fc f3 00 fe f3 00 8f e7 01 07 c7 01     ..0.............
     424:	07 c7 01 07 c7 01 8f e3 00 fe ff 00 fc 7f 00 f0     ................
     434:	1f 00                                               ..

00000436 <Arial_Narrow18x32>:
     436:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
     446:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
     456:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
     466:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
     476:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
     486:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
     496:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
     4a6:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
     4b6:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
     4c6:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
     4d6:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     4e6:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     4f6:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     506:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     516:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     526:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     536:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     546:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     556:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     566:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     576:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     586:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     596:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     5a6:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     5b6:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     5c6:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     5d6:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     5e6:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     5f6:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     606:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     616:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     626:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     636:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     646:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     656:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     666:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     676:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     686:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     696:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     6a6:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     6b6:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     6c6:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     6d6:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     6e6:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     6f6:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     706:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     716:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     726:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     736:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     746:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     756:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     766:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     776:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     786:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     796:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     7a6:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     7b6:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     7c6:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     7d6:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     7e6:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     7f6:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     806:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     816:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     826:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     842:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     87a:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     88a:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     89a:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     8aa:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     8ba:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     8ca:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     8da:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     8ea:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     8fa:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     90a:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     91a:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     92a:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     93a:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     956:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     966:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     976:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     986:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     996:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     9a6:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     9b6:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     9c6:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     9d6:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     9e6:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     9f6:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     a06:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     a16:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     a26:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     a36:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     a46:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     a56:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     a66:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     a76:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     a86:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     a96:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     aa6:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     ab6:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     ac6:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     ad6:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     ae6:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     af6:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     b06:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     b16:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     b26:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     b36:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     b46:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     b56:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     b66:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     b76:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     b86:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     b96:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

00000ba0 <Font5x8>:
     ba0:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     bb0:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     bc0:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     bd0:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     be0:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     bf0:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     c00:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     c10:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     c20:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     c30:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     c40:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     c50:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     c60:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     c70:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     c80:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     c90:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     ca0:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     cb0:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     cc0:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     cd0:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     ce0:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     cf0:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     d00:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     d10:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     d20:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     d30:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     d40:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     d50:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     d60:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     d70:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     d80:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     d90:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     da0:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     db0:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     dc0:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     dd0:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00000de0 <arrowLeft>:
	...
     df4:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     e48:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e68:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e78:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e88:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     e98:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     f58:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb8:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     fc8:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ff8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    101c:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00001064 <arrowRight>:
	...
    10a0:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
    10c0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10d0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10e0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    10f0:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
    1100:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
    111c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    112c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    113c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116c:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
    117c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    118c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    119c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11cc:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
    11dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    120c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    121c:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
    122c:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    123c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    124c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    125c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    126c:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    127c:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12c8:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

000012e8 <skull>:
    12e8:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
    1300:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
    1310:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
    1320:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
    1330:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
    1340:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
    1350:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
    1360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
    1380:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
    1390:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
    13a0:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
    13b0:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
    13c0:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
    13d0:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
    13e0:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
    1400:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
    1410:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
    1420:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
    1430:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1440:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
    1450:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
    1460:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
    1470:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
    1480:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
    1490:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
    14a0:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
    14b0:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
    14c0:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
    14d8:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
    14e8:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    14f8:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1508:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
    1518:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    1530:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00001542 <__ctors_end>:
    1542:	11 24       	eor	r1, r1
    1544:	1f be       	out	0x3f, r1	; 63
    1546:	cf e5       	ldi	r28, 0x5F	; 95
    1548:	d8 e0       	ldi	r29, 0x08	; 8
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	cd bf       	out	0x3d, r28	; 61

0000154e <__do_copy_data>:
    154e:	11 e0       	ldi	r17, 0x01	; 1
    1550:	a0 e6       	ldi	r26, 0x60	; 96
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e2 e1       	ldi	r30, 0x12	; 18
    1556:	fc e4       	ldi	r31, 0x4C	; 76
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__do_copy_data+0x10>
    155a:	05 90       	lpm	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	a6 3f       	cpi	r26, 0xF6	; 246
    1560:	b1 07       	cpc	r27, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <__do_copy_data+0xc>

00001564 <__do_clear_bss>:
    1564:	26 e0       	ldi	r18, 0x06	; 6
    1566:	a6 ef       	ldi	r26, 0xF6	; 246
    1568:	b1 e0       	ldi	r27, 0x01	; 1
    156a:	01 c0       	rjmp	.+2      	; 0x156e <.do_clear_bss_start>

0000156c <.do_clear_bss_loop>:
    156c:	1d 92       	st	X+, r1

0000156e <.do_clear_bss_start>:
    156e:	a7 33       	cpi	r26, 0x37	; 55
    1570:	b2 07       	cpc	r27, r18
    1572:	e1 f7       	brne	.-8      	; 0x156c <.do_clear_bss_loop>
    1574:	0e 94 98 18 	call	0x3130	; 0x3130 <main>
    1578:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <_exit>

0000157c <__bad_interrupt>:
    157c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001580 <new_value.2893>:
	tempValue = currValue;
	valueLength = 0;


	uint16_t new_value (void)
	{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	d1 01       	movw	r26, r2
		uint16_t newValue = 0;
		//gathering digits back to the integer
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    158e:	17 96       	adiw	r26, 0x07	; 7
    1590:	8c 91       	ld	r24, X
    1592:	17 97       	sbiw	r26, 0x07	; 7
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	16 96       	adiw	r26, 0x06	; 6
    1598:	8c 93       	st	X, r24
    159a:	16 97       	sbiw	r26, 0x06	; 6
    159c:	88 23       	and	r24, r24
    159e:	84 f1       	brlt	.+96     	; 0x1600 <new_value.2893+0x80>
			uint16_t tenPower = digitsArr[digitIndex];
    15a0:	14 96       	adiw	r26, 0x04	; 4
    15a2:	0d 91       	ld	r16, X+
    15a4:	1c 91       	ld	r17, X
    15a6:	15 97       	sbiw	r26, 0x05	; 5
    15a8:	e0 e0       	ldi	r30, 0x00	; 0
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	68 2f       	mov	r22, r24
    15ae:	08 2e       	mov	r0, r24
    15b0:	00 0c       	add	r0, r0
    15b2:	77 0b       	sbc	r23, r23
    15b4:	98 01       	movw	r18, r16
    15b6:	26 0f       	add	r18, r22
    15b8:	37 1f       	adc	r19, r23
    15ba:	e9 01       	movw	r28, r18
    15bc:	28 81       	ld	r18, Y
    15be:	02 2e       	mov	r0, r18
    15c0:	00 0c       	add	r0, r0
    15c2:	33 0b       	sbc	r19, r19
			for (uint8_t j = 0;j<digitIndex;j++){
    15c4:	16 16       	cp	r1, r22
    15c6:	17 06       	cpc	r1, r23
    15c8:	94 f4       	brge	.+36     	; 0x15ee <new_value.2893+0x6e>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
				tenPower*=10;
    15cc:	a9 01       	movw	r20, r18
    15ce:	44 0f       	add	r20, r20
    15d0:	55 1f       	adc	r21, r21
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	22 0f       	add	r18, r18
    15d8:	33 1f       	adc	r19, r19
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	24 0f       	add	r18, r20
    15e0:	35 1f       	adc	r19, r21
	{
		uint16_t newValue = 0;
		//gathering digits back to the integer
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
			uint16_t tenPower = digitsArr[digitIndex];
			for (uint8_t j = 0;j<digitIndex;j++){
    15e2:	9f 5f       	subi	r25, 0xFF	; 255
    15e4:	49 2f       	mov	r20, r25
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	46 17       	cp	r20, r22
    15ea:	57 07       	cpc	r21, r23
    15ec:	7c f3       	brlt	.-34     	; 0x15cc <new_value.2893+0x4c>
				tenPower*=10;
			}
			newValue += tenPower;
    15ee:	e2 0f       	add	r30, r18
    15f0:	f3 1f       	adc	r31, r19
    15f2:	81 50       	subi	r24, 0x01	; 1

	uint16_t new_value (void)
	{
		uint16_t newValue = 0;
		//gathering digits back to the integer
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	8c 93       	st	X, r24
    15f8:	16 97       	sbiw	r26, 0x06	; 6
    15fa:	88 23       	and	r24, r24
    15fc:	bc f6       	brge	.-82     	; 0x15ac <new_value.2893+0x2c>
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <new_value.2893+0x84>
	valueLength = 0;


	uint16_t new_value (void)
	{
		uint16_t newValue = 0;
    1600:	e0 e0       	ldi	r30, 0x00	; 0
    1602:	f0 e0       	ldi	r31, 0x00	; 0
				tenPower*=10;
			}
			newValue += tenPower;
		}
		return newValue;
	}
    1604:	cf 01       	movw	r24, r30
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	3f 90       	pop	r3
    1610:	2f 90       	pop	r2
    1612:	08 95       	ret

00001614 <step>:

void step(uint8_t mode){
	char tempPort = 0;
	signed int tempPhase = 0;

	if (dir)
    1614:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dir>
    1618:	99 23       	and	r25, r25
    161a:	81 f0       	breq	.+32     	; 0x163c <step+0x28>
	{
		phase++;
    161c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <phase>
    1620:	9f 5f       	subi	r25, 0xFF	; 255
    1622:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <phase>
		steps++;
    1626:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <steps>
    162a:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <steps+0x1>
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <steps+0x1>
    1636:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <steps>
    163a:	0f c0       	rjmp	.+30     	; 0x165a <step+0x46>
	}
	else
	{
		phase--;
    163c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <phase>
    1640:	91 50       	subi	r25, 0x01	; 1
    1642:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <phase>
		steps--;
    1646:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <steps>
    164a:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <steps+0x1>
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	31 09       	sbc	r19, r1
    1652:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <steps+0x1>
    1656:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <steps>
	}
	if(mode == FULL_STEP){
    165a:	81 11       	cpse	r24, r1
    165c:	0e c0       	rjmp	.+28     	; 0x167a <step+0x66>
		if (phase < 0) phase = 3;
    165e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <phase>
    1662:	88 23       	and	r24, r24
    1664:	1c f4       	brge	.+6      	; 0x166c <step+0x58>
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <phase>
		if (phase > 3) phase = 0;
    166c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <phase>
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	34 f1       	brlt	.+76     	; 0x16c0 <step+0xac>
    1674:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <phase>
    1678:	23 c0       	rjmp	.+70     	; 0x16c0 <step+0xac>
	}
	if(mode == HALF_STEP){
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	e1 f4       	brne	.+56     	; 0x16b6 <step+0xa2>
		if (phase < 0) phase = 7;
    167e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <phase>
    1682:	88 23       	and	r24, r24
    1684:	1c f4       	brge	.+6      	; 0x168c <step+0x78>
    1686:	87 e0       	ldi	r24, 0x07	; 7
    1688:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <phase>
		if (phase > 7) phase = 0;
    168c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <phase>
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	2c f0       	brlt	.+10     	; 0x169e <step+0x8a>
    1694:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <phase>
    1698:	02 c0       	rjmp	.+4      	; 0x169e <step+0x8a>
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
	if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[tempPhase];
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[tempPhase];

	PORTA = tempPort;
    169a:	8b bb       	out	0x1b, r24	; 27

}
    169c:	08 95       	ret
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	}
	tempPhase = phase;
    169e:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <phase>

	tempPort=PORTA;
    16a2:	8b b3       	in	r24, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    16a4:	80 7f       	andi	r24, 0xF0	; 240
	if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[tempPhase];
	if(mode == HALF_STEP) tempPort|=phaseArrayHalfStep[tempPhase];
    16a6:	0e 2e       	mov	r0, r30
    16a8:	00 0c       	add	r0, r0
    16aa:	ff 0b       	sbc	r31, r31
    16ac:	e6 51       	subi	r30, 0x16	; 22
    16ae:	fe 4f       	sbci	r31, 0xFE	; 254
    16b0:	90 81       	ld	r25, Z
    16b2:	89 2b       	or	r24, r25
    16b4:	f2 cf       	rjmp	.-28     	; 0x169a <step+0x86>
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	}
	tempPhase = phase;
    16b6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <phase>

	tempPort=PORTA;
    16ba:	8b b3       	in	r24, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    16bc:	80 7f       	andi	r24, 0xF0	; 240
    16be:	ed cf       	rjmp	.-38     	; 0x169a <step+0x86>
	}
	if(mode == HALF_STEP){
		if (phase < 0) phase = 7;
		if (phase > 7) phase = 0;
	}
	tempPhase = phase;
    16c0:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <phase>

	tempPort=PORTA;
    16c4:	8b b3       	in	r24, 0x1b	; 27
	tempPort&=~_BV(0);
	tempPort&=~_BV(1);
	tempPort&=~_BV(2);
	tempPort&=~_BV(3);
    16c6:	80 7f       	andi	r24, 0xF0	; 240
	if(mode == FULL_STEP) tempPort|=phaseArrayFullStep[tempPhase];
    16c8:	0e 2e       	mov	r0, r30
    16ca:	00 0c       	add	r0, r0
    16cc:	ff 0b       	sbc	r31, r31
    16ce:	ee 50       	subi	r30, 0x0E	; 14
    16d0:	fe 4f       	sbci	r31, 0xFE	; 254
    16d2:	90 81       	ld	r25, Z
    16d4:	89 2b       	or	r24, r25
    16d6:	e1 cf       	rjmp	.-62     	; 0x169a <step+0x86>

000016d8 <__vector_10>:
//arrow_calibration();
MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
GICR|=_BV(INT1); //External Interrupt Enable INT1
}

ISR( TIMER0_COMP_vect ){
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
	step(stepMode);
    16fa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    16fe:	0e 94 0a 0b 	call	0x1614	; 0x1614 <step>
	if (steps == newSteps){
    1702:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <steps>
    1706:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <steps+0x1>
    170a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <newSteps>
    170e:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <newSteps+0x1>
    1712:	28 17       	cp	r18, r24
    1714:	39 07       	cpc	r19, r25
    1716:	39 f4       	brne	.+14     	; 0x1726 <__vector_10+0x4e>
	arrowMoving = 0;
    1718:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <arrowMoving>
	TCCR0 = 0;
    171c:	13 be       	out	0x33, r1	; 51
	OCR0 = 0;
    171e:	1c be       	out	0x3c, r1	; 60
	TIMSK&=~_BV(OCIE0);
    1720:	89 b7       	in	r24, 0x39	; 57
    1722:	8d 7f       	andi	r24, 0xFD	; 253
    1724:	89 bf       	out	0x39, r24	; 57
	}
}
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_4>:
	PORTA = tempPort;

}


ISR( TIMER2_COMP_vect ){
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
	speedTimer++; //speedTimer increments each period timePerTic*TIC
    1756:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <speedTimer>
    175a:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <speedTimer+0x1>
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <speedTimer+0x1>
    1764:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <speedTimer>
	}
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <__vector_9>:
ISR (TIMER1_OVF_vect){
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
	if (signalOn) signalCounter++;
    1784:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <signalOn>
    1788:	88 23       	and	r24, r24
    178a:	49 f0       	breq	.+18     	; 0x179e <__vector_9+0x28>
    178c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <signalCounter>
    1790:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <signalCounter+0x1>
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <signalCounter+0x1>
    179a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <signalCounter>
}
    179e:	9f 91       	pop	r25
    17a0:	8f 91       	pop	r24
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_2>:
ISR(INT1_vect){
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
//interrupt occurs when Hall sensor is triggered
if (firstMeasure)
    17c6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <firstMeasure>
    17ca:	88 23       	and	r24, r24
    17cc:	69 f1       	breq	.+90     	; 0x1828 <__vector_2+0x7c>
	{
		speedTimerRecent = (speedTimer*TIC) + TCNT2;
    17ce:	40 91 27 02 	lds	r20, 0x0227	; 0x800227 <speedTimer>
    17d2:	50 91 28 02 	lds	r21, 0x0228	; 0x800228 <speedTimer+0x1>
    17d6:	24 b5       	in	r18, 0x24	; 36
    17d8:	34 e1       	ldi	r19, 0x14	; 20
    17da:	34 9f       	mul	r19, r20
    17dc:	c0 01       	movw	r24, r0
    17de:	35 9f       	mul	r19, r21
    17e0:	90 0d       	add	r25, r0
    17e2:	11 24       	eor	r1, r1
    17e4:	82 0f       	add	r24, r18
    17e6:	91 1d       	adc	r25, r1
    17e8:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <speedTimerRecent+0x1>
    17ec:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <speedTimerRecent>
		TCNT2 = 0;
    17f0:	14 bc       	out	0x24, r1	; 36
		speedTimer = 0;
    17f2:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <speedTimer+0x1>
    17f6:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <speedTimer>
		speedRefresh = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <speedRefresh>
		totalRotations++;
    1800:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <totalRotations>
    1804:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <totalRotations+0x1>
    1808:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <totalRotations+0x2>
    180c:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <totalRotations+0x3>
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	a1 1d       	adc	r26, r1
    1814:	b1 1d       	adc	r27, r1
    1816:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <totalRotations>
    181a:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <totalRotations+0x1>
    181e:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <totalRotations+0x2>
    1822:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <totalRotations+0x3>
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <__vector_2+0x8a>
	}
else
	{
		//first triggering of the sensor starts TIMER2
		TIMSK|=_BV(OCIE2);
    1828:	89 b7       	in	r24, 0x39	; 57
    182a:	80 68       	ori	r24, 0x80	; 128
    182c:	89 bf       	out	0x39, r24	; 57
		TCNT2 = 0;
    182e:	14 bc       	out	0x24, r1	; 36
		firstMeasure = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <firstMeasure>
	}
}
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	0f 90       	pop	r0
    184c:	1f 90       	pop	r1
    184e:	18 95       	reti

00001850 <main_screen>:
	}

}

void main_screen()
{
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
	if (!signalOn){
    1866:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <signalOn>
    186a:	81 11       	cpse	r24, r1
    186c:	f3 c0       	rjmp	.+486    	; 0x1a54 <main_screen+0x204>

	uint8_t offsetX = 10;
	uint8_t offsetY = 11;
		GLCD_Clear();
    186e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
		GLCD_DrawRectangle(offsetX,offsetY,26+offsetX,12+offsetY,GLCD_Black);
    1872:	0f ef       	ldi	r16, 0xFF	; 255
    1874:	27 e1       	ldi	r18, 0x17	; 23
    1876:	44 e2       	ldi	r20, 0x24	; 36
    1878:	6b e0       	ldi	r22, 0x0B	; 11
    187a:	8a e0       	ldi	r24, 0x0A	; 10
    187c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
		GLCD_DrawRectangle(27+offsetX,3+offsetY,28+offsetX,9+offsetY,GLCD_Black);
    1880:	24 e1       	ldi	r18, 0x14	; 20
    1882:	46 e2       	ldi	r20, 0x26	; 38
    1884:	6e e0       	ldi	r22, 0x0E	; 14
    1886:	85 e2       	ldi	r24, 0x25	; 37
    1888:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>


		if (voltage>=105)GLCD_FillRectangle(2+offsetX,2+offsetY,6+offsetX,10+offsetY,GLCD_Black);
    188c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <voltage>
    1890:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <voltage+0x1>
    1894:	89 36       	cpi	r24, 0x69	; 105
    1896:	91 05       	cpc	r25, r1
    1898:	34 f0       	brlt	.+12     	; 0x18a6 <main_screen+0x56>
    189a:	25 e1       	ldi	r18, 0x15	; 21
    189c:	40 e1       	ldi	r20, 0x10	; 16
    189e:	6d e0       	ldi	r22, 0x0D	; 13
    18a0:	8c e0       	ldi	r24, 0x0C	; 12
    18a2:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <GLCD_FillRectangle>
		if (voltage>=110)GLCD_FillRectangle(8+offsetX,2+offsetY,12+offsetX,10+offsetY,GLCD_Black);
    18a6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <voltage>
    18aa:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <voltage+0x1>
    18ae:	8e 36       	cpi	r24, 0x6E	; 110
    18b0:	91 05       	cpc	r25, r1
    18b2:	3c f0       	brlt	.+14     	; 0x18c2 <main_screen+0x72>
    18b4:	0f ef       	ldi	r16, 0xFF	; 255
    18b6:	25 e1       	ldi	r18, 0x15	; 21
    18b8:	46 e1       	ldi	r20, 0x16	; 22
    18ba:	6d e0       	ldi	r22, 0x0D	; 13
    18bc:	82 e1       	ldi	r24, 0x12	; 18
    18be:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <GLCD_FillRectangle>
		if (voltage>=115)GLCD_FillRectangle(14+offsetX,2+offsetY,18+offsetX,10+offsetY, GLCD_Black);
    18c2:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <voltage>
    18c6:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <voltage+0x1>
    18ca:	83 37       	cpi	r24, 0x73	; 115
    18cc:	91 05       	cpc	r25, r1
    18ce:	3c f0       	brlt	.+14     	; 0x18de <main_screen+0x8e>
    18d0:	0f ef       	ldi	r16, 0xFF	; 255
    18d2:	25 e1       	ldi	r18, 0x15	; 21
    18d4:	4c e1       	ldi	r20, 0x1C	; 28
    18d6:	6d e0       	ldi	r22, 0x0D	; 13
    18d8:	88 e1       	ldi	r24, 0x18	; 24
    18da:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <GLCD_FillRectangle>
		if (voltage>=120)GLCD_FillRectangle(20+offsetX,2+offsetY,24+offsetX,10+offsetY,GLCD_Black);
    18de:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <voltage>
    18e2:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <voltage+0x1>
    18e6:	88 37       	cpi	r24, 0x78	; 120
    18e8:	91 05       	cpc	r25, r1
    18ea:	3c f0       	brlt	.+14     	; 0x18fa <main_screen+0xaa>
    18ec:	0f ef       	ldi	r16, 0xFF	; 255
    18ee:	25 e1       	ldi	r18, 0x15	; 21
    18f0:	42 e2       	ldi	r20, 0x22	; 34
    18f2:	6d e0       	ldi	r22, 0x0D	; 13
    18f4:	8e e1       	ldi	r24, 0x1E	; 30
    18f6:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <GLCD_FillRectangle>

		GLCD_GotoXY(33+offsetX, 4+offsetY);
    18fa:	6f e0       	ldi	r22, 0x0F	; 15
    18fc:	8b e2       	ldi	r24, 0x2B	; 43
    18fe:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	48 e0       	ldi	r20, 0x08	; 8
    1906:	65 e0       	ldi	r22, 0x05	; 5
    1908:	80 ea       	ldi	r24, 0xA0	; 160
    190a:	9b e0       	ldi	r25, 0x0B	; 11
    190c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
		GLCD_PrintDouble(voltage/10.0,10);
    1910:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <voltage>
    1914:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <voltage+0x1>
    1918:	07 2e       	mov	r0, r23
    191a:	00 0c       	add	r0, r0
    191c:	88 0b       	sbc	r24, r24
    191e:	99 0b       	sbc	r25, r25
    1920:	0e 94 b7 22 	call	0x456e	; 0x456e <__floatsisf>
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e2       	ldi	r20, 0x20	; 32
    192a:	51 e4       	ldi	r21, 0x41	; 65
    192c:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    1930:	2a e0       	ldi	r18, 0x0A	; 10
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
		GLCD_PrintString("V");
    193c:	8e e7       	ldi	r24, 0x7E	; 126
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>


	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	62 e1       	ldi	r22, 0x12	; 18
    194a:	86 e3       	ldi	r24, 0x36	; 54
    194c:	94 e0       	ldi	r25, 0x04	; 4
    194e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
	GLCD_GotoXY(2+2, 31);
    1952:	6f e1       	ldi	r22, 0x1F	; 31
    1954:	84 e0       	ldi	r24, 0x04	; 4
    1956:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    195a:	80 90 05 02 	lds	r8, 0x0205	; 0x800205 <distance>
    195e:	90 90 06 02 	lds	r9, 0x0206	; 0x800206 <distance+0x1>
    1962:	a0 90 07 02 	lds	r10, 0x0207	; 0x800207 <distance+0x2>
    1966:	b0 90 08 02 	lds	r11, 0x0208	; 0x800208 <distance+0x3>
    196a:	84 e6       	ldi	r24, 0x64	; 100
    196c:	88 16       	cp	r8, r24
    196e:	91 04       	cpc	r9, r1
    1970:	a1 04       	cpc	r10, r1
    1972:	b1 04       	cpc	r11, r1
    1974:	70 f0       	brcs	.+28     	; 0x1992 <main_screen+0x142>
    1976:	c5 01       	movw	r24, r10
    1978:	b4 01       	movw	r22, r8
    197a:	2a e0       	ldi	r18, 0x0A	; 10
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	0e 94 3a 24 	call	0x4874	; 0x4874 <__udivmodsi4>
		uint8_t l = 0;

			while(tempDistance){
    1986:	21 15       	cp	r18, r1
    1988:	31 05       	cpc	r19, r1
    198a:	41 05       	cpc	r20, r1
    198c:	51 05       	cpc	r21, r1
    198e:	29 f4       	brne	.+10     	; 0x199a <main_screen+0x14a>
    1990:	5b c0       	rjmp	.+182    	; 0x1a48 <main_screen+0x1f8>

	GLCD_SetFont(Arial_Narrow18x32, 18, 32, GLCD_Overwrite);
	GLCD_GotoXY(2+2, 31);
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
    1992:	24 e6       	ldi	r18, 0x64	; 100
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t l = 0;

			while(tempDistance){
			tempDistance/=10;
    199c:	0f 2e       	mov	r0, r31
    199e:	fa e0       	ldi	r31, 0x0A	; 10
    19a0:	cf 2e       	mov	r12, r31
    19a2:	d1 2c       	mov	r13, r1
    19a4:	e1 2c       	mov	r14, r1
    19a6:	f1 2c       	mov	r15, r1
    19a8:	f0 2d       	mov	r31, r0
    19aa:	ca 01       	movw	r24, r20
    19ac:	b9 01       	movw	r22, r18
    19ae:	a7 01       	movw	r20, r14
    19b0:	96 01       	movw	r18, r12
    19b2:	0e 94 3a 24 	call	0x4874	; 0x4874 <__udivmodsi4>
			l++;
    19b6:	cf 5f       	subi	r28, 0xFF	; 255
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

			while(tempDistance){
    19b8:	21 15       	cp	r18, r1
    19ba:	31 05       	cpc	r19, r1
    19bc:	41 05       	cpc	r20, r1
    19be:	51 05       	cpc	r21, r1
    19c0:	a1 f7       	brne	.-24     	; 0x19aa <main_screen+0x15a>
			tempDistance/=10;
			l++;
			}

	int8_t zeros = 6-l;
	if (distance < 100)zeros = 4;
    19c2:	84 e6       	ldi	r24, 0x64	; 100
    19c4:	88 16       	cp	r8, r24
    19c6:	91 04       	cpc	r9, r1
    19c8:	a1 04       	cpc	r10, r1
    19ca:	b1 04       	cpc	r11, r1
    19cc:	f0 f5       	brcc	.+124    	; 0x1a4a <main_screen+0x1fa>
    19ce:	d4 e0       	ldi	r29, 0x04	; 4
    19d0:	c0 e0       	ldi	r28, 0x00	; 0
		if (zeros > 0){
			for (int8_t i=0;i<zeros;i++){

				GLCD_PrintString("0");
    19d2:	80 e8       	ldi	r24, 0x80	; 128
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
    19da:	cf 5f       	subi	r28, 0xFF	; 255
			}

	int8_t zeros = 6-l;
	if (distance < 100)zeros = 4;
		if (zeros > 0){
			for (int8_t i=0;i<zeros;i++){
    19dc:	cd 17       	cp	r28, r29
    19de:	cc f3       	brlt	.-14     	; 0x19d2 <main_screen+0x182>

				GLCD_PrintString("0");

			}
		}
	GLCD_PrintDouble((double)distance/100.0,10);
    19e0:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <distance>
    19e4:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <distance+0x1>
    19e8:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <distance+0x2>
    19ec:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <distance+0x3>
    19f0:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	48 ec       	ldi	r20, 0xC8	; 200
    19fa:	52 e4       	ldi	r21, 0x42	; 66
    19fc:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    1a00:	2a e0       	ldi	r18, 0x0A	; 10
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	48 e0       	ldi	r20, 0x08	; 8
    1a10:	65 e0       	ldi	r22, 0x05	; 5
    1a12:	80 ea       	ldi	r24, 0xA0	; 160
    1a14:	9b e0       	ldi	r25, 0x0B	; 11
    1a16:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
	GLCD_GotoXY(64, 0);
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	80 e4       	ldi	r24, 0x40	; 64
    1a1e:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
	GLCD_PrintDouble(speedKmh,10);
    1a22:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <speedKmh>
    1a26:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <speedKmh+0x1>
    1a2a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <speedKmh+0x2>
    1a2e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <speedKmh+0x3>
    1a32:	2a e0       	ldi	r18, 0x0A	; 10
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
	GLCD_Render();
    1a3e:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>


		GLCD_Render();
    1a42:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
		}

}
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <main_screen+0x204>
		uint32_t tempDistance = 0;

		if (distance>99){tempDistance = distance/10;} else{tempDistance = 100;}
		uint8_t l = 0;

			while(tempDistance){
    1a48:	c0 e0       	ldi	r28, 0x00	; 0
			tempDistance/=10;
			l++;
			}

	int8_t zeros = 6-l;
    1a4a:	d6 e0       	ldi	r29, 0x06	; 6
    1a4c:	dc 1b       	sub	r29, r28
	if (distance < 100)zeros = 4;
		if (zeros > 0){
    1a4e:	1d 16       	cp	r1, r29
    1a50:	3c f6       	brge	.-114    	; 0x19e0 <main_screen+0x190>
    1a52:	be cf       	rjmp	.-132    	; 0x19d0 <main_screen+0x180>


		GLCD_Render();
		}

}
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	bf 90       	pop	r11
    1a64:	af 90       	pop	r10
    1a66:	9f 90       	pop	r9
    1a68:	8f 90       	pop	r8
    1a6a:	08 95       	ret

00001a6c <speed_arrow_update>:
			}
	return 0;
}

void speed_arrow_update(){
				if (stepMode == FULL_STEP)	 newSteps = speedKmh/kmhPerStep;	
    1a6c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    1a70:	81 11       	cpse	r24, r1
    1a72:	19 c0       	rjmp	.+50     	; 0x1aa6 <speed_arrow_update+0x3a>
    1a74:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <kmhPerStep>
    1a78:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <kmhPerStep+0x1>
    1a7c:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <kmhPerStep+0x2>
    1a80:	50 91 00 02 	lds	r21, 0x0200	; 0x800200 <kmhPerStep+0x3>
    1a84:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <speedKmh>
    1a88:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <speedKmh+0x1>
    1a8c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <speedKmh+0x2>
    1a90:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <speedKmh+0x3>
    1a94:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    1a98:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    1a9c:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <newSteps+0x1>
    1aa0:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <newSteps>
    1aa4:	1a c0       	rjmp	.+52     	; 0x1ada <speed_arrow_update+0x6e>
				else if (stepMode == HALF_STEP) newSteps = speedKmh/kmhPerStep;
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	c1 f4       	brne	.+48     	; 0x1ada <speed_arrow_update+0x6e>
    1aaa:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <kmhPerStep>
    1aae:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <kmhPerStep+0x1>
    1ab2:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <kmhPerStep+0x2>
    1ab6:	50 91 00 02 	lds	r21, 0x0200	; 0x800200 <kmhPerStep+0x3>
    1aba:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <speedKmh>
    1abe:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <speedKmh+0x1>
    1ac2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <speedKmh+0x2>
    1ac6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <speedKmh+0x3>
    1aca:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    1ace:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    1ad2:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <newSteps+0x1>
    1ad6:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <newSteps>
				int16_t shiftSteps = steps - newSteps;	//difference in speedometer readings (how much the arrow should be shifted)
    1ada:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <steps>
    1ade:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <steps+0x1>
    1ae2:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <newSteps>
    1ae6:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <newSteps+0x1>
    1aea:	82 1b       	sub	r24, r18
    1aec:	93 0b       	sbc	r25, r19
				if (shiftSteps > 0){dir = 0;}else {dir = 1;}
    1aee:	18 16       	cp	r1, r24
    1af0:	19 06       	cpc	r1, r25
    1af2:	1c f4       	brge	.+6      	; 0x1afa <speed_arrow_update+0x8e>
    1af4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <dir>
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <speed_arrow_update+0x98>
    1afa:	21 e0       	ldi	r18, 0x01	; 1
    1afc:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <dir>
				if (abs(shiftSteps)){
    1b00:	89 2b       	or	r24, r25
    1b02:	71 f0       	breq	.+28     	; 0x1b20 <speed_arrow_update+0xb4>
					arrowMoving = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <arrowMoving>

					TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1b0a:	83 b7       	in	r24, 0x33	; 51
    1b0c:	8d 60       	ori	r24, 0x0D	; 13
    1b0e:	83 bf       	out	0x33, r24	; 51
					OCR0 = stepInterval;	//interval between steps (Affects Stepper Motor Rotation Speed)
    1b10:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1b14:	8c bf       	out	0x3c, r24	; 60
					TIMSK|=_BV(OCIE0);
    1b16:	89 b7       	in	r24, 0x39	; 57
    1b18:	82 60       	ori	r24, 0x02	; 2
    1b1a:	89 bf       	out	0x39, r24	; 57

				main_screen();
    1b1c:	0e 94 28 0c 	call	0x1850	; 0x1850 <main_screen>
    1b20:	08 95       	ret

00001b22 <button_monitor>:
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
    1b22:	b5 9b       	sbis	0x16, 5	; 22
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <button_monitor+0xc>
    1b26:	b6 9b       	sbis	0x16, 6	; 22
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <button_monitor+0xc>
    1b2a:	b7 99       	sbic	0x16, 7	; 22
    1b2c:	2a c0       	rjmp	.+84     	; 0x1b82 <button_monitor+0x60>
		btnPressed = 0;
		return 0;
	}
	else if((!(PINB&_BV(5)))&&(!btnPressed)){
    1b2e:	b5 99       	sbic	0x16, 5	; 22
    1b30:	0d c0       	rjmp	.+26     	; 0x1b4c <button_monitor+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b32:	8f e9       	ldi	r24, 0x9F	; 159
    1b34:	9f e0       	ldi	r25, 0x0F	; 15
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <button_monitor+0x14>
    1b3a:	00 c0       	rjmp	.+0      	; 0x1b3c <button_monitor+0x1a>
    1b3c:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
    1b3e:	86 b3       	in	r24, 0x16	; 22

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b40:	85 fb       	bst	r24, 5
    1b42:	99 27       	eor	r25, r25
    1b44:	90 f9       	bld	r25, 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 27       	eor	r24, r25
    1b4a:	08 95       	ret
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(5))){
			btnPressed = 1;
		}
	}
	else if((!(PINB&_BV(6)))&&(!btnPressed)){
    1b4c:	96 b3       	in	r25, 0x16	; 22
    1b4e:	89 2f       	mov	r24, r25
    1b50:	80 74       	andi	r24, 0x40	; 64
    1b52:	96 fd       	sbrc	r25, 6
    1b54:	0a c0       	rjmp	.+20     	; 0x1b6a <button_monitor+0x48>
    1b56:	ef e9       	ldi	r30, 0x9F	; 159
    1b58:	ff e0       	ldi	r31, 0x0F	; 15
    1b5a:	31 97       	sbiw	r30, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <button_monitor+0x38>
    1b5e:	00 c0       	rjmp	.+0      	; 0x1b60 <button_monitor+0x3e>
    1b60:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(6))){
    1b62:	b6 99       	sbic	0x16, 6	; 22
    1b64:	13 c0       	rjmp	.+38     	; 0x1b8c <button_monitor+0x6a>
		btnPressed = 2;
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	08 95       	ret
		}
	}
	else if((!(PINB&_BV(7)))&&(!btnPressed)){
    1b6a:	b7 99       	sbic	0x16, 7	; 22
    1b6c:	0c c0       	rjmp	.+24     	; 0x1b86 <button_monitor+0x64>
    1b6e:	8f e9       	ldi	r24, 0x9F	; 159
    1b70:	9f e0       	ldi	r25, 0x0F	; 15
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <button_monitor+0x50>
    1b76:	00 c0       	rjmp	.+0      	; 0x1b78 <button_monitor+0x56>
    1b78:	00 00       	nop
		_delay_ms(BOUNCE_DELAY);
		if(!(PINB&_BV(7))){
    1b7a:	b7 99       	sbic	0x16, 7	; 22
    1b7c:	06 c0       	rjmp	.+12     	; 0x1b8a <button_monitor+0x68>
		btnPressed = 3;
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	08 95       	ret

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
	if ((PINB&_BV(5))&&(PINB&_BV(6))&&(PINB&_BV(7))){
		btnPressed = 0;
		return 0;
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	08 95       	ret
		main_screen();
	}
}

uint8_t button_monitor(){
	uint8_t btnPressed = 0;
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	08 95       	ret
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PINB&_BV(7))){
		btnPressed = 3;
		}
	}
	return btnPressed;
}
    1b8c:	08 95       	ret

00001b8e <arrow_calibration>:
void arrow_calibration(){
	int calibrationSteps = 0;
	if (stepMode==FULL_STEP){
    1b8e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    1b92:	81 11       	cpse	r24, r1
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <arrow_calibration+0x12>
		calibrationSteps = smSteps;
    1b96:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <smSteps>
    1b9a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <smSteps+0x1>
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <arrow_calibration+0x1e>
	}else{
		calibrationSteps = smSteps*2;
    1ba0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <smSteps>
    1ba4:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <smSteps+0x1>
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
	}


steps = 0;
    1bac:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <steps+0x1>
    1bb0:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <steps>
phase = 0;
    1bb4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <phase>

	newSteps = calibrationSteps/4;	//moving arrow 90 degrees clockwise
    1bb8:	c9 01       	movw	r24, r18
    1bba:	33 23       	and	r19, r19
    1bbc:	0c f4       	brge	.+2      	; 0x1bc0 <arrow_calibration+0x32>
    1bbe:	03 96       	adiw	r24, 0x03	; 3
    1bc0:	95 95       	asr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	95 95       	asr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <newSteps+0x1>
    1bcc:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <newSteps>
		dir = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <dir>
		arrowMoving = 1;
    1bd6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <arrowMoving>

		TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1bda:	83 b7       	in	r24, 0x33	; 51
    1bdc:	8d 60       	ori	r24, 0x0D	; 13
    1bde:	83 bf       	out	0x33, r24	; 51
		OCR0 = stepInterval;
    1be0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1be4:	8c bf       	out	0x3c, r24	; 60
		TIMSK|=_BV(OCIE0);
    1be6:	89 b7       	in	r24, 0x39	; 57
    1be8:	82 60       	ori	r24, 0x02	; 2
    1bea:	89 bf       	out	0x39, r24	; 57


while (arrowMoving);
    1bec:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <arrowMoving>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	fc cf       	rjmp	.-8      	; 0x1bec <arrow_calibration+0x5e>
    1bf4:	4f ef       	ldi	r20, 0xFF	; 255
    1bf6:	82 e5       	ldi	r24, 0x52	; 82
    1bf8:	97 e0       	ldi	r25, 0x07	; 7
    1bfa:	41 50       	subi	r20, 0x01	; 1
    1bfc:	80 40       	sbci	r24, 0x00	; 0
    1bfe:	90 40       	sbci	r25, 0x00	; 0
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <arrow_calibration+0x6c>
    1c02:	00 c0       	rjmp	.+0      	; 0x1c04 <arrow_calibration+0x76>
    1c04:	00 00       	nop

	_delay_ms(150);
	steps = calibrationSteps;
    1c06:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <steps+0x1>
    1c0a:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <steps>
	newSteps = 0;  //moving arrow 360 degrees counterclockwise to make sure it is in zero position
    1c0e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <newSteps+0x1>
    1c12:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <newSteps>

	dir = 0;
    1c16:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <dir>
	arrowMoving = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <arrowMoving>


	TCCR0|=_BV(CS02)|_BV(CS00)|_BV(WGM01);
    1c20:	83 b7       	in	r24, 0x33	; 51
    1c22:	8d 60       	ori	r24, 0x0D	; 13
    1c24:	83 bf       	out	0x33, r24	; 51
	OCR0 = stepInterval;
    1c26:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepInterval>
    1c2a:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=_BV(OCIE0);
    1c2c:	89 b7       	in	r24, 0x39	; 57
    1c2e:	82 60       	ori	r24, 0x02	; 2
    1c30:	89 bf       	out	0x39, r24	; 57

while (arrowMoving);
    1c32:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <arrowMoving>
    1c36:	81 11       	cpse	r24, r1
    1c38:	fc cf       	rjmp	.-8      	; 0x1c32 <arrow_calibration+0xa4>
steps = 0;
    1c3a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <steps+0x1>
    1c3e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <steps>
newSteps = 0;
    1c42:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <newSteps+0x1>
    1c46:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <newSteps>
    1c4a:	08 95       	ret

00001c4c <draw_arrow>:
//arrowCalibrated = 1;
}

void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1c4c:	88 23       	and	r24, r24
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <draw_arrow+0x24>
		GLCD_Clear();
    1c50:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c54:	67 e0       	ldi	r22, 0x07	; 7
    1c56:	86 e1       	ldi	r24, 0x16	; 22
    1c58:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1c5c:	2f ef       	ldi	r18, 0xFF	; 255
    1c5e:	47 e3       	ldi	r20, 0x37	; 55
    1c60:	6c e5       	ldi	r22, 0x5C	; 92
    1c62:	84 e6       	ldi	r24, 0x64	; 100
    1c64:	90 e1       	ldi	r25, 0x10	; 16
    1c66:	0e 94 1a 1b 	call	0x3634	; 0x3634 <GLCD_DrawBitmap>
		GLCD_Render();
    1c6a:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
    1c6e:	08 95       	ret
		}else{
		GLCD_Clear();
    1c70:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1c74:	67 e0       	ldi	r22, 0x07	; 7
    1c76:	86 e1       	ldi	r24, 0x16	; 22
    1c78:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1c7c:	2f ef       	ldi	r18, 0xFF	; 255
    1c7e:	47 e3       	ldi	r20, 0x37	; 55
    1c80:	6c e5       	ldi	r22, 0x5C	; 92
    1c82:	80 ee       	ldi	r24, 0xE0	; 224
    1c84:	9d e0       	ldi	r25, 0x0D	; 13
    1c86:	0e 94 1a 1b 	call	0x3634	; 0x3634 <GLCD_DrawBitmap>
		GLCD_Render();
    1c8a:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
    1c8e:	08 95       	ret

00001c90 <draw_skull>:
		}
}

void draw_skull (void)
{
GLCD_Clear();
    1c90:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
GLCD_GotoXY(21+6, 7);
    1c94:	67 e0       	ldi	r22, 0x07	; 7
    1c96:	8b e1       	ldi	r24, 0x1B	; 27
    1c98:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1c9c:	2f ef       	ldi	r18, 0xFF	; 255
    1c9e:	44 e3       	ldi	r20, 0x34	; 52
    1ca0:	66 e5       	ldi	r22, 0x56	; 86
    1ca2:	88 ee       	ldi	r24, 0xE8	; 232
    1ca4:	92 e1       	ldi	r25, 0x12	; 18
    1ca6:	0e 94 1a 1b 	call	0x3634	; 0x3634 <GLCD_DrawBitmap>
GLCD_Render();
    1caa:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
    1cae:	08 95       	ret

00001cb0 <signal_monitor>:
		if (speedKmh>scaleMax)speedKmh = scaleMax;
		speedRefresh = 0;
		}
void signal_monitor(){

		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1cb0:	b4 99       	sbic	0x16, 4	; 22
    1cb2:	0d c0       	rjmp	.+26     	; 0x1cce <signal_monitor+0x1e>
    1cb4:	b3 9b       	sbis	0x16, 3	; 22
    1cb6:	0b c0       	rjmp	.+22     	; 0x1cce <signal_monitor+0x1e>
			draw_arrow(0);
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <draw_arrow>
			signalOn = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <signalOn>
			signalCounter = 0;
    1cc4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <signalCounter+0x1>
    1cc8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <signalCounter>
    1ccc:	21 c0       	rjmp	.+66     	; 0x1d10 <signal_monitor+0x60>
		}

		else if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1cce:	b3 99       	sbic	0x16, 3	; 22
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <signal_monitor+0x3c>
    1cd2:	b4 9b       	sbis	0x16, 4	; 22
    1cd4:	0b c0       	rjmp	.+22     	; 0x1cec <signal_monitor+0x3c>
			draw_arrow(1);
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <draw_arrow>
			signalOn = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <signalOn>
			signalCounter = 0;
    1ce2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <signalCounter+0x1>
    1ce6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <signalCounter>
    1cea:	12 c0       	rjmp	.+36     	; 0x1d10 <signal_monitor+0x60>
		}

		else if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1cec:	b4 99       	sbic	0x16, 4	; 22
    1cee:	0c c0       	rjmp	.+24     	; 0x1d08 <signal_monitor+0x58>
    1cf0:	b3 99       	sbic	0x16, 3	; 22
    1cf2:	0a c0       	rjmp	.+20     	; 0x1d08 <signal_monitor+0x58>
			draw_skull();
    1cf4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <draw_skull>
			signalOn = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <signalOn>
			signalCounter = 0;
    1cfe:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <signalCounter+0x1>
    1d02:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <signalCounter>
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <signal_monitor+0x60>
		}


		if (signalOn){
    1d08:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <signalOn>
    1d0c:	88 23       	and	r24, r24
    1d0e:	e9 f0       	breq	.+58     	; 0x1d4a <signal_monitor+0x9a>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1d10:	b3 9b       	sbis	0x16, 3	; 22
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <signal_monitor+0x76>
    1d14:	b4 9b       	sbis	0x16, 4	; 22
    1d16:	07 c0       	rjmp	.+14     	; 0x1d26 <signal_monitor+0x76>
				GLCD_Clear();
    1d18:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
				GLCD_Render();
    1d1c:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
				TIMSK|=_BV(TOIE1);	// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1d20:	89 b7       	in	r24, 0x39	; 57
    1d22:	84 60       	ori	r24, 0x04	; 4
    1d24:	89 bf       	out	0x39, r24	; 57
									//This is to see if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			}

			if (signalCounter > 300)	//if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1d26:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <signalCounter>
    1d2a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <signalCounter+0x1>
    1d2e:	8d 32       	cpi	r24, 0x2D	; 45
    1d30:	91 40       	sbci	r25, 0x01	; 1
    1d32:	58 f0       	brcs	.+22     	; 0x1d4a <signal_monitor+0x9a>
			{
				signalOn = 0;
    1d34:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <signalOn>
				signalCounter = 0;
    1d38:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <signalCounter+0x1>
    1d3c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <signalCounter>
				TIMSK&=~_BV(TOIE1);
    1d40:	89 b7       	in	r24, 0x39	; 57
    1d42:	8b 7f       	andi	r24, 0xFB	; 251
    1d44:	89 bf       	out	0x39, r24	; 57
				main_screen();
    1d46:	0e 94 28 0c 	call	0x1850	; 0x1850 <main_screen>
    1d4a:	08 95       	ret

00001d4c <read_ADC>:
}


int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
    1d4c:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	16 16       	cp	r1, r22
    1d52:	17 06       	cpc	r1, r23
    1d54:	8c f4       	brge	.+34     	; 0x1d78 <read_ADC+0x2c>
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1d5e:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1d60:	36 99       	sbic	0x06, 6	; 6
    1d62:	fe cf       	rjmp	.-4      	; 0x1d60 <read_ADC+0x14>
		tmp += ADCW;
    1d64:	44 b1       	in	r20, 0x04	; 4
    1d66:	55 b1       	in	r21, 0x05	; 5
    1d68:	84 0f       	add	r24, r20
    1d6a:	95 1f       	adc	r25, r21

int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	26 17       	cp	r18, r22
    1d72:	37 07       	cpc	r19, r23
    1d74:	a1 f7       	brne	.-24     	; 0x1d5e <read_ADC+0x12>
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <read_ADC+0x30>


int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1d7c:	0e 94 26 24 	call	0x484c	; 0x484c <__divmodhi4>
    1d80:	cb 01       	movw	r24, r22
}
    1d82:	08 95       	ret

00001d84 <data_monitor>:
				main_screen();
			}
		}

}
void data_monitor(){
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17

	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    1d88:	6a e0       	ldi	r22, 0x0A	; 10
    1d8a:	84 e0       	ldi	r24, 0x04	; 4
    1d8c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <read_ADC>
    1d90:	bc 01       	movw	r22, r24
    1d92:	99 0f       	add	r25, r25
    1d94:	88 0b       	sbc	r24, r24
    1d96:	99 0b       	sbc	r25, r25
    1d98:	0e 94 b7 22 	call	0x456e	; 0x456e <__floatsisf>
    1d9c:	2a e9       	ldi	r18, 0x9A	; 154
    1d9e:	39 e9       	ldi	r19, 0x99	; 153
    1da0:	4c ec       	ldi	r20, 0xCC	; 204
    1da2:	52 e4       	ldi	r21, 0x42	; 66
    1da4:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	50 e4       	ldi	r21, 0x40	; 64
    1db0:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 ec       	ldi	r20, 0xC0	; 192
    1dba:	50 e4       	ldi	r21, 0x40	; 64
    1dbc:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    1dc0:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__fixsfsi>
    1dc4:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <newVoltage+0x1>
    1dc8:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <newVoltage>



	if (newVoltage!=voltage)	//if voltage value changes - update data on the screen
    1dcc:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <voltage>
    1dd0:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <voltage+0x1>
    1dd4:	26 17       	cp	r18, r22
    1dd6:	37 07       	cpc	r19, r23
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <data_monitor+0x62>
	{
		voltage = newVoltage;
    1dda:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <voltage+0x1>
    1dde:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <voltage>
		main_screen();
    1de2:	0e 94 28 0c 	call	0x1850	; 0x1850 <main_screen>
	}

	newDistance=(round(totalRotations)*circLength)/10.0;
    1de6:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <totalRotations>
    1dea:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <totalRotations+0x1>
    1dee:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <totalRotations+0x2>
    1df2:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <totalRotations+0x3>
    1df6:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    1dfa:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <round>
    1dfe:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <circLength>
    1e02:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <circLength+0x1>
    1e06:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <circLength+0x2>
    1e0a:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <circLength+0x3>
    1e0e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    1e1e:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    1e22:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <newDistance>
    1e26:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <newDistance+0x1>
    1e2a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <newDistance+0x2>
    1e2e:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <newDistance+0x3>
	if (newDistance!=distance)	//when the distance value changes by 100 meters - update the data on the screen
    1e32:	00 91 05 02 	lds	r16, 0x0205	; 0x800205 <distance>
    1e36:	10 91 06 02 	lds	r17, 0x0206	; 0x800206 <distance+0x1>
    1e3a:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <distance+0x2>
    1e3e:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <distance+0x3>
    1e42:	60 17       	cp	r22, r16
    1e44:	71 07       	cpc	r23, r17
    1e46:	82 07       	cpc	r24, r18
    1e48:	93 07       	cpc	r25, r19
    1e4a:	51 f0       	breq	.+20     	; 0x1e60 <data_monitor+0xdc>
	{
		distance = newDistance;
    1e4c:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <distance>
    1e50:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <distance+0x1>
    1e54:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <distance+0x2>
    1e58:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <distance+0x3>
		main_screen();
    1e5c:	0e 94 28 0c 	call	0x1850	; 0x1850 <main_screen>
	}
}
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <eep_operations>:
	}
	return tmp/cycles;
}


	void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1e66:	8f 92       	push	r8
    1e68:	9f 92       	push	r9
    1e6a:	af 92       	push	r10
    1e6c:	bf 92       	push	r11
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
    1e7a:	e6 2e       	mov	r14, r22

		if (eepAction==EEP_WRITE){
    1e7c:	41 30       	cpi	r20, 0x01	; 1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <eep_operations+0x1c>
    1e80:	6a c0       	rjmp	.+212    	; 0x1f56 <eep_operations+0xf0>
			eeprom_update_byte((uint8_t*)eepStartAddress,0);
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
			eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1e88:	f1 2c       	mov	r15, r1
    1e8a:	ce 0d       	add	r28, r14
    1e8c:	df 1d       	adc	r29, r15
    1e8e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <pwmArrow>
    1e92:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <pwmArrow+0x1>
    1e96:	ce 01       	movw	r24, r28
    1e98:	0e 94 d7 25 	call	0x4bae	; 0x4bae <eeprom_update_word>
			eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1e9c:	ce 0d       	add	r28, r14
    1e9e:	df 1d       	adc	r29, r15
    1ea0:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <pwmDial>
    1ea4:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <pwmDial+0x1>
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	0e 94 d7 25 	call	0x4bae	; 0x4bae <eeprom_update_word>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1eae:	ce 0d       	add	r28, r14
    1eb0:	df 1d       	adc	r29, r15
    1eb2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <scaleMax>
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1ebc:	ce 0d       	add	r28, r14
    1ebe:	df 1d       	adc	r29, r15
    1ec0:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <stepInterval>
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
			eeprom_update_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1eca:	ce 0d       	add	r28, r14
    1ecc:	df 1d       	adc	r29, r15
    1ece:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    1ed2:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	0e 94 d7 25 	call	0x4bae	; 0x4bae <eeprom_update_word>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1edc:	ce 0d       	add	r28, r14
    1ede:	df 1d       	adc	r29, r15
    1ee0:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <lcdContrast>
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1eea:	ce 0d       	add	r28, r14
    1eec:	df 1d       	adc	r29, r15
    1eee:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
			eeprom_update_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1ef8:	ce 0d       	add	r28, r14
    1efa:	df 1d       	adc	r29, r15
    1efc:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <stepMode>
    1f00:	ce 01       	movw	r24, r28
    1f02:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
			eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1f06:	ce 0d       	add	r28, r14
    1f08:	df 1d       	adc	r29, r15
    1f0a:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <wheelDiameter>
    1f0e:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <wheelDiameter+0x1>
    1f12:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <wheelDiameter+0x2>
    1f16:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <wheelDiameter+0x3>
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <eeprom_update_dword>
			eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1f20:	ce 0d       	add	r28, r14
    1f22:	df 1d       	adc	r29, r15
    1f24:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <gearRatio>
    1f28:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <gearRatio+0x1>
    1f2c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <gearRatio+0x2>
    1f30:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <gearRatio+0x3>
    1f34:	ce 01       	movw	r24, r28
    1f36:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <eeprom_update_dword>
			eeprom_update_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1f3a:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <degreesPerKmh>
    1f3e:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    1f42:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    1f46:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	8c 0f       	add	r24, r28
    1f4e:	9d 1f       	adc	r25, r29
    1f50:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <eeprom_update_dword>
    1f54:	af c0       	rjmp	.+350    	; 0x20b4 <eep_operations+0x24e>
			}
			if(eepAction==EEP_READ){
    1f56:	41 11       	cpse	r20, r1
    1f58:	a9 c0       	rjmp	.+338    	; 0x20ac <eep_operations+0x246>
			pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f5a:	e6 2e       	mov	r14, r22
    1f5c:	f1 2c       	mov	r15, r1
    1f5e:	ce 0d       	add	r28, r14
    1f60:	df 1d       	adc	r29, r15
    1f62:	ce 01       	movw	r24, r28
    1f64:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <eeprom_read_word>
    1f68:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pwmArrow+0x1>
    1f6c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pwmArrow>
			pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f70:	ce 0d       	add	r28, r14
    1f72:	df 1d       	adc	r29, r15
    1f74:	ce 01       	movw	r24, r28
    1f76:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <eeprom_read_word>
    1f7a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <pwmDial+0x1>
    1f7e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pwmDial>
			scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1f82:	ce 0d       	add	r28, r14
    1f84:	df 1d       	adc	r29, r15
    1f86:	ce 01       	movw	r24, r28
    1f88:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <eeprom_read_byte>
    1f8c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <scaleMax>
			stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1f90:	ce 0d       	add	r28, r14
    1f92:	df 1d       	adc	r29, r15
    1f94:	ce 01       	movw	r24, r28
    1f96:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <eeprom_read_byte>
    1f9a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepInterval>
			smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1f9e:	ce 0d       	add	r28, r14
    1fa0:	df 1d       	adc	r29, r15
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <eeprom_read_word>
    1fa8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <smSteps+0x1>
    1fac:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <smSteps>
			lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fb0:	ce 0d       	add	r28, r14
    1fb2:	df 1d       	adc	r29, r15
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <eeprom_read_byte>
    1fba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <lcdContrast>
			magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fbe:	ce 0d       	add	r28, r14
    1fc0:	df 1d       	adc	r29, r15
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <eeprom_read_byte>
    1fc8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <magnetsOnWheel>
			stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1fcc:	ce 0d       	add	r28, r14
    1fce:	df 1d       	adc	r29, r15
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <eeprom_read_byte>
    1fd6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <stepMode>
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1fda:	ce 0d       	add	r28, r14
    1fdc:	df 1d       	adc	r29, r15
    1fde:	ce 01       	movw	r24, r28
    1fe0:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <eeprom_read_dword>
    1fe4:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <wheelDiameter>
    1fe8:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <wheelDiameter+0x1>
    1fec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <wheelDiameter+0x2>
    1ff0:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <wheelDiameter+0x3>
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1ff4:	ce 0d       	add	r28, r14
    1ff6:	df 1d       	adc	r29, r15
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <eeprom_read_dword>
    1ffe:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <gearRatio>
    2002:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <gearRatio+0x1>
    2006:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gearRatio+0x2>
    200a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gearRatio+0x3>
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    200e:	c7 01       	movw	r24, r14
    2010:	8c 0f       	add	r24, r28
    2012:	9d 1f       	adc	r25, r29
    2014:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <eeprom_read_dword>
    2018:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <degreesPerKmh>
    201c:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <degreesPerKmh+0x1>
    2020:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <degreesPerKmh+0x2>
    2024:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <degreesPerKmh+0x3>
    2028:	45 c0       	rjmp	.+138    	; 0x20b4 <eep_operations+0x24e>
    202a:	f1 2c       	mov	r15, r1
			}
		if (eepAction==EEP_ODOMETER_READ){
    202c:	11 e0       	ldi	r17, 0x01	; 1
			uint32_t tempTotalRotations = 0;
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempTotalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    202e:	ce 01       	movw	r24, r28
    2030:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <eeprom_read_dword>
			if(tempTotalRotations>totalRotations){
    2034:	80 90 21 02 	lds	r8, 0x0221	; 0x800221 <totalRotations>
    2038:	90 90 22 02 	lds	r9, 0x0222	; 0x800222 <totalRotations+0x1>
    203c:	a0 90 23 02 	lds	r10, 0x0223	; 0x800223 <totalRotations+0x2>
    2040:	b0 90 24 02 	lds	r11, 0x0224	; 0x800224 <totalRotations+0x3>
    2044:	86 16       	cp	r8, r22
    2046:	97 06       	cpc	r9, r23
    2048:	a8 06       	cpc	r10, r24
    204a:	b9 06       	cpc	r11, r25
    204c:	50 f4       	brcc	.+20     	; 0x2062 <eep_operations+0x1fc>
				totalRotations = tempTotalRotations;
    204e:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <totalRotations>
    2052:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <totalRotations+0x1>
    2056:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <totalRotations+0x2>
    205a:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <totalRotations+0x3>
				odometerCurrentAddress = i + 1;
    205e:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <odometerCurrentAddress>
    2062:	1f 5f       	subi	r17, 0xFF	; 255
    2064:	ce 0d       	add	r28, r14
    2066:	df 1d       	adc	r29, r15
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			}
		if (eepAction==EEP_ODOMETER_READ){
			uint32_t tempTotalRotations = 0;
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    2068:	14 33       	cpi	r17, 0x34	; 52
    206a:	09 f7       	brne	.-62     	; 0x202e <eep_operations+0x1c8>
    206c:	23 c0       	rjmp	.+70     	; 0x20b4 <eep_operations+0x24e>
				totalRotations = tempTotalRotations;
				odometerCurrentAddress = i + 1;
				}
			}
		}
		if (eepAction==EEP_ODOMETER_WRITE){
    206e:	43 30       	cpi	r20, 0x03	; 3
    2070:	09 f5       	brne	.+66     	; 0x20b4 <eep_operations+0x24e>
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
    2072:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <totalRotations>
    2076:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <totalRotations+0x1>
    207a:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <totalRotations+0x2>
    207e:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <totalRotations+0x3>
    2082:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <odometerCurrentAddress>
    2086:	9e 01       	movw	r18, r28
    2088:	8e 9d       	mul	r24, r14
    208a:	20 0d       	add	r18, r0
    208c:	31 1d       	adc	r19, r1
    208e:	11 24       	eor	r1, r1
    2090:	c9 01       	movw	r24, r18
    2092:	0e 94 dd 25 	call	0x4bba	; 0x4bba <eeprom_write_dword>
			odometerCurrentAddress++;
    2096:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <odometerCurrentAddress>
    209a:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    209c:	83 33       	cpi	r24, 0x33	; 51
    209e:	18 f4       	brcc	.+6      	; 0x20a6 <eep_operations+0x240>
				}
			}
		}
		if (eepAction==EEP_ODOMETER_WRITE){
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
    20a0:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <odometerCurrentAddress>
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <eep_operations+0x24e>
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    20a6:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <odometerCurrentAddress>
		}


	}
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <eep_operations+0x24e>
			stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			}
		if (eepAction==EEP_ODOMETER_READ){
    20ac:	42 30       	cpi	r20, 0x02	; 2
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <eep_operations+0x24c>
    20b0:	bc cf       	rjmp	.-136    	; 0x202a <eep_operations+0x1c4>
    20b2:	dd cf       	rjmp	.-70     	; 0x206e <eep_operations+0x208>
			odometerCurrentAddress++;
			if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
		}


	}
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	08 95       	ret

000020c8 <presets>:
	0b00000000,
	0b00001000,
	0b00000100			//HALF STEP
};

void presets (void){
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	cf 93       	push	r28


circLength = wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    20d2:	2b ed       	ldi	r18, 0xDB	; 219
    20d4:	3f e0       	ldi	r19, 0x0F	; 15
    20d6:	49 e4       	ldi	r20, 0x49	; 73
    20d8:	50 e4       	ldi	r21, 0x40	; 64
    20da:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    20de:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    20e2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    20e6:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    20ea:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    20ee:	6b 01       	movw	r12, r22
    20f0:	7c 01       	movw	r14, r24
    20f2:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 b7 22 	call	0x456e	; 0x456e <__floatsisf>
    2100:	9b 01       	movw	r18, r22
    2102:	ac 01       	movw	r20, r24
    2104:	c7 01       	movw	r24, r14
    2106:	b6 01       	movw	r22, r12
    2108:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    210c:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <circLength>
    2110:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <circLength+0x1>
    2114:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <circLength+0x2>
    2118:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <circLength+0x3>
timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    211c:	8d eb       	ldi	r24, 0xBD	; 189
    211e:	97 e3       	ldi	r25, 0x37	; 55
    2120:	a6 e8       	ldi	r26, 0x86	; 134
    2122:	b7 e3       	ldi	r27, 0x37	; 55
    2124:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <timePerTic>
    2128:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <timePerTic+0x1>
    212c:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <timePerTic+0x2>
    2130:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <timePerTic+0x3>


DDRA|=_BV(3); //ENABLE 1
    2134:	d3 9a       	sbi	0x1a, 3	; 26
DDRA|=_BV(0); //ENABLE 2
    2136:	d0 9a       	sbi	0x1a, 0	; 26
DDRA|=_BV(2); //PHASE 1
    2138:	d2 9a       	sbi	0x1a, 2	; 26
DDRA|=_BV(1); //PHASE 2
    213a:	d1 9a       	sbi	0x1a, 1	; 26
DDRD|=_BV(4);//PWM DIAL LIGHT
    213c:	8c 9a       	sbi	0x11, 4	; 17
DDRD|=_BV(5);//PWM ARROW LIGHT
    213e:	8d 9a       	sbi	0x11, 5	; 17


PORTA|=_BV(3);//ENABLE 1 high (disabled)
    2140:	db 9a       	sbi	0x1b, 3	; 27
PORTA|=_BV(0);//ENABLE 2 high (disabled)
    2142:	d8 9a       	sbi	0x1b, 0	; 27

PORTB|=_BV(5);//internal pull-up for external buttons
    2144:	c5 9a       	sbi	0x18, 5	; 24
PORTB|=_BV(6);
    2146:	c6 9a       	sbi	0x18, 6	; 24
PORTB|=_BV(7);
    2148:	c7 9a       	sbi	0x18, 7	; 24

		//=======================ADC
		ADCSRA |= _BV(ADEN);
    214a:	37 9a       	sbi	0x06, 7	; 6
		//=======================
		ADCSRA |= _BV(ADPS0);		//
    214c:	30 9a       	sbi	0x06, 0	; 6
		ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    214e:	31 9a       	sbi	0x06, 1	; 6
		ADCSRA |= _BV(ADPS2);		//
    2150:	32 9a       	sbi	0x06, 2	; 6

	//================= reading data from EEPROM

	uint8_t firstEepRead;

	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    2152:	88 e0       	ldi	r24, 0x08	; 8
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <eeprom_read_byte>
	if (firstEepRead){
    215a:	88 23       	and	r24, r24
    215c:	79 f0       	breq	.+30     	; 0x217c <presets+0xb4>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	64 e0       	ldi	r22, 0x04	; 4
    2162:	88 e0       	ldi	r24, 0x08	; 8
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    216a:	c3 e3       	ldi	r28, 0x33	; 51
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    216c:	43 e0       	ldi	r20, 0x03	; 3
    216e:	64 e0       	ldi	r22, 0x04	; 4
    2170:	80 e8       	ldi	r24, 0x80	; 128
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2178:	c1 50       	subi	r28, 0x01	; 1
	uint8_t firstEepRead;

	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    217a:	c1 f7       	brne	.-16     	; 0x216c <presets+0xa4>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
			}
		}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	64 e0       	ldi	r22, 0x04	; 4
    2180:	88 e0       	ldi	r24, 0x08	; 8
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
	if (odometerCurrentAddress>ODOMETER_EEP_CELLS)odometerCurrentAddress = 0;
    2188:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <odometerCurrentAddress>
    218c:	83 33       	cpi	r24, 0x33	; 51
    218e:	10 f0       	brcs	.+4      	; 0x2194 <presets+0xcc>
    2190:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <odometerCurrentAddress>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);
    2194:	42 e0       	ldi	r20, 0x02	; 2
    2196:	64 e0       	ldi	r22, 0x04	; 4
    2198:	80 e8       	ldi	r24, 0x80	; 128
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>



TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    21a0:	85 b5       	in	r24, 0x25	; 37
    21a2:	8e 60       	ori	r24, 0x0E	; 14
    21a4:	85 bd       	out	0x25, r24	; 37
OCR2 = TIC; //upper limit of Timer2
    21a6:	84 e1       	ldi	r24, 0x14	; 20
    21a8:	83 bd       	out	0x23, r24	; 35

	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    21aa:	83 ea       	ldi	r24, 0xA3	; 163
    21ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    21ae:	8b e0       	ldi	r24, 0x0B	; 11
    21b0:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    21b2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <pwmArrow>
    21b6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <pwmArrow+0x1>
    21ba:	9b bd       	out	0x2b, r25	; 43
    21bc:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    21be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <pwmDial>
    21c2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <pwmDial+0x1>
    21c6:	99 bd       	out	0x29, r25	; 41
    21c8:	88 bd       	out	0x28, r24	; 40
	//============================
	if (stepMode==FULL_STEP){
    21ca:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <stepMode>
    21ce:	81 11       	cpse	r24, r1
    21d0:	23 c0       	rjmp	.+70     	; 0x2218 <presets+0x150>
		kmhPerStep=(360.0/smSteps)/degreesPerKmh;
    21d2:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    21d6:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    21e2:	9b 01       	movw	r18, r22
    21e4:	ac 01       	movw	r20, r24
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	84 eb       	ldi	r24, 0xB4	; 180
    21ec:	93 e4       	ldi	r25, 0x43	; 67
    21ee:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    21f2:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <degreesPerKmh>
    21f6:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    21fa:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    21fe:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2202:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    2206:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <kmhPerStep>
    220a:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <kmhPerStep+0x1>
    220e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <kmhPerStep+0x2>
    2212:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <kmhPerStep+0x3>
    2216:	24 c0       	rjmp	.+72     	; 0x2260 <presets+0x198>
		}
	if (stepMode==HALF_STEP){
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	11 f5       	brne	.+68     	; 0x2260 <presets+0x198>
		kmhPerStep=(180.0/smSteps)/degreesPerKmh;
    221c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    2220:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    222c:	9b 01       	movw	r18, r22
    222e:	ac 01       	movw	r20, r24
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	84 e3       	ldi	r24, 0x34	; 52
    2236:	93 e4       	ldi	r25, 0x43	; 67
    2238:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    223c:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <degreesPerKmh>
    2240:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    2244:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    2248:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    224c:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    2250:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <kmhPerStep>
    2254:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <kmhPerStep+0x1>
    2258:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <kmhPerStep+0x2>
    225c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <kmhPerStep+0x3>
		}

//display initialization
GLCD_Setup();
    2260:	0e 94 70 19 	call	0x32e0	; 0x32e0 <GLCD_Setup>
GLCD_Clear();
    2264:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
GLCD_SetContrast(lcdContrast);
    2268:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <lcdContrast>
    226c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <GLCD_SetContrast>
GLCD_Render();
    2270:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
sei();
    2274:	78 94       	sei
//if (!arrowCalibrated)
//arrow_calibration();
MCUCR|= _BV(ISC11); //External falling edge interrupt INT1
    2276:	85 b7       	in	r24, 0x35	; 53
    2278:	88 60       	ori	r24, 0x08	; 8
    227a:	85 bf       	out	0x35, r24	; 53
GICR|=_BV(INT1); //External Interrupt Enable INT1
    227c:	8b b7       	in	r24, 0x3b	; 59
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	8b bf       	out	0x3b, r24	; 59
}
    2282:	cf 91       	pop	r28
    2284:	ff 90       	pop	r15
    2286:	ef 90       	pop	r14
    2288:	df 90       	pop	r13
    228a:	cf 90       	pop	r12
    228c:	08 95       	ret

0000228e <calculate_speed>:

				}

}

void calculate_speed(){
    228e:	cf 93       	push	r28

			if(speedTimer>400){
    2290:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <speedTimer>
    2294:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <speedTimer+0x1>
    2298:	81 39       	cpi	r24, 0x91	; 145
    229a:	91 40       	sbci	r25, 0x01	; 1
    229c:	f4 f0       	brlt	.+60     	; 0x22da <calculate_speed+0x4c>
						//if(speedRefresh)
						
						TIMSK&=~_BV(OCIE2);	//if Hall sensor was not triggered for too long (0,32s) it means that vehicle does not move
    229e:	89 b7       	in	r24, 0x39	; 57
    22a0:	8f 77       	andi	r24, 0x7F	; 127
    22a2:	89 bf       	out	0x39, r24	; 57
						TCNT2 = 0;
    22a4:	14 bc       	out	0x24, r1	; 36
						speedTimer = 0;
    22a6:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <speedTimer+0x1>
    22aa:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <speedTimer>
						speedTimerRecent = 0;	//speedTimer;//?
    22ae:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <speedTimerRecent+0x1>
    22b2:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <speedTimerRecent>
						speedKmh = 0;
    22b6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <speedKmh>
    22ba:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <speedKmh+0x1>
    22be:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <speedKmh+0x2>
    22c2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <speedKmh+0x3>
						firstMeasure = 0;
    22c6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <firstMeasure>
						cli();
    22ca:	f8 94       	cli
						eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);	//if speed equals zero - save odometer data to EEPROM
    22cc:	43 e0       	ldi	r20, 0x03	; 3
    22ce:	64 e0       	ldi	r22, 0x04	; 4
    22d0:	80 e8       	ldi	r24, 0x80	; 128
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
						sei();
    22d8:	78 94       	sei
						}
			if((speedRefresh)&&(speedTimerRecent)){
    22da:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <speedRefresh>
    22de:	88 23       	and	r24, r24
    22e0:	d1 f1       	breq	.+116    	; 0x2356 <calculate_speed+0xc8>
    22e2:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <speedTimerRecent>
    22e6:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <speedTimerRecent+0x1>
    22ea:	89 2b       	or	r24, r25
    22ec:	a1 f1       	breq	.+104    	; 0x2356 <calculate_speed+0xc8>
						speedKmh = 1.0/(timePerTic*speedTimerRecent)*3.6*circLength;
    22ee:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <speedTimerRecent>
    22f2:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <speedTimerRecent+0x1>
    22f6:	07 2e       	mov	r0, r23
    22f8:	00 0c       	add	r0, r0
    22fa:	88 0b       	sbc	r24, r24
    22fc:	99 0b       	sbc	r25, r25
    22fe:	0e 94 b7 22 	call	0x456e	; 0x456e <__floatsisf>
    2302:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <timePerTic>
    2306:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <timePerTic+0x1>
    230a:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <timePerTic+0x2>
    230e:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <timePerTic+0x3>
    2312:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	80 e8       	ldi	r24, 0x80	; 128
    2320:	9f e3       	ldi	r25, 0x3F	; 63
    2322:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    2326:	26 e6       	ldi	r18, 0x66	; 102
    2328:	36 e6       	ldi	r19, 0x66	; 102
    232a:	46 e6       	ldi	r20, 0x66	; 102
    232c:	50 e4       	ldi	r21, 0x40	; 64
    232e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2332:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <circLength>
    2336:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <circLength+0x1>
    233a:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <circLength+0x2>
    233e:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <circLength+0x3>
    2342:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2346:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <speedKmh>
    234a:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <speedKmh+0x1>
    234e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <speedKmh+0x2>
    2352:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <speedKmh+0x3>
						}

		if (speedKmh>scaleMax)speedKmh = scaleMax;
    2356:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <scaleMax>
    235a:	6c 2f       	mov	r22, r28
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 b7 22 	call	0x456e	; 0x456e <__floatsisf>
    2366:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <speedKmh>
    236a:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <speedKmh+0x1>
    236e:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <speedKmh+0x2>
    2372:	50 91 14 02 	lds	r21, 0x0214	; 0x800214 <speedKmh+0x3>
    2376:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    237a:	88 23       	and	r24, r24
    237c:	74 f4       	brge	.+28     	; 0x239a <calculate_speed+0x10c>
    237e:	6c 2f       	mov	r22, r28
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    238a:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <speedKmh>
    238e:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <speedKmh+0x1>
    2392:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <speedKmh+0x2>
    2396:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <speedKmh+0x3>
		speedRefresh = 0;
    239a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <speedRefresh>
		}
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <set_value>:
		}


	}

	uint16_t set_value (uint16_t maxValue, uint16_t minValue, uint16_t currValue, uint8_t tens, const char *text){
    23a2:	2f 92       	push	r2
    23a4:	3f 92       	push	r3
    23a6:	4f 92       	push	r4
    23a8:	5f 92       	push	r5
    23aa:	6f 92       	push	r6
    23ac:	7f 92       	push	r7
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	2c 97       	sbiw	r28, 0x0c	; 12
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	5a 01       	movw	r10, r20
    23d8:	d2 2e       	mov	r13, r18
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
    23de:	7a 83       	std	Y+2, r23	; 0x02
    23e0:	69 83       	std	Y+1, r22	; 0x01

		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	48 e0       	ldi	r20, 0x08	; 8
    23e6:	65 e0       	ldi	r22, 0x05	; 5
    23e8:	80 ea       	ldi	r24, 0xA0	; 160
    23ea:	9b e0       	ldi	r25, 0x0B	; 11
    23ec:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
		GLCD_Clear();
    23f0:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>
		GLCD_GotoLine(1);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
		GLCD_GotoX(10);
    23fa:	8a e0       	ldi	r24, 0x0A	; 10
    23fc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
		GLCD_PrintString(text);
    2400:	c8 01       	movw	r24, r16
    2402:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
		GLCD_GotoY(8+16);
    2406:	88 e1       	ldi	r24, 0x18	; 24
    2408:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
		GLCD_GotoX(90);
    240c:	8a e5       	ldi	r24, 0x5A	; 90
    240e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
		GLCD_PrintString("Edit");
    2412:	82 e8       	ldi	r24, 0x82	; 130
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
		GLCD_GotoY(20+16);
    241a:	84 e2       	ldi	r24, 0x24	; 36
    241c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
		GLCD_GotoX(90);
    2420:	8a e5       	ldi	r24, 0x5A	; 90
    2422:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
		GLCD_PrintString("Back");
    2426:	87 e8       	ldi	r24, 0x87	; 135
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
		GLCD_GotoY(32+16);
    242e:	80 e3       	ldi	r24, 0x30	; 48
    2430:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
		GLCD_GotoX(90);
    2434:	8a e5       	ldi	r24, 0x5A	; 90
    2436:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
		GLCD_PrintString("Save");
    243a:	8c e8       	ldi	r24, 0x8C	; 140
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>

		if (tens){
    2442:	dd 20       	and	r13, r13
    2444:	09 f4       	brne	.+2      	; 0x2448 <set_value+0xa6>
    2446:	67 c0       	rjmp	.+206    	; 0x2516 <set_value+0x174>
			uint16_t devider = 1;
			for (int8_t i = 0;i<tens;i++){devider*=10;}
    2448:	2d 2d       	mov	r18, r13
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	12 16       	cp	r1, r18
    244e:	13 06       	cpc	r1, r19
    2450:	cc f4       	brge	.+50     	; 0x2484 <set_value+0xe2>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	01 e0       	ldi	r16, 0x01	; 1
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	a8 01       	movw	r20, r16
    245a:	44 0f       	add	r20, r20
    245c:	55 1f       	adc	r21, r21
    245e:	38 01       	movw	r6, r16
    2460:	66 0c       	add	r6, r6
    2462:	77 1c       	adc	r7, r7
    2464:	66 0c       	add	r6, r6
    2466:	77 1c       	adc	r7, r7
    2468:	66 0c       	add	r6, r6
    246a:	77 1c       	adc	r7, r7
    246c:	8a 01       	movw	r16, r20
    246e:	06 0d       	add	r16, r6
    2470:	17 1d       	adc	r17, r7
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	48 2f       	mov	r20, r24
    2476:	08 2e       	mov	r0, r24
    2478:	00 0c       	add	r0, r0
    247a:	55 0b       	sbc	r21, r21
    247c:	42 17       	cp	r20, r18
    247e:	53 07       	cpc	r21, r19
    2480:	5c f3       	brlt	.-42     	; 0x2458 <set_value+0xb6>
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <set_value+0xe6>
    2484:	01 e0       	ldi	r16, 0x01	; 1
    2486:	10 e0       	ldi	r17, 0x00	; 0
			GLCD_SetFont(Font5x8,5,8,GLCD_Overwrite);
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	48 e0       	ldi	r20, 0x08	; 8
    248c:	65 e0       	ldi	r22, 0x05	; 5
    248e:	80 ea       	ldi	r24, 0xA0	; 160
    2490:	9b e0       	ldi	r25, 0x0B	; 11
    2492:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
			GLCD_GotoY(40);
    2496:	88 e2       	ldi	r24, 0x28	; 40
    2498:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
			GLCD_GotoX(6);
    249c:	86 e0       	ldi	r24, 0x06	; 6
    249e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
			GLCD_PrintString("min:");
    24a2:	81 e9       	ldi	r24, 0x91	; 145
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
			
			GLCD_PrintDouble(minValue/(double)devider,devider);
    24aa:	28 01       	movw	r4, r16
    24ac:	61 2c       	mov	r6, r1
    24ae:	71 2c       	mov	r7, r1
    24b0:	c3 01       	movw	r24, r6
    24b2:	b2 01       	movw	r22, r4
    24b4:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    24b8:	69 87       	std	Y+9, r22	; 0x09
    24ba:	7a 87       	std	Y+10, r23	; 0x0a
    24bc:	8b 87       	std	Y+11, r24	; 0x0b
    24be:	9c 87       	std	Y+12, r25	; 0x0c
    24c0:	69 81       	ldd	r22, Y+1	; 0x01
    24c2:	7a 81       	ldd	r23, Y+2	; 0x02
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    24cc:	29 85       	ldd	r18, Y+9	; 0x09
    24ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    24d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    24d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    24d4:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    24d8:	a3 01       	movw	r20, r6
    24da:	92 01       	movw	r18, r4
    24dc:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
			GLCD_GotoY(50);
    24e0:	82 e3       	ldi	r24, 0x32	; 50
    24e2:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
			GLCD_GotoX(6);
    24e6:	86 e0       	ldi	r24, 0x06	; 6
    24e8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
			GLCD_PrintString("max:");
    24ec:	86 e9       	ldi	r24, 0x96	; 150
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
			GLCD_PrintDouble(maxValue/(double)devider,devider);
    24f4:	6b 81       	ldd	r22, Y+3	; 0x03
    24f6:	7c 81       	ldd	r23, Y+4	; 0x04
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    2500:	29 85       	ldd	r18, Y+9	; 0x09
    2502:	3a 85       	ldd	r19, Y+10	; 0x0a
    2504:	4b 85       	ldd	r20, Y+11	; 0x0b
    2506:	5c 85       	ldd	r21, Y+12	; 0x0c
    2508:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    250c:	a3 01       	movw	r20, r6
    250e:	92 01       	movw	r18, r4
    2510:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
    2514:	20 c0       	rjmp	.+64     	; 0x2556 <set_value+0x1b4>
			}else{
			GLCD_GotoY(40);
    2516:	88 e2       	ldi	r24, 0x28	; 40
    2518:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
			GLCD_GotoX(6);
    251c:	86 e0       	ldi	r24, 0x06	; 6
    251e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
			GLCD_PrintString("min:");
    2522:	81 e9       	ldi	r24, 0x91	; 145
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
			GLCD_PrintInteger(minValue);
    252a:	69 81       	ldd	r22, Y+1	; 0x01
    252c:	7a 81       	ldd	r23, Y+2	; 0x02
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
			GLCD_GotoY(50);
    2536:	82 e3       	ldi	r24, 0x32	; 50
    2538:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
			GLCD_GotoX(6);
    253c:	86 e0       	ldi	r24, 0x06	; 6
    253e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
			GLCD_PrintString("max:");
    2542:	86 e9       	ldi	r24, 0x96	; 150
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
			GLCD_PrintInteger(maxValue);
    254a:	6b 81       	ldd	r22, Y+3	; 0x03
    254c:	7c 81       	ldd	r23, Y+4	; 0x04
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
		}
		
		
		GLCD_GotoY(24-4);
    2556:	84 e1       	ldi	r24, 0x14	; 20
    2558:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
		GLCD_GotoX(5);
    255c:	85 e0       	ldi	r24, 0x05	; 5
    255e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
		GLCD_SetFont(Arial12x17, 12, 17, GLCD_Overwrite);
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	41 e1       	ldi	r20, 0x11	; 17
    2566:	6c e0       	ldi	r22, 0x0C	; 12
    2568:	84 e7       	ldi	r24, 0x74	; 116
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
	}

	while(tempValue)       //finding the number of digits for current value
    2570:	a1 14       	cp	r10, r1
    2572:	b1 04       	cpc	r11, r1
    2574:	91 f0       	breq	.+36     	; 0x259a <set_value+0x1f8>
    2576:	95 01       	movw	r18, r10
    2578:	00 e0       	ldi	r16, 0x00	; 0
	   {
		   tempValue = tempValue / 10;
    257a:	ad ec       	ldi	r26, 0xCD	; 205
    257c:	bc ec       	ldi	r27, 0xCC	; 204
    257e:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__umulhisi3>
    2582:	9c 01       	movw	r18, r24
    2584:	36 95       	lsr	r19
    2586:	27 95       	ror	r18
    2588:	36 95       	lsr	r19
    258a:	27 95       	ror	r18
    258c:	36 95       	lsr	r19
    258e:	27 95       	ror	r18
		   valueLength++;
    2590:	0f 5f       	subi	r16, 0xFF	; 255
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
	}

	while(tempValue)       //finding the number of digits for current value
    2592:	21 15       	cp	r18, r1
    2594:	31 05       	cpc	r19, r1
    2596:	89 f7       	brne	.-30     	; 0x257a <set_value+0x1d8>
    2598:	01 c0       	rjmp	.+2      	; 0x259c <set_value+0x1fa>
	uint8_t valueLength;
	uint8_t maxValueLength;
	int8_t *digitsArr;
	int8_t currentItem = 0;
	tempValue = currValue;
	valueLength = 0;
    259a:	00 e0       	ldi	r16, 0x00	; 0
	while(tempValue)       //finding the number of digits for current value
	   {
		   tempValue = tempValue / 10;
		   valueLength++;
		        }
	tempValue = maxValue;
    259c:	2b 81       	ldd	r18, Y+3	; 0x03
    259e:	3c 81       	ldd	r19, Y+4	; 0x04
	maxValueLength = 0;
    25a0:	18 86       	std	Y+8, r1	; 0x08
	while(tempValue)       //finding the number of digits for maximum value allowed
    25a2:	21 15       	cp	r18, r1
    25a4:	31 05       	cpc	r19, r1
    25a6:	09 f4       	brne	.+2      	; 0x25aa <set_value+0x208>
    25a8:	db c1       	rjmp	.+950    	; 0x2960 <set_value+0x5be>
    25aa:	11 e0       	ldi	r17, 0x01	; 1
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <set_value+0x20e>
    25ae:	18 2f       	mov	r17, r24
		{
			tempValue = tempValue / 10;
    25b0:	ad ec       	ldi	r26, 0xCD	; 205
    25b2:	bc ec       	ldi	r27, 0xCC	; 204
    25b4:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__umulhisi3>
    25b8:	9c 01       	movw	r18, r24
    25ba:	36 95       	lsr	r19
    25bc:	27 95       	ror	r18
    25be:	36 95       	lsr	r19
    25c0:	27 95       	ror	r18
    25c2:	36 95       	lsr	r19
    25c4:	27 95       	ror	r18
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	81 0f       	add	r24, r17
		   tempValue = tempValue / 10;
		   valueLength++;
		        }
	tempValue = maxValue;
	maxValueLength = 0;
	while(tempValue)       //finding the number of digits for maximum value allowed
    25ca:	21 15       	cp	r18, r1
    25cc:	31 05       	cpc	r19, r1
    25ce:	79 f7       	brne	.-34     	; 0x25ae <set_value+0x20c>
    25d0:	18 87       	std	Y+8, r17	; 0x08
		{
			tempValue = tempValue / 10;
			maxValueLength++;
				}

		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    25d2:	e1 2e       	mov	r14, r17
    25d4:	f1 2c       	mov	r15, r1
    25d6:	c7 01       	movw	r24, r14
    25d8:	0e 94 85 24 	call	0x490a	; 0x490a <malloc>
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		tempValue = currValue;
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    25e0:	1f 82       	std	Y+7, r1	; 0x07
    25e2:	97 01       	movw	r18, r14
    25e4:	12 16       	cp	r1, r18
    25e6:	13 06       	cpc	r1, r19
    25e8:	0c f0       	brlt	.+2      	; 0x25ec <set_value+0x24a>
    25ea:	4c c0       	rjmp	.+152    	; 0x2684 <set_value+0x2e2>
    25ec:	f5 01       	movw	r30, r10
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	80 e0       	ldi	r24, 0x00	; 0
			if (digitIndex<valueLength){
    25f4:	40 2f       	mov	r20, r16
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	64 17       	cp	r22, r20
    25fa:	75 07       	cpc	r23, r21
    25fc:	74 f5       	brge	.+92     	; 0x265a <set_value+0x2b8>
				digitsArr[digitIndex] = tempValue % 10;
    25fe:	0d 81       	ldd	r16, Y+5	; 0x05
    2600:	1e 81       	ldd	r17, Y+6	; 0x06
    2602:	08 0f       	add	r16, r24
    2604:	11 1d       	adc	r17, r1
    2606:	87 fd       	sbrc	r24, 7
    2608:	1a 95       	dec	r17
    260a:	9f 01       	movw	r18, r30
    260c:	ad ec       	ldi	r26, 0xCD	; 205
    260e:	bc ec       	ldi	r27, 0xCC	; 204
    2610:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__umulhisi3>
    2614:	96 95       	lsr	r25
    2616:	87 95       	ror	r24
    2618:	96 95       	lsr	r25
    261a:	87 95       	ror	r24
    261c:	96 95       	lsr	r25
    261e:	87 95       	ror	r24
    2620:	9c 01       	movw	r18, r24
    2622:	22 0f       	add	r18, r18
    2624:	33 1f       	adc	r19, r19
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	82 0f       	add	r24, r18
    2634:	93 1f       	adc	r25, r19
    2636:	9f 01       	movw	r18, r30
    2638:	28 1b       	sub	r18, r24
    263a:	39 0b       	sbc	r19, r25
    263c:	d8 01       	movw	r26, r16
    263e:	2c 93       	st	X, r18
				tempValue = tempValue / 10;
    2640:	9f 01       	movw	r18, r30
    2642:	ad ec       	ldi	r26, 0xCD	; 205
    2644:	bc ec       	ldi	r27, 0xCC	; 204
    2646:	0e 94 62 24 	call	0x48c4	; 0x48c4 <__umulhisi3>
    264a:	fc 01       	movw	r30, r24
    264c:	f6 95       	lsr	r31
    264e:	e7 95       	ror	r30
    2650:	f6 95       	lsr	r31
    2652:	e7 95       	ror	r30
    2654:	f6 95       	lsr	r31
    2656:	e7 95       	ror	r30
    2658:	07 c0       	rjmp	.+14     	; 0x2668 <set_value+0x2c6>
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
    265a:	ad 81       	ldd	r26, Y+5	; 0x05
    265c:	be 81       	ldd	r27, Y+6	; 0x06
    265e:	a8 0f       	add	r26, r24
    2660:	b1 1d       	adc	r27, r1
    2662:	87 fd       	sbrc	r24, 7
    2664:	ba 95       	dec	r27
    2666:	1c 92       	st	X, r1
			maxValueLength++;
				}

		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
		tempValue = currValue;
		for(digitIndex = 0;digitIndex<maxValueLength;digitIndex++){	//putting digits to array
    2668:	8f 81       	ldd	r24, Y+7	; 0x07
    266a:	8f 5f       	subi	r24, 0xFF	; 255
    266c:	8f 83       	std	Y+7, r24	; 0x07
    266e:	68 2f       	mov	r22, r24
    2670:	08 2e       	mov	r0, r24
    2672:	00 0c       	add	r0, r0
    2674:	77 0b       	sbc	r23, r23
    2676:	18 85       	ldd	r17, Y+8	; 0x08
    2678:	21 2f       	mov	r18, r17
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	62 17       	cp	r22, r18
    267e:	73 07       	cpc	r23, r19
    2680:	0c f4       	brge	.+2      	; 0x2684 <set_value+0x2e2>
    2682:	ba cf       	rjmp	.-140    	; 0x25f8 <set_value+0x256>
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2684:	21 50       	subi	r18, 0x01	; 1
    2686:	31 09       	sbc	r19, r1
    2688:	0d e0       	ldi	r16, 0x0D	; 13
    268a:	20 9f       	mul	r18, r16
    268c:	20 2d       	mov	r18, r0
    268e:	11 24       	eor	r1, r1
    2690:	05 e0       	ldi	r16, 0x05	; 5
    2692:	02 0f       	add	r16, r18
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2694:	11 50       	subi	r17, 0x01	; 1
    2696:	1f 83       	std	Y+7, r17	; 0x07
    2698:	11 23       	and	r17, r17
    269a:	1c f1       	brlt	.+70     	; 0x26e2 <set_value+0x340>
				GLCD_PrintInteger(digitsArr[digitIndex]);
					if ((digitIndex==tens)&&(tens)){
    269c:	ed 2c       	mov	r14, r13
    269e:	f1 2c       	mov	r15, r1
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
    26a0:	ed 81       	ldd	r30, Y+5	; 0x05
    26a2:	fe 81       	ldd	r31, Y+6	; 0x06
    26a4:	e1 0f       	add	r30, r17
    26a6:	f1 1d       	adc	r31, r1
    26a8:	17 fd       	sbrc	r17, 7
    26aa:	fa 95       	dec	r31
    26ac:	60 81       	ld	r22, Z
    26ae:	06 2e       	mov	r0, r22
    26b0:	00 0c       	add	r0, r0
    26b2:	77 0b       	sbc	r23, r23
    26b4:	88 0b       	sbc	r24, r24
    26b6:	99 0b       	sbc	r25, r25
    26b8:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
					if ((digitIndex==tens)&&(tens)){
    26bc:	8f 81       	ldd	r24, Y+7	; 0x07
    26be:	08 2e       	mov	r0, r24
    26c0:	00 0c       	add	r0, r0
    26c2:	99 0b       	sbc	r25, r25
    26c4:	8e 15       	cp	r24, r14
    26c6:	9f 05       	cpc	r25, r15
    26c8:	39 f4       	brne	.+14     	; 0x26d8 <set_value+0x336>
    26ca:	dd 20       	and	r13, r13
    26cc:	29 f0       	breq	.+10     	; 0x26d8 <set_value+0x336>
						GLCD_PrintString(".");
    26ce:	8b e9       	ldi	r24, 0x9B	; 155
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
					rectShift+=5;
    26d6:	0b 5f       	subi	r16, 0xFB	; 251
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    26d8:	1f 81       	ldd	r17, Y+7	; 0x07
    26da:	11 50       	subi	r17, 0x01	; 1
    26dc:	1f 83       	std	Y+7, r17	; 0x07
    26de:	11 23       	and	r17, r17
    26e0:	fc f6       	brge	.-66     	; 0x26a0 <set_value+0x2fe>
					}
				}



		GLCD_InvertRect(rectShift,24-4,rectShift+12,40-4);
    26e2:	4c e0       	ldi	r20, 0x0C	; 12
    26e4:	40 0f       	add	r20, r16
    26e6:	24 e2       	ldi	r18, 0x24	; 36
    26e8:	64 e1       	ldi	r22, 0x14	; 20
    26ea:	80 2f       	mov	r24, r16
    26ec:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <GLCD_InvertRect>
		GLCD_Render();
    26f0:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>



		while (button_monitor());
    26f4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    26f8:	81 11       	cpse	r24, r1
    26fa:	fc cf       	rjmp	.-8      	; 0x26f4 <set_value+0x352>
    26fc:	00 e0       	ldi	r16, 0x00	; 0
					}
			GLCD_GotoY(24-4);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    26fe:	ed 2c       	mov	r14, r13
    2700:	f1 2c       	mov	r15, r1
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2702:	0f 2e       	mov	r0, r31
    2704:	fd e0       	ldi	r31, 0x0D	; 13
    2706:	cf 2e       	mov	r12, r31
    2708:	f0 2d       	mov	r31, r0
    270a:	0f 2e       	mov	r0, r31
    270c:	f3 ef       	ldi	r31, 0xF3	; 243
    270e:	5f 2e       	mov	r5, r31
    2710:	f0 2d       	mov	r31, r0
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
					else if (currentButton == 2) {
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2712:	0f 2e       	mov	r0, r31
    2714:	f9 e0       	ldi	r31, 0x09	; 9
    2716:	6f 2e       	mov	r6, r31
    2718:	f0 2d       	mov	r31, r0


		while (button_monitor());
		uint8_t currentButton = 0;
			while(1){
				currentButton = button_monitor();
    271a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
				if(currentButton){
    271e:	88 23       	and	r24, r24
    2720:	09 f4       	brne	.+2      	; 0x2724 <set_value+0x382>
    2722:	12 c1       	rjmp	.+548    	; 0x2948 <set_value+0x5a6>
					rectShift = 0;
						if (currentButton == 1) {
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	09 f0       	breq	.+2      	; 0x272a <set_value+0x388>
    2728:	78 c0       	rjmp	.+240    	; 0x281a <set_value+0x478>
							currentItem++;
    272a:	0f 5f       	subi	r16, 0xFF	; 255
							if (currentItem==maxValueLength){
    272c:	20 2f       	mov	r18, r16
    272e:	00 2e       	mov	r0, r16
    2730:	00 0c       	add	r0, r0
    2732:	33 0b       	sbc	r19, r19
    2734:	88 85       	ldd	r24, Y+8	; 0x08
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	28 17       	cp	r18, r24
    273a:	39 07       	cpc	r19, r25
    273c:	09 f0       	breq	.+2      	; 0x2740 <set_value+0x39e>
    273e:	bc c0       	rjmp	.+376    	; 0x28b8 <set_value+0x516>
								currentItem = 0;

								//=====
									while(button_monitor());
    2740:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    2744:	81 11       	cpse	r24, r1
    2746:	fc cf       	rjmp	.-8      	; 0x2740 <set_value+0x39e>
									int8_t menuItem = 0;
									GLCD_InvertRect(rectShift+5,24-4,rectShift+5+12,40-4);
    2748:	24 e2       	ldi	r18, 0x24	; 36
    274a:	41 e1       	ldi	r20, 0x11	; 17
    274c:	64 e1       	ldi	r22, 0x14	; 20
    274e:	85 e0       	ldi	r24, 0x05	; 5
    2750:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <GLCD_InvertRect>
							if (currentItem==maxValueLength){
								currentItem = 0;

								//=====
									while(button_monitor());
									int8_t menuItem = 0;
    2754:	10 e0       	ldi	r17, 0x00	; 0
									GLCD_InvertRect(rectShift+5,24-4,rectShift+5+12,40-4);
									while(1){
									currentButton = button_monitor();
    2756:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>

										if(currentButton){
    275a:	88 23       	and	r24, r24
    275c:	99 f1       	breq	.+102    	; 0x27c4 <set_value+0x422>
											if (currentButton == 3) {
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	21 f4       	brne	.+8      	; 0x276a <set_value+0x3c8>
												menuItem--;
    2762:	11 50       	subi	r17, 0x01	; 1
												if (menuItem<0)menuItem = 2;
    2764:	7a f5       	brpl	.+94     	; 0x27c4 <set_value+0x422>
    2766:	12 e0       	ldi	r17, 0x02	; 2
    2768:	2d c0       	rjmp	.+90     	; 0x27c4 <set_value+0x422>
											}
											else if (currentButton == 2) {
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	29 f4       	brne	.+10     	; 0x2778 <set_value+0x3d6>
												menuItem++;
    276e:	1f 5f       	subi	r17, 0xFF	; 255
												if (menuItem>2)menuItem=0;
    2770:	13 30       	cpi	r17, 0x03	; 3
    2772:	44 f1       	brlt	.+80     	; 0x27c4 <set_value+0x422>
    2774:	10 e0       	ldi	r17, 0x00	; 0
    2776:	26 c0       	rjmp	.+76     	; 0x27c4 <set_value+0x422>
											}
											else if (currentButton == 1) {
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	21 f5       	brne	.+72     	; 0x27c4 <set_value+0x422>
													if (!menuItem){	//getting back to value edit
    277c:	11 11       	cpse	r17, r1
    277e:	16 c0       	rjmp	.+44     	; 0x27ac <set_value+0x40a>
														currentItem = 0;
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,5+16+i*12,116,17+16+i*12,GLCD_White);}
    2780:	00 e0       	ldi	r16, 0x00	; 0
    2782:	21 e2       	ldi	r18, 0x21	; 33
    2784:	44 e7       	ldi	r20, 0x74	; 116
    2786:	65 e1       	ldi	r22, 0x15	; 21
    2788:	86 e5       	ldi	r24, 0x56	; 86
    278a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
    278e:	2d e2       	ldi	r18, 0x2D	; 45
    2790:	44 e7       	ldi	r20, 0x74	; 116
    2792:	61 e2       	ldi	r22, 0x21	; 33
    2794:	86 e5       	ldi	r24, 0x56	; 86
    2796:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
    279a:	29 e3       	ldi	r18, 0x39	; 57
    279c:	44 e7       	ldi	r20, 0x74	; 116
    279e:	6d e2       	ldi	r22, 0x2D	; 45
    27a0:	86 e5       	ldi	r24, 0x56	; 86
    27a2:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
														GLCD_Render();
    27a6:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
														break;
    27aa:	86 c0       	rjmp	.+268    	; 0x28b8 <set_value+0x516>
													}
													else if (menuItem == 1){
    27ac:	11 30       	cpi	r17, 0x01	; 1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <set_value+0x410>
    27b0:	d4 c0       	rjmp	.+424    	; 0x295a <set_value+0x5b8>
														return currValue; //if changes are discarded - return initial value
													}
													else if (menuItem == 2){
    27b2:	12 30       	cpi	r17, 0x02	; 2
    27b4:	39 f4       	brne	.+14     	; 0x27c4 <set_value+0x422>
														return new_value();
    27b6:	9e 01       	movw	r18, r28
    27b8:	2f 5f       	subi	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	19 01       	movw	r2, r18
    27be:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2893>
    27c2:	e4 c0       	rjmp	.+456    	; 0x298c <set_value+0x5ea>
													}
											}

									}
							for (int8_t i=0;i<3;i++){GLCD_DrawRectangle(86,5+16+i*12,116,17+16+i*12,GLCD_White);}
    27c4:	00 e0       	ldi	r16, 0x00	; 0
    27c6:	21 e2       	ldi	r18, 0x21	; 33
    27c8:	44 e7       	ldi	r20, 0x74	; 116
    27ca:	65 e1       	ldi	r22, 0x15	; 21
    27cc:	86 e5       	ldi	r24, 0x56	; 86
    27ce:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
    27d2:	2d e2       	ldi	r18, 0x2D	; 45
    27d4:	44 e7       	ldi	r20, 0x74	; 116
    27d6:	61 e2       	ldi	r22, 0x21	; 33
    27d8:	86 e5       	ldi	r24, 0x56	; 86
    27da:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
    27de:	29 e3       	ldi	r18, 0x39	; 57
    27e0:	44 e7       	ldi	r20, 0x74	; 116
    27e2:	6d e2       	ldi	r22, 0x2D	; 45
    27e4:	86 e5       	ldi	r24, 0x56	; 86
    27e6:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>

									GLCD_DrawRectangle(86,5+16+menuItem*12,116,17+16+menuItem*12,GLCD_Black);
    27ea:	61 2f       	mov	r22, r17
    27ec:	66 0f       	add	r22, r22
    27ee:	61 0f       	add	r22, r17
    27f0:	66 0f       	add	r22, r22
    27f2:	66 0f       	add	r22, r22
    27f4:	21 e2       	ldi	r18, 0x21	; 33
    27f6:	26 0f       	add	r18, r22
    27f8:	6b 5e       	subi	r22, 0xEB	; 235
    27fa:	0f ef       	ldi	r16, 0xFF	; 255
    27fc:	44 e7       	ldi	r20, 0x74	; 116
    27fe:	86 e5       	ldi	r24, 0x56	; 86
    2800:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <GLCD_DrawRectangle>
									GLCD_Render();
    2804:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
							while(button_monitor());
    2808:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    280c:	81 11       	cpse	r24, r1
    280e:	fc cf       	rjmp	.-8      	; 0x2808 <set_value+0x466>
							while(!button_monitor());
    2810:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    2814:	88 23       	and	r24, r24
    2816:	e1 f3       	breq	.-8      	; 0x2810 <set_value+0x46e>
    2818:	9e cf       	rjmp	.-196    	; 0x2756 <set_value+0x3b4>
							//=============
						}

					}

					if (currentButton == 3) {
    281a:	83 30       	cpi	r24, 0x03	; 3
    281c:	31 f5       	brne	.+76     	; 0x286a <set_value+0x4c8>
						int8_t prevValue = digitsArr[currentItem];
    281e:	80 2e       	mov	r8, r16
    2820:	00 2e       	mov	r0, r16
    2822:	00 0c       	add	r0, r0
    2824:	99 08       	sbc	r9, r9
    2826:	ed 81       	ldd	r30, Y+5	; 0x05
    2828:	fe 81       	ldd	r31, Y+6	; 0x06
    282a:	e8 0d       	add	r30, r8
    282c:	f9 1d       	adc	r31, r9
    282e:	70 80       	ld	r7, Z
						digitsArr[currentItem]++;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	87 0d       	add	r24, r7
    2834:	80 83       	st	Z, r24
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
    2836:	ed 81       	ldd	r30, Y+5	; 0x05
    2838:	fe 81       	ldd	r31, Y+6	; 0x06
    283a:	e8 0d       	add	r30, r8
    283c:	f9 1d       	adc	r31, r9
    283e:	80 81       	ld	r24, Z
    2840:	8a 30       	cpi	r24, 0x0A	; 10
    2842:	0c f0       	brlt	.+2      	; 0x2846 <set_value+0x4a4>
    2844:	10 82       	st	Z, r1
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    2846:	ce 01       	movw	r24, r28
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	1c 01       	movw	r2, r24
    284c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2893>
			newValue += tenPower;
		}
		return newValue;
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
    2850:	2b 81       	ldd	r18, Y+3	; 0x03
    2852:	3c 81       	ldd	r19, Y+4	; 0x04
    2854:	28 17       	cp	r18, r24
    2856:	39 07       	cpc	r19, r25
    2858:	08 f4       	brcc	.+2      	; 0x285c <set_value+0x4ba>
    285a:	8c c0       	rjmp	.+280    	; 0x2974 <set_value+0x5d2>
    285c:	29 81       	ldd	r18, Y+1	; 0x01
    285e:	3a 81       	ldd	r19, Y+2	; 0x02
    2860:	82 17       	cp	r24, r18
    2862:	93 07       	cpc	r25, r19
    2864:	08 f4       	brcc	.+2      	; 0x2868 <set_value+0x4c6>
    2866:	86 c0       	rjmp	.+268    	; 0x2974 <set_value+0x5d2>
    2868:	27 c0       	rjmp	.+78     	; 0x28b8 <set_value+0x516>
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
					else if (currentButton == 2) {
    286a:	82 30       	cpi	r24, 0x02	; 2
    286c:	29 f5       	brne	.+74     	; 0x28b8 <set_value+0x516>
						int8_t prevValue = digitsArr[currentItem];
    286e:	80 2e       	mov	r8, r16
    2870:	00 2e       	mov	r0, r16
    2872:	00 0c       	add	r0, r0
    2874:	99 08       	sbc	r9, r9
    2876:	ed 81       	ldd	r30, Y+5	; 0x05
    2878:	fe 81       	ldd	r31, Y+6	; 0x06
    287a:	e8 0d       	add	r30, r8
    287c:	f9 1d       	adc	r31, r9
    287e:	70 80       	ld	r7, Z
						digitsArr[currentItem]--;
    2880:	8f ef       	ldi	r24, 0xFF	; 255
    2882:	87 0d       	add	r24, r7
    2884:	80 83       	st	Z, r24
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
    2886:	ed 81       	ldd	r30, Y+5	; 0x05
    2888:	fe 81       	ldd	r31, Y+6	; 0x06
    288a:	e8 0d       	add	r30, r8
    288c:	f9 1d       	adc	r31, r9
    288e:	80 81       	ld	r24, Z
    2890:	88 23       	and	r24, r24
    2892:	0c f4       	brge	.+2      	; 0x2896 <set_value+0x4f4>
    2894:	60 82       	st	Z, r6
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    2896:	de 01       	movw	r26, r28
    2898:	11 96       	adiw	r26, 0x01	; 1
    289a:	1d 01       	movw	r2, r26
    289c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <new_value.2893>
			newValue += tenPower;
		}
		return newValue;
	}
	uint8_t check_value(uint16_t checkValue){
			if((checkValue<=maxValue)&&(checkValue>=minValue)){return 1;}else{return 0;}
    28a0:	2b 81       	ldd	r18, Y+3	; 0x03
    28a2:	3c 81       	ldd	r19, Y+4	; 0x04
    28a4:	28 17       	cp	r18, r24
    28a6:	39 07       	cpc	r19, r25
    28a8:	08 f4       	brcc	.+2      	; 0x28ac <set_value+0x50a>
    28aa:	6a c0       	rjmp	.+212    	; 0x2980 <set_value+0x5de>
    28ac:	29 81       	ldd	r18, Y+1	; 0x01
    28ae:	3a 81       	ldd	r19, Y+2	; 0x02
    28b0:	82 17       	cp	r24, r18
    28b2:	93 07       	cpc	r25, r19
    28b4:	08 f4       	brcc	.+2      	; 0x28b8 <set_value+0x516>
    28b6:	64 c0       	rjmp	.+200    	; 0x2980 <set_value+0x5de>
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
			GLCD_GotoY(24-4);
    28b8:	84 e1       	ldi	r24, 0x14	; 20
    28ba:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
			GLCD_GotoX(5);
    28be:	85 e0       	ldi	r24, 0x05	; 5
    28c0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    28c4:	88 85       	ldd	r24, Y+8	; 0x08
    28c6:	81 50       	subi	r24, 0x01	; 1
    28c8:	8f 83       	std	Y+7, r24	; 0x07
    28ca:	88 23       	and	r24, r24
    28cc:	04 f1       	brlt	.+64     	; 0x290e <set_value+0x56c>
				GLCD_PrintInteger(digitsArr[digitIndex]);
    28ce:	ed 81       	ldd	r30, Y+5	; 0x05
    28d0:	fe 81       	ldd	r31, Y+6	; 0x06
    28d2:	e8 0f       	add	r30, r24
    28d4:	f1 1d       	adc	r31, r1
    28d6:	87 fd       	sbrc	r24, 7
    28d8:	fa 95       	dec	r31
    28da:	60 81       	ld	r22, Z
    28dc:	06 2e       	mov	r0, r22
    28de:	00 0c       	add	r0, r0
    28e0:	77 0b       	sbc	r23, r23
    28e2:	88 0b       	sbc	r24, r24
    28e4:	99 0b       	sbc	r25, r25
    28e6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
    28ea:	8f 81       	ldd	r24, Y+7	; 0x07
    28ec:	08 2e       	mov	r0, r24
    28ee:	00 0c       	add	r0, r0
    28f0:	99 0b       	sbc	r25, r25
    28f2:	8e 15       	cp	r24, r14
    28f4:	9f 05       	cpc	r25, r15
    28f6:	31 f4       	brne	.+12     	; 0x2904 <set_value+0x562>
    28f8:	dd 20       	and	r13, r13
    28fa:	21 f0       	breq	.+8      	; 0x2904 <set_value+0x562>
    28fc:	8b e9       	ldi	r24, 0x9B	; 155
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
					}
			GLCD_GotoY(24-4);
			GLCD_GotoX(5);
			for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    2904:	8f 81       	ldd	r24, Y+7	; 0x07
    2906:	81 50       	subi	r24, 0x01	; 1
    2908:	8f 83       	std	Y+7, r24	; 0x07
    290a:	88 23       	and	r24, r24
    290c:	04 f7       	brge	.-64     	; 0x28ce <set_value+0x52c>
				GLCD_PrintInteger(digitsArr[digitIndex]);
				if ((digitIndex==tens)&&(tens)) {GLCD_PrintString(".");}
			}
			rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    290e:	88 85       	ldd	r24, Y+8	; 0x08
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	05 9d       	mul	r16, r5
    2914:	90 2d       	mov	r25, r0
    2916:	11 24       	eor	r1, r1
    2918:	8c 9d       	mul	r24, r12
    291a:	90 0d       	add	r25, r0
    291c:	11 24       	eor	r1, r1
    291e:	85 e0       	ldi	r24, 0x05	; 5
    2920:	89 0f       	add	r24, r25
			if (tens){
    2922:	dd 20       	and	r13, r13
    2924:	49 f0       	breq	.+18     	; 0x2938 <set_value+0x596>
					if(currentItem<tens){
    2926:	20 2f       	mov	r18, r16
    2928:	00 2e       	mov	r0, r16
    292a:	00 0c       	add	r0, r0
    292c:	33 0b       	sbc	r19, r19
    292e:	2e 15       	cp	r18, r14
    2930:	3f 05       	cpc	r19, r15
    2932:	14 f4       	brge	.+4      	; 0x2938 <set_value+0x596>
						rectShift+=5;
    2934:	8a e0       	ldi	r24, 0x0A	; 10
    2936:	89 0f       	add	r24, r25
					}
				}
			GLCD_InvertRect(rectShift,24-4,rectShift+12,40-4);
    2938:	4c e0       	ldi	r20, 0x0C	; 12
    293a:	48 0f       	add	r20, r24
    293c:	24 e2       	ldi	r18, 0x24	; 36
    293e:	64 e1       	ldi	r22, 0x14	; 20
    2940:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <GLCD_InvertRect>
			GLCD_Render();
    2944:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>
			}
		while(button_monitor());
    2948:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    294c:	81 11       	cpse	r24, r1
    294e:	fc cf       	rjmp	.-8      	; 0x2948 <set_value+0x5a6>
		while(!button_monitor());
    2950:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    2954:	88 23       	and	r24, r24
    2956:	e1 f3       	breq	.-8      	; 0x2950 <set_value+0x5ae>
    2958:	e0 ce       	rjmp	.-576    	; 0x271a <set_value+0x378>
														for (int8_t i = 0;i<3;i++){GLCD_DrawRectangle(86,5+16+i*12,116,17+16+i*12,GLCD_White);}
														GLCD_Render();
														break;
													}
													else if (menuItem == 1){
														return currValue; //if changes are discarded - return initial value
    295a:	8a 2d       	mov	r24, r10
    295c:	9b 2d       	mov	r25, r11
    295e:	16 c0       	rjmp	.+44     	; 0x298c <set_value+0x5ea>
		{
			tempValue = tempValue / 10;
			maxValueLength++;
				}

		digitsArr = (int8_t*)malloc(maxValueLength * sizeof(int8_t));
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 85 24 	call	0x490a	; 0x490a <malloc>
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
		for(digitIndex = maxValueLength - 1;digitIndex>=0;digitIndex--){
    296c:	8f ef       	ldi	r24, 0xFF	; 255
    296e:	8f 83       	std	Y+7, r24	; 0x07
			}else{
				digitsArr[digitIndex] = 0;	//if current value is shorter then maximum value - set extra digits to zero
			}
		}

		int8_t rectShift = (5+(maxValueLength-1)*13)-currentItem*13;
    2970:	08 ef       	ldi	r16, 0xF8	; 248
    2972:	b7 ce       	rjmp	.-658    	; 0x26e2 <set_value+0x340>

					if (currentButton == 3) {
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]++;
						if (digitsArr[currentItem]>9)digitsArr[currentItem] = 0;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    2974:	ed 81       	ldd	r30, Y+5	; 0x05
    2976:	fe 81       	ldd	r31, Y+6	; 0x06
    2978:	e8 0d       	add	r30, r8
    297a:	f9 1d       	adc	r31, r9
    297c:	70 82       	st	Z, r7
    297e:	9c cf       	rjmp	.-200    	; 0x28b8 <set_value+0x516>
					}
					else if (currentButton == 2) {
						int8_t prevValue = digitsArr[currentItem];
						digitsArr[currentItem]--;
						if (digitsArr[currentItem]<0)digitsArr[currentItem] = 9;
						if (!check_value(new_value()))digitsArr[currentItem] = prevValue;
    2980:	ed 81       	ldd	r30, Y+5	; 0x05
    2982:	fe 81       	ldd	r31, Y+6	; 0x06
    2984:	e8 0d       	add	r30, r8
    2986:	f9 1d       	adc	r31, r9
    2988:	70 82       	st	Z, r7
    298a:	96 cf       	rjmp	.-212    	; 0x28b8 <set_value+0x516>
			GLCD_Render();
			}
		while(button_monitor());
		while(!button_monitor());
		}
    298c:	2c 96       	adiw	r28, 0x0c	; 12
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	bf 90       	pop	r11
    29aa:	af 90       	pop	r10
    29ac:	9f 90       	pop	r9
    29ae:	8f 90       	pop	r8
    29b0:	7f 90       	pop	r7
    29b2:	6f 90       	pop	r6
    29b4:	5f 90       	pop	r5
    29b6:	4f 90       	pop	r4
    29b8:	3f 90       	pop	r3
    29ba:	2f 90       	pop	r2
    29bc:	08 95       	ret

000029be <menu_screen>:
	}
}


void menu_screen(){
	while (button_monitor());
    29be:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    29c2:	81 11       	cpse	r24, r1
    29c4:	fc cf       	rjmp	.-8      	; 0x29be <menu_screen>
uint8_t offset = 75;
static int8_t menuItem;
static int8_t page;


if (menuItem > 5){page++;menuItem=0;}
    29c6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <menuItem.2775>
    29ca:	86 30       	cpi	r24, 0x06	; 6
    29cc:	54 f0       	brlt	.+20     	; 0x29e2 <menu_screen+0x24>
    29ce:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <__data_end>
    29d8:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <menuItem.2775>
if (menuItem < 0){page--;menuItem=5;}
if ((page == 2)&&(menuItem > 3)){
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	d9 f4       	brne	.+54     	; 0x2a16 <menu_screen+0x58>
    29e0:	24 c0       	rjmp	.+72     	; 0x2a2a <menu_screen+0x6c>
static int8_t menuItem;
static int8_t page;


if (menuItem > 5){page++;menuItem=0;}
if (menuItem < 0){page--;menuItem=5;}
    29e2:	88 23       	and	r24, r24
    29e4:	5c f4       	brge	.+22     	; 0x29fc <menu_screen+0x3e>
    29e6:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    29ea:	81 50       	subi	r24, 0x01	; 1
    29ec:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <__data_end>
    29f0:	95 e0       	ldi	r25, 0x05	; 5
    29f2:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <menuItem.2775>
if ((page == 2)&&(menuItem > 3)){
    29f6:	82 30       	cpi	r24, 0x02	; 2
    29f8:	71 f4       	brne	.+28     	; 0x2a16 <menu_screen+0x58>
    29fa:	08 c0       	rjmp	.+16     	; 0x2a0c <menu_screen+0x4e>
    29fc:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	49 f4       	brne	.+18     	; 0x2a16 <menu_screen+0x58>
    2a04:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <menuItem.2775>
    2a08:	84 30       	cpi	r24, 0x04	; 4
    2a0a:	7c f0       	brlt	.+30     	; 0x2a2a <menu_screen+0x6c>
	page = 0;
    2a0c:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <__data_end>
	menuItem = 0;
    2a10:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <menuItem.2775>
    2a14:	0a c0       	rjmp	.+20     	; 0x2a2a <menu_screen+0x6c>
}
if (page<0){page =2;menuItem=3;}
    2a16:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    2a1a:	88 23       	and	r24, r24
    2a1c:	34 f4       	brge	.+12     	; 0x2a2a <menu_screen+0x6c>
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <__data_end>
    2a24:	83 e0       	ldi	r24, 0x03	; 3
    2a26:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <menuItem.2775>
GLCD_Clear();
    2a2a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <GLCD_Clear>

	GLCD_SetFont(Font5x8, 5, 8, GLCD_Merge);
    2a2e:	21 e0       	ldi	r18, 0x01	; 1
    2a30:	48 e0       	ldi	r20, 0x08	; 8
    2a32:	65 e0       	ldi	r22, 0x05	; 5
    2a34:	80 ea       	ldi	r24, 0xA0	; 160
    2a36:	9b e0       	ldi	r25, 0x0B	; 11
    2a38:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <GLCD_SetFont>
if(page==0){
    2a3c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    2a40:	81 11       	cpse	r24, r1
    2a42:	88 c0       	rjmp	.+272    	; 0x2b54 <menu_screen+0x196>
//item 0
GLCD_GotoX(10);
    2a44:	8a e0       	ldi	r24, 0x0A	; 10
    2a46:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_GotoLine(1);
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
GLCD_PrintString("Dial PWM");
    2a50:	8d e9       	ldi	r24, 0x9D	; 157
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
GLCD_GotoX(offset);
    2a58:	8b e4       	ldi	r24, 0x4B	; 75
    2a5a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_PrintInteger(pwmDial);
    2a5e:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <pwmDial>
    2a62:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <pwmDial+0x1>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 1
GLCD_GotoX(10);
    2a6e:	8a e0       	ldi	r24, 0x0A	; 10
    2a70:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_GotoLine(2);
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
GLCD_PrintString("Arrow PWM");
    2a7a:	86 ea       	ldi	r24, 0xA6	; 166
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
GLCD_GotoX(offset);
    2a82:	8b e4       	ldi	r24, 0x4B	; 75
    2a84:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_PrintInteger(pwmArrow);
    2a88:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <pwmArrow>
    2a8c:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <pwmArrow+0x1>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 2
GLCD_GotoX(10);
    2a98:	8a e0       	ldi	r24, 0x0A	; 10
    2a9a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_GotoLine(3);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
GLCD_PrintString("Wheel D");
    2aa4:	80 eb       	ldi	r24, 0xB0	; 176
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
GLCD_GotoX(offset);
    2aac:	8b e4       	ldi	r24, 0x4B	; 75
    2aae:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_PrintDouble(wheelDiameter,1000);
    2ab2:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    2ab6:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    2aba:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2abe:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2ac2:	28 ee       	ldi	r18, 0xE8	; 232
    2ac4:	33 e0       	ldi	r19, 0x03	; 3
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
//item 3
GLCD_GotoX(10);
    2ace:	8a e0       	ldi	r24, 0x0A	; 10
    2ad0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_GotoLine(4);
    2ad4:	84 e0       	ldi	r24, 0x04	; 4
    2ad6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
GLCD_PrintString("Ratio");
    2ada:	88 eb       	ldi	r24, 0xB8	; 184
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
GLCD_GotoX(offset);
    2ae2:	8b e4       	ldi	r24, 0x4B	; 75
    2ae4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_PrintDouble(gearRatio,1000);
    2ae8:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2aec:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2af0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2af4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    2af8:	28 ee       	ldi	r18, 0xE8	; 232
    2afa:	33 e0       	ldi	r19, 0x03	; 3
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
//item 4
GLCD_GotoX(10);
    2b04:	8a e0       	ldi	r24, 0x0A	; 10
    2b06:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_GotoLine(5);
    2b0a:	85 e0       	ldi	r24, 0x05	; 5
    2b0c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
GLCD_PrintString("Magnets");
    2b10:	8e eb       	ldi	r24, 0xBE	; 190
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
GLCD_GotoX(offset);
    2b18:	8b e4       	ldi	r24, 0x4B	; 75
    2b1a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_PrintInteger(magnetsOnWheel);
    2b1e:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <magnetsOnWheel>
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 5
GLCD_GotoX(10);
    2b2c:	8a e0       	ldi	r24, 0x0A	; 10
    2b2e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_GotoLine(6);
    2b32:	86 e0       	ldi	r24, 0x06	; 6
    2b34:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
GLCD_PrintString("Step mode");
    2b38:	86 ec       	ldi	r24, 0xC6	; 198
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
GLCD_GotoX(offset);
    2b40:	8b e4       	ldi	r24, 0x4B	; 75
    2b42:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
GLCD_PrintInteger(stepMode);
    2b46:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <stepMode>
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>

}

if (page==1){
    2b54:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <menu_screen+0x1a0>
    2b5c:	79 c0       	rjmp	.+242    	; 0x2c50 <menu_screen+0x292>
//item 6
	GLCD_GotoX(10);
    2b5e:	8a e0       	ldi	r24, 0x0A	; 10
    2b60:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(1);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Max speed");
    2b6a:	80 ed       	ldi	r24, 0xD0	; 208
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2b72:	8b e4       	ldi	r24, 0x4B	; 75
    2b74:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_PrintInteger(scaleMax);
    2b78:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <scaleMax>
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 7
	GLCD_GotoX(10);
    2b86:	8a e0       	ldi	r24, 0x0A	; 10
    2b88:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(2);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Deg/kmh");
    2b92:	8a ed       	ldi	r24, 0xDA	; 218
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2b9a:	8b e4       	ldi	r24, 0x4B	; 75
    2b9c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_PrintDouble(degreesPerKmh,1000);
    2ba0:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    2ba4:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    2ba8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    2bac:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2bb0:	28 ee       	ldi	r18, 0xE8	; 232
    2bb2:	33 e0       	ldi	r19, 0x03	; 3
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	0e 94 07 21 	call	0x420e	; 0x420e <GLCD_PrintDouble>
//item 8
	GLCD_GotoX(10);
    2bbc:	8a e0       	ldi	r24, 0x0A	; 10
    2bbe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(3);
    2bc2:	83 e0       	ldi	r24, 0x03	; 3
    2bc4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("SM steps");
    2bc8:	82 ee       	ldi	r24, 0xE2	; 226
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2bd0:	8b e4       	ldi	r24, 0x4B	; 75
    2bd2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_PrintInteger(smSteps);
    2bd6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <smSteps>
    2bda:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <smSteps+0x1>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 9
	GLCD_GotoX(10);
    2be6:	8a e0       	ldi	r24, 0x0A	; 10
    2be8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(4);
    2bec:	84 e0       	ldi	r24, 0x04	; 4
    2bee:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Step interval");
    2bf2:	8b ee       	ldi	r24, 0xEB	; 235
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2bfa:	8b e4       	ldi	r24, 0x4B	; 75
    2bfc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_PrintInteger(stepInterval);
    2c00:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <stepInterval>
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 10
	GLCD_GotoX(10);
    2c0e:	8a e0       	ldi	r24, 0x0A	; 10
    2c10:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(5);
    2c14:	85 e0       	ldi	r24, 0x05	; 5
    2c16:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("LCD contrast");
    2c1a:	89 ef       	ldi	r24, 0xF9	; 249
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2c22:	8b e4       	ldi	r24, 0x4B	; 75
    2c24:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_PrintInteger(lcdContrast);
    2c28:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <lcdContrast>
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
//item 11
	GLCD_GotoX(10);
    2c36:	8a e0       	ldi	r24, 0x0A	; 10
    2c38:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(6);
    2c3c:	86 e0       	ldi	r24, 0x06	; 6
    2c3e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Debug mode");
    2c42:	86 e0       	ldi	r24, 0x06	; 6
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2c4a:	8b e4       	ldi	r24, 0x4B	; 75
    2c4c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	


}
if (page==2){
    2c50:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    2c54:	82 30       	cpi	r24, 0x02	; 2
    2c56:	59 f5       	brne	.+86     	; 0x2cae <menu_screen+0x2f0>
//item 12
	GLCD_GotoX(10);
    2c58:	8a e0       	ldi	r24, 0x0A	; 10
    2c5a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(1);
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Calibrate arrow");
    2c64:	81 e1       	ldi	r24, 0x11	; 17
    2c66:	91 e0       	ldi	r25, 0x01	; 1
    2c68:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	GLCD_GotoX(offset);
    2c6c:	8b e4       	ldi	r24, 0x4B	; 75
    2c6e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
//item 13
	GLCD_GotoX(10);
    2c72:	8a e0       	ldi	r24, 0x0A	; 10
    2c74:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(2);
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Odometer reset");
    2c7e:	81 e2       	ldi	r24, 0x21	; 33
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
//item 14
	GLCD_GotoX(10);
    2c86:	8a e0       	ldi	r24, 0x0A	; 10
    2c88:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(3);
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Load defaults");
    2c92:	80 e3       	ldi	r24, 0x30	; 48
    2c94:	91 e0       	ldi	r25, 0x01	; 1
    2c96:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
//item 15
	GLCD_GotoX(10);
    2c9a:	8a e0       	ldi	r24, 0x0A	; 10
    2c9c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoLine(4);
    2ca0:	84 e0       	ldi	r24, 0x04	; 4
    2ca2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <GLCD_GotoLine>
	GLCD_PrintString("Exit");
    2ca6:	8e e3       	ldi	r24, 0x3E	; 62
    2ca8:	91 e0       	ldi	r25, 0x01	; 1
    2caa:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
}

GLCD_InvertRect(0,menuItem*8+7,127,menuItem*8+15);
    2cae:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <menuItem.2775>
    2cb2:	66 0f       	add	r22, r22
    2cb4:	66 0f       	add	r22, r22
    2cb6:	66 0f       	add	r22, r22
    2cb8:	2f e0       	ldi	r18, 0x0F	; 15
    2cba:	26 0f       	add	r18, r22
    2cbc:	69 5f       	subi	r22, 0xF9	; 249
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <GLCD_InvertRect>
GLCD_Render();
    2cc6:	0e 94 27 19 	call	0x324e	; 0x324e <GLCD_Render>

uint8_t currentButton = 0;
uint16_t newValue = 0;
while(1){
		 currentButton = button_monitor();
    2cca:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
		if(currentButton){
    2cce:	88 23       	and	r24, r24
    2cd0:	e1 f3       	breq	.-8      	; 0x2cca <menu_screen+0x30c>
			if (currentButton == 1){
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <menu_screen+0x31a>
    2cd6:	1b c2       	rjmp	.+1078   	; 0x310e <menu_screen+0x750>
								switch(menuItem+6*page)		{
    2cd8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
    2cdc:	08 2e       	mov	r0, r24
    2cde:	00 0c       	add	r0, r0
    2ce0:	99 0b       	sbc	r25, r25
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	e8 0f       	add	r30, r24
    2cea:	f9 1f       	adc	r31, r25
    2cec:	ee 0f       	add	r30, r30
    2cee:	ff 1f       	adc	r31, r31
    2cf0:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <menuItem.2775>
    2cf4:	e8 0f       	add	r30, r24
    2cf6:	f1 1d       	adc	r31, r1
    2cf8:	87 fd       	sbrc	r24, 7
    2cfa:	fa 95       	dec	r31
    2cfc:	e0 31       	cpi	r30, 0x10	; 16
    2cfe:	f1 05       	cpc	r31, r1
    2d00:	08 f0       	brcs	.+2      	; 0x2d04 <menu_screen+0x346>
    2d02:	14 c2       	rjmp	.+1064   	; 0x312c <menu_screen+0x76e>
    2d04:	e6 5d       	subi	r30, 0xD6	; 214
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__tablejump2__>
											case 0:
											{
												newValue = set_value(1024,0,pwmDial,0,"Dial light PWM");
    2d0c:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <pwmDial>
    2d10:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <pwmDial+0x1>
    2d14:	03 e4       	ldi	r16, 0x43	; 67
    2d16:	11 e0       	ldi	r17, 0x01	; 1
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	94 e0       	ldi	r25, 0x04	; 4
    2d22:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=pwmDial){
    2d26:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <pwmDial>
    2d2a:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <pwmDial+0x1>
    2d2e:	82 17       	cp	r24, r18
    2d30:	93 07       	cpc	r25, r19
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <menu_screen+0x378>
    2d34:	fb c1       	rjmp	.+1014   	; 0x312c <menu_screen+0x76e>
													pwmDial = newValue;
    2d36:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <pwmDial+0x1>
    2d3a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pwmDial>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	64 e0       	ldi	r22, 0x04	; 4
    2d42:	88 e0       	ldi	r24, 0x08	; 8
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2d4a:	f0 c1       	rjmp	.+992    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 1:
											{
												newValue = set_value(1024,0,pwmArrow,0,"Arrow light PWM");
    2d4c:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <pwmArrow>
    2d50:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <pwmArrow+0x1>
    2d54:	02 e5       	ldi	r16, 0x52	; 82
    2d56:	11 e0       	ldi	r17, 0x01	; 1
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	94 e0       	ldi	r25, 0x04	; 4
    2d62:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=pwmArrow){
    2d66:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <pwmArrow>
    2d6a:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <pwmArrow+0x1>
    2d6e:	82 17       	cp	r24, r18
    2d70:	93 07       	cpc	r25, r19
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <menu_screen+0x3b8>
    2d74:	db c1       	rjmp	.+950    	; 0x312c <menu_screen+0x76e>
													pwmArrow = newValue;
    2d76:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pwmArrow+0x1>
    2d7a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pwmArrow>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2d7e:	41 e0       	ldi	r20, 0x01	; 1
    2d80:	64 e0       	ldi	r22, 0x04	; 4
    2d82:	88 e0       	ldi	r24, 0x08	; 8
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2d8a:	d0 c1       	rjmp	.+928    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 2:
											{
												newValue = set_value(1500,150,wheelDiameter*1000,3,"Wheel Diameter (m)");
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a e7       	ldi	r20, 0x7A	; 122
    2d92:	54 e4       	ldi	r21, 0x44	; 68
    2d94:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    2d98:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    2d9c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2da0:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2da4:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2da8:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    2dac:	02 e6       	ldi	r16, 0x62	; 98
    2dae:	11 e0       	ldi	r17, 0x01	; 1
    2db0:	23 e0       	ldi	r18, 0x03	; 3
    2db2:	ab 01       	movw	r20, r22
    2db4:	66 e9       	ldi	r22, 0x96	; 150
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	8c ed       	ldi	r24, 0xDC	; 220
    2dba:	95 e0       	ldi	r25, 0x05	; 5
    2dbc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=wheelDiameter*1000){
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    2dca:	6b 01       	movw	r12, r22
    2dcc:	7c 01       	movw	r14, r24
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a e7       	ldi	r20, 0x7A	; 122
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <wheelDiameter>
    2dda:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <wheelDiameter+0x1>
    2dde:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <wheelDiameter+0x2>
    2de2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <wheelDiameter+0x3>
    2de6:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2dea:	9b 01       	movw	r18, r22
    2dec:	ac 01       	movw	r20, r24
    2dee:	c7 01       	movw	r24, r14
    2df0:	b6 01       	movw	r22, r12
    2df2:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <menu_screen+0x43e>
    2dfa:	98 c1       	rjmp	.+816    	; 0x312c <menu_screen+0x76e>
													wheelDiameter = newValue/1000.0;
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	4a e7       	ldi	r20, 0x7A	; 122
    2e02:	54 e4       	ldi	r21, 0x44	; 68
    2e04:	c7 01       	movw	r24, r14
    2e06:	b6 01       	movw	r22, r12
    2e08:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    2e0c:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <wheelDiameter>
    2e10:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <wheelDiameter+0x1>
    2e14:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <wheelDiameter+0x2>
    2e18:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <wheelDiameter+0x3>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	88 e0       	ldi	r24, 0x08	; 8
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2e28:	81 c1       	rjmp	.+770    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 3:
											{
												newValue = set_value(1000,150,gearRatio*1000,3,"Gear ratio");
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4a e7       	ldi	r20, 0x7A	; 122
    2e30:	54 e4       	ldi	r21, 0x44	; 68
    2e32:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2e36:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2e3a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2e3e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    2e42:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2e46:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    2e4a:	05 e7       	ldi	r16, 0x75	; 117
    2e4c:	11 e0       	ldi	r17, 0x01	; 1
    2e4e:	23 e0       	ldi	r18, 0x03	; 3
    2e50:	ab 01       	movw	r20, r22
    2e52:	66 e9       	ldi	r22, 0x96	; 150
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	88 ee       	ldi	r24, 0xE8	; 232
    2e58:	93 e0       	ldi	r25, 0x03	; 3
    2e5a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=gearRatio*1000){
    2e5e:	bc 01       	movw	r22, r24
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    2e68:	6b 01       	movw	r12, r22
    2e6a:	7c 01       	movw	r14, r24
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	4a e7       	ldi	r20, 0x7A	; 122
    2e72:	54 e4       	ldi	r21, 0x44	; 68
    2e74:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <gearRatio>
    2e78:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <gearRatio+0x1>
    2e7c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gearRatio+0x2>
    2e80:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gearRatio+0x3>
    2e84:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2e88:	9b 01       	movw	r18, r22
    2e8a:	ac 01       	movw	r20, r24
    2e8c:	c7 01       	movw	r24, r14
    2e8e:	b6 01       	movw	r22, r12
    2e90:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <menu_screen+0x4dc>
    2e98:	49 c1       	rjmp	.+658    	; 0x312c <menu_screen+0x76e>
													gearRatio = newValue/1000.0;
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ea0:	54 e4       	ldi	r21, 0x44	; 68
    2ea2:	c7 01       	movw	r24, r14
    2ea4:	b6 01       	movw	r22, r12
    2ea6:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    2eaa:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <gearRatio>
    2eae:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <gearRatio+0x1>
    2eb2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gearRatio+0x2>
    2eb6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gearRatio+0x3>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2eba:	41 e0       	ldi	r20, 0x01	; 1
    2ebc:	64 e0       	ldi	r22, 0x04	; 4
    2ebe:	88 e0       	ldi	r24, 0x08	; 8
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2ec6:	32 c1       	rjmp	.+612    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 4:
											{
												newValue = set_value(16,1,magnetsOnWheel,0,"Magnets on the wheel");
    2ec8:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <magnetsOnWheel>
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	00 e8       	ldi	r16, 0x80	; 128
    2ed0:	11 e0       	ldi	r17, 0x01	; 1
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	80 e1       	ldi	r24, 0x10	; 16
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=magnetsOnWheel){
    2ee0:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <magnetsOnWheel>
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	82 17       	cp	r24, r18
    2ee8:	93 07       	cpc	r25, r19
    2eea:	09 f4       	brne	.+2      	; 0x2eee <menu_screen+0x530>
    2eec:	1f c1       	rjmp	.+574    	; 0x312c <menu_screen+0x76e>
													magnetsOnWheel = newValue;
    2eee:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <magnetsOnWheel>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	64 e0       	ldi	r22, 0x04	; 4
    2ef6:	88 e0       	ldi	r24, 0x08	; 8
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2efe:	16 c1       	rjmp	.+556    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 5:
											{
												newValue = set_value(1,0,stepMode,0,"0-full, 1-half");
    2f00:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <stepMode>
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	05 e9       	ldi	r16, 0x95	; 149
    2f08:	11 e0       	ldi	r17, 0x01	; 1
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=stepMode){
    2f18:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <stepMode>
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	82 17       	cp	r24, r18
    2f20:	93 07       	cpc	r25, r19
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <menu_screen+0x568>
    2f24:	03 c1       	rjmp	.+518    	; 0x312c <menu_screen+0x76e>
													stepMode = newValue;
    2f26:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <stepMode>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2f2a:	41 e0       	ldi	r20, 0x01	; 1
    2f2c:	64 e0       	ldi	r22, 0x04	; 4
    2f2e:	88 e0       	ldi	r24, 0x08	; 8
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2f36:	fa c0       	rjmp	.+500    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 6:
											{
												newValue = set_value(400,40,scaleMax,0,"Maximum speed");
    2f38:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <scaleMax>
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	04 ea       	ldi	r16, 0xA4	; 164
    2f40:	11 e0       	ldi	r17, 0x01	; 1
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	68 e2       	ldi	r22, 0x28	; 40
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	80 e9       	ldi	r24, 0x90	; 144
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=scaleMax){
    2f50:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <scaleMax>
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	82 17       	cp	r24, r18
    2f58:	93 07       	cpc	r25, r19
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <menu_screen+0x5a0>
    2f5c:	e7 c0       	rjmp	.+462    	; 0x312c <menu_screen+0x76e>
													scaleMax = newValue;
    2f5e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <scaleMax>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    2f62:	41 e0       	ldi	r20, 0x01	; 1
    2f64:	64 e0       	ldi	r22, 0x04	; 4
    2f66:	88 e0       	ldi	r24, 0x08	; 8
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    2f6e:	de c0       	rjmp	.+444    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 7:
											{
												newValue = set_value(4000,100,degreesPerKmh*1000,3,"Degrees per km/h");
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a e7       	ldi	r20, 0x7A	; 122
    2f76:	54 e4       	ldi	r21, 0x44	; 68
    2f78:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    2f7c:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    2f80:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    2f84:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2f88:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2f8c:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    2f90:	02 eb       	ldi	r16, 0xB2	; 178
    2f92:	11 e0       	ldi	r17, 0x01	; 1
    2f94:	23 e0       	ldi	r18, 0x03	; 3
    2f96:	ab 01       	movw	r20, r22
    2f98:	64 e6       	ldi	r22, 0x64	; 100
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	80 ea       	ldi	r24, 0xA0	; 160
    2f9e:	9f e0       	ldi	r25, 0x0F	; 15
    2fa0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=degreesPerKmh*1000){
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    2fae:	6b 01       	movw	r12, r22
    2fb0:	7c 01       	movw	r14, r24
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a e7       	ldi	r20, 0x7A	; 122
    2fb8:	54 e4       	ldi	r21, 0x44	; 68
    2fba:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <degreesPerKmh>
    2fbe:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <degreesPerKmh+0x1>
    2fc2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <degreesPerKmh+0x2>
    2fc6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <degreesPerKmh+0x3>
    2fca:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    2fce:	9b 01       	movw	r18, r22
    2fd0:	ac 01       	movw	r20, r24
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    2fda:	88 23       	and	r24, r24
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <menu_screen+0x622>
    2fde:	a6 c0       	rjmp	.+332    	; 0x312c <menu_screen+0x76e>
													degreesPerKmh = newValue/1000.0;
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	4a e7       	ldi	r20, 0x7A	; 122
    2fe6:	54 e4       	ldi	r21, 0x44	; 68
    2fe8:	c7 01       	movw	r24, r14
    2fea:	b6 01       	movw	r22, r12
    2fec:	0e 94 0d 22 	call	0x441a	; 0x441a <__divsf3>
    2ff0:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <degreesPerKmh>
    2ff4:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <degreesPerKmh+0x1>
    2ff8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <degreesPerKmh+0x2>
    2ffc:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <degreesPerKmh+0x3>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	64 e0       	ldi	r22, 0x04	; 4
    3004:	88 e0       	ldi	r24, 0x08	; 8
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    300c:	8f c0       	rjmp	.+286    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 8:
											{
												newValue = set_value(400,16,smSteps,0,"Stepper motor steps");
    300e:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <smSteps>
    3012:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <smSteps+0x1>
    3016:	03 ec       	ldi	r16, 0xC3	; 195
    3018:	11 e0       	ldi	r17, 0x01	; 1
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	60 e1       	ldi	r22, 0x10	; 16
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	80 e9       	ldi	r24, 0x90	; 144
    3022:	91 e0       	ldi	r25, 0x01	; 1
    3024:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=smSteps){
    3028:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <smSteps>
    302c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <smSteps+0x1>
    3030:	82 17       	cp	r24, r18
    3032:	93 07       	cpc	r25, r19
    3034:	09 f4       	brne	.+2      	; 0x3038 <menu_screen+0x67a>
    3036:	7a c0       	rjmp	.+244    	; 0x312c <menu_screen+0x76e>
													smSteps = newValue;
    3038:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <smSteps+0x1>
    303c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <smSteps>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	64 e0       	ldi	r22, 0x04	; 4
    3044:	88 e0       	ldi	r24, 0x08	; 8
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    304c:	6f c0       	rjmp	.+222    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 9:
											{
												newValue = set_value(500,50,stepInterval,0,"Time between steps");
    304e:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <stepInterval>
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	07 ed       	ldi	r16, 0xD7	; 215
    3056:	11 e0       	ldi	r17, 0x01	; 1
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	62 e3       	ldi	r22, 0x32	; 50
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	84 ef       	ldi	r24, 0xF4	; 244
    3060:	91 e0       	ldi	r25, 0x01	; 1
    3062:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=stepInterval){
    3066:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <stepInterval>
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	82 17       	cp	r24, r18
    306e:	93 07       	cpc	r25, r19
    3070:	09 f4       	brne	.+2      	; 0x3074 <menu_screen+0x6b6>
    3072:	5c c0       	rjmp	.+184    	; 0x312c <menu_screen+0x76e>
													stepInterval = newValue;
    3074:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepInterval>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    3078:	41 e0       	ldi	r20, 0x01	; 1
    307a:	64 e0       	ldi	r22, 0x04	; 4
    307c:	88 e0       	ldi	r24, 0x08	; 8
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    3084:	53 c0       	rjmp	.+166    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 10:
											{
												newValue = set_value(255,10,lcdContrast,0,"LCD contrast");
    3086:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <lcdContrast>
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	09 ef       	ldi	r16, 0xF9	; 249
    308e:	10 e0       	ldi	r17, 0x00	; 0
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	6a e0       	ldi	r22, 0x0A	; 10
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	8f ef       	ldi	r24, 0xFF	; 255
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <set_value>
												if (newValue!=lcdContrast){
    309e:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <lcdContrast>
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	82 17       	cp	r24, r18
    30a6:	93 07       	cpc	r25, r19
    30a8:	09 f4       	brne	.+2      	; 0x30ac <menu_screen+0x6ee>
    30aa:	40 c0       	rjmp	.+128    	; 0x312c <menu_screen+0x76e>
													lcdContrast = newValue;
    30ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <lcdContrast>
													GLCD_SetContrast(lcdContrast);
    30b0:	0e 94 51 19 	call	0x32a2	; 0x32a2 <GLCD_SetContrast>
													eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    30b4:	41 e0       	ldi	r20, 0x01	; 1
    30b6:	64 e0       	ldi	r22, 0x04	; 4
    30b8:	88 e0       	ldi	r24, 0x08	; 8
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    30c0:	35 c0       	rjmp	.+106    	; 0x312c <menu_screen+0x76e>
												}
												break;
											}
											case 11:
											{
												debugMode = 1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <debugMode>
												while (button_monitor());
    30c8:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    30cc:	81 11       	cpse	r24, r1
    30ce:	fc cf       	rjmp	.-8      	; 0x30c8 <menu_screen+0x70a>
												main();
    30d0:	0e 94 98 18 	call	0x3130	; 0x3130 <main>
												break;
    30d4:	2b c0       	rjmp	.+86     	; 0x312c <menu_screen+0x76e>
											}
											case 12:
											{
												arrow_calibration();
    30d6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <arrow_calibration>
												break;
    30da:	28 c0       	rjmp	.+80     	; 0x312c <menu_screen+0x76e>
											}
											case 13:
											{
											//odometer reset
												totalRotations = 0;
    30dc:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <totalRotations>
    30e0:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <totalRotations+0x1>
    30e4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <totalRotations+0x2>
    30e8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <totalRotations+0x3>
    30ec:	c3 e3       	ldi	r28, 0x33	; 51
												for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
													eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    30ee:	43 e0       	ldi	r20, 0x03	; 3
    30f0:	64 e0       	ldi	r22, 0x04	; 4
    30f2:	80 e8       	ldi	r24, 0x80	; 128
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <eep_operations>
    30fa:	c1 50       	subi	r28, 0x01	; 1
											}
											case 13:
											{
											//odometer reset
												totalRotations = 0;
												for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    30fc:	c1 f7       	brne	.-16     	; 0x30ee <menu_screen+0x730>
    30fe:	16 c0       	rjmp	.+44     	; 0x312c <menu_screen+0x76e>
											break;
											}
											case 15:
											{
												//exit menu
												while (button_monitor());
    3100:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    3104:	81 11       	cpse	r24, r1
    3106:	fc cf       	rjmp	.-8      	; 0x3100 <menu_screen+0x742>
												main();
    3108:	0e 94 98 18 	call	0x3130	; 0x3130 <main>
    310c:	0f c0       	rjmp	.+30     	; 0x312c <menu_screen+0x76e>
											}
										}
//
			}

			else if(currentButton == 2)	menuItem++;
    310e:	82 30       	cpi	r24, 0x02	; 2
    3110:	31 f4       	brne	.+12     	; 0x311e <menu_screen+0x760>
    3112:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <menuItem.2775>
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <menuItem.2775>
    311c:	07 c0       	rjmp	.+14     	; 0x312c <menu_screen+0x76e>

			else if(currentButton == 3)	menuItem--;
    311e:	83 30       	cpi	r24, 0x03	; 3
    3120:	29 f4       	brne	.+10     	; 0x312c <menu_screen+0x76e>
    3122:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <menuItem.2775>
    3126:	81 50       	subi	r24, 0x01	; 1
    3128:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <menuItem.2775>

		//while (button_monitor());
		menu_screen();
    312c:	0e 94 df 14 	call	0x29be	; 0x29be <menu_screen>

00003130 <main>:
}


int main(void)
{
	presets();
    3130:	0e 94 64 10 	call	0x20c8	; 0x20c8 <presets>
	main_screen();
    3134:	0e 94 28 0c 	call	0x1850	; 0x1850 <main_screen>
	while(1){

		data_monitor();
    3138:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <data_monitor>
		calculate_speed();
    313c:	0e 94 47 11 	call	0x228e	; 0x228e <calculate_speed>
		speed_arrow_update();
    3140:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <speed_arrow_update>
		signal_monitor();
    3144:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <signal_monitor>
		if(button_monitor()) menu_screen();
    3148:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <button_monitor>
    314c:	88 23       	and	r24, r24
    314e:	a1 f3       	breq	.-24     	; 0x3138 <main+0x8>
    3150:	0e 94 df 14 	call	0x29be	; 0x29be <menu_screen>

00003154 <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    3154:	66 95       	lsr	r22
    3156:	66 95       	lsr	r22
    3158:	66 95       	lsr	r22
    315a:	90 e8       	ldi	r25, 0x80	; 128
    315c:	69 9f       	mul	r22, r25
    315e:	b0 01       	movw	r22, r0
    3160:	11 24       	eor	r1, r1
    3162:	68 0f       	add	r22, r24
    3164:	71 1d       	adc	r23, r1
    3166:	fb 01       	movw	r30, r22
    3168:	ed 5c       	subi	r30, 0xCD	; 205
    316a:	fd 4f       	sbci	r31, 0xFD	; 253
    316c:	40 83       	st	Z, r20
    316e:	08 95       	ret

00003170 <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    3170:	66 95       	lsr	r22
    3172:	66 95       	lsr	r22
    3174:	66 95       	lsr	r22
    3176:	90 e8       	ldi	r25, 0x80	; 128
    3178:	69 9f       	mul	r22, r25
    317a:	b0 01       	movw	r22, r0
    317c:	11 24       	eor	r1, r1
    317e:	68 0f       	add	r22, r24
    3180:	71 1d       	adc	r23, r1
    3182:	fb 01       	movw	r30, r22
    3184:	ed 5c       	subi	r30, 0xCD	; 205
    3186:	fd 4f       	sbci	r31, 0xFD	; 253
}
    3188:	80 81       	ld	r24, Z
    318a:	08 95       	ret

0000318c <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	c8 2f       	mov	r28, r24
    3198:	06 2f       	mov	r16, r22
    319a:	17 2f       	mov	r17, r23
    319c:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    319e:	0e 94 84 21 	call	0x4308	; 0x4308 <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    31a2:	0e 94 81 21 	call	0x4302	; 0x4302 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    31a6:	88 30       	cpi	r24, 0x08	; 8
    31a8:	31 f0       	breq	.+12     	; 0x31b6 <GLCD_Send+0x2a>
    31aa:	80 31       	cpi	r24, 0x10	; 16
    31ac:	21 f0       	breq	.+8      	; 0x31b6 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__GLCD>
				break;
    31b4:	33 c0       	rjmp	.+102    	; 0x321c <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    31b6:	88 e7       	ldi	r24, 0x78	; 120
    31b8:	0e 94 92 21 	call	0x4324	; 0x4324 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    31bc:	0e 94 81 21 	call	0x4302	; 0x4302 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    31c0:	88 31       	cpi	r24, 0x18	; 24
    31c2:	31 f0       	breq	.+12     	; 0x31d0 <GLCD_Send+0x44>
    31c4:	80 32       	cpi	r24, 0x20	; 32
    31c6:	21 f0       	breq	.+8      	; 0x31d0 <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__GLCD>
				break;
    31ce:	26 c0       	rjmp	.+76     	; 0x321c <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    31d0:	8c 2f       	mov	r24, r28
    31d2:	0e 94 92 21 	call	0x4324	; 0x4324 <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    31d6:	0e 94 81 21 	call	0x4302	; 0x4302 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    31da:	88 32       	cpi	r24, 0x28	; 40
    31dc:	19 f4       	brne	.+6      	; 0x31e4 <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    31de:	f1 10       	cpse	r15, r1
    31e0:	07 c0       	rjmp	.+14     	; 0x31f0 <GLCD_Send+0x64>
    31e2:	1a c0       	rjmp	.+52     	; 0x3218 <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    31e4:	80 33       	cpi	r24, 0x30	; 48
    31e6:	d9 f3       	breq	.-10     	; 0x31de <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__GLCD>
				break;
    31ee:	16 c0       	rjmp	.+44     	; 0x321c <GLCD_Send+0x90>
    31f0:	c0 2f       	mov	r28, r16
    31f2:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    31f4:	8e 01       	movw	r16, r28
    31f6:	0f 5f       	subi	r16, 0xFF	; 255
    31f8:	1f 4f       	sbci	r17, 0xFF	; 255
    31fa:	fa 94       	dec	r15
    31fc:	0f 0d       	add	r16, r15
    31fe:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    3200:	89 91       	ld	r24, Y+
    3202:	0e 94 92 21 	call	0x4324	; 0x4324 <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    3206:	0e 94 81 21 	call	0x4302	; 0x4302 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    320a:	88 32       	cpi	r24, 0x28	; 40
    320c:	11 f0       	breq	.+4      	; 0x3212 <GLCD_Send+0x86>
    320e:	80 33       	cpi	r24, 0x30	; 48
    3210:	19 f4       	brne	.+6      	; 0x3218 <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    3212:	c0 17       	cp	r28, r16
    3214:	d1 07       	cpc	r29, r17
    3216:	a1 f7       	brne	.-24     	; 0x3200 <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    3218:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    321c:	0e 94 8c 21 	call	0x4318	; 0x4318 <TWI_EndTransmission>
}
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	08 95       	ret

0000322c <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	1f 92       	push	r1
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	be 01       	movw	r22, r28
    323c:	6f 5f       	subi	r22, 0xFF	; 255
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	0e 94 c6 18 	call	0x318c	; 0x318c <GLCD_Send>
}
    3246:	0f 90       	pop	r0
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	08 95       	ret

0000324e <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    3252:	81 e2       	ldi	r24, 0x21	; 33
    3254:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    325e:	8f e7       	ldi	r24, 0x7F	; 127
    3260:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    3264:	82 e2       	ldi	r24, 0x22	; 34
    3266:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    3270:	87 e0       	ldi	r24, 0x07	; 7
    3272:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
    3276:	c0 e0       	ldi	r28, 0x00	; 0
    3278:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    327a:	be 01       	movw	r22, r28
    327c:	62 95       	swap	r22
    327e:	72 95       	swap	r23
    3280:	70 7f       	andi	r23, 0xF0	; 240
    3282:	76 27       	eor	r23, r22
    3284:	60 7f       	andi	r22, 0xF0	; 240
    3286:	76 27       	eor	r23, r22
    3288:	6d 5c       	subi	r22, 0xCD	; 205
    328a:	7d 4f       	sbci	r23, 0xFD	; 253
    328c:	40 e1       	ldi	r20, 0x10	; 16
    328e:	80 e4       	ldi	r24, 0x40	; 64
    3290:	0e 94 c6 18 	call	0x318c	; 0x318c <GLCD_Send>
    3294:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    3296:	c0 34       	cpi	r28, 0x40	; 64
    3298:	d1 05       	cpc	r29, r1
    329a:	79 f7       	brne	.-34     	; 0x327a <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	08 95       	ret

000032a2 <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    32a2:	cf 93       	push	r28
    32a4:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    32a6:	81 e8       	ldi	r24, 0x81	; 129
    32a8:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    32ac:	8c 2f       	mov	r24, r28
    32ae:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
}
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    32b6:	88 23       	and	r24, r24
    32b8:	14 f0       	brlt	.+4      	; 0x32be <GLCD_GotoX+0x8>
		__GLCD.X = X;
    32ba:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__GLCD+0x1>
    32be:	08 95       	ret

000032c0 <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    32c0:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__GLCD+0x2>
    32c4:	90 34       	cpi	r25, 0x40	; 64
    32c6:	10 f4       	brcc	.+4      	; 0x32cc <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    32c8:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__GLCD+0x2>
    32cc:	08 95       	ret

000032ce <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    32ce:	cf 93       	push	r28
    32d0:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    32d2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <GLCD_GotoX>
	GLCD_GotoY(Y);
    32d6:	8c 2f       	mov	r24, r28
    32d8:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GLCD_GotoY>
}
    32dc:	cf 91       	pop	r28
    32de:	08 95       	ret

000032e0 <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    32e0:	0e 94 77 21 	call	0x42ee	; 0x42ee <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    32e4:	8e ea       	ldi	r24, 0xAE	; 174
    32e6:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    32ea:	85 ed       	ldi	r24, 0xD5	; 213
    32ec:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    32f0:	80 ef       	ldi	r24, 0xF0	; 240
    32f2:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    32f6:	88 ea       	ldi	r24, 0xA8	; 168
    32f8:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    32fc:	8f e3       	ldi	r24, 0x3F	; 63
    32fe:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    3302:	83 ed       	ldi	r24, 0xD3	; 211
    3304:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    330e:	8d e8       	ldi	r24, 0x8D	; 141
    3310:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    3314:	84 e1       	ldi	r24, 0x14	; 20
    3316:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    331a:	80 e4       	ldi	r24, 0x40	; 64
    331c:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    3320:	80 e2       	ldi	r24, 0x20	; 32
    3322:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    332c:	81 ea       	ldi	r24, 0xA1	; 161
    332e:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    3332:	88 ec       	ldi	r24, 0xC8	; 200
    3334:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    3338:	8a ed       	ldi	r24, 0xDA	; 218
    333a:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    333e:	82 e1       	ldi	r24, 0x12	; 18
    3340:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    3344:	81 e8       	ldi	r24, 0x81	; 129
    3346:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    334a:	8f ef       	ldi	r24, 0xFF	; 255
    334c:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    3350:	89 ed       	ldi	r24, 0xD9	; 217
    3352:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    3356:	81 ef       	ldi	r24, 0xF1	; 241
    3358:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    335c:	8b ed       	ldi	r24, 0xDB	; 219
    335e:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    3362:	80 e2       	ldi	r24, 0x20	; 32
    3364:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    3368:	84 ea       	ldi	r24, 0xA4	; 164
    336a:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    336e:	86 ea       	ldi	r24, 0xA6	; 166
    3370:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    3374:	8e e2       	ldi	r24, 0x2E	; 46
    3376:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    337a:	8f ea       	ldi	r24, 0xAF	; 175
    337c:	0e 94 16 19 	call	0x322c	; 0x322c <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    3388:	86 ea       	ldi	r24, 0xA6	; 166
    338a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    338e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__GLCD+0x8>
    3392:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__GLCD+0x7>
    3396:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <__GLCD+0x6>
    339a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__GLCD+0x2>
    339e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__GLCD+0x1>
    33a2:	08 95       	ret

000033a4 <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    33a4:	88 30       	cpi	r24, 0x08	; 8
    33a6:	28 f4       	brcc	.+10     	; 0x33b2 <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    33a8:	88 0f       	add	r24, r24
    33aa:	88 0f       	add	r24, r24
    33ac:	88 0f       	add	r24, r24
    33ae:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__GLCD+0x2>
    33b2:	08 95       	ret

000033b4 <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    33b4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__GLCD+0x1>
    33b8:	08 95       	ret

000033ba <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    33ba:	8f 92       	push	r8
    33bc:	9f 92       	push	r9
    33be:	af 92       	push	r10
    33c0:	bf 92       	push	r11
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	06 2f       	mov	r16, r22
    33d4:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    33d6:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    33da:	d0 91 2b 02 	lds	r29, 0x022B	; 0x80022b <__GLCD+0x2>
    33de:	c0 91 2a 02 	lds	r28, 0x022A	; 0x80022a <__GLCD+0x1>
    33e2:	6d 2f       	mov	r22, r29
    33e4:	8c 2f       	mov	r24, r28
    33e6:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    33ea:	1f 3f       	cpi	r17, 0xFF	; 255
    33ec:	91 f4       	brne	.+36     	; 0x3412 <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    33ee:	90 2f       	mov	r25, r16
    33f0:	97 70       	andi	r25, 0x07	; 7
    33f2:	81 2c       	mov	r8, r1
    33f4:	91 2c       	mov	r9, r1
    33f6:	54 01       	movw	r10, r8
    33f8:	83 94       	inc	r8
    33fa:	75 01       	movw	r14, r10
    33fc:	64 01       	movw	r12, r8
    33fe:	04 c0       	rjmp	.+8      	; 0x3408 <GLCD_SetPixel+0x4e>
    3400:	cc 0c       	add	r12, r12
    3402:	dd 1c       	adc	r13, r13
    3404:	ee 1c       	adc	r14, r14
    3406:	ff 1c       	adc	r15, r15
    3408:	9a 95       	dec	r25
    340a:	d2 f7       	brpl	.-12     	; 0x3400 <GLCD_SetPixel+0x46>
    340c:	48 2f       	mov	r20, r24
    340e:	4c 29       	or	r20, r12
    3410:	13 c0       	rjmp	.+38     	; 0x3438 <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    3412:	07 70       	andi	r16, 0x07	; 7
    3414:	c1 2c       	mov	r12, r1
    3416:	d1 2c       	mov	r13, r1
    3418:	76 01       	movw	r14, r12
    341a:	c3 94       	inc	r12
    341c:	b7 01       	movw	r22, r14
    341e:	a6 01       	movw	r20, r12
    3420:	04 c0       	rjmp	.+8      	; 0x342a <GLCD_SetPixel+0x70>
    3422:	44 0f       	add	r20, r20
    3424:	55 1f       	adc	r21, r21
    3426:	66 1f       	adc	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	0a 95       	dec	r16
    342c:	d2 f7       	brpl	.-12     	; 0x3422 <GLCD_SetPixel+0x68>
    342e:	8a 01       	movw	r16, r20
    3430:	9b 01       	movw	r18, r22
    3432:	00 95       	com	r16
    3434:	48 2f       	mov	r20, r24
    3436:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    3438:	6d 2f       	mov	r22, r29
    343a:	8c 2f       	mov	r24, r28
    343c:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
}
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	ff 90       	pop	r15
    344a:	ef 90       	pop	r14
    344c:	df 90       	pop	r13
    344e:	cf 90       	pop	r12
    3450:	bf 90       	pop	r11
    3452:	af 90       	pop	r10
    3454:	9f 90       	pop	r9
    3456:	8f 90       	pop	r8
    3458:	08 95       	ret

0000345a <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    345a:	3f 92       	push	r3
    345c:	4f 92       	push	r4
    345e:	5f 92       	push	r5
    3460:	6f 92       	push	r6
    3462:	7f 92       	push	r7
    3464:	8f 92       	push	r8
    3466:	9f 92       	push	r9
    3468:	af 92       	push	r10
    346a:	bf 92       	push	r11
    346c:	cf 92       	push	r12
    346e:	df 92       	push	r13
    3470:	ef 92       	push	r14
    3472:	ff 92       	push	r15
    3474:	0f 93       	push	r16
    3476:	1f 93       	push	r17
    3478:	cf 93       	push	r28
    347a:	df 93       	push	r29
    347c:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    347e:	88 23       	and	r24, r24
    3480:	0c f4       	brge	.+2      	; 0x3484 <GLCD_SetPixels+0x2a>
    3482:	c6 c0       	rjmp	.+396    	; 0x3610 <GLCD_SetPixels+0x1b6>
    3484:	44 23       	and	r20, r20
    3486:	0c f4       	brge	.+2      	; 0x348a <GLCD_SetPixels+0x30>
    3488:	c3 c0       	rjmp	.+390    	; 0x3610 <GLCD_SetPixels+0x1b6>
    348a:	60 34       	cpi	r22, 0x40	; 64
    348c:	08 f0       	brcs	.+2      	; 0x3490 <GLCD_SetPixels+0x36>
    348e:	c0 c0       	rjmp	.+384    	; 0x3610 <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3490:	20 34       	cpi	r18, 0x40	; 64
    3492:	08 f0       	brcs	.+2      	; 0x3496 <GLCD_SetPixels+0x3c>
    3494:	bd c0       	rjmp	.+378    	; 0x3610 <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    3496:	11 e0       	ldi	r17, 0x01	; 1
    3498:	81 2e       	mov	r8, r17
    349a:	86 1a       	sub	r8, r22
    349c:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    349e:	18 1b       	sub	r17, r24
    34a0:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    34a2:	46 2f       	mov	r20, r22
    34a4:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    34a6:	76 2e       	mov	r7, r22
    34a8:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    34aa:	e8 2c       	mov	r14, r8
    34ac:	f1 2c       	mov	r15, r1
    34ae:	88 e0       	ldi	r24, 0x08	; 8
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	84 1b       	sub	r24, r20
    34b4:	91 09       	sbc	r25, r1
    34b6:	e8 16       	cp	r14, r24
    34b8:	f9 06       	cpc	r15, r25
    34ba:	7c f4       	brge	.+30     	; 0x34da <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    34bc:	88 e0       	ldi	r24, 0x08	; 8
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	8e 19       	sub	r24, r14
    34c2:	9f 09       	sbc	r25, r15
    34c4:	2f ef       	ldi	r18, 0xFF	; 255
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	59 01       	movw	r10, r18
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <GLCD_SetPixels+0x76>
    34cc:	b5 94       	asr	r11
    34ce:	a7 94       	ror	r10
    34d0:	8a 95       	dec	r24
    34d2:	e2 f7       	brpl	.-8      	; 0x34cc <GLCD_SetPixels+0x72>
    34d4:	8a 2d       	mov	r24, r10
			h = height;
    34d6:	68 2c       	mov	r6, r8
    34d8:	04 c0       	rjmp	.+8      	; 0x34e2 <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    34da:	88 e0       	ldi	r24, 0x08	; 8
    34dc:	68 2e       	mov	r6, r24
    34de:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    34e0:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    34e2:	a8 2e       	mov	r10, r24
    34e4:	b1 2c       	mov	r11, r1
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <GLCD_SetPixels+0x92>
    34e8:	aa 0c       	add	r10, r10
    34ea:	bb 1c       	adc	r11, r11
    34ec:	4a 95       	dec	r20
    34ee:	e2 f7       	brpl	.-8      	; 0x34e8 <GLCD_SetPixels+0x8e>
    34f0:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    34f2:	67 2d       	mov	r22, r7
    34f4:	89 2d       	mov	r24, r9
    34f6:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    34fa:	11 23       	and	r17, r17
    34fc:	c9 f1       	breq	.+114    	; 0x3570 <GLCD_SetPixels+0x116>
    34fe:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3500:	0f 2e       	mov	r0, r31
    3502:	fb e2       	ldi	r31, 0x2B	; 43
    3504:	cf 2e       	mov	r12, r31
    3506:	f2 e0       	ldi	r31, 0x02	; 2
    3508:	df 2e       	mov	r13, r31
    350a:	f0 2d       	mov	r31, r0
    350c:	ca e2       	ldi	r28, 0x2A	; 42
    350e:	d2 e0       	ldi	r29, 0x02	; 2
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3510:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3512:	f6 01       	movw	r30, r12
    3514:	40 80       	ld	r4, Z
    3516:	b8 80       	ld	r11, Y
    3518:	64 2d       	mov	r22, r4
    351a:	8b 2d       	mov	r24, r11
    351c:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    3520:	0f 3f       	cpi	r16, 0xFF	; 255
    3522:	19 f4       	brne	.+6      	; 0x352a <GLCD_SetPixels+0xd0>
    3524:	48 2f       	mov	r20, r24
    3526:	43 29       	or	r20, r3
    3528:	02 c0       	rjmp	.+4      	; 0x352e <GLCD_SetPixels+0xd4>
    352a:	48 2f       	mov	r20, r24
    352c:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    352e:	9b 2d       	mov	r25, r11
    3530:	9f 5f       	subi	r25, 0xFF	; 255
    3532:	98 83       	st	Y, r25
    3534:	64 2d       	mov	r22, r4
    3536:	8b 2d       	mov	r24, r11
    3538:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    353c:	53 94       	inc	r5
    353e:	51 12       	cpse	r5, r17
    3540:	e8 cf       	rjmp	.-48     	; 0x3512 <GLCD_SetPixels+0xb8>
    3542:	16 c0       	rjmp	.+44     	; 0x3570 <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    3544:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    3546:	6c 2f       	mov	r22, r28
    3548:	89 2d       	mov	r24, r9
    354a:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    354e:	11 23       	and	r17, r17
    3550:	f1 f0       	breq	.+60     	; 0x358e <GLCD_SetPixels+0x134>
    3552:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3554:	f6 01       	movw	r30, r12
    3556:	60 81       	ld	r22, Z
    3558:	f2 01       	movw	r30, r4
    355a:	80 81       	ld	r24, Z
    355c:	98 2f       	mov	r25, r24
    355e:	9f 5f       	subi	r25, 0xFF	; 255
    3560:	90 83       	st	Z, r25
    3562:	40 2f       	mov	r20, r16
    3564:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3568:	73 94       	inc	r7
    356a:	71 16       	cp	r7, r17
    356c:	81 f0       	breq	.+32     	; 0x358e <GLCD_SetPixels+0x134>
    356e:	f2 cf       	rjmp	.-28     	; 0x3554 <GLCD_SetPixels+0xfa>
    3570:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    3572:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    3574:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    3576:	0f 2e       	mov	r0, r31
    3578:	fb e2       	ldi	r31, 0x2B	; 43
    357a:	cf 2e       	mov	r12, r31
    357c:	f2 e0       	ldi	r31, 0x02	; 2
    357e:	df 2e       	mov	r13, r31
    3580:	f0 2d       	mov	r31, r0
    3582:	0f 2e       	mov	r0, r31
    3584:	fa e2       	ldi	r31, 0x2A	; 42
    3586:	4f 2e       	mov	r4, r31
    3588:	f2 e0       	ldi	r31, 0x02	; 2
    358a:	5f 2e       	mov	r5, r31
    358c:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    358e:	26 2d       	mov	r18, r6
    3590:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    3592:	e2 2f       	mov	r30, r18
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	cf 01       	movw	r24, r30
    3598:	08 96       	adiw	r24, 0x08	; 8
    359a:	e8 16       	cp	r14, r24
    359c:	f9 06       	cpc	r15, r25
    359e:	94 f6       	brge	.-92     	; 0x3544 <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    35a0:	28 15       	cp	r18, r8
    35a2:	b0 f5       	brcc	.+108    	; 0x3610 <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    35a4:	ee 1a       	sub	r14, r30
    35a6:	ff 0a       	sbc	r15, r31
    35a8:	8f ef       	ldi	r24, 0xFF	; 255
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	9c 01       	movw	r18, r24
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <GLCD_SetPixels+0x15a>
    35b0:	22 0f       	add	r18, r18
    35b2:	33 1f       	adc	r19, r19
    35b4:	ea 94       	dec	r14
    35b6:	e2 f7       	brpl	.-8      	; 0x35b0 <GLCD_SetPixels+0x156>
    35b8:	79 01       	movw	r14, r18
    35ba:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    35bc:	6c 2f       	mov	r22, r28
    35be:	68 5f       	subi	r22, 0xF8	; 248
    35c0:	89 2d       	mov	r24, r9
    35c2:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    35c6:	11 23       	and	r17, r17
    35c8:	19 f1       	breq	.+70     	; 0x3610 <GLCD_SetPixels+0x1b6>
    35ca:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    35cc:	0f 2e       	mov	r0, r31
    35ce:	fb e2       	ldi	r31, 0x2B	; 43
    35d0:	cf 2e       	mov	r12, r31
    35d2:	f2 e0       	ldi	r31, 0x02	; 2
    35d4:	df 2e       	mov	r13, r31
    35d6:	f0 2d       	mov	r31, r0
    35d8:	ca e2       	ldi	r28, 0x2A	; 42
    35da:	d2 e0       	ldi	r29, 0x02	; 2
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    35dc:	9e 2c       	mov	r9, r14
    35de:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    35e0:	f6 01       	movw	r30, r12
    35e2:	a0 80       	ld	r10, Z
    35e4:	f8 80       	ld	r15, Y
    35e6:	6a 2d       	mov	r22, r10
    35e8:	8f 2d       	mov	r24, r15
    35ea:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    35ee:	0f 3f       	cpi	r16, 0xFF	; 255
    35f0:	19 f4       	brne	.+6      	; 0x35f8 <GLCD_SetPixels+0x19e>
    35f2:	48 2f       	mov	r20, r24
    35f4:	4e 29       	or	r20, r14
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <GLCD_SetPixels+0x1a2>
    35f8:	48 2f       	mov	r20, r24
    35fa:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    35fc:	9f 2d       	mov	r25, r15
    35fe:	9f 5f       	subi	r25, 0xFF	; 255
    3600:	98 83       	st	Y, r25
    3602:	6a 2d       	mov	r22, r10
    3604:	8f 2d       	mov	r24, r15
    3606:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    360a:	b3 94       	inc	r11
    360c:	b1 12       	cpse	r11, r17
    360e:	e8 cf       	rjmp	.-48     	; 0x35e0 <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	bf 90       	pop	r11
    3622:	af 90       	pop	r10
    3624:	9f 90       	pop	r9
    3626:	8f 90       	pop	r8
    3628:	7f 90       	pop	r7
    362a:	6f 90       	pop	r6
    362c:	5f 90       	pop	r5
    362e:	4f 90       	pop	r4
    3630:	3f 90       	pop	r3
    3632:	08 95       	ret

00003634 <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    3634:	2f 92       	push	r2
    3636:	3f 92       	push	r3
    3638:	4f 92       	push	r4
    363a:	5f 92       	push	r5
    363c:	6f 92       	push	r6
    363e:	7f 92       	push	r7
    3640:	8f 92       	push	r8
    3642:	9f 92       	push	r9
    3644:	af 92       	push	r10
    3646:	bf 92       	push	r11
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	2c 97       	sbiw	r28, 0x0c	; 12
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	5c 01       	movw	r10, r24
    366a:	66 2e       	mov	r6, r22
    366c:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    366e:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <__GLCD+0x1>
    3672:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    3674:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <__GLCD+0x2>
    3678:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    367a:	82 2f       	mov	r24, r18
    367c:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    367e:	1a f4       	brpl	.+6      	; 0x3686 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    3680:	80 e8       	ldi	r24, 0x80	; 128
    3682:	68 2e       	mov	r6, r24
    3684:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    3686:	84 2f       	mov	r24, r20
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	07 96       	adiw	r24, 0x07	; 7
    368c:	95 95       	asr	r25
    368e:	87 95       	ror	r24
    3690:	95 95       	asr	r25
    3692:	87 95       	ror	r24
    3694:	95 95       	asr	r25
    3696:	87 95       	ror	r24
    3698:	8d 83       	std	Y+5, r24	; 0x05
    369a:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    369c:	9a 85       	ldd	r25, Y+10	; 0x0a
    369e:	96 95       	lsr	r25
    36a0:	96 95       	lsr	r25
    36a2:	96 95       	lsr	r25
    36a4:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    36a6:	89 30       	cpi	r24, 0x09	; 9
    36a8:	48 f0       	brcs	.+18     	; 0x36bc <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    36aa:	2d 81       	ldd	r18, Y+5	; 0x05
    36ac:	3e 81       	ldd	r19, Y+6	; 0x06
    36ae:	28 5f       	subi	r18, 0xF8	; 248
    36b0:	3f 4f       	sbci	r19, 0xFF	; 255
    36b2:	a9 01       	movw	r20, r18
    36b4:	48 1b       	sub	r20, r24
    36b6:	51 09       	sbc	r21, r1
    36b8:	5e 83       	std	Y+6, r21	; 0x06
    36ba:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    36bc:	4a 84       	ldd	r4, Y+10	; 0x0a
    36be:	57 e0       	ldi	r21, 0x07	; 7
    36c0:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	89 2b       	or	r24, r25
    36c8:	09 f4       	brne	.+2      	; 0x36cc <GLCD_DrawBitmap+0x98>
    36ca:	fa c0       	rjmp	.+500    	; 0x38c0 <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    36cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ce:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    36d0:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    36d2:	26 2c       	mov	r2, r6
    36d4:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    36d6:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    36d8:	88 e0       	ldi	r24, 0x08	; 8
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	e4 19       	sub	r30, r4
    36e0:	f1 09       	sbc	r31, r1
    36e2:	fb 83       	std	Y+3, r31	; 0x03
    36e4:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    36e6:	0f 2e       	mov	r0, r31
    36e8:	fb e2       	ldi	r31, 0x2B	; 43
    36ea:	cf 2e       	mov	r12, r31
    36ec:	f2 e0       	ldi	r31, 0x02	; 2
    36ee:	df 2e       	mov	r13, r31
    36f0:	f0 2d       	mov	r31, r0
    36f2:	0a e2       	ldi	r16, 0x2A	; 42
    36f4:	12 e0       	ldi	r17, 0x02	; 2
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    36f6:	6c 81       	ldd	r22, Y+4	; 0x04
    36f8:	8f 81       	ldd	r24, Y+7	; 0x07
    36fa:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    36fe:	39 86       	std	Y+9, r3	; 0x09
    3700:	28 86       	std	Y+8, r2	; 0x08
    3702:	72 9c       	mul	r7, r2
    3704:	c0 01       	movw	r24, r0
    3706:	73 9c       	mul	r7, r3
    3708:	90 0d       	add	r25, r0
    370a:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    370c:	7c 01       	movw	r14, r24
    370e:	e2 18       	sub	r14, r2
    3710:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3712:	66 20       	and	r6, r6
    3714:	09 f4       	brne	.+2      	; 0x3718 <GLCD_DrawBitmap+0xe4>
    3716:	3c c0       	rjmp	.+120    	; 0x3790 <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3718:	9c 01       	movw	r18, r24
    371a:	2a 0d       	add	r18, r10
    371c:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    371e:	85 2c       	mov	r8, r5
    3720:	3c 87       	std	Y+12, r19	; 0x0c
    3722:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    3724:	eb 85       	ldd	r30, Y+11	; 0x0b
    3726:	fc 85       	ldd	r31, Y+12	; 0x0c
    3728:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    372a:	04 2c       	mov	r0, r4
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <GLCD_DrawBitmap+0xfc>
    372e:	99 0c       	add	r9, r9
    3730:	0a 94       	dec	r0
    3732:	ea f7       	brpl	.-6      	; 0x372e <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    3734:	77 20       	and	r7, r7
    3736:	79 f0       	breq	.+30     	; 0x3756 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3738:	f5 01       	movw	r30, r10
    373a:	ee 0d       	add	r30, r14
    373c:	ff 1d       	adc	r31, r15
    373e:	2f ef       	ldi	r18, 0xFF	; 255
    3740:	e2 1a       	sub	r14, r18
    3742:	f2 0a       	sbc	r15, r18
    3744:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0a 80       	ldd	r0, Y+2	; 0x02
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <GLCD_DrawBitmap+0x11c>
    374c:	95 95       	asr	r25
    374e:	87 95       	ror	r24
    3750:	0a 94       	dec	r0
    3752:	e2 f7       	brpl	.-8      	; 0x374c <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    3754:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3756:	39 81       	ldd	r19, Y+1	; 0x01
    3758:	31 30       	cpi	r19, 0x01	; 1
    375a:	39 f4       	brne	.+14     	; 0x376a <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    375c:	f6 01       	movw	r30, r12
    375e:	60 81       	ld	r22, Z
    3760:	f8 01       	movw	r30, r16
    3762:	80 81       	ld	r24, Z
    3764:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
    3768:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    376a:	f6 01       	movw	r30, r12
    376c:	60 81       	ld	r22, Z
    376e:	f8 01       	movw	r30, r16
    3770:	80 81       	ld	r24, Z
    3772:	98 2f       	mov	r25, r24
    3774:	9f 5f       	subi	r25, 0xFF	; 255
    3776:	90 83       	st	Z, r25
    3778:	49 2d       	mov	r20, r9
    377a:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    377e:	83 94       	inc	r8
    3780:	2b 85       	ldd	r18, Y+11	; 0x0b
    3782:	3c 85       	ldd	r19, Y+12	; 0x0c
    3784:	2f 5f       	subi	r18, 0xFF	; 255
    3786:	3f 4f       	sbci	r19, 0xFF	; 255
    3788:	3c 87       	std	Y+12, r19	; 0x0c
    378a:	2b 87       	std	Y+11, r18	; 0x0b
    378c:	86 10       	cpse	r8, r6
    378e:	ca cf       	rjmp	.-108    	; 0x3724 <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3790:	e2 e3       	ldi	r30, 0x32	; 50
    3792:	f2 e0       	ldi	r31, 0x02	; 2
    3794:	80 81       	ld	r24, Z
    3796:	88 23       	and	r24, r24
    3798:	41 f0       	breq	.+16     	; 0x37aa <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    379a:	f6 01       	movw	r30, r12
    379c:	60 81       	ld	r22, Z
    379e:	f8 01       	movw	r30, r16
    37a0:	80 81       	ld	r24, Z
    37a2:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
    37a6:	48 2f       	mov	r20, r24
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    37aa:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    37ac:	f6 01       	movw	r30, r12
    37ae:	60 81       	ld	r22, Z
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 81       	ld	r24, Z
    37b4:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    37b8:	fc 81       	ldd	r31, Y+4	; 0x04
    37ba:	f8 5f       	subi	r31, 0xF8	; 248
    37bc:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    37be:	73 94       	inc	r7
    37c0:	87 2d       	mov	r24, r7
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	2d 81       	ldd	r18, Y+5	; 0x05
    37c6:	3e 81       	ldd	r19, Y+6	; 0x06
    37c8:	82 17       	cp	r24, r18
    37ca:	93 07       	cpc	r25, r19
    37cc:	08 f4       	brcc	.+2      	; 0x37d0 <GLCD_DrawBitmap+0x19c>
    37ce:	93 cf       	rjmp	.-218    	; 0x36f6 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    37d0:	22 30       	cpi	r18, 0x02	; 2
    37d2:	31 05       	cpc	r19, r1
    37d4:	08 f4       	brcc	.+2      	; 0x37d8 <GLCD_DrawBitmap+0x1a4>
    37d6:	74 c0       	rjmp	.+232    	; 0x38c0 <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    37d8:	6f 2f       	mov	r22, r31
    37da:	8f 81       	ldd	r24, Y+7	; 0x07
    37dc:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    37e0:	27 2d       	mov	r18, r7
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	21 50       	subi	r18, 0x01	; 1
    37e6:	31 09       	sbc	r19, r1
    37e8:	48 85       	ldd	r20, Y+8	; 0x08
    37ea:	59 85       	ldd	r21, Y+9	; 0x09
    37ec:	24 9f       	mul	r18, r20
    37ee:	c0 01       	movw	r24, r0
    37f0:	25 9f       	mul	r18, r21
    37f2:	90 0d       	add	r25, r0
    37f4:	34 9f       	mul	r19, r20
    37f6:	90 0d       	add	r25, r0
    37f8:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    37fa:	66 20       	and	r6, r6
    37fc:	09 f4       	brne	.+2      	; 0x3800 <GLCD_DrawBitmap+0x1cc>
    37fe:	3e c0       	rjmp	.+124    	; 0x387c <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    3800:	45 01       	movw	r8, r10
    3802:	88 0e       	add	r8, r24
    3804:	99 1e       	adc	r9, r25
    3806:	65 01       	movw	r12, r10
    3808:	5f ef       	ldi	r21, 0xFF	; 255
    380a:	c5 1a       	sub	r12, r21
    380c:	d5 0a       	sbc	r13, r21
    380e:	6a 94       	dec	r6
    3810:	c6 0c       	add	r12, r6
    3812:	d1 1c       	adc	r13, r1
    3814:	c8 0e       	add	r12, r24
    3816:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3818:	0f 2e       	mov	r0, r31
    381a:	fb e2       	ldi	r31, 0x2B	; 43
    381c:	ef 2e       	mov	r14, r31
    381e:	f2 e0       	ldi	r31, 0x02	; 2
    3820:	ff 2e       	mov	r15, r31
    3822:	f0 2d       	mov	r31, r0
    3824:	0a e2       	ldi	r16, 0x2A	; 42
    3826:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3828:	88 e0       	ldi	r24, 0x08	; 8
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	5c 01       	movw	r10, r24
    382e:	a4 18       	sub	r10, r4
    3830:	b1 08       	sbc	r11, r1
    3832:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3834:	f7 01       	movw	r30, r14
    3836:	80 80       	ld	r8, Z
    3838:	f8 01       	movw	r30, r16
    383a:	90 80       	ld	r9, Z
    383c:	68 2d       	mov	r22, r8
    383e:	89 2d       	mov	r24, r9
    3840:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    3844:	f3 01       	movw	r30, r6
    3846:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	0a 2c       	mov	r0, r10
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <GLCD_DrawBitmap+0x21e>
    384e:	55 95       	asr	r21
    3850:	47 95       	ror	r20
    3852:	0a 94       	dec	r0
    3854:	e2 f7       	brpl	.-8      	; 0x384e <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    3856:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    3858:	f9 81       	ldd	r31, Y+1	; 0x01
    385a:	f1 30       	cpi	r31, 0x01	; 1
    385c:	09 f4       	brne	.+2      	; 0x3860 <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    385e:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3860:	89 2d       	mov	r24, r9
    3862:	8f 5f       	subi	r24, 0xFF	; 255
    3864:	f8 01       	movw	r30, r16
    3866:	80 83       	st	Z, r24
    3868:	68 2d       	mov	r22, r8
    386a:	89 2d       	mov	r24, r9
    386c:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
    3870:	ff ef       	ldi	r31, 0xFF	; 255
    3872:	6f 1a       	sub	r6, r31
    3874:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    3876:	6c 14       	cp	r6, r12
    3878:	7d 04       	cpc	r7, r13
    387a:	e1 f6       	brne	.-72     	; 0x3834 <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    387c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__GLCD+0x9>
    3880:	88 23       	and	r24, r24
    3882:	99 f0       	breq	.+38     	; 0x38aa <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    3884:	81 30       	cpi	r24, 0x01	; 1
    3886:	41 f4       	brne	.+16     	; 0x3898 <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3888:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <__GLCD+0x2>
    388c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__GLCD+0x1>
    3890:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
    3894:	48 2f       	mov	r20, r24
    3896:	0a c0       	rjmp	.+20     	; 0x38ac <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3898:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <__GLCD+0x2>
    389c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__GLCD+0x1>
    38a0:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
    38a4:	48 2f       	mov	r20, r24
    38a6:	40 95       	com	r20
    38a8:	01 c0       	rjmp	.+2      	; 0x38ac <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    38aa:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    38ac:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <__GLCD+0x2>
    38b0:	ea e2       	ldi	r30, 0x2A	; 42
    38b2:	f2 e0       	ldi	r31, 0x02	; 2
    38b4:	80 81       	ld	r24, Z
    38b6:	98 2f       	mov	r25, r24
    38b8:	9f 5f       	subi	r25, 0xFF	; 255
    38ba:	90 83       	st	Z, r25
    38bc:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    38c0:	0e 94 da 19 	call	0x33b4	; 0x33b4 <GLCD_GetX>
    38c4:	6a 85       	ldd	r22, Y+10	; 0x0a
    38c6:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
}
    38ca:	2c 96       	adiw	r28, 0x0c	; 12
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	1f 91       	pop	r17
    38dc:	0f 91       	pop	r16
    38de:	ff 90       	pop	r15
    38e0:	ef 90       	pop	r14
    38e2:	df 90       	pop	r13
    38e4:	cf 90       	pop	r12
    38e6:	bf 90       	pop	r11
    38e8:	af 90       	pop	r10
    38ea:	9f 90       	pop	r9
    38ec:	8f 90       	pop	r8
    38ee:	7f 90       	pop	r7
    38f0:	6f 90       	pop	r6
    38f2:	5f 90       	pop	r5
    38f4:	4f 90       	pop	r4
    38f6:	3f 90       	pop	r3
    38f8:	2f 90       	pop	r2
    38fa:	08 95       	ret

000038fc <GLCD_DrawRectangle>:
		}
	}
}

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	e8 2e       	mov	r14, r24
    390c:	16 2f       	mov	r17, r22
    390e:	d4 2e       	mov	r13, r20
    3910:	f2 2e       	mov	r15, r18
    3912:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    3914:	88 23       	and	r24, r24
    3916:	0c f4       	brge	.+2      	; 0x391a <GLCD_DrawRectangle+0x1e>
    3918:	49 c0       	rjmp	.+146    	; 0x39ac <GLCD_DrawRectangle+0xb0>
    391a:	44 23       	and	r20, r20
    391c:	0c f4       	brge	.+2      	; 0x3920 <GLCD_DrawRectangle+0x24>
    391e:	46 c0       	rjmp	.+140    	; 0x39ac <GLCD_DrawRectangle+0xb0>
    3920:	60 34       	cpi	r22, 0x40	; 64
    3922:	08 f0       	brcs	.+2      	; 0x3926 <GLCD_DrawRectangle+0x2a>
    3924:	43 c0       	rjmp	.+134    	; 0x39ac <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    3926:	8f e3       	ldi	r24, 0x3F	; 63
    3928:	82 17       	cp	r24, r18
    392a:	08 f4       	brcc	.+2      	; 0x392e <GLCD_DrawRectangle+0x32>
    392c:	3f c0       	rjmp	.+126    	; 0x39ac <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    392e:	4e 15       	cp	r20, r14
    3930:	00 f1       	brcs	.+64     	; 0x3972 <GLCD_DrawRectangle+0x76>
    3932:	1c c0       	rjmp	.+56     	; 0x396c <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    3934:	4d 2f       	mov	r20, r29
    3936:	61 2f       	mov	r22, r17
    3938:	8c 2f       	mov	r24, r28
    393a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <GLCD_SetPixel>
		X1++;
    393e:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3940:	0c 17       	cp	r16, r28
    3942:	c0 f7       	brcc	.-16     	; 0x3934 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3944:	de 14       	cp	r13, r14
    3946:	d8 f0       	brcs	.+54     	; 0x397e <GLCD_DrawRectangle+0x82>
    3948:	17 c0       	rjmp	.+46     	; 0x3978 <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    394a:	4d 2f       	mov	r20, r29
    394c:	6f 2d       	mov	r22, r15
    394e:	8c 2f       	mov	r24, r28
    3950:	0e 94 dd 19 	call	0x33ba	; 0x33ba <GLCD_SetPixel>
		X1++;
    3954:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    3956:	0c 17       	cp	r16, r28
    3958:	c0 f7       	brcc	.-16     	; 0x394a <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    395a:	f1 16       	cp	r15, r17
    395c:	98 f0       	brcs	.+38     	; 0x3984 <GLCD_DrawRectangle+0x88>
    395e:	1c c0       	rjmp	.+56     	; 0x3998 <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3960:	0d 2f       	mov	r16, r29
    3962:	4d 2d       	mov	r20, r13
    3964:	8d 2d       	mov	r24, r13
    3966:	0e 94 2d 1a 	call	0x345a	; 0x345a <GLCD_SetPixels>
    396a:	20 c0       	rjmp	.+64     	; 0x39ac <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    396c:	04 2f       	mov	r16, r20
    396e:	ce 2d       	mov	r28, r14
    3970:	e1 cf       	rjmp	.-62     	; 0x3934 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    3972:	0e 2d       	mov	r16, r14
    3974:	c4 2f       	mov	r28, r20
    3976:	de cf       	rjmp	.-68     	; 0x3934 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    3978:	0d 2d       	mov	r16, r13
    397a:	ce 2d       	mov	r28, r14
    397c:	e6 cf       	rjmp	.-52     	; 0x394a <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    397e:	0e 2d       	mov	r16, r14
    3980:	cd 2d       	mov	r28, r13
    3982:	e3 cf       	rjmp	.-58     	; 0x394a <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3984:	0d 2f       	mov	r16, r29
    3986:	21 2f       	mov	r18, r17
    3988:	4e 2d       	mov	r20, r14
    398a:	6f 2d       	mov	r22, r15
    398c:	8e 2d       	mov	r24, r14
    398e:	0e 94 2d 1a 	call	0x345a	; 0x345a <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    3992:	21 2f       	mov	r18, r17
    3994:	6f 2d       	mov	r22, r15
    3996:	e4 cf       	rjmp	.-56     	; 0x3960 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    3998:	0d 2f       	mov	r16, r29
    399a:	2f 2d       	mov	r18, r15
    399c:	4e 2d       	mov	r20, r14
    399e:	61 2f       	mov	r22, r17
    39a0:	8e 2d       	mov	r24, r14
    39a2:	0e 94 2d 1a 	call	0x345a	; 0x345a <GLCD_SetPixels>
    39a6:	2f 2d       	mov	r18, r15
    39a8:	61 2f       	mov	r22, r17
    39aa:	da cf       	rjmp	.-76     	; 0x3960 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	08 95       	ret

000039bc <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	cf 93       	push	r28
    39c2:	df 93       	push	r29
    39c4:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    39c6:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    39c8:	00 e0       	ldi	r16, 0x00	; 0
    39ca:	0b c0       	rjmp	.+22     	; 0x39e2 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    39cc:	41 2f       	mov	r20, r17
    39ce:	6d 2f       	mov	r22, r29
    39d0:	8c 2f       	mov	r24, r28
    39d2:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    39d6:	cf 5f       	subi	r28, 0xFF	; 255
    39d8:	c0 38       	cpi	r28, 0x80	; 128
    39da:	c1 f7       	brne	.-16     	; 0x39cc <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    39dc:	d8 5f       	subi	r29, 0xF8	; 248
    39de:	d0 34       	cpi	r29, 0x40	; 64
    39e0:	11 f0       	breq	.+4      	; 0x39e6 <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    39e2:	c0 2f       	mov	r28, r16
    39e4:	f3 cf       	rjmp	.-26     	; 0x39cc <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	0f 91       	pop	r16
    39ee:	08 95       	ret

000039f0 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <GLCD_FillScreen>
    39f6:	08 95       	ret

000039f8 <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    39f8:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    39fa:	0e 94 2d 1a 	call	0x345a	; 0x345a <GLCD_SetPixels>
}
    39fe:	0f 91       	pop	r16
    3a00:	08 95       	ret

00003a02 <GLCD_InvertRect>:

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
{
    3a02:	2f 92       	push	r2
    3a04:	3f 92       	push	r3
    3a06:	5f 92       	push	r5
    3a08:	6f 92       	push	r6
    3a0a:	7f 92       	push	r7
    3a0c:	8f 92       	push	r8
    3a0e:	9f 92       	push	r9
    3a10:	af 92       	push	r10
    3a12:	bf 92       	push	r11
    3a14:	cf 92       	push	r12
    3a16:	df 92       	push	r13
    3a18:	ef 92       	push	r14
    3a1a:	ff 92       	push	r15
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	c8 2e       	mov	r12, r24
	uint8_t width, height, offset, mask, h, i, data;

	width = X2 - X1 + 1;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	d8 2e       	mov	r13, r24
    3a2a:	dc 18       	sub	r13, r12
    3a2c:	d4 0e       	add	r13, r20
	height = Y2 - Y1 + 1;
    3a2e:	b8 2e       	mov	r11, r24
    3a30:	b6 1a       	sub	r11, r22
    3a32:	b2 0e       	add	r11, r18
	offset = Y1 % __GLCD_Screen_Line_Height;
    3a34:	46 2f       	mov	r20, r22
    3a36:	47 70       	andi	r20, 0x07	; 7
	Y1 -= offset;
    3a38:	a6 2e       	mov	r10, r22
    3a3a:	a4 1a       	sub	r10, r20
	mask = 0xFF;
	data = 0;

	//Calculate mask for top fractioned region
	if (height < (__GLCD_Screen_Line_Height - offset))
    3a3c:	0b 2d       	mov	r16, r11
    3a3e:	10 e0       	ldi	r17, 0x00	; 0
    3a40:	88 e0       	ldi	r24, 0x08	; 8
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	84 1b       	sub	r24, r20
    3a46:	91 09       	sbc	r25, r1
    3a48:	08 17       	cp	r16, r24
    3a4a:	19 07       	cpc	r17, r25
    3a4c:	7c f4       	brge	.+30     	; 0x3a6c <GLCD_InvertRect+0x6a>
	{
		mask >>= (__GLCD_Screen_Line_Height - height);
    3a4e:	88 e0       	ldi	r24, 0x08	; 8
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	80 1b       	sub	r24, r16
    3a54:	91 0b       	sbc	r25, r17
    3a56:	2f ef       	ldi	r18, 0xFF	; 255
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	b9 01       	movw	r22, r18
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <GLCD_InvertRect+0x60>
    3a5e:	75 95       	asr	r23
    3a60:	67 95       	ror	r22
    3a62:	8a 95       	dec	r24
    3a64:	e2 f7       	brpl	.-8      	; 0x3a5e <GLCD_InvertRect+0x5c>
    3a66:	cb 01       	movw	r24, r22
		h = height;
    3a68:	5b 2c       	mov	r5, r11
    3a6a:	04 c0       	rjmp	.+8      	; 0x3a74 <GLCD_InvertRect+0x72>
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
    3a6c:	88 e0       	ldi	r24, 0x08	; 8
    3a6e:	58 2e       	mov	r5, r24
    3a70:	54 1a       	sub	r5, r20

	width = X2 - X1 + 1;
	height = Y2 - Y1 + 1;
	offset = Y1 % __GLCD_Screen_Line_Height;
	Y1 -= offset;
	mask = 0xFF;
    3a72:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		h = __GLCD_Screen_Line_Height - offset;
	}
	mask <<= offset;
    3a74:	68 2e       	mov	r6, r24
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <GLCD_InvertRect+0x78>
    3a78:	66 0c       	add	r6, r6
    3a7a:	4a 95       	dec	r20
    3a7c:	ea f7       	brpl	.-6      	; 0x3a78 <GLCD_InvertRect+0x76>
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
    3a7e:	6a 2d       	mov	r22, r10
    3a80:	8c 2d       	mov	r24, r12
    3a82:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
	for (i = 0 ; i < width ; i++)
    3a86:	dd 20       	and	r13, r13
    3a88:	d9 f1       	breq	.+118    	; 0x3b00 <GLCD_InvertRect+0xfe>
    3a8a:	81 2c       	mov	r8, r1
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3a8c:	0f 2e       	mov	r0, r31
    3a8e:	fb e2       	ldi	r31, 0x2B	; 43
    3a90:	ef 2e       	mov	r14, r31
    3a92:	f2 e0       	ldi	r31, 0x02	; 2
    3a94:	ff 2e       	mov	r15, r31
    3a96:	f0 2d       	mov	r31, r0
    3a98:	ca e2       	ldi	r28, 0x2A	; 42
    3a9a:	d2 e0       	ldi	r29, 0x02	; 2
    3a9c:	f7 01       	movw	r30, r14
    3a9e:	70 80       	ld	r7, Z
    3aa0:	98 80       	ld	r9, Y
    3aa2:	67 2d       	mov	r22, r7
    3aa4:	89 2d       	mov	r24, r9
    3aa6:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3aaa:	99 2d       	mov	r25, r9
    3aac:	9f 5f       	subi	r25, 0xFF	; 255
    3aae:	98 83       	st	Y, r25
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
	{
		data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		data = ((~data) & mask) | (data & (~mask));
    3ab0:	48 2f       	mov	r20, r24
    3ab2:	46 25       	eor	r20, r6
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3ab4:	67 2d       	mov	r22, r7
    3ab6:	89 2d       	mov	r24, r9
    3ab8:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
	}
	mask <<= offset;
	
	//Draw fractional rows at the top of the region
	GLCD_GotoXY(X1, Y1);
	for (i = 0 ; i < width ; i++)
    3abc:	83 94       	inc	r8
    3abe:	8d 10       	cpse	r8, r13
    3ac0:	ed cf       	rjmp	.-38     	; 0x3a9c <GLCD_InvertRect+0x9a>
    3ac2:	1e c0       	rjmp	.+60     	; 0x3b00 <GLCD_InvertRect+0xfe>

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
    3ac4:	c8 5f       	subi	r28, 0xF8	; 248
		GLCD_GotoXY(X1, Y1);
    3ac6:	6c 2f       	mov	r22, r28
    3ac8:	8c 2d       	mov	r24, r12
    3aca:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		
		for (i=0 ; i < width ; i++)
    3ace:	dd 20       	and	r13, r13
    3ad0:	39 f1       	breq	.+78     	; 0x3b20 <GLCD_InvertRect+0x11e>
    3ad2:	67 2c       	mov	r6, r7
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3ad4:	f7 01       	movw	r30, r14
    3ad6:	50 80       	ld	r5, Z
    3ad8:	f1 01       	movw	r30, r2
    3ada:	80 80       	ld	r8, Z
    3adc:	65 2d       	mov	r22, r5
    3ade:	88 2d       	mov	r24, r8
    3ae0:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3ae4:	98 2d       	mov	r25, r8
    3ae6:	9f 5f       	subi	r25, 0xFF	; 255
    3ae8:	f1 01       	movw	r30, r2
    3aea:	90 83       	st	Z, r25
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3aec:	48 2f       	mov	r20, r24
    3aee:	40 95       	com	r20
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3af0:	65 2d       	mov	r22, r5
    3af2:	88 2d       	mov	r24, r8
    3af4:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    3af8:	63 94       	inc	r6
    3afa:	6d 14       	cp	r6, r13
    3afc:	89 f0       	breq	.+34     	; 0x3b20 <GLCD_InvertRect+0x11e>
    3afe:	ea cf       	rjmp	.-44     	; 0x3ad4 <GLCD_InvertRect+0xd2>
    3b00:	ca 2d       	mov	r28, r10
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    3b02:	5a 18       	sub	r5, r10
    3b04:	a5 2c       	mov	r10, r5
	{
		h += __GLCD_Screen_Line_Height;
		Y1 += __GLCD_Screen_Line_Height;
		GLCD_GotoXY(X1, Y1);
		
		for (i=0 ; i < width ; i++)
    3b06:	71 2c       	mov	r7, r1
		{
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b08:	0f 2e       	mov	r0, r31
    3b0a:	fb e2       	ldi	r31, 0x2B	; 43
    3b0c:	ef 2e       	mov	r14, r31
    3b0e:	f2 e0       	ldi	r31, 0x02	; 2
    3b10:	ff 2e       	mov	r15, r31
    3b12:	f0 2d       	mov	r31, r0
    3b14:	0f 2e       	mov	r0, r31
    3b16:	fa e2       	ldi	r31, 0x2A	; 42
    3b18:	2f 2e       	mov	r2, r31
    3b1a:	f2 e0       	ldi	r31, 0x02	; 2
    3b1c:	3f 2e       	mov	r3, r31
    3b1e:	f0 2d       	mov	r31, r0
		__GLCD.Mode = GLCD_Inverted;

	GLCD_SendCommand(__GLCD.Mode);
}

void GLCD_InvertRect(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2)
    3b20:	8a 2d       	mov	r24, r10
    3b22:	8c 0f       	add	r24, r28
		data = ((~data) & mask) | (data & (~mask));
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
	}

	//Full rows
	while ((h + __GLCD_Screen_Line_Height) <= height)
    3b24:	e8 2f       	mov	r30, r24
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	df 01       	movw	r26, r30
    3b2a:	18 96       	adiw	r26, 0x08	; 8
    3b2c:	0a 17       	cp	r16, r26
    3b2e:	1b 07       	cpc	r17, r27
    3b30:	4c f6       	brge	.-110    	; 0x3ac4 <GLCD_InvertRect+0xc2>
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}

	//Fractional rows at the bottom of the region
	if (h < height)
    3b32:	8b 15       	cp	r24, r11
    3b34:	58 f5       	brcc	.+86     	; 0x3b8c <GLCD_InvertRect+0x18a>
	{
		mask = ~(0xFF<<(height - h));
    3b36:	0e 1b       	sub	r16, r30
    3b38:	1f 0b       	sbc	r17, r31
    3b3a:	8f ef       	ldi	r24, 0xFF	; 255
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	9c 01       	movw	r18, r24
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <GLCD_InvertRect+0x144>
    3b42:	22 0f       	add	r18, r18
    3b44:	33 1f       	adc	r19, r19
    3b46:	0a 95       	dec	r16
    3b48:	e2 f7       	brpl	.-8      	; 0x3b42 <GLCD_InvertRect+0x140>
    3b4a:	b2 2e       	mov	r11, r18
    3b4c:	b0 94       	com	r11
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));
    3b4e:	6c 2f       	mov	r22, r28
    3b50:	68 5f       	subi	r22, 0xF8	; 248
    3b52:	8c 2d       	mov	r24, r12
    3b54:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>

		for (i = 0 ; i < width ; i++)
    3b58:	dd 20       	and	r13, r13
    3b5a:	c1 f0       	breq	.+48     	; 0x3b8c <GLCD_InvertRect+0x18a>
    3b5c:	e1 2c       	mov	r14, r1
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3b5e:	0b e2       	ldi	r16, 0x2B	; 43
    3b60:	12 e0       	ldi	r17, 0x02	; 2
    3b62:	ca e2       	ldi	r28, 0x2A	; 42
    3b64:	d2 e0       	ldi	r29, 0x02	; 2
    3b66:	f8 01       	movw	r30, r16
    3b68:	c0 80       	ld	r12, Z
    3b6a:	f8 80       	ld	r15, Y
    3b6c:	6c 2d       	mov	r22, r12
    3b6e:	8f 2d       	mov	r24, r15
    3b70:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3b74:	9f 2d       	mov	r25, r15
    3b76:	9f 5f       	subi	r25, 0xFF	; 255
    3b78:	98 83       	st	Y, r25
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
		{
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
    3b7a:	48 2f       	mov	r20, r24
    3b7c:	4b 25       	eor	r20, r11
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3b7e:	6c 2d       	mov	r22, r12
    3b80:	8f 2d       	mov	r24, r15
    3b82:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
	if (h < height)
	{
		mask = ~(0xFF<<(height - h));
		GLCD_GotoXY(X1, (Y1 + __GLCD_Screen_Line_Height));

		for (i = 0 ; i < width ; i++)
    3b86:	e3 94       	inc	r14
    3b88:	ed 10       	cpse	r14, r13
    3b8a:	ed cf       	rjmp	.-38     	; 0x3b66 <GLCD_InvertRect+0x164>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
			data = ((~data) & mask) | (data & (~mask));
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
	}
}
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	1f 91       	pop	r17
    3b92:	0f 91       	pop	r16
    3b94:	ff 90       	pop	r15
    3b96:	ef 90       	pop	r14
    3b98:	df 90       	pop	r13
    3b9a:	cf 90       	pop	r12
    3b9c:	bf 90       	pop	r11
    3b9e:	af 90       	pop	r10
    3ba0:	9f 90       	pop	r9
    3ba2:	8f 90       	pop	r8
    3ba4:	7f 90       	pop	r7
    3ba6:	6f 90       	pop	r6
    3ba8:	5f 90       	pop	r5
    3baa:	3f 90       	pop	r3
    3bac:	2f 90       	pop	r2
    3bae:	08 95       	ret

00003bb0 <GLCD_SetFont>:

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    3bb0:	66 23       	and	r22, r22
    3bb2:	f4 f0       	brlt	.+60     	; 0x3bf0 <GLCD_SetFont+0x40>
    3bb4:	40 34       	cpi	r20, 0x40	; 64
    3bb6:	e0 f4       	brcc	.+56     	; 0x3bf0 <GLCD_SetFont+0x40>
    3bb8:	22 30       	cpi	r18, 0x02	; 2
    3bba:	d0 f4       	brcc	.+52     	; 0x3bf0 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    3bbc:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <__GLCD+0x5>
    3bc0:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    3bc4:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    3bc8:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    3bcc:	50 e0       	ldi	r21, 0x00	; 0
    3bce:	41 50       	subi	r20, 0x01	; 1
    3bd0:	51 09       	sbc	r21, r1
    3bd2:	ca 01       	movw	r24, r20
    3bd4:	99 23       	and	r25, r25
    3bd6:	0c f4       	brge	.+2      	; 0x3bda <GLCD_SetFont+0x2a>
    3bd8:	07 96       	adiw	r24, 0x07	; 7
    3bda:	95 95       	asr	r25
    3bdc:	87 95       	ror	r24
    3bde:	95 95       	asr	r25
    3be0:	87 95       	ror	r24
    3be2:	95 95       	asr	r25
    3be4:	87 95       	ror	r24
    3be6:	8f 5f       	subi	r24, 0xFF	; 255
    3be8:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    3bec:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <__GLCD+0x9>
    3bf0:	08 95       	ret

00003bf2 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    3bf2:	2f 92       	push	r2
    3bf4:	3f 92       	push	r3
    3bf6:	4f 92       	push	r4
    3bf8:	5f 92       	push	r5
    3bfa:	6f 92       	push	r6
    3bfc:	7f 92       	push	r7
    3bfe:	8f 92       	push	r8
    3c00:	9f 92       	push	r9
    3c02:	af 92       	push	r10
    3c04:	bf 92       	push	r11
    3c06:	cf 92       	push	r12
    3c08:	df 92       	push	r13
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	2b 97       	sbiw	r28, 0x0b	; 11
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    3c26:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <__GLCD+0x1>
    3c2a:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    3c2c:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <__GLCD+0x2>
    3c30:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    3c32:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    3c36:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    3c38:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__GLCD+0x6>
    3c3c:	29 9f       	mul	r18, r25
    3c3e:	90 01       	movw	r18, r0
    3c40:	11 24       	eor	r1, r1
    3c42:	2f 5f       	subi	r18, 0xFF	; 255
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	82 9f       	mul	r24, r18
    3c48:	a0 01       	movw	r20, r0
    3c4a:	83 9f       	mul	r24, r19
    3c4c:	50 0d       	add	r21, r0
    3c4e:	11 24       	eor	r1, r1
    3c50:	59 87       	std	Y+9, r21	; 0x09
    3c52:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    3c54:	4f 5f       	subi	r20, 0xFF	; 255
    3c56:	5f 4f       	sbci	r21, 0xFF	; 255
    3c58:	5e 83       	std	Y+6, r21	; 0x06
    3c5a:	4d 83       	std	Y+5, r20	; 0x05
    3c5c:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <__GLCD+0x4>
    3c60:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <__GLCD+0x5>
    3c64:	a8 85       	ldd	r26, Y+8	; 0x08
    3c66:	b9 85       	ldd	r27, Y+9	; 0x09
    3c68:	ea 0f       	add	r30, r26
    3c6a:	fb 1f       	adc	r31, r27
    3c6c:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    3c6e:	7f 80       	ldd	r7, Y+7	; 0x07
    3c70:	b7 e0       	ldi	r27, 0x07	; 7
    3c72:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3c74:	99 23       	and	r25, r25
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <GLCD_PrintChar+0x88>
    3c78:	92 c0       	rjmp	.+292    	; 0x3d9e <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3c7a:	ef 81       	ldd	r30, Y+7	; 0x07
    3c7c:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3c7e:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3c80:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3c82:	88 e0       	ldi	r24, 0x08	; 8
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	9c 01       	movw	r18, r24
    3c88:	27 19       	sub	r18, r7
    3c8a:	31 09       	sbc	r19, r1
    3c8c:	3a 83       	std	Y+2, r19	; 0x02
    3c8e:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3c90:	0f 2e       	mov	r0, r31
    3c92:	f2 e3       	ldi	r31, 0x32	; 50
    3c94:	8f 2e       	mov	r8, r31
    3c96:	f2 e0       	ldi	r31, 0x02	; 2
    3c98:	9f 2e       	mov	r9, r31
    3c9a:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3c9c:	0f 2e       	mov	r0, r31
    3c9e:	fb e2       	ldi	r31, 0x2B	; 43
    3ca0:	af 2e       	mov	r10, r31
    3ca2:	f2 e0       	ldi	r31, 0x02	; 2
    3ca4:	bf 2e       	mov	r11, r31
    3ca6:	f0 2d       	mov	r31, r0
    3ca8:	0a e2       	ldi	r16, 0x2A	; 42
    3caa:	12 e0       	ldi	r17, 0x02	; 2
    3cac:	67 2c       	mov	r6, r7
    3cae:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3cb0:	6b 81       	ldd	r22, Y+3	; 0x03
    3cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb4:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    3cb8:	4d 81       	ldd	r20, Y+5	; 0x05
    3cba:	5e 81       	ldd	r21, Y+6	; 0x06
    3cbc:	43 0d       	add	r20, r3
    3cbe:	51 1d       	adc	r21, r1
    3cc0:	5b 87       	std	Y+11, r21	; 0x0b
    3cc2:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    3cc4:	7a 01       	movw	r14, r20
    3cc6:	51 e0       	ldi	r21, 0x01	; 1
    3cc8:	e5 1a       	sub	r14, r21
    3cca:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3ccc:	77 20       	and	r7, r7
    3cce:	09 f4       	brne	.+2      	; 0x3cd2 <GLCD_PrintChar+0xe0>
    3cd0:	4f c0       	rjmp	.+158    	; 0x3d70 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    3cd2:	0f 2e       	mov	r0, r31
    3cd4:	f1 e3       	ldi	r31, 0x31	; 49
    3cd6:	cf 2e       	mov	r12, r31
    3cd8:	f2 e0       	ldi	r31, 0x02	; 2
    3cda:	df 2e       	mov	r13, r31
    3cdc:	f0 2d       	mov	r31, r0
    3cde:	83 2d       	mov	r24, r3
    3ce0:	36 2c       	mov	r3, r6
    3ce2:	67 2c       	mov	r6, r7
    3ce4:	72 2c       	mov	r7, r2
    3ce6:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    3ce8:	ad e2       	ldi	r26, 0x2D	; 45
    3cea:	b2 e0       	ldi	r27, 0x02	; 2
    3cec:	2d 91       	ld	r18, X+
    3cee:	3c 91       	ld	r19, X
    3cf0:	ea 85       	ldd	r30, Y+10	; 0x0a
    3cf2:	fb 85       	ldd	r31, Y+11	; 0x0b
    3cf4:	e2 0f       	add	r30, r18
    3cf6:	f3 1f       	adc	r31, r19
    3cf8:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    3cfa:	4e 2e       	mov	r4, r30
    3cfc:	03 2c       	mov	r0, r3
    3cfe:	01 c0       	rjmp	.+2      	; 0x3d02 <GLCD_PrintChar+0x110>
    3d00:	44 0c       	add	r4, r4
    3d02:	0a 94       	dec	r0
    3d04:	ea f7       	brpl	.-6      	; 0x3d00 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    3d06:	55 20       	and	r5, r5
    3d08:	81 f0       	breq	.+32     	; 0x3d2a <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3d0a:	f9 01       	movw	r30, r18
    3d0c:	ee 0d       	add	r30, r14
    3d0e:	ff 1d       	adc	r31, r15
    3d10:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	09 80       	ldd	r0, Y+1	; 0x01
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <GLCD_PrintChar+0x12a>
    3d18:	35 95       	asr	r19
    3d1a:	27 95       	ror	r18
    3d1c:	0a 94       	dec	r0
    3d1e:	e2 f7       	brpl	.-8      	; 0x3d18 <GLCD_PrintChar+0x126>
				data |= dataPrev;
    3d20:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    3d22:	f6 01       	movw	r30, r12
    3d24:	80 81       	ld	r24, Z
    3d26:	e8 0e       	add	r14, r24
    3d28:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3d2a:	d4 01       	movw	r26, r8
    3d2c:	8c 91       	ld	r24, X
    3d2e:	81 30       	cpi	r24, 0x01	; 1
    3d30:	39 f4       	brne	.+14     	; 0x3d40 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3d32:	f5 01       	movw	r30, r10
    3d34:	60 81       	ld	r22, Z
    3d36:	d8 01       	movw	r26, r16
    3d38:	8c 91       	ld	r24, X
    3d3a:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
    3d3e:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3d40:	f5 01       	movw	r30, r10
    3d42:	60 81       	ld	r22, Z
    3d44:	d8 01       	movw	r26, r16
    3d46:	8c 91       	ld	r24, X
    3d48:	98 2f       	mov	r25, r24
    3d4a:	9f 5f       	subi	r25, 0xFF	; 255
    3d4c:	9c 93       	st	X, r25
    3d4e:	44 2d       	mov	r20, r4
    3d50:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    3d54:	f6 01       	movw	r30, r12
    3d56:	80 81       	ld	r24, Z
    3d58:	2a 85       	ldd	r18, Y+10	; 0x0a
    3d5a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3d5c:	28 0f       	add	r18, r24
    3d5e:	31 1d       	adc	r19, r1
    3d60:	3b 87       	std	Y+11, r19	; 0x0b
    3d62:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3d64:	73 94       	inc	r7
    3d66:	76 10       	cpse	r7, r6
    3d68:	bf cf       	rjmp	.-130    	; 0x3ce8 <GLCD_PrintChar+0xf6>
    3d6a:	76 2c       	mov	r7, r6
    3d6c:	63 2c       	mov	r6, r3
    3d6e:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3d70:	d4 01       	movw	r26, r8
    3d72:	8c 91       	ld	r24, X
    3d74:	81 11       	cpse	r24, r1
    3d76:	07 c0       	rjmp	.+14     	; 0x3d86 <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    3d78:	42 2d       	mov	r20, r2
    3d7a:	f5 01       	movw	r30, r10
    3d7c:	60 81       	ld	r22, Z
    3d7e:	d8 01       	movw	r26, r16
    3d80:	8c 91       	ld	r24, X
    3d82:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    3d86:	bb 81       	ldd	r27, Y+3	; 0x03
    3d88:	b8 5f       	subi	r27, 0xF8	; 248
    3d8a:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3d8c:	33 94       	inc	r3
    3d8e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <__GLCD+0x8>
    3d92:	38 16       	cp	r3, r24
    3d94:	08 f4       	brcc	.+2      	; 0x3d98 <GLCD_PrintChar+0x1a6>
    3d96:	8c cf       	rjmp	.-232    	; 0x3cb0 <GLCD_PrintChar+0xbe>
    3d98:	57 2c       	mov	r5, r7
    3d9a:	76 2c       	mov	r7, r6
    3d9c:	03 c0       	rjmp	.+6      	; 0x3da4 <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    3d9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3da0:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    3da2:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    3da4:	2f 81       	ldd	r18, Y+7	; 0x07
    3da6:	22 95       	swap	r18
    3da8:	26 95       	lsr	r18
    3daa:	26 95       	lsr	r18
    3dac:	23 70       	andi	r18, 0x03	; 3
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__GLCD+0x7>
    3db4:	82 95       	swap	r24
    3db6:	86 95       	lsr	r24
    3db8:	86 95       	lsr	r24
    3dba:	83 70       	andi	r24, 0x03	; 3
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	ff 81       	ldd	r31, Y+7	; 0x07
    3dc0:	8f 0f       	add	r24, r31
    3dc2:	91 1d       	adc	r25, r1
    3dc4:	28 17       	cp	r18, r24
    3dc6:	39 07       	cpc	r19, r25
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <GLCD_PrintChar+0x1da>
    3dca:	69 c0       	rjmp	.+210    	; 0x3e9e <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    3dcc:	6b 81       	ldd	r22, Y+3	; 0x03
    3dce:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd0:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    3dd4:	28 85       	ldd	r18, Y+8	; 0x08
    3dd6:	39 85       	ldd	r19, Y+9	; 0x09
    3dd8:	23 0d       	add	r18, r3
    3dda:	31 1d       	adc	r19, r1
    3ddc:	3a 83       	std	Y+2, r19	; 0x02
    3dde:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3de0:	55 20       	and	r5, r5
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <GLCD_PrintChar+0x1f4>
    3de4:	51 c0       	rjmp	.+162    	; 0x3e88 <GLCD_PrintChar+0x296>
    3de6:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3de8:	0f 2e       	mov	r0, r31
    3dea:	fb e2       	ldi	r31, 0x2B	; 43
    3dec:	af 2e       	mov	r10, r31
    3dee:	f2 e0       	ldi	r31, 0x02	; 2
    3df0:	bf 2e       	mov	r11, r31
    3df2:	f0 2d       	mov	r31, r0
    3df4:	0a e2       	ldi	r16, 0x2A	; 42
    3df6:	12 e0       	ldi	r17, 0x02	; 2
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3df8:	0f 2e       	mov	r0, r31
    3dfa:	fd e2       	ldi	r31, 0x2D	; 45
    3dfc:	cf 2e       	mov	r12, r31
    3dfe:	f2 e0       	ldi	r31, 0x02	; 2
    3e00:	df 2e       	mov	r13, r31
    3e02:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e04:	88 e0       	ldi	r24, 0x08	; 8
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	ac 01       	movw	r20, r24
    3e0a:	47 19       	sub	r20, r7
    3e0c:	51 09       	sbc	r21, r1
    3e0e:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3e10:	0f 2e       	mov	r0, r31
    3e12:	f2 e3       	ldi	r31, 0x32	; 50
    3e14:	ef 2e       	mov	r14, r31
    3e16:	f2 e0       	ldi	r31, 0x02	; 2
    3e18:	ff 2e       	mov	r15, r31
    3e1a:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    3e1c:	0f 2e       	mov	r0, r31
    3e1e:	f1 e3       	ldi	r31, 0x31	; 49
    3e20:	8f 2e       	mov	r8, r31
    3e22:	f2 e0       	ldi	r31, 0x02	; 2
    3e24:	9f 2e       	mov	r9, r31
    3e26:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e28:	d5 01       	movw	r26, r10
    3e2a:	2c 90       	ld	r2, X
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	40 80       	ld	r4, Z
    3e30:	62 2d       	mov	r22, r2
    3e32:	84 2d       	mov	r24, r4
    3e34:	0e 94 b8 18 	call	0x3170	; 0x3170 <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    3e38:	d6 01       	movw	r26, r12
    3e3a:	ed 91       	ld	r30, X+
    3e3c:	fc 91       	ld	r31, X
    3e3e:	29 81       	ldd	r18, Y+1	; 0x01
    3e40:	3a 81       	ldd	r19, Y+2	; 0x02
    3e42:	e2 0f       	add	r30, r18
    3e44:	f3 1f       	adc	r31, r19
    3e46:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	06 2c       	mov	r0, r6
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <GLCD_PrintChar+0x260>
    3e4e:	55 95       	asr	r21
    3e50:	47 95       	ror	r20
    3e52:	0a 94       	dec	r0
    3e54:	e2 f7       	brpl	.-8      	; 0x3e4e <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    3e56:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    3e58:	d7 01       	movw	r26, r14
    3e5a:	9c 91       	ld	r25, X
    3e5c:	91 30       	cpi	r25, 0x01	; 1
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    3e60:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    3e62:	84 2d       	mov	r24, r4
    3e64:	8f 5f       	subi	r24, 0xFF	; 255
    3e66:	f8 01       	movw	r30, r16
    3e68:	80 83       	st	Z, r24
    3e6a:	62 2d       	mov	r22, r2
    3e6c:	84 2d       	mov	r24, r4
    3e6e:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    3e72:	d4 01       	movw	r26, r8
    3e74:	8c 91       	ld	r24, X
    3e76:	e9 81       	ldd	r30, Y+1	; 0x01
    3e78:	fa 81       	ldd	r31, Y+2	; 0x02
    3e7a:	e8 0f       	add	r30, r24
    3e7c:	f1 1d       	adc	r31, r1
    3e7e:	fa 83       	std	Y+2, r31	; 0x02
    3e80:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    3e82:	33 94       	inc	r3
    3e84:	35 10       	cpse	r3, r5
    3e86:	d0 cf       	rjmp	.-96     	; 0x3e28 <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    3e88:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__GLCD+0x9>
    3e8c:	81 11       	cpse	r24, r1
    3e8e:	07 c0       	rjmp	.+14     	; 0x3e9e <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    3e90:	40 e0       	ldi	r20, 0x00	; 0
    3e92:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <__GLCD+0x2>
    3e96:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__GLCD+0x1>
    3e9a:	0e 94 aa 18 	call	0x3154	; 0x3154 <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    3e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea0:	8f 5f       	subi	r24, 0xFF	; 255
    3ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea4:	85 0d       	add	r24, r5
    3ea6:	0e 94 67 19 	call	0x32ce	; 0x32ce <GLCD_GotoXY>
}
    3eaa:	2b 96       	adiw	r28, 0x0b	; 11
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	ff 90       	pop	r15
    3ec0:	ef 90       	pop	r14
    3ec2:	df 90       	pop	r13
    3ec4:	cf 90       	pop	r12
    3ec6:	bf 90       	pop	r11
    3ec8:	af 90       	pop	r10
    3eca:	9f 90       	pop	r9
    3ecc:	8f 90       	pop	r8
    3ece:	7f 90       	pop	r7
    3ed0:	6f 90       	pop	r6
    3ed2:	5f 90       	pop	r5
    3ed4:	4f 90       	pop	r4
    3ed6:	3f 90       	pop	r3
    3ed8:	2f 90       	pop	r2
    3eda:	08 95       	ret

00003edc <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	ec 01       	movw	r28, r24
	while(*Text)
    3eea:	88 81       	ld	r24, Y
    3eec:	88 23       	and	r24, r24
    3eee:	19 f1       	breq	.+70     	; 0x3f36 <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    3ef0:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <__GLCD+0x1>
    3ef4:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__GLCD+0x6>
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	29 0f       	add	r18, r25
    3efc:	31 1d       	adc	r19, r1
    3efe:	20 38       	cpi	r18, 0x80	; 128
    3f00:	31 05       	cpc	r19, r1
    3f02:	cc f4       	brge	.+50     	; 0x3f36 <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    3f04:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    3f06:	0f 2e       	mov	r0, r31
    3f08:	fa e2       	ldi	r31, 0x2A	; 42
    3f0a:	ef 2e       	mov	r14, r31
    3f0c:	f2 e0       	ldi	r31, 0x02	; 2
    3f0e:	ff 2e       	mov	r15, r31
    3f10:	f0 2d       	mov	r31, r0
    3f12:	0f e2       	ldi	r16, 0x2F	; 47
    3f14:	12 e0       	ldi	r17, 0x02	; 2
    3f16:	0a c0       	rjmp	.+20     	; 0x3f2c <GLCD_PrintString+0x50>
    3f18:	f7 01       	movw	r30, r14
    3f1a:	90 81       	ld	r25, Z
    3f1c:	f8 01       	movw	r30, r16
    3f1e:	20 81       	ld	r18, Z
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	29 0f       	add	r18, r25
    3f24:	31 1d       	adc	r19, r1
    3f26:	20 38       	cpi	r18, 0x80	; 128
    3f28:	31 05       	cpc	r19, r1
    3f2a:	2c f4       	brge	.+10     	; 0x3f36 <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    3f2c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    3f30:	89 91       	ld	r24, Y+
    3f32:	81 11       	cpse	r24, r1
    3f34:	f1 cf       	rjmp	.-30     	; 0x3f18 <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    3f36:	df 91       	pop	r29
    3f38:	cf 91       	pop	r28
    3f3a:	1f 91       	pop	r17
    3f3c:	0f 91       	pop	r16
    3f3e:	ff 90       	pop	r15
    3f40:	ef 90       	pop	r14
    3f42:	08 95       	ret

00003f44 <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	2c 97       	sbiw	r28, 0x0c	; 12
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    3f5c:	61 15       	cp	r22, r1
    3f5e:	71 05       	cpc	r23, r1
    3f60:	81 05       	cpc	r24, r1
    3f62:	91 05       	cpc	r25, r1
    3f64:	21 f4       	brne	.+8      	; 0x3f6e <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    3f66:	80 e3       	ldi	r24, 0x30	; 48
    3f68:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
    3f6c:	45 c1       	rjmp	.+650    	; 0x41f8 <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    3f6e:	61 15       	cp	r22, r1
    3f70:	71 05       	cpc	r23, r1
    3f72:	81 05       	cpc	r24, r1
    3f74:	20 e8       	ldi	r18, 0x80	; 128
    3f76:	92 07       	cpc	r25, r18
    3f78:	09 f4       	brne	.+2      	; 0x3f7c <GLCD_PrintInteger+0x38>
    3f7a:	3e c1       	rjmp	.+636    	; 0x41f8 <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	31 96       	adiw	r30, 0x01	; 1
    3f80:	2c e0       	ldi	r18, 0x0C	; 12
    3f82:	df 01       	movw	r26, r30
    3f84:	1d 92       	st	X+, r1
    3f86:	2a 95       	dec	r18
    3f88:	e9 f7       	brne	.-6      	; 0x3f84 <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    3f8a:	20 e3       	ldi	r18, 0x30	; 48
    3f8c:	2b 87       	std	Y+11, r18	; 0x0b
    3f8e:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    3f90:	29 87       	std	Y+9, r18	; 0x09
    3f92:	28 87       	std	Y+8, r18	; 0x08
    3f94:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    3f96:	2e 83       	std	Y+6, r18	; 0x06
    3f98:	2d 83       	std	Y+5, r18	; 0x05
    3f9a:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    3f9c:	2b 83       	std	Y+3, r18	; 0x03
    3f9e:	2a 83       	std	Y+2, r18	; 0x02
    3fa0:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    3fa2:	99 23       	and	r25, r25
    3fa4:	5c f4       	brge	.+22     	; 0x3fbc <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    3fa6:	9b 01       	movw	r18, r22
    3fa8:	ac 01       	movw	r20, r24
    3faa:	88 27       	eor	r24, r24
    3fac:	99 27       	eor	r25, r25
    3fae:	dc 01       	movw	r26, r24
    3fb0:	82 1b       	sub	r24, r18
    3fb2:	93 0b       	sbc	r25, r19
    3fb4:	a4 0b       	sbc	r26, r20
    3fb6:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    3fb8:	41 e0       	ldi	r20, 0x01	; 1
    3fba:	03 c0       	rjmp	.+6      	; 0x3fc2 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    3fc2:	81 30       	cpi	r24, 0x01	; 1
    3fc4:	3a ec       	ldi	r19, 0xCA	; 202
    3fc6:	93 07       	cpc	r25, r19
    3fc8:	3a e9       	ldi	r19, 0x9A	; 154
    3fca:	a3 07       	cpc	r26, r19
    3fcc:	3b e3       	ldi	r19, 0x3B	; 59
    3fce:	b3 07       	cpc	r27, r19
    3fd0:	94 f0       	brlt	.+36     	; 0x3ff6 <GLCD_PrintInteger+0xb2>
    3fd2:	2a 81       	ldd	r18, Y+2	; 0x02
    3fd4:	2f 5f       	subi	r18, 0xFF	; 255
    3fd6:	01 c0       	rjmp	.+2      	; 0x3fda <GLCD_PrintInteger+0x96>
    3fd8:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    3fda:	9a 5c       	subi	r25, 0xCA	; 202
    3fdc:	aa 49       	sbci	r26, 0x9A	; 154
    3fde:	bb 43       	sbci	r27, 0x3B	; 59
    3fe0:	32 2f       	mov	r19, r18
    3fe2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    3fe4:	81 30       	cpi	r24, 0x01	; 1
    3fe6:	5a ec       	ldi	r21, 0xCA	; 202
    3fe8:	95 07       	cpc	r25, r21
    3fea:	5a e9       	ldi	r21, 0x9A	; 154
    3fec:	a5 07       	cpc	r26, r21
    3fee:	5b e3       	ldi	r21, 0x3B	; 59
    3ff0:	b5 07       	cpc	r27, r21
    3ff2:	94 f7       	brge	.-28     	; 0x3fd8 <GLCD_PrintInteger+0x94>
    3ff4:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    3ff6:	81 15       	cp	r24, r1
    3ff8:	21 ee       	ldi	r18, 0xE1	; 225
    3ffa:	92 07       	cpc	r25, r18
    3ffc:	25 ef       	ldi	r18, 0xF5	; 245
    3ffe:	a2 07       	cpc	r26, r18
    4000:	25 e0       	ldi	r18, 0x05	; 5
    4002:	b2 07       	cpc	r27, r18
    4004:	94 f0       	brlt	.+36     	; 0x402a <GLCD_PrintInteger+0xe6>
    4006:	2b 81       	ldd	r18, Y+3	; 0x03
    4008:	2f 5f       	subi	r18, 0xFF	; 255
    400a:	01 c0       	rjmp	.+2      	; 0x400e <GLCD_PrintInteger+0xca>
    400c:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    400e:	91 5e       	subi	r25, 0xE1	; 225
    4010:	a5 4f       	sbci	r26, 0xF5	; 245
    4012:	b5 40       	sbci	r27, 0x05	; 5
    4014:	32 2f       	mov	r19, r18
    4016:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    4018:	81 15       	cp	r24, r1
    401a:	51 ee       	ldi	r21, 0xE1	; 225
    401c:	95 07       	cpc	r25, r21
    401e:	55 ef       	ldi	r21, 0xF5	; 245
    4020:	a5 07       	cpc	r26, r21
    4022:	55 e0       	ldi	r21, 0x05	; 5
    4024:	b5 07       	cpc	r27, r21
    4026:	94 f7       	brge	.-28     	; 0x400c <GLCD_PrintInteger+0xc8>
    4028:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    402a:	80 38       	cpi	r24, 0x80	; 128
    402c:	26 e9       	ldi	r18, 0x96	; 150
    402e:	92 07       	cpc	r25, r18
    4030:	28 e9       	ldi	r18, 0x98	; 152
    4032:	a2 07       	cpc	r26, r18
    4034:	b1 05       	cpc	r27, r1
    4036:	94 f0       	brlt	.+36     	; 0x405c <GLCD_PrintInteger+0x118>
    4038:	2c 81       	ldd	r18, Y+4	; 0x04
    403a:	2f 5f       	subi	r18, 0xFF	; 255
    403c:	01 c0       	rjmp	.+2      	; 0x4040 <GLCD_PrintInteger+0xfc>
    403e:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    4040:	80 58       	subi	r24, 0x80	; 128
    4042:	96 49       	sbci	r25, 0x96	; 150
    4044:	a8 49       	sbci	r26, 0x98	; 152
    4046:	b1 09       	sbc	r27, r1
    4048:	32 2f       	mov	r19, r18
    404a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    404c:	80 38       	cpi	r24, 0x80	; 128
    404e:	56 e9       	ldi	r21, 0x96	; 150
    4050:	95 07       	cpc	r25, r21
    4052:	58 e9       	ldi	r21, 0x98	; 152
    4054:	a5 07       	cpc	r26, r21
    4056:	b1 05       	cpc	r27, r1
    4058:	94 f7       	brge	.-28     	; 0x403e <GLCD_PrintInteger+0xfa>
    405a:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    405c:	80 34       	cpi	r24, 0x40	; 64
    405e:	22 e4       	ldi	r18, 0x42	; 66
    4060:	92 07       	cpc	r25, r18
    4062:	2f e0       	ldi	r18, 0x0F	; 15
    4064:	a2 07       	cpc	r26, r18
    4066:	b1 05       	cpc	r27, r1
    4068:	94 f0       	brlt	.+36     	; 0x408e <GLCD_PrintInteger+0x14a>
    406a:	2d 81       	ldd	r18, Y+5	; 0x05
    406c:	2f 5f       	subi	r18, 0xFF	; 255
    406e:	01 c0       	rjmp	.+2      	; 0x4072 <GLCD_PrintInteger+0x12e>
    4070:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    4072:	80 54       	subi	r24, 0x40	; 64
    4074:	92 44       	sbci	r25, 0x42	; 66
    4076:	af 40       	sbci	r26, 0x0F	; 15
    4078:	b1 09       	sbc	r27, r1
    407a:	32 2f       	mov	r19, r18
    407c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    407e:	80 34       	cpi	r24, 0x40	; 64
    4080:	52 e4       	ldi	r21, 0x42	; 66
    4082:	95 07       	cpc	r25, r21
    4084:	5f e0       	ldi	r21, 0x0F	; 15
    4086:	a5 07       	cpc	r26, r21
    4088:	b1 05       	cpc	r27, r1
    408a:	94 f7       	brge	.-28     	; 0x4070 <GLCD_PrintInteger+0x12c>
    408c:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    408e:	80 3a       	cpi	r24, 0xA0	; 160
    4090:	26 e8       	ldi	r18, 0x86	; 134
    4092:	92 07       	cpc	r25, r18
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	a2 07       	cpc	r26, r18
    4098:	b1 05       	cpc	r27, r1
    409a:	94 f0       	brlt	.+36     	; 0x40c0 <GLCD_PrintInteger+0x17c>
    409c:	2e 81       	ldd	r18, Y+6	; 0x06
    409e:	2f 5f       	subi	r18, 0xFF	; 255
    40a0:	01 c0       	rjmp	.+2      	; 0x40a4 <GLCD_PrintInteger+0x160>
    40a2:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    40a4:	80 5a       	subi	r24, 0xA0	; 160
    40a6:	96 48       	sbci	r25, 0x86	; 134
    40a8:	a1 40       	sbci	r26, 0x01	; 1
    40aa:	b1 09       	sbc	r27, r1
    40ac:	32 2f       	mov	r19, r18
    40ae:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    40b0:	80 3a       	cpi	r24, 0xA0	; 160
    40b2:	56 e8       	ldi	r21, 0x86	; 134
    40b4:	95 07       	cpc	r25, r21
    40b6:	51 e0       	ldi	r21, 0x01	; 1
    40b8:	a5 07       	cpc	r26, r21
    40ba:	b1 05       	cpc	r27, r1
    40bc:	94 f7       	brge	.-28     	; 0x40a2 <GLCD_PrintInteger+0x15e>
    40be:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    40c0:	80 31       	cpi	r24, 0x10	; 16
    40c2:	27 e2       	ldi	r18, 0x27	; 39
    40c4:	92 07       	cpc	r25, r18
    40c6:	a1 05       	cpc	r26, r1
    40c8:	b1 05       	cpc	r27, r1
    40ca:	8c f0       	brlt	.+34     	; 0x40ee <GLCD_PrintInteger+0x1aa>
    40cc:	2f 81       	ldd	r18, Y+7	; 0x07
    40ce:	2f 5f       	subi	r18, 0xFF	; 255
    40d0:	01 c0       	rjmp	.+2      	; 0x40d4 <GLCD_PrintInteger+0x190>
    40d2:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    40d4:	80 51       	subi	r24, 0x10	; 16
    40d6:	97 42       	sbci	r25, 0x27	; 39
    40d8:	a1 09       	sbc	r26, r1
    40da:	b1 09       	sbc	r27, r1
    40dc:	32 2f       	mov	r19, r18
    40de:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    40e0:	80 31       	cpi	r24, 0x10	; 16
    40e2:	57 e2       	ldi	r21, 0x27	; 39
    40e4:	95 07       	cpc	r25, r21
    40e6:	a1 05       	cpc	r26, r1
    40e8:	b1 05       	cpc	r27, r1
    40ea:	9c f7       	brge	.-26     	; 0x40d2 <GLCD_PrintInteger+0x18e>
    40ec:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    40ee:	88 3e       	cpi	r24, 0xE8	; 232
    40f0:	23 e0       	ldi	r18, 0x03	; 3
    40f2:	92 07       	cpc	r25, r18
    40f4:	a1 05       	cpc	r26, r1
    40f6:	b1 05       	cpc	r27, r1
    40f8:	8c f0       	brlt	.+34     	; 0x411c <GLCD_PrintInteger+0x1d8>
    40fa:	28 85       	ldd	r18, Y+8	; 0x08
    40fc:	2f 5f       	subi	r18, 0xFF	; 255
    40fe:	01 c0       	rjmp	.+2      	; 0x4102 <GLCD_PrintInteger+0x1be>
    4100:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    4102:	88 5e       	subi	r24, 0xE8	; 232
    4104:	93 40       	sbci	r25, 0x03	; 3
    4106:	a1 09       	sbc	r26, r1
    4108:	b1 09       	sbc	r27, r1
    410a:	32 2f       	mov	r19, r18
    410c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    410e:	88 3e       	cpi	r24, 0xE8	; 232
    4110:	53 e0       	ldi	r21, 0x03	; 3
    4112:	95 07       	cpc	r25, r21
    4114:	a1 05       	cpc	r26, r1
    4116:	b1 05       	cpc	r27, r1
    4118:	9c f7       	brge	.-26     	; 0x4100 <GLCD_PrintInteger+0x1bc>
    411a:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    411c:	84 36       	cpi	r24, 0x64	; 100
    411e:	91 05       	cpc	r25, r1
    4120:	a1 05       	cpc	r26, r1
    4122:	b1 05       	cpc	r27, r1
    4124:	84 f0       	brlt	.+32     	; 0x4146 <GLCD_PrintInteger+0x202>
    4126:	29 85       	ldd	r18, Y+9	; 0x09
    4128:	2f 5f       	subi	r18, 0xFF	; 255
    412a:	01 c0       	rjmp	.+2      	; 0x412e <GLCD_PrintInteger+0x1ea>
    412c:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    412e:	84 56       	subi	r24, 0x64	; 100
    4130:	91 09       	sbc	r25, r1
    4132:	a1 09       	sbc	r26, r1
    4134:	b1 09       	sbc	r27, r1
    4136:	32 2f       	mov	r19, r18
    4138:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    413a:	84 36       	cpi	r24, 0x64	; 100
    413c:	91 05       	cpc	r25, r1
    413e:	a1 05       	cpc	r26, r1
    4140:	b1 05       	cpc	r27, r1
    4142:	a4 f7       	brge	.-24     	; 0x412c <GLCD_PrintInteger+0x1e8>
    4144:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    4146:	8a 30       	cpi	r24, 0x0A	; 10
    4148:	91 05       	cpc	r25, r1
    414a:	a1 05       	cpc	r26, r1
    414c:	b1 05       	cpc	r27, r1
    414e:	7c f0       	brlt	.+30     	; 0x416e <GLCD_PrintInteger+0x22a>
    4150:	2a 85       	ldd	r18, Y+10	; 0x0a
    4152:	2f 5f       	subi	r18, 0xFF	; 255
    4154:	01 c0       	rjmp	.+2      	; 0x4158 <GLCD_PrintInteger+0x214>
    4156:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    4158:	0a 97       	sbiw	r24, 0x0a	; 10
    415a:	a1 09       	sbc	r26, r1
    415c:	b1 09       	sbc	r27, r1
    415e:	32 2f       	mov	r19, r18
    4160:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    4162:	8a 30       	cpi	r24, 0x0A	; 10
    4164:	91 05       	cpc	r25, r1
    4166:	a1 05       	cpc	r26, r1
    4168:	b1 05       	cpc	r27, r1
    416a:	ac f7       	brge	.-22     	; 0x4156 <GLCD_PrintInteger+0x212>
    416c:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    416e:	18 16       	cp	r1, r24
    4170:	19 06       	cpc	r1, r25
    4172:	1a 06       	cpc	r1, r26
    4174:	1b 06       	cpc	r1, r27
    4176:	5c f4       	brge	.+22     	; 0x418e <GLCD_PrintInteger+0x24a>
    4178:	5b 85       	ldd	r21, Y+11	; 0x0b
    417a:	8c 01       	movw	r16, r24
    417c:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    417e:	01 50       	subi	r16, 0x01	; 1
    4180:	11 09       	sbc	r17, r1
    4182:	21 09       	sbc	r18, r1
    4184:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    4186:	d9 f7       	brne	.-10     	; 0x417e <GLCD_PrintInteger+0x23a>
    4188:	65 2f       	mov	r22, r21
    418a:	68 0f       	add	r22, r24
    418c:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	80 33       	cpi	r24, 0x30	; 48
    4192:	61 f4       	brne	.+24     	; 0x41ac <GLCD_PrintInteger+0x268>
    4194:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    4196:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    4198:	e1 e0       	ldi	r30, 0x01	; 1
    419a:	f0 e0       	ldi	r31, 0x00	; 0
    419c:	ec 0f       	add	r30, r28
    419e:	fd 1f       	adc	r31, r29
    41a0:	e8 0f       	add	r30, r24
    41a2:	f1 1d       	adc	r31, r1
    41a4:	90 81       	ld	r25, Z
    41a6:	90 33       	cpi	r25, 0x30	; 48
    41a8:	b1 f3       	breq	.-20     	; 0x4196 <GLCD_PrintInteger+0x252>
    41aa:	01 c0       	rjmp	.+2      	; 0x41ae <GLCD_PrintInteger+0x26a>
    41ac:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    41ae:	44 23       	and	r20, r20
    41b0:	31 f0       	breq	.+12     	; 0x41be <GLCD_PrintInteger+0x27a>
	{
		i--;
    41b2:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    41b4:	fe 01       	movw	r30, r28
    41b6:	e8 0f       	add	r30, r24
    41b8:	f1 1d       	adc	r31, r1
    41ba:	9d e2       	ldi	r25, 0x2D	; 45
    41bc:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    41be:	4a e0       	ldi	r20, 0x0A	; 10
    41c0:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    41c2:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	e1 e0       	ldi	r30, 0x01	; 1
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	ec 0f       	add	r30, r28
    41cc:	fd 1f       	adc	r31, r29
    41ce:	e2 0f       	add	r30, r18
    41d0:	f1 1d       	adc	r31, r1
    41d2:	df 01       	movw	r26, r30
    41d4:	a8 0f       	add	r26, r24
    41d6:	b9 1f       	adc	r27, r25
    41d8:	3c 91       	ld	r19, X
    41da:	30 83       	st	Z, r19
		i++;
    41dc:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    41de:	42 17       	cp	r20, r18
    41e0:	90 f7       	brcc	.-28     	; 0x41c6 <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    41e2:	e1 e0       	ldi	r30, 0x01	; 1
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	ec 0f       	add	r30, r28
    41e8:	fd 1f       	adc	r31, r29
    41ea:	e2 0f       	add	r30, r18
    41ec:	f1 1d       	adc	r31, r1
    41ee:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    41f0:	ce 01       	movw	r24, r28
    41f2:	01 96       	adiw	r24, 0x01	; 1
    41f4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <GLCD_PrintString>
	}
}
    41f8:	2c 96       	adiw	r28, 0x0c	; 12
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	08 95       	ret

0000420e <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    420e:	8f 92       	push	r8
    4210:	9f 92       	push	r9
    4212:	af 92       	push	r10
    4214:	bf 92       	push	r11
    4216:	cf 92       	push	r12
    4218:	df 92       	push	r13
    421a:	ef 92       	push	r14
    421c:	ff 92       	push	r15
    421e:	6b 01       	movw	r12, r22
    4220:	7c 01       	movw	r14, r24
    4222:	49 01       	movw	r8, r18
    4224:	5a 01       	movw	r10, r20
	if (Value == 0)
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	a9 01       	movw	r20, r18
    422c:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    4230:	81 11       	cpse	r24, r1
    4232:	0a c0       	rjmp	.+20     	; 0x4248 <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    4234:	80 e3       	ldi	r24, 0x30	; 48
    4236:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    423a:	8e e2       	ldi	r24, 0x2E	; 46
    423c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    4240:	80 e3       	ldi	r24, 0x30	; 48
    4242:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
    4246:	4a c0       	rjmp	.+148    	; 0x42dc <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	40 e0       	ldi	r20, 0x00	; 0
    424e:	5f ec       	ldi	r21, 0xCF	; 207
    4250:	c7 01       	movw	r24, r14
    4252:	b6 01       	movw	r22, r12
    4254:	0e 94 67 23 	call	0x46ce	; 0x46ce <__gesf2>
    4258:	88 23       	and	r24, r24
    425a:	0c f4       	brge	.+2      	; 0x425e <GLCD_PrintDouble+0x50>
    425c:	3f c0       	rjmp	.+126    	; 0x42dc <GLCD_PrintDouble+0xce>
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	5f e4       	ldi	r21, 0x4F	; 79
    4266:	c7 01       	movw	r24, r14
    4268:	b6 01       	movw	r22, r12
    426a:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    426e:	88 23       	and	r24, r24
    4270:	ac f5       	brge	.+106    	; 0x42dc <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	a9 01       	movw	r20, r18
    4278:	c7 01       	movw	r24, r14
    427a:	b6 01       	movw	r22, r12
    427c:	0e 94 08 22 	call	0x4410	; 0x4410 <__cmpsf2>
    4280:	88 23       	and	r24, r24
    4282:	3c f4       	brge	.+14     	; 0x4292 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    4284:	f7 fa       	bst	r15, 7
    4286:	f0 94       	com	r15
    4288:	f7 f8       	bld	r15, 7
    428a:	f0 94       	com	r15
			GLCD_PrintChar('-');
    428c:	8d e2       	ldi	r24, 0x2D	; 45
    428e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    4292:	c7 01       	movw	r24, r14
    4294:	b6 01       	movw	r22, r12
    4296:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__fixsfsi>
    429a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    429e:	8e e2       	ldi	r24, 0x2E	; 46
    42a0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    42a4:	c7 01       	movw	r24, r14
    42a6:	b6 01       	movw	r22, r12
    42a8:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    42ac:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    42b0:	9b 01       	movw	r18, r22
    42b2:	ac 01       	movw	r20, r24
    42b4:	c7 01       	movw	r24, r14
    42b6:	b6 01       	movw	r22, r12
    42b8:	0e 94 9b 21 	call	0x4336	; 0x4336 <__subsf3>
    42bc:	6b 01       	movw	r12, r22
    42be:	7c 01       	movw	r14, r24
    42c0:	c5 01       	movw	r24, r10
    42c2:	b4 01       	movw	r22, r8
    42c4:	0e 94 b5 22 	call	0x456a	; 0x456a <__floatunsisf>
    42c8:	9b 01       	movw	r18, r22
    42ca:	ac 01       	movw	r20, r24
    42cc:	c7 01       	movw	r24, r14
    42ce:	b6 01       	movw	r22, r12
    42d0:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3>
    42d4:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__fixsfsi>
    42d8:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <GLCD_PrintInteger>
	}
}
    42dc:	ff 90       	pop	r15
    42de:	ef 90       	pop	r14
    42e0:	df 90       	pop	r13
    42e2:	cf 90       	pop	r12
    42e4:	bf 90       	pop	r11
    42e6:	af 90       	pop	r10
    42e8:	9f 90       	pop	r9
    42ea:	8f 90       	pop	r8
    42ec:	08 95       	ret

000042ee <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    42ee:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    42f0:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    42f2:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    42f4:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    42f6:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    42f8:	8c e0       	ldi	r24, 0x0C	; 12
    42fa:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    42fc:	84 e0       	ldi	r24, 0x04	; 4
    42fe:	86 bf       	out	0x36, r24	; 54
    4300:	08 95       	ret

00004302 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    4302:	81 b1       	in	r24, 0x01	; 1
}
    4304:	88 7f       	andi	r24, 0xF8	; 248
    4306:	08 95       	ret

00004308 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4308:	84 ea       	ldi	r24, 0xA4	; 164
    430a:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    430c:	06 b6       	in	r0, 0x36	; 54
    430e:	07 fe       	sbrs	r0, 7
    4310:	fd cf       	rjmp	.-6      	; 0x430c <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    4312:	0e 94 81 21 	call	0x4302	; 0x4302 <TWI_Status>
}
    4316:	08 95       	ret

00004318 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    4318:	85 ed       	ldi	r24, 0xD5	; 213
    431a:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    431c:	06 b6       	in	r0, 0x36	; 54
    431e:	04 fc       	sbrc	r0, 4
    4320:	fd cf       	rjmp	.-6      	; 0x431c <TWI_EndTransmission+0x4>
}
    4322:	08 95       	ret

00004324 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    4324:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    4326:	84 e8       	ldi	r24, 0x84	; 132
    4328:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    432a:	06 b6       	in	r0, 0x36	; 54
    432c:	07 fe       	sbrs	r0, 7
    432e:	fd cf       	rjmp	.-6      	; 0x432a <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    4330:	0e 94 81 21 	call	0x4302	; 0x4302 <TWI_Status>
}
    4334:	08 95       	ret

00004336 <__subsf3>:
    4336:	50 58       	subi	r21, 0x80	; 128

00004338 <__addsf3>:
    4338:	bb 27       	eor	r27, r27
    433a:	aa 27       	eor	r26, r26
    433c:	0e 94 b3 21 	call	0x4366	; 0x4366 <__addsf3x>
    4340:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__fp_round>
    4344:	0e 94 1f 23 	call	0x463e	; 0x463e <__fp_pscA>
    4348:	38 f0       	brcs	.+14     	; 0x4358 <__addsf3+0x20>
    434a:	0e 94 26 23 	call	0x464c	; 0x464c <__fp_pscB>
    434e:	20 f0       	brcs	.+8      	; 0x4358 <__addsf3+0x20>
    4350:	39 f4       	brne	.+14     	; 0x4360 <__addsf3+0x28>
    4352:	9f 3f       	cpi	r25, 0xFF	; 255
    4354:	19 f4       	brne	.+6      	; 0x435c <__addsf3+0x24>
    4356:	26 f4       	brtc	.+8      	; 0x4360 <__addsf3+0x28>
    4358:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__fp_nan>
    435c:	0e f4       	brtc	.+2      	; 0x4360 <__addsf3+0x28>
    435e:	e0 95       	com	r30
    4360:	e7 fb       	bst	r30, 7
    4362:	0c 94 16 23 	jmp	0x462c	; 0x462c <__fp_inf>

00004366 <__addsf3x>:
    4366:	e9 2f       	mov	r30, r25
    4368:	0e 94 3e 23 	call	0x467c	; 0x467c <__fp_split3>
    436c:	58 f3       	brcs	.-42     	; 0x4344 <__addsf3+0xc>
    436e:	ba 17       	cp	r27, r26
    4370:	62 07       	cpc	r22, r18
    4372:	73 07       	cpc	r23, r19
    4374:	84 07       	cpc	r24, r20
    4376:	95 07       	cpc	r25, r21
    4378:	20 f0       	brcs	.+8      	; 0x4382 <__addsf3x+0x1c>
    437a:	79 f4       	brne	.+30     	; 0x439a <__addsf3x+0x34>
    437c:	a6 f5       	brtc	.+104    	; 0x43e6 <__addsf3x+0x80>
    437e:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__fp_zero>
    4382:	0e f4       	brtc	.+2      	; 0x4386 <__addsf3x+0x20>
    4384:	e0 95       	com	r30
    4386:	0b 2e       	mov	r0, r27
    4388:	ba 2f       	mov	r27, r26
    438a:	a0 2d       	mov	r26, r0
    438c:	0b 01       	movw	r0, r22
    438e:	b9 01       	movw	r22, r18
    4390:	90 01       	movw	r18, r0
    4392:	0c 01       	movw	r0, r24
    4394:	ca 01       	movw	r24, r20
    4396:	a0 01       	movw	r20, r0
    4398:	11 24       	eor	r1, r1
    439a:	ff 27       	eor	r31, r31
    439c:	59 1b       	sub	r21, r25
    439e:	99 f0       	breq	.+38     	; 0x43c6 <__addsf3x+0x60>
    43a0:	59 3f       	cpi	r21, 0xF9	; 249
    43a2:	50 f4       	brcc	.+20     	; 0x43b8 <__addsf3x+0x52>
    43a4:	50 3e       	cpi	r21, 0xE0	; 224
    43a6:	68 f1       	brcs	.+90     	; 0x4402 <__addsf3x+0x9c>
    43a8:	1a 16       	cp	r1, r26
    43aa:	f0 40       	sbci	r31, 0x00	; 0
    43ac:	a2 2f       	mov	r26, r18
    43ae:	23 2f       	mov	r18, r19
    43b0:	34 2f       	mov	r19, r20
    43b2:	44 27       	eor	r20, r20
    43b4:	58 5f       	subi	r21, 0xF8	; 248
    43b6:	f3 cf       	rjmp	.-26     	; 0x439e <__addsf3x+0x38>
    43b8:	46 95       	lsr	r20
    43ba:	37 95       	ror	r19
    43bc:	27 95       	ror	r18
    43be:	a7 95       	ror	r26
    43c0:	f0 40       	sbci	r31, 0x00	; 0
    43c2:	53 95       	inc	r21
    43c4:	c9 f7       	brne	.-14     	; 0x43b8 <__addsf3x+0x52>
    43c6:	7e f4       	brtc	.+30     	; 0x43e6 <__addsf3x+0x80>
    43c8:	1f 16       	cp	r1, r31
    43ca:	ba 0b       	sbc	r27, r26
    43cc:	62 0b       	sbc	r22, r18
    43ce:	73 0b       	sbc	r23, r19
    43d0:	84 0b       	sbc	r24, r20
    43d2:	ba f0       	brmi	.+46     	; 0x4402 <__addsf3x+0x9c>
    43d4:	91 50       	subi	r25, 0x01	; 1
    43d6:	a1 f0       	breq	.+40     	; 0x4400 <__addsf3x+0x9a>
    43d8:	ff 0f       	add	r31, r31
    43da:	bb 1f       	adc	r27, r27
    43dc:	66 1f       	adc	r22, r22
    43de:	77 1f       	adc	r23, r23
    43e0:	88 1f       	adc	r24, r24
    43e2:	c2 f7       	brpl	.-16     	; 0x43d4 <__addsf3x+0x6e>
    43e4:	0e c0       	rjmp	.+28     	; 0x4402 <__addsf3x+0x9c>
    43e6:	ba 0f       	add	r27, r26
    43e8:	62 1f       	adc	r22, r18
    43ea:	73 1f       	adc	r23, r19
    43ec:	84 1f       	adc	r24, r20
    43ee:	48 f4       	brcc	.+18     	; 0x4402 <__addsf3x+0x9c>
    43f0:	87 95       	ror	r24
    43f2:	77 95       	ror	r23
    43f4:	67 95       	ror	r22
    43f6:	b7 95       	ror	r27
    43f8:	f7 95       	ror	r31
    43fa:	9e 3f       	cpi	r25, 0xFE	; 254
    43fc:	08 f0       	brcs	.+2      	; 0x4400 <__addsf3x+0x9a>
    43fe:	b0 cf       	rjmp	.-160    	; 0x4360 <__addsf3+0x28>
    4400:	93 95       	inc	r25
    4402:	88 0f       	add	r24, r24
    4404:	08 f0       	brcs	.+2      	; 0x4408 <__addsf3x+0xa2>
    4406:	99 27       	eor	r25, r25
    4408:	ee 0f       	add	r30, r30
    440a:	97 95       	ror	r25
    440c:	87 95       	ror	r24
    440e:	08 95       	ret

00004410 <__cmpsf2>:
    4410:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <__fp_cmp>
    4414:	08 f4       	brcc	.+2      	; 0x4418 <__cmpsf2+0x8>
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	08 95       	ret

0000441a <__divsf3>:
    441a:	0e 94 21 22 	call	0x4442	; 0x4442 <__divsf3x>
    441e:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__fp_round>
    4422:	0e 94 26 23 	call	0x464c	; 0x464c <__fp_pscB>
    4426:	58 f0       	brcs	.+22     	; 0x443e <__divsf3+0x24>
    4428:	0e 94 1f 23 	call	0x463e	; 0x463e <__fp_pscA>
    442c:	40 f0       	brcs	.+16     	; 0x443e <__divsf3+0x24>
    442e:	29 f4       	brne	.+10     	; 0x443a <__divsf3+0x20>
    4430:	5f 3f       	cpi	r21, 0xFF	; 255
    4432:	29 f0       	breq	.+10     	; 0x443e <__divsf3+0x24>
    4434:	0c 94 16 23 	jmp	0x462c	; 0x462c <__fp_inf>
    4438:	51 11       	cpse	r21, r1
    443a:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__fp_szero>
    443e:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__fp_nan>

00004442 <__divsf3x>:
    4442:	0e 94 3e 23 	call	0x467c	; 0x467c <__fp_split3>
    4446:	68 f3       	brcs	.-38     	; 0x4422 <__divsf3+0x8>

00004448 <__divsf3_pse>:
    4448:	99 23       	and	r25, r25
    444a:	b1 f3       	breq	.-20     	; 0x4438 <__divsf3+0x1e>
    444c:	55 23       	and	r21, r21
    444e:	91 f3       	breq	.-28     	; 0x4434 <__divsf3+0x1a>
    4450:	95 1b       	sub	r25, r21
    4452:	55 0b       	sbc	r21, r21
    4454:	bb 27       	eor	r27, r27
    4456:	aa 27       	eor	r26, r26
    4458:	62 17       	cp	r22, r18
    445a:	73 07       	cpc	r23, r19
    445c:	84 07       	cpc	r24, r20
    445e:	38 f0       	brcs	.+14     	; 0x446e <__divsf3_pse+0x26>
    4460:	9f 5f       	subi	r25, 0xFF	; 255
    4462:	5f 4f       	sbci	r21, 0xFF	; 255
    4464:	22 0f       	add	r18, r18
    4466:	33 1f       	adc	r19, r19
    4468:	44 1f       	adc	r20, r20
    446a:	aa 1f       	adc	r26, r26
    446c:	a9 f3       	breq	.-22     	; 0x4458 <__divsf3_pse+0x10>
    446e:	35 d0       	rcall	.+106    	; 0x44da <__divsf3_pse+0x92>
    4470:	0e 2e       	mov	r0, r30
    4472:	3a f0       	brmi	.+14     	; 0x4482 <__divsf3_pse+0x3a>
    4474:	e0 e8       	ldi	r30, 0x80	; 128
    4476:	32 d0       	rcall	.+100    	; 0x44dc <__divsf3_pse+0x94>
    4478:	91 50       	subi	r25, 0x01	; 1
    447a:	50 40       	sbci	r21, 0x00	; 0
    447c:	e6 95       	lsr	r30
    447e:	00 1c       	adc	r0, r0
    4480:	ca f7       	brpl	.-14     	; 0x4474 <__divsf3_pse+0x2c>
    4482:	2b d0       	rcall	.+86     	; 0x44da <__divsf3_pse+0x92>
    4484:	fe 2f       	mov	r31, r30
    4486:	29 d0       	rcall	.+82     	; 0x44da <__divsf3_pse+0x92>
    4488:	66 0f       	add	r22, r22
    448a:	77 1f       	adc	r23, r23
    448c:	88 1f       	adc	r24, r24
    448e:	bb 1f       	adc	r27, r27
    4490:	26 17       	cp	r18, r22
    4492:	37 07       	cpc	r19, r23
    4494:	48 07       	cpc	r20, r24
    4496:	ab 07       	cpc	r26, r27
    4498:	b0 e8       	ldi	r27, 0x80	; 128
    449a:	09 f0       	breq	.+2      	; 0x449e <__divsf3_pse+0x56>
    449c:	bb 0b       	sbc	r27, r27
    449e:	80 2d       	mov	r24, r0
    44a0:	bf 01       	movw	r22, r30
    44a2:	ff 27       	eor	r31, r31
    44a4:	93 58       	subi	r25, 0x83	; 131
    44a6:	5f 4f       	sbci	r21, 0xFF	; 255
    44a8:	3a f0       	brmi	.+14     	; 0x44b8 <__divsf3_pse+0x70>
    44aa:	9e 3f       	cpi	r25, 0xFE	; 254
    44ac:	51 05       	cpc	r21, r1
    44ae:	78 f0       	brcs	.+30     	; 0x44ce <__divsf3_pse+0x86>
    44b0:	0c 94 16 23 	jmp	0x462c	; 0x462c <__fp_inf>
    44b4:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__fp_szero>
    44b8:	5f 3f       	cpi	r21, 0xFF	; 255
    44ba:	e4 f3       	brlt	.-8      	; 0x44b4 <__divsf3_pse+0x6c>
    44bc:	98 3e       	cpi	r25, 0xE8	; 232
    44be:	d4 f3       	brlt	.-12     	; 0x44b4 <__divsf3_pse+0x6c>
    44c0:	86 95       	lsr	r24
    44c2:	77 95       	ror	r23
    44c4:	67 95       	ror	r22
    44c6:	b7 95       	ror	r27
    44c8:	f7 95       	ror	r31
    44ca:	9f 5f       	subi	r25, 0xFF	; 255
    44cc:	c9 f7       	brne	.-14     	; 0x44c0 <__divsf3_pse+0x78>
    44ce:	88 0f       	add	r24, r24
    44d0:	91 1d       	adc	r25, r1
    44d2:	96 95       	lsr	r25
    44d4:	87 95       	ror	r24
    44d6:	97 f9       	bld	r25, 7
    44d8:	08 95       	ret
    44da:	e1 e0       	ldi	r30, 0x01	; 1
    44dc:	66 0f       	add	r22, r22
    44de:	77 1f       	adc	r23, r23
    44e0:	88 1f       	adc	r24, r24
    44e2:	bb 1f       	adc	r27, r27
    44e4:	62 17       	cp	r22, r18
    44e6:	73 07       	cpc	r23, r19
    44e8:	84 07       	cpc	r24, r20
    44ea:	ba 07       	cpc	r27, r26
    44ec:	20 f0       	brcs	.+8      	; 0x44f6 <__divsf3_pse+0xae>
    44ee:	62 1b       	sub	r22, r18
    44f0:	73 0b       	sbc	r23, r19
    44f2:	84 0b       	sbc	r24, r20
    44f4:	ba 0b       	sbc	r27, r26
    44f6:	ee 1f       	adc	r30, r30
    44f8:	88 f7       	brcc	.-30     	; 0x44dc <__divsf3_pse+0x94>
    44fa:	e0 95       	com	r30
    44fc:	08 95       	ret

000044fe <__fixsfsi>:
    44fe:	0e 94 86 22 	call	0x450c	; 0x450c <__fixunssfsi>
    4502:	68 94       	set
    4504:	b1 11       	cpse	r27, r1
    4506:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__fp_szero>
    450a:	08 95       	ret

0000450c <__fixunssfsi>:
    450c:	0e 94 46 23 	call	0x468c	; 0x468c <__fp_splitA>
    4510:	88 f0       	brcs	.+34     	; 0x4534 <__fixunssfsi+0x28>
    4512:	9f 57       	subi	r25, 0x7F	; 127
    4514:	98 f0       	brcs	.+38     	; 0x453c <__fixunssfsi+0x30>
    4516:	b9 2f       	mov	r27, r25
    4518:	99 27       	eor	r25, r25
    451a:	b7 51       	subi	r27, 0x17	; 23
    451c:	b0 f0       	brcs	.+44     	; 0x454a <__fixunssfsi+0x3e>
    451e:	e1 f0       	breq	.+56     	; 0x4558 <__fixunssfsi+0x4c>
    4520:	66 0f       	add	r22, r22
    4522:	77 1f       	adc	r23, r23
    4524:	88 1f       	adc	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	1a f0       	brmi	.+6      	; 0x4530 <__fixunssfsi+0x24>
    452a:	ba 95       	dec	r27
    452c:	c9 f7       	brne	.-14     	; 0x4520 <__fixunssfsi+0x14>
    452e:	14 c0       	rjmp	.+40     	; 0x4558 <__fixunssfsi+0x4c>
    4530:	b1 30       	cpi	r27, 0x01	; 1
    4532:	91 f0       	breq	.+36     	; 0x4558 <__fixunssfsi+0x4c>
    4534:	0e 94 60 23 	call	0x46c0	; 0x46c0 <__fp_zero>
    4538:	b1 e0       	ldi	r27, 0x01	; 1
    453a:	08 95       	ret
    453c:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__fp_zero>
    4540:	67 2f       	mov	r22, r23
    4542:	78 2f       	mov	r23, r24
    4544:	88 27       	eor	r24, r24
    4546:	b8 5f       	subi	r27, 0xF8	; 248
    4548:	39 f0       	breq	.+14     	; 0x4558 <__fixunssfsi+0x4c>
    454a:	b9 3f       	cpi	r27, 0xF9	; 249
    454c:	cc f3       	brlt	.-14     	; 0x4540 <__fixunssfsi+0x34>
    454e:	86 95       	lsr	r24
    4550:	77 95       	ror	r23
    4552:	67 95       	ror	r22
    4554:	b3 95       	inc	r27
    4556:	d9 f7       	brne	.-10     	; 0x454e <__fixunssfsi+0x42>
    4558:	3e f4       	brtc	.+14     	; 0x4568 <__fixunssfsi+0x5c>
    455a:	90 95       	com	r25
    455c:	80 95       	com	r24
    455e:	70 95       	com	r23
    4560:	61 95       	neg	r22
    4562:	7f 4f       	sbci	r23, 0xFF	; 255
    4564:	8f 4f       	sbci	r24, 0xFF	; 255
    4566:	9f 4f       	sbci	r25, 0xFF	; 255
    4568:	08 95       	ret

0000456a <__floatunsisf>:
    456a:	e8 94       	clt
    456c:	09 c0       	rjmp	.+18     	; 0x4580 <__floatsisf+0x12>

0000456e <__floatsisf>:
    456e:	97 fb       	bst	r25, 7
    4570:	3e f4       	brtc	.+14     	; 0x4580 <__floatsisf+0x12>
    4572:	90 95       	com	r25
    4574:	80 95       	com	r24
    4576:	70 95       	com	r23
    4578:	61 95       	neg	r22
    457a:	7f 4f       	sbci	r23, 0xFF	; 255
    457c:	8f 4f       	sbci	r24, 0xFF	; 255
    457e:	9f 4f       	sbci	r25, 0xFF	; 255
    4580:	99 23       	and	r25, r25
    4582:	a9 f0       	breq	.+42     	; 0x45ae <__floatsisf+0x40>
    4584:	f9 2f       	mov	r31, r25
    4586:	96 e9       	ldi	r25, 0x96	; 150
    4588:	bb 27       	eor	r27, r27
    458a:	93 95       	inc	r25
    458c:	f6 95       	lsr	r31
    458e:	87 95       	ror	r24
    4590:	77 95       	ror	r23
    4592:	67 95       	ror	r22
    4594:	b7 95       	ror	r27
    4596:	f1 11       	cpse	r31, r1
    4598:	f8 cf       	rjmp	.-16     	; 0x458a <__floatsisf+0x1c>
    459a:	fa f4       	brpl	.+62     	; 0x45da <__floatsisf+0x6c>
    459c:	bb 0f       	add	r27, r27
    459e:	11 f4       	brne	.+4      	; 0x45a4 <__floatsisf+0x36>
    45a0:	60 ff       	sbrs	r22, 0
    45a2:	1b c0       	rjmp	.+54     	; 0x45da <__floatsisf+0x6c>
    45a4:	6f 5f       	subi	r22, 0xFF	; 255
    45a6:	7f 4f       	sbci	r23, 0xFF	; 255
    45a8:	8f 4f       	sbci	r24, 0xFF	; 255
    45aa:	9f 4f       	sbci	r25, 0xFF	; 255
    45ac:	16 c0       	rjmp	.+44     	; 0x45da <__floatsisf+0x6c>
    45ae:	88 23       	and	r24, r24
    45b0:	11 f0       	breq	.+4      	; 0x45b6 <__floatsisf+0x48>
    45b2:	96 e9       	ldi	r25, 0x96	; 150
    45b4:	11 c0       	rjmp	.+34     	; 0x45d8 <__floatsisf+0x6a>
    45b6:	77 23       	and	r23, r23
    45b8:	21 f0       	breq	.+8      	; 0x45c2 <__floatsisf+0x54>
    45ba:	9e e8       	ldi	r25, 0x8E	; 142
    45bc:	87 2f       	mov	r24, r23
    45be:	76 2f       	mov	r23, r22
    45c0:	05 c0       	rjmp	.+10     	; 0x45cc <__floatsisf+0x5e>
    45c2:	66 23       	and	r22, r22
    45c4:	71 f0       	breq	.+28     	; 0x45e2 <__floatsisf+0x74>
    45c6:	96 e8       	ldi	r25, 0x86	; 134
    45c8:	86 2f       	mov	r24, r22
    45ca:	70 e0       	ldi	r23, 0x00	; 0
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	2a f0       	brmi	.+10     	; 0x45da <__floatsisf+0x6c>
    45d0:	9a 95       	dec	r25
    45d2:	66 0f       	add	r22, r22
    45d4:	77 1f       	adc	r23, r23
    45d6:	88 1f       	adc	r24, r24
    45d8:	da f7       	brpl	.-10     	; 0x45d0 <__floatsisf+0x62>
    45da:	88 0f       	add	r24, r24
    45dc:	96 95       	lsr	r25
    45de:	87 95       	ror	r24
    45e0:	97 f9       	bld	r25, 7
    45e2:	08 95       	ret

000045e4 <__fp_cmp>:
    45e4:	99 0f       	add	r25, r25
    45e6:	00 08       	sbc	r0, r0
    45e8:	55 0f       	add	r21, r21
    45ea:	aa 0b       	sbc	r26, r26
    45ec:	e0 e8       	ldi	r30, 0x80	; 128
    45ee:	fe ef       	ldi	r31, 0xFE	; 254
    45f0:	16 16       	cp	r1, r22
    45f2:	17 06       	cpc	r1, r23
    45f4:	e8 07       	cpc	r30, r24
    45f6:	f9 07       	cpc	r31, r25
    45f8:	c0 f0       	brcs	.+48     	; 0x462a <__fp_cmp+0x46>
    45fa:	12 16       	cp	r1, r18
    45fc:	13 06       	cpc	r1, r19
    45fe:	e4 07       	cpc	r30, r20
    4600:	f5 07       	cpc	r31, r21
    4602:	98 f0       	brcs	.+38     	; 0x462a <__fp_cmp+0x46>
    4604:	62 1b       	sub	r22, r18
    4606:	73 0b       	sbc	r23, r19
    4608:	84 0b       	sbc	r24, r20
    460a:	95 0b       	sbc	r25, r21
    460c:	39 f4       	brne	.+14     	; 0x461c <__fp_cmp+0x38>
    460e:	0a 26       	eor	r0, r26
    4610:	61 f0       	breq	.+24     	; 0x462a <__fp_cmp+0x46>
    4612:	23 2b       	or	r18, r19
    4614:	24 2b       	or	r18, r20
    4616:	25 2b       	or	r18, r21
    4618:	21 f4       	brne	.+8      	; 0x4622 <__fp_cmp+0x3e>
    461a:	08 95       	ret
    461c:	0a 26       	eor	r0, r26
    461e:	09 f4       	brne	.+2      	; 0x4622 <__fp_cmp+0x3e>
    4620:	a1 40       	sbci	r26, 0x01	; 1
    4622:	a6 95       	lsr	r26
    4624:	8f ef       	ldi	r24, 0xFF	; 255
    4626:	81 1d       	adc	r24, r1
    4628:	81 1d       	adc	r24, r1
    462a:	08 95       	ret

0000462c <__fp_inf>:
    462c:	97 f9       	bld	r25, 7
    462e:	9f 67       	ori	r25, 0x7F	; 127
    4630:	80 e8       	ldi	r24, 0x80	; 128
    4632:	70 e0       	ldi	r23, 0x00	; 0
    4634:	60 e0       	ldi	r22, 0x00	; 0
    4636:	08 95       	ret

00004638 <__fp_nan>:
    4638:	9f ef       	ldi	r25, 0xFF	; 255
    463a:	80 ec       	ldi	r24, 0xC0	; 192
    463c:	08 95       	ret

0000463e <__fp_pscA>:
    463e:	00 24       	eor	r0, r0
    4640:	0a 94       	dec	r0
    4642:	16 16       	cp	r1, r22
    4644:	17 06       	cpc	r1, r23
    4646:	18 06       	cpc	r1, r24
    4648:	09 06       	cpc	r0, r25
    464a:	08 95       	ret

0000464c <__fp_pscB>:
    464c:	00 24       	eor	r0, r0
    464e:	0a 94       	dec	r0
    4650:	12 16       	cp	r1, r18
    4652:	13 06       	cpc	r1, r19
    4654:	14 06       	cpc	r1, r20
    4656:	05 06       	cpc	r0, r21
    4658:	08 95       	ret

0000465a <__fp_round>:
    465a:	09 2e       	mov	r0, r25
    465c:	03 94       	inc	r0
    465e:	00 0c       	add	r0, r0
    4660:	11 f4       	brne	.+4      	; 0x4666 <__fp_round+0xc>
    4662:	88 23       	and	r24, r24
    4664:	52 f0       	brmi	.+20     	; 0x467a <__fp_round+0x20>
    4666:	bb 0f       	add	r27, r27
    4668:	40 f4       	brcc	.+16     	; 0x467a <__fp_round+0x20>
    466a:	bf 2b       	or	r27, r31
    466c:	11 f4       	brne	.+4      	; 0x4672 <__fp_round+0x18>
    466e:	60 ff       	sbrs	r22, 0
    4670:	04 c0       	rjmp	.+8      	; 0x467a <__fp_round+0x20>
    4672:	6f 5f       	subi	r22, 0xFF	; 255
    4674:	7f 4f       	sbci	r23, 0xFF	; 255
    4676:	8f 4f       	sbci	r24, 0xFF	; 255
    4678:	9f 4f       	sbci	r25, 0xFF	; 255
    467a:	08 95       	ret

0000467c <__fp_split3>:
    467c:	57 fd       	sbrc	r21, 7
    467e:	90 58       	subi	r25, 0x80	; 128
    4680:	44 0f       	add	r20, r20
    4682:	55 1f       	adc	r21, r21
    4684:	59 f0       	breq	.+22     	; 0x469c <__fp_splitA+0x10>
    4686:	5f 3f       	cpi	r21, 0xFF	; 255
    4688:	71 f0       	breq	.+28     	; 0x46a6 <__fp_splitA+0x1a>
    468a:	47 95       	ror	r20

0000468c <__fp_splitA>:
    468c:	88 0f       	add	r24, r24
    468e:	97 fb       	bst	r25, 7
    4690:	99 1f       	adc	r25, r25
    4692:	61 f0       	breq	.+24     	; 0x46ac <__fp_splitA+0x20>
    4694:	9f 3f       	cpi	r25, 0xFF	; 255
    4696:	79 f0       	breq	.+30     	; 0x46b6 <__fp_splitA+0x2a>
    4698:	87 95       	ror	r24
    469a:	08 95       	ret
    469c:	12 16       	cp	r1, r18
    469e:	13 06       	cpc	r1, r19
    46a0:	14 06       	cpc	r1, r20
    46a2:	55 1f       	adc	r21, r21
    46a4:	f2 cf       	rjmp	.-28     	; 0x468a <__fp_split3+0xe>
    46a6:	46 95       	lsr	r20
    46a8:	f1 df       	rcall	.-30     	; 0x468c <__fp_splitA>
    46aa:	08 c0       	rjmp	.+16     	; 0x46bc <__fp_splitA+0x30>
    46ac:	16 16       	cp	r1, r22
    46ae:	17 06       	cpc	r1, r23
    46b0:	18 06       	cpc	r1, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	f1 cf       	rjmp	.-30     	; 0x4698 <__fp_splitA+0xc>
    46b6:	86 95       	lsr	r24
    46b8:	71 05       	cpc	r23, r1
    46ba:	61 05       	cpc	r22, r1
    46bc:	08 94       	sec
    46be:	08 95       	ret

000046c0 <__fp_zero>:
    46c0:	e8 94       	clt

000046c2 <__fp_szero>:
    46c2:	bb 27       	eor	r27, r27
    46c4:	66 27       	eor	r22, r22
    46c6:	77 27       	eor	r23, r23
    46c8:	cb 01       	movw	r24, r22
    46ca:	97 f9       	bld	r25, 7
    46cc:	08 95       	ret

000046ce <__gesf2>:
    46ce:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <__fp_cmp>
    46d2:	08 f4       	brcc	.+2      	; 0x46d6 <__gesf2+0x8>
    46d4:	8f ef       	ldi	r24, 0xFF	; 255
    46d6:	08 95       	ret

000046d8 <__mulsf3>:
    46d8:	0e 94 7f 23 	call	0x46fe	; 0x46fe <__mulsf3x>
    46dc:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__fp_round>
    46e0:	0e 94 1f 23 	call	0x463e	; 0x463e <__fp_pscA>
    46e4:	38 f0       	brcs	.+14     	; 0x46f4 <__mulsf3+0x1c>
    46e6:	0e 94 26 23 	call	0x464c	; 0x464c <__fp_pscB>
    46ea:	20 f0       	brcs	.+8      	; 0x46f4 <__mulsf3+0x1c>
    46ec:	95 23       	and	r25, r21
    46ee:	11 f0       	breq	.+4      	; 0x46f4 <__mulsf3+0x1c>
    46f0:	0c 94 16 23 	jmp	0x462c	; 0x462c <__fp_inf>
    46f4:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__fp_nan>
    46f8:	11 24       	eor	r1, r1
    46fa:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__fp_szero>

000046fe <__mulsf3x>:
    46fe:	0e 94 3e 23 	call	0x467c	; 0x467c <__fp_split3>
    4702:	70 f3       	brcs	.-36     	; 0x46e0 <__mulsf3+0x8>

00004704 <__mulsf3_pse>:
    4704:	95 9f       	mul	r25, r21
    4706:	c1 f3       	breq	.-16     	; 0x46f8 <__mulsf3+0x20>
    4708:	95 0f       	add	r25, r21
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	55 1f       	adc	r21, r21
    470e:	62 9f       	mul	r22, r18
    4710:	f0 01       	movw	r30, r0
    4712:	72 9f       	mul	r23, r18
    4714:	bb 27       	eor	r27, r27
    4716:	f0 0d       	add	r31, r0
    4718:	b1 1d       	adc	r27, r1
    471a:	63 9f       	mul	r22, r19
    471c:	aa 27       	eor	r26, r26
    471e:	f0 0d       	add	r31, r0
    4720:	b1 1d       	adc	r27, r1
    4722:	aa 1f       	adc	r26, r26
    4724:	64 9f       	mul	r22, r20
    4726:	66 27       	eor	r22, r22
    4728:	b0 0d       	add	r27, r0
    472a:	a1 1d       	adc	r26, r1
    472c:	66 1f       	adc	r22, r22
    472e:	82 9f       	mul	r24, r18
    4730:	22 27       	eor	r18, r18
    4732:	b0 0d       	add	r27, r0
    4734:	a1 1d       	adc	r26, r1
    4736:	62 1f       	adc	r22, r18
    4738:	73 9f       	mul	r23, r19
    473a:	b0 0d       	add	r27, r0
    473c:	a1 1d       	adc	r26, r1
    473e:	62 1f       	adc	r22, r18
    4740:	83 9f       	mul	r24, r19
    4742:	a0 0d       	add	r26, r0
    4744:	61 1d       	adc	r22, r1
    4746:	22 1f       	adc	r18, r18
    4748:	74 9f       	mul	r23, r20
    474a:	33 27       	eor	r19, r19
    474c:	a0 0d       	add	r26, r0
    474e:	61 1d       	adc	r22, r1
    4750:	23 1f       	adc	r18, r19
    4752:	84 9f       	mul	r24, r20
    4754:	60 0d       	add	r22, r0
    4756:	21 1d       	adc	r18, r1
    4758:	82 2f       	mov	r24, r18
    475a:	76 2f       	mov	r23, r22
    475c:	6a 2f       	mov	r22, r26
    475e:	11 24       	eor	r1, r1
    4760:	9f 57       	subi	r25, 0x7F	; 127
    4762:	50 40       	sbci	r21, 0x00	; 0
    4764:	9a f0       	brmi	.+38     	; 0x478c <__mulsf3_pse+0x88>
    4766:	f1 f0       	breq	.+60     	; 0x47a4 <__mulsf3_pse+0xa0>
    4768:	88 23       	and	r24, r24
    476a:	4a f0       	brmi	.+18     	; 0x477e <__mulsf3_pse+0x7a>
    476c:	ee 0f       	add	r30, r30
    476e:	ff 1f       	adc	r31, r31
    4770:	bb 1f       	adc	r27, r27
    4772:	66 1f       	adc	r22, r22
    4774:	77 1f       	adc	r23, r23
    4776:	88 1f       	adc	r24, r24
    4778:	91 50       	subi	r25, 0x01	; 1
    477a:	50 40       	sbci	r21, 0x00	; 0
    477c:	a9 f7       	brne	.-22     	; 0x4768 <__mulsf3_pse+0x64>
    477e:	9e 3f       	cpi	r25, 0xFE	; 254
    4780:	51 05       	cpc	r21, r1
    4782:	80 f0       	brcs	.+32     	; 0x47a4 <__mulsf3_pse+0xa0>
    4784:	0c 94 16 23 	jmp	0x462c	; 0x462c <__fp_inf>
    4788:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__fp_szero>
    478c:	5f 3f       	cpi	r21, 0xFF	; 255
    478e:	e4 f3       	brlt	.-8      	; 0x4788 <__mulsf3_pse+0x84>
    4790:	98 3e       	cpi	r25, 0xE8	; 232
    4792:	d4 f3       	brlt	.-12     	; 0x4788 <__mulsf3_pse+0x84>
    4794:	86 95       	lsr	r24
    4796:	77 95       	ror	r23
    4798:	67 95       	ror	r22
    479a:	b7 95       	ror	r27
    479c:	f7 95       	ror	r31
    479e:	e7 95       	ror	r30
    47a0:	9f 5f       	subi	r25, 0xFF	; 255
    47a2:	c1 f7       	brne	.-16     	; 0x4794 <__mulsf3_pse+0x90>
    47a4:	fe 2b       	or	r31, r30
    47a6:	88 0f       	add	r24, r24
    47a8:	91 1d       	adc	r25, r1
    47aa:	96 95       	lsr	r25
    47ac:	87 95       	ror	r24
    47ae:	97 f9       	bld	r25, 7
    47b0:	08 95       	ret

000047b2 <round>:
    47b2:	0e 94 46 23 	call	0x468c	; 0x468c <__fp_splitA>
    47b6:	e8 f0       	brcs	.+58     	; 0x47f2 <round+0x40>
    47b8:	9e 37       	cpi	r25, 0x7E	; 126
    47ba:	e8 f0       	brcs	.+58     	; 0x47f6 <round+0x44>
    47bc:	96 39       	cpi	r25, 0x96	; 150
    47be:	b8 f4       	brcc	.+46     	; 0x47ee <round+0x3c>
    47c0:	9e 38       	cpi	r25, 0x8E	; 142
    47c2:	48 f4       	brcc	.+18     	; 0x47d6 <round+0x24>
    47c4:	67 2f       	mov	r22, r23
    47c6:	78 2f       	mov	r23, r24
    47c8:	88 27       	eor	r24, r24
    47ca:	98 5f       	subi	r25, 0xF8	; 248
    47cc:	f9 cf       	rjmp	.-14     	; 0x47c0 <round+0xe>
    47ce:	86 95       	lsr	r24
    47d0:	77 95       	ror	r23
    47d2:	67 95       	ror	r22
    47d4:	93 95       	inc	r25
    47d6:	95 39       	cpi	r25, 0x95	; 149
    47d8:	d0 f3       	brcs	.-12     	; 0x47ce <round+0x1c>
    47da:	b6 2f       	mov	r27, r22
    47dc:	b1 70       	andi	r27, 0x01	; 1
    47de:	6b 0f       	add	r22, r27
    47e0:	71 1d       	adc	r23, r1
    47e2:	81 1d       	adc	r24, r1
    47e4:	20 f4       	brcc	.+8      	; 0x47ee <round+0x3c>
    47e6:	87 95       	ror	r24
    47e8:	77 95       	ror	r23
    47ea:	67 95       	ror	r22
    47ec:	93 95       	inc	r25
    47ee:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <__fp_mintl>
    47f2:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__fp_mpack>
    47f6:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__fp_szero>

000047fa <__fp_mintl>:
    47fa:	88 23       	and	r24, r24
    47fc:	71 f4       	brne	.+28     	; 0x481a <__fp_mintl+0x20>
    47fe:	77 23       	and	r23, r23
    4800:	21 f0       	breq	.+8      	; 0x480a <__fp_mintl+0x10>
    4802:	98 50       	subi	r25, 0x08	; 8
    4804:	87 2b       	or	r24, r23
    4806:	76 2f       	mov	r23, r22
    4808:	07 c0       	rjmp	.+14     	; 0x4818 <__fp_mintl+0x1e>
    480a:	66 23       	and	r22, r22
    480c:	11 f4       	brne	.+4      	; 0x4812 <__fp_mintl+0x18>
    480e:	99 27       	eor	r25, r25
    4810:	0d c0       	rjmp	.+26     	; 0x482c <__fp_mintl+0x32>
    4812:	90 51       	subi	r25, 0x10	; 16
    4814:	86 2b       	or	r24, r22
    4816:	70 e0       	ldi	r23, 0x00	; 0
    4818:	60 e0       	ldi	r22, 0x00	; 0
    481a:	2a f0       	brmi	.+10     	; 0x4826 <__fp_mintl+0x2c>
    481c:	9a 95       	dec	r25
    481e:	66 0f       	add	r22, r22
    4820:	77 1f       	adc	r23, r23
    4822:	88 1f       	adc	r24, r24
    4824:	da f7       	brpl	.-10     	; 0x481c <__fp_mintl+0x22>
    4826:	88 0f       	add	r24, r24
    4828:	96 95       	lsr	r25
    482a:	87 95       	ror	r24
    482c:	97 f9       	bld	r25, 7
    482e:	08 95       	ret

00004830 <__fp_mpack>:
    4830:	9f 3f       	cpi	r25, 0xFF	; 255
    4832:	31 f0       	breq	.+12     	; 0x4840 <__fp_mpack_finite+0xc>

00004834 <__fp_mpack_finite>:
    4834:	91 50       	subi	r25, 0x01	; 1
    4836:	20 f4       	brcc	.+8      	; 0x4840 <__fp_mpack_finite+0xc>
    4838:	87 95       	ror	r24
    483a:	77 95       	ror	r23
    483c:	67 95       	ror	r22
    483e:	b7 95       	ror	r27
    4840:	88 0f       	add	r24, r24
    4842:	91 1d       	adc	r25, r1
    4844:	96 95       	lsr	r25
    4846:	87 95       	ror	r24
    4848:	97 f9       	bld	r25, 7
    484a:	08 95       	ret

0000484c <__divmodhi4>:
    484c:	97 fb       	bst	r25, 7
    484e:	07 2e       	mov	r0, r23
    4850:	16 f4       	brtc	.+4      	; 0x4856 <__divmodhi4+0xa>
    4852:	00 94       	com	r0
    4854:	07 d0       	rcall	.+14     	; 0x4864 <__divmodhi4_neg1>
    4856:	77 fd       	sbrc	r23, 7
    4858:	09 d0       	rcall	.+18     	; 0x486c <__divmodhi4_neg2>
    485a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__udivmodhi4>
    485e:	07 fc       	sbrc	r0, 7
    4860:	05 d0       	rcall	.+10     	; 0x486c <__divmodhi4_neg2>
    4862:	3e f4       	brtc	.+14     	; 0x4872 <__divmodhi4_exit>

00004864 <__divmodhi4_neg1>:
    4864:	90 95       	com	r25
    4866:	81 95       	neg	r24
    4868:	9f 4f       	sbci	r25, 0xFF	; 255
    486a:	08 95       	ret

0000486c <__divmodhi4_neg2>:
    486c:	70 95       	com	r23
    486e:	61 95       	neg	r22
    4870:	7f 4f       	sbci	r23, 0xFF	; 255

00004872 <__divmodhi4_exit>:
    4872:	08 95       	ret

00004874 <__udivmodsi4>:
    4874:	a1 e2       	ldi	r26, 0x21	; 33
    4876:	1a 2e       	mov	r1, r26
    4878:	aa 1b       	sub	r26, r26
    487a:	bb 1b       	sub	r27, r27
    487c:	fd 01       	movw	r30, r26
    487e:	0d c0       	rjmp	.+26     	; 0x489a <__udivmodsi4_ep>

00004880 <__udivmodsi4_loop>:
    4880:	aa 1f       	adc	r26, r26
    4882:	bb 1f       	adc	r27, r27
    4884:	ee 1f       	adc	r30, r30
    4886:	ff 1f       	adc	r31, r31
    4888:	a2 17       	cp	r26, r18
    488a:	b3 07       	cpc	r27, r19
    488c:	e4 07       	cpc	r30, r20
    488e:	f5 07       	cpc	r31, r21
    4890:	20 f0       	brcs	.+8      	; 0x489a <__udivmodsi4_ep>
    4892:	a2 1b       	sub	r26, r18
    4894:	b3 0b       	sbc	r27, r19
    4896:	e4 0b       	sbc	r30, r20
    4898:	f5 0b       	sbc	r31, r21

0000489a <__udivmodsi4_ep>:
    489a:	66 1f       	adc	r22, r22
    489c:	77 1f       	adc	r23, r23
    489e:	88 1f       	adc	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	1a 94       	dec	r1
    48a4:	69 f7       	brne	.-38     	; 0x4880 <__udivmodsi4_loop>
    48a6:	60 95       	com	r22
    48a8:	70 95       	com	r23
    48aa:	80 95       	com	r24
    48ac:	90 95       	com	r25
    48ae:	9b 01       	movw	r18, r22
    48b0:	ac 01       	movw	r20, r24
    48b2:	bd 01       	movw	r22, r26
    48b4:	cf 01       	movw	r24, r30
    48b6:	08 95       	ret

000048b8 <__tablejump2__>:
    48b8:	ee 0f       	add	r30, r30
    48ba:	ff 1f       	adc	r31, r31
    48bc:	05 90       	lpm	r0, Z+
    48be:	f4 91       	lpm	r31, Z
    48c0:	e0 2d       	mov	r30, r0
    48c2:	09 94       	ijmp

000048c4 <__umulhisi3>:
    48c4:	a2 9f       	mul	r26, r18
    48c6:	b0 01       	movw	r22, r0
    48c8:	b3 9f       	mul	r27, r19
    48ca:	c0 01       	movw	r24, r0
    48cc:	a3 9f       	mul	r26, r19
    48ce:	70 0d       	add	r23, r0
    48d0:	81 1d       	adc	r24, r1
    48d2:	11 24       	eor	r1, r1
    48d4:	91 1d       	adc	r25, r1
    48d6:	b2 9f       	mul	r27, r18
    48d8:	70 0d       	add	r23, r0
    48da:	81 1d       	adc	r24, r1
    48dc:	11 24       	eor	r1, r1
    48de:	91 1d       	adc	r25, r1
    48e0:	08 95       	ret

000048e2 <__udivmodhi4>:
    48e2:	aa 1b       	sub	r26, r26
    48e4:	bb 1b       	sub	r27, r27
    48e6:	51 e1       	ldi	r21, 0x11	; 17
    48e8:	07 c0       	rjmp	.+14     	; 0x48f8 <__udivmodhi4_ep>

000048ea <__udivmodhi4_loop>:
    48ea:	aa 1f       	adc	r26, r26
    48ec:	bb 1f       	adc	r27, r27
    48ee:	a6 17       	cp	r26, r22
    48f0:	b7 07       	cpc	r27, r23
    48f2:	10 f0       	brcs	.+4      	; 0x48f8 <__udivmodhi4_ep>
    48f4:	a6 1b       	sub	r26, r22
    48f6:	b7 0b       	sbc	r27, r23

000048f8 <__udivmodhi4_ep>:
    48f8:	88 1f       	adc	r24, r24
    48fa:	99 1f       	adc	r25, r25
    48fc:	5a 95       	dec	r21
    48fe:	a9 f7       	brne	.-22     	; 0x48ea <__udivmodhi4_loop>
    4900:	80 95       	com	r24
    4902:	90 95       	com	r25
    4904:	bc 01       	movw	r22, r24
    4906:	cd 01       	movw	r24, r26
    4908:	08 95       	ret

0000490a <malloc>:
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	82 30       	cpi	r24, 0x02	; 2
    4914:	91 05       	cpc	r25, r1
    4916:	10 f4       	brcc	.+4      	; 0x491c <malloc+0x12>
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	e0 91 35 06 	lds	r30, 0x0635	; 0x800635 <__flp>
    4920:	f0 91 36 06 	lds	r31, 0x0636	; 0x800636 <__flp+0x1>
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	a0 e0       	ldi	r26, 0x00	; 0
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	30 97       	sbiw	r30, 0x00	; 0
    492e:	19 f1       	breq	.+70     	; 0x4976 <malloc+0x6c>
    4930:	40 81       	ld	r20, Z
    4932:	51 81       	ldd	r21, Z+1	; 0x01
    4934:	02 81       	ldd	r16, Z+2	; 0x02
    4936:	13 81       	ldd	r17, Z+3	; 0x03
    4938:	48 17       	cp	r20, r24
    493a:	59 07       	cpc	r21, r25
    493c:	c8 f0       	brcs	.+50     	; 0x4970 <malloc+0x66>
    493e:	84 17       	cp	r24, r20
    4940:	95 07       	cpc	r25, r21
    4942:	69 f4       	brne	.+26     	; 0x495e <malloc+0x54>
    4944:	10 97       	sbiw	r26, 0x00	; 0
    4946:	31 f0       	breq	.+12     	; 0x4954 <malloc+0x4a>
    4948:	12 96       	adiw	r26, 0x02	; 2
    494a:	0c 93       	st	X, r16
    494c:	12 97       	sbiw	r26, 0x02	; 2
    494e:	13 96       	adiw	r26, 0x03	; 3
    4950:	1c 93       	st	X, r17
    4952:	27 c0       	rjmp	.+78     	; 0x49a2 <malloc+0x98>
    4954:	00 93 35 06 	sts	0x0635, r16	; 0x800635 <__flp>
    4958:	10 93 36 06 	sts	0x0636, r17	; 0x800636 <__flp+0x1>
    495c:	22 c0       	rjmp	.+68     	; 0x49a2 <malloc+0x98>
    495e:	21 15       	cp	r18, r1
    4960:	31 05       	cpc	r19, r1
    4962:	19 f0       	breq	.+6      	; 0x496a <malloc+0x60>
    4964:	42 17       	cp	r20, r18
    4966:	53 07       	cpc	r21, r19
    4968:	18 f4       	brcc	.+6      	; 0x4970 <malloc+0x66>
    496a:	9a 01       	movw	r18, r20
    496c:	bd 01       	movw	r22, r26
    496e:	ef 01       	movw	r28, r30
    4970:	df 01       	movw	r26, r30
    4972:	f8 01       	movw	r30, r16
    4974:	db cf       	rjmp	.-74     	; 0x492c <malloc+0x22>
    4976:	21 15       	cp	r18, r1
    4978:	31 05       	cpc	r19, r1
    497a:	f9 f0       	breq	.+62     	; 0x49ba <malloc+0xb0>
    497c:	28 1b       	sub	r18, r24
    497e:	39 0b       	sbc	r19, r25
    4980:	24 30       	cpi	r18, 0x04	; 4
    4982:	31 05       	cpc	r19, r1
    4984:	80 f4       	brcc	.+32     	; 0x49a6 <malloc+0x9c>
    4986:	8a 81       	ldd	r24, Y+2	; 0x02
    4988:	9b 81       	ldd	r25, Y+3	; 0x03
    498a:	61 15       	cp	r22, r1
    498c:	71 05       	cpc	r23, r1
    498e:	21 f0       	breq	.+8      	; 0x4998 <malloc+0x8e>
    4990:	fb 01       	movw	r30, r22
    4992:	93 83       	std	Z+3, r25	; 0x03
    4994:	82 83       	std	Z+2, r24	; 0x02
    4996:	04 c0       	rjmp	.+8      	; 0x49a0 <malloc+0x96>
    4998:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <__flp+0x1>
    499c:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <__flp>
    49a0:	fe 01       	movw	r30, r28
    49a2:	32 96       	adiw	r30, 0x02	; 2
    49a4:	44 c0       	rjmp	.+136    	; 0x4a2e <malloc+0x124>
    49a6:	fe 01       	movw	r30, r28
    49a8:	e2 0f       	add	r30, r18
    49aa:	f3 1f       	adc	r31, r19
    49ac:	81 93       	st	Z+, r24
    49ae:	91 93       	st	Z+, r25
    49b0:	22 50       	subi	r18, 0x02	; 2
    49b2:	31 09       	sbc	r19, r1
    49b4:	39 83       	std	Y+1, r19	; 0x01
    49b6:	28 83       	st	Y, r18
    49b8:	3a c0       	rjmp	.+116    	; 0x4a2e <malloc+0x124>
    49ba:	20 91 33 06 	lds	r18, 0x0633	; 0x800633 <__brkval>
    49be:	30 91 34 06 	lds	r19, 0x0634	; 0x800634 <__brkval+0x1>
    49c2:	23 2b       	or	r18, r19
    49c4:	41 f4       	brne	.+16     	; 0x49d6 <malloc+0xcc>
    49c6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    49ca:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    49ce:	30 93 34 06 	sts	0x0634, r19	; 0x800634 <__brkval+0x1>
    49d2:	20 93 33 06 	sts	0x0633, r18	; 0x800633 <__brkval>
    49d6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    49da:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    49de:	21 15       	cp	r18, r1
    49e0:	31 05       	cpc	r19, r1
    49e2:	41 f4       	brne	.+16     	; 0x49f4 <malloc+0xea>
    49e4:	2d b7       	in	r18, 0x3d	; 61
    49e6:	3e b7       	in	r19, 0x3e	; 62
    49e8:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    49ec:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    49f0:	24 1b       	sub	r18, r20
    49f2:	35 0b       	sbc	r19, r21
    49f4:	e0 91 33 06 	lds	r30, 0x0633	; 0x800633 <__brkval>
    49f8:	f0 91 34 06 	lds	r31, 0x0634	; 0x800634 <__brkval+0x1>
    49fc:	e2 17       	cp	r30, r18
    49fe:	f3 07       	cpc	r31, r19
    4a00:	a0 f4       	brcc	.+40     	; 0x4a2a <malloc+0x120>
    4a02:	2e 1b       	sub	r18, r30
    4a04:	3f 0b       	sbc	r19, r31
    4a06:	28 17       	cp	r18, r24
    4a08:	39 07       	cpc	r19, r25
    4a0a:	78 f0       	brcs	.+30     	; 0x4a2a <malloc+0x120>
    4a0c:	ac 01       	movw	r20, r24
    4a0e:	4e 5f       	subi	r20, 0xFE	; 254
    4a10:	5f 4f       	sbci	r21, 0xFF	; 255
    4a12:	24 17       	cp	r18, r20
    4a14:	35 07       	cpc	r19, r21
    4a16:	48 f0       	brcs	.+18     	; 0x4a2a <malloc+0x120>
    4a18:	4e 0f       	add	r20, r30
    4a1a:	5f 1f       	adc	r21, r31
    4a1c:	50 93 34 06 	sts	0x0634, r21	; 0x800634 <__brkval+0x1>
    4a20:	40 93 33 06 	sts	0x0633, r20	; 0x800633 <__brkval>
    4a24:	81 93       	st	Z+, r24
    4a26:	91 93       	st	Z+, r25
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <malloc+0x124>
    4a2a:	e0 e0       	ldi	r30, 0x00	; 0
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	cf 01       	movw	r24, r30
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	08 95       	ret

00004a3a <free>:
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	00 97       	sbiw	r24, 0x00	; 0
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <free+0xa>
    4a42:	81 c0       	rjmp	.+258    	; 0x4b46 <free+0x10c>
    4a44:	fc 01       	movw	r30, r24
    4a46:	32 97       	sbiw	r30, 0x02	; 2
    4a48:	13 82       	std	Z+3, r1	; 0x03
    4a4a:	12 82       	std	Z+2, r1	; 0x02
    4a4c:	a0 91 35 06 	lds	r26, 0x0635	; 0x800635 <__flp>
    4a50:	b0 91 36 06 	lds	r27, 0x0636	; 0x800636 <__flp+0x1>
    4a54:	10 97       	sbiw	r26, 0x00	; 0
    4a56:	81 f4       	brne	.+32     	; 0x4a78 <free+0x3e>
    4a58:	20 81       	ld	r18, Z
    4a5a:	31 81       	ldd	r19, Z+1	; 0x01
    4a5c:	82 0f       	add	r24, r18
    4a5e:	93 1f       	adc	r25, r19
    4a60:	20 91 33 06 	lds	r18, 0x0633	; 0x800633 <__brkval>
    4a64:	30 91 34 06 	lds	r19, 0x0634	; 0x800634 <__brkval+0x1>
    4a68:	28 17       	cp	r18, r24
    4a6a:	39 07       	cpc	r19, r25
    4a6c:	51 f5       	brne	.+84     	; 0x4ac2 <free+0x88>
    4a6e:	f0 93 34 06 	sts	0x0634, r31	; 0x800634 <__brkval+0x1>
    4a72:	e0 93 33 06 	sts	0x0633, r30	; 0x800633 <__brkval>
    4a76:	67 c0       	rjmp	.+206    	; 0x4b46 <free+0x10c>
    4a78:	ed 01       	movw	r28, r26
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	ce 17       	cp	r28, r30
    4a80:	df 07       	cpc	r29, r31
    4a82:	40 f4       	brcc	.+16     	; 0x4a94 <free+0x5a>
    4a84:	4a 81       	ldd	r20, Y+2	; 0x02
    4a86:	5b 81       	ldd	r21, Y+3	; 0x03
    4a88:	9e 01       	movw	r18, r28
    4a8a:	41 15       	cp	r20, r1
    4a8c:	51 05       	cpc	r21, r1
    4a8e:	f1 f0       	breq	.+60     	; 0x4acc <free+0x92>
    4a90:	ea 01       	movw	r28, r20
    4a92:	f5 cf       	rjmp	.-22     	; 0x4a7e <free+0x44>
    4a94:	d3 83       	std	Z+3, r29	; 0x03
    4a96:	c2 83       	std	Z+2, r28	; 0x02
    4a98:	40 81       	ld	r20, Z
    4a9a:	51 81       	ldd	r21, Z+1	; 0x01
    4a9c:	84 0f       	add	r24, r20
    4a9e:	95 1f       	adc	r25, r21
    4aa0:	c8 17       	cp	r28, r24
    4aa2:	d9 07       	cpc	r29, r25
    4aa4:	59 f4       	brne	.+22     	; 0x4abc <free+0x82>
    4aa6:	88 81       	ld	r24, Y
    4aa8:	99 81       	ldd	r25, Y+1	; 0x01
    4aaa:	84 0f       	add	r24, r20
    4aac:	95 1f       	adc	r25, r21
    4aae:	02 96       	adiw	r24, 0x02	; 2
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	80 83       	st	Z, r24
    4ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab8:	93 83       	std	Z+3, r25	; 0x03
    4aba:	82 83       	std	Z+2, r24	; 0x02
    4abc:	21 15       	cp	r18, r1
    4abe:	31 05       	cpc	r19, r1
    4ac0:	29 f4       	brne	.+10     	; 0x4acc <free+0x92>
    4ac2:	f0 93 36 06 	sts	0x0636, r31	; 0x800636 <__flp+0x1>
    4ac6:	e0 93 35 06 	sts	0x0635, r30	; 0x800635 <__flp>
    4aca:	3d c0       	rjmp	.+122    	; 0x4b46 <free+0x10c>
    4acc:	e9 01       	movw	r28, r18
    4ace:	fb 83       	std	Y+3, r31	; 0x03
    4ad0:	ea 83       	std	Y+2, r30	; 0x02
    4ad2:	49 91       	ld	r20, Y+
    4ad4:	59 91       	ld	r21, Y+
    4ad6:	c4 0f       	add	r28, r20
    4ad8:	d5 1f       	adc	r29, r21
    4ada:	ec 17       	cp	r30, r28
    4adc:	fd 07       	cpc	r31, r29
    4ade:	61 f4       	brne	.+24     	; 0x4af8 <free+0xbe>
    4ae0:	80 81       	ld	r24, Z
    4ae2:	91 81       	ldd	r25, Z+1	; 0x01
    4ae4:	84 0f       	add	r24, r20
    4ae6:	95 1f       	adc	r25, r21
    4ae8:	02 96       	adiw	r24, 0x02	; 2
    4aea:	e9 01       	movw	r28, r18
    4aec:	99 83       	std	Y+1, r25	; 0x01
    4aee:	88 83       	st	Y, r24
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	9b 83       	std	Y+3, r25	; 0x03
    4af6:	8a 83       	std	Y+2, r24	; 0x02
    4af8:	e0 e0       	ldi	r30, 0x00	; 0
    4afa:	f0 e0       	ldi	r31, 0x00	; 0
    4afc:	12 96       	adiw	r26, 0x02	; 2
    4afe:	8d 91       	ld	r24, X+
    4b00:	9c 91       	ld	r25, X
    4b02:	13 97       	sbiw	r26, 0x03	; 3
    4b04:	00 97       	sbiw	r24, 0x00	; 0
    4b06:	19 f0       	breq	.+6      	; 0x4b0e <free+0xd4>
    4b08:	fd 01       	movw	r30, r26
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	f7 cf       	rjmp	.-18     	; 0x4afc <free+0xc2>
    4b0e:	8d 91       	ld	r24, X+
    4b10:	9c 91       	ld	r25, X
    4b12:	11 97       	sbiw	r26, 0x01	; 1
    4b14:	9d 01       	movw	r18, r26
    4b16:	2e 5f       	subi	r18, 0xFE	; 254
    4b18:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1a:	82 0f       	add	r24, r18
    4b1c:	93 1f       	adc	r25, r19
    4b1e:	20 91 33 06 	lds	r18, 0x0633	; 0x800633 <__brkval>
    4b22:	30 91 34 06 	lds	r19, 0x0634	; 0x800634 <__brkval+0x1>
    4b26:	28 17       	cp	r18, r24
    4b28:	39 07       	cpc	r19, r25
    4b2a:	69 f4       	brne	.+26     	; 0x4b46 <free+0x10c>
    4b2c:	30 97       	sbiw	r30, 0x00	; 0
    4b2e:	29 f4       	brne	.+10     	; 0x4b3a <free+0x100>
    4b30:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <__flp+0x1>
    4b34:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <__flp>
    4b38:	02 c0       	rjmp	.+4      	; 0x4b3e <free+0x104>
    4b3a:	13 82       	std	Z+3, r1	; 0x03
    4b3c:	12 82       	std	Z+2, r1	; 0x02
    4b3e:	b0 93 34 06 	sts	0x0634, r27	; 0x800634 <__brkval+0x1>
    4b42:	a0 93 33 06 	sts	0x0633, r26	; 0x800633 <__brkval>
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	08 95       	ret

00004b4c <eeprom_read_byte>:
    4b4c:	e1 99       	sbic	0x1c, 1	; 28
    4b4e:	fe cf       	rjmp	.-4      	; 0x4b4c <eeprom_read_byte>
    4b50:	9f bb       	out	0x1f, r25	; 31
    4b52:	8e bb       	out	0x1e, r24	; 30
    4b54:	e0 9a       	sbi	0x1c, 0	; 28
    4b56:	99 27       	eor	r25, r25
    4b58:	8d b3       	in	r24, 0x1d	; 29
    4b5a:	08 95       	ret

00004b5c <eeprom_read_dword>:
    4b5c:	a6 e1       	ldi	r26, 0x16	; 22
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	44 e0       	ldi	r20, 0x04	; 4
    4b62:	50 e0       	ldi	r21, 0x00	; 0
    4b64:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <eeprom_read_blraw>

00004b68 <eeprom_read_word>:
    4b68:	a8 e1       	ldi	r26, 0x18	; 24
    4b6a:	b0 e0       	ldi	r27, 0x00	; 0
    4b6c:	42 e0       	ldi	r20, 0x02	; 2
    4b6e:	50 e0       	ldi	r21, 0x00	; 0
    4b70:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <eeprom_read_blraw>

00004b74 <eeprom_update_byte>:
    4b74:	26 2f       	mov	r18, r22

00004b76 <eeprom_update_r18>:
    4b76:	e1 99       	sbic	0x1c, 1	; 28
    4b78:	fe cf       	rjmp	.-4      	; 0x4b76 <eeprom_update_r18>
    4b7a:	9f bb       	out	0x1f, r25	; 31
    4b7c:	8e bb       	out	0x1e, r24	; 30
    4b7e:	e0 9a       	sbi	0x1c, 0	; 28
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	0d b2       	in	r0, 0x1d	; 29
    4b84:	02 16       	cp	r0, r18
    4b86:	31 f0       	breq	.+12     	; 0x4b94 <eeprom_update_r18+0x1e>
    4b88:	2d bb       	out	0x1d, r18	; 29
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	f8 94       	cli
    4b8e:	e2 9a       	sbi	0x1c, 2	; 28
    4b90:	e1 9a       	sbi	0x1c, 1	; 28
    4b92:	0f be       	out	0x3f, r0	; 63
    4b94:	08 95       	ret

00004b96 <eeprom_update_dword>:
    4b96:	03 96       	adiw	r24, 0x03	; 3
    4b98:	27 2f       	mov	r18, r23
    4b9a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <eeprom_update_r18>
    4b9e:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <eeprom_update_byte>
    4ba2:	25 2f       	mov	r18, r21
    4ba4:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <eeprom_update_r18>
    4ba8:	24 2f       	mov	r18, r20
    4baa:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <eeprom_update_r18>

00004bae <eeprom_update_word>:
    4bae:	01 96       	adiw	r24, 0x01	; 1
    4bb0:	27 2f       	mov	r18, r23
    4bb2:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <eeprom_update_r18>
    4bb6:	0c 94 ba 25 	jmp	0x4b74	; 0x4b74 <eeprom_update_byte>

00004bba <eeprom_write_dword>:
    4bba:	24 2f       	mov	r18, r20
    4bbc:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <eeprom_write_r18>
    4bc0:	25 2f       	mov	r18, r21
    4bc2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <eeprom_write_r18>
    4bc6:	0c 94 e5 25 	jmp	0x4bca	; 0x4bca <eeprom_write_word>

00004bca <eeprom_write_word>:
    4bca:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <eeprom_write_byte>
    4bce:	27 2f       	mov	r18, r23
    4bd0:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <eeprom_write_r18>

00004bd4 <eeprom_read_block>:
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22

00004bd8 <eeprom_read_blraw>:
    4bd8:	fc 01       	movw	r30, r24
    4bda:	e1 99       	sbic	0x1c, 1	; 28
    4bdc:	fe cf       	rjmp	.-4      	; 0x4bda <eeprom_read_blraw+0x2>
    4bde:	06 c0       	rjmp	.+12     	; 0x4bec <eeprom_read_blraw+0x14>
    4be0:	ff bb       	out	0x1f, r31	; 31
    4be2:	ee bb       	out	0x1e, r30	; 30
    4be4:	e0 9a       	sbi	0x1c, 0	; 28
    4be6:	31 96       	adiw	r30, 0x01	; 1
    4be8:	0d b2       	in	r0, 0x1d	; 29
    4bea:	0d 92       	st	X+, r0
    4bec:	41 50       	subi	r20, 0x01	; 1
    4bee:	50 40       	sbci	r21, 0x00	; 0
    4bf0:	b8 f7       	brcc	.-18     	; 0x4be0 <eeprom_read_blraw+0x8>
    4bf2:	08 95       	ret

00004bf4 <eeprom_write_byte>:
    4bf4:	26 2f       	mov	r18, r22

00004bf6 <eeprom_write_r18>:
    4bf6:	e1 99       	sbic	0x1c, 1	; 28
    4bf8:	fe cf       	rjmp	.-4      	; 0x4bf6 <eeprom_write_r18>
    4bfa:	9f bb       	out	0x1f, r25	; 31
    4bfc:	8e bb       	out	0x1e, r24	; 30
    4bfe:	2d bb       	out	0x1d, r18	; 29
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	f8 94       	cli
    4c04:	e2 9a       	sbi	0x1c, 2	; 28
    4c06:	e1 9a       	sbi	0x1c, 1	; 28
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	01 96       	adiw	r24, 0x01	; 1
    4c0c:	08 95       	ret

00004c0e <_exit>:
    4c0e:	f8 94       	cli

00004c10 <__stop_program>:
    4c10:	ff cf       	rjmp	.-2      	; 0x4c10 <__stop_program>
