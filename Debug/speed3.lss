
speed3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000039e4  00003a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000043d  008000f6  008000f6  00003b0e  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00003b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00003bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050e4  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7b  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7b  00000000  00000000  00009d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  0000bb1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec0  00000000  00000000  0000c694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005332  00000000  00000000  0000d554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00012886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__ctors_end>
       4:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
       8:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_2>
       c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      10:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_4>
      14:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      18:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      1c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      20:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      24:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_9>
      28:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_10>
      2c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      30:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      34:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      38:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      3c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      40:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      44:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      48:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      4c:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>
      50:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__bad_interrupt>

00000054 <Arial_Narrow18x32>:
      54:	12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80     ................
      64:	3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00     ?>..|...p.......
      74:	e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00     ................
      84:	70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff     p>..|...?.......
      94:	03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff     ................
      a4:	ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00     .........?>..|..
      b4:	00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00     .p..............
      c4:	00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01     .........p>..|..
      d4:	80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00     .?..............
      e4:	00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc     ................
      f4:	01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07     ..?>..|...p.....
     104:	00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e     ................
     114:	00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0     ..p>..|...?.....
     124:	ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00     ................
     134:	c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c     ...........?>..|
     144:	0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0     ...p............
     154:	07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c     ...........p>..|
     164:	fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00     ...?............
     174:	00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff     ................
     184:	1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00     ....?>..|...p...
     194:	f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00     ................
     1a4:	f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff     ....p>..|...?...
     1b4:	1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe     ................
     1c4:	7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00     .............?>.
     1d4:	00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00     .|...p..........
     1e4:	00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00     .............p>.
     1f4:	00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe     .|...?..........
     204:	7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8     ................
     214:	ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f     ......?>..|...p.
     224:	00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f     ................
     234:	00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8     ......p>..|...?.
     244:	ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 12     ................
     254:	00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f     ...............?
     264:	3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0     >..|...p........
     274:	07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70     ...............p
     284:	3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03     >..|...?........
     294:	00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0 ff ff     ................
     2a4:	07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00     ........?>..|...
     2b4:	70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07 00 00     p...............
     2c4:	e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc 01 80     ........p>..|...
     2d4:	3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00     ?...............
     2e4:	00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f fc 01     ................
     2f4:	80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0 07 00     .?>..|...p......
     304:	00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0 0e 00     ................
     314:	00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f e0 ff     .p>..|...?......
     324:	ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f 00 c0     ................
     334:	ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00 7c 0e     ..........?>..|.
     344:	00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00 e0 07     ..p.............
     354:	00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00 7c fc     ..........p>..|.
     364:	01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f 00 00     ..?.............
     374:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     384:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     394:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     3a4:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     3b4:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     3c4:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     3d4:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     3e4:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     3f4:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     404:	00 00 00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff     ................
     414:	ff 1f fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00     .....?>..|...p..
     424:	00 f0 07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00     ................
     434:	00 f0 0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff     .....p>..|...?..
     444:	ff 1f e0 ff ff 03 00 fe 7f 00 00 00 00 00 09 00     ................
	...
     460:	00 00 f0 00 00 00 f0 00 00 00 f0 00 00 00 00 00     ................
	...
     498:	00 00 00 12 00 fe 7f 00 c0 ff ff 07 f8 ff ff 1f     ................
     4a8:	fc 01 80 3f 3e 00 00 7c 0e 00 00 70 0f 00 00 f0     ...?>..|...p....
     4b8:	07 00 00 e0 07 00 00 e0 07 00 00 e0 0f 00 00 f0     ................
     4c8:	0e 00 00 70 3e 00 00 7c fc 01 80 3f f8 ff ff 1f     ...p>..|...?....
     4d8:	e0 ff ff 03 00 fe 7f 00 00 00 00 00 12 00 fe 7f     ................
     4e8:	00 c0 ff ff 07 f8 ff ff 1f fc 01 80 3f 3e 00 00     ............?>..
     4f8:	7c 0e 00 00 70 0f 00 00 f0 07 00 00 e0 07 00 00     |...p...........
     508:	e0 07 00 00 e0 0f 00 00 f0 0e 00 00 70 3e 00 00     ............p>..
     518:	7c fc 01 80 3f f8 ff ff 1f e0 ff ff 03 00 fe 7f     |...?...........
     528:	00 00 00 00 00 12 00 00 00 00 00 00 00 00 00 00     ................
     538:	00 00 00 0e 00 00 00 07 00 00 80 03 00 00 c0 03     ................
     548:	00 00 e0 01 00 00 f8 00 00 00 fe ff ff ff ff ff     ................
     558:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     574:	00 00 12 c0 01 00 e0 f0 01 00 f8 fc 01 00 fe 3c     ...............<
     584:	00 00 ff 1e 00 80 ef 0f 00 c0 e7 07 00 e0 e1 07     ................
     594:	00 f0 e0 07 00 78 e0 07 00 3c e0 07 00 1f e0 0f     .....x...<......
     5a4:	80 0f e0 1e c0 07 e0 3e f8 03 e0 fc ff 00 e0 f0     .......>........
     5b4:	7f 00 e0 c0 0f 00 e0 00 00 00 00 12 c0 00 80 03     ................
     5c4:	f0 00 80 0f fc 00 80 1f 3e 00 00 3e 1e 00 00 78     ........>..>...x
     5d4:	0f 00 00 f0 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0     ................
     5e4:	07 e0 00 e0 0f f0 00 e0 0e f8 01 70 3e fc 03 78     ...........p>..x
     5f4:	fc bf 07 3e f8 9f ff 1f e0 07 fe 0f 00 00 f8 03     ...>............
     604:	00 00 00 00 12 00 00 f0 00 00 00 fc 00 00 00 ff     ................
     614:	00 00 c0 ff 00 00 f0 e7 00 00 f8 e1 00 00 7e e0     ..............~.
     624:	00 80 1f e0 00 e0 07 e0 00 f8 01 e0 00 7e 00 e0     .............~..
     634:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 e0     ................
     644:	00 00 00 e0 00 00 00 e0 00 00 00 e0 00 12 00 c0     ................
     654:	80 03 00 ff 80 0f f8 ff 81 1f ff ff 00 3e ff 78     .............>.x
     664:	00 78 07 38 00 f0 07 1c 00 e0 07 1c 00 e0 07 1c     .x.8............
     674:	00 e0 07 1c 00 e0 07 3c 00 f0 07 38 00 70 07 78     .......<...8.p.x
     684:	00 7c 07 f0 01 3f 07 e0 ff 1f 07 c0 ff 07 00 00     .|...?..........
     694:	fe 01 00 00 00 00 12 00 fc 7f 00 c0 ff ff 07 f0     ................
     6a4:	ff ff 0f f8 80 07 3e 3c c0 01 78 1e e0 00 70 0e     ......><..x...p.
     6b4:	70 00 f0 07 70 00 e0 07 70 00 e0 07 70 00 e0 07     p...p...p...p...
     6c4:	70 00 e0 0f f0 00 f0 0e e0 01 78 3e c0 07 3e fc     p.........x>..>.
     6d4:	80 ff 1f f8 00 ff 0f e0 00 fc 01 00 00 00 00 12     ................
     6e4:	07 00 00 00 07 00 00 00 07 00 00 00 07 00 00 00     ................
     6f4:	07 00 00 f8 07 00 c0 ff 07 00 fc ff 07 80 ff 07     ................
     704:	07 e0 3f 00 07 f8 07 00 07 fe 00 00 87 1f 00 00     ..?.............
     714:	e7 07 00 00 f7 01 00 00 7f 00 00 00 1f 00 00 00     ................
     724:	0f 00 00 00 00 00 00 00 12 00 00 f8 03 e0 07 fe     ................
     734:	0f f8 1f ff 1f fc bf 0f 3e 3e fc 03 78 0e f0 01     ........>>..x...
     744:	70 07 e0 00 e0 07 e0 00 e0 07 e0 00 e0 07 e0 00     p...............
     754:	e0 0f e0 00 e0 0e f0 01 70 3e fc 03 78 fc bf 0f     ........p>..x...
     764:	3e f8 1f ff 1f e0 07 fe 0f 00 00 f8 03 00 00 00     >...............
     774:	00 12 c0 3f 00 07 f0 ff 00 1f f8 ff 01 3f 7c e0     ...?.........?|.
     784:	03 7c 1e 80 07 70 0f 00 0f f0 0f 00 0e e0 07 00     .|...p..........
     794:	0e e0 07 00 0e e0 07 00 0e e0 07 00 0e 70 0e 00     .............p..
     7a4:	07 78 1e 80 03 3c 7c e0 81 1f f0 ff ff 0f e0 ff     .x...<|.........
     7b4:	ff 03 00 fe 3f 00 00 00 00 00                       ....?.....

000007be <arrowLeft>:
	...
     7d2:	80 c0 e0 f0 f8 fc fe ff ff ff 00 00 00 00 00 00     ................
	...
     826:	80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff ff     ................
     836:	ff ff c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     846:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     856:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     866:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     876:	00 00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff     ................
     886:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     896:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8a6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8c6:	ff ff ff ff ff ff ff ff ff ff ff ff 08 1c 3e 7f     ..............>.
     8d6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8f6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     906:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     916:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     926:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 03 07     ................
     936:	0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
     946:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     956:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     966:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     976:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     986:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     996:	00 01 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     9a6:	ff ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9b6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9c6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9d6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
     9fa:	00 01 03 07 0f 1f 3f 7f 7f 7f 00 00 00 00 00 00     ......?.........
	...

00000a42 <arrowRight>:
	...
     a7e:	00 00 ff ff ff fe fc f8 f0 e0 c0 80 00 00 00 00     ................
	...
     a9e:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     aae:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     abe:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     ace:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff     ................
     ade:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
     afa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b0a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b1a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b2a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b3a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b4a:	ff fe fc f8 f0 e0 c0 80 00 00 00 00 ff ff ff ff     ................
     b5a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b6a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b7a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b8a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b9a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     baa:	ff ff ff ff 7f 3e 1c 08 ff ff ff ff ff ff ff ff     .....>..........
     bba:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bca:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bda:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bea:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bfa:	ff ff ff ff ff ff ff ff 7f 3f 1f 0f 07 03 01 00     .........?......
     c0a:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c1a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c2a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c3a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c4a:	01 01 ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
     c5a:	07 03 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ca6:	00 00 7f 7f 7f 3f 1f 0f 07 03 01 00 00 00 00 00     .....?..........
	...

00000cc6 <skull>:
     cc6:	00 80 80 80 80 84 fc fe fe fe fe fe fe fe fe fc     ................
	...
     cde:	00 00 80 c0 e0 f0 f8 fc fc fe fe ff ff ff ff ff     ................
     cee:	ff ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8     ................
     cfe:	f0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 fc fe     ................
     d0e:	fe fe fe fe fe fe fe fc 80 80 80 80 80 00 1f 3f     ...............?
     d1e:	3f 3f 3f 3f 7f ff ff ff ff ff ff ff ff f9 f0 e0     ????............
     d2e:	c0 80 00 00 00 00 00 fe ff ff ff ff ff ff ff ff     ................
     d3e:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d4e:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
     d5e:	80 c0 e0 f0 f9 ff ff ff ff ff ff ff ff 7f 3f 3f     ..............??
     d6e:	3f 3f 3f 1f 00 00 00 00 00 00 00 00 01 03 07 0f     ???.............
     d7e:	1f 3f 7f 7f 7f 7f 7f 7f 7f 7e 00 00 00 7f ff ff     .?.......~......
     d8e:	ff ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff     ...?.......?....
     d9e:	ff ff 3f 1f 1f 1f 1f 1f 1f 1f 3f ff ff ff ff ff     ..?.......?.....
     dae:	7f 00 00 00 7e 7f 7f 7f 7f 7f 7f 7f 3f 1f 0f 07     ....~.......?...
     dbe:	03 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dce:	00 00 00 00 00 00 00 80 c0 e0 f0 f0 f0 f0 f0 f0     ................
     dde:	f0 f0 00 00 01 01 ff ff ff f0 e0 e0 e0 e0 e0 e0     ................
     dee:	e0 f0 0f 0f 0f 0f 0f 0f f0 e0 e0 e0 e0 e0 e0 e0     ................
     dfe:	f0 ff ff ff 01 01 00 00 f0 f0 f0 f0 f0 f0 f0 f0     ................
     e0e:	e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e1e:	00 00 c0 e0 e0 e0 e0 e0 f0 f8 fc fe ff ff ff ff     ................
     e2e:	ff ff 7f 3f 1f 0f 07 03 00 00 00 00 03 03 03 1f     ...?............
     e3e:	1f 1f ff ff ff ff ff ff fc f8 f8 f8 f8 fc ff ff     ................
     e4e:	ff ff ff ff 1f 1f 1f 03 03 03 00 00 00 00 03 07     ................
     e5e:	0f 1f 3f 7f ff ff ff ff ff ff fe fc f8 f0 e0 e0     ..?.............
     e6e:	e0 e0 e0 c0 00 00 00 00 07 0f 0f 0f 0f 0f ff ff     ................
     e7e:	ff ff ff ff ff ff ff fc 00 00 00 00 00 00 00 00     ................
     e8e:	00 00 00 00 00 3e 7e 7e f0 f0 e0 87 87 83 03 03     .....>~~........
     e9e:	03 03 03 03 83 87 87 e0 f0 f0 7e 7e 3e 00 00 00     ..........~~>...
	...
     eb6:	00 00 fc ff ff ff ff ff ff ff ff ff 0f 0f 0f 0f     ................
     ec6:	0f 07 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
     ed6:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     ee6:	00 00 00 00 00 00 00 01 03 07 0f 0f 0f 0f 0f 0f     ................
     ef6:	0f 0f 0f 0f 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
     f0e:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...

00000f20 <Font5x8>:
     f20:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
     f30:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
     f40:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
     f50:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
     f60:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
     f70:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
     f80:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
     f90:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
     fa0:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
     fb0:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     fc0:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     fd0:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     fe0:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     ff0:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
    1000:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
    1010:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
    1020:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
    1030:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
    1040:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
    1050:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
    1060:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
    1070:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
    1080:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
    1090:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
    10a0:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
    10b0:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
    10c0:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
    10d0:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
    10e0:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
    10f0:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
    1100:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
    1110:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
    1120:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
    1130:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
    1140:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
    1150:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

00001160 <__ctors_end>:
    1160:	11 24       	eor	r1, r1
    1162:	1f be       	out	0x3f, r1	; 63
    1164:	cf e5       	ldi	r28, 0x5F	; 95
    1166:	d8 e0       	ldi	r29, 0x08	; 8
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	cd bf       	out	0x3d, r28	; 61

0000116c <__do_copy_data>:
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	a0 e6       	ldi	r26, 0x60	; 96
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e4 ee       	ldi	r30, 0xE4	; 228
    1174:	f9 e3       	ldi	r31, 0x39	; 57
    1176:	02 c0       	rjmp	.+4      	; 0x117c <__do_copy_data+0x10>
    1178:	05 90       	lpm	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	a6 3f       	cpi	r26, 0xF6	; 246
    117e:	b1 07       	cpc	r27, r17
    1180:	d9 f7       	brne	.-10     	; 0x1178 <__do_copy_data+0xc>

00001182 <__do_clear_bss>:
    1182:	25 e0       	ldi	r18, 0x05	; 5
    1184:	a6 ef       	ldi	r26, 0xF6	; 246
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	01 c0       	rjmp	.+2      	; 0x118c <.do_clear_bss_start>

0000118a <.do_clear_bss_loop>:
    118a:	1d 92       	st	X+, r1

0000118c <.do_clear_bss_start>:
    118c:	a3 33       	cpi	r26, 0x33	; 51
    118e:	b2 07       	cpc	r27, r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <.do_clear_bss_loop>
    1192:	0e 94 ff 10 	call	0x21fe	; 0x21fe <main>
    1196:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <_exit>

0000119a <__bad_interrupt>:
    119a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000119e <step>:
	TIMSK|=_BV(OCIE0);

while (arrowMoving);
steps = 0;
newSteps = 0;
arrowCalibrated = 1;
    119e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <dir>
    11a2:	99 23       	and	r25, r25
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <step+0x28>
    11a6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <phase>
    11aa:	9f 5f       	subi	r25, 0xFF	; 255
    11ac:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <phase>
    11b0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <steps>
    11b4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <steps+0x1>
    11b8:	2f 5f       	subi	r18, 0xFF	; 255
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <steps+0x1>
    11c0:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <steps>
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <step+0x46>
    11c6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <phase>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <phase>
    11d0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <steps>
    11d4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <steps+0x1>
    11d8:	21 50       	subi	r18, 0x01	; 1
    11da:	31 09       	sbc	r19, r1
    11dc:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <steps+0x1>
    11e0:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <steps>
    11e4:	81 11       	cpse	r24, r1
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <step+0x66>
    11e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <phase>
    11ec:	88 23       	and	r24, r24
    11ee:	1c f4       	brge	.+6      	; 0x11f6 <step+0x58>
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <phase>
    11f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <phase>
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	34 f1       	brlt	.+76     	; 0x124a <step+0xac>
    11fe:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phase>
    1202:	23 c0       	rjmp	.+70     	; 0x124a <step+0xac>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	e1 f4       	brne	.+56     	; 0x1240 <step+0xa2>
    1208:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <phase>
    120c:	88 23       	and	r24, r24
    120e:	1c f4       	brge	.+6      	; 0x1216 <step+0x78>
    1210:	87 e0       	ldi	r24, 0x07	; 7
    1212:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <phase>
    1216:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <phase>
    121a:	88 30       	cpi	r24, 0x08	; 8
    121c:	2c f0       	brlt	.+10     	; 0x1228 <step+0x8a>
    121e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phase>
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <step+0x8a>
    1224:	8b bb       	out	0x1b, r24	; 27
    1226:	08 95       	ret
    1228:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <phase>
    122c:	8b b3       	in	r24, 0x1b	; 27
    122e:	80 7f       	andi	r24, 0xF0	; 240
    1230:	0e 2e       	mov	r0, r30
    1232:	00 0c       	add	r0, r0
    1234:	ff 0b       	sbc	r31, r31
    1236:	e6 51       	subi	r30, 0x16	; 22
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	90 81       	ld	r25, Z
    123c:	89 2b       	or	r24, r25
    123e:	f2 cf       	rjmp	.-28     	; 0x1224 <step+0x86>
    1240:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <phase>
    1244:	8b b3       	in	r24, 0x1b	; 27
    1246:	80 7f       	andi	r24, 0xF0	; 240
    1248:	ed cf       	rjmp	.-38     	; 0x1224 <step+0x86>
    124a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <phase>
    124e:	8b b3       	in	r24, 0x1b	; 27
    1250:	80 7f       	andi	r24, 0xF0	; 240
    1252:	0e 2e       	mov	r0, r30
    1254:	00 0c       	add	r0, r0
    1256:	ff 0b       	sbc	r31, r31
    1258:	ee 50       	subi	r30, 0x0E	; 14
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	90 81       	ld	r25, Z
    125e:	89 2b       	or	r24, r25
    1260:	e1 cf       	rjmp	.-62     	; 0x1224 <step+0x86>

00001262 <__vector_10>:
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
    1284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1288:	0e 94 cf 08 	call	0x119e	; 0x119e <step>
    128c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <steps>
    1290:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <steps+0x1>
    1294:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <newSteps>
    1298:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <newSteps+0x1>
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__vector_10+0x4e>
    12a2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <arrowMoving>
    12a6:	13 be       	out	0x33, r1	; 51
    12a8:	1c be       	out	0x3c, r1	; 60
    12aa:	89 b7       	in	r24, 0x39	; 57
    12ac:	8d 7f       	andi	r24, 0xFD	; 253
    12ae:	89 bf       	out	0x39, r24	; 57
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_4>:
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	8f 93       	push	r24
    12de:	9f 93       	push	r25
    12e0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <speedTimer>
    12e4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <speedTimer+0x1>
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <speedTimer+0x1>
    12ee:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <speedTimer>
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	0f 90       	pop	r0
    12fc:	1f 90       	pop	r1
    12fe:	18 95       	reti

00001300 <__vector_9>:
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <signalOn>
    1312:	88 23       	and	r24, r24
    1314:	49 f0       	breq	.+18     	; 0x1328 <__vector_9+0x28>
    1316:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <signalCounter>
    131a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <signalCounter+0x1>
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <signalCounter+0x1>
    1324:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <signalCounter>
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_2>:
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	8f 93       	push	r24
    134a:	9f 93       	push	r25
    134c:	af 93       	push	r26
    134e:	bf 93       	push	r27
    1350:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <firstMeasure>
    1354:	88 23       	and	r24, r24
    1356:	69 f1       	breq	.+90     	; 0x13b2 <__vector_2+0x7c>
    1358:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <speedTimer>
    135c:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <speedTimer+0x1>
    1360:	24 b5       	in	r18, 0x24	; 36
    1362:	34 e1       	ldi	r19, 0x14	; 20
    1364:	34 9f       	mul	r19, r20
    1366:	c0 01       	movw	r24, r0
    1368:	35 9f       	mul	r19, r21
    136a:	90 0d       	add	r25, r0
    136c:	11 24       	eor	r1, r1
    136e:	82 0f       	add	r24, r18
    1370:	91 1d       	adc	r25, r1
    1372:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <speedTimerRecent+0x1>
    1376:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <speedTimerRecent>
    137a:	14 bc       	out	0x24, r1	; 36
    137c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <speedTimer+0x1>
    1380:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <speedTimer>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <speedRefresh>
    138a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <totalRotations>
    138e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <totalRotations+0x1>
    1392:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <totalRotations+0x2>
    1396:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <totalRotations+0x3>
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	a1 1d       	adc	r26, r1
    139e:	b1 1d       	adc	r27, r1
    13a0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <totalRotations>
    13a4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <totalRotations+0x1>
    13a8:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <totalRotations+0x2>
    13ac:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <totalRotations+0x3>
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <__vector_2+0x8a>
    13b2:	89 b7       	in	r24, 0x39	; 57
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	89 bf       	out	0x39, r24	; 57
    13b8:	14 bc       	out	0x24, r1	; 36
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <firstMeasure>
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <main_screen>:
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <signalOn>
    13f6:	81 11       	cpse	r24, r1
    13f8:	fa c0       	rjmp	.+500    	; 0x15ee <main_screen+0x214>
    13fa:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
    13fe:	0f ef       	ldi	r16, 0xFF	; 255
    1400:	27 e1       	ldi	r18, 0x17	; 23
    1402:	44 e2       	ldi	r20, 0x24	; 36
    1404:	6b e0       	ldi	r22, 0x0B	; 11
    1406:	8a e0       	ldi	r24, 0x0A	; 10
    1408:	0e 94 78 15 	call	0x2af0	; 0x2af0 <GLCD_DrawRectangle>
    140c:	24 e1       	ldi	r18, 0x14	; 20
    140e:	46 e2       	ldi	r20, 0x26	; 38
    1410:	6e e0       	ldi	r22, 0x0E	; 14
    1412:	85 e2       	ldi	r24, 0x25	; 37
    1414:	0e 94 78 15 	call	0x2af0	; 0x2af0 <GLCD_DrawRectangle>
    1418:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    141c:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    1420:	89 36       	cpi	r24, 0x69	; 105
    1422:	91 05       	cpc	r25, r1
    1424:	34 f0       	brlt	.+12     	; 0x1432 <main_screen+0x58>
    1426:	25 e1       	ldi	r18, 0x15	; 21
    1428:	40 e1       	ldi	r20, 0x10	; 16
    142a:	6d e0       	ldi	r22, 0x0D	; 13
    142c:	8c e0       	ldi	r24, 0x0C	; 12
    142e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GLCD_FillRectangle>
    1432:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    1436:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    143a:	8e 36       	cpi	r24, 0x6E	; 110
    143c:	91 05       	cpc	r25, r1
    143e:	3c f0       	brlt	.+14     	; 0x144e <main_screen+0x74>
    1440:	0f ef       	ldi	r16, 0xFF	; 255
    1442:	25 e1       	ldi	r18, 0x15	; 21
    1444:	46 e1       	ldi	r20, 0x16	; 22
    1446:	6d e0       	ldi	r22, 0x0D	; 13
    1448:	82 e1       	ldi	r24, 0x12	; 18
    144a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GLCD_FillRectangle>
    144e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    1452:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    1456:	83 37       	cpi	r24, 0x73	; 115
    1458:	91 05       	cpc	r25, r1
    145a:	3c f0       	brlt	.+14     	; 0x146a <main_screen+0x90>
    145c:	0f ef       	ldi	r16, 0xFF	; 255
    145e:	25 e1       	ldi	r18, 0x15	; 21
    1460:	4c e1       	ldi	r20, 0x1C	; 28
    1462:	6d e0       	ldi	r22, 0x0D	; 13
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GLCD_FillRectangle>
    146a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <voltage>
    146e:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <voltage+0x1>
    1472:	88 37       	cpi	r24, 0x78	; 120
    1474:	91 05       	cpc	r25, r1
    1476:	3c f0       	brlt	.+14     	; 0x1486 <main_screen+0xac>
    1478:	0f ef       	ldi	r16, 0xFF	; 255
    147a:	25 e1       	ldi	r18, 0x15	; 21
    147c:	42 e2       	ldi	r20, 0x22	; 34
    147e:	6d e0       	ldi	r22, 0x0D	; 13
    1480:	8e e1       	ldi	r24, 0x1E	; 30
    1482:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GLCD_FillRectangle>
    1486:	6f e0       	ldi	r22, 0x0F	; 15
    1488:	8b e2       	ldi	r24, 0x2B	; 43
    148a:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	48 e0       	ldi	r20, 0x08	; 8
    1492:	65 e0       	ldi	r22, 0x05	; 5
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	9f e0       	ldi	r25, 0x0F	; 15
    1498:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <GLCD_SetFont>
    149c:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <voltage>
    14a0:	70 91 fb 00 	lds	r23, 0x00FB	; 0x8000fb <voltage+0x1>
    14a4:	07 2e       	mov	r0, r23
    14a6:	00 0c       	add	r0, r0
    14a8:	88 0b       	sbc	r24, r24
    14aa:	99 0b       	sbc	r25, r25
    14ac:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatsisf>
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    14bc:	2a e0       	ldi	r18, 0x0A	; 10
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    14c8:	86 ea       	ldi	r24, 0xA6	; 166
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	62 e1       	ldi	r22, 0x12	; 18
    14d6:	84 e5       	ldi	r24, 0x54	; 84
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <GLCD_SetFont>
    14de:	6f e1       	ldi	r22, 0x1F	; 31
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
    14e6:	80 90 05 01 	lds	r8, 0x0105	; 0x800105 <distance>
    14ea:	90 90 06 01 	lds	r9, 0x0106	; 0x800106 <distance+0x1>
    14ee:	a0 90 07 01 	lds	r10, 0x0107	; 0x800107 <distance+0x2>
    14f2:	b0 90 08 01 	lds	r11, 0x0108	; 0x800108 <distance+0x3>
    14f6:	84 e6       	ldi	r24, 0x64	; 100
    14f8:	88 16       	cp	r8, r24
    14fa:	91 04       	cpc	r9, r1
    14fc:	a1 04       	cpc	r10, r1
    14fe:	b1 04       	cpc	r11, r1
    1500:	70 f0       	brcs	.+28     	; 0x151e <main_screen+0x144>
    1502:	c5 01       	movw	r24, r10
    1504:	b4 01       	movw	r22, r8
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__udivmodsi4>
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	41 05       	cpc	r20, r1
    1518:	51 05       	cpc	r21, r1
    151a:	29 f4       	brne	.+10     	; 0x1526 <main_screen+0x14c>
    151c:	5f c0       	rjmp	.+190    	; 0x15dc <main_screen+0x202>
    151e:	24 e6       	ldi	r18, 0x64	; 100
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	c0 e0       	ldi	r28, 0x00	; 0
    1528:	0f 2e       	mov	r0, r31
    152a:	fa e0       	ldi	r31, 0x0A	; 10
    152c:	cf 2e       	mov	r12, r31
    152e:	d1 2c       	mov	r13, r1
    1530:	e1 2c       	mov	r14, r1
    1532:	f1 2c       	mov	r15, r1
    1534:	f0 2d       	mov	r31, r0
    1536:	ca 01       	movw	r24, r20
    1538:	b9 01       	movw	r22, r18
    153a:	a7 01       	movw	r20, r14
    153c:	96 01       	movw	r18, r12
    153e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__divmodsi4>
    1542:	cf 5f       	subi	r28, 0xFF	; 255
    1544:	21 15       	cp	r18, r1
    1546:	31 05       	cpc	r19, r1
    1548:	41 05       	cpc	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	a1 f7       	brne	.-24     	; 0x1536 <main_screen+0x15c>
    154e:	84 e6       	ldi	r24, 0x64	; 100
    1550:	88 16       	cp	r8, r24
    1552:	91 04       	cpc	r9, r1
    1554:	a1 04       	cpc	r10, r1
    1556:	b1 04       	cpc	r11, r1
    1558:	08 f0       	brcs	.+2      	; 0x155c <main_screen+0x182>
    155a:	41 c0       	rjmp	.+130    	; 0x15de <main_screen+0x204>
    155c:	04 e0       	ldi	r16, 0x04	; 4
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	c0 e0       	ldi	r28, 0x00	; 0
    1562:	d0 e0       	ldi	r29, 0x00	; 0
    1564:	89 e7       	ldi	r24, 0x79	; 121
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    156c:	21 96       	adiw	r28, 0x01	; 1
    156e:	c0 17       	cp	r28, r16
    1570:	d1 07       	cpc	r29, r17
    1572:	c4 f3       	brlt	.-16     	; 0x1564 <main_screen+0x18a>
    1574:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <distance>
    1578:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <distance+0x1>
    157c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <distance+0x2>
    1580:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <distance+0x3>
    1584:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	48 ec       	ldi	r20, 0xC8	; 200
    158e:	52 e4       	ldi	r21, 0x42	; 66
    1590:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    1594:	2a e0       	ldi	r18, 0x0A	; 10
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	48 e0       	ldi	r20, 0x08	; 8
    15a4:	65 e0       	ldi	r22, 0x05	; 5
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	9f e0       	ldi	r25, 0x0F	; 15
    15aa:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <GLCD_SetFont>
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
    15b6:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <speedKmh>
    15ba:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <speedKmh+0x1>
    15be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speedKmh+0x2>
    15c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speedKmh+0x3>
    15c6:	2a e0       	ldi	r18, 0x0A	; 10
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    15d2:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
    15d6:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <main_screen+0x214>
    15dc:	c0 e0       	ldi	r28, 0x00	; 0
    15de:	06 e0       	ldi	r16, 0x06	; 6
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	0c 1b       	sub	r16, r28
    15e4:	11 09       	sbc	r17, r1
    15e6:	10 16       	cp	r1, r16
    15e8:	11 06       	cpc	r1, r17
    15ea:	24 f6       	brge	.-120    	; 0x1574 <main_screen+0x19a>
    15ec:	b9 cf       	rjmp	.-142    	; 0x1560 <main_screen+0x186>
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	08 95       	ret

00001608 <speed_arrow_update>:
    1608:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    160c:	81 11       	cpse	r24, r1
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <speed_arrow_update+0x3a>
    1610:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <kmhPerStep>
    1614:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <kmhPerStep+0x1>
    1618:	40 91 ff 00 	lds	r20, 0x00FF	; 0x8000ff <kmhPerStep+0x2>
    161c:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <kmhPerStep+0x3>
    1620:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <speedKmh>
    1624:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <speedKmh+0x1>
    1628:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speedKmh+0x2>
    162c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speedKmh+0x3>
    1630:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    1634:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixunssfsi>
    1638:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <newSteps+0x1>
    163c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <newSteps>
    1640:	1a c0       	rjmp	.+52     	; 0x1676 <speed_arrow_update+0x6e>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	c1 f4       	brne	.+48     	; 0x1676 <speed_arrow_update+0x6e>
    1646:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <kmhPerStep>
    164a:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <kmhPerStep+0x1>
    164e:	40 91 ff 00 	lds	r20, 0x00FF	; 0x8000ff <kmhPerStep+0x2>
    1652:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <kmhPerStep+0x3>
    1656:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <speedKmh>
    165a:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <speedKmh+0x1>
    165e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speedKmh+0x2>
    1662:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speedKmh+0x3>
    1666:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    166a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixunssfsi>
    166e:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <newSteps+0x1>
    1672:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <newSteps>
    1676:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <steps>
    167a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <steps+0x1>
    167e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <newSteps>
    1682:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <newSteps+0x1>
    1686:	82 1b       	sub	r24, r18
    1688:	93 0b       	sbc	r25, r19
    168a:	18 16       	cp	r1, r24
    168c:	19 06       	cpc	r1, r25
    168e:	1c f4       	brge	.+6      	; 0x1696 <speed_arrow_update+0x8e>
    1690:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <dir>
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <speed_arrow_update+0x98>
    1696:	21 e0       	ldi	r18, 0x01	; 1
    1698:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <dir>
    169c:	89 2b       	or	r24, r25
    169e:	71 f0       	breq	.+28     	; 0x16bc <speed_arrow_update+0xb4>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <arrowMoving>
    16a6:	83 b7       	in	r24, 0x33	; 51
    16a8:	8d 60       	ori	r24, 0x0D	; 13
    16aa:	83 bf       	out	0x33, r24	; 51
    16ac:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <stepInterval>
    16b0:	8c bf       	out	0x3c, r24	; 60
    16b2:	89 b7       	in	r24, 0x39	; 57
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	89 bf       	out	0x39, r24	; 57
    16b8:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
    16bc:	08 95       	ret

000016be <button_monitor>:
    16be:	b5 9b       	sbis	0x16, 5	; 22
    16c0:	08 c0       	rjmp	.+16     	; 0x16d2 <button_monitor+0x14>
    16c2:	b6 9b       	sbis	0x16, 6	; 22
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <button_monitor+0x14>
    16c6:	b7 9b       	sbis	0x16, 7	; 22
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <button_monitor+0x14>
    16ca:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <btnPressed>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	08 95       	ret
    16d2:	b5 99       	sbic	0x16, 5	; 22
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <button_monitor+0x3e>
    16d6:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    16da:	81 11       	cpse	r24, r1
    16dc:	3d c0       	rjmp	.+122    	; 0x1758 <button_monitor+0x9a>
    16de:	2f ef       	ldi	r18, 0xFF	; 255
    16e0:	80 e7       	ldi	r24, 0x70	; 112
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	21 50       	subi	r18, 0x01	; 1
    16e6:	80 40       	sbci	r24, 0x00	; 0
    16e8:	90 40       	sbci	r25, 0x00	; 0
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <button_monitor+0x26>
    16ec:	00 c0       	rjmp	.+0      	; 0x16ee <button_monitor+0x30>
    16ee:	00 00       	nop
    16f0:	b5 99       	sbic	0x16, 5	; 22
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <button_monitor+0x3e>
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <btnPressed>
    16fa:	2e c0       	rjmp	.+92     	; 0x1758 <button_monitor+0x9a>
    16fc:	b6 99       	sbic	0x16, 6	; 22
    16fe:	13 c0       	rjmp	.+38     	; 0x1726 <button_monitor+0x68>
    1700:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    1704:	81 11       	cpse	r24, r1
    1706:	26 c0       	rjmp	.+76     	; 0x1754 <button_monitor+0x96>
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	80 e7       	ldi	r24, 0x70	; 112
    170c:	92 e0       	ldi	r25, 0x02	; 2
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	80 40       	sbci	r24, 0x00	; 0
    1712:	90 40       	sbci	r25, 0x00	; 0
    1714:	e1 f7       	brne	.-8      	; 0x170e <button_monitor+0x50>
    1716:	00 c0       	rjmp	.+0      	; 0x1718 <button_monitor+0x5a>
    1718:	00 00       	nop
    171a:	b6 99       	sbic	0x16, 6	; 22
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <button_monitor+0x68>
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <btnPressed>
    1724:	17 c0       	rjmp	.+46     	; 0x1754 <button_monitor+0x96>
    1726:	b7 99       	sbic	0x16, 7	; 22
    1728:	12 c0       	rjmp	.+36     	; 0x174e <button_monitor+0x90>
    172a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    172e:	81 11       	cpse	r24, r1
    1730:	0e c0       	rjmp	.+28     	; 0x174e <button_monitor+0x90>
    1732:	2f ef       	ldi	r18, 0xFF	; 255
    1734:	80 e7       	ldi	r24, 0x70	; 112
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	21 50       	subi	r18, 0x01	; 1
    173a:	80 40       	sbci	r24, 0x00	; 0
    173c:	90 40       	sbci	r25, 0x00	; 0
    173e:	e1 f7       	brne	.-8      	; 0x1738 <button_monitor+0x7a>
    1740:	00 c0       	rjmp	.+0      	; 0x1742 <button_monitor+0x84>
    1742:	00 00       	nop
    1744:	b7 99       	sbic	0x16, 7	; 22
    1746:	03 c0       	rjmp	.+6      	; 0x174e <button_monitor+0x90>
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <btnPressed>
    174e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <btnPressed>
    1752:	08 95       	ret
    1754:	86 b3       	in	r24, 0x16	; 22
    1756:	fb cf       	rjmp	.-10     	; 0x174e <button_monitor+0x90>
    1758:	b6 9b       	sbis	0x16, 6	; 22
    175a:	fc cf       	rjmp	.-8      	; 0x1754 <button_monitor+0x96>
    175c:	e4 cf       	rjmp	.-56     	; 0x1726 <button_monitor+0x68>

0000175e <menu_screen>:
    175e:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    1762:	88 23       	and	r24, r24
    1764:	14 f4       	brge	.+4      	; 0x176a <menu_screen+0xc>
    1766:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <page.2767>
    176a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    176e:	86 30       	cpi	r24, 0x06	; 6
    1770:	44 f0       	brlt	.+16     	; 0x1782 <menu_screen+0x24>
    1772:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <page.2767>
    177c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
    1780:	19 c0       	rjmp	.+50     	; 0x17b4 <menu_screen+0x56>
    1782:	88 23       	and	r24, r24
    1784:	5c f4       	brge	.+22     	; 0x179c <menu_screen+0x3e>
    1786:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    178a:	81 50       	subi	r24, 0x01	; 1
    178c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <page.2767>
    1790:	95 e0       	ldi	r25, 0x05	; 5
    1792:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <__data_end>
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	69 f4       	brne	.+26     	; 0x17b4 <menu_screen+0x56>
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <menu_screen+0x4e>
    179c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	41 f4       	brne	.+16     	; 0x17b4 <menu_screen+0x56>
    17a4:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	24 f0       	brlt	.+8      	; 0x17b4 <menu_screen+0x56>
    17ac:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <page.2767>
    17b0:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
    17b4:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
    17b8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    17bc:	88 0f       	add	r24, r24
    17be:	88 0f       	add	r24, r24
    17c0:	88 0f       	add	r24, r24
    17c2:	2f e0       	ldi	r18, 0x0F	; 15
    17c4:	28 0f       	add	r18, r24
    17c6:	67 e0       	ldi	r22, 0x07	; 7
    17c8:	68 0f       	add	r22, r24
    17ca:	0f ef       	ldi	r16, 0xFF	; 255
    17cc:	45 e0       	ldi	r20, 0x05	; 5
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GLCD_FillRectangle>
    17d4:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    17d8:	88 0f       	add	r24, r24
    17da:	88 0f       	add	r24, r24
    17dc:	88 0f       	add	r24, r24
    17de:	2f e0       	ldi	r18, 0x0F	; 15
    17e0:	28 0f       	add	r18, r24
    17e2:	67 e0       	ldi	r22, 0x07	; 7
    17e4:	68 0f       	add	r22, r24
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	8a e7       	ldi	r24, 0x7A	; 122
    17ea:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GLCD_FillRectangle>
    17ee:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__data_end>
    17f2:	66 0f       	add	r22, r22
    17f4:	66 0f       	add	r22, r22
    17f6:	66 0f       	add	r22, r22
    17f8:	6a 5f       	subi	r22, 0xFA	; 250
    17fa:	26 2f       	mov	r18, r22
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <GLCD_DrawLine>
    1804:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__data_end>
    1808:	66 0f       	add	r22, r22
    180a:	66 0f       	add	r22, r22
    180c:	66 0f       	add	r22, r22
    180e:	60 5f       	subi	r22, 0xF0	; 240
    1810:	26 2f       	mov	r18, r22
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <GLCD_DrawLine>
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	48 e0       	ldi	r20, 0x08	; 8
    181e:	65 e0       	ldi	r22, 0x05	; 5
    1820:	80 e2       	ldi	r24, 0x20	; 32
    1822:	9f e0       	ldi	r25, 0x0F	; 15
    1824:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <GLCD_SetFont>
    1828:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    182c:	81 11       	cpse	r24, r1
    182e:	94 c0       	rjmp	.+296    	; 0x1958 <menu_screen+0x1fa>
    1830:	8a e0       	ldi	r24, 0x0A	; 10
    1832:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    183c:	8b e7       	ldi	r24, 0x7B	; 123
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1844:	8b e4       	ldi	r24, 0x4B	; 75
    1846:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    184a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <pwmDial>
    184e:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <pwmDial+0x1>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
    185a:	8a e0       	ldi	r24, 0x0A	; 10
    185c:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1866:	83 e8       	ldi	r24, 0x83	; 131
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    186e:	8b e4       	ldi	r24, 0x4B	; 75
    1870:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1874:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <pwmArrow>
    1878:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <pwmArrow+0x1>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
    1884:	8a e0       	ldi	r24, 0x0A	; 10
    1886:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1890:	8b e8       	ldi	r24, 0x8B	; 139
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1898:	8b e4       	ldi	r24, 0x4B	; 75
    189a:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    189e:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <wheelDiameter>
    18a2:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <wheelDiameter+0x1>
    18a6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wheelDiameter+0x2>
    18aa:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <wheelDiameter+0x3>
    18ae:	24 e6       	ldi	r18, 0x64	; 100
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    18ba:	8a e0       	ldi	r24, 0x0A	; 10
    18bc:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    18c6:	82 e9       	ldi	r24, 0x92	; 146
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    18ce:	8b e4       	ldi	r24, 0x4B	; 75
    18d0:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    18d4:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <gearRatio>
    18d8:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <gearRatio+0x1>
    18dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <gearRatio+0x2>
    18e0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <gearRatio+0x3>
    18e4:	24 e6       	ldi	r18, 0x64	; 100
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    18f0:	8a e0       	ldi	r24, 0x0A	; 10
    18f2:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    18fc:	88 e9       	ldi	r24, 0x98	; 152
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1904:	8b e4       	ldi	r24, 0x4B	; 75
    1906:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    190a:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <magnetsOnWheel>
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
    1918:	8a e0       	ldi	r24, 0x0A	; 10
    191a:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1924:	80 ea       	ldi	r24, 0xA0	; 160
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    192c:	8b e4       	ldi	r24, 0x4B	; 75
    192e:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1932:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <shutDownVoltageX10>
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatsisf>
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    194c:	2a e0       	ldi	r18, 0x0A	; 10
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    1958:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	09 f0       	breq	.+2      	; 0x1962 <menu_screen+0x204>
    1960:	65 c0       	rjmp	.+202    	; 0x1a2c <menu_screen+0x2ce>
    1962:	8a e0       	ldi	r24, 0x0A	; 10
    1964:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    196e:	88 ea       	ldi	r24, 0xA8	; 168
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1976:	8b e4       	ldi	r24, 0x4B	; 75
    1978:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    197c:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <scaleMax>
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
    198a:	8a e0       	ldi	r24, 0x0A	; 10
    198c:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1996:	82 eb       	ldi	r24, 0xB2	; 178
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    199e:	8b e4       	ldi	r24, 0x4B	; 75
    19a0:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    19a4:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <degreesPerKmh>
    19a8:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <degreesPerKmh+0x1>
    19ac:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <degreesPerKmh+0x2>
    19b0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <degreesPerKmh+0x3>
    19b4:	28 ee       	ldi	r18, 0xE8	; 232
    19b6:	33 e0       	ldi	r19, 0x03	; 3
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	0e 94 2a 19 	call	0x3254	; 0x3254 <GLCD_PrintDouble>
    19c0:	8a e0       	ldi	r24, 0x0A	; 10
    19c2:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    19cc:	8a eb       	ldi	r24, 0xBA	; 186
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    19d4:	8b e4       	ldi	r24, 0x4B	; 75
    19d6:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    19da:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    19de:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <smSteps+0x1>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
    19ea:	8a e0       	ldi	r24, 0x0A	; 10
    19ec:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    19f6:	8d eb       	ldi	r24, 0xBD	; 189
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    19fe:	8b e4       	ldi	r24, 0x4B	; 75
    1a00:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1a04:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <stepInterval>
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
    1a12:	8a e0       	ldi	r24, 0x0A	; 10
    1a14:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1a18:	85 e0       	ldi	r24, 0x05	; 5
    1a1a:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1a1e:	83 ec       	ldi	r24, 0xC3	; 195
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1a26:	8b e4       	ldi	r24, 0x4B	; 75
    1a28:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1a2c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <page.2767>
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	a1 f4       	brne	.+40     	; 0x1a5c <menu_screen+0x2fe>
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1a40:	8d ec       	ldi	r24, 0xCD	; 205
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1a48:	8a e0       	ldi	r24, 0x0A	; 10
    1a4a:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	0e 94 37 12 	call	0x246e	; 0x246e <GLCD_GotoLine>
    1a54:	8c ed       	ldi	r24, 0xDC	; 220
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
    1a5c:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
    1a60:	0e 94 5f 0b 	call	0x16be	; 0x16be <button_monitor>
    1a64:	88 23       	and	r24, r24
    1a66:	e1 f3       	breq	.-8      	; 0x1a60 <menu_screen+0x302>
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	31 f4       	brne	.+12     	; 0x1a78 <menu_screen+0x31a>
    1a6c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    1a70:	8f 5f       	subi	r24, 0xFF	; 255
    1a72:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <menu_screen+0x328>
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	29 f4       	brne	.+10     	; 0x1a86 <menu_screen+0x328>
    1a7c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    1a80:	81 50       	subi	r24, 0x01	; 1
    1a82:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
    1a86:	0e 94 5f 0b 	call	0x16be	; 0x16be <button_monitor>
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	fc cf       	rjmp	.-8      	; 0x1a86 <menu_screen+0x328>
    1a8e:	0e 94 af 0b 	call	0x175e	; 0x175e <menu_screen>

00001a92 <draw_arrow>:
}
	
void draw_arrow (uint8_t arrowDir){
	if (arrowDir){
    1a92:	88 23       	and	r24, r24
    1a94:	81 f0       	breq	.+32     	; 0x1ab6 <draw_arrow+0x24>
		GLCD_Clear();
    1a96:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1a9a:	67 e0       	ldi	r22, 0x07	; 7
    1a9c:	86 e1       	ldi	r24, 0x16	; 22
    1a9e:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowRight,92,55,GLCD_Black);
    1aa2:	2f ef       	ldi	r18, 0xFF	; 255
    1aa4:	47 e3       	ldi	r20, 0x37	; 55
    1aa6:	6c e5       	ldi	r22, 0x5C	; 92
    1aa8:	82 e4       	ldi	r24, 0x42	; 66
    1aaa:	9a e0       	ldi	r25, 0x0A	; 10
    1aac:	0e 94 7f 13 	call	0x26fe	; 0x26fe <GLCD_DrawBitmap>
		GLCD_Render();
    1ab0:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
    1ab4:	08 95       	ret
		}else{
		GLCD_Clear();
    1ab6:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
		GLCD_GotoXY(22, 7);
    1aba:	67 e0       	ldi	r22, 0x07	; 7
    1abc:	86 e1       	ldi	r24, 0x16	; 22
    1abe:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		GLCD_DrawBitmap(arrowLeft,92,55,GLCD_Black);
    1ac2:	2f ef       	ldi	r18, 0xFF	; 255
    1ac4:	47 e3       	ldi	r20, 0x37	; 55
    1ac6:	6c e5       	ldi	r22, 0x5C	; 92
    1ac8:	8e eb       	ldi	r24, 0xBE	; 190
    1aca:	97 e0       	ldi	r25, 0x07	; 7
    1acc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <GLCD_DrawBitmap>
		GLCD_Render();	
    1ad0:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
    1ad4:	08 95       	ret

00001ad6 <draw_skull>:
		}
}

void draw_skull (void)
{
GLCD_Clear();
    1ad6:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
GLCD_GotoXY(21+6, 7);
    1ada:	67 e0       	ldi	r22, 0x07	; 7
    1adc:	8b e1       	ldi	r24, 0x1B	; 27
    1ade:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
GLCD_DrawBitmap(skull,86,52,GLCD_Black);
    1ae2:	2f ef       	ldi	r18, 0xFF	; 255
    1ae4:	44 e3       	ldi	r20, 0x34	; 52
    1ae6:	66 e5       	ldi	r22, 0x56	; 86
    1ae8:	86 ec       	ldi	r24, 0xC6	; 198
    1aea:	9c e0       	ldi	r25, 0x0C	; 12
    1aec:	0e 94 7f 13 	call	0x26fe	; 0x26fe <GLCD_DrawBitmap>
GLCD_Render();
    1af0:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
    1af4:	08 95       	ret

00001af6 <signal_monitor>:
														
														
		}
void signal_monitor(){
		
		if((!(PINB&_BV(4)))&&(PINB&_BV(3))){
    1af6:	b4 99       	sbic	0x16, 4	; 22
    1af8:	0c c0       	rjmp	.+24     	; 0x1b12 <signal_monitor+0x1c>
    1afa:	b3 9b       	sbis	0x16, 3	; 22
    1afc:	0a c0       	rjmp	.+20     	; 0x1b12 <signal_monitor+0x1c>
			draw_arrow(0);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <draw_arrow>
			signalOn = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <signalOn>
			signalCounter = 0;
    1b0a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    1b0e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
		}
		
		if((!(PINB&_BV(3)))&&(PINB&_BV(4))){
    1b12:	b3 99       	sbic	0x16, 3	; 22
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <signal_monitor+0x3e>
    1b16:	b4 9b       	sbis	0x16, 4	; 22
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <signal_monitor+0x3e>
			draw_arrow(1);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <draw_arrow>
			signalOn = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <signalOn>
			signalCounter = 0;
    1b26:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    1b2a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1b2e:	b4 9b       	sbis	0x16, 4	; 22
    1b30:	31 c0       	rjmp	.+98     	; 0x1b94 <signal_monitor+0x9e>
    1b32:	33 c0       	rjmp	.+102    	; 0x1b9a <signal_monitor+0xa4>
    1b34:	b4 99       	sbic	0x16, 4	; 22
    1b36:	0c c0       	rjmp	.+24     	; 0x1b50 <signal_monitor+0x5a>
    1b38:	b3 99       	sbic	0x16, 3	; 22
    1b3a:	0a c0       	rjmp	.+20     	; 0x1b50 <signal_monitor+0x5a>
			draw_skull();
    1b3c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <draw_skull>
			signalOn = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <signalOn>
			signalCounter = 0;
    1b46:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    1b4a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
    1b4e:	25 c0       	rjmp	.+74     	; 0x1b9a <signal_monitor+0xa4>
		}
		
		
		if (signalOn){
    1b50:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <signalOn>
    1b54:	88 23       	and	r24, r24
    1b56:	19 f1       	breq	.+70     	; 0x1b9e <signal_monitor+0xa8>
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1b58:	b3 9b       	sbis	0x16, 3	; 22
    1b5a:	09 c0       	rjmp	.+18     	; 0x1b6e <signal_monitor+0x78>
    1b5c:	b4 9b       	sbis	0x16, 4	; 22
    1b5e:	07 c0       	rjmp	.+14     	; 0x1b6e <signal_monitor+0x78>
				GLCD_Clear();
    1b60:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
				GLCD_Render();
    1b64:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
				TIMSK|=_BV(TOIE1);// If the turn signal (arrow) was switched on, and at the moment the turn signals are not lit, the timer is started.
    1b68:	89 b7       	in	r24, 0x39	; 57
    1b6a:	84 60       	ori	r24, 0x04	; 4
    1b6c:	89 bf       	out	0x39, r24	; 57
				//This is to see if this is the interval between the blinking of the turn signals, or if the turn signal is already off.
			}
			
			if (signalCounter > 300) //if interval is longer then the interval between the blinks - stop displaying turn/hazard sign
    1b6e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <signalCounter>
    1b72:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <signalCounter+0x1>
    1b76:	8d 32       	cpi	r24, 0x2D	; 45
    1b78:	91 40       	sbci	r25, 0x01	; 1
    1b7a:	88 f0       	brcs	.+34     	; 0x1b9e <signal_monitor+0xa8>
			{
				signalOn = 0;
    1b7c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <signalOn>
				signalCounter = 0;
    1b80:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <signalCounter+0x1>
    1b84:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <signalCounter>
				TIMSK&=~_BV(TOIE1);
    1b88:	89 b7       	in	r24, 0x39	; 57
    1b8a:	8b 7f       	andi	r24, 0xFB	; 251
    1b8c:	89 bf       	out	0x39, r24	; 57
				main_screen();
    1b8e:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
			}
		}
		
}
    1b92:	08 95       	ret
			draw_arrow(1);
			signalOn = 1;
			signalCounter = 0;
		}
		
		if((!(PINB&_BV(4)))&&(!(PINB&_BV(3)))){
    1b94:	b3 99       	sbic	0x16, 3	; 22
    1b96:	e0 cf       	rjmp	.-64     	; 0x1b58 <signal_monitor+0x62>
    1b98:	d1 cf       	rjmp	.-94     	; 0x1b3c <signal_monitor+0x46>
			signalCounter = 0;
		}
		
		
		if (signalOn){
			if((PINB&_BV(3))&&(PINB&_BV(4))){
    1b9a:	b3 99       	sbic	0x16, 3	; 22
    1b9c:	df cf       	rjmp	.-66     	; 0x1b5c <signal_monitor+0x66>
    1b9e:	08 95       	ret

00001ba0 <read_ADC>:
}
	
	
int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
    1ba0:	87 b9       	out	0x07, r24	; 7
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	16 16       	cp	r1, r22
    1ba6:	17 06       	cpc	r1, r23
    1ba8:	8c f4       	brge	.+34     	; 0x1bcc <read_ADC+0x2c>
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
    1bb2:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA &(1<<ADSC)));
    1bb4:	36 99       	sbic	0x06, 6	; 6
    1bb6:	fe cf       	rjmp	.-4      	; 0x1bb4 <read_ADC+0x14>
		tmp += ADCW;
    1bb8:	44 b1       	in	r20, 0x04	; 4
    1bba:	55 b1       	in	r21, 0x05	; 5
    1bbc:	84 0f       	add	r24, r20
    1bbe:	95 1f       	adc	r25, r21
	
int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
	for (int i = 0;i<cycles;i++)
    1bc0:	2f 5f       	subi	r18, 0xFF	; 255
    1bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc4:	26 17       	cp	r18, r22
    1bc6:	37 07       	cpc	r19, r23
    1bc8:	a1 f7       	brne	.-24     	; 0x1bb2 <read_ADC+0x12>
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <read_ADC+0x30>
	
	
int read_ADC(uint8_t mux, uint8_t cycles)
{
	ADMUX = mux;
	int tmp = 0;
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
	{
		ADCSRA |= (1<<ADSC);
		while((ADCSRA &(1<<ADSC)));
		tmp += ADCW;
	}
	return tmp/cycles;
    1bd0:	0e 94 49 1c 	call	0x3892	; 0x3892 <__divmodhi4>
    1bd4:	cb 01       	movw	r24, r22
}	
    1bd6:	08 95       	ret

00001bd8 <data_monitor>:
				main_screen();
			}
		}
		
}
void data_monitor(){
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17

	newVoltage = (read_ADC(4,10)/102.3)*AREF*DEVIDER;
    1bdc:	6a e0       	ldi	r22, 0x0A	; 10
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <read_ADC>
    1be4:	bc 01       	movw	r22, r24
    1be6:	99 0f       	add	r25, r25
    1be8:	88 0b       	sbc	r24, r24
    1bea:	99 0b       	sbc	r25, r25
    1bec:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatsisf>
    1bf0:	2a e9       	ldi	r18, 0x9A	; 154
    1bf2:	39 e9       	ldi	r19, 0x99	; 153
    1bf4:	4c ec       	ldi	r20, 0xCC	; 204
    1bf6:	52 e4       	ldi	r21, 0x42	; 66
    1bf8:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	50 e4       	ldi	r21, 0x40	; 64
    1c04:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 ec       	ldi	r20, 0xC0	; 192
    1c0e:	50 e4       	ldi	r21, 0x40	; 64
    1c10:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    1c14:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__fixsfsi>
    1c18:	70 93 f9 00 	sts	0x00F9, r23	; 0x8000f9 <newVoltage+0x1>
    1c1c:	60 93 f8 00 	sts	0x00F8, r22	; 0x8000f8 <newVoltage>
		}
		main();
	}
	*/
	
	if (newVoltage!=voltage) //if voltage value changes - refresh data on the screen
    1c20:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <voltage>
    1c24:	30 91 fb 00 	lds	r19, 0x00FB	; 0x8000fb <voltage+0x1>
    1c28:	26 17       	cp	r18, r22
    1c2a:	37 07       	cpc	r19, r23
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <data_monitor+0x62>
	{
		voltage = newVoltage;
    1c2e:	70 93 fb 00 	sts	0x00FB, r23	; 0x8000fb <voltage+0x1>
    1c32:	60 93 fa 00 	sts	0x00FA, r22	; 0x8000fa <voltage>
		main_screen();
    1c36:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
	}
	
	newDistance=(round(totalRotations)*circLength)/10.0;
    1c3a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <totalRotations>
    1c3e:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <totalRotations+0x1>
    1c42:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <totalRotations+0x2>
    1c46:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <totalRotations+0x3>
    1c4a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    1c4e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <round>
    1c52:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <circLength>
    1c56:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <circLength+0x1>
    1c5a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <circLength+0x2>
    1c5e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <circLength+0x3>
    1c62:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    1c72:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixunssfsi>
    1c76:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <newDistance>
    1c7a:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <newDistance+0x1>
    1c7e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <newDistance+0x2>
    1c82:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <newDistance+0x3>
	if (newDistance!=distance) //when the distance value changes by 100 meters - update the data on the screen
    1c86:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <distance>
    1c8a:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <distance+0x1>
    1c8e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <distance+0x2>
    1c92:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <distance+0x3>
    1c96:	60 17       	cp	r22, r16
    1c98:	71 07       	cpc	r23, r17
    1c9a:	82 07       	cpc	r24, r18
    1c9c:	93 07       	cpc	r25, r19
    1c9e:	51 f0       	breq	.+20     	; 0x1cb4 <data_monitor+0xdc>
	{
		distance = newDistance;
    1ca0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <distance>
    1ca4:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <distance+0x1>
    1ca8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <distance+0x2>
    1cac:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <distance+0x3>
		main_screen();
    1cb0:	0e 94 ed 09 	call	0x13da	; 0x13da <main_screen>
	}
}
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	08 95       	ret

00001cba <eep_operations>:
	}
	return tmp/cycles;
}	
	
	
	void eep_operations (uint16_t eepStartAddress, uint8_t eepAddrShift, uint8_t eepAction){
    1cba:	8f 92       	push	r8
    1cbc:	9f 92       	push	r9
    1cbe:	af 92       	push	r10
    1cc0:	bf 92       	push	r11
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	ec 01       	movw	r28, r24
    1cce:	e6 2e       	mov	r14, r22
		
		if (eepAction==EEP_WRITE){
    1cd0:	41 30       	cpi	r20, 0x01	; 1
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <eep_operations+0x1c>
    1cd4:	71 c0       	rjmp	.+226    	; 0x1db8 <eep_operations+0xfe>
			eeprom_write_byte((uint8_t*)eepStartAddress,0);
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmArrow);
    1cdc:	f1 2c       	mov	r15, r1
    1cde:	ce 0d       	add	r28, r14
    1ce0:	df 1d       	adc	r29, r15
    1ce2:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <pwmArrow>
    1ce6:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <pwmArrow+0x1>
    1cea:	ce 01       	movw	r24, r28
    1cec:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <eeprom_write_word>
			eeprom_write_word((uint16_t*)(eepStartAddress+=eepAddrShift),pwmDial);
    1cf0:	ce 0d       	add	r28, r14
    1cf2:	df 1d       	adc	r29, r15
    1cf4:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <pwmDial>
    1cf8:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <pwmDial+0x1>
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <eeprom_write_word>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),scaleMax);
    1d02:	ce 0d       	add	r28, r14
    1d04:	df 1d       	adc	r29, r15
    1d06:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <scaleMax>
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),shutDownVoltageX10);
    1d10:	ce 0d       	add	r28, r14
    1d12:	df 1d       	adc	r29, r15
    1d14:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <shutDownVoltageX10>
    1d18:	ce 01       	movw	r24, r28
    1d1a:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepInterval);
    1d1e:	ce 0d       	add	r28, r14
    1d20:	df 1d       	adc	r29, r15
    1d22:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <stepInterval>
    1d26:	ce 01       	movw	r24, r28
    1d28:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_word((uint16_t*)(eepStartAddress+=eepAddrShift),smSteps);
    1d2c:	ce 0d       	add	r28, r14
    1d2e:	df 1d       	adc	r29, r15
    1d30:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    1d34:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <smSteps+0x1>
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <eeprom_write_word>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),lcdContrast);
    1d3e:	ce 0d       	add	r28, r14
    1d40:	df 1d       	adc	r29, r15
    1d42:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <lcdContrast>
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),magnetsOnWheel);
    1d4c:	ce 0d       	add	r28, r14
    1d4e:	df 1d       	adc	r29, r15
    1d50:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <magnetsOnWheel>
    1d54:	ce 01       	movw	r24, r28
    1d56:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)(eepStartAddress+=eepAddrShift),stepMode);
    1d5a:	ce 0d       	add	r28, r14
    1d5c:	df 1d       	adc	r29, r15
    1d5e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1d62:	ce 01       	movw	r24, r28
    1d64:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
			eeprom_write_float((float*)(eepStartAddress+=eepAddrShift),wheelDiameter);
    1d68:	ce 0d       	add	r28, r14
    1d6a:	df 1d       	adc	r29, r15
    1d6c:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <wheelDiameter>
    1d70:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <wheelDiameter+0x1>
    1d74:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <wheelDiameter+0x2>
    1d78:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <wheelDiameter+0x3>
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <eeprom_write_dword>
			eeprom_write_float((float*)(eepStartAddress+=eepAddrShift),gearRatio);
    1d82:	ce 0d       	add	r28, r14
    1d84:	df 1d       	adc	r29, r15
    1d86:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <gearRatio>
    1d8a:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <gearRatio+0x1>
    1d8e:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <gearRatio+0x2>
    1d92:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <gearRatio+0x3>
    1d96:	ce 01       	movw	r24, r28
    1d98:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <eeprom_write_dword>
			eeprom_write_float((float*)(eepStartAddress+=eepAddrShift),degreesPerKmh);
    1d9c:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <degreesPerKmh>
    1da0:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <degreesPerKmh+0x1>
    1da4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <degreesPerKmh+0x2>
    1da8:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <degreesPerKmh+0x3>
    1dac:	c7 01       	movw	r24, r14
    1dae:	8c 0f       	add	r24, r28
    1db0:	9d 1f       	adc	r25, r29
    1db2:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <eeprom_write_dword>
    1db6:	b4 c0       	rjmp	.+360    	; 0x1f20 <eep_operations+0x266>
			
			}
			if(eepAction==EEP_READ){
    1db8:	41 11       	cpse	r20, r1
    1dba:	ae c0       	rjmp	.+348    	; 0x1f18 <eep_operations+0x25e>
			pwmArrow = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1dbc:	e6 2e       	mov	r14, r22
    1dbe:	f1 2c       	mov	r15, r1
    1dc0:	ce 0d       	add	r28, r14
    1dc2:	df 1d       	adc	r29, r15
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	0e 94 c0 1c 	call	0x3980	; 0x3980 <eeprom_read_word>
    1dca:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <pwmArrow+0x1>
    1dce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <pwmArrow>
			pwmDial = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1dd2:	ce 0d       	add	r28, r14
    1dd4:	df 1d       	adc	r29, r15
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	0e 94 c0 1c 	call	0x3980	; 0x3980 <eeprom_read_word>
    1ddc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <pwmDial+0x1>
    1de0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <pwmDial>
			scaleMax = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1de4:	ce 0d       	add	r28, r14
    1de6:	df 1d       	adc	r29, r15
    1de8:	ce 01       	movw	r24, r28
    1dea:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
    1dee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <scaleMax>
			shutDownVoltageX10 = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1df2:	ce 0d       	add	r28, r14
    1df4:	df 1d       	adc	r29, r15
    1df6:	ce 01       	movw	r24, r28
    1df8:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
    1dfc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <shutDownVoltageX10>
			stepInterval = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e00:	ce 0d       	add	r28, r14
    1e02:	df 1d       	adc	r29, r15
    1e04:	ce 01       	movw	r24, r28
    1e06:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
    1e0a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <stepInterval>
			smSteps = eeprom_read_word((uint16_t*)(eepStartAddress+=eepAddrShift));
    1e0e:	ce 0d       	add	r28, r14
    1e10:	df 1d       	adc	r29, r15
    1e12:	ce 01       	movw	r24, r28
    1e14:	0e 94 c0 1c 	call	0x3980	; 0x3980 <eeprom_read_word>
    1e18:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <smSteps+0x1>
    1e1c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <smSteps>
			lcdContrast = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e20:	ce 0d       	add	r28, r14
    1e22:	df 1d       	adc	r29, r15
    1e24:	ce 01       	movw	r24, r28
    1e26:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
    1e2a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <lcdContrast>
			magnetsOnWheel = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e2e:	ce 0d       	add	r28, r14
    1e30:	df 1d       	adc	r29, r15
    1e32:	ce 01       	movw	r24, r28
    1e34:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
    1e38:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <magnetsOnWheel>
			stepMode = eeprom_read_byte((uint8_t*)(eepStartAddress+=eepAddrShift));
    1e3c:	ce 0d       	add	r28, r14
    1e3e:	df 1d       	adc	r29, r15
    1e40:	ce 01       	movw	r24, r28
    1e42:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
    1e46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1e4a:	ce 0d       	add	r28, r14
    1e4c:	df 1d       	adc	r29, r15
    1e4e:	ce 01       	movw	r24, r28
    1e50:	0e 94 ba 1c 	call	0x3974	; 0x3974 <eeprom_read_dword>
    1e54:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <wheelDiameter>
    1e58:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <wheelDiameter+0x1>
    1e5c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wheelDiameter+0x2>
    1e60:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <wheelDiameter+0x3>
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1e64:	ce 0d       	add	r28, r14
    1e66:	df 1d       	adc	r29, r15
    1e68:	ce 01       	movw	r24, r28
    1e6a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <eeprom_read_dword>
    1e6e:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <gearRatio>
    1e72:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <gearRatio+0x1>
    1e76:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <gearRatio+0x2>
    1e7a:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <gearRatio+0x3>
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
    1e7e:	c7 01       	movw	r24, r14
    1e80:	8c 0f       	add	r24, r28
    1e82:	9d 1f       	adc	r25, r29
    1e84:	0e 94 ba 1c 	call	0x3974	; 0x3974 <eeprom_read_dword>
    1e88:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <degreesPerKmh>
    1e8c:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <degreesPerKmh+0x1>
    1e90:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <degreesPerKmh+0x2>
    1e94:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <degreesPerKmh+0x3>
    1e98:	43 c0       	rjmp	.+134    	; 0x1f20 <eep_operations+0x266>
    1e9a:	f1 2c       	mov	r15, r1
			//totalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+=eepAddrShift));
		}
		if (eepAction==EEP_ODOMETER_READ){
    1e9c:	13 e3       	ldi	r17, 0x33	; 51
			uint32_t tempTotalR = 0;
			
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			tempTotalR = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 ba 1c 	call	0x3974	; 0x3974 <eeprom_read_dword>
			if(tempTotalR>totalRotations)totalRotations = tempTotalR;
    1ea4:	80 90 20 01 	lds	r8, 0x0120	; 0x800120 <totalRotations>
    1ea8:	90 90 21 01 	lds	r9, 0x0121	; 0x800121 <totalRotations+0x1>
    1eac:	a0 90 22 01 	lds	r10, 0x0122	; 0x800122 <totalRotations+0x2>
    1eb0:	b0 90 23 01 	lds	r11, 0x0123	; 0x800123 <totalRotations+0x3>
    1eb4:	86 16       	cp	r8, r22
    1eb6:	97 06       	cpc	r9, r23
    1eb8:	a8 06       	cpc	r10, r24
    1eba:	b9 06       	cpc	r11, r25
    1ebc:	40 f4       	brcc	.+16     	; 0x1ece <eep_operations+0x214>
    1ebe:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <totalRotations>
    1ec2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <totalRotations+0x1>
    1ec6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <totalRotations+0x2>
    1eca:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <totalRotations+0x3>
    1ece:	11 50       	subi	r17, 0x01	; 1
    1ed0:	ce 0d       	add	r28, r14
    1ed2:	df 1d       	adc	r29, r15
			//totalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+=eepAddrShift));
		}
		if (eepAction==EEP_ODOMETER_READ){
			uint32_t tempTotalR = 0;
			
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    1ed4:	11 11       	cpse	r17, r1
    1ed6:	e3 cf       	rjmp	.-58     	; 0x1e9e <eep_operations+0x1e4>
    1ed8:	23 c0       	rjmp	.+70     	; 0x1f20 <eep_operations+0x266>
			tempTotalR = eeprom_read_dword((uint32_t*)(eepStartAddress+(eepAddrShift*i)));
			if(tempTotalR>totalRotations)totalRotations = tempTotalR;
			} 
		}
		if (eepAction==EEP_ODOMETER_WRITE){
    1eda:	43 30       	cpi	r20, 0x03	; 3
    1edc:	09 f5       	brne	.+66     	; 0x1f20 <eep_operations+0x266>
			
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
    1ede:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <totalRotations>
    1ee2:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <totalRotations+0x1>
    1ee6:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <totalRotations+0x2>
    1eea:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <totalRotations+0x3>
    1eee:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <odometerCurrentAddress>
    1ef2:	9e 01       	movw	r18, r28
    1ef4:	8e 9d       	mul	r24, r14
    1ef6:	20 0d       	add	r18, r0
    1ef8:	31 1d       	adc	r19, r1
    1efa:	11 24       	eor	r1, r1
    1efc:	c9 01       	movw	r24, r18
    1efe:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <eeprom_write_dword>
			odometerCurrentAddress++;
    1f02:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <odometerCurrentAddress>
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
			if (odometerCurrentAddress>100)odometerCurrentAddress = 0;
    1f08:	85 36       	cpi	r24, 0x65	; 101
    1f0a:	18 f4       	brcc	.+6      	; 0x1f12 <eep_operations+0x258>
			} 
		}
		if (eepAction==EEP_ODOMETER_WRITE){
			
			eeprom_write_dword((uint32_t*)(eepStartAddress+(odometerCurrentAddress*eepAddrShift)),totalRotations);
			odometerCurrentAddress++;
    1f0c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <odometerCurrentAddress>
    1f10:	07 c0       	rjmp	.+14     	; 0x1f20 <eep_operations+0x266>
			if (odometerCurrentAddress>100)odometerCurrentAddress = 0;
    1f12:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <odometerCurrentAddress>
		
		
		
		
		
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <eep_operations+0x266>
			wheelDiameter = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			gearRatio = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			degreesPerKmh = eeprom_read_float((float*)(eepStartAddress+=eepAddrShift));
			//totalRotations = eeprom_read_dword((uint32_t*)(eepStartAddress+=eepAddrShift));
		}
		if (eepAction==EEP_ODOMETER_READ){
    1f18:	42 30       	cpi	r20, 0x02	; 2
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <eep_operations+0x264>
    1f1c:	be cf       	rjmp	.-132    	; 0x1e9a <eep_operations+0x1e0>
    1f1e:	dd cf       	rjmp	.-70     	; 0x1eda <eep_operations+0x220>
		
		
		
		
		
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	bf 90       	pop	r11
    1f2c:	af 90       	pop	r10
    1f2e:	9f 90       	pop	r9
    1f30:	8f 90       	pop	r8
    1f32:	08 95       	ret

00001f34 <presets>:
	0b00000000,
	0b00001000,
	0b00000100			//HALF STEP
};

void presets (void){
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	cf 93       	push	r28


circLength = wheelDiameter * pi/magnetsOnWheel;			//circumferential length between the magnets
    1f3e:	2b ed       	ldi	r18, 0xDB	; 219
    1f40:	3f e0       	ldi	r19, 0x0F	; 15
    1f42:	49 e4       	ldi	r20, 0x49	; 73
    1f44:	50 e4       	ldi	r21, 0x40	; 64
    1f46:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <wheelDiameter>
    1f4a:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <wheelDiameter+0x1>
    1f4e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wheelDiameter+0x2>
    1f52:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <wheelDiameter+0x3>
    1f56:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    1f5a:	6b 01       	movw	r12, r22
    1f5c:	7c 01       	movw	r14, r24
    1f5e:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <magnetsOnWheel>
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatsisf>
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
    1f70:	c7 01       	movw	r24, r14
    1f72:	b6 01       	movw	r22, r12
    1f74:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    1f78:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <circLength>
    1f7c:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <circLength+0x1>
    1f80:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <circLength+0x2>
    1f84:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <circLength+0x3>
timePerTic = 1.0/(F_CPU/TIMER2_PRESCALER);			//counter tic time interval in seconds (16 us, presc=256)
    1f88:	8d eb       	ldi	r24, 0xBD	; 189
    1f8a:	97 e3       	ldi	r25, 0x37	; 55
    1f8c:	a6 e8       	ldi	r26, 0x86	; 134
    1f8e:	b7 e3       	ldi	r27, 0x37	; 55
    1f90:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timePerTic>
    1f94:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timePerTic+0x1>
    1f98:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <timePerTic+0x2>
    1f9c:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <timePerTic+0x3>

	
DDRA|=_BV(3); //ENABLE 1
    1fa0:	d3 9a       	sbi	0x1a, 3	; 26
DDRA|=_BV(0); //ENABLE 2
    1fa2:	d0 9a       	sbi	0x1a, 0	; 26
DDRA|=_BV(2); //PHASE 1
    1fa4:	d2 9a       	sbi	0x1a, 2	; 26
DDRA|=_BV(1); //PHASE 2
    1fa6:	d1 9a       	sbi	0x1a, 1	; 26
DDRD|=_BV(4);//PWM DIAL LIGHT
    1fa8:	8c 9a       	sbi	0x11, 4	; 17
DDRD|=_BV(5);//PWM ARROW LIGHT
    1faa:	8d 9a       	sbi	0x11, 5	; 17


PORTA|=_BV(3);//ENABLE 1 high (disabled)
    1fac:	db 9a       	sbi	0x1b, 3	; 27
PORTA|=_BV(0);//ENABLE 2 high (disabled)
    1fae:	d8 9a       	sbi	0x1b, 0	; 27

PORTB|=_BV(5);//internal pull-up for external buttons
    1fb0:	c5 9a       	sbi	0x18, 5	; 24
PORTB|=_BV(6);
    1fb2:	c6 9a       	sbi	0x18, 6	; 24
PORTB|=_BV(7);
    1fb4:	c7 9a       	sbi	0x18, 7	; 24
	
		//=======================ADC
		ADCSRA |= _BV(ADEN);
    1fb6:	37 9a       	sbi	0x06, 7	; 6
		//=======================
		ADCSRA |= _BV(ADPS0);		//
    1fb8:	30 9a       	sbi	0x06, 0	; 6
		ADCSRA |= _BV(ADPS1);		// ADC prescaler 128
    1fba:	31 9a       	sbi	0x06, 1	; 6
		ADCSRA |= _BV(ADPS2);		//
    1fbc:	32 9a       	sbi	0x06, 2	; 6
	
	//================= reading data from EEPROM
	
	uint8_t firstEepRead;
	
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
    1fbe:	88 e0       	ldi	r24, 0x08	; 8
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 b2 1c 	call	0x3964	; 0x3964 <eeprom_read_byte>
	if (firstEepRead){
    1fc6:	88 23       	and	r24, r24
    1fc8:	79 f0       	breq	.+30     	; 0x1fe8 <presets+0xb4>
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	64 e0       	ldi	r22, 0x04	; 4
    1fce:	88 e0       	ldi	r24, 0x08	; 8
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <eep_operations>
    1fd6:	c3 e3       	ldi	r28, 0x33	; 51
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    1fd8:	43 e0       	ldi	r20, 0x03	; 3
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	80 e8       	ldi	r24, 0x80	; 128
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <eep_operations>
    1fe4:	c1 50       	subi	r28, 0x01	; 1
	uint8_t firstEepRead;
	
	firstEepRead = eeprom_read_byte((uint8_t*)EEPROM_START_ADDRESS);//if the device is starting for the first time the default values have to be written to EEPROM
	if (firstEepRead){
		eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_WRITE);
			for (uint8_t i = 0;i<=ODOMETER_EEP_CELLS;i++){
    1fe6:	c1 f7       	brne	.-16     	; 0x1fd8 <presets+0xa4>
			eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
			}
		}
	eep_operations(EEPROM_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_READ);
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	88 e0       	ldi	r24, 0x08	; 8
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <eep_operations>
	eep_operations(EEP_ODOMETER_START_ADDRESS,EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_READ);	
    1ff4:	42 e0       	ldi	r20, 0x02	; 2
    1ff6:	64 e0       	ldi	r22, 0x04	; 4
    1ff8:	80 e8       	ldi	r24, 0x80	; 128
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <eep_operations>
		
	
		
TCCR2|=_BV(CS21)|_BV(CS22)|_BV(WGM21);
    2000:	85 b5       	in	r24, 0x25	; 37
    2002:	8e 60       	ori	r24, 0x0E	; 14
    2004:	85 bd       	out	0x25, r24	; 37
OCR2 = TIC; //upper limit of Timer2
    2006:	84 e1       	ldi	r24, 0x14	; 20
    2008:	83 bd       	out	0x23, r24	; 35

	//dial and arrow light PWM===============
	TCCR1A = _BV(WGM10)|_BV(WGM11)|_BV(COM1B1)|_BV(COM1A1);
    200a:	83 ea       	ldi	r24, 0xA3	; 163
    200c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12)|_BV(CS10)|_BV(CS11);
    200e:	8b e0       	ldi	r24, 0x0B	; 11
    2010:	8e bd       	out	0x2e, r24	; 46
	OCR1A = pwmArrow;
    2012:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <pwmArrow>
    2016:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <pwmArrow+0x1>
    201a:	9b bd       	out	0x2b, r25	; 43
    201c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = pwmDial;
    201e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pwmDial>
    2022:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <pwmDial+0x1>
    2026:	99 bd       	out	0x29, r25	; 41
    2028:	88 bd       	out	0x28, r24	; 40
	//============================
	if (stepMode==FULL_STEP){
    202a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    202e:	81 11       	cpse	r24, r1
    2030:	23 c0       	rjmp	.+70     	; 0x2078 <presets+0x144>
		kmhPerStep=(360.0/smSteps)/degreesPerKmh;
    2032:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    2036:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <smSteps+0x1>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    2042:	9b 01       	movw	r18, r22
    2044:	ac 01       	movw	r20, r24
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	84 eb       	ldi	r24, 0xB4	; 180
    204c:	93 e4       	ldi	r25, 0x43	; 67
    204e:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    2052:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <degreesPerKmh>
    2056:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <degreesPerKmh+0x1>
    205a:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <degreesPerKmh+0x2>
    205e:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <degreesPerKmh+0x3>
    2062:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    2066:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <kmhPerStep>
    206a:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <kmhPerStep+0x1>
    206e:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <kmhPerStep+0x2>
    2072:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <kmhPerStep+0x3>
    2076:	24 c0       	rjmp	.+72     	; 0x20c0 <presets+0x18c>
		}
	if (stepMode==HALF_STEP){
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	11 f5       	brne	.+68     	; 0x20c0 <presets+0x18c>
		kmhPerStep=(180.0/smSteps)/degreesPerKmh;
    207c:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <smSteps>
    2080:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <smSteps+0x1>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    208c:	9b 01       	movw	r18, r22
    208e:	ac 01       	movw	r20, r24
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	84 e3       	ldi	r24, 0x34	; 52
    2096:	93 e4       	ldi	r25, 0x43	; 67
    2098:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    209c:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <degreesPerKmh>
    20a0:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <degreesPerKmh+0x1>
    20a4:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <degreesPerKmh+0x2>
    20a8:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <degreesPerKmh+0x3>
    20ac:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    20b0:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <kmhPerStep>
    20b4:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <kmhPerStep+0x1>
    20b8:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <kmhPerStep+0x2>
    20bc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <kmhPerStep+0x3>
		}



//display initialization
GLCD_Setup();
    20c0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <GLCD_Setup>
GLCD_Clear();
    20c4:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <GLCD_Clear>
GLCD_SetContrast(lcdContrast);
    20c8:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <lcdContrast>
    20cc:	0e 94 b6 11 	call	0x236c	; 0x236c <GLCD_SetContrast>
GLCD_Render();
    20d0:	0e 94 8c 11 	call	0x2318	; 0x2318 <GLCD_Render>
sei();
    20d4:	78 94       	sei
//if (!arrowCalibrated)arrow_calibration();
MCUCR|= _BV(ISC11); // External falling edge interrupt INT1
    20d6:	85 b7       	in	r24, 0x35	; 53
    20d8:	88 60       	ori	r24, 0x08	; 8
    20da:	85 bf       	out	0x35, r24	; 53
GICR|=_BV(INT1); // External Interrupt Enable INT1
    20dc:	8b b7       	in	r24, 0x3b	; 59
    20de:	80 68       	ori	r24, 0x80	; 128
    20e0:	8b bf       	out	0x3b, r24	; 59



}
    20e2:	cf 91       	pop	r28
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	df 90       	pop	r13
    20ea:	cf 90       	pop	r12
    20ec:	08 95       	ret

000020ee <calculate_speed>:
				
				}
				
}

void calculate_speed(){
    20ee:	cf 93       	push	r28
 
			if(speedTimer>1000){
    20f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <speedTimer>
    20f4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <speedTimer+0x1>
    20f8:	89 3e       	cpi	r24, 0xE9	; 233
    20fa:	93 40       	sbci	r25, 0x03	; 3
    20fc:	e4 f0       	brlt	.+56     	; 0x2136 <calculate_speed+0x48>
						//if(speedRefresh)
						eep_operations(EEP_ODOMETER_START_ADDRESS, EEPROM_ADDRESS_SHIFT,EEP_ODOMETER_WRITE);
    20fe:	43 e0       	ldi	r20, 0x03	; 3
    2100:	64 e0       	ldi	r22, 0x04	; 4
    2102:	80 e8       	ldi	r24, 0x80	; 128
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <eep_operations>
						TIMSK&=~_BV(OCIE2);  //if Hall sensor was not triggered for too long (0,32s) it means that vehicle does not move
    210a:	89 b7       	in	r24, 0x39	; 57
    210c:	8f 77       	andi	r24, 0x7F	; 127
    210e:	89 bf       	out	0x39, r24	; 57
						TCNT2 = 0;
    2110:	14 bc       	out	0x24, r1	; 36
						speedTimer = 0;
    2112:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <speedTimer+0x1>
    2116:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <speedTimer>
						speedTimerRecent = 0;//speedTimer;//?
    211a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <speedTimerRecent+0x1>
    211e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <speedTimerRecent>
						speedKmh = 0;
    2122:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <speedKmh>
    2126:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <speedKmh+0x1>
    212a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <speedKmh+0x2>
    212e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speedKmh+0x3>
						firstMeasure = 0;
    2132:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <firstMeasure>
						
						}
			if((speedRefresh)&&(speedTimerRecent)){
    2136:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <speedRefresh>
    213a:	88 23       	and	r24, r24
    213c:	d1 f1       	breq	.+116    	; 0x21b2 <calculate_speed+0xc4>
    213e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <speedTimerRecent>
    2142:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <speedTimerRecent+0x1>
    2146:	89 2b       	or	r24, r25
    2148:	a1 f1       	breq	.+104    	; 0x21b2 <calculate_speed+0xc4>
						//if (speedTimerRecent>400) 
						speedKmh = 1.0/(timePerTic*speedTimerRecent)*3.6*circLength;			
    214a:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <speedTimerRecent>
    214e:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <speedTimerRecent+0x1>
    2152:	07 2e       	mov	r0, r23
    2154:	00 0c       	add	r0, r0
    2156:	88 0b       	sbc	r24, r24
    2158:	99 0b       	sbc	r25, r25
    215a:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatsisf>
    215e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <timePerTic>
    2162:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <timePerTic+0x1>
    2166:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <timePerTic+0x2>
    216a:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <timePerTic+0x3>
    216e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	80 e8       	ldi	r24, 0x80	; 128
    217c:	9f e3       	ldi	r25, 0x3F	; 63
    217e:	0e 94 30 1a 	call	0x3460	; 0x3460 <__divsf3>
    2182:	26 e6       	ldi	r18, 0x66	; 102
    2184:	36 e6       	ldi	r19, 0x66	; 102
    2186:	46 e6       	ldi	r20, 0x66	; 102
    2188:	50 e4       	ldi	r21, 0x40	; 64
    218a:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    218e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <circLength>
    2192:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <circLength+0x1>
    2196:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <circLength+0x2>
    219a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <circLength+0x3>
    219e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    21a2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <speedKmh>
    21a6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <speedKmh+0x1>
    21aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <speedKmh+0x2>
    21ae:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <speedKmh+0x3>
						}
		
			
		if (speedKmh>scaleMax)speedKmh = scaleMax;
    21b2:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <scaleMax>
    21b6:	6c 2f       	mov	r22, r28
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatsisf>
    21c2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <speedKmh>
    21c6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <speedKmh+0x1>
    21ca:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <speedKmh+0x2>
    21ce:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <speedKmh+0x3>
    21d2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__cmpsf2>
    21d6:	88 23       	and	r24, r24
    21d8:	74 f4       	brge	.+28     	; 0x21f6 <calculate_speed+0x108>
    21da:	6c 2f       	mov	r22, r28
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    21e6:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <speedKmh>
    21ea:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <speedKmh+0x1>
    21ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <speedKmh+0x2>
    21f2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <speedKmh+0x3>
		speedRefresh = 0;
    21f6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <speedRefresh>
														
														
		}
    21fa:	cf 91       	pop	r28
    21fc:	08 95       	ret

000021fe <main>:
}


int main(void)
{
	presets();
    21fe:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <presets>
	
	while(1){
		data_monitor();
    2202:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <data_monitor>
		calculate_speed();
    2206:	0e 94 77 10 	call	0x20ee	; 0x20ee <calculate_speed>
		speed_arrow_update();
    220a:	0e 94 04 0b 	call	0x1608	; 0x1608 <speed_arrow_update>
		signal_monitor();
    220e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <signal_monitor>
		if(button_monitor()) menu_screen();
    2212:	0e 94 5f 0b 	call	0x16be	; 0x16be <button_monitor>
    2216:	88 23       	and	r24, r24
    2218:	a1 f3       	breq	.-24     	; 0x2202 <main+0x4>
    221a:	0e 94 af 0b 	call	0x175e	; 0x175e <menu_screen>

0000221e <GLCD_BufferWrite>:
	__I2C_Stop();
}

static void GLCD_BufferWrite(const uint8_t X, const uint8_t Y, const uint8_t Data)
{
	__GLCD_Buffer[__GLCD_Pointer(X, Y)] = Data;
    221e:	66 95       	lsr	r22
    2220:	66 95       	lsr	r22
    2222:	66 95       	lsr	r22
    2224:	90 e8       	ldi	r25, 0x80	; 128
    2226:	69 9f       	mul	r22, r25
    2228:	b0 01       	movw	r22, r0
    222a:	11 24       	eor	r1, r1
    222c:	68 0f       	add	r22, r24
    222e:	71 1d       	adc	r23, r1
    2230:	fb 01       	movw	r30, r22
    2232:	ed 5c       	subi	r30, 0xCD	; 205
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	40 83       	st	Z, r20
    2238:	08 95       	ret

0000223a <GLCD_BufferRead>:
}

static uint8_t GLCD_BufferRead(const uint8_t X, const uint8_t Y)
{
	//y>>3 = y / 8
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
    223a:	66 95       	lsr	r22
    223c:	66 95       	lsr	r22
    223e:	66 95       	lsr	r22
    2240:	90 e8       	ldi	r25, 0x80	; 128
    2242:	69 9f       	mul	r22, r25
    2244:	b0 01       	movw	r22, r0
    2246:	11 24       	eor	r1, r1
    2248:	68 0f       	add	r22, r24
    224a:	71 1d       	adc	r23, r1
    224c:	fb 01       	movw	r30, r22
    224e:	ed 5c       	subi	r30, 0xCD	; 205
    2250:	fe 4f       	sbci	r31, 0xFE	; 254
}
    2252:	80 81       	ld	r24, Z
    2254:	08 95       	ret

00002256 <GLCD_Send>:
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
{
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	c8 2f       	mov	r28, r24
    2262:	06 2f       	mov	r16, r22
    2264:	17 2f       	mov	r17, r23
    2266:	f4 2e       	mov	r15, r20
	#endif

	do
	{
		//Transmit START signal
		__I2C_Start();
    2268:	0e 94 a7 19 	call	0x334e	; 0x334e <TWI_BeginTransmission>

		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    226c:	0e 94 a4 19 	call	0x3348	; 0x3348 <TWI_Status>
			if ((status != MT_START_TRANSMITTED) && (status != MT_REP_START_TRANSMITTED))
    2270:	88 30       	cpi	r24, 0x08	; 8
    2272:	31 f0       	breq	.+12     	; 0x2280 <GLCD_Send+0x2a>
    2274:	80 31       	cpi	r24, 0x10	; 16
    2276:	21 f0       	breq	.+8      	; 0x2280 <GLCD_Send+0x2a>
			{
				__GLCD.Status = GLCD_Error;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__GLCD>
				break;
    227e:	33 c0       	rjmp	.+102    	; 0x22e6 <GLCD_Send+0x90>
		}
		#endif
		

		//Transmit SLA+W
		__I2C_Transmit(__I2C_SLA_W(__GLCD_I2C_Address));
    2280:	88 e7       	ldi	r24, 0x78	; 120
    2282:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    2286:	0e 94 a4 19 	call	0x3348	; 0x3348 <TWI_Status>
			if ((status != MT_SLA_W_TRANSMITTED_ACK) && (status != MT_SLA_W_TRANSMITTED_NACK))
    228a:	88 31       	cpi	r24, 0x18	; 24
    228c:	31 f0       	breq	.+12     	; 0x229a <GLCD_Send+0x44>
    228e:	80 32       	cpi	r24, 0x20	; 32
    2290:	21 f0       	breq	.+8      	; 0x229a <GLCD_Send+0x44>
			{
				__GLCD.Status = GLCD_Error;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__GLCD>
				break;
    2298:	26 c0       	rjmp	.+76     	; 0x22e6 <GLCD_Send+0x90>
			}
		#endif
		

		//Transmit control byte
		__I2C_Transmit(Control);
    229a:	8c 2f       	mov	r24, r28
    229c:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_Transmit>
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
    22a0:	0e 94 a4 19 	call	0x3348	; 0x3348 <TWI_Status>
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    22a4:	88 32       	cpi	r24, 0x28	; 40
    22a6:	19 f4       	brne	.+6      	; 0x22ae <GLCD_Send+0x58>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    22a8:	f1 10       	cpse	r15, r1
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <GLCD_Send+0x64>
    22ac:	1a c0       	rjmp	.+52     	; 0x22e2 <GLCD_Send+0x8c>

		//Transmit control byte
		__I2C_Transmit(Control);
		#if (GLCD_Error_Checking != 0)
			status = __I2C_Status();
			if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    22ae:	80 33       	cpi	r24, 0x30	; 48
    22b0:	d9 f3       	breq	.-10     	; 0x22a8 <GLCD_Send+0x52>
			{
				__GLCD.Status = GLCD_Error;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__GLCD>
				break;
    22b8:	16 c0       	rjmp	.+44     	; 0x22e6 <GLCD_Send+0x90>
    22ba:	c0 2f       	mov	r28, r16
    22bc:	d1 2f       	mov	r29, r17
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
	}
}

static void GLCD_Send(const uint8_t Control, uint8_t *Data, const uint8_t Length)
    22be:	8e 01       	movw	r16, r28
    22c0:	0f 5f       	subi	r16, 0xFF	; 255
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	fa 94       	dec	r15
    22c6:	0f 0d       	add	r16, r15
    22c8:	11 1d       	adc	r17, r1
		

		for (i = 0 ; i < Length ; i++)
		{
			//Transmit data
			__I2C_Transmit(Data[i]);
    22ca:	89 91       	ld	r24, Y+
    22cc:	0e 94 b5 19 	call	0x336a	; 0x336a <TWI_Transmit>
			#if (GLCD_Error_Checking != 0)
				status = __I2C_Status();
    22d0:	0e 94 a4 19 	call	0x3348	; 0x3348 <TWI_Status>
				if ((status != MT_DATA_TRANSMITTED_ACK) && (status != MT_DATA_TRANSMITTED_NACK))
    22d4:	88 32       	cpi	r24, 0x28	; 40
    22d6:	11 f0       	breq	.+4      	; 0x22dc <GLCD_Send+0x86>
    22d8:	80 33       	cpi	r24, 0x30	; 48
    22da:	19 f4       	brne	.+6      	; 0x22e2 <GLCD_Send+0x8c>
				break;
			}
		#endif
		

		for (i = 0 ; i < Length ; i++)
    22dc:	c0 17       	cp	r28, r16
    22de:	d1 07       	cpc	r29, r17
    22e0:	a1 f7       	brne	.-24     	; 0x22ca <GLCD_Send+0x74>
			#endif
			
		}

		#if (GLCD_Error_Checking != 0)
			__GLCD.Status = GLCD_Ok;
    22e2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__GLCD>
		
	}
	while (0);
	
	//Transmit STOP signal
	__I2C_Stop();
    22e6:	0e 94 af 19 	call	0x335e	; 0x335e <TWI_EndTransmission>
}
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	08 95       	ret

000022f6 <GLCD_SendCommand>:
static void Int2bcd(int32_t Value, char BCD[]);
//---------------------------------------------//

//----- Functions -------------//
void GLCD_SendCommand(uint8_t Command)
{
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	1f 92       	push	r1
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	89 83       	std	Y+1, r24	; 0x01
	GLCD_Send(0<<__GLCD_DC, &Command, 1);
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	be 01       	movw	r22, r28
    2306:	6f 5f       	subi	r22, 0xFF	; 255
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	0e 94 2b 11 	call	0x2256	; 0x2256 <GLCD_Send>
}
    2310:	0f 90       	pop	r0
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <GLCD_Render>:
		return (__GLCD.Status);
	}
#endif

void GLCD_Render(void)
{
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
	//							= (Width >> 4) * (Height >> 3)
	uint8_t i, loop;
	loop = (__GLCD_Screen_Width>>4) * (__GLCD_Screen_Height>>3);

	//Set columns
	GLCD_SendCommand(__GLCD_Command_Column_Address_Set);			//0x21
    231c:	81 e2       	ldi	r24, 0x21	; 33
    231e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Width - 1);				//End
    2328:	8f e7       	ldi	r24, 0x7F	; 127
    232a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	//Set rows
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
    232e:	82 e2       	ldi	r24, 0x22	; 34
    2330:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);									//Start
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End
    233a:	87 e0       	ldi	r24, 0x07	; 7
    233c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
    2340:	c0 e0       	ldi	r28, 0x00	; 0
    2342:	d0 e0       	ldi	r29, 0x00	; 0

	//Send buffer
	for (i = 0 ; i < loop ; i++)
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
    2344:	be 01       	movw	r22, r28
    2346:	62 95       	swap	r22
    2348:	72 95       	swap	r23
    234a:	70 7f       	andi	r23, 0xF0	; 240
    234c:	76 27       	eor	r23, r22
    234e:	60 7f       	andi	r22, 0xF0	; 240
    2350:	76 27       	eor	r23, r22
    2352:	6d 5c       	subi	r22, 0xCD	; 205
    2354:	7e 4f       	sbci	r23, 0xFE	; 254
    2356:	40 e1       	ldi	r20, 0x10	; 16
    2358:	80 e4       	ldi	r24, 0x40	; 64
    235a:	0e 94 2b 11 	call	0x2256	; 0x2256 <GLCD_Send>
    235e:	21 96       	adiw	r28, 0x01	; 1
	GLCD_SendCommand(__GLCD_Command_Page_Address_Set);			//0x22
	GLCD_SendCommand(0x00);									//Start
	GLCD_SendCommand(__GLCD_Screen_Lines - 1);				//End

	//Send buffer
	for (i = 0 ; i < loop ; i++)
    2360:	c0 34       	cpi	r28, 0x40	; 64
    2362:	d1 05       	cpc	r29, r1
    2364:	79 f7       	brne	.-34     	; 0x2344 <GLCD_Render+0x2c>
		GLCD_Send(1<<__GLCD_DC, &__GLCD_Buffer[i<<4], 16);
}
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <GLCD_SetContrast>:
{
	GLCD_SendCommand(On ? __GLCD_Command_Display_On : __GLCD_Command_Display_Off);
}

void GLCD_SetContrast(const uint8_t Contrast)
{
    236c:	cf 93       	push	r28
    236e:	c8 2f       	mov	r28, r24
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);
    2370:	81 e8       	ldi	r24, 0x81	; 129
    2372:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(Contrast);
    2376:	8c 2f       	mov	r24, r28
    2378:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
}
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <GLCD_GotoX>:
	}
}

void GLCD_GotoX(const uint8_t X)
{
	if (X < __GLCD_Screen_Width)
    2380:	88 23       	and	r24, r24
    2382:	14 f0       	brlt	.+4      	; 0x2388 <GLCD_GotoX+0x8>
		__GLCD.X = X;
    2384:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__GLCD+0x1>
    2388:	08 95       	ret

0000238a <GLCD_GotoY>:
}

void GLCD_GotoY(const uint8_t Y)
{
	if (__GLCD.Y < __GLCD_Screen_Height)
    238a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__GLCD+0x2>
    238e:	90 34       	cpi	r25, 0x40	; 64
    2390:	10 f4       	brcc	.+4      	; 0x2396 <GLCD_GotoY+0xc>
		__GLCD.Y = Y;
    2392:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__GLCD+0x2>
    2396:	08 95       	ret

00002398 <GLCD_GotoXY>:
}

void GLCD_GotoXY(const uint8_t X, const uint8_t Y)
{
    2398:	cf 93       	push	r28
    239a:	c6 2f       	mov	r28, r22
	GLCD_GotoX(X);
    239c:	0e 94 c0 11 	call	0x2380	; 0x2380 <GLCD_GotoX>
	GLCD_GotoY(Y);
    23a0:	8c 2f       	mov	r24, r28
    23a2:	0e 94 c5 11 	call	0x238a	; 0x238a <GLCD_GotoY>
}
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <GLCD_Setup>:

	GLCD_Reset();
	#endif

	//Setup I2C hardware
	__I2C_Setup();
    23aa:	0e 94 9a 19 	call	0x3334	; 0x3334 <TWI_Setup>

	//Commands needed for initialization
	//-------------------------------------------------------------
	GLCD_SendCommand(__GLCD_Command_Display_Off);					//0xAE
    23ae:	8e ea       	ldi	r24, 0xAE	; 174
    23b0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Clock_Div_Ratio_Set);	//0xD5
    23b4:	85 ed       	ldi	r24, 0xD5	; 213
    23b6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0xF0);											//Suggest ratio
    23ba:	80 ef       	ldi	r24, 0xF0	; 240
    23bc:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Multiplex_Radio_Set);			//0xA8
    23c0:	88 ea       	ldi	r24, 0xA8	; 168
    23c2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Screen_Height - 1);
    23c6:	8f e3       	ldi	r24, 0x3F	; 63
    23c8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Display_Offset_Set);			//0xD3
    23cc:	83 ed       	ldi	r24, 0xD3	; 211
    23ce:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//No offset
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Charge_Pump_Set);				//0x8D
    23d8:	8d e8       	ldi	r24, 0x8D	; 141
    23da:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0x14);											//Enable charge pump
    23de:	84 e1       	ldi	r24, 0x14	; 20
    23e0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_Start_Line_Set | 0x00);	//0x40 | Start line
    23e4:	80 e4       	ldi	r24, 0x40	; 64
    23e6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Memory_Addressing_Set);				//0x20
    23ea:	80 e2       	ldi	r24, 0x20	; 32
    23ec:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0x00);											//Horizontal Addressing - Operate like KS0108
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	
	GLCD_SendCommand(__GLCD_Command_Segment_Remap_Set | 0x01);		//0xA0 - Left towards Right
    23f6:	81 ea       	ldi	r24, 0xA1	; 161
    23f8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Output_Scan_Dec);			//0xC8 - Up towards Down
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Com_Pins_Set);					//0xDA
    2402:	8a ed       	ldi	r24, 0xDA	; 218
    2404:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	#if (GLCD_Size == GLCD_128_64)
		GLCD_SendCommand(0x12);										//Sequential COM pin configuration
    2408:	82 e1       	ldi	r24, 0x12	; 18
    240a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#elif (GLCD_Size == GLCD_96x16)
		GLCD_SendCommand(0x02);										//Alternative COM pin configuration
	#endif
	
	GLCD_SendCommand(__GLCD_Command_Constrast_Set);					//0x81
    240e:	81 e8       	ldi	r24, 0x81	; 129
    2410:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0xFF);
    2414:	8f ef       	ldi	r24, 0xFF	; 255
    2416:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Precharge_Period_Set);			//0xD9
    241a:	89 ed       	ldi	r24, 0xD9	; 217
    241c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0xF1);
    2420:	81 ef       	ldi	r24, 0xF1	; 241
    2422:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_VCOMH_Deselect_Level_Set);		//0xDB
    2426:	8b ed       	ldi	r24, 0xDB	; 219
    2428:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(0x20);
    242c:	80 e2       	ldi	r24, 0x20	; 32
    242e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>

	GLCD_SendCommand(__GLCD_Command_Display_All_On_Resume);			//0xA4
    2432:	84 ea       	ldi	r24, 0xA4	; 164
    2434:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_Normal);				//0xA6
    2438:	86 ea       	ldi	r24, 0xA6	; 166
    243a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Scroll_Deactivate);				//0x2E
    243e:	8e e2       	ldi	r24, 0x2E	; 46
    2440:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	GLCD_SendCommand(__GLCD_Command_Display_On);					//0xAF
    2444:	8f ea       	ldi	r24, 0xAF	; 175
    2446:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <GLCD_SendCommand>
	//-------------------------------------------------------------

	//Go to 0,0
	GLCD_GotoXY(0, 0);
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
	
	//Reset GLCD structure
	__GLCD.Mode = GLCD_Non_Inverted;
    2452:	86 ea       	ldi	r24, 0xA6	; 166
    2454:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__GLCD+0x3>
	__GLCD.X = __GLCD.Y = __GLCD.Font.Width = __GLCD.Font.Height = __GLCD.Font.Lines = 0;
    2458:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__GLCD+0x8>
    245c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__GLCD+0x7>
    2460:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__GLCD+0x6>
    2464:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__GLCD+0x2>
    2468:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__GLCD+0x1>
    246c:	08 95       	ret

0000246e <GLCD_GotoLine>:
	GLCD_GotoY(Y);
}

void GLCD_GotoLine(const uint8_t Line)
{
	if (Line < __GLCD_Screen_Lines)
    246e:	88 30       	cpi	r24, 0x08	; 8
    2470:	28 f4       	brcc	.+10     	; 0x247c <GLCD_GotoLine+0xe>
		__GLCD.Y = Line * __GLCD_Screen_Line_Height;
    2472:	88 0f       	add	r24, r24
    2474:	88 0f       	add	r24, r24
    2476:	88 0f       	add	r24, r24
    2478:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__GLCD+0x2>
    247c:	08 95       	ret

0000247e <GLCD_GetX>:
}

uint8_t GLCD_GetX(void)
{
	return __GLCD.X;
}
    247e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    2482:	08 95       	ret

00002484 <GLCD_SetPixel>:
{
	return (__GLCD_getLine(__GLCD.Y));
}

void GLCD_SetPixel(const uint8_t X, const uint8_t Y, enum Color_t Color)
{
    2484:	8f 92       	push	r8
    2486:	9f 92       	push	r9
    2488:	af 92       	push	r10
    248a:	bf 92       	push	r11
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	06 2f       	mov	r16, r22
    249e:	14 2f       	mov	r17, r20
	uint8_t data = 0;
	
	//Goto to point
	GLCD_GotoXY(X, Y);
    24a0:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>

	//Read data
	data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    24a4:	d0 91 2b 01 	lds	r29, 0x012B	; 0x80012b <__GLCD+0x2>
    24a8:	c0 91 2a 01 	lds	r28, 0x012A	; 0x80012a <__GLCD+0x1>
    24ac:	6d 2f       	mov	r22, r29
    24ae:	8c 2f       	mov	r24, r28
    24b0:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
	
	//Set pixel
	if (Color == GLCD_Black)
    24b4:	1f 3f       	cpi	r17, 0xFF	; 255
    24b6:	91 f4       	brne	.+36     	; 0x24dc <GLCD_SetPixel+0x58>
		BitSet(data, Y % 8);
    24b8:	90 2f       	mov	r25, r16
    24ba:	97 70       	andi	r25, 0x07	; 7
    24bc:	81 2c       	mov	r8, r1
    24be:	91 2c       	mov	r9, r1
    24c0:	54 01       	movw	r10, r8
    24c2:	83 94       	inc	r8
    24c4:	75 01       	movw	r14, r10
    24c6:	64 01       	movw	r12, r8
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <GLCD_SetPixel+0x4e>
    24ca:	cc 0c       	add	r12, r12
    24cc:	dd 1c       	adc	r13, r13
    24ce:	ee 1c       	adc	r14, r14
    24d0:	ff 1c       	adc	r15, r15
    24d2:	9a 95       	dec	r25
    24d4:	d2 f7       	brpl	.-12     	; 0x24ca <GLCD_SetPixel+0x46>
    24d6:	48 2f       	mov	r20, r24
    24d8:	4c 29       	or	r20, r12
    24da:	13 c0       	rjmp	.+38     	; 0x2502 <GLCD_SetPixel+0x7e>
	else
		BitClear(data, Y % 8);
    24dc:	07 70       	andi	r16, 0x07	; 7
    24de:	c1 2c       	mov	r12, r1
    24e0:	d1 2c       	mov	r13, r1
    24e2:	76 01       	movw	r14, r12
    24e4:	c3 94       	inc	r12
    24e6:	b7 01       	movw	r22, r14
    24e8:	a6 01       	movw	r20, r12
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <GLCD_SetPixel+0x70>
    24ec:	44 0f       	add	r20, r20
    24ee:	55 1f       	adc	r21, r21
    24f0:	66 1f       	adc	r22, r22
    24f2:	77 1f       	adc	r23, r23
    24f4:	0a 95       	dec	r16
    24f6:	d2 f7       	brpl	.-12     	; 0x24ec <GLCD_SetPixel+0x68>
    24f8:	8a 01       	movw	r16, r20
    24fa:	9b 01       	movw	r18, r22
    24fc:	00 95       	com	r16
    24fe:	48 2f       	mov	r20, r24
    2500:	40 23       	and	r20, r16
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    2502:	6d 2f       	mov	r22, r29
    2504:	8c 2f       	mov	r24, r28
    2506:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
}
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	ff 90       	pop	r15
    2514:	ef 90       	pop	r14
    2516:	df 90       	pop	r13
    2518:	cf 90       	pop	r12
    251a:	bf 90       	pop	r11
    251c:	af 90       	pop	r10
    251e:	9f 90       	pop	r9
    2520:	8f 90       	pop	r8
    2522:	08 95       	ret

00002524 <GLCD_SetPixels>:

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2524:	3f 92       	push	r3
    2526:	4f 92       	push	r4
    2528:	5f 92       	push	r5
    252a:	6f 92       	push	r6
    252c:	7f 92       	push	r7
    252e:	8f 92       	push	r8
    2530:	9f 92       	push	r9
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	98 2e       	mov	r9, r24
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2548:	88 23       	and	r24, r24
    254a:	0c f4       	brge	.+2      	; 0x254e <GLCD_SetPixels+0x2a>
    254c:	c6 c0       	rjmp	.+396    	; 0x26da <GLCD_SetPixels+0x1b6>
    254e:	44 23       	and	r20, r20
    2550:	0c f4       	brge	.+2      	; 0x2554 <GLCD_SetPixels+0x30>
    2552:	c3 c0       	rjmp	.+390    	; 0x26da <GLCD_SetPixels+0x1b6>
    2554:	60 34       	cpi	r22, 0x40	; 64
    2556:	08 f0       	brcs	.+2      	; 0x255a <GLCD_SetPixels+0x36>
    2558:	c0 c0       	rjmp	.+384    	; 0x26da <GLCD_SetPixels+0x1b6>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    255a:	20 34       	cpi	r18, 0x40	; 64
    255c:	08 f0       	brcs	.+2      	; 0x2560 <GLCD_SetPixels+0x3c>
    255e:	bd c0       	rjmp	.+378    	; 0x26da <GLCD_SetPixels+0x1b6>
	{
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
    2560:	11 e0       	ldi	r17, 0x01	; 1
    2562:	81 2e       	mov	r8, r17
    2564:	86 1a       	sub	r8, r22
    2566:	82 0e       	add	r8, r18
		width = X2 - X1 + 1;
    2568:	18 1b       	sub	r17, r24
    256a:	14 0f       	add	r17, r20
		offset = Y1 % __GLCD_Screen_Line_Height;
    256c:	46 2f       	mov	r20, r22
    256e:	47 70       	andi	r20, 0x07	; 7
		Y1 -= offset;
    2570:	76 2e       	mov	r7, r22
    2572:	74 1a       	sub	r7, r20
		mask = 0xFF;
		data = 0;

		//Calculate mask for top fractioned region
		if (height <(__GLCD_Screen_Line_Height - offset))
    2574:	e8 2c       	mov	r14, r8
    2576:	f1 2c       	mov	r15, r1
    2578:	88 e0       	ldi	r24, 0x08	; 8
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	84 1b       	sub	r24, r20
    257e:	91 09       	sbc	r25, r1
    2580:	e8 16       	cp	r14, r24
    2582:	f9 06       	cpc	r15, r25
    2584:	7c f4       	brge	.+30     	; 0x25a4 <GLCD_SetPixels+0x80>
		{
			mask >>=(__GLCD_Screen_Line_Height - height);
    2586:	88 e0       	ldi	r24, 0x08	; 8
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	8e 19       	sub	r24, r14
    258c:	9f 09       	sbc	r25, r15
    258e:	2f ef       	ldi	r18, 0xFF	; 255
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	59 01       	movw	r10, r18
    2594:	02 c0       	rjmp	.+4      	; 0x259a <GLCD_SetPixels+0x76>
    2596:	b5 94       	asr	r11
    2598:	a7 94       	ror	r10
    259a:	8a 95       	dec	r24
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <GLCD_SetPixels+0x72>
    259e:	8a 2d       	mov	r24, r10
			h = height;
    25a0:	68 2c       	mov	r6, r8
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <GLCD_SetPixels+0x88>
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
    25a4:	88 e0       	ldi	r24, 0x08	; 8
    25a6:	68 2e       	mov	r6, r24
    25a8:	64 1a       	sub	r6, r20
		uint8_t height, width, offset, mask, h, i, data;
		height = Y2 - Y1 + 1;
		width = X2 - X1 + 1;
		offset = Y1 % __GLCD_Screen_Line_Height;
		Y1 -= offset;
		mask = 0xFF;
    25aa:	8f ef       	ldi	r24, 0xFF	; 255
			mask >>=(__GLCD_Screen_Line_Height - height);
			h = height;
		}
		else
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;
    25ac:	a8 2e       	mov	r10, r24
    25ae:	b1 2c       	mov	r11, r1
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <GLCD_SetPixels+0x92>
    25b2:	aa 0c       	add	r10, r10
    25b4:	bb 1c       	adc	r11, r11
    25b6:	4a 95       	dec	r20
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <GLCD_SetPixels+0x8e>
    25ba:	3a 2c       	mov	r3, r10

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
    25bc:	67 2d       	mov	r22, r7
    25be:	89 2d       	mov	r24, r9
    25c0:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		for (i = 0 ; i < width ; i++)
    25c4:	11 23       	and	r17, r17
    25c6:	c9 f1       	breq	.+114    	; 0x263a <GLCD_SetPixels+0x116>
    25c8:	51 2c       	mov	r5, r1
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    25ca:	0f 2e       	mov	r0, r31
    25cc:	fb e2       	ldi	r31, 0x2B	; 43
    25ce:	cf 2e       	mov	r12, r31
    25d0:	f1 e0       	ldi	r31, 0x01	; 1
    25d2:	df 2e       	mov	r13, r31
    25d4:	f0 2d       	mov	r31, r0
    25d6:	ca e2       	ldi	r28, 0x2A	; 42
    25d8:	d1 e0       	ldi	r29, 0x01	; 1
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    25da:	a0 94       	com	r10
		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
		{
			//Read
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    25dc:	f6 01       	movw	r30, r12
    25de:	40 80       	ld	r4, Z
    25e0:	b8 80       	ld	r11, Y
    25e2:	64 2d       	mov	r22, r4
    25e4:	8b 2d       	mov	r24, r11
    25e6:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
			//Mask
			data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    25ea:	0f 3f       	cpi	r16, 0xFF	; 255
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <GLCD_SetPixels+0xd0>
    25ee:	48 2f       	mov	r20, r24
    25f0:	43 29       	or	r20, r3
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <GLCD_SetPixels+0xd4>
    25f4:	48 2f       	mov	r20, r24
    25f6:	4a 21       	and	r20, r10
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    25f8:	9b 2d       	mov	r25, r11
    25fa:	9f 5f       	subi	r25, 0xFF	; 255
    25fc:	98 83       	st	Y, r25
    25fe:	64 2d       	mov	r22, r4
    2600:	8b 2d       	mov	r24, r11
    2602:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
			h = __GLCD_Screen_Line_Height - offset;
		mask <<= offset;

		//Draw fractional rows at the top of the region
		GLCD_GotoXY(X1, Y1);
		for (i = 0 ; i < width ; i++)
    2606:	53 94       	inc	r5
    2608:	51 12       	cpse	r5, r17
    260a:	e8 cf       	rjmp	.-48     	; 0x25dc <GLCD_SetPixels+0xb8>
    260c:	16 c0       	rjmp	.+44     	; 0x263a <GLCD_SetPixels+0x116>

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
    260e:	c8 5f       	subi	r28, 0xF8	; 248
			GLCD_GotoXY(X1, Y1);
    2610:	6c 2f       	mov	r22, r28
    2612:	89 2d       	mov	r24, r9
    2614:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    2618:	11 23       	and	r17, r17
    261a:	f1 f0       	breq	.+60     	; 0x2658 <GLCD_SetPixels+0x134>
    261c:	7a 2c       	mov	r7, r10
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    261e:	f6 01       	movw	r30, r12
    2620:	60 81       	ld	r22, Z
    2622:	f2 01       	movw	r30, r4
    2624:	80 81       	ld	r24, Z
    2626:	98 2f       	mov	r25, r24
    2628:	9f 5f       	subi	r25, 0xFF	; 255
    262a:	90 83       	st	Z, r25
    262c:	40 2f       	mov	r20, r16
    262e:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    2632:	73 94       	inc	r7
    2634:	71 16       	cp	r7, r17
    2636:	81 f0       	breq	.+32     	; 0x2658 <GLCD_SetPixels+0x134>
    2638:	f2 cf       	rjmp	.-28     	; 0x261e <GLCD_SetPixels+0xfa>
    263a:	c7 2d       	mov	r28, r7
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    263c:	67 18       	sub	r6, r7
		while ((h + __GLCD_Screen_Line_Height) <= height)
		{
			h += __GLCD_Screen_Line_Height;
			Y1 += __GLCD_Screen_Line_Height;
			GLCD_GotoXY(X1, Y1);
			for (i = 0 ; i < width ; i++)
    263e:	a1 2c       	mov	r10, r1
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
    2640:	0f 2e       	mov	r0, r31
    2642:	fb e2       	ldi	r31, 0x2B	; 43
    2644:	cf 2e       	mov	r12, r31
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	df 2e       	mov	r13, r31
    264a:	f0 2d       	mov	r31, r0
    264c:	0f 2e       	mov	r0, r31
    264e:	fa e2       	ldi	r31, 0x2A	; 42
    2650:	4f 2e       	mov	r4, r31
    2652:	f1 e0       	ldi	r31, 0x01	; 1
    2654:	5f 2e       	mov	r5, r31
    2656:	f0 2d       	mov	r31, r0
	
	//Sent data
	GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
}

void GLCD_SetPixels(const uint8_t X1, uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
    2658:	26 2d       	mov	r18, r6
    265a:	2c 0f       	add	r18, r28
			//Write
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}

		//Full rows
		while ((h + __GLCD_Screen_Line_Height) <= height)
    265c:	e2 2f       	mov	r30, r18
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	cf 01       	movw	r24, r30
    2662:	08 96       	adiw	r24, 0x08	; 8
    2664:	e8 16       	cp	r14, r24
    2666:	f9 06       	cpc	r15, r25
    2668:	94 f6       	brge	.-92     	; 0x260e <GLCD_SetPixels+0xea>
			for (i = 0 ; i < width ; i++)
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, Color);
		}

		//Fractional rows at the bottom of the region
		if (h < height)
    266a:	28 15       	cp	r18, r8
    266c:	b0 f5       	brcc	.+108    	; 0x26da <GLCD_SetPixels+0x1b6>
		{
			mask = ~(0xFF << (height - h));
    266e:	ee 1a       	sub	r14, r30
    2670:	ff 0a       	sbc	r15, r31
    2672:	8f ef       	ldi	r24, 0xFF	; 255
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 01       	movw	r18, r24
    2678:	02 c0       	rjmp	.+4      	; 0x267e <GLCD_SetPixels+0x15a>
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	ea 94       	dec	r14
    2680:	e2 f7       	brpl	.-8      	; 0x267a <GLCD_SetPixels+0x156>
    2682:	79 01       	movw	r14, r18
    2684:	e0 94       	com	r14
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
    2686:	6c 2f       	mov	r22, r28
    2688:	68 5f       	subi	r22, 0xF8	; 248
    268a:	89 2d       	mov	r24, r9
    268c:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
			for (i = 0 ; i < width ; i++)
    2690:	11 23       	and	r17, r17
    2692:	19 f1       	breq	.+70     	; 0x26da <GLCD_SetPixels+0x1b6>
    2694:	b1 2c       	mov	r11, r1
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2696:	0f 2e       	mov	r0, r31
    2698:	fb e2       	ldi	r31, 0x2B	; 43
    269a:	cf 2e       	mov	r12, r31
    269c:	f1 e0       	ldi	r31, 0x01	; 1
    269e:	df 2e       	mov	r13, r31
    26a0:	f0 2d       	mov	r31, r0
    26a2:	ca e2       	ldi	r28, 0x2A	; 42
    26a4:	d1 e0       	ldi	r29, 0x01	; 1
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    26a6:	9e 2c       	mov	r9, r14
    26a8:	90 94       	com	r9
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
			{
				//Read
				data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    26aa:	f6 01       	movw	r30, r12
    26ac:	a0 80       	ld	r10, Z
    26ae:	f8 80       	ld	r15, Y
    26b0:	6a 2d       	mov	r22, r10
    26b2:	8f 2d       	mov	r24, r15
    26b4:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
				//Mask
				data = ((Color == GLCD_Black) ? (data | mask) : (data & ~mask));
    26b8:	0f 3f       	cpi	r16, 0xFF	; 255
    26ba:	19 f4       	brne	.+6      	; 0x26c2 <GLCD_SetPixels+0x19e>
    26bc:	48 2f       	mov	r20, r24
    26be:	4e 29       	or	r20, r14
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <GLCD_SetPixels+0x1a2>
    26c2:	48 2f       	mov	r20, r24
    26c4:	49 21       	and	r20, r9
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    26c6:	9f 2d       	mov	r25, r15
    26c8:	9f 5f       	subi	r25, 0xFF	; 255
    26ca:	98 83       	st	Y, r25
    26cc:	6a 2d       	mov	r22, r10
    26ce:	8f 2d       	mov	r24, r15
    26d0:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
		//Fractional rows at the bottom of the region
		if (h < height)
		{
			mask = ~(0xFF << (height - h));
			GLCD_GotoXY(X1, Y1 + __GLCD_Screen_Line_Height);
			for (i = 0 ; i < width ; i++)
    26d4:	b3 94       	inc	r11
    26d6:	b1 12       	cpse	r11, r17
    26d8:	e8 cf       	rjmp	.-48     	; 0x26aa <GLCD_SetPixels+0x186>
				//Write
				GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
			}
		}
	}
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	df 90       	pop	r13
    26e8:	cf 90       	pop	r12
    26ea:	bf 90       	pop	r11
    26ec:	af 90       	pop	r10
    26ee:	9f 90       	pop	r9
    26f0:	8f 90       	pop	r8
    26f2:	7f 90       	pop	r7
    26f4:	6f 90       	pop	r6
    26f6:	5f 90       	pop	r5
    26f8:	4f 90       	pop	r4
    26fa:	3f 90       	pop	r3
    26fc:	08 95       	ret

000026fe <GLCD_DrawBitmap>:

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
    26fe:	2f 92       	push	r2
    2700:	3f 92       	push	r3
    2702:	4f 92       	push	r4
    2704:	5f 92       	push	r5
    2706:	6f 92       	push	r6
    2708:	7f 92       	push	r7
    270a:	8f 92       	push	r8
    270c:	9f 92       	push	r9
    270e:	af 92       	push	r10
    2710:	bf 92       	push	r11
    2712:	cf 92       	push	r12
    2714:	df 92       	push	r13
    2716:	ef 92       	push	r14
    2718:	ff 92       	push	r15
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	2c 97       	sbiw	r28, 0x0c	; 12
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	5c 01       	movw	r10, r24
    2734:	66 2e       	mov	r6, r22
    2736:	29 83       	std	Y+1, r18	; 0x01
	uint16_t lines, bmpRead, bmpReadPrev;
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    2738:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__GLCD+0x1>
    273c:	2f 83       	std	Y+7, r18	; 0x07
	y = y2 = __GLCD.Y;
    273e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__GLCD+0x2>
    2742:	3a 87       	std	Y+10, r19	; 0x0a
	
	//#2 - Read width - First two bytes
	data = __GLCD.X + Width;														//"data" is used temporarily
    2744:	82 2f       	mov	r24, r18
    2746:	86 0f       	add	r24, r22
	//If character exceed screen bounds, reduce
	if (data >= __GLCD_Screen_Width)
    2748:	1a f4       	brpl	.+6      	; 0x2750 <GLCD_DrawBitmap+0x52>
		Width -= data - __GLCD_Screen_Width;
    274a:	80 e8       	ldi	r24, 0x80	; 128
    274c:	68 2e       	mov	r6, r24
    274e:	62 1a       	sub	r6, r18
	
	//#3 - Read height - Second two bytes - Convert to lines
	lines = (Height + __GLCD_Screen_Line_Height - 1) / __GLCD_Screen_Line_Height;	//lines = Ceiling(A/B) = (A+B-1)/B
    2750:	84 2f       	mov	r24, r20
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	07 96       	adiw	r24, 0x07	; 7
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	95 95       	asr	r25
    2760:	87 95       	ror	r24
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	9e 83       	std	Y+6, r25	; 0x06
	data = __GLCD.Y / __GLCD_Screen_Line_Height + lines;							//"data" is used temporarily
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	96 95       	lsr	r25
    276a:	96 95       	lsr	r25
    276c:	96 95       	lsr	r25
    276e:	89 0f       	add	r24, r25
	//If bitmap exceed screen bounds, reduce
	if (data > __GLCD_Screen_Lines)
    2770:	89 30       	cpi	r24, 0x09	; 9
    2772:	48 f0       	brcs	.+18     	; 0x2786 <GLCD_DrawBitmap+0x88>
		lines -= data - __GLCD_Screen_Lines;
    2774:	2d 81       	ldd	r18, Y+5	; 0x05
    2776:	3e 81       	ldd	r19, Y+6	; 0x06
    2778:	28 5f       	subi	r18, 0xF8	; 248
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	a9 01       	movw	r20, r18
    277e:	48 1b       	sub	r20, r24
    2780:	51 09       	sbc	r21, r1
    2782:	5e 83       	std	Y+6, r21	; 0x06
    2784:	4d 83       	std	Y+5, r20	; 0x05
	
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    2786:	4a 84       	ldd	r4, Y+10	; 0x0a
    2788:	57 e0       	ldi	r21, 0x07	; 7
    278a:	45 22       	and	r4, r21
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	89 2b       	or	r24, r25
    2792:	09 f4       	brne	.+2      	; 0x2796 <GLCD_DrawBitmap+0x98>
    2794:	fa c0       	rjmp	.+500    	; 0x298a <GLCD_DrawBitmap+0x28c>
	uint8_t x, y, y2, i, j, overflow, data, dataPrev;
	lines = bmpRead = bmpReadPrev = x = y = i = j = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	9c 83       	std	Y+4, r25	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    279a:	71 2c       	mov	r7, r1
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    279c:	26 2c       	mov	r2, r6
    279e:	31 2c       	mov	r3, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    27a0:	51 2c       	mov	r5, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    27a2:	88 e0       	ldi	r24, 0x08	; 8
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	fc 01       	movw	r30, r24
    27a8:	e4 19       	sub	r30, r4
    27aa:	f1 09       	sbc	r31, r1
    27ac:	fb 83       	std	Y+3, r31	; 0x03
    27ae:	ea 83       	std	Y+2, r30	; 0x02
				data |= dataPrev;
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    27b0:	0f 2e       	mov	r0, r31
    27b2:	fb e2       	ldi	r31, 0x2B	; 43
    27b4:	cf 2e       	mov	r12, r31
    27b6:	f1 e0       	ldi	r31, 0x01	; 1
    27b8:	df 2e       	mov	r13, r31
    27ba:	f0 2d       	mov	r31, r0
    27bc:	0a e2       	ldi	r16, 0x2A	; 42
    27be:	11 e0       	ldi	r17, 0x01	; 1
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    27c0:	6c 81       	ldd	r22, Y+4	; 0x04
    27c2:	8f 81       	ldd	r24, Y+7	; 0x07
    27c4:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		bmpRead = j * Width;
    27c8:	39 86       	std	Y+9, r3	; 0x09
    27ca:	28 86       	std	Y+8, r2	; 0x08
    27cc:	72 9c       	mul	r7, r2
    27ce:	c0 01       	movw	r24, r0
    27d0:	73 9c       	mul	r7, r3
    27d2:	90 0d       	add	r25, r0
    27d4:	11 24       	eor	r1, r1
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width
    27d6:	7c 01       	movw	r14, r24
    27d8:	e2 18       	sub	r14, r2
    27da:	f3 08       	sbc	r15, r3

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    27dc:	66 20       	and	r6, r6
    27de:	09 f4       	brne	.+2      	; 0x27e2 <GLCD_DrawBitmap+0xe4>
    27e0:	3c c0       	rjmp	.+120    	; 0x285a <GLCD_DrawBitmap+0x15c>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    27e2:	9c 01       	movw	r18, r24
    27e4:	2a 0d       	add	r18, r10
    27e6:	3b 1d       	adc	r19, r11
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    27e8:	85 2c       	mov	r8, r5
    27ea:	3c 87       	std	Y+12, r19	; 0x0c
    27ec:	2b 87       	std	Y+11, r18	; 0x0b
		{
			//Read byte
			data = pgm_read_byte(&(Bitmap[bmpRead++]));
    27ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    27f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    27f2:	94 90       	lpm	r9, Z
			
			//Shift byte
			data <<= overflow;
    27f4:	04 2c       	mov	r0, r4
    27f6:	01 c0       	rjmp	.+2      	; 0x27fa <GLCD_DrawBitmap+0xfc>
    27f8:	99 0c       	add	r9, r9
    27fa:	0a 94       	dec	r0
    27fc:	ea f7       	brpl	.-6      	; 0x27f8 <GLCD_DrawBitmap+0xfa>
			
			//Merge byte with previous one
			if (j > 0)
    27fe:	77 20       	and	r7, r7
    2800:	79 f0       	breq	.+30     	; 0x2820 <GLCD_DrawBitmap+0x122>
			{
				dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    2802:	f5 01       	movw	r30, r10
    2804:	ee 0d       	add	r30, r14
    2806:	ff 1d       	adc	r31, r15
    2808:	2f ef       	ldi	r18, 0xFF	; 255
    280a:	e2 1a       	sub	r14, r18
    280c:	f2 0a       	sbc	r15, r18
    280e:	84 91       	lpm	r24, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0a 80       	ldd	r0, Y+2	; 0x02
    2814:	02 c0       	rjmp	.+4      	; 0x281a <GLCD_DrawBitmap+0x11c>
    2816:	95 95       	asr	r25
    2818:	87 95       	ror	r24
    281a:	0a 94       	dec	r0
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <GLCD_DrawBitmap+0x118>
				data |= dataPrev;
    281e:	98 2a       	or	r9, r24
			}
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    2820:	39 81       	ldd	r19, Y+1	; 0x01
    2822:	31 30       	cpi	r19, 0x01	; 1
    2824:	39 f4       	brne	.+14     	; 0x2834 <GLCD_DrawBitmap+0x136>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2826:	f6 01       	movw	r30, r12
    2828:	60 81       	ld	r22, Z
    282a:	f8 01       	movw	r30, r16
    282c:	80 81       	ld	r24, Z
    282e:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
    2832:	98 2a       	or	r9, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2834:	f6 01       	movw	r30, r12
    2836:	60 81       	ld	r22, Z
    2838:	f8 01       	movw	r30, r16
    283a:	80 81       	ld	r24, Z
    283c:	98 2f       	mov	r25, r24
    283e:	9f 5f       	subi	r25, 0xFF	; 255
    2840:	90 83       	st	Z, r25
    2842:	49 2d       	mov	r20, r9
    2844:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
		//Update the indices for reading the line
		bmpRead = j * Width;
		bmpReadPrev = bmpRead - Width;		//Previous = 4 + (j - 1) * width = Current - width

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2848:	83 94       	inc	r8
    284a:	2b 85       	ldd	r18, Y+11	; 0x0b
    284c:	3c 85       	ldd	r19, Y+12	; 0x0c
    284e:	2f 5f       	subi	r18, 0xFF	; 255
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	3c 87       	std	Y+12, r19	; 0x0c
    2854:	2b 87       	std	Y+11, r18	; 0x0b
    2856:	86 10       	cpse	r8, r6
    2858:	ca cf       	rjmp	.-108    	; 0x27ee <GLCD_DrawBitmap+0xf0>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    285a:	e2 e3       	ldi	r30, 0x32	; 50
    285c:	f1 e0       	ldi	r31, 0x01	; 1
    285e:	80 81       	ld	r24, Z
    2860:	88 23       	and	r24, r24
    2862:	41 f0       	breq	.+16     	; 0x2874 <GLCD_DrawBitmap+0x176>
			data = GLCD_White;
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2864:	f6 01       	movw	r30, r12
    2866:	60 81       	ld	r22, Z
    2868:	f8 01       	movw	r30, r16
    286a:	80 81       	ld	r24, Z
    286c:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
    2870:	48 2f       	mov	r20, r24
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <GLCD_DrawBitmap+0x178>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end'
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    2874:	45 2d       	mov	r20, r5
		else
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X, __GLCD.Y, data);
    2876:	f6 01       	movw	r30, r12
    2878:	60 81       	ld	r22, Z
    287a:	f8 01       	movw	r30, r16
    287c:	80 81       	ld	r24, Z
    287e:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    2882:	fc 81       	ldd	r31, Y+4	; 0x04
    2884:	f8 5f       	subi	r31, 0xF8	; 248
    2886:	fc 83       	std	Y+4, r31	; 0x04
	//#4 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#5 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < lines ; j++)
    2888:	73 94       	inc	r7
    288a:	87 2d       	mov	r24, r7
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	2d 81       	ldd	r18, Y+5	; 0x05
    2890:	3e 81       	ldd	r19, Y+6	; 0x06
    2892:	82 17       	cp	r24, r18
    2894:	93 07       	cpc	r25, r19
    2896:	08 f4       	brcc	.+2      	; 0x289a <GLCD_DrawBitmap+0x19c>
    2898:	93 cf       	rjmp	.-218    	; 0x27c0 <GLCD_DrawBitmap+0xc2>
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
	}

	//#6 - Update last line, if needed
	if (lines > 1)
    289a:	22 30       	cpi	r18, 0x02	; 2
    289c:	31 05       	cpc	r19, r1
    289e:	08 f4       	brcc	.+2      	; 0x28a2 <GLCD_DrawBitmap+0x1a4>
    28a0:	74 c0       	rjmp	.+232    	; 0x298a <GLCD_DrawBitmap+0x28c>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    28a2:	6f 2f       	mov	r22, r31
    28a4:	8f 81       	ldd	r24, Y+7	; 0x07
    28a6:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;
    28aa:	27 2d       	mov	r18, r7
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	21 50       	subi	r18, 0x01	; 1
    28b0:	31 09       	sbc	r19, r1
    28b2:	48 85       	ldd	r20, Y+8	; 0x08
    28b4:	59 85       	ldd	r21, Y+9	; 0x09
    28b6:	24 9f       	mul	r18, r20
    28b8:	c0 01       	movw	r24, r0
    28ba:	25 9f       	mul	r18, r21
    28bc:	90 0d       	add	r25, r0
    28be:	34 9f       	mul	r19, r20
    28c0:	90 0d       	add	r25, r0
    28c2:	11 24       	eor	r1, r1

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    28c4:	66 20       	and	r6, r6
    28c6:	09 f4       	brne	.+2      	; 0x28ca <GLCD_DrawBitmap+0x1cc>
    28c8:	3e c0       	rjmp	.+124    	; 0x2946 <GLCD_DrawBitmap+0x248>
			}
		}
	}
}

void GLCD_DrawBitmap(const uint8_t *Bitmap, uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
    28ca:	45 01       	movw	r8, r10
    28cc:	88 0e       	add	r8, r24
    28ce:	99 1e       	adc	r9, r25
    28d0:	65 01       	movw	r12, r10
    28d2:	5f ef       	ldi	r21, 0xFF	; 255
    28d4:	c5 1a       	sub	r12, r21
    28d6:	d5 0a       	sbc	r13, r21
    28d8:	6a 94       	dec	r6
    28da:	c6 0c       	add	r12, r6
    28dc:	d1 1c       	adc	r13, r1
    28de:	c8 0e       	add	r12, r24
    28e0:	d9 1e       	adc	r13, r25

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    28e2:	0f 2e       	mov	r0, r31
    28e4:	fb e2       	ldi	r31, 0x2B	; 43
    28e6:	ef 2e       	mov	r14, r31
    28e8:	f1 e0       	ldi	r31, 0x01	; 1
    28ea:	ff 2e       	mov	r15, r31
    28ec:	f0 2d       	mov	r31, r0
    28ee:	0a e2       	ldi	r16, 0x2A	; 42
    28f0:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    28f2:	88 e0       	ldi	r24, 0x08	; 8
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	5c 01       	movw	r10, r24
    28f8:	a4 18       	sub	r10, r4
    28fa:	b1 08       	sbc	r11, r1
    28fc:	34 01       	movw	r6, r8

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    28fe:	f7 01       	movw	r30, r14
    2900:	80 80       	ld	r8, Z
    2902:	f8 01       	movw	r30, r16
    2904:	90 80       	ld	r9, Z
    2906:	68 2d       	mov	r22, r8
    2908:	89 2d       	mov	r24, r9
    290a:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(Bitmap[bmpReadPrev++]));
    290e:	f3 01       	movw	r30, r6
    2910:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	0a 2c       	mov	r0, r10
    2916:	02 c0       	rjmp	.+4      	; 0x291c <GLCD_DrawBitmap+0x21e>
    2918:	55 95       	asr	r21
    291a:	47 95       	ror	r20
    291c:	0a 94       	dec	r0
    291e:	e2 f7       	brpl	.-8      	; 0x2918 <GLCD_DrawBitmap+0x21a>
			data |= dataPrev;
    2920:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (Mode == GLCD_Merge)
    2922:	f9 81       	ldd	r31, Y+1	; 0x01
    2924:	f1 30       	cpi	r31, 0x01	; 1
    2926:	09 f4       	brne	.+2      	; 0x292a <GLCD_DrawBitmap+0x22c>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2928:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    292a:	89 2d       	mov	r24, r9
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	f8 01       	movw	r30, r16
    2930:	80 83       	st	Z, r24
    2932:	68 2d       	mov	r22, r8
    2934:	89 2d       	mov	r24, r9
    2936:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
    293a:	ff ef       	ldi	r31, 0xFF	; 255
    293c:	6f 1a       	sub	r6, r31
    293e:	7f 0a       	sbc	r7, r31
		
		//Update the index for reading the last printed line
		bmpReadPrev = (j - 1) * Width;

		//Scan bytes of selected line
		for (i = 0 ; i < Width ; i++)
    2940:	6c 14       	cp	r6, r12
    2942:	7d 04       	cpc	r7, r13
    2944:	e1 f6       	brne	.-72     	; 0x28fe <GLCD_DrawBitmap+0x200>
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2946:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__GLCD+0x9>
    294a:	88 23       	and	r24, r24
    294c:	99 f0       	breq	.+38     	; 0x2974 <GLCD_DrawBitmap+0x276>
			data = GLCD_White;
		else if (__GLCD.Font.Mode == GLCD_Merge)
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	41 f4       	brne	.+16     	; 0x2962 <GLCD_DrawBitmap+0x264>
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2952:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    2956:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    295a:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
    295e:	48 2f       	mov	r20, r24
    2960:	0a c0       	rjmp	.+20     	; 0x2976 <GLCD_DrawBitmap+0x278>
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2962:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    2966:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    296a:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
    296e:	48 2f       	mov	r20, r24
    2970:	40 95       	com	r20
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <GLCD_DrawBitmap+0x278>
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
		}
		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
			data = GLCD_White;
    2974:	40 e0       	ldi	r20, 0x00	; 0
		else if (__GLCD.Font.Mode == GLCD_Merge)
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		else
			data = ~GLCD_BufferRead(__GLCD.X, __GLCD.Y);
		GLCD_BufferWrite(__GLCD.X++, __GLCD.Y,data);
    2976:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    297a:	ea e2       	ldi	r30, 0x2A	; 42
    297c:	f1 e0       	ldi	r31, 0x01	; 1
    297e:	80 81       	ld	r24, Z
    2980:	98 2f       	mov	r25, r24
    2982:	9f 5f       	subi	r25, 0xFF	; 255
    2984:	90 83       	st	Z, r25
    2986:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
	}
	
	//Go to the upper-right corner of the printed bitmap
	GLCD_GotoXY(GLCD_GetX(), y2);
    298a:	0e 94 3f 12 	call	0x247e	; 0x247e <GLCD_GetX>
    298e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2990:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
}
    2994:	2c 96       	adiw	r28, 0x0c	; 12
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	bf 90       	pop	r11
    29b2:	af 90       	pop	r10
    29b4:	9f 90       	pop	r9
    29b6:	8f 90       	pop	r8
    29b8:	7f 90       	pop	r7
    29ba:	6f 90       	pop	r6
    29bc:	5f 90       	pop	r5
    29be:	4f 90       	pop	r4
    29c0:	3f 90       	pop	r3
    29c2:	2f 90       	pop	r2
    29c4:	08 95       	ret

000029c6 <GLCD_DrawLine>:

void GLCD_DrawLine(uint8_t X1, uint8_t Y1, uint8_t X2, uint8_t Y2, enum Color_t Color)
{
    29c6:	bf 92       	push	r11
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	c8 2f       	mov	r28, r24
    29da:	f6 2e       	mov	r15, r22
    29dc:	14 2f       	mov	r17, r20
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    29de:	88 23       	and	r24, r24
    29e0:	0c f4       	brge	.+2      	; 0x29e4 <GLCD_DrawLine+0x1e>
    29e2:	7c c0       	rjmp	.+248    	; 0x2adc <GLCD_DrawLine+0x116>
    29e4:	44 23       	and	r20, r20
    29e6:	0c f4       	brge	.+2      	; 0x29ea <GLCD_DrawLine+0x24>
    29e8:	79 c0       	rjmp	.+242    	; 0x2adc <GLCD_DrawLine+0x116>
    29ea:	8f e3       	ldi	r24, 0x3F	; 63
    29ec:	86 17       	cp	r24, r22
    29ee:	08 f4       	brcc	.+2      	; 0x29f2 <GLCD_DrawLine+0x2c>
    29f0:	75 c0       	rjmp	.+234    	; 0x2adc <GLCD_DrawLine+0x116>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    29f2:	20 34       	cpi	r18, 0x40	; 64
    29f4:	08 f0       	brcs	.+2      	; 0x29f8 <GLCD_DrawLine+0x32>
    29f6:	72 c0       	rjmp	.+228    	; 0x2adc <GLCD_DrawLine+0x116>
	{
		if (X1 == X2)
    29f8:	c4 13       	cpse	r28, r20
    29fa:	0a c0       	rjmp	.+20     	; 0x2a10 <GLCD_DrawLine+0x4a>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    29fc:	26 17       	cp	r18, r22
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <GLCD_DrawLine+0x3e>
		__GLCD_Swap(Y1, Y2);
    2a00:	f2 2e       	mov	r15, r18
    2a02:	26 2f       	mov	r18, r22

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2a04:	4c 2f       	mov	r20, r28
    2a06:	6f 2d       	mov	r22, r15
    2a08:	8c 2f       	mov	r24, r28
    2a0a:	0e 94 92 12 	call	0x2524	; 0x2524 <GLCD_SetPixels>
    2a0e:	66 c0       	rjmp	.+204    	; 0x2adc <GLCD_DrawLine+0x116>
	{
		if (X1 == X2)
		{
			GLCD_DrawVLine(Y1, Y2, X1, Color);
		}
		else if (Y1 == Y2)
    2a10:	62 13       	cpse	r22, r18
    2a12:	0c c0       	rjmp	.+24     	; 0x2a2c <GLCD_DrawLine+0x66>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2a14:	4c 17       	cp	r20, r28
    2a16:	08 f4       	brcc	.+2      	; 0x2a1a <GLCD_DrawLine+0x54>
    2a18:	5d c0       	rjmp	.+186    	; 0x2ad4 <GLCD_DrawLine+0x10e>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2a1a:	40 2f       	mov	r20, r16
    2a1c:	6f 2d       	mov	r22, r15
    2a1e:	8c 2f       	mov	r24, r28
    2a20:	0e 94 42 12 	call	0x2484	; 0x2484 <GLCD_SetPixel>
		X1++;
    2a24:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2a26:	1c 17       	cp	r17, r28
    2a28:	c0 f7       	brcc	.-16     	; 0x2a1a <GLCD_DrawLine+0x54>
    2a2a:	58 c0       	rjmp	.+176    	; 0x2adc <GLCD_DrawLine+0x116>
		}
		else
		{
			uint8_t deltax, deltay, x, y, slope;
			int8_t error, ystep;
			slope = ((__GLCD_AbsDiff(Y1, Y2) > __GLCD_AbsDiff(X1,X2)) ? 1 : 0);
    2a2c:	26 17       	cp	r18, r22
    2a2e:	28 f4       	brcc	.+10     	; 0x2a3a <GLCD_DrawLine+0x74>
    2a30:	a6 2f       	mov	r26, r22
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	a2 1b       	sub	r26, r18
    2a36:	b1 09       	sbc	r27, r1
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <GLCD_DrawLine+0x7c>
    2a3a:	a2 2f       	mov	r26, r18
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	a6 1b       	sub	r26, r22
    2a40:	b1 09       	sbc	r27, r1
    2a42:	1c 17       	cp	r17, r28
    2a44:	28 f4       	brcc	.+10     	; 0x2a50 <GLCD_DrawLine+0x8a>
    2a46:	ec 2f       	mov	r30, r28
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	e1 1b       	sub	r30, r17
    2a4c:	f1 09       	sbc	r31, r1
    2a4e:	04 c0       	rjmp	.+8      	; 0x2a58 <GLCD_DrawLine+0x92>
    2a50:	e1 2f       	mov	r30, r17
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	ec 1b       	sub	r30, r28
    2a56:	f1 09       	sbc	r31, r1
    2a58:	ee 24       	eor	r14, r14
    2a5a:	e3 94       	inc	r14
    2a5c:	ea 17       	cp	r30, r26
    2a5e:	fb 07       	cpc	r31, r27
    2a60:	0c f0       	brlt	.+2      	; 0x2a64 <GLCD_DrawLine+0x9e>
    2a62:	e1 2c       	mov	r14, r1
			if (slope)
    2a64:	ee 20       	and	r14, r14
    2a66:	31 f0       	breq	.+12     	; 0x2a74 <GLCD_DrawLine+0xae>
    2a68:	81 2f       	mov	r24, r17
			{
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
    2a6a:	12 2f       	mov	r17, r18
    2a6c:	28 2f       	mov	r18, r24
		else
		{
			uint8_t deltax, deltay, x, y, slope;
			int8_t error, ystep;
			slope = ((__GLCD_AbsDiff(Y1, Y2) > __GLCD_AbsDiff(X1,X2)) ? 1 : 0);
			if (slope)
    2a6e:	8c 2f       	mov	r24, r28
			{
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
    2a70:	cf 2d       	mov	r28, r15
    2a72:	f8 2e       	mov	r15, r24
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
			}
			if (X1 > X2)
    2a74:	1c 17       	cp	r17, r28
    2a76:	30 f4       	brcc	.+12     	; 0x2a84 <GLCD_DrawLine+0xbe>
    2a78:	8f 2d       	mov	r24, r15
			{
				//Swap x1, x2
				__GLCD_Swap(X1, X2);
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
    2a7a:	f2 2e       	mov	r15, r18
    2a7c:	28 2f       	mov	r18, r24
				//Swap x1, y1
				__GLCD_Swap(X1, Y1);
				//Swap x2, y2
				__GLCD_Swap(X2, Y2);
			}
			if (X1 > X2)
    2a7e:	8c 2f       	mov	r24, r28
			{
				//Swap x1, x2
				__GLCD_Swap(X1, X2);
    2a80:	c1 2f       	mov	r28, r17
    2a82:	18 2f       	mov	r17, r24
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
			}
			
			deltax = X2 - X1;
    2a84:	c1 2e       	mov	r12, r17
    2a86:	cc 1a       	sub	r12, r28
			deltay = __GLCD_AbsDiff(Y2, Y1);
    2a88:	f2 16       	cp	r15, r18
    2a8a:	38 f4       	brcc	.+14     	; 0x2a9a <GLCD_DrawLine+0xd4>
    2a8c:	d2 2e       	mov	r13, r18
    2a8e:	df 18       	sub	r13, r15
			error = deltax / 2;
    2a90:	dc 2d       	mov	r29, r12
    2a92:	d6 95       	lsr	r29
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
    2a94:	bb 24       	eor	r11, r11
    2a96:	b3 94       	inc	r11
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <GLCD_DrawLine+0xe0>
				//Swap y1,y2
				__GLCD_Swap(Y1, Y2);
			}
			
			deltax = X2 - X1;
			deltay = __GLCD_AbsDiff(Y2, Y1);
    2a9a:	df 2c       	mov	r13, r15
    2a9c:	d2 1a       	sub	r13, r18
			error = deltax / 2;
    2a9e:	dc 2d       	mov	r29, r12
    2aa0:	d6 95       	lsr	r29
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
    2aa2:	bb 24       	eor	r11, r11
    2aa4:	ba 94       	dec	r11
			
			for (x = X1 ; x <= X2 ; x++)
    2aa6:	1c 17       	cp	r17, r28
    2aa8:	c8 f0       	brcs	.+50     	; 0x2adc <GLCD_DrawLine+0x116>
			{
				if (slope)
    2aaa:	ee 20       	and	r14, r14
    2aac:	31 f0       	breq	.+12     	; 0x2aba <GLCD_DrawLine+0xf4>
					GLCD_SetPixel(y, x, Color);
    2aae:	40 2f       	mov	r20, r16
    2ab0:	6c 2f       	mov	r22, r28
    2ab2:	8f 2d       	mov	r24, r15
    2ab4:	0e 94 42 12 	call	0x2484	; 0x2484 <GLCD_SetPixel>
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <GLCD_DrawLine+0xfe>
				else
					GLCD_SetPixel(x, y, Color);
    2aba:	40 2f       	mov	r20, r16
    2abc:	6f 2d       	mov	r22, r15
    2abe:	8c 2f       	mov	r24, r28
    2ac0:	0e 94 42 12 	call	0x2484	; 0x2484 <GLCD_SetPixel>
				
				error -= deltay;
    2ac4:	dd 19       	sub	r29, r13
				if (error < 0)
    2ac6:	12 f4       	brpl	.+4      	; 0x2acc <GLCD_DrawLine+0x106>
				{
					y = y + ystep;
    2ac8:	fb 0c       	add	r15, r11
					error = error + deltax;
    2aca:	dc 0d       	add	r29, r12
			deltay = __GLCD_AbsDiff(Y2, Y1);
			error = deltax / 2;
			y = Y1;
			ystep = ((Y1 < Y2) ? 1 : -1);
			
			for (x = X1 ; x <= X2 ; x++)
    2acc:	cf 5f       	subi	r28, 0xFF	; 255
    2ace:	1c 17       	cp	r17, r28
    2ad0:	60 f7       	brcc	.-40     	; 0x2aaa <GLCD_DrawLine+0xe4>
    2ad2:	04 c0       	rjmp	.+8      	; 0x2adc <GLCD_DrawLine+0x116>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2ad4:	8c 2f       	mov	r24, r28
		__GLCD_Swap(X1, X2);
    2ad6:	c4 2f       	mov	r28, r20
    2ad8:	18 2f       	mov	r17, r24
    2ada:	9f cf       	rjmp	.-194    	; 0x2a1a <GLCD_DrawLine+0x54>
					error = error + deltax;
				}
			}
		}
	}
}
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	df 90       	pop	r13
    2aea:	cf 90       	pop	r12
    2aec:	bf 90       	pop	r11
    2aee:	08 95       	ret

00002af0 <GLCD_DrawRectangle>:

void GLCD_DrawRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2af0:	df 92       	push	r13
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	e8 2e       	mov	r14, r24
    2b00:	16 2f       	mov	r17, r22
    2b02:	d4 2e       	mov	r13, r20
    2b04:	f2 2e       	mov	r15, r18
    2b06:	d0 2f       	mov	r29, r16
	if ((X1 < __GLCD_Screen_Width) && (X2 < __GLCD_Screen_Width) &&
    2b08:	88 23       	and	r24, r24
    2b0a:	0c f4       	brge	.+2      	; 0x2b0e <GLCD_DrawRectangle+0x1e>
    2b0c:	49 c0       	rjmp	.+146    	; 0x2ba0 <GLCD_DrawRectangle+0xb0>
    2b0e:	44 23       	and	r20, r20
    2b10:	0c f4       	brge	.+2      	; 0x2b14 <GLCD_DrawRectangle+0x24>
    2b12:	46 c0       	rjmp	.+140    	; 0x2ba0 <GLCD_DrawRectangle+0xb0>
    2b14:	60 34       	cpi	r22, 0x40	; 64
    2b16:	08 f0       	brcs	.+2      	; 0x2b1a <GLCD_DrawRectangle+0x2a>
    2b18:	43 c0       	rjmp	.+134    	; 0x2ba0 <GLCD_DrawRectangle+0xb0>
		(Y1 < __GLCD_Screen_Height) && (Y2 < __GLCD_Screen_Height))
    2b1a:	8f e3       	ldi	r24, 0x3F	; 63
    2b1c:	82 17       	cp	r24, r18
    2b1e:	08 f4       	brcc	.+2      	; 0x2b22 <GLCD_DrawRectangle+0x32>
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2b22:	4e 15       	cp	r20, r14
    2b24:	00 f1       	brcs	.+64     	; 0x2b66 <GLCD_DrawRectangle+0x76>
    2b26:	1c c0       	rjmp	.+56     	; 0x2b60 <GLCD_DrawRectangle+0x70>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2b28:	4d 2f       	mov	r20, r29
    2b2a:	61 2f       	mov	r22, r17
    2b2c:	8c 2f       	mov	r24, r28
    2b2e:	0e 94 42 12 	call	0x2484	; 0x2484 <GLCD_SetPixel>
		X1++;
    2b32:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2b34:	0c 17       	cp	r16, r28
    2b36:	c0 f7       	brcc	.-16     	; 0x2b28 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2b38:	de 14       	cp	r13, r14
    2b3a:	d8 f0       	brcs	.+54     	; 0x2b72 <GLCD_DrawRectangle+0x82>
    2b3c:	17 c0       	rjmp	.+46     	; 0x2b6c <GLCD_DrawRectangle+0x7c>
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
	{
		GLCD_SetPixel(X1, Y, Color);
    2b3e:	4d 2f       	mov	r20, r29
    2b40:	6f 2d       	mov	r22, r15
    2b42:	8c 2f       	mov	r24, r28
    2b44:	0e 94 42 12 	call	0x2484	; 0x2484 <GLCD_SetPixel>
		X1++;
    2b48:	cf 5f       	subi	r28, 0xFF	; 255
static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
		__GLCD_Swap(X1, X2);
	
	while (X1 <= X2)
    2b4a:	0c 17       	cp	r16, r28
    2b4c:	c0 f7       	brcc	.-16     	; 0x2b3e <GLCD_DrawRectangle+0x4e>
	}
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
    2b4e:	f1 16       	cp	r15, r17
    2b50:	98 f0       	brcs	.+38     	; 0x2b78 <GLCD_DrawRectangle+0x88>
    2b52:	1c c0       	rjmp	.+56     	; 0x2b8c <GLCD_DrawRectangle+0x9c>
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2b54:	0d 2f       	mov	r16, r29
    2b56:	4d 2d       	mov	r20, r13
    2b58:	8d 2d       	mov	r24, r13
    2b5a:	0e 94 92 12 	call	0x2524	; 0x2524 <GLCD_SetPixels>
    2b5e:	20 c0       	rjmp	.+64     	; 0x2ba0 <GLCD_DrawRectangle+0xb0>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2b60:	04 2f       	mov	r16, r20
    2b62:	ce 2d       	mov	r28, r14
    2b64:	e1 cf       	rjmp	.-62     	; 0x2b28 <GLCD_DrawRectangle+0x38>
		__GLCD_Swap(X1, X2);
    2b66:	0e 2d       	mov	r16, r14
    2b68:	c4 2f       	mov	r28, r20
    2b6a:	de cf       	rjmp	.-68     	; 0x2b28 <GLCD_DrawRectangle+0x38>
	return (__GLCD_Buffer[__GLCD_Pointer(X, Y)]);
}

static inline void GLCD_DrawHLine(uint8_t X1, uint8_t X2, const uint8_t Y, enum Color_t Color)
{
	if (X1 > X2)
    2b6c:	0d 2d       	mov	r16, r13
    2b6e:	ce 2d       	mov	r28, r14
    2b70:	e6 cf       	rjmp	.-52     	; 0x2b3e <GLCD_DrawRectangle+0x4e>
		__GLCD_Swap(X1, X2);
    2b72:	0e 2d       	mov	r16, r14
    2b74:	cd 2d       	mov	r28, r13
    2b76:	e3 cf       	rjmp	.-58     	; 0x2b3e <GLCD_DrawRectangle+0x4e>
static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2b78:	0d 2f       	mov	r16, r29
    2b7a:	21 2f       	mov	r18, r17
    2b7c:	4e 2d       	mov	r20, r14
    2b7e:	6f 2d       	mov	r22, r15
    2b80:	8e 2d       	mov	r24, r14
    2b82:	0e 94 92 12 	call	0x2524	; 0x2524 <GLCD_SetPixels>
}

static inline void GLCD_DrawVLine(uint8_t Y1, uint8_t Y2, const uint8_t X, enum Color_t Color)
{
	if (Y1 > Y2)
		__GLCD_Swap(Y1, Y2);
    2b86:	21 2f       	mov	r18, r17
    2b88:	6f 2d       	mov	r22, r15
    2b8a:	e4 cf       	rjmp	.-56     	; 0x2b54 <GLCD_DrawRectangle+0x64>

	GLCD_SetPixels(X, Y1, X, Y2, Color);
    2b8c:	0d 2f       	mov	r16, r29
    2b8e:	2f 2d       	mov	r18, r15
    2b90:	4e 2d       	mov	r20, r14
    2b92:	61 2f       	mov	r22, r17
    2b94:	8e 2d       	mov	r24, r14
    2b96:	0e 94 92 12 	call	0x2524	; 0x2524 <GLCD_SetPixels>
    2b9a:	2f 2d       	mov	r18, r15
    2b9c:	61 2f       	mov	r22, r17
    2b9e:	da cf       	rjmp	.-76     	; 0x2b54 <GLCD_DrawRectangle+0x64>
		GLCD_DrawHLine(X1, X2, Y1, Color);
		GLCD_DrawHLine(X1, X2, Y2, Color);
		GLCD_DrawVLine(Y1, Y2, X1, Color);
		GLCD_DrawVLine(Y1, Y2, X2, Color);
	}
}
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	08 95       	ret

00002bb0 <GLCD_FillScreen>:
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	18 2f       	mov	r17, r24
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    2bba:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2bbc:	00 e0       	ldi	r16, 0x00	; 0
    2bbe:	0b c0       	rjmp	.+22     	; 0x2bd6 <GLCD_FillScreen+0x26>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
    2bc0:	41 2f       	mov	r20, r17
    2bc2:	6d 2f       	mov	r22, r29
    2bc4:	8c 2f       	mov	r24, r28
    2bc6:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
    2bca:	cf 5f       	subi	r28, 0xFF	; 255
    2bcc:	c0 38       	cpi	r28, 0x80	; 128
    2bce:	c1 f7       	brne	.-16     	; 0x2bc0 <GLCD_FillScreen+0x10>

void GLCD_FillScreen(enum Color_t Color)
{
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
    2bd0:	d8 5f       	subi	r29, 0xF8	; 248
    2bd2:	d0 34       	cpi	r29, 0x40	; 64
    2bd4:	11 f0       	breq	.+4      	; 0x2bda <GLCD_FillScreen+0x2a>
		}
	}
}

void GLCD_FillScreen(enum Color_t Color)
{
    2bd6:	c0 2f       	mov	r28, r16
    2bd8:	f3 cf       	rjmp	.-26     	; 0x2bc0 <GLCD_FillScreen+0x10>
	uint8_t i, j;

	for (j = 0 ; j < __GLCD_Screen_Height ; j += __GLCD_Screen_Line_Height)
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	08 95       	ret

00002be4 <GLCD_Clear>:
	GLCD_SendCommand(Contrast);
}

void GLCD_Clear(void)
{
	GLCD_FillScreen(GLCD_White);
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <GLCD_FillScreen>
    2bea:	08 95       	ret

00002bec <GLCD_FillRectangle>:
		for (i = 0 ; i < __GLCD_Screen_Width ; i++)
			GLCD_BufferWrite(i, j, Color);
}

void GLCD_FillRectangle(const uint8_t X1, const uint8_t Y1, const uint8_t X2, const uint8_t Y2, enum Color_t Color)
{
    2bec:	0f 93       	push	r16
	GLCD_SetPixels(X1, Y1, X2, Y2, Color);
    2bee:	0e 94 92 12 	call	0x2524	; 0x2524 <GLCD_SetPixels>
}
    2bf2:	0f 91       	pop	r16
    2bf4:	08 95       	ret

00002bf6 <GLCD_SetFont>:
	}
}

void GLCD_SetFont(const uint8_t *Name, const uint8_t Width, const uint8_t Height, enum PrintMode_t Mode)
{
	if ((Width < __GLCD_Screen_Width) && (Height < __GLCD_Screen_Height) && ((Mode == GLCD_Overwrite) || (Mode == GLCD_Merge)))
    2bf6:	66 23       	and	r22, r22
    2bf8:	f4 f0       	brlt	.+60     	; 0x2c36 <GLCD_SetFont+0x40>
    2bfa:	40 34       	cpi	r20, 0x40	; 64
    2bfc:	e0 f4       	brcc	.+56     	; 0x2c36 <GLCD_SetFont+0x40>
    2bfe:	22 30       	cpi	r18, 0x02	; 2
    2c00:	d0 f4       	brcc	.+52     	; 0x2c36 <GLCD_SetFont+0x40>
	{
		//Change font pointer to new font
		__GLCD.Font.Name = (uint8_t *)(Name);
    2c02:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__GLCD+0x5>
    2c06:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__GLCD+0x4>
		
		//Update font's size
		__GLCD.Font.Width = Width;
    2c0a:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <__GLCD+0x6>
		__GLCD.Font.Height = Height;
    2c0e:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <__GLCD+0x7>
		
		//Update lines required for a character to be fully displayed
		__GLCD.Font.Lines = (Height - 1) / __GLCD_Screen_Line_Height + 1;
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	41 50       	subi	r20, 0x01	; 1
    2c16:	51 09       	sbc	r21, r1
    2c18:	ca 01       	movw	r24, r20
    2c1a:	99 23       	and	r25, r25
    2c1c:	0c f4       	brge	.+2      	; 0x2c20 <GLCD_SetFont+0x2a>
    2c1e:	07 96       	adiw	r24, 0x07	; 7
    2c20:	95 95       	asr	r25
    2c22:	87 95       	ror	r24
    2c24:	95 95       	asr	r25
    2c26:	87 95       	ror	r24
    2c28:	95 95       	asr	r25
    2c2a:	87 95       	ror	r24
    2c2c:	8f 5f       	subi	r24, 0xFF	; 255
    2c2e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__GLCD+0x8>
		
		//Update blending mode
		__GLCD.Font.Mode = Mode;
    2c32:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__GLCD+0x9>
    2c36:	08 95       	ret

00002c38 <GLCD_PrintChar>:
	
	return width;
}

void GLCD_PrintChar(char Character)
{
    2c38:	2f 92       	push	r2
    2c3a:	3f 92       	push	r3
    2c3c:	4f 92       	push	r4
    2c3e:	5f 92       	push	r5
    2c40:	6f 92       	push	r6
    2c42:	7f 92       	push	r7
    2c44:	8f 92       	push	r8
    2c46:	9f 92       	push	r9
    2c48:	af 92       	push	r10
    2c4a:	bf 92       	push	r11
    2c4c:	cf 92       	push	r12
    2c4e:	df 92       	push	r13
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	2b 97       	sbiw	r28, 0x0b	; 11
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
    2c6c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__GLCD+0x1>
    2c70:	2c 83       	std	Y+4, r18	; 0x04
	y = y2 = __GLCD.Y;
    2c72:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__GLCD+0x2>
    2c76:	3f 83       	std	Y+7, r19	; 0x07
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    2c78:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__GLCD+0x8>
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
    2c7c:	80 52       	subi	r24, 0x20	; 32
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
    2c7e:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <__GLCD+0x6>
    2c82:	29 9f       	mul	r18, r25
    2c84:	90 01       	movw	r18, r0
    2c86:	11 24       	eor	r1, r1
    2c88:	2f 5f       	subi	r18, 0xFF	; 255
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8c:	82 9f       	mul	r24, r18
    2c8e:	a0 01       	movw	r20, r0
    2c90:	83 9f       	mul	r24, r19
    2c92:	50 0d       	add	r21, r0
    2c94:	11 24       	eor	r1, r1
    2c96:	59 87       	std	Y+9, r21	; 0x09
    2c98:	48 87       	std	Y+8, r20	; 0x08
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
    2c9a:	4f 5f       	subi	r20, 0xFF	; 255
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	5e 83       	std	Y+6, r21	; 0x06
    2ca0:	4d 83       	std	Y+5, r20	; 0x05
    2ca2:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__GLCD+0x4>
    2ca6:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__GLCD+0x5>
    2caa:	a8 85       	ldd	r26, Y+8	; 0x08
    2cac:	b9 85       	ldd	r27, Y+9	; 0x09
    2cae:	ea 0f       	add	r30, r26
    2cb0:	fb 1f       	adc	r31, r27
    2cb2:	54 90       	lpm	r5, Z
	
	
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
    2cb4:	7f 80       	ldd	r7, Y+7	; 0x07
    2cb6:	b7 e0       	ldi	r27, 0x07	; 7
    2cb8:	7b 22       	and	r7, r27
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2cba:	99 23       	and	r25, r25
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <GLCD_PrintChar+0x88>
    2cbe:	92 c0       	rjmp	.+292    	; 0x2de4 <GLCD_PrintChar+0x1ac>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2cc0:	ef 81       	ldd	r30, Y+7	; 0x07
    2cc2:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2cc4:	31 2c       	mov	r3, r1
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2cc6:	21 2c       	mov	r2, r1
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2cc8:	88 e0       	ldi	r24, 0x08	; 8
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9c 01       	movw	r18, r24
    2cce:	27 19       	sub	r18, r7
    2cd0:	31 09       	sbc	r19, r1
    2cd2:	3a 83       	std	Y+2, r19	; 0x02
    2cd4:	29 83       	std	Y+1, r18	; 0x01
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2cd6:	0f 2e       	mov	r0, r31
    2cd8:	f2 e3       	ldi	r31, 0x32	; 50
    2cda:	8f 2e       	mov	r8, r31
    2cdc:	f1 e0       	ldi	r31, 0x01	; 1
    2cde:	9f 2e       	mov	r9, r31
    2ce0:	f0 2d       	mov	r31, r0
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2ce2:	0f 2e       	mov	r0, r31
    2ce4:	fb e2       	ldi	r31, 0x2B	; 43
    2ce6:	af 2e       	mov	r10, r31
    2ce8:	f1 e0       	ldi	r31, 0x01	; 1
    2cea:	bf 2e       	mov	r11, r31
    2cec:	f0 2d       	mov	r31, r0
    2cee:	0a e2       	ldi	r16, 0x2A	; 42
    2cf0:	11 e0       	ldi	r17, 0x01	; 1
    2cf2:	67 2c       	mov	r6, r7
    2cf4:	75 2c       	mov	r7, r5
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2cf6:	6b 81       	ldd	r22, Y+3	; 0x03
    2cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfa:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
    2cfe:	4d 81       	ldd	r20, Y+5	; 0x05
    2d00:	5e 81       	ldd	r21, Y+6	; 0x06
    2d02:	43 0d       	add	r20, r3
    2d04:	51 1d       	adc	r21, r1
    2d06:	5b 87       	std	Y+11, r21	; 0x0b
    2d08:	4a 87       	std	Y+10, r20	; 0x0a
		fontReadPrev = fontRead - 1;
    2d0a:	7a 01       	movw	r14, r20
    2d0c:	51 e0       	ldi	r21, 0x01	; 1
    2d0e:	e5 1a       	sub	r14, r21
    2d10:	f1 08       	sbc	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2d12:	77 20       	and	r7, r7
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <GLCD_PrintChar+0xe0>
    2d16:	4f c0       	rjmp	.+158    	; 0x2db6 <GLCD_PrintChar+0x17e>
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
    2d18:	0f 2e       	mov	r0, r31
    2d1a:	f1 e3       	ldi	r31, 0x31	; 49
    2d1c:	cf 2e       	mov	r12, r31
    2d1e:	f1 e0       	ldi	r31, 0x01	; 1
    2d20:	df 2e       	mov	r13, r31
    2d22:	f0 2d       	mov	r31, r0
    2d24:	83 2d       	mov	r24, r3
    2d26:	36 2c       	mov	r3, r6
    2d28:	67 2c       	mov	r6, r7
    2d2a:	72 2c       	mov	r7, r2
    2d2c:	58 2e       	mov	r5, r24

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
    2d2e:	ad e2       	ldi	r26, 0x2D	; 45
    2d30:	b1 e0       	ldi	r27, 0x01	; 1
    2d32:	2d 91       	ld	r18, X+
    2d34:	3c 91       	ld	r19, X
    2d36:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d38:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d3a:	e2 0f       	add	r30, r18
    2d3c:	f3 1f       	adc	r31, r19
    2d3e:	e4 91       	lpm	r30, Z
			
			//Shift byte
			data <<= overflow;
    2d40:	4e 2e       	mov	r4, r30
    2d42:	03 2c       	mov	r0, r3
    2d44:	01 c0       	rjmp	.+2      	; 0x2d48 <GLCD_PrintChar+0x110>
    2d46:	44 0c       	add	r4, r4
    2d48:	0a 94       	dec	r0
    2d4a:	ea f7       	brpl	.-6      	; 0x2d46 <GLCD_PrintChar+0x10e>
			
			//Merge byte with previous one
			if (j > 0)
    2d4c:	55 20       	and	r5, r5
    2d4e:	81 f0       	breq	.+32     	; 0x2d70 <GLCD_PrintChar+0x138>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2d50:	f9 01       	movw	r30, r18
    2d52:	ee 0d       	add	r30, r14
    2d54:	ff 1d       	adc	r31, r15
    2d56:	24 91       	lpm	r18, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	09 80       	ldd	r0, Y+1	; 0x01
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <GLCD_PrintChar+0x12a>
    2d5e:	35 95       	asr	r19
    2d60:	27 95       	ror	r18
    2d62:	0a 94       	dec	r0
    2d64:	e2 f7       	brpl	.-8      	; 0x2d5e <GLCD_PrintChar+0x126>
				data |= dataPrev;
    2d66:	42 2a       	or	r4, r18
				fontReadPrev += __GLCD.Font.Lines;
    2d68:	f6 01       	movw	r30, r12
    2d6a:	80 81       	ld	r24, Z
    2d6c:	e8 0e       	add	r14, r24
    2d6e:	f1 1c       	adc	r15, r1
			}

			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2d70:	d4 01       	movw	r26, r8
    2d72:	8c 91       	ld	r24, X
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	39 f4       	brne	.+14     	; 0x2d86 <GLCD_PrintChar+0x14e>
			data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2d78:	f5 01       	movw	r30, r10
    2d7a:	60 81       	ld	r22, Z
    2d7c:	d8 01       	movw	r26, r16
    2d7e:	8c 91       	ld	r24, X
    2d80:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
    2d84:	48 2a       	or	r4, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2d86:	f5 01       	movw	r30, r10
    2d88:	60 81       	ld	r22, Z
    2d8a:	d8 01       	movw	r26, r16
    2d8c:	8c 91       	ld	r24, X
    2d8e:	98 2f       	mov	r25, r24
    2d90:	9f 5f       	subi	r25, 0xFF	; 255
    2d92:	9c 93       	st	X, r25
    2d94:	44 2d       	mov	r20, r4
    2d96:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
			
			//Increase index
			fontRead += __GLCD.Font.Lines;
    2d9a:	f6 01       	movw	r30, r12
    2d9c:	80 81       	ld	r24, Z
    2d9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2da0:	3b 85       	ldd	r19, Y+11	; 0x0b
    2da2:	28 0f       	add	r18, r24
    2da4:	31 1d       	adc	r19, r1
    2da6:	3b 87       	std	Y+11, r19	; 0x0b
    2da8:	2a 87       	std	Y+10, r18	; 0x0a
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2daa:	73 94       	inc	r7
    2dac:	76 10       	cpse	r7, r6
    2dae:	bf cf       	rjmp	.-130    	; 0x2d2e <GLCD_PrintChar+0xf6>
    2db0:	76 2c       	mov	r7, r6
    2db2:	63 2c       	mov	r6, r3
    2db4:	35 2c       	mov	r3, r5
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2db6:	d4 01       	movw	r26, r8
    2db8:	8c 91       	ld	r24, X
    2dba:	81 11       	cpse	r24, r1
    2dbc:	07 c0       	rjmp	.+14     	; 0x2dcc <GLCD_PrintChar+0x194>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    2dbe:	42 2d       	mov	r20, r2
    2dc0:	f5 01       	movw	r30, r10
    2dc2:	60 81       	ld	r22, Z
    2dc4:	d8 01       	movw	r26, r16
    2dc6:	8c 91       	ld	r24, X
    2dc8:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
    2dcc:	bb 81       	ldd	r27, Y+3	; 0x03
    2dce:	b8 5f       	subi	r27, 0xF8	; 248
    2dd0:	bb 83       	std	Y+3, r27	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2dd2:	33 94       	inc	r3
    2dd4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__GLCD+0x8>
    2dd8:	38 16       	cp	r3, r24
    2dda:	08 f4       	brcc	.+2      	; 0x2dde <GLCD_PrintChar+0x1a6>
    2ddc:	8c cf       	rjmp	.-232    	; 0x2cf6 <GLCD_PrintChar+0xbe>
    2dde:	57 2c       	mov	r5, r7
    2de0:	76 2c       	mov	r7, r6
    2de2:	03 c0       	rjmp	.+6      	; 0x2dea <GLCD_PrintChar+0x1b2>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
    2de4:	ef 81       	ldd	r30, Y+7	; 0x07
    2de6:	eb 83       	std	Y+3, r30	; 0x03
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
    2de8:	31 2c       	mov	r3, r1
		y += __GLCD_Screen_Line_Height;
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine(y2 + __GLCD.Font.Height))
    2dea:	2f 81       	ldd	r18, Y+7	; 0x07
    2dec:	22 95       	swap	r18
    2dee:	26 95       	lsr	r18
    2df0:	26 95       	lsr	r18
    2df2:	23 70       	andi	r18, 0x03	; 3
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__GLCD+0x7>
    2dfa:	82 95       	swap	r24
    2dfc:	86 95       	lsr	r24
    2dfe:	86 95       	lsr	r24
    2e00:	83 70       	andi	r24, 0x03	; 3
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	ff 81       	ldd	r31, Y+7	; 0x07
    2e06:	8f 0f       	add	r24, r31
    2e08:	91 1d       	adc	r25, r1
    2e0a:	28 17       	cp	r18, r24
    2e0c:	39 07       	cpc	r19, r25
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <GLCD_PrintChar+0x1da>
    2e10:	69 c0       	rjmp	.+210    	; 0x2ee4 <GLCD_PrintChar+0x2ac>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
    2e12:	6b 81       	ldd	r22, Y+3	; 0x03
    2e14:	8c 81       	ldd	r24, Y+4	; 0x04
    2e16:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
    2e1a:	28 85       	ldd	r18, Y+8	; 0x08
    2e1c:	39 85       	ldd	r19, Y+9	; 0x09
    2e1e:	23 0d       	add	r18, r3
    2e20:	31 1d       	adc	r19, r1
    2e22:	3a 83       	std	Y+2, r19	; 0x02
    2e24:	29 83       	std	Y+1, r18	; 0x01

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2e26:	55 20       	and	r5, r5
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <GLCD_PrintChar+0x1f4>
    2e2a:	51 c0       	rjmp	.+162    	; 0x2ece <GLCD_PrintChar+0x296>
    2e2c:	31 2c       	mov	r3, r1
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2e2e:	0f 2e       	mov	r0, r31
    2e30:	fb e2       	ldi	r31, 0x2B	; 43
    2e32:	af 2e       	mov	r10, r31
    2e34:	f1 e0       	ldi	r31, 0x01	; 1
    2e36:	bf 2e       	mov	r11, r31
    2e38:	f0 2d       	mov	r31, r0
    2e3a:	0a e2       	ldi	r16, 0x2A	; 42
    2e3c:	11 e0       	ldi	r17, 0x01	; 1
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2e3e:	0f 2e       	mov	r0, r31
    2e40:	fd e2       	ldi	r31, 0x2D	; 45
    2e42:	cf 2e       	mov	r12, r31
    2e44:	f1 e0       	ldi	r31, 0x01	; 1
    2e46:	df 2e       	mov	r13, r31
    2e48:	f0 2d       	mov	r31, r0
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2e4a:	88 e0       	ldi	r24, 0x08	; 8
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	ac 01       	movw	r20, r24
    2e50:	47 19       	sub	r20, r7
    2e52:	51 09       	sbc	r21, r1
    2e54:	3a 01       	movw	r6, r20
			data |= dataPrev;
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2e56:	0f 2e       	mov	r0, r31
    2e58:	f2 e3       	ldi	r31, 0x32	; 50
    2e5a:	ef 2e       	mov	r14, r31
    2e5c:	f1 e0       	ldi	r31, 0x01	; 1
    2e5e:	ff 2e       	mov	r15, r31
    2e60:	f0 2d       	mov	r31, r0
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    2e62:	0f 2e       	mov	r0, r31
    2e64:	f1 e3       	ldi	r31, 0x31	; 49
    2e66:	8f 2e       	mov	r8, r31
    2e68:	f1 e0       	ldi	r31, 0x01	; 1
    2e6a:	9f 2e       	mov	r9, r31
    2e6c:	f0 2d       	mov	r31, r0

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2e6e:	d5 01       	movw	r26, r10
    2e70:	2c 90       	ld	r2, X
    2e72:	f8 01       	movw	r30, r16
    2e74:	40 80       	ld	r4, Z
    2e76:	62 2d       	mov	r22, r2
    2e78:	84 2d       	mov	r24, r4
    2e7a:	0e 94 1d 11 	call	0x223a	; 0x223a <GLCD_BufferRead>
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
    2e7e:	d6 01       	movw	r26, r12
    2e80:	ed 91       	ld	r30, X+
    2e82:	fc 91       	ld	r31, X
    2e84:	29 81       	ldd	r18, Y+1	; 0x01
    2e86:	3a 81       	ldd	r19, Y+2	; 0x02
    2e88:	e2 0f       	add	r30, r18
    2e8a:	f3 1f       	adc	r31, r19
    2e8c:	44 91       	lpm	r20, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	06 2c       	mov	r0, r6
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <GLCD_PrintChar+0x260>
    2e94:	55 95       	asr	r21
    2e96:	47 95       	ror	r20
    2e98:	0a 94       	dec	r0
    2e9a:	e2 f7       	brpl	.-8      	; 0x2e94 <GLCD_PrintChar+0x25c>
			data |= dataPrev;
    2e9c:	48 2b       	or	r20, r24
			
			//Edit byte depending on the mode
			if (__GLCD.Font.Mode == GLCD_Merge)
    2e9e:	d7 01       	movw	r26, r14
    2ea0:	9c 91       	ld	r25, X
    2ea2:	91 30       	cpi	r25, 0x01	; 1
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <GLCD_PrintChar+0x270>
				data |= GLCD_BufferRead(__GLCD.X, __GLCD.Y);
    2ea6:	48 2b       	or	r20, r24
			
			//Send byte
			GLCD_BufferWrite(__GLCD.X++, __GLCD.Y, data);
    2ea8:	84 2d       	mov	r24, r4
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	f8 01       	movw	r30, r16
    2eae:	80 83       	st	Z, r24
    2eb0:	62 2d       	mov	r22, r2
    2eb2:	84 2d       	mov	r24, r4
    2eb4:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
    2eb8:	d4 01       	movw	r26, r8
    2eba:	8c 91       	ld	r24, X
    2ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec0:	e8 0f       	add	r30, r24
    2ec2:	f1 1d       	adc	r31, r1
    2ec4:	fa 83       	std	Y+2, r31	; 0x02
    2ec6:	e9 83       	std	Y+1, r30	; 0x01
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
    2ec8:	33 94       	inc	r3
    2eca:	35 10       	cpse	r3, r5
    2ecc:	d0 cf       	rjmp	.-96     	; 0x2e6e <GLCD_PrintChar+0x236>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		if (__GLCD.Font.Mode == GLCD_Overwrite)
    2ece:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__GLCD+0x9>
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <GLCD_PrintChar+0x2ac>
			GLCD_BufferWrite(__GLCD.X, __GLCD.Y, GLCD_White);
    2ed6:	40 e0       	ldi	r20, 0x00	; 0
    2ed8:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <__GLCD+0x2>
    2edc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__GLCD+0x1>
    2ee0:	0e 94 0f 11 	call	0x221e	; 0x221e <GLCD_BufferWrite>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
    2ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	85 0d       	add	r24, r5
    2eec:	0e 94 cc 11 	call	0x2398	; 0x2398 <GLCD_GotoXY>
}
    2ef0:	2b 96       	adiw	r28, 0x0b	; 11
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	df 90       	pop	r13
    2f0a:	cf 90       	pop	r12
    2f0c:	bf 90       	pop	r11
    2f0e:	af 90       	pop	r10
    2f10:	9f 90       	pop	r9
    2f12:	8f 90       	pop	r8
    2f14:	7f 90       	pop	r7
    2f16:	6f 90       	pop	r6
    2f18:	5f 90       	pop	r5
    2f1a:	4f 90       	pop	r4
    2f1c:	3f 90       	pop	r3
    2f1e:	2f 90       	pop	r2
    2f20:	08 95       	ret

00002f22 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	ec 01       	movw	r28, r24
	while(*Text)
    2f30:	88 81       	ld	r24, Y
    2f32:	88 23       	and	r24, r24
    2f34:	19 f1       	breq	.+70     	; 0x2f7c <GLCD_PrintString+0x5a>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    2f36:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__GLCD+0x1>
    2f3a:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <__GLCD+0x6>
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	29 0f       	add	r18, r25
    2f42:	31 1d       	adc	r19, r1
    2f44:	20 38       	cpi	r18, 0x80	; 128
    2f46:	31 05       	cpc	r19, r1
    2f48:	cc f4       	brge	.+50     	; 0x2f7c <GLCD_PrintString+0x5a>
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
    2f4a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Text)
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
    2f4c:	0f 2e       	mov	r0, r31
    2f4e:	fa e2       	ldi	r31, 0x2A	; 42
    2f50:	ef 2e       	mov	r14, r31
    2f52:	f1 e0       	ldi	r31, 0x01	; 1
    2f54:	ff 2e       	mov	r15, r31
    2f56:	f0 2d       	mov	r31, r0
    2f58:	0f e2       	ldi	r16, 0x2F	; 47
    2f5a:	11 e0       	ldi	r17, 0x01	; 1
    2f5c:	0a c0       	rjmp	.+20     	; 0x2f72 <GLCD_PrintString+0x50>
    2f5e:	f7 01       	movw	r30, r14
    2f60:	90 81       	ld	r25, Z
    2f62:	f8 01       	movw	r30, r16
    2f64:	20 81       	ld	r18, Z
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	29 0f       	add	r18, r25
    2f6a:	31 1d       	adc	r19, r1
    2f6c:	20 38       	cpi	r18, 0x80	; 128
    2f6e:	31 05       	cpc	r19, r1
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <GLCD_PrintString+0x5a>
			break;

		GLCD_PrintChar(*Text++);
    2f72:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
    2f76:	89 91       	ld	r24, Y+
    2f78:	81 11       	cpse	r24, r1
    2f7a:	f1 cf       	rjmp	.-30     	; 0x2f5e <GLCD_PrintString+0x3c>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	08 95       	ret

00002f8a <GLCD_PrintInteger>:
		r = pgm_read_byte(Text++);
	}
}

void GLCD_PrintInteger(const int32_t Value)
{
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	cf 93       	push	r28
    2f90:	df 93       	push	r29
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	2c 97       	sbiw	r28, 0x0c	; 12
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    2fa2:	61 15       	cp	r22, r1
    2fa4:	71 05       	cpc	r23, r1
    2fa6:	81 05       	cpc	r24, r1
    2fa8:	91 05       	cpc	r25, r1
    2faa:	21 f4       	brne	.+8      	; 0x2fb4 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    2fac:	80 e3       	ldi	r24, 0x30	; 48
    2fae:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
    2fb2:	45 c1       	rjmp	.+650    	; 0x323e <GLCD_PrintInteger+0x2b4>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    2fb4:	61 15       	cp	r22, r1
    2fb6:	71 05       	cpc	r23, r1
    2fb8:	81 05       	cpc	r24, r1
    2fba:	20 e8       	ldi	r18, 0x80	; 128
    2fbc:	92 07       	cpc	r25, r18
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <GLCD_PrintInteger+0x38>
    2fc0:	3e c1       	rjmp	.+636    	; 0x323e <GLCD_PrintInteger+0x2b4>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	31 96       	adiw	r30, 0x01	; 1
    2fc6:	2c e0       	ldi	r18, 0x0C	; 12
    2fc8:	df 01       	movw	r26, r30
    2fca:	1d 92       	st	X+, r1
    2fcc:	2a 95       	dec	r18
    2fce:	e9 f7       	brne	.-6      	; 0x2fca <GLCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    2fd0:	20 e3       	ldi	r18, 0x30	; 48
    2fd2:	2b 87       	std	Y+11, r18	; 0x0b
    2fd4:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    2fd6:	29 87       	std	Y+9, r18	; 0x09
    2fd8:	28 87       	std	Y+8, r18	; 0x08
    2fda:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    2fdc:	2e 83       	std	Y+6, r18	; 0x06
    2fde:	2d 83       	std	Y+5, r18	; 0x05
    2fe0:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    2fe2:	2b 83       	std	Y+3, r18	; 0x03
    2fe4:	2a 83       	std	Y+2, r18	; 0x02
    2fe6:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    2fe8:	99 23       	and	r25, r25
    2fea:	5c f4       	brge	.+22     	; 0x3002 <GLCD_PrintInteger+0x78>
	{
		isNegative = 1;
		Value = -Value;
    2fec:	9b 01       	movw	r18, r22
    2fee:	ac 01       	movw	r20, r24
    2ff0:	88 27       	eor	r24, r24
    2ff2:	99 27       	eor	r25, r25
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	82 1b       	sub	r24, r18
    2ff8:	93 0b       	sbc	r25, r19
    2ffa:	a4 0b       	sbc	r26, r20
    2ffc:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <GLCD_PrintInteger+0x7e>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    3006:	40 e0       	ldi	r20, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    3008:	81 30       	cpi	r24, 0x01	; 1
    300a:	3a ec       	ldi	r19, 0xCA	; 202
    300c:	93 07       	cpc	r25, r19
    300e:	3a e9       	ldi	r19, 0x9A	; 154
    3010:	a3 07       	cpc	r26, r19
    3012:	3b e3       	ldi	r19, 0x3B	; 59
    3014:	b3 07       	cpc	r27, r19
    3016:	94 f0       	brlt	.+36     	; 0x303c <GLCD_PrintInteger+0xb2>
    3018:	2a 81       	ldd	r18, Y+2	; 0x02
    301a:	2f 5f       	subi	r18, 0xFF	; 255
    301c:	01 c0       	rjmp	.+2      	; 0x3020 <GLCD_PrintInteger+0x96>
    301e:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    3020:	9a 5c       	subi	r25, 0xCA	; 202
    3022:	aa 49       	sbci	r26, 0x9A	; 154
    3024:	bb 43       	sbci	r27, 0x3B	; 59
    3026:	32 2f       	mov	r19, r18
    3028:	3f 5f       	subi	r19, 0xFF	; 255
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    302a:	81 30       	cpi	r24, 0x01	; 1
    302c:	5a ec       	ldi	r21, 0xCA	; 202
    302e:	95 07       	cpc	r25, r21
    3030:	5a e9       	ldi	r21, 0x9A	; 154
    3032:	a5 07       	cpc	r26, r21
    3034:	5b e3       	ldi	r21, 0x3B	; 59
    3036:	b5 07       	cpc	r27, r21
    3038:	94 f7       	brge	.-28     	; 0x301e <GLCD_PrintInteger+0x94>
    303a:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    303c:	81 15       	cp	r24, r1
    303e:	21 ee       	ldi	r18, 0xE1	; 225
    3040:	92 07       	cpc	r25, r18
    3042:	25 ef       	ldi	r18, 0xF5	; 245
    3044:	a2 07       	cpc	r26, r18
    3046:	25 e0       	ldi	r18, 0x05	; 5
    3048:	b2 07       	cpc	r27, r18
    304a:	94 f0       	brlt	.+36     	; 0x3070 <GLCD_PrintInteger+0xe6>
    304c:	2b 81       	ldd	r18, Y+3	; 0x03
    304e:	2f 5f       	subi	r18, 0xFF	; 255
    3050:	01 c0       	rjmp	.+2      	; 0x3054 <GLCD_PrintInteger+0xca>
    3052:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    3054:	91 5e       	subi	r25, 0xE1	; 225
    3056:	a5 4f       	sbci	r26, 0xF5	; 245
    3058:	b5 40       	sbci	r27, 0x05	; 5
    305a:	32 2f       	mov	r19, r18
    305c:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    305e:	81 15       	cp	r24, r1
    3060:	51 ee       	ldi	r21, 0xE1	; 225
    3062:	95 07       	cpc	r25, r21
    3064:	55 ef       	ldi	r21, 0xF5	; 245
    3066:	a5 07       	cpc	r26, r21
    3068:	55 e0       	ldi	r21, 0x05	; 5
    306a:	b5 07       	cpc	r27, r21
    306c:	94 f7       	brge	.-28     	; 0x3052 <GLCD_PrintInteger+0xc8>
    306e:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    3070:	80 38       	cpi	r24, 0x80	; 128
    3072:	26 e9       	ldi	r18, 0x96	; 150
    3074:	92 07       	cpc	r25, r18
    3076:	28 e9       	ldi	r18, 0x98	; 152
    3078:	a2 07       	cpc	r26, r18
    307a:	b1 05       	cpc	r27, r1
    307c:	94 f0       	brlt	.+36     	; 0x30a2 <GLCD_PrintInteger+0x118>
    307e:	2c 81       	ldd	r18, Y+4	; 0x04
    3080:	2f 5f       	subi	r18, 0xFF	; 255
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <GLCD_PrintInteger+0xfc>
    3084:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    3086:	80 58       	subi	r24, 0x80	; 128
    3088:	96 49       	sbci	r25, 0x96	; 150
    308a:	a8 49       	sbci	r26, 0x98	; 152
    308c:	b1 09       	sbc	r27, r1
    308e:	32 2f       	mov	r19, r18
    3090:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    3092:	80 38       	cpi	r24, 0x80	; 128
    3094:	56 e9       	ldi	r21, 0x96	; 150
    3096:	95 07       	cpc	r25, r21
    3098:	58 e9       	ldi	r21, 0x98	; 152
    309a:	a5 07       	cpc	r26, r21
    309c:	b1 05       	cpc	r27, r1
    309e:	94 f7       	brge	.-28     	; 0x3084 <GLCD_PrintInteger+0xfa>
    30a0:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    30a2:	80 34       	cpi	r24, 0x40	; 64
    30a4:	22 e4       	ldi	r18, 0x42	; 66
    30a6:	92 07       	cpc	r25, r18
    30a8:	2f e0       	ldi	r18, 0x0F	; 15
    30aa:	a2 07       	cpc	r26, r18
    30ac:	b1 05       	cpc	r27, r1
    30ae:	94 f0       	brlt	.+36     	; 0x30d4 <GLCD_PrintInteger+0x14a>
    30b0:	2d 81       	ldd	r18, Y+5	; 0x05
    30b2:	2f 5f       	subi	r18, 0xFF	; 255
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <GLCD_PrintInteger+0x12e>
    30b6:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    30b8:	80 54       	subi	r24, 0x40	; 64
    30ba:	92 44       	sbci	r25, 0x42	; 66
    30bc:	af 40       	sbci	r26, 0x0F	; 15
    30be:	b1 09       	sbc	r27, r1
    30c0:	32 2f       	mov	r19, r18
    30c2:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    30c4:	80 34       	cpi	r24, 0x40	; 64
    30c6:	52 e4       	ldi	r21, 0x42	; 66
    30c8:	95 07       	cpc	r25, r21
    30ca:	5f e0       	ldi	r21, 0x0F	; 15
    30cc:	a5 07       	cpc	r26, r21
    30ce:	b1 05       	cpc	r27, r1
    30d0:	94 f7       	brge	.-28     	; 0x30b6 <GLCD_PrintInteger+0x12c>
    30d2:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    30d4:	80 3a       	cpi	r24, 0xA0	; 160
    30d6:	26 e8       	ldi	r18, 0x86	; 134
    30d8:	92 07       	cpc	r25, r18
    30da:	21 e0       	ldi	r18, 0x01	; 1
    30dc:	a2 07       	cpc	r26, r18
    30de:	b1 05       	cpc	r27, r1
    30e0:	94 f0       	brlt	.+36     	; 0x3106 <GLCD_PrintInteger+0x17c>
    30e2:	2e 81       	ldd	r18, Y+6	; 0x06
    30e4:	2f 5f       	subi	r18, 0xFF	; 255
    30e6:	01 c0       	rjmp	.+2      	; 0x30ea <GLCD_PrintInteger+0x160>
    30e8:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    30ea:	80 5a       	subi	r24, 0xA0	; 160
    30ec:	96 48       	sbci	r25, 0x86	; 134
    30ee:	a1 40       	sbci	r26, 0x01	; 1
    30f0:	b1 09       	sbc	r27, r1
    30f2:	32 2f       	mov	r19, r18
    30f4:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    30f6:	80 3a       	cpi	r24, 0xA0	; 160
    30f8:	56 e8       	ldi	r21, 0x86	; 134
    30fa:	95 07       	cpc	r25, r21
    30fc:	51 e0       	ldi	r21, 0x01	; 1
    30fe:	a5 07       	cpc	r26, r21
    3100:	b1 05       	cpc	r27, r1
    3102:	94 f7       	brge	.-28     	; 0x30e8 <GLCD_PrintInteger+0x15e>
    3104:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    3106:	80 31       	cpi	r24, 0x10	; 16
    3108:	27 e2       	ldi	r18, 0x27	; 39
    310a:	92 07       	cpc	r25, r18
    310c:	a1 05       	cpc	r26, r1
    310e:	b1 05       	cpc	r27, r1
    3110:	8c f0       	brlt	.+34     	; 0x3134 <GLCD_PrintInteger+0x1aa>
    3112:	2f 81       	ldd	r18, Y+7	; 0x07
    3114:	2f 5f       	subi	r18, 0xFF	; 255
    3116:	01 c0       	rjmp	.+2      	; 0x311a <GLCD_PrintInteger+0x190>
    3118:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    311a:	80 51       	subi	r24, 0x10	; 16
    311c:	97 42       	sbci	r25, 0x27	; 39
    311e:	a1 09       	sbc	r26, r1
    3120:	b1 09       	sbc	r27, r1
    3122:	32 2f       	mov	r19, r18
    3124:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    3126:	80 31       	cpi	r24, 0x10	; 16
    3128:	57 e2       	ldi	r21, 0x27	; 39
    312a:	95 07       	cpc	r25, r21
    312c:	a1 05       	cpc	r26, r1
    312e:	b1 05       	cpc	r27, r1
    3130:	9c f7       	brge	.-26     	; 0x3118 <GLCD_PrintInteger+0x18e>
    3132:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3134:	88 3e       	cpi	r24, 0xE8	; 232
    3136:	23 e0       	ldi	r18, 0x03	; 3
    3138:	92 07       	cpc	r25, r18
    313a:	a1 05       	cpc	r26, r1
    313c:	b1 05       	cpc	r27, r1
    313e:	8c f0       	brlt	.+34     	; 0x3162 <GLCD_PrintInteger+0x1d8>
    3140:	28 85       	ldd	r18, Y+8	; 0x08
    3142:	2f 5f       	subi	r18, 0xFF	; 255
    3144:	01 c0       	rjmp	.+2      	; 0x3148 <GLCD_PrintInteger+0x1be>
    3146:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    3148:	88 5e       	subi	r24, 0xE8	; 232
    314a:	93 40       	sbci	r25, 0x03	; 3
    314c:	a1 09       	sbc	r26, r1
    314e:	b1 09       	sbc	r27, r1
    3150:	32 2f       	mov	r19, r18
    3152:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3154:	88 3e       	cpi	r24, 0xE8	; 232
    3156:	53 e0       	ldi	r21, 0x03	; 3
    3158:	95 07       	cpc	r25, r21
    315a:	a1 05       	cpc	r26, r1
    315c:	b1 05       	cpc	r27, r1
    315e:	9c f7       	brge	.-26     	; 0x3146 <GLCD_PrintInteger+0x1bc>
    3160:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    3162:	84 36       	cpi	r24, 0x64	; 100
    3164:	91 05       	cpc	r25, r1
    3166:	a1 05       	cpc	r26, r1
    3168:	b1 05       	cpc	r27, r1
    316a:	84 f0       	brlt	.+32     	; 0x318c <GLCD_PrintInteger+0x202>
    316c:	29 85       	ldd	r18, Y+9	; 0x09
    316e:	2f 5f       	subi	r18, 0xFF	; 255
    3170:	01 c0       	rjmp	.+2      	; 0x3174 <GLCD_PrintInteger+0x1ea>
    3172:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    3174:	84 56       	subi	r24, 0x64	; 100
    3176:	91 09       	sbc	r25, r1
    3178:	a1 09       	sbc	r26, r1
    317a:	b1 09       	sbc	r27, r1
    317c:	32 2f       	mov	r19, r18
    317e:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    3180:	84 36       	cpi	r24, 0x64	; 100
    3182:	91 05       	cpc	r25, r1
    3184:	a1 05       	cpc	r26, r1
    3186:	b1 05       	cpc	r27, r1
    3188:	a4 f7       	brge	.-24     	; 0x3172 <GLCD_PrintInteger+0x1e8>
    318a:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    318c:	8a 30       	cpi	r24, 0x0A	; 10
    318e:	91 05       	cpc	r25, r1
    3190:	a1 05       	cpc	r26, r1
    3192:	b1 05       	cpc	r27, r1
    3194:	7c f0       	brlt	.+30     	; 0x31b4 <GLCD_PrintInteger+0x22a>
    3196:	2a 85       	ldd	r18, Y+10	; 0x0a
    3198:	2f 5f       	subi	r18, 0xFF	; 255
    319a:	01 c0       	rjmp	.+2      	; 0x319e <GLCD_PrintInteger+0x214>
    319c:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    319e:	0a 97       	sbiw	r24, 0x0a	; 10
    31a0:	a1 09       	sbc	r26, r1
    31a2:	b1 09       	sbc	r27, r1
    31a4:	32 2f       	mov	r19, r18
    31a6:	3f 5f       	subi	r19, 0xFF	; 255
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    31a8:	8a 30       	cpi	r24, 0x0A	; 10
    31aa:	91 05       	cpc	r25, r1
    31ac:	a1 05       	cpc	r26, r1
    31ae:	b1 05       	cpc	r27, r1
    31b0:	ac f7       	brge	.-22     	; 0x319c <GLCD_PrintInteger+0x212>
    31b2:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    31b4:	18 16       	cp	r1, r24
    31b6:	19 06       	cpc	r1, r25
    31b8:	1a 06       	cpc	r1, r26
    31ba:	1b 06       	cpc	r1, r27
    31bc:	5c f4       	brge	.+22     	; 0x31d4 <GLCD_PrintInteger+0x24a>
    31be:	5b 85       	ldd	r21, Y+11	; 0x0b
    31c0:	8c 01       	movw	r16, r24
    31c2:	9d 01       	movw	r18, r26
	{
		Value -= 1;
    31c4:	01 50       	subi	r16, 0x01	; 1
    31c6:	11 09       	sbc	r17, r1
    31c8:	21 09       	sbc	r18, r1
    31ca:	31 09       	sbc	r19, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    31cc:	d9 f7       	brne	.-10     	; 0x31c4 <GLCD_PrintInteger+0x23a>
    31ce:	65 2f       	mov	r22, r21
    31d0:	68 0f       	add	r22, r24
    31d2:	6b 87       	std	Y+11, r22	; 0x0b
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	80 33       	cpi	r24, 0x30	; 48
    31d8:	61 f4       	brne	.+24     	; 0x31f2 <GLCD_PrintInteger+0x268>
    31da:	80 e0       	ldi	r24, 0x00	; 0
		i++;
    31dc:	8f 5f       	subi	r24, 0xFF	; 255
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    31de:	e1 e0       	ldi	r30, 0x01	; 1
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	ec 0f       	add	r30, r28
    31e4:	fd 1f       	adc	r31, r29
    31e6:	e8 0f       	add	r30, r24
    31e8:	f1 1d       	adc	r31, r1
    31ea:	90 81       	ld	r25, Z
    31ec:	90 33       	cpi	r25, 0x30	; 48
    31ee:	b1 f3       	breq	.-20     	; 0x31dc <GLCD_PrintInteger+0x252>
    31f0:	01 c0       	rjmp	.+2      	; 0x31f4 <GLCD_PrintInteger+0x26a>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
		i++;

	//Add sign 
	if (isNegative)
    31f4:	44 23       	and	r20, r20
    31f6:	31 f0       	breq	.+12     	; 0x3204 <GLCD_PrintInteger+0x27a>
	{
		i--;
    31f8:	81 50       	subi	r24, 0x01	; 1
		BCD[i] = '-';
    31fa:	fe 01       	movw	r30, r28
    31fc:	e8 0f       	add	r30, r24
    31fe:	f1 1d       	adc	r31, r1
    3200:	9d e2       	ldi	r25, 0x2D	; 45
    3202:	91 83       	std	Z+1, r25	; 0x01
	}

	//Shift array
	uint8_t end = 10 - i;
    3204:	4a e0       	ldi	r20, 0x0A	; 10
    3206:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    3208:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	e1 e0       	ldi	r30, 0x01	; 1
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	ec 0f       	add	r30, r28
    3212:	fd 1f       	adc	r31, r29
    3214:	e2 0f       	add	r30, r18
    3216:	f1 1d       	adc	r31, r1
    3218:	df 01       	movw	r26, r30
    321a:	a8 0f       	add	r26, r24
    321c:	b9 1f       	adc	r27, r25
    321e:	3c 91       	ld	r19, X
    3220:	30 83       	st	Z, r19
		i++;
    3222:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    3224:	42 17       	cp	r20, r18
    3226:	90 f7       	brcc	.-28     	; 0x320c <GLCD_PrintInteger+0x282>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    3228:	e1 e0       	ldi	r30, 0x01	; 1
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	ec 0f       	add	r30, r28
    322e:	fd 1f       	adc	r31, r29
    3230:	e2 0f       	add	r30, r18
    3232:	f1 1d       	adc	r31, r1
    3234:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    3236:	ce 01       	movw	r24, r28
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <GLCD_PrintString>
	}
}
    323e:	2c 96       	adiw	r28, 0x0c	; 12
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	08 95       	ret

00003254 <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint32_t Tens)
{
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	6b 01       	movw	r12, r22
    3266:	7c 01       	movw	r14, r24
    3268:	49 01       	movw	r8, r18
    326a:	5a 01       	movw	r10, r20
	if (Value == 0)
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	a9 01       	movw	r20, r18
    3272:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__cmpsf2>
    3276:	81 11       	cpse	r24, r1
    3278:	0a c0       	rjmp	.+20     	; 0x328e <GLCD_PrintDouble+0x3a>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar('0');
    327a:	80 e3       	ldi	r24, 0x30	; 48
    327c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
		GLCD_PrintChar('.');
    3280:	8e e2       	ldi	r24, 0x2E	; 46
    3282:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
		GLCD_PrintChar('0');
    3286:	80 e3       	ldi	r24, 0x30	; 48
    3288:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
    328c:	4a c0       	rjmp	.+148    	; 0x3322 <GLCD_PrintDouble+0xce>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	5f ec       	ldi	r21, 0xCF	; 207
    3296:	c7 01       	movw	r24, r14
    3298:	b6 01       	movw	r22, r12
    329a:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__gesf2>
    329e:	88 23       	and	r24, r24
    32a0:	0c f4       	brge	.+2      	; 0x32a4 <GLCD_PrintDouble+0x50>
    32a2:	3f c0       	rjmp	.+126    	; 0x3322 <GLCD_PrintDouble+0xce>
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	5f e4       	ldi	r21, 0x4F	; 79
    32ac:	c7 01       	movw	r24, r14
    32ae:	b6 01       	movw	r22, r12
    32b0:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__cmpsf2>
    32b4:	88 23       	and	r24, r24
    32b6:	ac f5       	brge	.+106    	; 0x3322 <GLCD_PrintDouble+0xce>
	{
		//Print sign
		if (Value < 0)
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	a9 01       	movw	r20, r18
    32be:	c7 01       	movw	r24, r14
    32c0:	b6 01       	movw	r22, r12
    32c2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__cmpsf2>
    32c6:	88 23       	and	r24, r24
    32c8:	3c f4       	brge	.+14     	; 0x32d8 <GLCD_PrintDouble+0x84>
		{
			Value = -Value;
    32ca:	f7 fa       	bst	r15, 7
    32cc:	f0 94       	com	r15
    32ce:	f7 f8       	bld	r15, 7
    32d0:	f0 94       	com	r15
			GLCD_PrintChar('-');
    32d2:	8d e2       	ldi	r24, 0x2D	; 45
    32d4:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
    32d8:	c7 01       	movw	r24, r14
    32da:	b6 01       	movw	r22, r12
    32dc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__fixsfsi>
    32e0:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar('.');
    32e4:	8e e2       	ldi	r24, 0x2E	; 46
    32e6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * Tens);
    32ea:	c7 01       	movw	r24, r14
    32ec:	b6 01       	movw	r22, r12
    32ee:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixunssfsi>
    32f2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    32f6:	9b 01       	movw	r18, r22
    32f8:	ac 01       	movw	r20, r24
    32fa:	c7 01       	movw	r24, r14
    32fc:	b6 01       	movw	r22, r12
    32fe:	0e 94 be 19 	call	0x337c	; 0x337c <__subsf3>
    3302:	6b 01       	movw	r12, r22
    3304:	7c 01       	movw	r14, r24
    3306:	c5 01       	movw	r24, r10
    3308:	b4 01       	movw	r22, r8
    330a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__floatunsisf>
    330e:	9b 01       	movw	r18, r22
    3310:	ac 01       	movw	r20, r24
    3312:	c7 01       	movw	r24, r14
    3314:	b6 01       	movw	r22, r12
    3316:	0e 94 8f 1b 	call	0x371e	; 0x371e <__mulsf3>
    331a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__fixsfsi>
    331e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GLCD_PrintInteger>
	}
}
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	df 90       	pop	r13
    3328:	cf 90       	pop	r12
    332a:	bf 90       	pop	r11
    332c:	af 90       	pop	r10
    332e:	9f 90       	pop	r9
    3330:	8f 90       	pop	r8
    3332:	08 95       	ret

00003334 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    3334:	a1 9a       	sbi	0x14, 1	; 20
	PinMode(TWI_SCL, Output);
    3336:	a0 9a       	sbi	0x14, 0	; 20
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    3338:	a9 9a       	sbi	0x15, 1	; 21
	DigitalWrite(TWI_SCL, High);
    333a:	a8 9a       	sbi	0x15, 0	; 21

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    333c:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    333e:	8c e0       	ldi	r24, 0x0C	; 12
    3340:	80 b9       	out	0x00, r24	; 0
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    3342:	84 e0       	ldi	r24, 0x04	; 4
    3344:	86 bf       	out	0x36, r24	; 54
    3346:	08 95       	ret

00003348 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    3348:	81 b1       	in	r24, 0x01	; 1
}
    334a:	88 7f       	andi	r24, 0xF8	; 248
    334c:	08 95       	ret

0000334e <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    334e:	84 ea       	ldi	r24, 0xA4	; 164
    3350:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    3352:	06 b6       	in	r0, 0x36	; 54
    3354:	07 fe       	sbrs	r0, 7
    3356:	fd cf       	rjmp	.-6      	; 0x3352 <TWI_BeginTransmission+0x4>

	//Return status register
	return (TWI_Status());
    3358:	0e 94 a4 19 	call	0x3348	; 0x3348 <TWI_Status>
}
    335c:	08 95       	ret

0000335e <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    335e:	85 ed       	ldi	r24, 0xD5	; 213
    3360:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    3362:	06 b6       	in	r0, 0x36	; 54
    3364:	04 fc       	sbrc	r0, 4
    3366:	fd cf       	rjmp	.-6      	; 0x3362 <TWI_EndTransmission+0x4>
}
    3368:	08 95       	ret

0000336a <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    336a:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    336c:	84 e8       	ldi	r24, 0x84	; 132
    336e:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    3370:	06 b6       	in	r0, 0x36	; 54
    3372:	07 fe       	sbrs	r0, 7
    3374:	fd cf       	rjmp	.-6      	; 0x3370 <TWI_Transmit+0x6>

	//Return status register
	return (TWI_Status());
    3376:	0e 94 a4 19 	call	0x3348	; 0x3348 <TWI_Status>
}
    337a:	08 95       	ret

0000337c <__subsf3>:
    337c:	50 58       	subi	r21, 0x80	; 128

0000337e <__addsf3>:
    337e:	bb 27       	eor	r27, r27
    3380:	aa 27       	eor	r26, r26
    3382:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__addsf3x>
    3386:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__fp_round>
    338a:	0e 94 42 1b 	call	0x3684	; 0x3684 <__fp_pscA>
    338e:	38 f0       	brcs	.+14     	; 0x339e <__addsf3+0x20>
    3390:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_pscB>
    3394:	20 f0       	brcs	.+8      	; 0x339e <__addsf3+0x20>
    3396:	39 f4       	brne	.+14     	; 0x33a6 <__addsf3+0x28>
    3398:	9f 3f       	cpi	r25, 0xFF	; 255
    339a:	19 f4       	brne	.+6      	; 0x33a2 <__addsf3+0x24>
    339c:	26 f4       	brtc	.+8      	; 0x33a6 <__addsf3+0x28>
    339e:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__fp_nan>
    33a2:	0e f4       	brtc	.+2      	; 0x33a6 <__addsf3+0x28>
    33a4:	e0 95       	com	r30
    33a6:	e7 fb       	bst	r30, 7
    33a8:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__fp_inf>

000033ac <__addsf3x>:
    33ac:	e9 2f       	mov	r30, r25
    33ae:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__fp_split3>
    33b2:	58 f3       	brcs	.-42     	; 0x338a <__addsf3+0xc>
    33b4:	ba 17       	cp	r27, r26
    33b6:	62 07       	cpc	r22, r18
    33b8:	73 07       	cpc	r23, r19
    33ba:	84 07       	cpc	r24, r20
    33bc:	95 07       	cpc	r25, r21
    33be:	20 f0       	brcs	.+8      	; 0x33c8 <__addsf3x+0x1c>
    33c0:	79 f4       	brne	.+30     	; 0x33e0 <__addsf3x+0x34>
    33c2:	a6 f5       	brtc	.+104    	; 0x342c <__addsf3x+0x80>
    33c4:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__fp_zero>
    33c8:	0e f4       	brtc	.+2      	; 0x33cc <__addsf3x+0x20>
    33ca:	e0 95       	com	r30
    33cc:	0b 2e       	mov	r0, r27
    33ce:	ba 2f       	mov	r27, r26
    33d0:	a0 2d       	mov	r26, r0
    33d2:	0b 01       	movw	r0, r22
    33d4:	b9 01       	movw	r22, r18
    33d6:	90 01       	movw	r18, r0
    33d8:	0c 01       	movw	r0, r24
    33da:	ca 01       	movw	r24, r20
    33dc:	a0 01       	movw	r20, r0
    33de:	11 24       	eor	r1, r1
    33e0:	ff 27       	eor	r31, r31
    33e2:	59 1b       	sub	r21, r25
    33e4:	99 f0       	breq	.+38     	; 0x340c <__addsf3x+0x60>
    33e6:	59 3f       	cpi	r21, 0xF9	; 249
    33e8:	50 f4       	brcc	.+20     	; 0x33fe <__addsf3x+0x52>
    33ea:	50 3e       	cpi	r21, 0xE0	; 224
    33ec:	68 f1       	brcs	.+90     	; 0x3448 <__addsf3x+0x9c>
    33ee:	1a 16       	cp	r1, r26
    33f0:	f0 40       	sbci	r31, 0x00	; 0
    33f2:	a2 2f       	mov	r26, r18
    33f4:	23 2f       	mov	r18, r19
    33f6:	34 2f       	mov	r19, r20
    33f8:	44 27       	eor	r20, r20
    33fa:	58 5f       	subi	r21, 0xF8	; 248
    33fc:	f3 cf       	rjmp	.-26     	; 0x33e4 <__addsf3x+0x38>
    33fe:	46 95       	lsr	r20
    3400:	37 95       	ror	r19
    3402:	27 95       	ror	r18
    3404:	a7 95       	ror	r26
    3406:	f0 40       	sbci	r31, 0x00	; 0
    3408:	53 95       	inc	r21
    340a:	c9 f7       	brne	.-14     	; 0x33fe <__addsf3x+0x52>
    340c:	7e f4       	brtc	.+30     	; 0x342c <__addsf3x+0x80>
    340e:	1f 16       	cp	r1, r31
    3410:	ba 0b       	sbc	r27, r26
    3412:	62 0b       	sbc	r22, r18
    3414:	73 0b       	sbc	r23, r19
    3416:	84 0b       	sbc	r24, r20
    3418:	ba f0       	brmi	.+46     	; 0x3448 <__addsf3x+0x9c>
    341a:	91 50       	subi	r25, 0x01	; 1
    341c:	a1 f0       	breq	.+40     	; 0x3446 <__addsf3x+0x9a>
    341e:	ff 0f       	add	r31, r31
    3420:	bb 1f       	adc	r27, r27
    3422:	66 1f       	adc	r22, r22
    3424:	77 1f       	adc	r23, r23
    3426:	88 1f       	adc	r24, r24
    3428:	c2 f7       	brpl	.-16     	; 0x341a <__addsf3x+0x6e>
    342a:	0e c0       	rjmp	.+28     	; 0x3448 <__addsf3x+0x9c>
    342c:	ba 0f       	add	r27, r26
    342e:	62 1f       	adc	r22, r18
    3430:	73 1f       	adc	r23, r19
    3432:	84 1f       	adc	r24, r20
    3434:	48 f4       	brcc	.+18     	; 0x3448 <__addsf3x+0x9c>
    3436:	87 95       	ror	r24
    3438:	77 95       	ror	r23
    343a:	67 95       	ror	r22
    343c:	b7 95       	ror	r27
    343e:	f7 95       	ror	r31
    3440:	9e 3f       	cpi	r25, 0xFE	; 254
    3442:	08 f0       	brcs	.+2      	; 0x3446 <__addsf3x+0x9a>
    3444:	b0 cf       	rjmp	.-160    	; 0x33a6 <__addsf3+0x28>
    3446:	93 95       	inc	r25
    3448:	88 0f       	add	r24, r24
    344a:	08 f0       	brcs	.+2      	; 0x344e <__addsf3x+0xa2>
    344c:	99 27       	eor	r25, r25
    344e:	ee 0f       	add	r30, r30
    3450:	97 95       	ror	r25
    3452:	87 95       	ror	r24
    3454:	08 95       	ret

00003456 <__cmpsf2>:
    3456:	0e 94 15 1b 	call	0x362a	; 0x362a <__fp_cmp>
    345a:	08 f4       	brcc	.+2      	; 0x345e <__cmpsf2+0x8>
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	08 95       	ret

00003460 <__divsf3>:
    3460:	0e 94 44 1a 	call	0x3488	; 0x3488 <__divsf3x>
    3464:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__fp_round>
    3468:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_pscB>
    346c:	58 f0       	brcs	.+22     	; 0x3484 <__divsf3+0x24>
    346e:	0e 94 42 1b 	call	0x3684	; 0x3684 <__fp_pscA>
    3472:	40 f0       	brcs	.+16     	; 0x3484 <__divsf3+0x24>
    3474:	29 f4       	brne	.+10     	; 0x3480 <__divsf3+0x20>
    3476:	5f 3f       	cpi	r21, 0xFF	; 255
    3478:	29 f0       	breq	.+10     	; 0x3484 <__divsf3+0x24>
    347a:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__fp_inf>
    347e:	51 11       	cpse	r21, r1
    3480:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_szero>
    3484:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__fp_nan>

00003488 <__divsf3x>:
    3488:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__fp_split3>
    348c:	68 f3       	brcs	.-38     	; 0x3468 <__divsf3+0x8>

0000348e <__divsf3_pse>:
    348e:	99 23       	and	r25, r25
    3490:	b1 f3       	breq	.-20     	; 0x347e <__divsf3+0x1e>
    3492:	55 23       	and	r21, r21
    3494:	91 f3       	breq	.-28     	; 0x347a <__divsf3+0x1a>
    3496:	95 1b       	sub	r25, r21
    3498:	55 0b       	sbc	r21, r21
    349a:	bb 27       	eor	r27, r27
    349c:	aa 27       	eor	r26, r26
    349e:	62 17       	cp	r22, r18
    34a0:	73 07       	cpc	r23, r19
    34a2:	84 07       	cpc	r24, r20
    34a4:	38 f0       	brcs	.+14     	; 0x34b4 <__divsf3_pse+0x26>
    34a6:	9f 5f       	subi	r25, 0xFF	; 255
    34a8:	5f 4f       	sbci	r21, 0xFF	; 255
    34aa:	22 0f       	add	r18, r18
    34ac:	33 1f       	adc	r19, r19
    34ae:	44 1f       	adc	r20, r20
    34b0:	aa 1f       	adc	r26, r26
    34b2:	a9 f3       	breq	.-22     	; 0x349e <__divsf3_pse+0x10>
    34b4:	35 d0       	rcall	.+106    	; 0x3520 <__divsf3_pse+0x92>
    34b6:	0e 2e       	mov	r0, r30
    34b8:	3a f0       	brmi	.+14     	; 0x34c8 <__divsf3_pse+0x3a>
    34ba:	e0 e8       	ldi	r30, 0x80	; 128
    34bc:	32 d0       	rcall	.+100    	; 0x3522 <__divsf3_pse+0x94>
    34be:	91 50       	subi	r25, 0x01	; 1
    34c0:	50 40       	sbci	r21, 0x00	; 0
    34c2:	e6 95       	lsr	r30
    34c4:	00 1c       	adc	r0, r0
    34c6:	ca f7       	brpl	.-14     	; 0x34ba <__divsf3_pse+0x2c>
    34c8:	2b d0       	rcall	.+86     	; 0x3520 <__divsf3_pse+0x92>
    34ca:	fe 2f       	mov	r31, r30
    34cc:	29 d0       	rcall	.+82     	; 0x3520 <__divsf3_pse+0x92>
    34ce:	66 0f       	add	r22, r22
    34d0:	77 1f       	adc	r23, r23
    34d2:	88 1f       	adc	r24, r24
    34d4:	bb 1f       	adc	r27, r27
    34d6:	26 17       	cp	r18, r22
    34d8:	37 07       	cpc	r19, r23
    34da:	48 07       	cpc	r20, r24
    34dc:	ab 07       	cpc	r26, r27
    34de:	b0 e8       	ldi	r27, 0x80	; 128
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <__divsf3_pse+0x56>
    34e2:	bb 0b       	sbc	r27, r27
    34e4:	80 2d       	mov	r24, r0
    34e6:	bf 01       	movw	r22, r30
    34e8:	ff 27       	eor	r31, r31
    34ea:	93 58       	subi	r25, 0x83	; 131
    34ec:	5f 4f       	sbci	r21, 0xFF	; 255
    34ee:	3a f0       	brmi	.+14     	; 0x34fe <__divsf3_pse+0x70>
    34f0:	9e 3f       	cpi	r25, 0xFE	; 254
    34f2:	51 05       	cpc	r21, r1
    34f4:	78 f0       	brcs	.+30     	; 0x3514 <__divsf3_pse+0x86>
    34f6:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__fp_inf>
    34fa:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_szero>
    34fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3500:	e4 f3       	brlt	.-8      	; 0x34fa <__divsf3_pse+0x6c>
    3502:	98 3e       	cpi	r25, 0xE8	; 232
    3504:	d4 f3       	brlt	.-12     	; 0x34fa <__divsf3_pse+0x6c>
    3506:	86 95       	lsr	r24
    3508:	77 95       	ror	r23
    350a:	67 95       	ror	r22
    350c:	b7 95       	ror	r27
    350e:	f7 95       	ror	r31
    3510:	9f 5f       	subi	r25, 0xFF	; 255
    3512:	c9 f7       	brne	.-14     	; 0x3506 <__divsf3_pse+0x78>
    3514:	88 0f       	add	r24, r24
    3516:	91 1d       	adc	r25, r1
    3518:	96 95       	lsr	r25
    351a:	87 95       	ror	r24
    351c:	97 f9       	bld	r25, 7
    351e:	08 95       	ret
    3520:	e1 e0       	ldi	r30, 0x01	; 1
    3522:	66 0f       	add	r22, r22
    3524:	77 1f       	adc	r23, r23
    3526:	88 1f       	adc	r24, r24
    3528:	bb 1f       	adc	r27, r27
    352a:	62 17       	cp	r22, r18
    352c:	73 07       	cpc	r23, r19
    352e:	84 07       	cpc	r24, r20
    3530:	ba 07       	cpc	r27, r26
    3532:	20 f0       	brcs	.+8      	; 0x353c <__divsf3_pse+0xae>
    3534:	62 1b       	sub	r22, r18
    3536:	73 0b       	sbc	r23, r19
    3538:	84 0b       	sbc	r24, r20
    353a:	ba 0b       	sbc	r27, r26
    353c:	ee 1f       	adc	r30, r30
    353e:	88 f7       	brcc	.-30     	; 0x3522 <__divsf3_pse+0x94>
    3540:	e0 95       	com	r30
    3542:	08 95       	ret

00003544 <__fixsfsi>:
    3544:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixunssfsi>
    3548:	68 94       	set
    354a:	b1 11       	cpse	r27, r1
    354c:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_szero>
    3550:	08 95       	ret

00003552 <__fixunssfsi>:
    3552:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fp_splitA>
    3556:	88 f0       	brcs	.+34     	; 0x357a <__fixunssfsi+0x28>
    3558:	9f 57       	subi	r25, 0x7F	; 127
    355a:	98 f0       	brcs	.+38     	; 0x3582 <__fixunssfsi+0x30>
    355c:	b9 2f       	mov	r27, r25
    355e:	99 27       	eor	r25, r25
    3560:	b7 51       	subi	r27, 0x17	; 23
    3562:	b0 f0       	brcs	.+44     	; 0x3590 <__fixunssfsi+0x3e>
    3564:	e1 f0       	breq	.+56     	; 0x359e <__fixunssfsi+0x4c>
    3566:	66 0f       	add	r22, r22
    3568:	77 1f       	adc	r23, r23
    356a:	88 1f       	adc	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	1a f0       	brmi	.+6      	; 0x3576 <__fixunssfsi+0x24>
    3570:	ba 95       	dec	r27
    3572:	c9 f7       	brne	.-14     	; 0x3566 <__fixunssfsi+0x14>
    3574:	14 c0       	rjmp	.+40     	; 0x359e <__fixunssfsi+0x4c>
    3576:	b1 30       	cpi	r27, 0x01	; 1
    3578:	91 f0       	breq	.+36     	; 0x359e <__fixunssfsi+0x4c>
    357a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__fp_zero>
    357e:	b1 e0       	ldi	r27, 0x01	; 1
    3580:	08 95       	ret
    3582:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__fp_zero>
    3586:	67 2f       	mov	r22, r23
    3588:	78 2f       	mov	r23, r24
    358a:	88 27       	eor	r24, r24
    358c:	b8 5f       	subi	r27, 0xF8	; 248
    358e:	39 f0       	breq	.+14     	; 0x359e <__fixunssfsi+0x4c>
    3590:	b9 3f       	cpi	r27, 0xF9	; 249
    3592:	cc f3       	brlt	.-14     	; 0x3586 <__fixunssfsi+0x34>
    3594:	86 95       	lsr	r24
    3596:	77 95       	ror	r23
    3598:	67 95       	ror	r22
    359a:	b3 95       	inc	r27
    359c:	d9 f7       	brne	.-10     	; 0x3594 <__fixunssfsi+0x42>
    359e:	3e f4       	brtc	.+14     	; 0x35ae <__fixunssfsi+0x5c>
    35a0:	90 95       	com	r25
    35a2:	80 95       	com	r24
    35a4:	70 95       	com	r23
    35a6:	61 95       	neg	r22
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	8f 4f       	sbci	r24, 0xFF	; 255
    35ac:	9f 4f       	sbci	r25, 0xFF	; 255
    35ae:	08 95       	ret

000035b0 <__floatunsisf>:
    35b0:	e8 94       	clt
    35b2:	09 c0       	rjmp	.+18     	; 0x35c6 <__floatsisf+0x12>

000035b4 <__floatsisf>:
    35b4:	97 fb       	bst	r25, 7
    35b6:	3e f4       	brtc	.+14     	; 0x35c6 <__floatsisf+0x12>
    35b8:	90 95       	com	r25
    35ba:	80 95       	com	r24
    35bc:	70 95       	com	r23
    35be:	61 95       	neg	r22
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	8f 4f       	sbci	r24, 0xFF	; 255
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	99 23       	and	r25, r25
    35c8:	a9 f0       	breq	.+42     	; 0x35f4 <__floatsisf+0x40>
    35ca:	f9 2f       	mov	r31, r25
    35cc:	96 e9       	ldi	r25, 0x96	; 150
    35ce:	bb 27       	eor	r27, r27
    35d0:	93 95       	inc	r25
    35d2:	f6 95       	lsr	r31
    35d4:	87 95       	ror	r24
    35d6:	77 95       	ror	r23
    35d8:	67 95       	ror	r22
    35da:	b7 95       	ror	r27
    35dc:	f1 11       	cpse	r31, r1
    35de:	f8 cf       	rjmp	.-16     	; 0x35d0 <__floatsisf+0x1c>
    35e0:	fa f4       	brpl	.+62     	; 0x3620 <__floatsisf+0x6c>
    35e2:	bb 0f       	add	r27, r27
    35e4:	11 f4       	brne	.+4      	; 0x35ea <__floatsisf+0x36>
    35e6:	60 ff       	sbrs	r22, 0
    35e8:	1b c0       	rjmp	.+54     	; 0x3620 <__floatsisf+0x6c>
    35ea:	6f 5f       	subi	r22, 0xFF	; 255
    35ec:	7f 4f       	sbci	r23, 0xFF	; 255
    35ee:	8f 4f       	sbci	r24, 0xFF	; 255
    35f0:	9f 4f       	sbci	r25, 0xFF	; 255
    35f2:	16 c0       	rjmp	.+44     	; 0x3620 <__floatsisf+0x6c>
    35f4:	88 23       	and	r24, r24
    35f6:	11 f0       	breq	.+4      	; 0x35fc <__floatsisf+0x48>
    35f8:	96 e9       	ldi	r25, 0x96	; 150
    35fa:	11 c0       	rjmp	.+34     	; 0x361e <__floatsisf+0x6a>
    35fc:	77 23       	and	r23, r23
    35fe:	21 f0       	breq	.+8      	; 0x3608 <__floatsisf+0x54>
    3600:	9e e8       	ldi	r25, 0x8E	; 142
    3602:	87 2f       	mov	r24, r23
    3604:	76 2f       	mov	r23, r22
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <__floatsisf+0x5e>
    3608:	66 23       	and	r22, r22
    360a:	71 f0       	breq	.+28     	; 0x3628 <__floatsisf+0x74>
    360c:	96 e8       	ldi	r25, 0x86	; 134
    360e:	86 2f       	mov	r24, r22
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	2a f0       	brmi	.+10     	; 0x3620 <__floatsisf+0x6c>
    3616:	9a 95       	dec	r25
    3618:	66 0f       	add	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	88 1f       	adc	r24, r24
    361e:	da f7       	brpl	.-10     	; 0x3616 <__floatsisf+0x62>
    3620:	88 0f       	add	r24, r24
    3622:	96 95       	lsr	r25
    3624:	87 95       	ror	r24
    3626:	97 f9       	bld	r25, 7
    3628:	08 95       	ret

0000362a <__fp_cmp>:
    362a:	99 0f       	add	r25, r25
    362c:	00 08       	sbc	r0, r0
    362e:	55 0f       	add	r21, r21
    3630:	aa 0b       	sbc	r26, r26
    3632:	e0 e8       	ldi	r30, 0x80	; 128
    3634:	fe ef       	ldi	r31, 0xFE	; 254
    3636:	16 16       	cp	r1, r22
    3638:	17 06       	cpc	r1, r23
    363a:	e8 07       	cpc	r30, r24
    363c:	f9 07       	cpc	r31, r25
    363e:	c0 f0       	brcs	.+48     	; 0x3670 <__fp_cmp+0x46>
    3640:	12 16       	cp	r1, r18
    3642:	13 06       	cpc	r1, r19
    3644:	e4 07       	cpc	r30, r20
    3646:	f5 07       	cpc	r31, r21
    3648:	98 f0       	brcs	.+38     	; 0x3670 <__fp_cmp+0x46>
    364a:	62 1b       	sub	r22, r18
    364c:	73 0b       	sbc	r23, r19
    364e:	84 0b       	sbc	r24, r20
    3650:	95 0b       	sbc	r25, r21
    3652:	39 f4       	brne	.+14     	; 0x3662 <__fp_cmp+0x38>
    3654:	0a 26       	eor	r0, r26
    3656:	61 f0       	breq	.+24     	; 0x3670 <__fp_cmp+0x46>
    3658:	23 2b       	or	r18, r19
    365a:	24 2b       	or	r18, r20
    365c:	25 2b       	or	r18, r21
    365e:	21 f4       	brne	.+8      	; 0x3668 <__fp_cmp+0x3e>
    3660:	08 95       	ret
    3662:	0a 26       	eor	r0, r26
    3664:	09 f4       	brne	.+2      	; 0x3668 <__fp_cmp+0x3e>
    3666:	a1 40       	sbci	r26, 0x01	; 1
    3668:	a6 95       	lsr	r26
    366a:	8f ef       	ldi	r24, 0xFF	; 255
    366c:	81 1d       	adc	r24, r1
    366e:	81 1d       	adc	r24, r1
    3670:	08 95       	ret

00003672 <__fp_inf>:
    3672:	97 f9       	bld	r25, 7
    3674:	9f 67       	ori	r25, 0x7F	; 127
    3676:	80 e8       	ldi	r24, 0x80	; 128
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	08 95       	ret

0000367e <__fp_nan>:
    367e:	9f ef       	ldi	r25, 0xFF	; 255
    3680:	80 ec       	ldi	r24, 0xC0	; 192
    3682:	08 95       	ret

00003684 <__fp_pscA>:
    3684:	00 24       	eor	r0, r0
    3686:	0a 94       	dec	r0
    3688:	16 16       	cp	r1, r22
    368a:	17 06       	cpc	r1, r23
    368c:	18 06       	cpc	r1, r24
    368e:	09 06       	cpc	r0, r25
    3690:	08 95       	ret

00003692 <__fp_pscB>:
    3692:	00 24       	eor	r0, r0
    3694:	0a 94       	dec	r0
    3696:	12 16       	cp	r1, r18
    3698:	13 06       	cpc	r1, r19
    369a:	14 06       	cpc	r1, r20
    369c:	05 06       	cpc	r0, r21
    369e:	08 95       	ret

000036a0 <__fp_round>:
    36a0:	09 2e       	mov	r0, r25
    36a2:	03 94       	inc	r0
    36a4:	00 0c       	add	r0, r0
    36a6:	11 f4       	brne	.+4      	; 0x36ac <__fp_round+0xc>
    36a8:	88 23       	and	r24, r24
    36aa:	52 f0       	brmi	.+20     	; 0x36c0 <__fp_round+0x20>
    36ac:	bb 0f       	add	r27, r27
    36ae:	40 f4       	brcc	.+16     	; 0x36c0 <__fp_round+0x20>
    36b0:	bf 2b       	or	r27, r31
    36b2:	11 f4       	brne	.+4      	; 0x36b8 <__fp_round+0x18>
    36b4:	60 ff       	sbrs	r22, 0
    36b6:	04 c0       	rjmp	.+8      	; 0x36c0 <__fp_round+0x20>
    36b8:	6f 5f       	subi	r22, 0xFF	; 255
    36ba:	7f 4f       	sbci	r23, 0xFF	; 255
    36bc:	8f 4f       	sbci	r24, 0xFF	; 255
    36be:	9f 4f       	sbci	r25, 0xFF	; 255
    36c0:	08 95       	ret

000036c2 <__fp_split3>:
    36c2:	57 fd       	sbrc	r21, 7
    36c4:	90 58       	subi	r25, 0x80	; 128
    36c6:	44 0f       	add	r20, r20
    36c8:	55 1f       	adc	r21, r21
    36ca:	59 f0       	breq	.+22     	; 0x36e2 <__fp_splitA+0x10>
    36cc:	5f 3f       	cpi	r21, 0xFF	; 255
    36ce:	71 f0       	breq	.+28     	; 0x36ec <__fp_splitA+0x1a>
    36d0:	47 95       	ror	r20

000036d2 <__fp_splitA>:
    36d2:	88 0f       	add	r24, r24
    36d4:	97 fb       	bst	r25, 7
    36d6:	99 1f       	adc	r25, r25
    36d8:	61 f0       	breq	.+24     	; 0x36f2 <__fp_splitA+0x20>
    36da:	9f 3f       	cpi	r25, 0xFF	; 255
    36dc:	79 f0       	breq	.+30     	; 0x36fc <__fp_splitA+0x2a>
    36de:	87 95       	ror	r24
    36e0:	08 95       	ret
    36e2:	12 16       	cp	r1, r18
    36e4:	13 06       	cpc	r1, r19
    36e6:	14 06       	cpc	r1, r20
    36e8:	55 1f       	adc	r21, r21
    36ea:	f2 cf       	rjmp	.-28     	; 0x36d0 <__fp_split3+0xe>
    36ec:	46 95       	lsr	r20
    36ee:	f1 df       	rcall	.-30     	; 0x36d2 <__fp_splitA>
    36f0:	08 c0       	rjmp	.+16     	; 0x3702 <__fp_splitA+0x30>
    36f2:	16 16       	cp	r1, r22
    36f4:	17 06       	cpc	r1, r23
    36f6:	18 06       	cpc	r1, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	f1 cf       	rjmp	.-30     	; 0x36de <__fp_splitA+0xc>
    36fc:	86 95       	lsr	r24
    36fe:	71 05       	cpc	r23, r1
    3700:	61 05       	cpc	r22, r1
    3702:	08 94       	sec
    3704:	08 95       	ret

00003706 <__fp_zero>:
    3706:	e8 94       	clt

00003708 <__fp_szero>:
    3708:	bb 27       	eor	r27, r27
    370a:	66 27       	eor	r22, r22
    370c:	77 27       	eor	r23, r23
    370e:	cb 01       	movw	r24, r22
    3710:	97 f9       	bld	r25, 7
    3712:	08 95       	ret

00003714 <__gesf2>:
    3714:	0e 94 15 1b 	call	0x362a	; 0x362a <__fp_cmp>
    3718:	08 f4       	brcc	.+2      	; 0x371c <__gesf2+0x8>
    371a:	8f ef       	ldi	r24, 0xFF	; 255
    371c:	08 95       	ret

0000371e <__mulsf3>:
    371e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__mulsf3x>
    3722:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__fp_round>
    3726:	0e 94 42 1b 	call	0x3684	; 0x3684 <__fp_pscA>
    372a:	38 f0       	brcs	.+14     	; 0x373a <__mulsf3+0x1c>
    372c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_pscB>
    3730:	20 f0       	brcs	.+8      	; 0x373a <__mulsf3+0x1c>
    3732:	95 23       	and	r25, r21
    3734:	11 f0       	breq	.+4      	; 0x373a <__mulsf3+0x1c>
    3736:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__fp_inf>
    373a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__fp_nan>
    373e:	11 24       	eor	r1, r1
    3740:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_szero>

00003744 <__mulsf3x>:
    3744:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__fp_split3>
    3748:	70 f3       	brcs	.-36     	; 0x3726 <__mulsf3+0x8>

0000374a <__mulsf3_pse>:
    374a:	95 9f       	mul	r25, r21
    374c:	c1 f3       	breq	.-16     	; 0x373e <__mulsf3+0x20>
    374e:	95 0f       	add	r25, r21
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	55 1f       	adc	r21, r21
    3754:	62 9f       	mul	r22, r18
    3756:	f0 01       	movw	r30, r0
    3758:	72 9f       	mul	r23, r18
    375a:	bb 27       	eor	r27, r27
    375c:	f0 0d       	add	r31, r0
    375e:	b1 1d       	adc	r27, r1
    3760:	63 9f       	mul	r22, r19
    3762:	aa 27       	eor	r26, r26
    3764:	f0 0d       	add	r31, r0
    3766:	b1 1d       	adc	r27, r1
    3768:	aa 1f       	adc	r26, r26
    376a:	64 9f       	mul	r22, r20
    376c:	66 27       	eor	r22, r22
    376e:	b0 0d       	add	r27, r0
    3770:	a1 1d       	adc	r26, r1
    3772:	66 1f       	adc	r22, r22
    3774:	82 9f       	mul	r24, r18
    3776:	22 27       	eor	r18, r18
    3778:	b0 0d       	add	r27, r0
    377a:	a1 1d       	adc	r26, r1
    377c:	62 1f       	adc	r22, r18
    377e:	73 9f       	mul	r23, r19
    3780:	b0 0d       	add	r27, r0
    3782:	a1 1d       	adc	r26, r1
    3784:	62 1f       	adc	r22, r18
    3786:	83 9f       	mul	r24, r19
    3788:	a0 0d       	add	r26, r0
    378a:	61 1d       	adc	r22, r1
    378c:	22 1f       	adc	r18, r18
    378e:	74 9f       	mul	r23, r20
    3790:	33 27       	eor	r19, r19
    3792:	a0 0d       	add	r26, r0
    3794:	61 1d       	adc	r22, r1
    3796:	23 1f       	adc	r18, r19
    3798:	84 9f       	mul	r24, r20
    379a:	60 0d       	add	r22, r0
    379c:	21 1d       	adc	r18, r1
    379e:	82 2f       	mov	r24, r18
    37a0:	76 2f       	mov	r23, r22
    37a2:	6a 2f       	mov	r22, r26
    37a4:	11 24       	eor	r1, r1
    37a6:	9f 57       	subi	r25, 0x7F	; 127
    37a8:	50 40       	sbci	r21, 0x00	; 0
    37aa:	9a f0       	brmi	.+38     	; 0x37d2 <__mulsf3_pse+0x88>
    37ac:	f1 f0       	breq	.+60     	; 0x37ea <__mulsf3_pse+0xa0>
    37ae:	88 23       	and	r24, r24
    37b0:	4a f0       	brmi	.+18     	; 0x37c4 <__mulsf3_pse+0x7a>
    37b2:	ee 0f       	add	r30, r30
    37b4:	ff 1f       	adc	r31, r31
    37b6:	bb 1f       	adc	r27, r27
    37b8:	66 1f       	adc	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	88 1f       	adc	r24, r24
    37be:	91 50       	subi	r25, 0x01	; 1
    37c0:	50 40       	sbci	r21, 0x00	; 0
    37c2:	a9 f7       	brne	.-22     	; 0x37ae <__mulsf3_pse+0x64>
    37c4:	9e 3f       	cpi	r25, 0xFE	; 254
    37c6:	51 05       	cpc	r21, r1
    37c8:	80 f0       	brcs	.+32     	; 0x37ea <__mulsf3_pse+0xa0>
    37ca:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__fp_inf>
    37ce:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_szero>
    37d2:	5f 3f       	cpi	r21, 0xFF	; 255
    37d4:	e4 f3       	brlt	.-8      	; 0x37ce <__mulsf3_pse+0x84>
    37d6:	98 3e       	cpi	r25, 0xE8	; 232
    37d8:	d4 f3       	brlt	.-12     	; 0x37ce <__mulsf3_pse+0x84>
    37da:	86 95       	lsr	r24
    37dc:	77 95       	ror	r23
    37de:	67 95       	ror	r22
    37e0:	b7 95       	ror	r27
    37e2:	f7 95       	ror	r31
    37e4:	e7 95       	ror	r30
    37e6:	9f 5f       	subi	r25, 0xFF	; 255
    37e8:	c1 f7       	brne	.-16     	; 0x37da <__mulsf3_pse+0x90>
    37ea:	fe 2b       	or	r31, r30
    37ec:	88 0f       	add	r24, r24
    37ee:	91 1d       	adc	r25, r1
    37f0:	96 95       	lsr	r25
    37f2:	87 95       	ror	r24
    37f4:	97 f9       	bld	r25, 7
    37f6:	08 95       	ret

000037f8 <round>:
    37f8:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fp_splitA>
    37fc:	e8 f0       	brcs	.+58     	; 0x3838 <round+0x40>
    37fe:	9e 37       	cpi	r25, 0x7E	; 126
    3800:	e8 f0       	brcs	.+58     	; 0x383c <round+0x44>
    3802:	96 39       	cpi	r25, 0x96	; 150
    3804:	b8 f4       	brcc	.+46     	; 0x3834 <round+0x3c>
    3806:	9e 38       	cpi	r25, 0x8E	; 142
    3808:	48 f4       	brcc	.+18     	; 0x381c <round+0x24>
    380a:	67 2f       	mov	r22, r23
    380c:	78 2f       	mov	r23, r24
    380e:	88 27       	eor	r24, r24
    3810:	98 5f       	subi	r25, 0xF8	; 248
    3812:	f9 cf       	rjmp	.-14     	; 0x3806 <round+0xe>
    3814:	86 95       	lsr	r24
    3816:	77 95       	ror	r23
    3818:	67 95       	ror	r22
    381a:	93 95       	inc	r25
    381c:	95 39       	cpi	r25, 0x95	; 149
    381e:	d0 f3       	brcs	.-12     	; 0x3814 <round+0x1c>
    3820:	b6 2f       	mov	r27, r22
    3822:	b1 70       	andi	r27, 0x01	; 1
    3824:	6b 0f       	add	r22, r27
    3826:	71 1d       	adc	r23, r1
    3828:	81 1d       	adc	r24, r1
    382a:	20 f4       	brcc	.+8      	; 0x3834 <round+0x3c>
    382c:	87 95       	ror	r24
    382e:	77 95       	ror	r23
    3830:	67 95       	ror	r22
    3832:	93 95       	inc	r25
    3834:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__fp_mintl>
    3838:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__fp_mpack>
    383c:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_szero>

00003840 <__fp_mintl>:
    3840:	88 23       	and	r24, r24
    3842:	71 f4       	brne	.+28     	; 0x3860 <__fp_mintl+0x20>
    3844:	77 23       	and	r23, r23
    3846:	21 f0       	breq	.+8      	; 0x3850 <__fp_mintl+0x10>
    3848:	98 50       	subi	r25, 0x08	; 8
    384a:	87 2b       	or	r24, r23
    384c:	76 2f       	mov	r23, r22
    384e:	07 c0       	rjmp	.+14     	; 0x385e <__fp_mintl+0x1e>
    3850:	66 23       	and	r22, r22
    3852:	11 f4       	brne	.+4      	; 0x3858 <__fp_mintl+0x18>
    3854:	99 27       	eor	r25, r25
    3856:	0d c0       	rjmp	.+26     	; 0x3872 <__fp_mintl+0x32>
    3858:	90 51       	subi	r25, 0x10	; 16
    385a:	86 2b       	or	r24, r22
    385c:	70 e0       	ldi	r23, 0x00	; 0
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	2a f0       	brmi	.+10     	; 0x386c <__fp_mintl+0x2c>
    3862:	9a 95       	dec	r25
    3864:	66 0f       	add	r22, r22
    3866:	77 1f       	adc	r23, r23
    3868:	88 1f       	adc	r24, r24
    386a:	da f7       	brpl	.-10     	; 0x3862 <__fp_mintl+0x22>
    386c:	88 0f       	add	r24, r24
    386e:	96 95       	lsr	r25
    3870:	87 95       	ror	r24
    3872:	97 f9       	bld	r25, 7
    3874:	08 95       	ret

00003876 <__fp_mpack>:
    3876:	9f 3f       	cpi	r25, 0xFF	; 255
    3878:	31 f0       	breq	.+12     	; 0x3886 <__fp_mpack_finite+0xc>

0000387a <__fp_mpack_finite>:
    387a:	91 50       	subi	r25, 0x01	; 1
    387c:	20 f4       	brcc	.+8      	; 0x3886 <__fp_mpack_finite+0xc>
    387e:	87 95       	ror	r24
    3880:	77 95       	ror	r23
    3882:	67 95       	ror	r22
    3884:	b7 95       	ror	r27
    3886:	88 0f       	add	r24, r24
    3888:	91 1d       	adc	r25, r1
    388a:	96 95       	lsr	r25
    388c:	87 95       	ror	r24
    388e:	97 f9       	bld	r25, 7
    3890:	08 95       	ret

00003892 <__divmodhi4>:
    3892:	97 fb       	bst	r25, 7
    3894:	07 2e       	mov	r0, r23
    3896:	16 f4       	brtc	.+4      	; 0x389c <__divmodhi4+0xa>
    3898:	00 94       	com	r0
    389a:	07 d0       	rcall	.+14     	; 0x38aa <__divmodhi4_neg1>
    389c:	77 fd       	sbrc	r23, 7
    389e:	09 d0       	rcall	.+18     	; 0x38b2 <__divmodhi4_neg2>
    38a0:	0e 94 9e 1c 	call	0x393c	; 0x393c <__udivmodhi4>
    38a4:	07 fc       	sbrc	r0, 7
    38a6:	05 d0       	rcall	.+10     	; 0x38b2 <__divmodhi4_neg2>
    38a8:	3e f4       	brtc	.+14     	; 0x38b8 <__divmodhi4_exit>

000038aa <__divmodhi4_neg1>:
    38aa:	90 95       	com	r25
    38ac:	81 95       	neg	r24
    38ae:	9f 4f       	sbci	r25, 0xFF	; 255
    38b0:	08 95       	ret

000038b2 <__divmodhi4_neg2>:
    38b2:	70 95       	com	r23
    38b4:	61 95       	neg	r22
    38b6:	7f 4f       	sbci	r23, 0xFF	; 255

000038b8 <__divmodhi4_exit>:
    38b8:	08 95       	ret

000038ba <__udivmodsi4>:
    38ba:	a1 e2       	ldi	r26, 0x21	; 33
    38bc:	1a 2e       	mov	r1, r26
    38be:	aa 1b       	sub	r26, r26
    38c0:	bb 1b       	sub	r27, r27
    38c2:	fd 01       	movw	r30, r26
    38c4:	0d c0       	rjmp	.+26     	; 0x38e0 <__udivmodsi4_ep>

000038c6 <__udivmodsi4_loop>:
    38c6:	aa 1f       	adc	r26, r26
    38c8:	bb 1f       	adc	r27, r27
    38ca:	ee 1f       	adc	r30, r30
    38cc:	ff 1f       	adc	r31, r31
    38ce:	a2 17       	cp	r26, r18
    38d0:	b3 07       	cpc	r27, r19
    38d2:	e4 07       	cpc	r30, r20
    38d4:	f5 07       	cpc	r31, r21
    38d6:	20 f0       	brcs	.+8      	; 0x38e0 <__udivmodsi4_ep>
    38d8:	a2 1b       	sub	r26, r18
    38da:	b3 0b       	sbc	r27, r19
    38dc:	e4 0b       	sbc	r30, r20
    38de:	f5 0b       	sbc	r31, r21

000038e0 <__udivmodsi4_ep>:
    38e0:	66 1f       	adc	r22, r22
    38e2:	77 1f       	adc	r23, r23
    38e4:	88 1f       	adc	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	1a 94       	dec	r1
    38ea:	69 f7       	brne	.-38     	; 0x38c6 <__udivmodsi4_loop>
    38ec:	60 95       	com	r22
    38ee:	70 95       	com	r23
    38f0:	80 95       	com	r24
    38f2:	90 95       	com	r25
    38f4:	9b 01       	movw	r18, r22
    38f6:	ac 01       	movw	r20, r24
    38f8:	bd 01       	movw	r22, r26
    38fa:	cf 01       	movw	r24, r30
    38fc:	08 95       	ret

000038fe <__divmodsi4>:
    38fe:	05 2e       	mov	r0, r21
    3900:	97 fb       	bst	r25, 7
    3902:	1e f4       	brtc	.+6      	; 0x390a <__divmodsi4+0xc>
    3904:	00 94       	com	r0
    3906:	0e 94 96 1c 	call	0x392c	; 0x392c <__negsi2>
    390a:	57 fd       	sbrc	r21, 7
    390c:	07 d0       	rcall	.+14     	; 0x391c <__divmodsi4_neg2>
    390e:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__udivmodsi4>
    3912:	07 fc       	sbrc	r0, 7
    3914:	03 d0       	rcall	.+6      	; 0x391c <__divmodsi4_neg2>
    3916:	4e f4       	brtc	.+18     	; 0x392a <__divmodsi4_exit>
    3918:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__negsi2>

0000391c <__divmodsi4_neg2>:
    391c:	50 95       	com	r21
    391e:	40 95       	com	r20
    3920:	30 95       	com	r19
    3922:	21 95       	neg	r18
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	4f 4f       	sbci	r20, 0xFF	; 255
    3928:	5f 4f       	sbci	r21, 0xFF	; 255

0000392a <__divmodsi4_exit>:
    392a:	08 95       	ret

0000392c <__negsi2>:
    392c:	90 95       	com	r25
    392e:	80 95       	com	r24
    3930:	70 95       	com	r23
    3932:	61 95       	neg	r22
    3934:	7f 4f       	sbci	r23, 0xFF	; 255
    3936:	8f 4f       	sbci	r24, 0xFF	; 255
    3938:	9f 4f       	sbci	r25, 0xFF	; 255
    393a:	08 95       	ret

0000393c <__udivmodhi4>:
    393c:	aa 1b       	sub	r26, r26
    393e:	bb 1b       	sub	r27, r27
    3940:	51 e1       	ldi	r21, 0x11	; 17
    3942:	07 c0       	rjmp	.+14     	; 0x3952 <__udivmodhi4_ep>

00003944 <__udivmodhi4_loop>:
    3944:	aa 1f       	adc	r26, r26
    3946:	bb 1f       	adc	r27, r27
    3948:	a6 17       	cp	r26, r22
    394a:	b7 07       	cpc	r27, r23
    394c:	10 f0       	brcs	.+4      	; 0x3952 <__udivmodhi4_ep>
    394e:	a6 1b       	sub	r26, r22
    3950:	b7 0b       	sbc	r27, r23

00003952 <__udivmodhi4_ep>:
    3952:	88 1f       	adc	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	5a 95       	dec	r21
    3958:	a9 f7       	brne	.-22     	; 0x3944 <__udivmodhi4_loop>
    395a:	80 95       	com	r24
    395c:	90 95       	com	r25
    395e:	bc 01       	movw	r22, r24
    3960:	cd 01       	movw	r24, r26
    3962:	08 95       	ret

00003964 <eeprom_read_byte>:
    3964:	e1 99       	sbic	0x1c, 1	; 28
    3966:	fe cf       	rjmp	.-4      	; 0x3964 <eeprom_read_byte>
    3968:	9f bb       	out	0x1f, r25	; 31
    396a:	8e bb       	out	0x1e, r24	; 30
    396c:	e0 9a       	sbi	0x1c, 0	; 28
    396e:	99 27       	eor	r25, r25
    3970:	8d b3       	in	r24, 0x1d	; 29
    3972:	08 95       	ret

00003974 <eeprom_read_dword>:
    3974:	a6 e1       	ldi	r26, 0x16	; 22
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	44 e0       	ldi	r20, 0x04	; 4
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <eeprom_read_blraw>

00003980 <eeprom_read_word>:
    3980:	a8 e1       	ldi	r26, 0x18	; 24
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	42 e0       	ldi	r20, 0x02	; 2
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <eeprom_read_blraw>

0000398c <eeprom_write_byte>:
    398c:	26 2f       	mov	r18, r22

0000398e <eeprom_write_r18>:
    398e:	e1 99       	sbic	0x1c, 1	; 28
    3990:	fe cf       	rjmp	.-4      	; 0x398e <eeprom_write_r18>
    3992:	9f bb       	out	0x1f, r25	; 31
    3994:	8e bb       	out	0x1e, r24	; 30
    3996:	2d bb       	out	0x1d, r18	; 29
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	e2 9a       	sbi	0x1c, 2	; 28
    399e:	e1 9a       	sbi	0x1c, 1	; 28
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	01 96       	adiw	r24, 0x01	; 1
    39a4:	08 95       	ret

000039a6 <eeprom_write_dword>:
    39a6:	24 2f       	mov	r18, r20
    39a8:	0e 94 c7 1c 	call	0x398e	; 0x398e <eeprom_write_r18>
    39ac:	25 2f       	mov	r18, r21
    39ae:	0e 94 c7 1c 	call	0x398e	; 0x398e <eeprom_write_r18>
    39b2:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <eeprom_write_word>

000039b6 <eeprom_write_word>:
    39b6:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_write_byte>
    39ba:	27 2f       	mov	r18, r23
    39bc:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <eeprom_write_r18>

000039c0 <eeprom_read_block>:
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22

000039c4 <eeprom_read_blraw>:
    39c4:	fc 01       	movw	r30, r24
    39c6:	e1 99       	sbic	0x1c, 1	; 28
    39c8:	fe cf       	rjmp	.-4      	; 0x39c6 <eeprom_read_blraw+0x2>
    39ca:	06 c0       	rjmp	.+12     	; 0x39d8 <eeprom_read_blraw+0x14>
    39cc:	ff bb       	out	0x1f, r31	; 31
    39ce:	ee bb       	out	0x1e, r30	; 30
    39d0:	e0 9a       	sbi	0x1c, 0	; 28
    39d2:	31 96       	adiw	r30, 0x01	; 1
    39d4:	0d b2       	in	r0, 0x1d	; 29
    39d6:	0d 92       	st	X+, r0
    39d8:	41 50       	subi	r20, 0x01	; 1
    39da:	50 40       	sbci	r21, 0x00	; 0
    39dc:	b8 f7       	brcc	.-18     	; 0x39cc <eeprom_read_blraw+0x8>
    39de:	08 95       	ret

000039e0 <_exit>:
    39e0:	f8 94       	cli

000039e2 <__stop_program>:
    39e2:	ff cf       	rjmp	.-2      	; 0x39e2 <__stop_program>
